from utils import *

class MAS():
    def __init__(self, model_list):
        self.llm = LLM(model_list)

    def forward(self, taskInfo):
        """
        A multi-agent system for solving general tasks.
        
        Steps:
            1. Initialization: Create 3 agents, each independently generating an initial answer to the given task.
            2. Debate Simulation:
                Each agent reviews the answers from the other agents as additional context, and critique and refine their own answers, updating their responses.
                Repeat this process over multiple rounds to encourage convergence towards more accurate and consistent answers.

            3. Final Synthesis: Combine the refined answers from all 3 agents.
        """
        agent_num = 3 # Number of agents in the debate system
        round_num = 2 # Number of rounds for the debate simulation
        solutions = [] # Store the solutions generated by each agent
        agent_messages = [[] for _ in range(agent_num)] # Store the messages for each agent for multi-turn conversation

        # Generate the initial solution using a general prompt
        initial_prompt = (
            f"Task:\n{taskInfo}\n\n"
            f"Given the task, please think step by step and provide your answer."
        )
        
        # Call the llm to generate solution, use a high temperature for more diverse responses
        for i in range(agent_num):
            initial_solution, agent_messages[i] = self.llm.multi_turn_conversation(prompt=initial_prompt, messages=agent_messages[i], temperature=0.8)
            solutions.append(initial_solution)

        # Start the debate
        for _ in range(round_num):
            for i in range(agent_num):
                # Initialize the prompt for the debate simulation
                debate_prompt = (
                    f"Task:\n{taskInfo}\n\n"
                    "These are the solutions to the problem from other agents. Use the reasoning from other agents as additional advice and give an updated answer.\n "
                )
                for j in range(agent_num):
                    if i != j:
                        debate_prompt += f"Solution:\n{solutions[j]}\n\n"
                
                # Call the llm for multi-turn conversation to simulate the debate process
                solutions[i], agent_messages[i] = self.llm.multi_turn_conversation(prompt=debate_prompt, messages=agent_messages[i])
            
            
        # Final synthesis of the solutions
        final_solution = self.get_final_solution(taskInfo=taskInfo, solutions=solutions)
        # return the final solution
        return final_solution
    
    def get_final_solution(self, taskInfo, solutions):
        """
        Based on the given task, aggregate solutions and generate a final solution.

        Args:
            taskInfo (str): A description of the task that needs to be completed.
            solutions (list): A list containing solutions for the task.

        Returns:
            str: The final solution aggregating the solutions.
        """

        # Initialize the instruction text with a general guideline
        instruction = f"Task:\n{taskInfo}\n\n"

        # Append each solution to the instruction
        for i, solution in enumerate(solutions):
            instruction += f"Solution {i+1}:\n{solution}\n\n"  # Number each solution for clarity

        # Add the final prompt to encourage reasoning over the solutions and provide a final answer
        instruction += "Given all the above solutions, reason over them carefully and provide a final answer to the task."
        
        # Call the LLM to generate the final solution, using a low temperature for accuracy
        final_solution = self.llm.call_llm(prompt=instruction, temperature=0.3)
        
        return final_solution