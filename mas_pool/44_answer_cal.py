from utils import *  

class MAS():
    def __init__(self, model_list):
        self.llm = LLM(model_list)

    def forward(self, taskInfo):
        """
        A multi-agent system for solving math problems by executing code and directly answering.
        Steps:
            1. 2 agents independently solves the problem by breaking it down into steps and generating code, where each agent organizes the solution based on the code execution results, ensuring clarity and correctness.
            2. 2 agents generate a solution directly, which provides baseline solutions especially when code generation is challenging.
            3. A final agent evaluates all the solutions and determines the final solution.
        """

        # 4 parallel pipelines to solve the problem independently
        solutions = []
        
        # The first two pipelines generate code to solve the problem
        for _ in range(2):
            answer, output = self.generate_code_get_output(taskInfo)
            solution = self.organize(taskInfo, answer, output)
            solutions.append(solution)
        
        # The third pipeline generates a solution directly
        for _ in range(2):
            solution = self.llm.call_llm(taskInfo)
            solutions.append(solution)

        # Determine the final solution based on the generated solutions
        final_solution = self.get_final_solution(taskInfo, solutions)
        return final_solution

    def generate_code_get_output(self, taskInfo):
        """
        Generate Python code to solve the mathematical problem and execute the code to get the output.
        Args:
            taskInfo (str): The mathematical problem to be solved.

        Returns:
            a tuple containing:
                - str: The answer generated by the LLM model.
                - str: The output of the code execution.
        """
        code_generation_instruction = f"""You are an expert in solving mathematical problems.
**Problem:**
{taskInfo}

**Instructions:**
1. Analyze the problem and list the steps required to solve it.
2. Generate Python code that can help solve the problem. The code should:
    - Print important intermediate results in the calculation process, along with clear explanations.
    - Store the final calculation result in a variable named `output`. This variable should contain the final result of the computation and be defined at the global scope.
    - Be directly executable. The code should run and produce a result when executed.

Wrap your final code solution in <Code Solution> and </Code Solution>. For example:
<Code Solution>
Your function code here
</Code Solution>
"""
        # Call `generate_and_extract_code` to generate answer and extract the code
        answer, code = generate_and_extract_code(llm=self.llm, prompt=code_generation_instruction)
        # Call `execute_code` to execute the generated code and get output
        output = execute_code(code)
        return answer, output
    
    def organize(self, taskInfo, answer, result):
        """
        Organize the solution based on the code execution results.
        Args:
            taskInfo (str): The mathematical problem to be solved.
            answer (str): The initial solution generated by the LLM model.
            result (str): The output of the code execution.

        Returns:
            str: The organized solution based on the code execution results.
        """
        organize_instruction = f"""**Problem:**
{taskInfo}

**Initial Solution:**
{answer}

**Code Execution Result:**
{result}

To solve the **Problem**, the **Initial Solution** provides steps and python code for calculations. The **Code Execution Result** is the output of the code.

Based on the **Initial Solution** and **Code Execution Result**, provide a final solution to the problem. Include the results of the code calculation in your response. Your final response should be complete as if you are directly answering the problem."""
        solution = self.llm.call_llm(organize_instruction)
        return solution

    def get_final_solution(self, taskInfo, solutions):
        """
        Evaluate the solutions provided by the agents and determine the final solution.
        Args:
            taskInfo (str): The mathematical problem to be solved.
            solutions (list): A list of solutions provided by the agents.
            
        Returns:
            str: The final solution to the mathematical problem.
        """
        # Prepare the solutions in a numbered format for evaluation
        solutions_str = ""
        for i, solution in enumerate(solutions):
            solutions_str += f"Solution {i+1}\n{solution}\n\n"
        final_solution_instruction = f"""**Problem:**
{taskInfo}

**Solutions:**
{solutions_str}

Several solutions are given to solve the problem. Carefully evaluate these solutions. This consistency in answers is crucial for determining the most reliable solution.

You should provide a final solution to the problem. Your final response should be complete as if you are directly answering the problem."""
        final_solution = self.llm.call_llm(final_solution_instruction)
        return final_solution
