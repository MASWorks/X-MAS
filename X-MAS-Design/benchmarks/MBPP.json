[
  {
    "query": "Write a function to count the most common words in a dictionary.\nHere is an example test:\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the volume of a triangular prism.\nHere is an example test:\nassert find_Volume(10,8,6) == 240\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to split a string at lowercase letters.\nHere is an example test:\nassert split_lowerstring(\"AbCd\")==['bC','d']\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the perimeter of a square.\nHere is an example test:\nassert square_perimeter(10)==40\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove characters from the first string which are present in the second string.\nHere is an example test:\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find whether a given array of integers contains any duplicate element.\nHere is an example test:\nassert test_duplicate(([1,2,3,4,5]))==False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check if the given number is woodball or not.\nHere is an example test:\nassert is_woodall(383) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False",
      "assert is_woodall(32212254719) == True",
      "assert is_woodall(32212254718) == False",
      "assert is_woodall(159) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the maximum sum of elements of list in a list of lists.\nHere is an example test:\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
      "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check if the given tuple list has all k elements.\nHere is an example test:\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to remove all digits from a list of strings.\nHere is an example test:\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the largest prime factor of a given number.\nHere is an example test:\nassert max_Prime_Factors(15) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to convert a decimal number to binary number.\nHere is an example test:\nassert decimal_To_Binary(10) == 1010\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the nth digit in the proper fraction of two given numbers.\nHere is an example test:\nassert find_Nth_Digit(1,2,1) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find frequency of the elements in a given list of lists using collections module.\nHere is an example test:\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the sum of repeated elements in a given array.\nHere is an example test:\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2",
      "assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function that matches a word at the beginning of a string.\nHere is an example test:\nassert text_match_string(\" python\")==('Not matched!')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')",
      "assert text_match_string(\"foo\")==('Found a match!')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the gcd of the given array elements.\nHere is an example test:\nassert get_gcd([2, 4, 6, 8, 16]) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to determine whether all the numbers are different from each other are not.\nHere is an example test:\nassert test_distinct([1,5,7,9]) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the list with minimum length using lambda function.\nHere is an example test:\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to print check if the triangle is equilateral or not.\nHere is an example test:\nassert check_equilateral(6,8,12)==False \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find t-nth term of geometric series.\nHere is an example test:\nassert tn_gp(1,5,2)==16\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the largest number that can be formed with the given digits.\nHere is an example test:\nassert find_Max_Num([1,2,3],3) == 321\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nHere is an example test:\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count number of substrings with the sum of digits equal to their length.\nHere is an example test:\nassert count_Substrings('112112',6) == 6\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find smallest number in a list.\nHere is an example test:\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def smallest_num(xs):\n  return min(xs)\n",
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count positive numbers in a list.\nHere is an example test:\nassert pos_count([1,-2,3,-4]) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the number of ways to partition a set of bell numbers.\nHere is an example test:\nassert bell_number(2)==2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the given array is monotonic or not.\nHere is an example test:\nassert is_Monotonic([6, 5, 4, 4]) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find whether all the given tuples have equal length or not.\nHere is an example test:\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort a list of elements using comb sort.\nHere is an example test:\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the given number can be represented as difference of two squares or not.\nHere is an example test:\nassert dif_Square(5) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether it follows the sequence given in the patterns array.\nHere is an example test:\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nHere is an example test:\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count the number of squares in a rectangle.\nHere is an example test:\nassert count_Squares(4,3) == 20\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the length of the word is odd or not.\nHere is an example test:\nassert word_len(\"Hadoop\") == False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the volume of a sphere.\nHere is an example test:\nassert volume_sphere(10)==4188.790204786391\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the character made by adding all the characters of the given string.\nHere is an example test:\nassert get_Char(\"abc\") == \"f\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the surface area of a sphere.\nHere is an example test:\nassert surfacearea_sphere(10)==1256.6370614359173\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find nth centered hexagonal number.\nHere is an example test:\nassert centered_hexagonal_number(10) == 271\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to merge three dictionaries into a single expression.\nHere is an example test:\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to get the frequency of the elements in a list.\nHere is an example test:\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the closest smaller number than n.\nHere is an example test:\nassert closest_num(11) == 10\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def closest_num(N):\r\n  return (N - 1)",
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the length of the longest word.\nHere is an example test:\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the number of divisors of a given integer.\nHere is an example test:\nassert divisor(15) == 4 \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find frequency count of list of lists.\nHere is an example test:\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to multiply all the numbers in a list and divide with the length of the list.\nHere is an example test:\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to convert snake case string to camel case string.\nHere is an example test:\nassert snake_to_camel('python_program')=='PythonProgram'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find eulerian number a(n, m).\nHere is an example test:\nassert eulerian_num(3, 1) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\nHere is an example test:\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the count of rotations of a binary string with odd value.\nHere is an example test:\nassert odd_Equivalent(\"011001\",6) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\nHere is an example test:\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\nHere is an example test:\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check if a string represents an integer or not.\nHere is an example test:\nassert check_integer(\"python\")==False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to assign frequency to each tuple in the given tuple list.\nHere is an example test:\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether all dictionaries in a list are empty or not.\nHere is an example test:\nassert empty_dit([{},{},{}])==True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the element that appears only once in a sorted array.\nHere is an example test:\nassert search([1,1,2,2,3],5) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the sum of common divisors of two given numbers.\nHere is an example test:\nassert sum(10,15) == 6\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to multiply two integers without using the * operator in python.\nHere is an example test:\nassert multiply_int(10,20)==200\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to shortlist words that are longer than n from a given list of words.\nHere is an example test:\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to convert tuple to a string.\nHere is an example test:\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nHere is an example test:\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\nHere is an example test:\nassert check_last([5,7,10],3,1) == \"ODD\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate electricity bill.\nHere is an example test:\nassert cal_electbill(75)==246.25\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nHere is an example test:\nassert is_Sum_Of_Powers_Of_Two(10) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find number of lists present in the given tuple.\nHere is an example test:\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the maximum difference between any two elements in a given array.\nHere is an example test:\nassert max_Abs_Diff((2,1,5,3),4) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the ascii value of total characters in a string.\nHere is an example test:\nassert ascii_value_string(\"python\")==112\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the given number is co-prime or not.\nHere is an example test:\nassert is_coprime(17,13) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort the given array by using merge sort.\nHere is an example test:\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the vertex of a parabola.\nHere is an example test:\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to extract every specified element from a given two dimensional list.\nHere is an example test:\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to convert a tuple of string values to a tuple of integer values.\nHere is an example test:\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find k number of operations required to make all elements equal.\nHere is an example test:\nassert min_Ops([2,2,2,2],4,3) == 0\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to print the season for the given month and day.\nHere is an example test:\nassert month_season('January',4)==('winter')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find x and y that satisfies ax + by = n.\nHere is an example test:\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove all elements from a given list present in another list.\nHere is an example test:\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nHere is an example test:\nassert sum_series(6)==12\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the area of a regular polygon.\nHere is an example test:\nassert area_polygon(4,20)==400.00000000000006\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nHere is an example test:\nassert count_char_position(\"xbcefg\") == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count the pairs with xor as an even number.\nHere is an example test:\nassert find_even_Pair([5,4,7,2,1],5) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the nth pell number.\nHere is an example test:\nassert get_pell(4) == 12\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find sum of the numbers in a list between the indices of a specified range.\nHere is an example test:\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nHere is an example test:\nassert count_occurance(\"letstdlenstdporstd\") == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the perimeter of a triangle.\nHere is an example test:\nassert perimeter_triangle(10,20,30)==60\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to search some literals strings in a string.\nHere is an example test:\nassert string_literals(['language'],'python language')==('Matched!')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\nHere is an example test:\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find all the values in a list that are greater than a specified number.\nHere is an example test:\nassert greater_specificnum([220, 330, 500],200)==True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the longest common subsequence for the given two sequences.\nHere is an example test:\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the given number can be represented by product of two squares or not.\nHere is an example test:\nassert prod_Square(25) == False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the first missing positive number.\nHere is an example test:\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether the given month name contains 30 days or not.\nHere is an example test:\nassert check_monthnumber(\"February\")==False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove the duplicates from the given tuple.\nHere is an example test:\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to perform the exponentiation of the given two tuples.\nHere is an example test:\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the largest triangle that can be inscribed in an ellipse.\nHere is an example test:\nassert largest_triangle(4,2)==10.392304845413264\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the elements in a list are same or not.\nHere is an example test:\nassert chkList(['one','one','one']) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def chkList(lst): \r\n    return len(set(lst)) == 1",
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the hamming distance between given two integers.\nHere is an example test:\nassert hamming_Distance(4,8) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the inversions of tuple elements in the given tuple list.\nHere is an example test:\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to perform the adjacent element concatenation in the given tuples.\nHere is an example test:\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\nHere is an example test:\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check the given decimal with a precision of 2 by using regex.\nHere is an example test:\nassert is_decimal('123.11') == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to delete the smallest element from the given heap and then insert a new item.\nHere is an example test:\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count numbers whose oth and nth bits are set.\nHere is an example test:\nassert count_Num(2) == 1\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to decode a run-length encoded given list.\nHere is an example test:\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the minimum operations required to make two numbers equal.\nHere is an example test:\nassert min_Operations(2,4) == 1\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nHere is an example test:\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the first even number in a given list of numbers.\nHere is an example test:\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check if all the elements in tuple have same data type or not.\nHere is an example test:\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check for majority element in the given sorted array.\nHere is an example test:\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the minimum element in a sorted and rotated array.\nHere is an example test:\nassert find_Min([1,2,3,4,5],0,4) == 1\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to remove the characters which have odd index values of a given string.\nHere is an example test:\nassert odd_values_string('abcdef') == 'ace'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find minimum of three numbers.\nHere is an example test:\nassert min_of_three(10,20,0)==0\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nHere is an example test:\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to replace blank spaces with any character in a string.\nHere is an example test:\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the maximum sum in the given right triangle of numbers.\nHere is an example test:\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to get the n largest items from a dataset.\nHere is an example test:\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the lateral surface area of a cylinder.\nHere is an example test:\nassert lateralsuface_cylinder(10,5)==314.15000000000003\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to set all even bits of a given number.\nHere is an example test:\nassert even_bit_set_number(10) == 10\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check the occurrences of records which occur similar times in the given tuples.\nHere is an example test:\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the next perfect square greater than a given number.\nHere is an example test:\nassert next_Perfect_Square(35) == 36\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nHere is an example test:\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function for computing square roots using the babylonian method.\nHere is an example test:\nassert babylonian_squareroot(10)==3.162277660168379\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the longest palindromic subsequence in the given string.\nHere is an example test:\nassert lps(\"TENS FOR TENS\") == 5 \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the harmonic sum of n-1.\nHere is an example test:\nassert harmonic_sum(7) == 2.5928571428571425\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the intersection of two arrays using lambda function.\nHere is an example test:\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count the occcurences of an element in a tuple.\nHere is an example test:\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nHere is an example test:\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count the number of prime numbers less than a given non-negative number.\nHere is an example test:\nassert count_Primes_nums(5) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to swap two numbers.\nHere is an example test:\nassert swap_numbers(10,20)==(20,10)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find number of odd elements in the given list using lambda function.\nHere is an example test:\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to maximize the given two tuples.\nHere is an example test:\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to perform mathematical division operation across the given tuples.\nHere is an example test:\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to split a given list into two parts where the length of the first part of the list is given.\nHere is an example test:\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate a dog's age in dog's years.\nHere is an example test:\nassert dog_age(12)==61\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the sum of squares of first n odd natural numbers.\nHere is an example test:\nassert square_Sum(2) == 10\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the ascii value of a character.\nHere is an example test:\nassert ascii_value('A')==65\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\nHere is an example test:\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find sum of even index binomial coefficients.\nHere is an example test:\nassert even_binomial_Coeff_Sum(4) == 8\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the position of the last removed element from the given array.\nHere is an example test:\nassert get_Position([2,5,4],3,2) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the element count that occurs before the record in the given tuple.\nHere is an example test:\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to search an element in the given array by using sequential search.\nHere is an example test:\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check if the elements of a given list are unique or not.\nHere is an example test:\nassert all_unique([1,2,3]) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether all items of a list are equal to a given string.\nHere is an example test:\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function that matches a string that has an a followed by two to three 'b'.\nHere is an example test:\nassert text_match_two_three(\"ac\")==('Not matched!')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nHere is an example test:\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\nHere is an example test:\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to calculate the number of odd days in a given year.\nHere is an example test:\nassert odd_Days(100) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the third side of a right angled triangle.\nHere is an example test:\nassert otherside_rightangle(7,8)==10.63014581273465\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the maximum value in a given heterogeneous list.\nHere is an example test:\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to flatten a given nested list structure.\nHere is an example test:\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the maximum aggregate from the list of tuples.\nHere is an example test:\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the count of inversion of two types are same or not.\nHere is an example test:\nassert solve([1,0,2],3) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find element at a given index after number of rotations.\nHere is an example test:\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nHere is an example test:\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to get a colon of a tuple.\nHere is an example test:\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the specified number of largest products from two given lists.\nHere is an example test:\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the maximum of two numbers.\nHere is an example test:\nassert maximum(5,10) == 10\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to set the left most unset bit.\nHere is an example test:\nassert set_left_most_unset_bit(10) == 14\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the volume of a cone.\nHere is an example test:\nassert volume_cone(5,12)==314.15926535897927\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to print positive numbers in a list.\nHere is an example test:\nassert pos_nos([-1,-2,1,2]) == 1,2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the first maximum length of even word.\nHere is an example test:\nassert find_Max_Len_Even(\"python language\") == \"language\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the index of the last occurrence of a given number in a sorted array.\nHere is an example test:\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\nHere is an example test:\nassert max_volume(8) == 18\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the demlo number for the given number.\nHere is an example test:\nassert find_demlo(\"111111\") == '12345654321'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to rotate a given list by specified number of items to the left direction.\nHere is an example test:\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count negative numbers in a list.\nHere is an example test:\nassert neg_count([-1,-2,3,-4,-5]) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to count unset bits of a given number.\nHere is an example test:\nassert count_unset_bits(2) == 1\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to count character frequency of a given string.\nHere is an example test:\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the triangle is valid or not if sides are given.\nHere is an example test:\nassert check_Validity(1,2,3) == False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the sum of arithmetic progression.\nHere is an example test:\nassert ap_sum(1,5,2)==25\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether the given month name contains 28 days or not.\nHere is an example test:\nassert check_monthnum(\"February\")==True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the maximum occuring divisor in an interval.\nHere is an example test:\nassert find_Divisor(2,2) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nHere is an example test:\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to convert the given set into ordered tuples.\nHere is an example test:\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the number of digits and letters in a string.\nHere is an example test:\nassert dig_let(\"python\")==(6,0)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find entringer number e(n, k).\nHere is an example test:\nassert zigzag(4, 3) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the given string is a binary string or not.\nHere is an example test:\nassert check(\"01010101010\") == \"Yes\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the first element occurring k times in a given array.\nHere is an example test:\nassert first_Element([0,1,2,3,4,5],6,1) == 0\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether all the characters in a given string are unique.\nHere is an example test:\nassert unique_Characters('aba') == False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the third angle of a triangle using two angles.\nHere is an example test:\nassert find_angle(47,89)==44\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find modulo division of two lists using map and lambda function.\nHere is an example test:\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the n’th carol number.\nHere is an example test:\nassert get_carol(2) == 7\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove empty lists from a given list of lists.\nHere is an example test:\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the item with maximum occurrences in a given list.\nHere is an example test:\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to repeat the given tuple n times.\nHere is an example test:\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the smallest missing element in a sorted array.\nHere is an example test:\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\nHere is an example test:\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to round the given number to the nearest multiple of a specific number.\nHere is an example test:\nassert round_num(4722,10)==4720\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to shift last element to first position in the given list.\nHere is an example test:\nassert move_first([1,2,3,4]) == [4,1,2,3]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to generate a two-dimensional array.\nHere is an example test:\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort a list of lists by a given index of the inner list.\nHere is an example test:\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the n'th lucas number.\nHere is an example test:\nassert find_lucas(9) == 76\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to convert more than one list to nested dictionary.\nHere is an example test:\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the list with maximum length using lambda function.\nHere is an example test:\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether the given string starts and ends with the same character or not using regex.\nHere is an example test:\nassert check_char(\"abba\") == \"Valid\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the median of three specific numbers.\nHere is an example test:\nassert median_numbers(25,55,65)==55.0\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to compute the sum of digits of each number of a given list.\nHere is an example test:\nassert sum_of_digits([10,2,56])==14\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\nHere is an example test:\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the parity of a given number.\nHere is an example test:\nassert find_Parity(12) == \"Even Parity\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to create the next bigger number by rearranging the digits of a given number.\nHere is an example test:\nassert rearrange_bigger(12)==21\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nHere is an example test:\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the minimum value in a given heterogeneous list.\nHere is an example test:\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the value exists in a sequence or not.\nHere is an example test:\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find a pair with highest product from a given array of integers.\nHere is an example test:\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the cube sum of first n even natural numbers.\nHere is an example test:\nassert cube_Sum(2) == 72\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to concatenate each element of tuple by the delimiter.\nHere is an example test:\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the average of cubes of first n natural numbers.\nHere is an example test:\nassert find_Average_Of_Cube(2) == 4.5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to count the number of sublists containing a particular element.\nHere is an example test:\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort the given array by using shell sort.\nHere is an example test:\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to extract the elementwise and tuples from the given two tuples.\nHere is an example test:\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function that takes two lists and returns true if they have at least one common element.\nHere is an example test:\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the median of a trapezium.\nHere is an example test:\nassert median_trapezium(15,25,35)==20\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether the entered number is greater than the elements of the given array.\nHere is an example test:\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to print negative numbers in a list.\nHere is an example test:\nassert neg_nos([-1,4,5,-6]) == -1,-6\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove odd characters in a string.\nHere is an example test:\nassert remove_odd(\"python\")==(\"yhn\")\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to convert a list of multiple integers into a single integer.\nHere is an example test:\nassert multiple_to_single([11, 33, 50])==113350\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the surface area of a cube.\nHere is an example test:\nassert surfacearea_cube(5)==150\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to trim each tuple by k in the given tuple list.\nHere is an example test:\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nHere is an example test:\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the sum of perrin numbers.\nHere is an example test:\nassert cal_sum(9) == 49\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to check whether the triangle is valid or not if 3 points are given.\nHere is an example test:\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check whether the given month number contains 31 days or not.\nHere is an example test:\nassert check_monthnumb_number(5)==True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the sublist having minimum length.\nHere is an example test:\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the area of a rectangle.\nHere is an example test:\nassert rectangle_area(10,20)==200\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove uppercase substrings from a given string by using regex.\nHere is an example test:\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to convert decimal number to octal number.\nHere is an example test:\nassert decimal_to_Octal(10) == 12\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the maximum profit earned from a maximum of k stock transactions\nHere is an example test:\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the pairwise addition of the elements of the given tuples.\nHere is an example test:\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find remainder of array multiplication divided by n.\nHere is an example test:\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the sum of the largest and smallest value in a given array.\nHere is an example test:\nassert big_sum([1,2,3]) == 4\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove lowercase substrings from a given string.\nHere is an example test:\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the maximum occurring character in a given string.\nHere is an example test:\nassert get_max_occuring_char(\"data\") == \"a\"\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\nHere is an example test:\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the first natural number whose factorial is divisible by x.\nHere is an example test:\nassert first_Factorial_Divisible_Number(10) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to remove the matching tuples from the given two tuples.\nHere is an example test:\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the largest palindromic number in the given array.\nHere is an example test:\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to compute binomial probability for the given number.\nHere is an example test:\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\nHere is an example test:\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to search an element in the given array by using binary search.\nHere is an example test:\nassert binary_search([1,2,3,5,8], 6) == False\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nHere is an example test:\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nHere is an example test:\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find gcd of two positive integers.\nHere is an example test:\nassert gcd(12, 17) == 1\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to concatenate all elements of the given list into a string.\nHere is an example test:\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find common divisor between two numbers in a given pair.\nHere is an example test:\nassert num_comm_div(2,4) == 2\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to add consecutive numbers of a given list.\nHere is an example test:\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the cube sum of first n natural numbers.\nHere is an example test:\nassert sum_Of_Series(5) == 225\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum",
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to calculate the permutation coefficient of given p(n, k).\nHere is an example test:\nassert permutation_coefficient(10, 2) == 90\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to check if the common elements between two given lists are in the same order or not.\nHere is an example test:\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2",
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a python function to find the average of odd numbers till a given odd number.\nHere is an example test:\nassert average_Odd(9) == 5\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ",
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  },
  {
    "query": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\nHere is an example test:\nassert no_of_subsequences([1,2,3,4], 10) == 11\nMake sure your function aligns with the function signature and usage in the example test.",
    "gt": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]",
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ],
    "tag": [
      "code"
    ],
    "source": "MBPP"
  }
]