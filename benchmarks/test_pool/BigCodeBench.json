[
    {
        "query": "Writes multiple Pandas DataFrames to a single CSV file, separating each DataFrame by a line of hyphens (\"------\").\nThe function should output with:\n    None: The function writes the DataFrames to a CSV file but does not return any value.\nYou should write self-contained code starting with:\n```\nimport os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n```",
        "gt": "import os\nimport time\nOUTPUT_DIR = './output'\ndef task_func(dataset, filename, output_dir=OUTPUT_DIR):\n    start_time = time.time()\n\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, 'w', newline='') as f:\n        for i, df in enumerate(dataset):\n            if i > 0:\n                # Write the separator with a newline at the end only\n                f.write('------\\n')\n            # Avoid writing the index and ensure no extra newline is added at the end of the DataFrame\n            df.to_csv(f, index=False, header=True, mode='a')\n            if i < len(dataset) - 1:\n                # Add a newline after the DataFrame content, except after the last DataFrame\n                f.write('\\n')\n\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"",
        "test": "import unittest\nimport shutil\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Ensure the data directory exists before any tests are run.\"\"\"\n        if not os.path.exists(OUTPUT_DIR):\n            os.makedirs(OUTPUT_DIR)\n    def tearDown(self):\n        \"\"\"Clean up by removing the data directory and its contents after all tests.\"\"\"\n        shutil.rmtree(OUTPUT_DIR, ignore_errors=True)\n    def test_single_dataframe(self):\n        \"\"\"Test with a single DataFrame.\"\"\"\n        df = pd.DataFrame({\"Column1\": [1, 2], \"Column2\": [3, 4]})\n        task_func([df], 'single_dataframe.csv')\n        self.assertTrue(os.path.exists(os.path.join(OUTPUT_DIR, 'single_dataframe.csv')))\n    def test_multiple_dataframes(self):\n        \"\"\"Test with multiple DataFrames.\"\"\"\n        df1 = pd.DataFrame({\"A\": [5, 6], \"B\": [7, 8]})\n        df2 = pd.DataFrame({\"C\": [9, 10], \"D\": [11, 12]})\n        task_func([df1, df2], 'multiple_dataframes.csv')\n        self.assertTrue(os.path.exists(os.path.join(OUTPUT_DIR, 'multiple_dataframes.csv')))\n    def test_empty_dataframe(self):\n        \"\"\"Test with an empty DataFrame.\"\"\"\n        df = pd.DataFrame()\n        task_func([df], 'empty_dataframe.csv')\n        self.assertTrue(os.path.exists(os.path.join(OUTPUT_DIR, 'empty_dataframe.csv')))\n    def test_varying_row_counts(self):\n        \"\"\"Test with DataFrames having varying numbers of rows.\"\"\"\n        df1 = pd.DataFrame({\"E\": [13], \"F\": [14]})\n        df2 = pd.DataFrame({\"G\": [15, 16, 17], \"H\": [18, 19, 20]})\n        task_func([df1, df2], 'varying_row_counts.csv')\n        self.assertTrue(os.path.exists(os.path.join(OUTPUT_DIR, 'varying_row_counts.csv')))\n    def test_no_dataframes(self):\n        \"\"\"Test with no DataFrames provided.\"\"\"\n        task_func([], 'no_dataframes.csv')\n        self.assertTrue(os.path.exists(os.path.join(OUTPUT_DIR, 'no_dataframes.csv')))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze a dataset by calculating the average of values across each row and visualizing the correlation matrix as a heatmap.\nThe function should raise the exception for: ValueError: If the input data is not a 2D array or if it contains non-numeric data.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame enhanced with an 'Average' column that represents the mean across each row.\n    Axes: The matplotlib Axes object showing the heatmap of the correlations.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D numpy array.\")\n\n    df = pd.DataFrame(data)\n\n    # Calculate correlation matrix\n    correlation = df.corr()\n    # Plot the heatmap\n    ax = sns.heatmap(correlation, annot=True, cmap='coolwarm')\n\n    # Compute the average for each row and add it as a new column\n    df['Average'] = df.mean(axis=1)\n\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a sample data set\n        self.data = np.array([[1, 2, 3, 4, 4, 3, 7, 1], [6, 2, 3, 4, 3, 4, 4, 1]])\n    def tearDown(self):\n        # Remove any files or handle other cleanup actions\n        plt.close('all')\n    def test_dataframe_structure(self):\n        df, _ = task_func(self.data)\n        self.assertIn('Average', df.columns, \"DataFrame should contain an 'Average' column\")\n    def test_average_calculation(self):\n        df, _ = task_func(self.data)\n        expected_averages = [3.125, 3.375]  # The average of rows\n        pd.testing.assert_series_equal(df['Average'], pd.Series(expected_averages, name='Average'), check_dtype=True)\n    def test_heatmap_plot_returned(self):\n        _, ax = task_func(self.data)\n        self.assertIsInstance(ax, plt.Axes,\n                              \"The returned object should be a plt.Axes instance indicating a plot was created\")\n    def test_correlation_calculation(self):\n        # Test to ensure that the correlation matrix is calculated correctly\n        df, _ = task_func(self.data)\n        expected_correlation = pd.DataFrame(self.data).corr()\n        actual_correlation = \\\n            sns.heatmap(pd.DataFrame(self.data).corr(), annot=True, cmap='coolwarm').get_figure().axes[0].collections[\n                0].get_array()\n        np.testing.assert_array_almost_equal(actual_correlation, expected_correlation.to_numpy().ravel())\n    def test_input_validation(self):\n        # Test to ensure that non-2D arrays are handled properly\n        with self.assertRaises(ValueError):\n            task_func(np.array([1, 2, 3]))  # Not a 2D array",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Decomposes a time series in the 'value' column of a DataFrame into trend, seasonality, and residuals.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame, lacks required columns, or contains invalid data types. ValueError: If 'freq' is not a valid frequency string. ValueError: If 'decomposition_model' is not 'additive' or 'multiplicative'.\nThe function should output with:\n    tuple: A tuple containing the decomposition result (DecomposeResult object) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    # Validation\n    required_columns = ['group', 'date', 'value']\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in required_columns):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'group', 'date', and 'value' columns.\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"Invalid 'decomposition_model': must be 'additive' or 'multiplicative'.\")\n    if not isinstance(freq, str):\n        raise ValueError(\"Invalid 'freq': must be a string representing frequency.\")\n\n    # Setting up DataFrame\n    df = df.set_index('date')\n    df = df.asfreq(freq, method='pad')\n    df['value'] = pd.to_numeric(df['value'], errors='coerce')\n\n    # Handling missing or non-numeric values in 'value' column\n    if df['value'].isnull().any():\n        raise ValueError(\"Non-numeric or missing values found in 'value' column.\")\n\n    # Decomposition\n    result = seasonal_decompose(df['value'], model=decomposition_model)\n\n    ax = df.plot(y='value')\n    plt.ylabel('Value')\n    plt.title('Time Series Decomposition')\n\n    return (result, ax)",
        "test": "import unittest\nimport pandas as pd\nfrom statsmodels.tsa.seasonal import DecomposeResult\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Data setup with sufficient data points\n        date_range = pd.date_range(start='2022-01-01', periods=30, freq='D')\n        self.df = pd.DataFrame({\n            \"group\": [\"A\"] * 30,\n            \"date\": date_range,\n            \"value\": range(1, 31),\n        })\n    def test_return_type(self):\n        try:\n            result, _ = task_func(self.df)\n            self.assertIsInstance(result, DecomposeResult)\n        except ValueError as e:\n            self.fail(f\"Unexpected ValueError raised: {e}\")\n    def test_invalid_input_data(self):\n        # Testing with a DataFrame that lacks the required columns\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'a': [1, 2], 'b': [3, 4]}))\n    def test_invalid_input_type(self):\n        # Testing with a non-DataFrame input\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_invalid_model(self):\n        # Testing with an invalid decomposition model\n        with self.assertRaises(ValueError):\n            task_func(self.df, decomposition_model='invalid_model')\n    def test_invalid_frequency(self):\n        # Testing with an invalid frequency\n        with self.assertRaises(ValueError):\n            task_func(self.df, freq='invalid_freq')\n    def test_insufficient_data(self):\n        # Test with insufficient data points\n        small_df = self.df.iloc[:5]\n        with self.assertRaises(ValueError):\n            task_func(small_df)\n    def test_components_existence(self):\n        # Testing the existence of decomposition components\n        result, _ = task_func(self.df)\n        self.assertTrue(hasattr(result, 'trend'))\n        self.assertTrue(hasattr(result, 'seasonal'))\n        self.assertTrue(hasattr(result, 'resid'))\n    def test_component_shapes(self):\n        # Testing the shape of each component\n        result, _ = task_func(self.df)\n        self.assertEqual(result.trend.shape, self.df['value'].shape)\n        self.assertEqual(result.seasonal.shape, self.df['value'].shape)\n        self.assertEqual(result.resid.shape, self.df['value'].shape)\n    def test_additive_model(self):\n        # Testing with the additive model\n        result, _ = task_func(self.df, decomposition_model='additive')\n        self.assertIsInstance(result, DecomposeResult)\n        def to_single_line(data):\n            return ','.join(data.astype(str))\n        # Extract and convert each component to a single line string\n        seasonal_line = to_single_line(result.seasonal)\n        trend_line = to_single_line(result.trend)\n        resid_line = to_single_line(result.resid)\n        observed_line = to_single_line(result.observed)\n        expect_seasonal = \"-1.1472304587793283e-15,3.700743415417195e-17,3.700743415417195e-17,-1.0362081563168126e-15,6.291263806209222e-16,8.511709855459535e-16,6.291263806209222e-16,-1.1472304587793283e-15,3.700743415417195e-17,3.700743415417195e-17,-1.0362081563168126e-15,6.291263806209222e-16,8.511709855459535e-16,6.291263806209222e-16,-1.1472304587793283e-15,3.700743415417195e-17,3.700743415417195e-17,-1.0362081563168126e-15,6.291263806209222e-16,8.511709855459535e-16,6.291263806209222e-16,-1.1472304587793283e-15,3.700743415417195e-17,3.700743415417195e-17,-1.0362081563168126e-15,6.291263806209222e-16,8.511709855459535e-16,6.291263806209222e-16,-1.1472304587793283e-15,3.700743415417195e-17\"\n        \n        self.assertEqual(expect_seasonal, seasonal_line, \"DataFrame contents should match the expected output\")\n    def test_non_numeric_values(self):\n        # Testing with non-numeric values in 'value' column\n        df_with_non_numeric = self.df.copy()\n        df_with_non_numeric.loc[0, 'value'] = 'non-numeric'\n        with self.assertRaises(ValueError):\n            task_func(df_with_non_numeric)\n    def test_missing_values(self):\n        # Testing with missing values in 'value' column\n        df_with_missing = self.df.copy()\n        df_with_missing.loc[0, 'value'] = None\n        with self.assertRaises(ValueError):\n            task_func(df_with_missing)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read an image, convert it to grayscale, binarize it using a given threshold, and save it as 'binary_image.jpg'. The function returns numpy arrays of the original and binarized images, and ensures that the threshold value is valid.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path. ValueError: If the threshold is not an integer or not in the range 0-255.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays; the first is the original grayscale image, the second is the binarized image.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n```",
        "gt": "import numpy as np\nimport cv2\nimport os\ndef task_func(image_path='image.jpg', threshold=128):\n\n    if not isinstance(threshold, int) or not (0 <= threshold <= 255):\n        raise ValueError(\"Threshold must be an integer between 0 and 255.\")\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    # Image processing\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    binary_img = np.where(img >= threshold, 255, 0).astype('uint8')\n    cv2.imwrite('binary_image.jpg', binary_img)\n\n    return np.array(img), np.array(binary_img)",
        "test": "# Additional libraries required for test cases\nimport unittest\nfrom PIL import Image, ImageDraw\n# Updated test cases and dummy image creation function will be provided below.\ndef create_dummy_image(image_path='test_image.jpg', size=(20, 20)):\n    \"\"\"\n    Creates a dummy grayscale image with basic shapes for testing.\n    The image size is 20x20 pixels.\n    \"\"\"\n    img = Image.new('L', size, color='white')\n    draw = ImageDraw.Draw(img)\n    draw.rectangle([2, 2, 6, 6], fill='black')\n    draw.ellipse([10, 2, 14, 6], fill='gray')\n    draw.line([2, 15, 18, 15], fill='black', width=1)\n    img.save(image_path)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        create_dummy_image()\n    def tearDown(self):\n        os.remove('test_image.jpg')\n        if os.path.exists('binary_image.jpg'):\n            os.remove('binary_image.jpg')\n    def test_normal_functionality(self):\n        original_img, binary_img = task_func('test_image.jpg', 126)\n        self.assertTrue(os.path.exists('binary_image.jpg'))\n        self.assertIsInstance(original_img, np.ndarray)\n        self.assertIsInstance(binary_img, np.ndarray)\n        self.assertEqual(original_img.shape, (20, 20))\n        self.assertEqual(binary_img.shape, (20, 20))\n        # Additional checks to ensure binarization is correct\n        unique_values = np.unique(binary_img)\n        self.assertTrue(np.array_equal(unique_values, [0, 255]))\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.jpg')\n    def test_invalid_threshold_non_integer(self):\n        with self.assertRaises(ValueError):\n            task_func('test_image.jpg', 'invalid')\n    def test_invalid_threshold_out_of_range(self):\n        with self.assertRaises(ValueError):\n            task_func('test_image.jpg', -10)\n    def test_normal_functionality1(self):\n        original_img, binary_img = task_func('test_image.jpg', 126)\n        original_img_list = original_img.tolist()\n        binary_img_list = binary_img.tolist()\n        expect_original = [[255, 248, 255, 250, 246, 255, 255, 251, 240, 255, 255, 253, 255, 252, 255, 254, 255, 255, 255, 255], [240, 248, 246, 255, 255, 249, 240, 253, 255, 255, 240, 255, 245, 252, 255, 255, 255, 255, 255, 255], [255, 255, 2, 0, 0, 11, 2, 255, 255, 243, 254, 135, 112, 128, 255, 246, 255, 255, 255, 255], [250, 246, 0, 16, 0, 0, 0, 252, 248, 255, 133, 117, 143, 130, 124, 250, 255, 255, 255, 255], [255, 255, 12, 0, 4, 0, 7, 252, 255, 251, 132, 127, 124, 120, 134, 255, 255, 255, 255, 255], [253, 242, 0, 3, 0, 6, 5, 255, 255, 245, 120, 129, 138, 127, 123, 252, 255, 255, 255, 255], [255, 255, 5, 0, 0, 18, 0, 250, 255, 255, 255, 122, 128, 131, 253, 253, 255, 255, 255, 255], [254, 247, 255, 252, 255, 250, 253, 255, 239, 255, 253, 249, 255, 255, 255, 252, 255, 255, 255, 255], [255, 244, 255, 255, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 249, 255], [255, 255, 244, 255, 255, 255, 252, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 249, 255], [250, 255, 243, 255, 250, 248, 246, 255, 253, 253, 253, 253, 253, 253, 253, 253, 248, 255, 255, 255], [243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 241, 254], [255, 242, 255, 244, 243, 254, 251, 241, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 255, 255], [254, 242, 255, 255, 251, 255, 255, 255, 253, 253, 253, 253, 253, 253, 253, 253, 246, 240, 255, 250], [248, 255, 230, 255, 255, 255, 244, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 239, 255], [255, 250, 4, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 245], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]\n        expect_binary = [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 255, 255, 0, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(original_img_list))\n        self.assertTrue(np.array_equal(original_img_list, expect_original), \"The arrays should be equal\")\n        # Check if array1 is not equal to array3 (they are not)\n        self.assertTrue(np.array_equal(binary_img_list, expect_binary), \"The arrays should not be equal\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scramble the letters in each word of a given text, keeping the first and last letters of each word intact.\nNote that: Notes: Words are determined by regex word boundaries. The scrambling only affects words longer than three characters, leaving shorter words unchanged.\nThe function should output with:\n    str: The scrambled text.\nYou should write self-contained code starting with:\n```\nimport random\nimport re\ndef task_func(text, seed=None):\n```",
        "gt": "import random\nimport re\ndef task_func(text, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) > 3:\n            middle = list(word[1:-1])\n            random.shuffle(middle)\n            return word[0] + \"\".join(middle) + word[-1]\n        else:\n            return word\n\n    pattern = r\"\\b\\w+\\b\"\n    scrambled_text = re.sub(pattern, scramble_word, text)\n\n    return scrambled_text",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a simple sentence\n        input_text = \"Hello world\"\n        output_text = task_func(input_text, seed=1)\n        self.assertTrue(output_text.startswith(\"H\"))\n        self.assertTrue(output_text.endswith(\"d\"))\n        self.assertEqual(len(input_text.split()), len(output_text.split()))\n    def test_case_2(self):\n        # Test with single word\n        input_text = \"Programming\"\n        output_text = task_func(input_text, seed=2)\n        self.assertTrue(output_text.startswith(\"P\"))\n        self.assertTrue(output_text.endswith(\"g\"))\n        self.assertEqual(len(input_text), len(output_text))\n    def test_case_3(self):\n        # Test with a sentence having punctuation\n        input_text = \"Hello, world!\"\n        output_text = task_func(input_text, seed=3)\n        self.assertTrue(output_text.startswith(\"H\"))\n        self.assertTrue(output_text.endswith(\"!\"))\n        self.assertEqual(len(input_text.split()), len(output_text.split()))\n    def test_case_4(self):\n        # Test with a sentence having numbers\n        input_text = \"I have 2 cats\"\n        output_text = task_func(input_text, seed=4)\n        self.assertTrue(output_text.startswith(\"I\"))\n        self.assertTrue(output_text.endswith(\"s\"))\n        self.assertTrue(\"2\" in output_text)\n        self.assertEqual(len(input_text.split()), len(output_text.split()))\n    def test_case_5(self):\n        # Test with empty string\n        input_text = \"\"\n        output_text = task_func(input_text, seed=5)\n        self.assertEqual(output_text, \"\")\n    def test_case_6(self):\n        # Test with words containing digits and special characters\n        input_text = \"Python3 is fun!\"\n        output_text = task_func(input_text, seed=6)\n        self.assertTrue(output_text.startswith(\"P\") and output_text.endswith(\"!\"))\n        self.assertIn(\"3\", output_text)\n    def test_case_7(self):\n        # Test words that are 3 characters long\n        input_text = \"Can you see the cat?\"\n        output_text = task_func(input_text, seed=8)\n        self.assertIn(\"Can\", output_text)\n        self.assertIn(\"the\", output_text)\n        self.assertIn(\"cat\", output_text)\n    def test_case_8(self):\n        # Test with a longer paragraph\n        input_text = (\n            \"This is a longer text to see how the function handles more complex inputs.\"\n        )\n        output_text = task_func(input_text, seed=9)\n        self.assertGreaterEqual(\n            len(output_text.split()), 10\n        )  # Ensure it's a long input\n    def test_case_9(self):\n        # Test with non-English characters\n        input_text = \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u0430\u043a \u0434\u0435\u043b\u0430?\"\n        output_text = task_func(input_text, seed=10)\n        self.assertTrue(output_text.startswith(\"\u041f\") and output_text.endswith(\"?\"))\n    def test_case_10(self):\n        # Test reproducibility with the same seed\n        input_text = \"Reproducibility test\"\n        output_text1 = task_func(input_text, seed=11)\n        output_text2 = task_func(input_text, seed=11)\n        self.assertEqual(output_text1, output_text2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches data from a given dictionary that includes a CSV URL and returns a pandas DataFrame sorted based on two specified columns. >>> task_func({\"URL\": \"http://example.com/test.csv\"}, \"price\") id   title  price 2   3  Cherry    0.2 0   1   Apple    0.3 1   2  Banana    0.5\nThe function should raise the exception for: This function will raise a ValueError if the dictionary is empty or the key \"URL\" does not exist in the dictionary.\nThe function should output with:\n    DataFrame: The pandas DataFrame sorted based on the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n```",
        "gt": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url_dict, sort_by_column=\"title\"):\n\n    if \"URL\" not in csv_url_dict or not csv_url_dict:\n        raise ValueError(\"The dictionary must contain a 'URL' key.\")\n    \n    response = requests.get(csv_url_dict[\"URL\"])\n    response.raise_for_status()  # Raise an exception for invalid responses\n    csv_data = response.text\n    df = pd.read_csv(StringIO(csv_data))\n    sorted_df = df.sort_values(by=sort_by_column)\n    return sorted_df",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nimport pandas as pd\nimport requests\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_case_1(self, mock_get):\n        mock_csv_content = \"id,title,price\\n2,Banana,0.5\\n1,Apple,0.3\\n3,Cherry,0.2\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func({\"URL\": \"http://example.com/data.csv\"}, 'title')\n        expected_titles = [\"Apple\", \"Banana\", \"Cherry\"]\n        actual_titles = result['title'].tolist()\n        self.assertEqual(actual_titles, expected_titles)\n    @patch('requests.get')\n    def test_case_2(self, mock_get):\n        mock_csv_content = \"id,title,price\\n2,Banana,0.5\\n1,Apple,0.3\\n3,Cherry,0.2\\n\"\n        \n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func({\"URL\": \"http://example.com/tst.csv\"}, 'price')\n        self.assertEqual(result.iloc[0]['price'], 0.2)\n        self.assertEqual(result.iloc[1]['price'], 0.3)\n        self.assertEqual(result.iloc[2]['price'], 0.5)\n    @patch('requests.get')\n    def test_case_3(self, mock_get):\n        mock_csv_content = \"id,title,price\\n2,Banana,0.5\\n1,Apple,0.3\\n3,Cherry,0.2\\n\"\n        \n        \n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func({\"URL\": \"http://example.com/tst.csv\"})\n        self.assertEqual(result.iloc[0]['title'], \"Apple\")\n        self.assertEqual(result.iloc[1]['title'], \"Banana\")\n        self.assertEqual(result.iloc[2]['title'], \"Cherry\")\n    @patch('requests.get')\n    def test_case_4(self, mock_get):\n        mock_csv_content =  \"id,title,price\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func({\"URL\": \"http://example.com/empty.csv\"})\n        self.assertTrue(result.empty)\n    @patch('requests.get')\n    def test_case_5(self, mock_get):\n        mock_csv_content = \"id,name,age\\n2,John,25\\n1,Alice,30\\n3,Bob,20\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func({\"URL\": \"http://example.com/test_2.csv\"}, \"age\")\n        self.assertEqual(result.iloc[0]['name'], \"Bob\")\n        self.assertEqual(result.iloc[1]['name'], \"John\")\n        self.assertEqual(result.iloc[2]['name'], \"Alice\")\n    \n    @patch('requests.get')\n    def test_case_6(self, mock_get):\n        mock_csv_content =  \"id,title,price\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 400\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        with self.assertRaises(ValueError):\n            result = task_func({\"link\": \"http://example.com/error.csv\"})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of the corresponding numbers for a list of uppercase letters, where \\\"A\\\" corresponds to 1, \\\"B\\\" to 2, etc. >>> task_func([\\\"A\\\", \\\"E\\\", \\\"I\\\"]) 45\nNote that: The function uses a predefined dictionary to map each uppercase letter to its corresponding number.\nThe function should output with:\n    int: The product of the numbers corresponding to the input letters.\nYou should write self-contained code starting with:\n```\nfrom functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n```",
        "gt": "from functools import reduce\nimport operator\nimport string\ndef task_func(letters):\n    # Creating a dictionary to map each letter to its corresponding number\n    letter_to_number = {letter: i+1 for i, letter in enumerate(string.ascii_uppercase)}\n    \n    # Convert the letters to numbers\n    numbers = [letter_to_number[letter] for letter in letters]\n    \n    # Calculate the product using functools.reduce and operator.mul\n    product = reduce(operator.mul, numbers, 1)\n    \n    return product",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input: [\"A\", \"B\", \"C\"]\n        # Expected Output: 6 (1 * 2 * 3)\n        result = task_func([\"A\", \"B\", \"C\"])\n        self.assertEqual(result, 6)\n        \n    def test_case_2(self):\n        # Input: [\"A\", \"E\", \"I\"]\n        # Expected Output: 45 (1 * 5 * 9)\n        result = task_func([\"A\", \"E\", \"I\"])\n        self.assertEqual(result, 45)\n    def test_case_3(self):\n        # Input: [\"Z\"]\n        # Expected Output: 26\n        result = task_func([\"Z\"])\n        self.assertEqual(result, 26)\n    def test_case_4(self):\n        # Input: [\"X\", \"Y\", \"Z\"]\n        # Expected Output: 24 * 25 * 26\n        result = task_func([\"X\", \"Y\", \"Z\"])\n        self.assertEqual(result, 24 * 25 * 26)\n        \n    def test_case_5(self):\n        # Input: [\"A\", \"A\", \"A\"]\n        # Expected Output: 1 (1 * 1 * 1)\n        result = task_func([\"A\", \"A\", \"A\"])\n        self.assertEqual(result, 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts a URL from a given string and retrieves the title of the web page from that URL. If no valid URL is found, or the URL does not result in a successful web page fetch, returns an appropriate error message.\nThe function should output with:\n    str: The title of the webpage at the extracted URL if successful, otherwise one of the following error messages:\n    \"No valid URL found in the provided string.\"\n    \"Unable to fetch the content of the URL: {url}\"\n    \"No title tag found in the webpage.\"\nYou should write self-contained code starting with:\n```\nimport re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n```",
        "gt": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\ndef task_func(myString):\n    # Constants\n    HEADERS = {'User-Agent': 'Mozilla/5.0'}\n    \n    # Extract URL from string\n    url_match = re.search(r'(https?://\\S+)', myString)\n    if not url_match:\n        return \"No valid URL found in the provided string.\"\n\n    url = url_match.group()\n    domain = urlparse(url).netloc\n\n    # Fetch webpage content\n    try:\n        response = requests.get(url, headers=HEADERS)\n        response.raise_for_status()\n    except requests.RequestException:\n        return f\"Unable to fetch the content of the URL: {url}\"\n\n    # Extract title from the webpage content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.title\n    if title:\n        return title.string\n    else:\n        return \"No title tag found in the webpage.\"",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport requests\nclass MockResponse:\n    @staticmethod\n    def json():\n        return {\"key\": \"value\"}\n    @staticmethod\n    def raise_for_status():\n        pass\n    text = \"<html><head><title>Google</title></head><body></body></html>\"\nclass TestCases(unittest.TestCase):\n    @patch('requests.get', return_value=MockResponse())\n    def test_valid_url_with_title(self, mock_get):\n        # Test fetching a webpage with a clear title tag\n        result = task_func('Check this out: https://www.google.com')\n        self.assertEqual(result, \"Google\")\n    @patch('requests.get', side_effect=requests.RequestException())\n    def test_non_existent_website(self, mock_get):\n        # Test behavior with a URL leading to a request exception\n        result = task_func('This won\\'t work: https://nonexistentwebsite12345.com')\n        self.assertEqual(result, \"Unable to fetch the content of the URL: https://nonexistentwebsite12345.com\")\n    def test_string_without_urls(self):\n        # Test input string with no URLs\n        result = task_func('This is just a regular string without URLs.')\n        self.assertEqual(result, \"No valid URL found in the provided string.\")\n    @patch('requests.get', return_value=MockResponse())\n    def test_multiple_urls_in_string(self, mock_get):\n        # Test input with multiple URLs, verifying only the first is used\n        result = task_func('Multiple URLs: https://www.google.com and https://www.openai.com')\n        self.assertEqual(result, \"Google\")\n    @patch('requests.get', return_value=Mock())\n    def test_url_with_no_title_tag(self, mock_get):\n        # Test webpage without a title tag\n        mock_get.return_value.text = \"<html><head></head><body></body></html>\"\n        result = task_func('URL with no title: https://www.notitle.com')\n        self.assertEqual(result, \"No title tag found in the webpage.\")\n    @patch('requests.get', return_value=MockResponse())\n    def test_malformed_url(self, mock_get):\n        # Test input with malformed URL\n        result = task_func('Check out this site: ht://incorrect-url')\n        self.assertEqual(result, \"No valid URL found in the provided string.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Trains a RandomForestRegressor model and returns the mean squared error (MSE) of the predictions and the model. First the data is converted into a pandas DataFrame and then split into a train and test set. The fractional size of the test set is determined by 'test_size'. Then a RandomForestRegressor is trained on the data, using the in 'target' specified column as target. The MSE on the test set is calculated.\nThe function should raise the exception for: ValueError: If the input DataFrame is empty or the target column name is not in the DataFrame.\nThe function should output with:\n    float: The mean squared error of the model's predictions on the test set.\n    RandomForestRegressor: The trained model.\n    DataFrame: The converted dictionary input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\ndef task_func(data, target, test_size=0.2, random_state=None):\n    data = pd.DataFrame(data)\n    if data.empty or target not in data.columns:\n        raise ValueError(\"Data must not be empty and target column must exist in the DataFrame.\")\n\n    # Splitting the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(columns=[target]), data[target], test_size=test_size, random_state=random_state\n    )\n\n    # Training the model\n    model = RandomForestRegressor(random_state=random_state)\n    model.fit(X_train, y_train)\n\n    # Making predictions and returning the MSE\n    predictions = model.predict(X_test)\n    mse = mean_squared_error(y_test, predictions)\n    return mse, model, data",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom faker import Faker\nfrom sklearn.ensemble import RandomForestRegressor\nclass TestCases(unittest.TestCase):\n    def setUp(self) -> None:\n        self.fake = Faker() \n    def test_case_1(self):\n        # Simple test case\n        data = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9], 'target': [10, 11, 12]}\n        mse, model, df = task_func(data, 'target', random_state=2)\n        self.assertAlmostEqual(mse, 1.537, delta=0.2)\n        self.assertTrue(isinstance(model, RandomForestRegressor))\n        pd.testing.assert_frame_equal(pd.DataFrame(data), df)\n    def test_case_2(self):\n        # Random test case with larger data\n        np.random.seed(42)\n        data = {'A': np.random.randint(0, 100), 'B': np.random.randint(0, 100), 'C': np.random.randint(0, 100), 'D': np.random.randint(0, 100) }\n        data['target'] = np.random.randint(0, 100, size=(100,))\n        mse, model, df = task_func(data, 'target', random_state=12)\n        self.assertAlmostEqual(mse, 1012, delta=20)\n        self.assertTrue(isinstance(model, RandomForestRegressor))\n        pd.testing.assert_frame_equal(pd.DataFrame(data), df)\n    def test_case_3(self):\n        # Random test case with different test_size\n        np.random.seed(42)\n        data = {'A': np.random.randint(0, 100), 'B': np.random.randint(0, 100), 'C': np.random.randint(0, 100), 'D': np.random.randint(0, 100) }\n        data['target'] = np.random.randint(0, 100, size=(100,))\n        mse, model, df = task_func(data, 'target', test_size=0.3, random_state=12)\n        self.assertAlmostEqual(mse, 1048, delta=20)\n        self.assertTrue(isinstance(model, RandomForestRegressor))\n        pd.testing.assert_frame_equal(pd.DataFrame(data), df)\n    def test_case_4(self):\n        # test working random state\n        np.random.seed(42)\n        data = {'A': np.random.randint(0, 100), 'B': np.random.randint(0, 100), 'C': np.random.randint(0, 100), 'D': np.random.randint(0, 100) }\n        data['target'] = np.random.randint(0, 100, size=(100,))\n        mse1, model, df = task_func(data, 'target', test_size=0.3, random_state=12)\n        mse2, model, _ = task_func(data, 'target', test_size=0.3, random_state=12)\n        self.assertAlmostEqual(mse1, mse2)\n        pd.testing.assert_frame_equal(pd.DataFrame(data), df)\n    def test_case_5(self):\n        # Random test case with Faker-generated data\n        self.fake.seed_instance(42)\n        data = {'A': [self.fake.random_int(min=0, max=100) for _ in range(100)],\n                             'B': [self.fake.random_int(min=0, max=100) for _ in range(100)],\n                             'C': [self.fake.random_int(min=0, max=100) for _ in range(100)],\n                             'D': [self.fake.random_int(min=0, max=100) for _ in range(100)],\n                             'target': [self.fake.random_int(min=0, max=100) for _ in range(100)]}\n        mse, model, df = task_func(data, 'target')\n        self.assertAlmostEqual(mse, 844, delta=20)\n        self.assertTrue(isinstance(model, RandomForestRegressor))\n        pd.testing.assert_frame_equal(pd.DataFrame(data), df)\n    def test_edge_case_empty_dataset(self):\n        # Edge case: Empty dataset\n        data = dict.fromkeys(['A', 'B', 'C', 'target'])\n        with self.assertRaises(ValueError):\n            task_func(data, 'target')\n    def test_edge_case_very_small_dataset(self):\n        # Edge case: Very small dataset\n        data = {'A': [1], 'B': [2], 'C': [3], 'target': [4]}\n        with self.assertRaises(ValueError):\n            task_func(data, 'target')\n    def test_edge_case_invalid_test_size(self):\n        # Edge case: Invalid test size\n        data = {'A': np.random.randint(0, 100), 'B': np.random.randint(0, 100), 'C': np.random.randint(0, 100), 'D': np.random.randint(0, 100) }\n        data['target'] = np.random.randint(0, 100, size=(100,))\n        with self.assertRaises(ValueError):\n            task_func(data, 'target', test_size=-0.1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Visualize two Series using a swarm plot with a highlight on their intersecting data points. This function creates a swarm plot to visually compare two pandas Series. It highlights the intersection points between these two series by drawing red dashed lines at the intersecting data points.\nThe function should output with:\n    ax (matplotlib.Axes): The Axes object of the plotted swarm chart. This object can be used for further customization of the plot if required.\n    intersection_count (int): The number of unique intersecting data points between s1 and s2.\n    This count gives a quick numerical summary of the overlap between the two series.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2):\n    # Find the intersection data points\n    intersection = set(s1).intersection(set(s2))\n\n    # Prepare data for visualization\n    df1 = pd.DataFrame({s1.name: s1, \"Type\": \"Series1\"})\n    df2 = pd.DataFrame({s2.name: s2, \"Type\": \"Series2\"})\n    df = pd.concat([df1, df2], axis=0, ignore_index=True)\n\n    # Create a swarm plot\n    _, ax = plt.subplots(figsize=(10, 6))\n    sns.swarmplot(x=df.columns[0], y=\"Type\", data=df, ax=ax)\n\n    # Highlight intersection points\n    for point in intersection:\n        ax.axvline(x=point, color=\"red\", linestyle=\"--\")\n\n    ax.set_title(f\"Overlap Between {s1.name} and {s2.name}\")\n\n    return ax, len(intersection)",
        "test": "import pandas as pd\nimport unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def test_intersection_exists(self):\n        \"\"\"Test that the function works when the two series have an intersection.\"\"\"\n        s1 = pd.Series([1, 2, 3, 4, 5], name=\"Series1\")\n        s2 = pd.Series([4, 5, 6, 7, 8], name=\"Series2\")\n        ax, intersection_count = task_func(s1, s2)\n        self.assertEqual(ax.get_title(), \"Overlap Between Series1 and Series2\")\n        self.assertEqual(intersection_count, 2)\n    def test_no_intersection(self):\n        \"\"\"Test that the function works when the two series have no intersection.\"\"\"\n        s1 = pd.Series([1, 2, 3], name=\"Series1\")\n        s2 = pd.Series([4, 5, 6], name=\"Series2\")\n        ax, intersection_count = task_func(s1, s2)\n        self.assertEqual(ax.get_title(), \"Overlap Between Series1 and Series2\")\n        self.assertEqual(intersection_count, 0)\n    def test_empty_series(self):\n        \"\"\"Test that the function works when one of the series is empty.\"\"\"\n        s1 = pd.Series([], name=\"Series1\")\n        s2 = pd.Series([], name=\"Series2\")\n        ax, intersection_count = task_func(s1, s2)\n        self.assertEqual(ax.get_title(), \"Overlap Between Series1 and Series2\")\n        self.assertEqual(intersection_count, 0)\n    def test_partial_intersection(self):\n        \"\"\"Test that the function works when the two series have a partial intersection.\"\"\"\n        s1 = pd.Series([1, 2], name=\"Series1\")\n        s2 = pd.Series([2, 3], name=\"Series2\")\n        ax, intersection_count = task_func(s1, s2)\n        self.assertEqual(ax.get_title(), \"Overlap Between Series1 and Series2\")\n        self.assertEqual(intersection_count, 1)\n    def test_identical_series(self):\n        \"\"\"Test that the function works when the two series are identical.\"\"\"\n        s1 = pd.Series([1, 2, 3], name=\"Series1\")\n        s2 = pd.Series([1, 2, 3], name=\"Series2\")\n        ax, intersection_count = task_func(s1, s2)\n        self.assertEqual(ax.get_title(), \"Overlap Between Series1 and Series2\")\n        self.assertEqual(intersection_count, 3)\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scrapes a web page to extract all email addresses using a specified regular expression pattern and writes them to a CSV file. The csv file is always created eventhough no email is found in the url. The header of the csv should be \"Emails\".\nThe function should output with:\n    str: The path to the CSV file where the extracted email addresses have been saved.\nYou should write self-contained code starting with:\n```\nimport bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n```",
        "gt": "import bs4\nimport requests\nimport re\nimport csv\ndef task_func(url=\"http://example.com\", csv_path=\"emails.csv\", \n          regex=r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b\", \n          headers={'User-Agent': 'Mozilla/5.0'}):\n    response = requests.get(url, headers=headers)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    text = soup.get_text()\n\n    emails = re.findall(regex, text)\n\n    with open(csv_path, 'w', newline='') as f:\n        write = csv.writer(f)\n        write.writerow(['Emails'])\n        for email in emails:\n            write.writerow([email])\n    \n    return csv_path",
        "test": "import unittest\nfrom unittest.mock import patch, ANY\nimport os\nimport csv\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to hold any output files\n        self.test_dir = tempfile.mkdtemp()\n        self.addCleanup(lambda: os.rmdir(self.test_dir))\n    def tearDown(self):\n        # Clean up all files created during the tests\n        for filename in os.listdir(self.test_dir):\n            os.remove(os.path.join(self.test_dir, filename))\n    @patch('requests.get')\n    def test_extraction_and_saving_default(self, mock_get):\n        \"\"\"Test extracting emails using default parameters and saving to default path.\"\"\"\n        mocked_html_content = \"\"\"<html><body>Emails: test1@example.com, test2@domain.com</body></html>\"\"\"\n        mock_get.return_value.text = mocked_html_content\n        \n        csv_path = os.path.join(self.test_dir, \"emails.csv\")\n        with patch('builtins.open', unittest.mock.mock_open()) as mocked_file:\n            task_func(csv_path=csv_path)\n            args, kwargs = mocked_file.call_args\n            self.assertEqual(args[0], csv_path)  # Assert the first argument is the file path\n            try:\n                self.assertEqual(kwargs['mode'], 'w')  # Assert the file is opened in write mode\n            except:\n                self.assertEqual(args[1], 'w')\n            self.assertEqual(kwargs['newline'], '')  # Assert newline handling\n    @patch('requests.get')\n    def test_extraction_custom_url(self, mock_get):\n        \"\"\"Test the email extraction from a custom URL and ensure file creation even if no emails are found.\"\"\"\n        mock_get.return_value.text = \"<html><body>No email here</body></html>\"\n        csv_path = os.path.join(self.test_dir, \"output.csv\")\n        result = task_func(url=\"http://mocked-url.com\", csv_path=csv_path)\n        self.assertEqual(result, csv_path)\n        self.assertTrue(os.path.exists(csv_path))  # Ensuring file is created\n        with open(csv_path, 'r') as f:\n            reader = csv.reader(f)\n            data = list(reader)\n        self.assertEqual(data, [['Emails']])\n    @patch('requests.get')\n    def test_extraction_custom_regex(self, mock_get):\n        \"\"\"Test extraction with a custom regex pattern.\"\"\"\n        mocked_html_content = \"<html><body>Email: unique@example.com, other@sample.com</body></html>\"\n        mock_get.return_value.text = mocked_html_content\n        csv_path = os.path.join(self.test_dir, \"custom_regex.csv\")\n        task_func(csv_path=csv_path, regex=r\"\\b[A-Za-z0-9._%+-]+@example.com\\b\")\n        with open(csv_path, 'r') as file:\n            reader = csv.reader(file)\n            emails = [row for row in reader]\n        self.assertEqual(emails, [['Emails'], ['unique@example.com']])  # Only matching specific domain\n    @patch('requests.get')\n    def test_with_headers_customization(self, mock_get):\n        \"\"\"Test extraction with customized headers.\"\"\"\n        mock_get.return_value.text = \"<html><body>Email: info@test.com</body></html>\"\n        csv_path = os.path.join(self.test_dir, \"headers.csv\")\n        task_func(csv_path=csv_path, headers={'User-Agent': 'Custom-Agent'})\n        self.assertTrue(os.path.exists(csv_path))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a document-term matrix (DTM) from a list of text documents using CountVectorizer from Scikit-learn. Texts are preprocessed by removing non-alphanumeric characters (excluding spaces), converting to lowercase, and excluding English stop words defined in NLTK.\nThe function should output with:\n    pd.DataFrame: A DataFrame where rows represent documents and columns represent unique terms;\n    cell values indicate the frequency of a term in a document.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Make sure to download NLTK stopwords\nnltk.download('stopwords')\n# Define a regex pattern for matching all non-alphanumeric characters\nALPHANUMERIC = re.compile('[\\W_]+')\n# Load NLTK's list of English stop words\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n```",
        "gt": "import re\nimport nltk\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Make sure to download NLTK stopwords\nnltk.download('stopwords')\n# Define a regex pattern for matching all non-alphanumeric characters\nALPHANUMERIC = re.compile('[\\W_]+')\n# Load NLTK's list of English stop words\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(texts):\n    cleaned_texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    tokenized_texts = [' '.join(word for word in text.split() if word not in STOPWORDS) for text in cleaned_texts]\n\n    vectorizer = CountVectorizer()\n    dtm = vectorizer.fit_transform(tokenized_texts)\n    dtm_df = pd.DataFrame(dtm.toarray(), columns= vectorizer.get_feature_names_out() if hasattr(vectorizer,\n                                                                  'get_feature_names_out') else vectorizer.get_feature_names())\n\n    return dtm_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.texts = [\n            \"Hello, world!\",\n            \"Data science is about the extraction of knowledge from data.\",\n            \"Machine learning is a fascinating field.\",\n            \"Python is a versatile programming language.\",\n            \"Stop words are filtered out in text preprocessing.\"\n        ]\n    def test_dtm_shape(self):\n        \"\"\"Ensure the DTM has the correct shape.\"\"\"\n        dtm = task_func(self.texts)\n        self.assertEqual(dtm.shape[0], len(self.texts), \"DTM should have one row per document.\")\n    def test_dtm_non_negative(self):\n        \"\"\"Ensure all values in the DTM are non-negative.\"\"\"\n        dtm = task_func(self.texts)\n        self.assertTrue((dtm >= 0).all().all(), \"All DTM values should be non-negative.\")\n    def test_stopwords_removal(self):\n        \"\"\"Check if common stopwords are removed.\"\"\"\n        dtm = task_func([\"This is a test.\", \"Another test here.\"])\n        self.assertNotIn(\"is\", dtm.columns, \"Stopwords should be removed from DTM columns.\")\n    def test_alphanumeric_filtering(self):\n        \"\"\"Verify that non-alphanumeric characters are filtered out.\"\"\"\n        dtm = task_func([\"Example: test!\", \"#Another$% test.\"])\n        self.assertFalse(any(char in dtm.columns for char in \":!#$%\"), \"Non-alphanumeric characters should be filtered out.\")\n    def test_lowercase_conversion(self):\n        \"\"\"Test if all text is converted to lowercase.\"\"\"\n        dtm = task_func([\"LoWeR and UPPER\"])\n        self.assertIn(\"lower\", dtm.columns, \"All text should be converted to lowercase.\")\n        self.assertIn(\"upper\", dtm.columns, \"All text should be converted to lowercase.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates RSA public and private keys, encrypts a file using AES encryption, and then encrypts the AES key with the public RSA key. The encrypted file and the encrypted AES key are saved in separate new files. This method demonstrates a hybrid encryption approach.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the encrypted file.\n    str: The filename of the file containing the encrypted AES key.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n```",
        "gt": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\ndef task_func(file_path):\n    (pub_key, priv_key) = rsa.newkeys(512)\n    aes_key = os.urandom(32)\n    iv = os.urandom(16)\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())\n\n    with open(file_path, 'rb') as f:\n        data = f.read()\n        padder = padding.PKCS7(128).padder()\n        padded_data = padder.update(data) + padder.finalize()\n        encryptor = cipher.encryptor()\n        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    encrypted_file = file_path + '.encrypted'\n    with open(encrypted_file, 'wb') as f:\n        f.write(encrypted_data)\n\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n    encrypted_key_file = 'aes_key.encrypted'\n    with open(encrypted_key_file, 'wb') as f:\n        f.write(b64encode(encrypted_aes_key))\n\n    return pub_key, encrypted_file, encrypted_key_file",
        "test": "import unittest\nfrom base64 import b64decode\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a test file\n        self.test_file = 'test_file.txt'\n        with open(self.test_file, 'w') as f:\n            f.write(\"This is a test file.\")\n    def test_file_encryption(self):\n        pub_key, encrypted_file, _ = task_func(self.test_file)\n        self.assertTrue(os.path.exists(encrypted_file))\n    def test_encrypted_key_file_creation(self):\n        pub_key, _, encrypted_key_file = task_func(self.test_file)\n        self.assertTrue(os.path.exists(encrypted_key_file))\n    def test_public_key_type(self):\n        pub_key, _, _ = task_func(self.test_file)\n        self.assertIsInstance(pub_key, rsa.PublicKey)\n    def test_encrypted_file_content(self):\n        pub_key, encrypted_file, _ = task_func(self.test_file)\n        with open(self.test_file, 'rb') as original_file:\n            original_data = original_file.read()\n        with open(encrypted_file, 'rb') as enc_file:\n            encrypted_data = enc_file.read()\n        self.assertNotEqual(original_data, encrypted_data)\n    def test_aes_key_file_content(self):\n        _, _, encrypted_key_file = task_func(self.test_file)\n        self.assertTrue(os.path.exists(encrypted_key_file))\n        self.assertTrue(os.path.getsize(encrypted_key_file) > 0)\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"non_existent_file.txt\")\n    def tearDown(self):\n        # Clean up created files\n        os.remove(self.test_file)\n        encrypted_file = self.test_file + '.encrypted'\n        if os.path.exists(encrypted_file):\n            os.remove(encrypted_file)\n        if os.path.exists('aes_key.encrypted'):\n            os.remove('aes_key.encrypted')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a list of random integers, where the count of integers equals the day of the month in the provided date, then generates a line plot of these integers and returns the Axes object of the plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n```",
        "gt": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    num_of_values = date.day\n    random_values = [random.randint(1, 100) for _ in range(num_of_values)]\n    _, ax = plt.subplots()\n    ax.plot(random_values)\n    return ax",
        "test": "import unittest\nimport matplotlib.axes\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def test_mid_month(self):\n        \"\"\"\n        Test the function with a mid-month date.\n        Checks if the generated plot has 15 data points for a date like '2023-06-15'.\n        \"\"\"\n        ax = task_func(\"2023-06-15\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 15)\n    def test_beginning_of_month(self):\n        \"\"\"\n        Test the function with a date at the beginning of the month.\n        Checks if the plot has 1 data point for a date like '2023-06-01'.\n        \"\"\"\n        ax = task_func(\"2023-06-01\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 1)\n    def test_end_of_month(self):\n        \"\"\"\n        Test the function with a date at the end of the month.\n        Checks if the plot has 31 data points for a date like '2023-07-31'.\n        \"\"\"\n        ax = task_func(\"2023-07-31\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 31)\n    def test_leap_year(self):\n        \"\"\"\n        Test the function with a leap year date.\n        Checks if the plot has 29 data points for a leap year date like '2024-02-29'.\n        \"\"\"\n        ax = task_func(\"2024-02-29\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 29)\n    def test_invalid_date(self):\n        \"\"\"\n        Test the function with an invalid date format.\n        Expects a ValueError to be raised for an incorrectly formatted date.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            task_func(\"2023/06/15\")\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalize a list of numeric values to the range [0, 1] using min-max scaling.\nThe function should output with:\n    ndarray: An array of normalized values.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n```",
        "gt": "from sklearn.preprocessing import MinMaxScaler\nimport numpy as np\ndef task_func(myList):\n    myList = np.array(myList).reshape(-1, 1)\n    scaler = MinMaxScaler()\n    normalized_list = scaler.fit_transform(myList)\n\n    return normalized_list.flatten()",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        # Testing basic functionality\n        input_data = [10, 20, 30, 40, 50]\n        expected_output = np.array([0. , 0.25, 0.5 , 0.75, 1. ])\n        np.testing.assert_array_almost_equal(task_func(input_data), expected_output, decimal=2)\n    def test_2(self):\n        # Testing with negative values\n        input_data = [-50, -40, -30, -20, -10]\n        expected_output = np.array([0. , 0.25, 0.5 , 0.75, 1. ])\n        np.testing.assert_array_almost_equal(task_func(input_data), expected_output, decimal=2)\n    def test_3(self):\n        # Testing with mixed negative and positive values\n        input_data = [-50, -25, 0, 25, 50]\n        expected_output = np.array([0. , 0.25, 0.5 , 0.75, 1. ])\n        np.testing.assert_array_almost_equal(task_func(input_data), expected_output, decimal=2)\n    def test_4(self):\n        # Testing with single value\n        input_data = [100]\n        expected_output = np.array([0.])\n        np.testing.assert_array_almost_equal(task_func(input_data), expected_output, decimal=2)\n    def test_5(self):\n        # Testing with all zeros\n        input_data = [0, 0, 0, 0, 0]\n        expected_output = np.array([0., 0., 0., 0., 0.])\n        np.testing.assert_array_almost_equal(task_func(input_data), expected_output, decimal=2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a numpy array of random samples drawn from a normal distribution and plots the histogram of these samples. This function specifies the mean (mu), standard deviation (sigma), and sample size (sample_size), making it useful for simulating data, conducting statistical experiments, or initializing algorithms that require normally distributed data with visualization.\nNote that: Notes: Plots a histogram of the generated samples to show the distribution. The histogram features: X-axis labeled \"Sample values\", representing the value of the samples. Y-axis labeled \"Frequency\", showing how often each value occurs. Title \"Histogram of Generated Samples\", describing the content of the graph. Number of bins set to 30, to discretize the sample data into 30 intervals. Alpha value of 0.75 for bin transparency, making the histogram semi-transparent. Color 'blue', giving the histogram a blue color.\nThe function should output with:\n    ndarray: A numpy array of shape (sample_size,) containing samples drawn from the\n    specified normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, sample_size):\n    samples = np.random.normal(mu, sigma, sample_size)\n    \n    # Plotting the histogram of the samples\n    plt.hist(samples, bins=30, alpha=0.75, color='blue')\n    plt.title('Histogram of Generated Samples')\n    plt.xlabel('Sample values')\n    plt.ylabel('Frequency')\n    plt.grid(True)\n    plt.show()\n    \n    return samples",
        "test": "import unittest\nfrom unittest.mock import patch\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\" Test that the function returns a numpy array. \"\"\"\n        result = task_func(0, 1, 1000)\n        self.assertIsInstance(result, np.ndarray)\n    def test_sample_size(self):\n        \"\"\" Test that the returned array has the correct size. \"\"\"\n        result = task_func(0, 1, 1000)\n        self.assertEqual(len(result), 1000)\n    def test_normal_distribution_properties(self):\n        \"\"\" Test if the generated samples have the correct mean and standard deviation. \"\"\"\n        mu, sigma = 0, 1\n        result = task_func(mu, sigma, 1000000)\n        self.assertAlmostEqual(np.mean(result), mu, places=1)\n        self.assertAlmostEqual(np.std(result), sigma, places=1)\n    @patch('matplotlib.pyplot.show')\n    def test_plot_labels_and_title(self, mock_show):\n        \"\"\" Test if the plot has correct labels and title. \"\"\"\n        with patch('matplotlib.pyplot.hist') as mock_hist:\n            task_func(0, 1, 1000)\n            args, kwargs = mock_hist.call_args\n            self.assertIn('bins', kwargs)\n            self.assertEqual(kwargs['bins'], 30)\n            self.assertEqual(kwargs['alpha'], 0.75)\n            self.assertEqual(kwargs['color'], 'blue')\n            self.assertEqual(plt.gca().get_xlabel(), 'Sample values')\n            self.assertEqual(plt.gca().get_ylabel(), 'Frequency')\n            self.assertEqual(plt.gca().get_title(), 'Histogram of Generated Samples')\n    def test_mock_random_normal(self):\n        \"\"\" Test the function with a mock of np.random.normal. \"\"\"\n        with patch('numpy.random.normal', return_value=np.full(1000, 0.5)) as mock_random_normal:\n            mu, sigma = 0, 1\n            result = task_func(mu, sigma, 1000)\n            mock_random_normal.assert_called_once_with(mu, sigma, 1000)\n            self.assertTrue(all(x == 0.5 for x in result))\n    def test_output_consistency(self):\n        \"\"\" Test if repeated calls with the same parameters produce different results. \"\"\"\n        mu, sigma = 0, 1\n        result1 = task_func(mu, sigma, 1000)\n        result2 = task_func(mu, sigma, 1000)\n        self.assertFalse(np.array_equal(result1, result2))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "If a string occurs, divide it the last time \"-\" occurs and count the frequency of each lowercase letter in the prefix of the string.\nThe function should output with:\n    dict: A dictionary with the frequency of each lowercase letter.\nYou should write self-contained code starting with:\n```\nfrom string import ascii_lowercase\nimport re\nfrom collections import Counter\n# Constants\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n```",
        "gt": "from string import ascii_lowercase\nimport re\nfrom collections import Counter\n# Constants\nLETTERS_PATTERN = re.compile(r'^(.*?)-[a-z]$')\nLETTERS = ascii_lowercase\ndef task_func(string):\n    # Match and extract the portion before the last hyphen\n    match = re.search(r'^(.*)-', string)\n    if match:\n        prefix = match.group(1)\n    else:\n        # If there's no hyphen, the whole string is considered if it is letters only\n        prefix = string if string.isalpha() else \"\"\n\n    # Count each letter in the prefix\n    letter_counts = Counter(prefix)\n    # Initialize a dictionary with all letters set to zero count\n    result = {letter: 0 for letter in ascii_lowercase}\n    # Update this dictionary with the actual counts from the prefix\n    result.update({letter: letter_counts.get(letter, 0) for letter in letter_counts if letter in result})\n\n    return result",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('abc-def-ghij')\n        expected = {letter: 1 if letter in 'abcdef' else 0 for letter in ascii_lowercase}\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        result = task_func('abcdefghij')\n        expected = {letter: 1 if letter in 'abcdefghij' else 0 for letter in ascii_lowercase}\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        result = task_func('aabbcc-def')\n        expected = {letter: 2 if letter in 'aabbcc' else 0 for letter in ascii_lowercase}\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        result = task_func('')\n        expected = {letter: 0 for letter in ascii_lowercase}\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        result = task_func('xyz-abc')\n        expected = {letter: 1 if letter in 'xyz' else 0 for letter in ascii_lowercase}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Loads a DLL file specified by the given filepath, then retrieves and prints system information including system name, node name, release, version, machine, Python version, and PIP version. This function demonstrates the use of various system-related libraries in Python. The format of the printed message is: System: <system-name-here> Node Name: <node-name-here> Release: <release-here> Version: <version-here> Machine: <type-of-the-machine-here> Python Version: <python-version-here> PIP Version: <pip-version-here>\nThe function should raise the exception for: OSError: if the input filepath is invalid or empty TypeError: if the input filepath is not a string\nThe function should output with:\n    str: The name of the loaded DLL file.\nYou should write self-contained code starting with:\n```\nimport os\nimport ctypes\nimport sys\nimport subprocess\ndef task_func(filepath):\n```",
        "gt": "import os\nimport ctypes\nimport sys\nimport subprocess\ndef task_func(filepath):\n    if not isinstance(filepath, str):\n        raise TypeError(\"Invalid filepath type\")\n    elif filepath == \"\" or not os.path.exists(filepath):\n        raise OSError(\"Invalid filepath\")\n    else:\n        lib = ctypes.CDLL(filepath)\n\n    uname = os.uname()\n    print(f'System: {uname.sysname}')\n    print(f'Node Name: {uname.nodename}')\n    print(f'Release: {uname.release}')\n    print(f'Version: {uname.version}')\n    print(f'Machine: {uname.machine}')\n\n    python_version = sys.version\n    print(f'Python Version: {python_version}')\n\n    pip_version = subprocess.check_output(['pip', '--version'])\n    print(f'PIP Version: {pip_version.decode(\"utf-8\")}')\n    return lib._name",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport io\nimport sys\nclass TestCases(unittest.TestCase):\n    @patch('ctypes.CDLL', autospec=True)\n    @patch('os.path.exists', return_value=True)\n    @patch('subprocess.check_output', return_value=b'pip 20.2.3 from /usr/lib/python3.8/site-packages/pip (python 3.8)')\n    def test_system_info_printing(self, mock_check_output, mock_exists, mock_cdll):\n        \"\"\"Check if system information is correctly printed.\"\"\"\n        # Set up the mock CDLL instance\n        mock_cdll_instance = MagicMock()\n        mock_cdll.return_value = mock_cdll_instance\n        mock_cdll_instance._name = 'libc.so.6'\n        # Capture the output of print statements\n        captured_output = io.StringIO()\n        sys.stdout = captured_output\n        task_func('libc.so.6')\n        # Restore stdout\n        sys.stdout = sys.__stdout__\n        # Verify that the expected information is printed\n        output = captured_output.getvalue()\n        self.assertIn('System:', output)\n        self.assertIn('Node Name:', output)\n        self.assertIn('Release:', output)\n        self.assertIn('Version:', output)\n        self.assertIn('Machine:', output)\n        self.assertIn('Python Version:', output)\n        self.assertIn('PIP Version:', output)\n    @patch('ctypes.CDLL', autospec=True)\n    @patch('os.path.exists', return_value=True)\n    def test_return_type(self, mock_exists, mock_cdll):\n        # Set up the mock CDLL instance\n        mock_cdll_instance = MagicMock()\n        mock_cdll.return_value = mock_cdll_instance\n        mock_cdll_instance._name = 'libc.so.6'  # Setting up the expected return value\n        # Invoke task_func with a filepath\n        filepath = 'libc.so.6'\n        result = task_func(filepath)\n        # Check that the function returns a string and that the string is the name of the DLL\n        self.assertIsInstance(result, str)  # Ensure the return type is string\n        self.assertEqual(result, 'libc.so.6')  # Check if the name matches what's expected\n    def test_invalid_file_path(self):\n        with self.assertRaises(OSError):\n            task_func('invalid_path.dll')\n    def test_empty_file_path(self):\n        with self.assertRaises(OSError):\n            task_func('')\n    def test_non_string_input(self):\n        with self.assertRaises(TypeError):\n            task_func(123)\n    def test_os_uname_output(self):\n        filepath = 'libc.so.6'\n        self.assertFalse('sysname' in os.uname())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Determine the size and date of the last modification of a file.\nThe function should output with:\n    dict: A dictionary containing the size (in bytes) and last modification\n    date of the file in the format '%Y-%m-%d %H:%M:%S'.\nYou should write self-contained code starting with:\n```\nimport os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n```",
        "gt": "import os\nfrom datetime import datetime\ndef task_func(filepath: str) -> dict:\n    try:\n        size = os.path.getsize(filepath)\n        mtime = os.path.getmtime(filepath)\n        mtime = datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M:%S')\n    except OSError as e:\n        raise Exception(f\"Error: {e}\")\n\n    return {'size': f\"{size} bytes\", 'last_modified': mtime}",
        "test": "import unittest\nimport os\nfrom datetime import datetime\nfrom unittest.mock import patch\nimport errno\ndef create_test_files(base_path):\n    os.makedirs(base_path, exist_ok=True)\n    with open(os.path.join(base_path, \"empty_file.txt\"), 'w') as f:\n        pass\n    with open(os.path.join(base_path, \"large_file.txt\"), 'w') as f:\n        f.write(\"A\" * 10**6)  # 1MB file\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.base_path = \"task_func_data\"\n        create_test_files(self.base_path)\n    def tearDown(self):\n        for item in os.listdir(self.base_path):\n            os.remove(os.path.join(self.base_path, item))\n        os.rmdir(self.base_path)\n    def test_file_properties(self):\n        file_path = os.path.join(self.base_path, \"large_file.txt\")\n        result = task_func(file_path)\n        expected_size = os.path.getsize(file_path)\n        expected_mtime = datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S')\n        self.assertEqual(result['size'], f\"{expected_size} bytes\")\n        self.assertEqual(result['last_modified'], expected_mtime)\n    def test_empty_file(self):\n        file_path = os.path.join(self.base_path, \"empty_file.txt\")\n        result = task_func(file_path)\n        self.assertEqual(result['size'], \"0 bytes\")\n    def test_file_not_found(self):\n        file_path = os.path.join(self.base_path, \"nonexistent.txt\")\n        with self.assertRaises(Exception) as context:\n            task_func(file_path)\n        self.assertIn(\"No such file or directory\", str(context.exception))\n    @patch('os.path.getsize')\n    @patch('os.path.getmtime')\n    def test_permission_error(self, mock_getmtime, mock_getsize):\n        mock_getsize.side_effect = OSError(errno.EACCES, \"Permission denied\")\n        mock_getmtime.side_effect = OSError(errno.EACCES, \"Permission denied\")\n        \n        with self.assertRaises(Exception) as context:\n            task_func(\"fakepath/file.txt\")\n        self.assertIn(\"Permission denied\", str(context.exception))\n    def test_large_file(self):\n        file_path = os.path.join(self.base_path, \"large_file.txt\")\n        result = task_func(file_path)\n        self.assertTrue(int(result['size'].replace(' bytes', '')) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a number of random strings with a specified length from a fixed set of letters ('a', 'b', 'c', 'd', 'e'), and analyze the frequency of each letter in the generated strings.\nThe function should output with:\n    Counter: A collections.Counter object containing the frequency of each letter in the generated strings.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n```",
        "gt": "from collections import Counter\nimport random\nimport itertools\ndef task_func(length, count, seed=0):\n    random.seed(seed)\n    strings = [''.join(random.choices(['a', 'b', 'c', 'd', 'e'], k=length)) for _ in range(count)]\n    letter_frequency = Counter(itertools.chain(*strings))\n    \n    return letter_frequency",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_length_one_count_ten(self):\n        result = task_func(1, 10, seed=0)\n        self.assertIsInstance(result, Counter)\n        self.assertEqual(sum(result.values()), 10, \"The total count of letters should be 10.\")\n        \n    def test_length_five_count_hundred(self):\n        result = task_func(5, 100, seed=1)\n        self.assertIsInstance(result, Counter)\n        self.assertEqual(sum(result.values()), 500, \"The total count of letters should be 500.\")\n        \n    def test_zero_length(self):\n        result = task_func(0, 100, seed=2)\n        self.assertIsInstance(result, Counter)\n        self.assertEqual(sum(result.values()), 0, \"With length 0, there should be no letters.\")\n        \n    def test_zero_count(self):\n        result = task_func(5, 0, seed=3)\n        self.assertIsInstance(result, Counter)\n        self.assertEqual(sum(result.values()), 0, \"With count 0, there should be no letters.\")\n        \n    def test_specific_distribution(self):\n        # Assuming the seed value of 4 leads to a specific, known distribution\n        result = task_func(5, 2, seed=4)\n        # Correct the expected distribution based on actual output\n        correct_expected_distribution = Counter({'b': 3, 'a': 3, 'e': 2, 'c': 1, 'd': 1})\n        self.assertEqual(result, correct_expected_distribution, \"The letter distribution should match the expected distribution.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame that displays the random scores of different teams in multiple games. The function generates random scores for each game played by each team and populates them in a DataFrame with index=teams, columns=games.\nThe function should output with:\n    DataFrame: The generated DataFrame containing random scores for each team in each game.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(num_teams=5, num_games=100):\n    scores = np.random.randint(0, 101, size=(num_teams, num_games))\n    teams = ['Team' + str(i) for i in range(1, num_teams + 1)]\n    games = ['Game' + str(i) for i in range(1, num_games + 1)]\n    df = pd.DataFrame(scores, index=teams, columns=games)\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func()\n        self.assertEqual(df.shape, (5, 100))\n    def test_case_2(self):\n        df = task_func(num_teams=3, num_games=10)\n        self.assertEqual(df.shape, (3, 10))\n        \n    def test_case_3(self):\n        df = task_func(num_teams=4, num_games=20)\n        self.assertListEqual(list(df.index), ['Team1', 'Team2', 'Team3', 'Team4'])\n        \n    def test_case_4(self):\n        df = task_func(num_teams=2, num_games=5)\n        self.assertListEqual(list(df.columns), ['Game1', 'Game2', 'Game3', 'Game4', 'Game5'])\n        \n    def test_case_5(self):\n        df = task_func(num_teams=2, num_games=5)\n        self.assertTrue((df.dtypes == 'int64').all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a map with markers for a list of cities, where the coordinates are randomly generated within given ranges.\nThe function should raise the exception for: ValueError: If 'Lon' or 'Lat' keys are missing in the dictionary, or if their values are not tuples.\nThe function should output with:\n    tuple: A tuple containing (folium.Map, pandas.DataFrame).\n    The DataFrame contains 'City', 'Longitude', and 'Latitude' columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport folium\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys with tuple values.\")\n\n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n\n    data = {'City': [], 'Longitude': [], 'Latitude': []}\n    for city in cities:\n        data['City'].append(city)\n        data['Longitude'].append(np.random.uniform(lon_min, lon_max))\n        data['Latitude'].append(np.random.uniform(lat_min, lat_max))\n\n    df = pd.DataFrame(data)\n\n    m = folium.Map(location=[0, 0], zoom_start=2)\n    for _, row in df.iterrows():\n        folium.Marker([row['Latitude'], row['Longitude']], popup=row['City']).add_to(m)\n\n    return m, df",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport folium\nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        np.random.seed(42)\n        map_obj, city_data = task_func()\n        self.assertEqual(len(city_data), 5)  # Default 5 cities\n        self.assertIsInstance(city_data, pd.DataFrame)\n        self.assertIn('New York', city_data['City'].values)\n        \n        df_list = city_data.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(df_list))\n            \n        expect = ['New York,-45.1655572149495,81.12857515378491', 'London,83.51781905210584,17.758527155466595', 'Beijing,-123.83328944072285,-61.92098633948352', 'Tokyo,-159.0898996194482,65.91170623948832', 'Sydney,36.40140422755516,37.45306400328819']\n        \n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    def test_custom_cities(self):\n        custom_cities = ['Paris', 'Berlin']\n        _, city_data = task_func(cities=custom_cities)\n        self.assertEqual(len(city_data), 2)\n        self.assertTrue(all(city in city_data['City'].values for city in custom_cities))\n    def test_invalid_dic(self):\n        with self.assertRaises(ValueError):\n            task_func(dic={'Lon': 'invalid', 'Lat': (-90, 90)})\n    def test_coordinate_ranges(self):\n        _, city_data = task_func(dic={'Lon': (0, 10), 'Lat': (0, 10)})\n        self.assertTrue(all(0 <= lon <= 10 for lon in city_data['Longitude']))\n        self.assertTrue(all(0 <= lat <= 10 for lat in city_data['Latitude']))\n    def test_return_types(self):\n        map_obj, city_data = task_func()\n        self.assertIsInstance(map_obj, folium.Map)\n        self.assertIsInstance(city_data, pd.DataFrame)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Move all files with a particular extension from one directory to another.\nThe function should output with:\n    result (int): The count of files that were moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n```",
        "gt": "import os\nimport shutil\nimport glob\ndef task_func(source_dir, dest_dir, extension):\n    files = glob.glob(os.path.join(source_dir, f'*.{extension}'))\n    \n    for file in files:\n        shutil.move(file, dest_dir)\n        \n    result = len(files)\n\n    return result",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        for d in ['./source', './destination', './src', './dst', './s', './d']:\n            if os.path.exists(d):\n                shutil.rmtree(d)\n    def test_case_1(self):\n        # Create source directory\n        if os.path.exists('./source'):\n            shutil.rmtree('./source')\n        os.mkdir('./source')\n        # Create destination directory\n        if os.path.exists('./destination'):\n            shutil.rmtree('./destination')\n        os.mkdir('./destination')\n        # Create files\n        for filename in ['a.txt', 'b.txt', 'c.docx', 'd.docx', 'e.txt', 'a.pdf', 'a.doc']:\n            with open(os.path.join('./source', filename), 'w') as f:\n                f.write('test')\n        # Run function\n        task_func('./source', './destination', 'txt')\n        # Check files\n        for d in ['./destination', './source']:\n            if d == './source':\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.doc')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'c.docx')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'd.docx')))  \n            else:\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'b.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'e.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))\n        # Remove files\n        shutil.rmtree('./source')\n        shutil.rmtree('./destination')\n    def test_case_2(self):\n        # Create source directory\n        if os.path.exists('./src'):\n            shutil.rmtree('./src')\n        os.mkdir('./src')\n        # Create destination directory\n        if os.path.exists('./dst'):\n            shutil.rmtree('./dst')\n        os.mkdir('./dst')\n        # Create files\n        for filename in ['a.txt', 'b.txt', 'c.docx', 'd.docx', 'e.txt', 'a.pdf', 'a.doc']:\n            with open(os.path.join('./src', filename), 'w') as f:\n                f.write('test')\n        # Run function\n        task_func('./src', './dst', 'txt')\n        # Check files\n        for d in ['./dst', './src']:\n            if d == './src':\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.doc')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'c.docx')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'd.docx')))  \n            else:\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'b.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'e.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))\n        # Remove files\n        shutil.rmtree('./src')\n        shutil.rmtree('./dst')\n    def test_case_3(self):\n        # Create source directory\n        if os.path.exists('./s'):\n            shutil.rmtree('./s')\n        os.mkdir('./s')\n        # Create destination directory\n        if os.path.exists('./d'):\n            shutil.rmtree('./d')\n        os.mkdir('./d')\n        # Create files\n        for filename in ['a.txt', 'b.txt', 'c.docx', 'd.docx', 'e.txt', 'a.pdf', 'a.doc']:\n            with open(os.path.join('./s', filename), 'w') as f:\n                f.write('test')\n        # Run function\n        task_func('./s', './d', 'txt')\n        # Check files\n        for d in ['./d', './s']:\n            if d == './s':\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.doc')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'c.docx')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'd.docx')))  \n            else:\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'b.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'e.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))\n        # Remove files\n        shutil.rmtree('./s')\n        shutil.rmtree('./d')\n    def test_case_4(self):\n        # Create source directory\n        if os.path.exists('./s'):\n            shutil.rmtree('./s')\n        os.mkdir('./s')\n        # Create destination directory\n        if os.path.exists('./destination'):\n            shutil.rmtree('./destination')\n        os.mkdir('./destination')\n        # Create files\n        for filename in ['bbb.txt', 'a.txt', 'b.txt', 'c.docx', 'd.docx', 'e.txt', 'a.pdf', 'a.doc']:\n            with open(os.path.join('./s', filename), 'w') as f:\n                f.write('test')\n        # Run function\n        task_func('./s', './destination', 'txt')\n        # Check files\n        for d in ['./destination', './s']:\n            if d == './s':\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.doc')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'c.docx')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'd.docx')))  \n            else:\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'b.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'e.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))\n        # Remove files\n        shutil.rmtree('./s')\n        shutil.rmtree('./destination')\n    def test_case_5(self):\n        # Create source directory\n        if os.path.exists('./source'):\n            shutil.rmtree('./source')\n        os.mkdir('./source')\n        # Create destination directory\n        if os.path.exists('./d'):\n            shutil.rmtree('./d')\n        os.mkdir('./d')\n        # Create files\n        for filename in ['a.txt', 'b.txt', 'c.docx', 'd.docx', 'e.txt', 'a.pdf', 'a.doc']:\n            with open(os.path.join('./source', filename), 'w') as f:\n                f.write('xxx')\n        # Run function\n        task_func('./source', './d', 'docx')\n        # Check files\n        for d in ['./d', './source']:\n            if d == './source':\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.doc')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'b.txt')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'e.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))\n            else:\n                self.assertTrue(os.path.exists(os.path.join(d, 'c.docx')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'd.docx')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'a.doc')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'a.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'b.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'e.txt')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Identifies and removes outliers from a specified column of a dataset based on the Z-score. It standardizes the column, calculates Z-scores, and removes data points where the Z-score exceeds a threshold. The function also visualizes the data before and after outlier removal.\nNote that: Notes: The function plots two scatter plots: 'Data with Outliers' shows the original data including outliers, while 'Data without Outliers' displays the data after removing outliers based on the provided Z-score threshold. This visual comparison helps illustrate the impact of outlier removal on the dataset.\nThe function should output with:\n    tuple: A tuple containing the original data, the data without outliers, and the indices of the outliers.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data, column, outlier_z_score):\n    # Copy the data to avoid modifying the original array\n    data_copy = np.copy(data)\n    column_data = data_copy[:, column]\n\n    # Standardize the data to have a mean of 0 and a standard deviation of 1\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(column_data.reshape(-1, 1))\n\n    # Calculate the Z-scores\n    z_scores = np.abs(stats.zscore(standardized_data))\n\n    # Identify the outliers\n    outliers = np.where(z_scores > outlier_z_score)\n    data_without_outliers = np.delete(data_copy, outliers, axis=0)\n\n    # Plot the data before and after the removal of outliers\n    plt.figure(figsize=(10, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.scatter(data_copy[:, 0], data_copy[:, 1])\n    plt.title('Data with Outliers')\n\n    plt.subplot(1, 2, 2)\n    plt.scatter(data_without_outliers[:, 0], data_without_outliers[:, 1])\n    plt.title('Data without Outliers')\n\n    plt.show()\n\n    return data_copy, data_without_outliers, outliers",
        "test": "import unittest\nimport numpy as np\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Setup the test data and parameters.\"\"\"\n        self.data = np.array([[1, 2], [3, 4], [5, 6], [1000, 1000]])\n        self.column = 1\n        self.outlier_z_score = 3.0\n    def test_original_data_unchanged(self):\n        \"\"\"Test if the original data remains unchanged.\"\"\"\n        original_data, _, _ = task_func(self.data, self.column, self.outlier_z_score)\n        np.testing.assert_array_equal(self.data, original_data)\n    def test_data_without_outliers(self):\n        \"\"\"Test if outliers are correctly removed.\"\"\"\n        _, data_without_outliers, _ = task_func(self.data, self.column, self.outlier_z_score)\n        self.assertLessEqual(len(data_without_outliers), len(self.data))\n    def test_return_type(self):\n        \"\"\"Test if the function returns a tuple of correct types.\"\"\"\n        result = task_func(self.data, self.column, self.outlier_z_score)\n        self.assertIsInstance(result, tuple)\n        self.assertIsInstance(result[0], np.ndarray)\n        self.assertIsInstance(result[1], np.ndarray)\n        self.assertIsInstance(result[2], tuple)\n    @patch('matplotlib.pyplot.show')\n    def test_no_plotting(self, mock_show):\n        \"\"\"Test that the plotting function is called but does not display plots during testing.\"\"\"\n        task_func(self.data, self.column, self.outlier_z_score)\n        mock_show.assert_called()\n    def test_no_change_in_data_dimension(self):\n        \"\"\"Test if the dimension of the data remains unchanged.\"\"\"\n        _, data_without_outliers, _ = task_func(self.data, self.column, self.outlier_z_score)\n        self.assertEqual(self.data.shape[1], data_without_outliers.shape[1])\n    @patch('matplotlib.pyplot.show')\n    def test_plot_titles(self, mock_show):\n        \"\"\"Test if the plot titles match the requirement in the docstring.\"\"\"\n        task_func(self.data, self.column, self.outlier_z_score)\n        \n        # Get the figure and axes used in the plt.show call\n        fig = plt.gcf()\n        axes = fig.axes\n        expected_titles = ['Data with Outliers', 'Data without Outliers']\n        actual_titles = [ax.get_title() for ax in axes]\n        self.assertEqual(expected_titles, actual_titles, \"Plot titles do not match expected titles.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a list of dictionaries from a JSON file, calculate the mean and median for each key, and write the results to a CSV file.\nThe function should output with:\n    dict: A dictionary where each key is a field from the input JSON and each value is another dictionary with the mean and median of that field.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n```",
        "gt": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n# Constants\ndef task_func(input_file, output_file):\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    \n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    \n    result = {k: {'mean': np.mean(v), 'median': np.median(v)} for k, v in stats.items()}\n\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])\n        writer.writeheader()\n        for key, values in result.items():\n            writer.writerow({'key': key, 'mean': values['mean'], 'median': values['median']})\n    \n    return result",
        "test": "import unittest\nimport csv\nimport numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\nimport os\nimport tempfile\nimport shutil\n# Constants\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Creating a temporary directory and files for testing\n        self.test_dir = tempfile.mkdtemp()\n        self.addCleanup(lambda: shutil.rmtree(self.test_dir))\n        # Example JSON file names\n        self.test_data_files = [\n            os.path.join(self.test_dir, \"test1.json\"),\n            os.path.join(self.test_dir, \"test2.json\"),\n            os.path.join(self.test_dir, \"test3.json\"),\n            os.path.join(self.test_dir, \"test4.json\"),\n            os.path.join(self.test_dir, \"test5.json\")\n        ]\n        # Example data for each file\n        example_data = [\n            [{\"key1\": 10}, {\"key1\": 20}],\n            [{\"key2\": 30}, {\"key2\": 40}],\n            [{\"key3\": 50}, {\"key3\": 60}],\n            [{\"key4\": 70}, {\"key4\": 80}],\n            [{\"key5\": 90}, {\"key5\": 100}]\n        ]\n        # Write the data to each file\n        for file_path, data in zip(self.test_data_files, example_data):\n            with open(file_path, 'w') as f:\n                json.dump(data, f)\n        # Expected results for each test case\n        self.expected_results_list = [\n            {\"key1\": {\"mean\": 15.0, \"median\": 15.0}},\n            {\"key2\": {\"mean\": 35.0, \"median\": 35.0}},\n            {\"key3\": {\"mean\": 55.0, \"median\": 55.0}},\n            {\"key4\": {\"mean\": 75.0, \"median\": 75.0}},\n            {\"key5\": {\"mean\": 95.0, \"median\": 95.0}}\n        ]\n    def validate_data(self, input_file, expected_results):\n        output_file = \"temp_output.csv\"\n        task_func(input_file, output_file)\n        with open(output_file, 'r') as f:\n            reader = csv.DictReader(f)\n            for row in reader:\n                key = row[\"key\"]\n                self.assertAlmostEqual(float(row[\"mean\"]), expected_results[key][\"mean\"], places=2)\n                self.assertAlmostEqual(float(row[\"median\"]), expected_results[key][\"median\"], places=2)\n        os.remove(output_file)\n    def test_case_1(self):\n        # Test description: Verifying the mean and median calculations for a set of random key-value pairs in JSON data.\n        self.validate_data(self.test_data_files[0], self.expected_results_list[0])\n    def test_case_2(self):\n        # Test description: Checking the function's behavior with another set of random key-value pairs in JSON data.\n        self.validate_data(self.test_data_files[1], self.expected_results_list[1])\n    def test_case_3(self):\n        # Test description: Testing the function's handling of yet another set of random key-value pairs.\n        self.validate_data(self.test_data_files[2], self.expected_results_list[2])\n    def test_case_4(self):\n        # Test description: Assessing the function's output with a different set of key-value pairs.\n        self.validate_data(self.test_data_files[3], self.expected_results_list[3])\n    def test_case_5(self):\n        # Test description: Evaluating the function's performance with a final set of random key-value pairs in JSON data.\n        self.validate_data(self.test_data_files[4], self.expected_results_list[4])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads a CSV file, normalizes the text in it to ASCII, counts the words, and returns the 10 most common words along with their frequencies as a matplotlib bar plot and a list of tuples.\nNote that: The function assumes that the CSV file contains text data and that the file is properly formatted.\nThe function should raise the exception for: FileNotFoundError: If the CSV file cannot be found at the specified path. IOError: If there is an error in reading the file.\nThe function should output with:\n    tuple: A tuple containing matplotlib.axes.Axes object for the bar plot and a list of the 10 most common words\n    with their frequencies.\nYou should write self-contained code starting with:\n```\nimport unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n```",
        "gt": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(csv_file):\n    try:\n        words = []\n        with open(csv_file, 'r') as file:\n            reader = csv.reader(file)\n            for row in reader:\n                for word in row:\n                    normalized_word = unicodedata.normalize('NFKD', word).encode('ascii', 'ignore').decode()\n                    words.append(normalized_word)\n\n        word_counter = Counter(words)\n        most_common_words = word_counter.most_common(10)\n        labels, values = zip(*most_common_words)\n        fig, ax = plt.subplots()\n        ax.bar(labels, values)\n        return ax, most_common_words\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {csv_file} was not found.\")\n    except IOError:\n        raise IOError(f\"There was an error reading the file {csv_file}.\")",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nimport matplotlib.axes\ndef create_dummy_csv_file(filepath='dummy.csv'):\n    # Data to be written into the CSV file\n    data = [\n        ['word1', 'word2', 'word3', 'word4'],\n        ['word2', 'word3', 'word3', 'word5'],\n        ['word6', 'word7', 'word8', 'word1']\n    ]\n    # Write data to CSV\n    with open(filepath, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\nclass TestCases(unittest.TestCase):\n    def test_valid_csv_file(self):\n        \"\"\" Test with a valid CSV file. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1,word2\\nword3,word4\")):\n            ax, most_common_words = task_func('dummy.csv')\n            self.assertIsInstance(ax, matplotlib.axes.Axes)\n            self.assertIsInstance(most_common_words, list)\n    def test_file_not_found_error(self):\n        \"\"\" Test with a non-existent CSV file. \"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.csv')\n    def test_io_error(self):\n        \"\"\" Test with an IO error during file reading. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1,word2\\nword3,word4\")):\n            open.side_effect = IOError\n            with self.assertRaises(IOError):\n                task_func('dummy.csv')\n    def test_plot_output(self):\n        \"\"\" Test the output plot's type and attributes. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1,word1\\nword2,word2\")):\n            ax, most_common_words = task_func('dummy.csv')\n            self.assertIsInstance(ax, matplotlib.axes.Axes)\n            self.assertEqual(len(ax.patches), 2)  # Check if there are 2 bars in the plot\n    def test_normalized_text(self):\n        \"\"\" Test if the text normalization works correctly. \"\"\"\n        test_data = \"Caf\u00e9,Caf\u00e9\\nNi\u00f1o,Ni\u00f1o\"\n        with patch('builtins.open', mock_open(read_data=test_data)):\n            ax, most_common_words = task_func('dummy.csv')\n            # Check if 'Caf\u00e9' is normalized to 'Cafe'\n            self.assertIn(('Cafe', 2), most_common_words)  # Directly check most_common_words",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Predicts the price based on a given area after training a linear regression model.\nThe function should output with:\n    float: The predicted price for the given area.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n```",
        "gt": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nDATA = {\n    \"Area_String\": [\"1,000\", \"2,000\", \"3,000\", \"4,000\", \"5,000\"],\n    \"Price\": [100, 200, 300, 400, 500],\n}\ndef task_func(area_string, data=DATA):\n    # Convert area strings to float and prepare data for the model\n    df = pd.DataFrame(data)\n    df[\"Area_Float\"] = df[\"Area_String\"].str.replace(\",\", \"\").astype(float)\n\n    # Train the linear regression model\n    X = df[[\"Area_Float\"]]\n    Y = df[\"Price\"]\n    model = LinearRegression()\n    model.fit(X, Y)\n\n    # Predict the price for the given area string\n    area_float = float(area_string.replace(\",\", \"\"))\n    prediction_data = pd.DataFrame([area_float], columns=[\"Area_Float\"])\n    price_predicted = model.predict(prediction_data)\n\n    return price_predicted[0]",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_correctness(self):\n        \"\"\"Test correctness.\"\"\"\n        self.assertAlmostEqual(task_func(\"6,000\"), 600, delta=10)\n        self.assertAlmostEqual(task_func(\"7,000\"), 700, delta=10)\n    def test_input_formats(self):\n        \"\"\"Test input formats.\"\"\"\n        self.assertAlmostEqual(task_func(\"6,500\"), 650, delta=10)\n        self.assertAlmostEqual(task_func(\"6500\"), 650, delta=10)\n    def test_custom_data(self):\n        \"\"\"Test custom data.\"\"\"\n        custom_data = {\n            \"Area_String\": [\"10\", \"20\", \"30\", \"40\", \"50\"],\n            \"Price\": [1, 2, 3, 4, 5],\n        }\n        self.assertAlmostEqual(task_func(\"60\", data=custom_data), 6, delta=0.1)\n    def test_existing_area(self):\n        \"\"\"Test existing area.\"\"\"\n        self.assertAlmostEqual(task_func(\"5,000\"), 500, delta=5)\n    def test_large_area(self):\n        \"\"\"Test large area.\"\"\"\n        self.assertAlmostEqual(task_func(\"100,000\"), 10000, delta=100)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Randomizes the order of comma-separated substrings within each string in a list, normalizing spaces to ensure a single space follows each comma using regex, then returns a DataFrame comparing original and randomized strings.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'Original String' and 'Randomized String'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n```",
        "gt": "import pandas as pd\nimport random\nimport re\ndef task_func(data_list, seed=42):\n    random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    randomized_strings = []\n    for s in data_list:\n        substrings = re.split(\"\\s*,\\s*\", s)\n        random_positions = random.sample(range(len(substrings)), len(substrings))\n        randomized_s = \", \".join([substrings[i] for i in random_positions])\n        randomized_strings.append(randomized_s)\n\n    df[\"Randomized String\"] = randomized_strings\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport re\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic functionality with a reproducible seed\n        input_data = [\"a, b\", \"c, d, e\"]\n        df = task_func(input_data, seed=42)\n        self.assertEqual(len(df), 2)\n        self.assertListEqual(df[\"Original String\"].tolist(), input_data)\n        self.assertNotEqual(\n            df[\"Original String\"].tolist(), df[\"Randomized String\"].tolist()\n        )\n        self.assertSetEqual(\n            set(df[\"Original String\"].tolist()[0].split(\", \")),\n            set(df[\"Randomized String\"].tolist()[0].split(\", \")),\n        )\n    def test_case_2(self):\n        # Test function's behavior with an empty input list\n        input_data = []\n        df = task_func(input_data)\n        self.assertEqual(len(df), 0)\n    def test_case_3(self):\n        # Test with single items (no commas) to verify output matches input exactly\n        input_data = [\"a\", \"b\", \"c\"]\n        df = task_func(input_data)\n        self.assertListEqual(\n            df[\"Original String\"].tolist(), df[\"Randomized String\"].tolist()\n        )\n    def test_case_4(self):\n        # Test with strings containing only commas\n        input_data = [\",,,\", \",,\"]\n        expected_output = [\", , , \", \", , \"]\n        df = task_func(input_data)\n        self.assertTrue(\n            all(df[\"Randomized String\"].apply(lambda x: x in expected_output))\n        )\n    def test_case_5(self):\n        # Test strings with inconsistent use of spaces and delimiters\n        input_data = [\"a,b,  c\", \"d ,e, f\"]  # Inputs with inconsistent spacing\n        df = task_func(input_data, seed=24)\n        for i in range(len(input_data)):\n            original_substrings = set(re.split(\"\\s*,\\s*\", input_data[i]))\n            randomized_substrings = set(df[\"Randomized String\"].iloc[i].split(\", \"))\n            self.assertEqual(\n                original_substrings,\n                randomized_substrings,\n            )\n    def test_case_6(self):\n        # Test with strings that include special characters\n        input_data = [\"!@#, $%^\", \"&*(), )(_+\"]\n        df = task_func(input_data, seed=99)\n        self.assertEqual(len(df), 2)\n        for orig, rand in zip(df[\"Original String\"], df[\"Randomized String\"]):\n            self.assertSetEqual(set(orig.split(\", \")), set(rand.split(\", \")))\n    def test_case_7(self):\n        # Test random seed\n        input_data = [\"lamp, bag, mirror\", \"table, chair, vase\"]\n        df1 = task_func(input_data, seed=42)\n        df2 = task_func(input_data, seed=42)\n        self.assertListEqual(\n            df1[\"Randomized String\"].tolist(), df2[\"Randomized String\"].tolist()\n        )\n    def test_case_8(self):\n        # Test the handling of non-standard separators\n        input_data = [\"a;b;c\", \"d:e:f\"]\n        df = task_func(input_data)\n        self.assertListEqual(\n            df[\"Original String\"].tolist(), df[\"Randomized String\"].tolist()\n        )\n    def test_case_9(self):\n        ## Test handling of strings with commas not followed by spaces\n        input_data = [\"a,b,c\", \"d,e,f\"]\n        df = task_func(input_data, seed=42)\n        for idx in range(len(input_data)):\n            original_substrings = set(re.split(\",\\s*\", input_data[idx].strip()))\n            randomized_substrings = set(df[\"Randomized String\"].iloc[idx].split(\", \"))\n            self.assertEqual(\n                original_substrings,\n                randomized_substrings,\n                \"Substrings should be preserved and normalized after randomization.\",\n            )\n    def test_case_10(self):\n        # Test handling of strings with leading or trailing spaces\n        input_data = [\" a, b, c \", \" d, e, f \"]\n        df = task_func(input_data, seed=42)\n        for idx in range(len(input_data)):\n            original_substrings = set(\n                x.strip() for x in re.split(\",\\s*\", input_data[idx].strip())\n            )\n            randomized_substrings = set(\n                x.strip() for x in df[\"Randomized String\"].iloc[idx].split(\", \")\n            )\n            self.assertEqual(\n                original_substrings,\n                randomized_substrings,\n                \"Ensure substrings match after randomization, ignoring leading/trailing spaces.\",\n            )\n    def test_case_11(self):\n        # Test handling of strings with multiple spaces after a comma\n        input_data = [\"a,  b,   c\", \"d,    e, f\"]\n        df = task_func(input_data, seed=42)\n        for rand_str in df[\"Randomized String\"].tolist():\n            self.assertTrue(\n                \",  \" not in rand_str\n                and \",   \" not in rand_str\n                and \",    \" not in rand_str,\n                \"Multiple spaces after commas should not appear in output.\",\n            )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the frequency of certain words in a text dictionary and return a bar chart's Axes object and a dictionary containing the frequencies of the top_k most common words in text_dict. The function takes a dictionary containing word frequencies and a list of words. It calculates the frequency of the provided words in the dictionary and returns the Axes object of the bar chart displaying the frequencies along with the top_k most common words and their frequencies as a dictionary. If a word in word_keys is not present in text_dict, its frequency is considered to be 0.\nThe function should raise the exception for: ValueError: If top_k is a negative integer.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\n    dict: Dictionary containing the frequencies of the top_k most common words. Key is the word and value is\n    its frequency.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(text_dict, word_keys, top_k=2):\n```",
        "gt": "import pandas as pd\nfrom collections import Counter\ndef task_func(text_dict, word_keys, top_k=2):\n    if top_k < 0:\n        raise ValueError('top_k must be a positive integer.')\n    elif top_k >= len(text_dict):\n        top_k = len(text_dict)\n\n    frequencies = [text_dict.get(word, 0) for word in word_keys]\n    freq_dict = Counter(text_dict)\n    top_k_words = freq_dict.most_common(top_k)\n    word_series = pd.Series(frequencies, index=word_keys)\n    ax = word_series.plot(kind='bar')\n    return ax, dict(top_k_words)",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        text_dict = Counter(['the', 'be', 'to', 'the', 'and', 'that', 'a', 'in', 'the', 'that', 'have', 'I'])\n        word_keys = ['the', 'and', 'I']\n        ax, top_k_dict = task_func(text_dict, word_keys, 3)\n        self.assertDictContainsSubset(top_k_dict, {'the': 3, 'that': 2, 'be': 1})\n        self.assertEqual(ax.get_xticks().tolist(), list(range(len(word_keys))))\n        self.assertEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n    def test_case_2(self):\n        text_dict = Counter(['apple', 'banana', 'apple', 'orange', 'grape', 'apple', 'banana'])\n        word_keys = ['apple', 'banana', 'cherry']\n        ax, top_k_dict = task_func(text_dict, word_keys)\n        self.assertDictContainsSubset(top_k_dict, {'apple': 3, 'banana': 2})\n        self.assertEqual(ax.get_xticks().tolist(), list(range(len(word_keys))))\n        self.assertEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n    def test_case_3(self):\n        text_dict = Counter([])\n        word_keys = ['apple', 'banana', 'cherry']\n        ax, top_k_dict = task_func(text_dict, word_keys)\n        self.assertEqual(ax.get_xticks().tolist(), list(range(len(word_keys))))\n        self.assertEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n    def test_case_4(self):\n        text_dict = Counter(['a', 'a', 'b', 'b', 'b', 'c', 'c'])\n        word_keys = ['a', 'b', 'c', 'd']\n        ax, top_k_dict = task_func(text_dict, word_keys)\n        self.assertEqual(ax.get_xticks().tolist(), list(range(len(word_keys))))\n        self.assertEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n    def test_case_5(self):\n        text_dict = Counter(['cat', 'dog', 'cat', 'fish', 'fish', 'fish', 'bird'])\n        word_keys = ['cat', 'dog', 'bird', 'elephant']\n        ax, top_k_dict = task_func(text_dict, word_keys,9)\n        self.assertDictContainsSubset(top_k_dict, {'fish': 3, 'cat': 2, 'dog': 1, 'bird': 1})\n        self.assertEqual(ax.get_xticks().tolist(), list(range(len(word_keys))))\n        self.assertEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Run files from list of files as subprocesses at the same time.\nThe function should output with:\n    list: The exit codes of the subprocesses.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport threading\ndef task_func(file_list):\n```",
        "gt": "import subprocess\nimport time\nimport threading\ndef task_func(file_list):\n\n    exit_codes = []\n\n    def execute_file(file):\n        file_path = file\n        process = subprocess.Popen(file_path)\n        time.sleep(1)  # wait for the process to start\n        exit_codes.append(process.poll())  # store the exit code\n\n    # Start a thread for each file\n    threads = [threading.Thread(target=execute_file, args=(file,)) for file in file_list]\n    for thread in threads:\n        thread.start()\n\n    # Wait for all threads to finish\n    for thread in threads:\n        thread.join()\n\n    return exit_codes",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.Popen')\n    def test_empty_file_list(self, mock_popen):\n        directory = \"some_directory\"\n        file_list = []\n        result = task_func(file_list)\n        self.assertEqual(result, [])\n        mock_popen.assert_not_called()\n    @patch('subprocess.Popen')\n    def test_valid_files(self, mock_popen):\n        file_list = [\"task_func_data/file1.bat\", \"task_func_data/file2.bat\"]\n        mock_popen.return_value.poll.return_value = 0\n        result = task_func(file_list)\n        self.assertEqual(result, [0,0])\n        self.assertEqual(mock_popen.call_count, 2)\n       \n    @patch('subprocess.Popen')\n    def test_valid_directory_and_files(self, mock_popen):\n        file_list = [\"task_func_data/file1.bat\", \"task_func_data/file2.bat\"]\n        mock_popen.return_value.poll.return_value = 0\n        result = task_func(file_list)\n        self.assertEqual(result, [0,0])\n        self.assertEqual(mock_popen.call_count, 2)\n    @patch('subprocess.Popen')\n    def test_process_still_running(self, mock_popen):\n        file_list = [\"task_func_data/file1.bat\"]\n        mock_popen.return_value.poll.return_value = None\n        result = task_func(file_list)\n        self.assertEqual(result, [None])\n    @patch('subprocess.Popen')\n    def test_multiple_processes_with_different_exit_codes(self, mock_popen):\n        file_list = [\"task_func_datan/file1.bat\", \"task_func_data/file2.bat\", \"task_func_data/file3.bat\"]\n        mock_popen.return_value.poll.side_effect = [0, 1, None]\n        result = task_func(file_list)\n        self.assertEqual(result, [0,1,None])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Gaussian kernel density estimate diagram of a normal distribution with a given mean and a standard deviation using a random sample of a size determined by the sample_size parameter. The density diagram is plotted using default settings in a deterministic matplotlib plot. Return the axes object.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object containing the plot of the normal distribution.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n```",
        "gt": "import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, sample_size, seed=0):\n    if sample_size <= 0:\n        raise ValueError('sample_size must be a positive integer.')\n\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    density = stats.gaussian_kde(sample)\n\n    x = np.linspace(min(sample), max(sample), sample_size)\n    fig, ax = plt.subplots()\n    ax.plot(x, density(x))\n    \n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        with self.assertRaises(ValueError):\n            ax = task_func(0, 1, 0, 77)        \n    def test_case_2(self):\n        mu, sigma, sample_size, seed = 0, 1, 10000, 42\n        ax = task_func(mu, sigma, sample_size, seed)\n        line = ax.lines[0]\n        x_data, y_data = line.get_data()\n        assert isinstance(ax, matplotlib.axes._axes.Axes)\n        assert min(x_data) < mu - 3*sigma and max(x_data) > mu + 3*sigma\n    def test_case_3(self):\n        ax = task_func(0, 1, 10000, 42)\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        assert xlim[0] < 0 and xlim[1] > 0\n        assert ylim[0] < 0 and ylim[1] > 0\n    def test_case_4(self):\n        ax = task_func(0, 1, 1000, 42)\n        assert len(ax.lines) == 1\n    def test_case_5(self):\n        ax1 = task_func(0, 1, 42)\n        ax2 = task_func(0, 1, 42)\n        line1 = ax1.lines[0]\n        line2 = ax2.lines[0]\n        x_data1, y_data1 = line1.get_data()\n        x_data2, y_data2 = line2.get_data()\n        assert np.array_equal(x_data1, x_data2) and np.array_equal(y_data1, y_data2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a normal distribution with a given length, plot its histogram alongside the probability density function, and return the distribution and the plot.\nNote that: This function use this constant MU (mean): 0, SIGMA (standard deviation): 1\nThe function should output with:\n    tuple: A tuple containing:\n    1. numpy array with the normal distribution.\n    2. matplotlib Axes object representing the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n```",
        "gt": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(length):\n\n    MU = 0\n    SIGMA = 1\n    \n    distribution = np.random.normal(MU, SIGMA, length)\n    fig, ax = plt.subplots()\n    ax.hist(distribution, 30, density=True, label='Histogram')\n    ax.plot(np.sort(distribution), norm.pdf(np.sort(distribution), MU, SIGMA), \n            linewidth=2, color='r', label='PDF')\n    ax.legend()\n    \n    return distribution, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        np.random.seed(0)\n        distribution, ax = task_func(1000)\n        self.assertIsInstance(distribution, np.ndarray, \"Expected distribution to be a numpy array\")\n        self.assertIsInstance(ax, plt.Axes, \"Expected ax to be a matplotlib Axes object\")\n        plt.close()\n    def test_case_2(self):\n        np.random.seed(0)\n        length = 500\n        distribution, _ = task_func(length)\n        self.assertEqual(len(distribution), length, f\"Expected distribution length to be {length}\")\n        plt.close()\n    \n    def test_case_3(self):\n        np.random.seed(0)\n        distribution, _ = task_func(1000)\n        mean = distribution.mean()\n        std_dev = distribution.std()\n        self.assertAlmostEqual(mean, 0, delta=0.1, msg=f\"Expected mean to be close to 0, got {mean}\")\n        self.assertAlmostEqual(std_dev, 1, delta=0.1, msg=f\"Expected std_dev to be close to 1, got {std_dev}\")\n        plt.close()\n    \n    def test_case_4(self):\n        np.random.seed(0)\n        distribution, ax = task_func(1000)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 1, \"Expected one line representing PDF in the plot\")\n        bars = [rect for rect in ax.get_children() if isinstance(rect, plt.Rectangle)]\n        self.assertGreater(len(bars), 1, \"Expected multiple bars representing histogram in the plot\")\n        plt.close()\n    \n    def test_case_5(self):\n        np.random.seed(0)\n        distribution, _ = task_func(2000)\n        self.assertEqual(distribution.shape, (2000,), \"Expected shape of distribution to match input length\")\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a time series of sales data starting from a specified date, then use linear regression to forecast future sales based on the provided or generated sales data.\nThe function should output with:\n    A numpy array containing the forecasted future sales for the same number of periods as the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    sales_data = np.random.randint(low=100, high=500, size=periods)\n    \n    date_range = pd.date_range(start=start_date, freq=freq, periods=periods)\n    sales_df = pd.DataFrame({'Date': date_range, 'Sales': sales_data})\n    \n    X = np.arange(len(sales_df)).reshape(-1, 1)\n    y = sales_df['Sales'].values\n    \n    model = LinearRegression()\n    model.fit(X, y)\n    \n    future_dates = np.arange(len(sales_df), 2*len(sales_df)).reshape(-1, 1)\n    future_sales = model.predict(future_dates)\n    \n    return future_sales",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_with_default_parameters(self):\n        np.random.seed(42)  # For consistent test setup\n        forecasted_sales = task_func()\n        self.assertIsInstance(forecasted_sales, np.ndarray)\n        self.assertEqual(forecasted_sales.shape[0], 13)\n    \n    def test_with_custom_parameters(self):\n        np.random.seed(0)  # For consistent test setup\n        forecasted_sales = task_func('2020-01-01', 10, 'M', [200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100])\n        self.assertIsInstance(forecasted_sales, np.ndarray)\n        self.assertEqual(forecasted_sales.shape[0], 10)\n    \n    def test_with_random_sales_data(self):\n        np.random.seed(55)  # For consistent test setup\n        forecasted_sales = task_func(periods=5)\n        self.assertIsInstance(forecasted_sales, np.ndarray)\n        self.assertEqual(forecasted_sales.shape[0], 5)\n    \n    def test_forecasted_values_increasing(self):\n        np.random.seed(66)  # For consistent test setup\n        sales_data = [100, 150, 200, 250, 300]\n        forecasted_sales = task_func('2021-01-01', 5, 'M', sales_data)\n        self.assertFalse(all(forecasted_sales[i] <= forecasted_sales[i + 1] for i in range(len(forecasted_sales) - 1)))\n    \n    def test_with_specific_sales_data(self):\n        np.random.seed(42)  # For consistent test setup\n        sales_data = [100, 200, 300, 400, 500]\n        forecasted_sales = task_func('2022-01-01', 5, 'Q', sales_data)\n        self.assertIsInstance(forecasted_sales, np.ndarray)\n        self.assertEqual(forecasted_sales.shape[0], 5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with columns 'columns' and fill them with random integer values between 0 and 100. Remove some columns based on the provided indexes. >>> df = task_func(3, [1, 3], columns=['test', 'rem1', 'apple', 'remove'], random_seed=12) >>> print(df) test  apple 0    75      6 1     3     76 2    22     52\nThe function should output with:\n    DataFrame: The resulting DataFrame after removal of columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(n_rows, remove_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    df = df.drop(df.columns[remove_cols], axis=1)\n\n    return df",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func(5, [1, 3], random_seed=1)\n        expected = pd.DataFrame({\n            'A': {0: 37, 1: 5, 2: 76, 3: 20, 4: 29},\n            'C': {0: 72, 1: 64, 2: 6, 3: 84, 4: 50},\n            'E': {0: 75, 1: 1, 2: 50, 3: 28, 4: 87}\n        })\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False)\n    def test_case_2(self):\n        df = task_func(10, [], columns=['X', 'Y', 'Z'], random_seed=12)\n        expected = pd.DataFrame({\n            'X': {0: 75, 1: 2, 2: 76, 3: 49, 4: 13, 5: 75, 6: 76, 7: 89, 8: 35, 9: 63},\n            'Y': {0: 27, 1: 3, 2: 48, 3: 52, 4: 89, 5: 74, 6: 13, 7: 35, 8: 33, 9: 96},\n            'Z': {0: 6, 1: 67, 2: 22, 3: 5, 4: 34, 5: 0, 6: 82, 7: 62, 8: 30, 9: 18}\n        })\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False)\n    def test_case_3(self):\n        df = task_func(0, remove_cols=[], random_seed=42)\n        expected = pd.DataFrame(\n            {'A': {}, 'B': {}, 'C': {}, 'D': {}, 'E': {}}\n        )\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False, check_index_type=False)\n    def test_case_4(self):\n        df1 = task_func(10, [], random_seed=12)\n        df2 = task_func(10, [], random_seed=12)\n        pd.testing.assert_frame_equal(df1, df2, check_dtype=False, check_index_type=False)\n    def test_case_5(self):\n        df = task_func(6, [0, 1, 2, 3, 4], random_seed=1)\n        self.assertEqual(list(df.columns), [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the 'k' nearest neighbors by geographic coordinates using a dataset and a target data point. The function returns a list of the 'k' nearest neighbors, sorted in ascending order of their distances from the target. Constants: radius of earth is 6371 km\nThe function should raise the exception for: ValueError: If 'k' is a negative integer or not an integer.\nThe function should output with:\n    list: List of the 'k' nearest neighbors as [Latitude, Longitude].\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\ndef task_func(data, target, k):\n```",
        "gt": "import numpy as np\nimport math\ndef task_func(data, target, k):\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"'k' must be a non-negative integer\")\n\n    RADIUS_EARTH_KM = 6371.0  # Radius of the Earth in kilometers\n\n    def calculate_distance(coord1, coord2):\n        # Convert coordinates from degrees to radians\n        lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])\n        lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])\n\n        # Haversine formula\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n        return RADIUS_EARTH_KM * c\n\n    distances = np.array([calculate_distance(target, coord) for coord in data.to_numpy()])\n    nearest_indices = distances.argsort()[:k]\n    nearest_neighbors = data.iloc[nearest_indices].values.tolist()\n\n    return nearest_neighbors",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data = pd.DataFrame([[14, 25], [1, 22], [7, 8], [10, 15]], columns=['Latitude', 'Longitude'])\n        self.target = [10, 15]\n    def test_correct_number_of_neighbors(self):\n        k = 2\n        result = task_func(self.data, self.target, k)\n        self.assertEqual(len(result), k)\n    def test_correct_neighbors(self):\n        result = task_func(self.data, self.target, 1)\n        self.assertEqual(result, [[10, 15]])\n    def test_invalid_k_value_negative(self):\n        with self.assertRaises(ValueError):\n            task_func(self.data, self.target, -1)\n    def test_invalid_k_value_not_integer(self):\n        with self.assertRaises(ValueError):\n            task_func(self.data, self.target, \"two\")\n    def test_large_k_value(self):\n        k = 100\n        result = task_func(self.data, self.target, k)\n        self.assertEqual(len(result), len(self.data))\n    def test_zero_k_value(self):\n        k = 0\n        result = task_func(self.data, self.target, k)\n        self.assertEqual(result, [])\n        \n    def test_large_k_value(self):\n        k = 100\n        result = task_func(self.data, self.target, k)\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(result))\n        expect = [[10, 15], [7, 8], [14, 25], [1, 22]]\n        self.assertAlmostEqual(result, expect)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Randomly shuffle the given array's features, normalize its values, then convert to a DataFrame with shuffled feature names.\nNote that: Notes: This function normalizes data by subtracting the mean and scaling to unit variance. Feature names are of format f{n}; for example, if the records have 5 features, feature names will be [\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"] shuffled.\nThe function should raise the exception for: ValueError: If records is not 2D.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame containing the preprocessed data, with shuffled feature names.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(records: np.ndarray, random_seed: int = 0) -> pd.DataFrame:\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    if not (records.ndim == 2):\n        raise ValueError(\"Input must be a 2D numpy array.\")\n\n    records_copy = records.copy()\n    np.random.shuffle(records_copy.T)\n\n    scaler = StandardScaler()\n    normalized_records = scaler.fit_transform(records_copy)\n\n    features = [f\"f{i+1}\" for i in range(records[0].shape[0])]\n    np.random.shuffle(features)\n\n    df = pd.DataFrame(normalized_records, columns=features)\n\n    return df",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n        self.expected_shape = (2, 5)\n    def test_case_1(self):\n        # Test basic shape and columns\n        df = task_func(self.data, random_seed=1)\n        self.assertEqual(df.shape, self.expected_shape)\n        self.assertTrue(set(df.columns) == set([\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"]))\n        # assert last row values\n        self.assertEqual(df.iloc[-1].tolist(), [1.0, 1.0, 1.0, 1.0, 1.0])\n        self.assertEqual(df.iloc[0].tolist(), [-1.0, -1.0, -1.0, -1.0, -1.0])\n        \n    def test_case_2(self):\n        # Test normalization\n        df = task_func(self.data, random_seed=2)\n        np.testing.assert_array_almost_equal(\n            df.mean(axis=0), np.zeros(self.expected_shape[1]), decimal=5\n        )\n        np.testing.assert_array_almost_equal(\n            df.std(axis=0, ddof=0), np.ones(self.expected_shape[1]), decimal=5\n        )\n        \n    def test_case_3(self):\n        # Test random seed effect\n        df1 = task_func(self.data, random_seed=3)\n        df2 = task_func(self.data, random_seed=3)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_case_4(self):\n        # Test handling invalid inputs\n        with self.assertRaises(ValueError):\n            task_func(np.array([1, 2, 3]), random_seed=4)\n        with self.assertRaises(ValueError):\n            task_func(np.array([[1, 2, 3], [4, 5]], dtype=object), random_seed=4)\n    def test_case_5(self):\n        # Test handling zero variance\n        data = np.array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])\n        df = task_func(data, random_seed=42)\n        # In cases of zero variance, StandardScaler will set values to 0\n        np.testing.assert_array_equal(df.values, np.zeros(data.shape))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts elements in 'T1', a tuple of tuples containing string representations of integers, to integers and creates a list of random integers. The size of the list equals the sum of these integers. Returns the 25th, 50th, and 75th percentiles of this list.\nThe function should output with:\n    tuple: A tuple (p25, p50, p75) representing the 25th, 50th, and 75th percentiles of the list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n```",
        "gt": "import numpy as np\nimport itertools\nimport random\ndef task_func(T1, max_value=100):\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_nums = sum(flattened_list)\n\n    random_nums = [random.randint(0, max_value) for _ in range(total_nums)]\n\n    p25 = np.percentile(random_nums, 25)\n    p50 = np.percentile(random_nums, 50)\n    p75 = np.percentile(random_nums, 75)\n\n    return p25, p50, p75",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    @patch('random.randint')\n    def test_case_1(self, mock_randint):\n        \"\"\"Test with diverse values and the default range to ensure percentile calculation.\"\"\"\n        mock_randint.return_value = 50  # Mocking random.randint to always return 50\n        T1 = (('13', '17', '18', '21', '32'), ('07', '11', '13', '14', '28'), ('01', '05', '06', '08', '15', '16'))\n        p25, p50, p75 = task_func(T1)\n        self.assertEqual(p25, 50)\n        self.assertEqual(p50, 50)\n        self.assertEqual(p75, 50)\n    @patch('random.randint')\n    def test_case_2(self, mock_randint):\n        \"\"\"Check consistency when the total number of elements are small but repeated.\"\"\"\n        mock_randint.return_value = 30  # Consistent lower value for a different perspective\n        T1 = (('10',), ('10', '10', '10'))\n        p25, p50, p75 = task_func(T1)\n        self.assertEqual(p25, 30)\n        self.assertEqual(p50, 30)\n        self.assertEqual(p75, 30)\n    @patch('random.randint')\n    def test_case_3(self, mock_randint):\n        \"\"\"Ensure that percentile calculations are consistent for mixed low and medium values.\"\"\"\n        mock_randint.return_value = 75  # Higher consistent value\n        T1 = (('5', '5', '5', '5'), ('10', '15'), ('1', '2', '3', '4', '5'))\n        p25, p50, p75 = task_func(T1)\n        self.assertEqual(p25, 75)\n        self.assertEqual(p50, 75)\n        self.assertEqual(p75, 75)\n    @patch('random.randint')\n    def test_case_4(self, mock_randint):\n        \"\"\"Tests percentile values for a simple large-value case.\"\"\"\n        mock_randint.return_value = 10  # Low consistent value to see impact on percentiles\n        T1 = (('50',), ('25', '25'))\n        p25, p50, p75 = task_func(T1)\n        self.assertEqual(p25, 10)\n        self.assertEqual(p50, 10)\n        self.assertEqual(p75, 10)\n    @patch('random.randint')\n    def test_case_5(self, mock_randint):\n        \"\"\"Test with an extreme case where all random numbers are the same, ensuring no variability.\"\"\"\n        mock_randint.return_value = 90  # High consistent value\n        T1 = (('1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), ('10', '10'))\n        p25, p50, p75 = task_func(T1)\n        self.assertEqual(p25, 90)\n        self.assertEqual(p50, 90)\n        self.assertEqual(p75, 90)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Moves files matching a specific regex pattern from a source directory to a target directory.\nNote that: If source_directory does not exist or is not a directory, this function returns 0. If target_directory does not exist, this function will create it.\nThe function should output with:\n    int: The number of files successfully moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n```",
        "gt": "import os\nimport re\nimport shutil\ndef task_func(source_directory: str, target_directory: str, pattern: str = r\"\\d{4}\") -> int:\n    moved_files_count = 0\n\n    if not os.path.exists(source_directory) or not os.path.isdir(source_directory):\n        return 0\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    for root, _, files in os.walk(source_directory):\n        for file in files:\n            if re.search(pattern, file):\n                shutil.move(\n                    os.path.join(root, file), os.path.join(target_directory, file)\n                )\n                moved_files_count += 1\n\n    return moved_files_count",
        "test": "import unittest\nimport tempfile\nimport os\nclass TestCases(unittest.TestCase):\n    def create_test_files(self, directory, file_names):\n        # Helper to create files for testing\n        for file_name in file_names:\n            with open(os.path.join(directory, file_name), \"a\") as file:\n                file.write(\"test content\")\n    def test_files_moved(self):\n        # Test basic case with default pattern\n        with tempfile.TemporaryDirectory() as src, tempfile.TemporaryDirectory() as dst:\n            self.create_test_files(\n                src,\n                [\n                    \"1234.txt\",\n                    \"test5678.txt\",\n                    \"nope.txt\",\n                    \"another1234.txt\",\n                    \"4321done.txt\",\n                ],\n            )\n            result = task_func(src, dst)\n            self.assertEqual(\n                result, 4, \"Should move 4 files matching the default pattern.\"\n            )\n            for file_name in [\n                \"1234.txt\",\n                \"another1234.txt\",\n                \"4321done.txt\",\n                \"test5678.txt\",\n            ]:\n                self.assertTrue(\n                    os.path.exists(os.path.join(dst, file_name)),\n                    f\"{file_name} should be in the target directory\",\n                )\n    def test_files_moved_with_custom_pattern(self):\n        # Test case with custom pattern\n        with tempfile.TemporaryDirectory() as src, tempfile.TemporaryDirectory() as dst:\n            self.create_test_files(\n                src,\n                [\n                    \"1234.txt\",\n                    \"test5678.txt\",\n                    \"nope.txt\",\n                    \"another1234.txt\",\n                    \"4321done.txt\",\n                ],\n            )\n            result = task_func(src, dst, r\"test\\w+\")\n            self.assertEqual(\n                result, 1, \"Should move 1 file matching the custom pattern 'test\\\\w+.'\"\n            )\n    def test_no_files_moved_if_no_match(self):\n        # Test no match\n        with tempfile.TemporaryDirectory() as src, tempfile.TemporaryDirectory() as dst:\n            self.create_test_files(src, [\"nope.txt\"])\n            result = task_func(src, dst)\n            self.assertEqual(result, 0, \"Should move 0 files if no match.\")\n    def test_return_zero_if_source_does_not_exist(self):\n        # Test source_directory if not exists\n        with tempfile.TemporaryDirectory() as dst:\n            result = task_func(os.path.join(dst, \"non_existing_dir\"), dst)\n            self.assertEqual(\n                result, 0, \"Should return 0 if source directory does not exist.\"\n            )\n    def test_target_directory_created_if_not_exist(self):\n        # Test that destination directory will be created if it did not exist\n        with tempfile.TemporaryDirectory() as src:\n            self.create_test_files(src, [\"1234.txt\"])\n            new_target = os.path.join(src, \"new_target_dir\")\n            task_func(src, new_target)\n            self.assertTrue(\n                os.path.exists(new_target),\n                \"Target directory should be created if it does not exist.\",\n            )\n    def test_no_files_in_source(self):\n        # Test empty source direcotry\n        with tempfile.TemporaryDirectory() as src, tempfile.TemporaryDirectory() as dst:\n            result = task_func(src, dst)\n            self.assertEqual(\n                result, 0, \"Should move 0 files if source directory is empty.\"\n            )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the correlation matrix of a DataFrame and plot a scatter plot for the pair of columns with the highest absolute correlation. Exception Handling: - Raises ValueError if the input DataFrame is empty. - Raises TypeError if any column in the DataFrame is non-numeric. - Raises ValueError if the DataFrame has fewer than two columns.\nThe function should output with:\n    ax (plt.Axes): The scatter plot of the pair of columns with the highest absolute correlation.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(dataframe):\n\n    if dataframe.empty:\n        raise ValueError(\"DataFrame is empty.\")\n        \n    if not all(dataframe.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise TypeError(\"All columns must be numeric for correlation calculation.\")\n\n    if dataframe.shape[1] < 2:\n        raise ValueError(\"DataFrame must have at least two columns for correlation calculation.\")\n\n    # Explicit use of pd.DataFrame.corr() to calculate the correlation matrix\n    corr_matrix = pd.DataFrame.corr(dataframe)\n    abs_corr_matrix = corr_matrix.abs()\n\n    # Finding the pair of columns with the highest absolute correlation\n    highest_corr_value = abs_corr_matrix.unstack().dropna().nlargest(2).iloc[-1]\n    max_corr_pair = np.where(abs_corr_matrix == highest_corr_value)\n\n    # Extracting column names for the highest correlation\n    column_x = dataframe.columns[max_corr_pair[0][0]]\n    column_y = dataframe.columns[max_corr_pair[1][0]]\n\n    # Using plt to plot the scatter plot\n    plt.figure(figsize=(10, 6))  # Creating a figure\n    plt.scatter(dataframe[column_x], dataframe[column_y])  # Plotting the scatter plot\n    plt.title(f\"Scatter plot between {column_x} and {column_y}\")  # Setting the title\n    plt.xlabel(column_x)  # Setting the x-axis label\n    plt.ylabel(column_y)  # Setting the y-axis label\n    plt.show()  # Displaying the figure\n\n    return plt.gca()  # Returning the current Axes object for further use",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_high_correlation(self):\n        \"\"\"\n        Test if the function correctly identifies and plots the pair of columns with the highest positive correlation.\n        \"\"\"\n        np.random.seed(0)  # Set a fixed seed for reproducibility\n        df = pd.DataFrame(\n            {\"A\": np.arange(100), \"B\": np.arange(100) * 2, \"C\": np.random.rand(100)}\n        )\n        ax = task_func(df)\n        corr = df.corr()\n        abs_corr = corr.abs()\n        max_corr = abs_corr.unstack().dropna().nlargest(3).iloc[-1]\n        expected_pair = np.where(abs_corr == max_corr)\n        expected_labels = (\n            df.columns[expected_pair[0][0]],\n            df.columns[expected_pair[1][0]],\n        )\n        self.assertEqual((ax.get_xlabel(), ax.get_ylabel()), expected_labels)\n    def test_no_correlation(self):\n        \"\"\"\n        Test if the function handles a case where there is no significant correlation between columns.\n        \"\"\"\n        np.random.seed(1)\n        df = pd.DataFrame(\n            {\n                \"A\": np.random.rand(100),\n                \"B\": np.random.rand(100),\n                \"C\": np.random.rand(100),\n            }\n        )\n        ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_negative_correlation(self):\n        \"\"\"\n        Test if the function correctly identifies and plots the pair of columns with the highest absolute correlation,\n        including negative correlations.\n        \"\"\"\n        np.random.seed(2)\n        df = pd.DataFrame(\n            {\"A\": np.arange(100), \"B\": np.random.rand(100), \"C\": -np.arange(100) + 50}\n        )\n        ax = task_func(df)\n        corr = df.corr()\n        # Get the pair with the highest absolute correlation excluding self-correlations\n        abs_corr = corr.abs()\n        max_corr = abs_corr.unstack().dropna().nlargest(3).iloc[-1]\n        expected_pair = np.where(abs_corr == max_corr)\n        expected_labels = (\n            df.columns[expected_pair[0][0]],\n            df.columns[expected_pair[1][0]],\n        )\n        self.assertEqual((ax.get_xlabel(), ax.get_ylabel()), expected_labels)\n    def test_single_column(self):\n        \"\"\"\n        Test if the function raises a ValueError when provided with a DataFrame containing only one column.\n        \"\"\"\n        np.random.seed(3)\n        df = pd.DataFrame({\"A\": np.random.rand(100)})\n        with self.assertRaises(ValueError):\n            task_func(df)\n    def test_non_numeric_columns(self):\n        \"\"\"\n        Test if the function raises a TypeError when provided with a DataFrame containing non-numeric columns.\n        \"\"\"\n        np.random.seed(4)\n        df = pd.DataFrame(\n            {\"A\": np.random.rand(100), \"B\": [\"text\"] * 100, \"C\": np.random.rand(100)}\n        )\n        with self.assertRaises(TypeError):\n            task_func(df)\n    def test_empty_dataframe(self):\n        \"\"\"\n        Test if the function raises a ValueError when provided with an empty DataFrame.\n        \"\"\"\n        df = pd.DataFrame()  # Create an empty DataFrame\n        with self.assertRaises(ValueError):\n            task_func(df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a scatter plot with a regression line for two columns from a DataFrame.\nThe function should raise the exception for: Raise ValueError if the input df is not a DataFrame, empty, or does not contain the specified columns. Raise TypeError if df use non-numeric data\nThe function should output with:\n    Axes: A seaborn axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(df, col1, col2):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(df, col1, col2):\n    # Ensure that the df is DataFrame, not empty and the specified column exists\n    if not isinstance(df, pd.DataFrame) or df.empty or col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"The DataFrame is empty or the specified column does not exist.\")\n    \n    ax = sns.regplot(x=col1, y=col2, data=df)\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_numeric_data(self):\n        # Create a DataFrame with numeric data\n        df = pd.DataFrame({\n            'A': [1, 2, 3, 4, 5],\n            'B': [5, 4, 3, 2, 1]\n        })\n        # Call the function with the DataFrame\n        ax = task_func(df, 'A', 'B')\n        \n        # Assertions to validate the output\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes, \"The returned object should be a seaborn FacetGrid.\")\n        plt.close()\n    def test_non_numeric_data(self):\n        # Create a DataFrame with non-numeric data\n        df = pd.DataFrame({\n            'A': ['one', 'two', 'three', 'four', 'five'],\n            'B': ['five', 'four', 'three', 'two', 'one']\n        })\n        # We expect a TypeError because non-numeric data can't be used to plot a regression line\n        with self.assertRaises(TypeError, msg=\"The function should raise a TypeError for non-numeric data.\"):\n            task_func(df, 'A', 'B')\n        plt.close()\n    def test_missing_data(self):\n        # Create a DataFrame with missing data\n        df = pd.DataFrame({\n            'A': [1, 2, None, 4, 5],\n            'B': [5, None, 3, 2, 1]\n        })\n        # Call the function with the DataFrame\n        ax = task_func(df, 'A', 'B')\n        # Assertions to validate the output\n        # We expect the function to handle missing data according to seaborn's default behavior\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes, \"The returned object should be a seaborn FacetGrid.\")\n        # Check if the data plotted is the same length as the original minus the NaNs\n        non_na_length = df.dropna().shape[0]\n        self.assertEqual(len(ax.collections[0].get_offsets().data), non_na_length)  # Check if there's only one data point in the collection\n        plt.close()\n    def test_large_dataset(self):\n        # Create a large DataFrame\n        df = pd.DataFrame({\n            'A': range(10000),\n            'B': range(10000, 20000)\n        })\n        # Call the function with the DataFrame\n        ax = task_func(df, 'A', 'B')\n        # Assertions to validate the output\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes, \"The returned object should be a seaborn FacetGrid.\")\n        plt.close()\n    def test_single_data_point(self):\n        # Create a DataFrame with a single data point\n        df = pd.DataFrame({\n            'A': [1],\n            'B': [1]\n        })\n        # Call the function with the DataFrame\n        ax = task_func(df, 'A', 'B')\n        # Assertions to validate the output\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes, \"The returned object should be a seaborn FacetGrid.\")\n        self.assertEqual(len(ax.collections), 1)  # Check if there's only one collection of points in the plot\n        self.assertEqual(len(ax.collections[0].get_offsets()), 1)  # Check if there's only one data point in the collection\n        plt.close()\n    \n    def test_non_df(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\", 'A', 'B')\n    \n    def test_empty_df(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame(), 'A', 'B')\n    def test_column_df(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'A': [1]}), 'A', 'B')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalize data specified by keys in a dictionary using MinMax scaling and plot the results. This function is useful for preprocessing data for machine learning models where data scaling can impact performance.\nThe function should raise the exception for: ValueError: If no keys in `data_keys` are found in `data_dict`.\nThe function should output with:\n    tuple: A tuple containing a DataFrame of normalized values and a matplotlib Axes object representing a plot of the\n    normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_dict, data_keys):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_dict, data_keys):\n    # Extract and transform the data for the specified keys\n    data_for_keys = {key: data_dict[key] for key in data_keys if key in data_dict}\n    df = pd.DataFrame(data_for_keys)\n\n    # Check if DataFrame is empty (i.e., no keys matched)\n    if df.empty:\n        raise ValueError(\"No matching keys found in data dictionary, or keys list is empty.\")\n\n    # Apply MinMax normalization\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(df)\n    normalized_df = pd.DataFrame(normalized_data, columns=data_keys)\n\n    # Plot the normalized data\n    ax = normalized_df.plot(kind='line')\n    ax.set_title('Normalized Data')\n    ax.set_ylabel('Normalized Value')\n    ax.set_xlabel('Index')\n\n    return normalized_df, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Sample data dictionary\n        self.data_dict = {\n            'A': [10, 20, 30, 40],\n            'B': [20, 30, 40, 50],\n            'C': [30, 40, 50, 60]\n        }\n    def test_normalization_single_key(self):\n        # Test normalization with a single key\n        data_keys = ['A']\n        normalized_df, ax = task_func(self.data_dict, data_keys)\n        self.assertTrue((normalized_df >= 0).all().all() and (normalized_df <= 1).all().all(),\n                        \"Normalized data should be in the range [0, 1]\")\n    def test_normalization_multiple_keys(self):\n        # Test normalization with multiple keys\n        data_keys = ['A', 'B']\n        normalized_df, ax = task_func(self.data_dict, data_keys)\n        self.assertEqual(len(normalized_df.columns), 2, \"Normalized DataFrame should have 2 columns\")\n        self.assertTrue({'A', 'B'}.issubset(normalized_df.columns), \"DataFrame should contain specified keys\")\n    def test_normalization_all_keys(self):\n        # Test normalization with all keys in the dictionary\n        data_keys = list(self.data_dict.keys())\n        normalized_df, ax = task_func(self.data_dict, data_keys)\n        self.assertEqual(len(normalized_df.columns), 3, \"Normalized DataFrame should have 3 columns\")\n        self.assertTrue({'A', 'B', 'C'}.issubset(normalized_df.columns), \"DataFrame should contain all keys\")\n    def test_empty_keys(self):\n        # Test with no keys specified\n        data_keys = []\n        with self.assertRaises(ValueError):\n            task_func(self.data_dict, data_keys)\n    def test_key_not_in_dict(self):\n        # Test with a key that's not in the dictionary\n        data_keys = ['D']  # Assuming 'D' is not in `data_dict`\n        with self.assertRaises(ValueError):\n            task_func(self.data_dict, data_keys)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a hashed password by concatenating a given password with a prefix and a generated salt, and then hashing the combined string using SHA256. The hashed result is then encoded in base64.\nThe function should raise the exception for: ValueError if the SALT_LENGTH is negative\nThe function should output with:\n    str: The base64 encoded SHA256 hash of the password concatenated with the prefix and salt.\nYou should write self-contained code starting with:\n```\nimport os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n```",
        "gt": "import os\nimport hashlib\nimport base64\ndef task_func(password, PREFIX=\"ME\", SALT_LENGTH=16):\n    if SALT_LENGTH < 0:\n        raise ValueError\n    \n    salt = os.urandom(SALT_LENGTH)\n    salted_password = PREFIX + password + salt.hex()\n    \n    hashed_password = hashlib.sha256(salted_password.encode()).digest()\n\n    return base64.b64encode(hashed_password).decode()",
        "test": "import unittest\nfrom unittest.mock import patch\nimport base64\nimport hashlib\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a predictable random generator for consistent testing\n        self.expected_salt = bytes([i%256 for i in range(16)])  # a repeatable \"random\" byte sequence\n        self.patcher = patch('os.urandom', return_value=self.expected_salt)\n        self.mock_urandom = self.patcher.start()\n    def tearDown(self):\n        # Stop patching 'os.urandom'\n        self.patcher.stop()\n    def test_consistent_hashing(self):\n        password = \"consistent\"\n        hashed_password1 = task_func(password, \"ME\", 16)\n        hashed_password2 = task_func(password, \"ME\", 16)\n        self.assertEqual(hashed_password1, hashed_password2)\n    def test_different_prefix_and_salt_length(self):\n        \"\"\" Test hashing with different prefixes and salt lengths \"\"\"\n        password = \"password123\"\n        prefix1 = \"ME\"\n        prefix2 = \"YOU\"\n        hashed_password1 = task_func(password, prefix1, 16)\n        hashed_password2 = task_func(password, prefix2, 32)\n        self.assertNotEqual(hashed_password1, hashed_password2)\n    def test_hash_length(self):\n        \"\"\" Ensure the hashed password is always 44 characters \"\"\"\n        password = \"variableLength\"\n        hashed_password = task_func(password)\n        self.assertEqual(len(hashed_password), 44)\n        self.assertIsInstance(hashed_password, str)\n    def test_invalid_inputs(self):\n        \"\"\" Test function behavior with invalid inputs \"\"\"\n        with self.assertRaises(TypeError):\n            task_func(None)  # Passing None as password\n        with self.assertRaises(TypeError):\n            task_func(\"password\", PREFIX=123)  # Non-string prefix\n        with self.assertRaises(ValueError):\n            task_func(\"password\", SALT_LENGTH=-1)  # Invalid salt length\n    def test_empty_password(self):\n        \"\"\" Test hashing an empty string \"\"\"\n        hashed_password = task_func(\"\", \"ME\", 16)\n        expected_hash = hashlib.sha256((\"ME\" + \"\" + self.expected_salt.hex()).encode()).digest()\n        expected_output = base64.b64encode(expected_hash).decode()\n        self.assertEqual(hashed_password, expected_output)\n    def test_special_characters_in_password(self):\n        \"\"\" Test passwords that include special characters \"\"\"\n        special_password = \"!@#$%^&*()_+{}:>?<\"\n        hashed_password = task_func(special_password, \"ME\", 16)\n        expected_hash = hashlib.sha256((\"ME\" + special_password + self.expected_salt.hex()).encode()).digest()\n        expected_output = base64.b64encode(expected_hash).decode()\n        self.assertEqual(hashed_password, expected_output)\n    def test_long_password(self):\n        \"\"\" Test with an unusually long password \"\"\"\n        long_password = \"x\" * 1000  # A very long password\n        hashed_password = task_func(long_password, \"ME\", 16)\n        expected_hash = hashlib.sha256((\"ME\" + long_password + self.expected_salt.hex()).encode()).digest()\n        expected_output = base64.b64encode(expected_hash).decode()\n        self.assertEqual(hashed_password, expected_output)\n    def test_hash_with_different_salts(self):\n        \"\"\" Ensure different salts result in different hashes \"\"\"\n        password = \"password\"\n        salt1 = bytes([i%256 for i in range(16)])\n        salt2 = bytes([(i+1)%256 for i in range(16)])  # Slightly different salt\n        with patch('os.urandom', return_value=salt1):\n            hashed1 = task_func(password, \"ME\", 16)\n        with patch('os.urandom', return_value=salt2):\n            hashed2 = task_func(password, \"ME\", 16)\n        self.assertNotEqual(hashed1, hashed2, \"Different salts should result in different hashes\")\n    def test_deterministic_output_with_fixed_salt(self):\n        \"\"\" Verify that the same salt and input always produces the same hash \"\"\"\n        password = \"consistentOutput\"\n        prefix = \"ME\"\n        hashed_password = task_func(password, prefix, 16)\n        expected_hash = hashlib.sha256((prefix + password + self.expected_salt.hex()).encode()).digest()\n        expected_output = base64.b64encode(expected_hash).decode()\n        self.assertEqual(hashed_password, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Remove rows from a dataframe based on values of multiple columns, and then create n random joint plots of two columns against each other if the DataFrame is not empty.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The modified DataFrame.\n    list: A list of generated joint plots (sns.JointGrid objects) if the DataFrame is not empty, otherwise an empty list.\nYou should write self-contained code starting with:\n```\nfrom random import sample\nimport seaborn as sns\nimport pandas as pd\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n```",
        "gt": "from random import sample\nimport seaborn as sns\nimport pandas as pd\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n    \n    # Drop rows based on tuples\n    df = df.set_index(list('ABCDE')).drop(tuples, errors='ignore').reset_index()\n    \n    plots = []\n    # Generate plots only if DataFrame is not empty\n    if not df.empty:\n        for _ in range(n_plots):\n            selected_columns = sample(COLUMNS, 2)\n            plot = sns.jointplot(data=df, x=selected_columns[0], y=selected_columns[1])\n            plots.append(plot)\n    \n    return df, plots",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 5)), columns=list('ABCDE'))\n        tuples = [(10, 20, 30, 40, 50), (60, 70, 80, 90, 100)]\n        modified_df, plots = task_func(df, tuples, 3)\n        # Convert tuples to DataFrame for compatibility\n        tuples_df = pd.DataFrame([t for t in tuples], columns=list('ABCDE'))\n        # Check each tuple to ensure it's not in modified_df\n        for _, row in tuples_df.iterrows():\n            # Use merge to find matching rows, which is empty if no match exists\n            merged_df = pd.merge(modified_df, pd.DataFrame([row]), on=list('ABCDE'))\n            self.assertTrue(merged_df.empty, f\"Tuple {tuple(row)} found in modified DataFrame.\")\n    def test_case_2(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 5)), columns=list('ABCDE'))\n        tuples = [(10, 20, 30, 40, 50), (60, 70, 80, 90, 100)]\n        modified_df, plots = task_func(df, tuples, 2)\n        \n        for plot in plots:\n            self.assertTrue(plot.x.name in df.columns)\n            self.assertTrue(plot.y.name in df.columns)\n    \n    def test_case_3(self):\n        df = pd.DataFrame(columns=list('ABCDE'))\n        tuples = [(10, 20, 30, 40, 50)]\n        modified_df, plots = task_func(df, tuples, 2)\n        \n        self.assertTrue(modified_df.empty)\n        self.assertEqual(len(plots), 0)\n    \n    def test_case_4(self):\n        df = pd.DataFrame([(10, 20, 30, 40, 50), (10, 20, 30, 40, 50)], columns=list('ABCDE'))\n        tuples = [(10, 20, 30, 40, 50)]\n        modified_df, plots = task_func(df, tuples, 2)\n        \n        self.assertTrue(modified_df.empty)\n        self.assertEqual(len(plots), 0)\n    \n    def test_case_5(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 5)), columns=list('ABCDE'))\n        tuples = []\n        modified_df, plots = task_func(df, tuples, 2)\n        \n        pd.testing.assert_frame_equal(modified_df, df)\n        self.assertEqual(len(plots), 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scans the specified IP address range and pings each IP to check if it is active. The function returns a dictionary with IP addresses as keys and a boolean value indicating their active status (True if the ping is successful, False otherwise).\nThe function should raise the exception for: subprocess.CalledProcessError: If a ping command fails due to a subprocess error.\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their active status.\nYou should write self-contained code starting with:\n```\nimport subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n```",
        "gt": "import subprocess\nfrom ipaddress import IPv4Network\ndef task_func(ip_range):\n    active_ips = {}\n\n    for ip in IPv4Network(ip_range):\n        try:\n            subprocess.check_output(f'ping -c 1 {ip}', shell=True)\n            active_ips[str(ip)] = True\n        except subprocess.CalledProcessError:\n            active_ips[str(ip)] = False\n\n    return active_ips",
        "test": "import unittest\nfrom unittest.mock import patch\nimport subprocess\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.check_output')\n    def test_return_type(self, mock_check_output):\n        \"\"\"\n        Test that task_func returns a dictionary.\n        \"\"\"\n        mock_check_output.return_value = b''  # Simulate successful ping response as empty byte string\n        result = task_func('192.168.1.0/30')  # Using a smaller range for testing\n        self.assertIsInstance(result, dict, \"The function should return a dictionary.\")\n    @patch('subprocess.check_output')\n    def test_successful_ping(self, mock_check_output):\n        \"\"\"\n        Test that a successful ping sets the IP status to True.\n        \"\"\"\n        mock_check_output.return_value = b''  # Simulate successful ping response\n        result = task_func('192.168.1.0/30')\n        self.assertTrue(all(result.values()), \"All IPs should have True status for a successful ping.\")\n    @patch('subprocess.check_output', side_effect=subprocess.CalledProcessError(1, 'ping'))\n    def test_failed_ping(self, mock_check_output):\n        \"\"\"\n        Test that a failed ping sets the IP status to False.\n        \"\"\"\n        result = task_func('192.168.1.0/30')\n        self.assertTrue(all(not value for value in result.values()), \"All IPs should have False status for a failed ping.\")\n    @patch('subprocess.check_output')\n    def test_dict_key_value_types(self, mock_check_output):\n        \"\"\"\n        Test that all keys and values in the dictionary returned by task_func are of the correct type.\n        \"\"\"\n        mock_check_output.return_value = b''  # Simulate successful ping response\n        result = task_func('192.168.1.0/30')  # Using a smaller range for testing\n        for ip, status in result.items():\n            self.assertIsInstance(ip, str, \"All keys in the dictionary should be strings representing IP addresses.\")\n            self.assertIsInstance(status, bool, \"All values in the dictionary should be boolean indicating the IP's active status.\")\n    @patch('subprocess.check_output')\n    def test_ip_range_handling(self, mock_check_output):\n        \"\"\"\n        Test that the function attempts to ping every IP in the specified range.\n        \"\"\"\n        ip_range = '192.168.1.0/30'\n        expected_call_count = len(list(IPv4Network(ip_range)))\n        mock_check_output.return_value = b''  # Simulate successful ping response\n        task_func(ip_range)\n        self.assertEqual(mock_check_output.call_count, expected_call_count, f\"Expected to attempt pinging {expected_call_count} IPs.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame with a specified number of rows filled with random values in [0, 1) and shuffled columns.\nNote that: The columns should be unique and sorted in the ascending order.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with shuffled columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=0) -> pd.DataFrame:\n    np.random.seed(seed)\n    columns = sorted(list(set(columns)))\n    data = np.random.rand(rows, len(columns))\n    np.random.shuffle(columns)\n    df = pd.DataFrame(data, columns=columns)\n    return df",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case - data and format correctness\n        df = task_func(10, seed=0)\n        default_columns = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n        self.assertEqual(df.shape, (10, 5))\n        for column in default_columns:\n            self.assertEqual(df.dtypes[column], np.float64)\n        self.assertEqual(len(set(df.columns)), len(default_columns))\n    def test_case_2(self):\n        # Test custom columns\n        custom_columns = [\"X\", \"Y\", \"Z\"]\n        df = task_func(5, columns=custom_columns, seed=0)\n        self.assertTrue(all(column in custom_columns for column in df.columns))\n        # assert first 2 rows data\n        self.assertEqual(set(df.iloc[0].tolist()), {0.5488135039273248, 0.7151893663724195, 0.6027633760716439})\n        \n    def test_case_3(self):\n        # Test custom rows\n        for n_rows in [1, 10, 50]:\n            df = task_func(n_rows)\n            self.assertEqual(len(df), n_rows)\n    def test_case_4(self):\n        df = task_func(5, seed=42)\n        self.assertEqual(set(df.iloc[0].tolist()), {0.3745401188473625, 0.9507143064099162, 0.7319939418114051, 0.5986584841970366, 0.15601864044243652})\n    def test_case_5(self):\n        # Test handling edge cases - negative rows\n        with self.assertRaises(ValueError):\n            task_func(-1)\n    def test_case_6(self):\n        # Test handling empty columns\n        df = task_func(5, columns=[])\n        self.assertTrue(df.empty)\n    def test_case_7(self):\n        # Test handling duplicate columns\n        df = task_func(5, columns=[\"A\", \"A\", \"B\", \"B\", \"C\"], seed=0)\n        self.assertEqual(len(df.columns), 3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scrape data from a given URL and save the scraped data to a CSV file.\nThe function should output with:\n    CSV_FILE_PATH (str): The path of the CSV file where the scraped data is saved.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n```",
        "gt": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\ndef task_func(url):\n    html = urllib.request.urlopen(url).read()\n    soup = BeautifulSoup(html, 'html.parser')\n\n    data = []\n    table = soup.find('table', attrs={'class':'data-table'})\n    table_rows = table.find_all('tr')\n\n    for tr in table_rows:\n        td = tr.find_all('td')\n        row = [tr.text for tr in td]\n        data.append(row)\n    \n    if os.path.exists(CSV_FILE_PATH):\n        os.remove(CSV_FILE_PATH)\n\n    with open(CSV_FILE_PATH, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n    \n    return CSV_FILE_PATH",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('urllib.request.urlopen')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('csv.writer')\n    def test_correct_scraping(self, mock_csv_writer, mock_file_open, mock_urlopen):\n        # Mock the HTML response and urlopen\n        mock_response = MagicMock()\n        mock_response.read.return_value = b\"<html><body><table class='data-table'><tr><td>Header 1</td><td>Header 2</td></tr><tr><td>Data 1</td><td>Data 2</td></tr></table></body></html>\"\n        mock_urlopen.return_value = mock_response\n        \n        # Mock writer behavior\n        mock_writer = MagicMock()\n        mock_csv_writer.return_value = mock_writer\n        # Call the function\n        task_func('http://example.com')\n        # Check if writer.writerow was indeed called\n        mock_writer.writerows.assert_called()\n    @patch('urllib.request.urlopen', side_effect=Exception(\"Invalid URL\"))\n    def test_invalid_url(self, mock_urlopen):\n        with self.assertRaises(Exception):\n            task_func(\"invalid_url\")\n    @patch('urllib.request.urlopen')\n    def test_empty_table(self, mock_urlopen):\n        # Mock an empty table HTML response\n        mock_response = MagicMock()\n        mock_response.read.return_value = b\"<html><body><table class='data-table'></table></body></html>\"\n        mock_urlopen.return_value = mock_response\n        result = task_func('http://example.com/empty_table_page.html')\n        self.assertEqual(result, 'scraped_data.csv')\n    @patch('urllib.request.urlopen')\n    def test_no_table(self, mock_urlopen):\n        # Mock a no table HTML response\n        mock_response = MagicMock()\n        mock_response.read.return_value = b\"<html><body><p>No table here!</p></body></html>\"\n        mock_urlopen.return_value = mock_response\n        with self.assertRaises(Exception):\n            task_func('http://example.com/no_table_page.html')\n    @patch('urllib.request.urlopen')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('csv.writer')\n    def test_overwrite_existing_csv(self, mock_csv_writer, mock_file_open, mock_urlopen):\n        # Setup mock response for urlopen\n        mock_html = b\"<html><body><table class='data-table'><tr><td>New Data</td></tr></table></body></html>\"\n        mock_urlopen.return_value = MagicMock(read=MagicMock(return_value=mock_html))\n        # Setup mock for csv.writer\n        mock_writer = MagicMock()\n        mock_csv_writer.return_value = mock_writer\n        # Call the function\n        task_func('http://example.com')\n        # Check that os.remove was called since the file should exist\n        mock_file_open.assert_called_once_with(CSV_FILE_PATH, 'w')\n        # Check that the correct data was passed to writerows\n        mock_writer.writerows.assert_called_once_with([['New Data']])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Query an SQLite database and return the results. This function connects to a given SQLite database, executes a given SQL query, and returns the results as a pandas DataFrame.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the results of the executed query.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n```",
        "gt": "import sqlite3\nimport pandas as pd\ndef task_func(db_file: str, query: str) -> pd.DataFrame:\n    with sqlite3.connect(db_file) as conn:\n        return pd.read_sql_query(query, conn)",
        "test": "import unittest\nimport sqlite3\nfrom faker import Faker\nimport os\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        \"\"\"Set up test data before running tests.\"\"\"\n        self.fake = Faker()\n        self.specific_names = [\n            \"John Doe\",\n            \"Jane Smith\",\n            \"Alice Brown\",\n            \"Bob White\",\n            \"Charlie Green\",\n        ]\n        self.specific_ages = [25, 30, 35, 40, 45]\n        self.db_file = self.generate_test_data_with_file()\n    def generate_test_data_with_file(self) -> str:\n        \"\"\"Generate test data and save it to a temporary SQLite database file.\"\"\"\n        db_file = \"./temp_test_db.sqlite3\"\n        if os.path.exists(db_file):\n            os.remove(db_file)\n        conn = sqlite3.connect(db_file)\n        create_table_query = \"\"\"\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY,\n            name TEXT NOT NULL,\n            age INTEGER NOT NULL\n        )\n        \"\"\"\n        conn.execute(create_table_query)\n        for _ in range(100):\n            name = self.fake.name()\n            age = self.fake.random_int(min=20, max=70)\n            conn.execute(\"INSERT INTO users (name, age) VALUES (?, ?)\", (name, age))\n        for name, age in zip(self.specific_names, self.specific_ages):\n            conn.execute(\"INSERT INTO users (name, age) VALUES (?, ?)\", (name, age))\n        conn.commit()\n        conn.close()\n        return db_file\n    def test_case_1(self):\n        \"\"\"Test fetching all users.\"\"\"\n        df = task_func(self.db_file, \"SELECT * FROM users\")\n        self.assertEqual(len(df), 100 + len(self.specific_names))\n        for name in self.specific_names:\n            self.assertIn(name, df[\"name\"].values)\n    def test_case_2(self):\n        \"\"\"Test fetching specific users based on names.\"\"\"\n        names_as_strings = \"', '\".join(self.specific_names)\n        df = task_func(\n            self.db_file,\n            f\"SELECT name, age FROM users WHERE name IN ('{names_as_strings}')\",\n        )\n        for name in self.specific_names:\n            self.assertIn(name, df[\"name\"].values)\n        for age in self.specific_ages:\n            self.assertIn(age, df[\"age\"].values)\n    def test_case_3(self):\n        \"\"\"Test fetching users based on age condition.\"\"\"\n        age_limit = self.fake.random_int(min=20, max=60)\n        df = task_func(self.db_file, f\"SELECT * FROM users WHERE age > {age_limit}\")\n        self.assertTrue(all(df[\"age\"] > age_limit))\n    def test_case_4(self):\n        \"\"\"Test fetching users and sorting by name.\"\"\"\n        df = task_func(self.db_file, \"SELECT * FROM users ORDER BY name\")\n        sorted_names = sorted(df[\"name\"].tolist())\n        self.assertListEqual(df[\"name\"].tolist(), sorted_names)\n    def test_case_5(self):\n        \"\"\"Test fetching users based on age and sorting by age.\"\"\"\n        age_limit = self.fake.random_int(min=20, max=30)\n        df = task_func(\n            self.db_file,\n            f\"SELECT * FROM users WHERE age < {age_limit} ORDER BY age DESC\",\n        )\n        self.assertTrue(all(df[\"age\"] < age_limit))\n        self.assertTrue(\n            all(df[\"age\"].iloc[i] >= df[\"age\"].iloc[i + 1] for i in range(len(df) - 1))\n        )\n    def tearDown(self):\n        \"\"\"Clean up test data after running tests.\"\"\"\n        os.remove(self.db_file)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create and delete a CSV file \"task_func_data/Output.txt\" with sensor data for temperature and humidity. The data is generated randomly, written in append mode, and the file is deleted after use.\nThe function should output with:\n    Returns the path to the CSV file \"task_func_data/Output.txt\" before deletion.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n```",
        "gt": "import os\nimport csv\nimport random\nfrom datetime import datetime\ndef task_func():\n    FILE_NAME = 'task_func_data/Output.txt'\n    FIELDS = ['Timestamp', 'Temperature', 'Humidity']\n\n    # Ensure the directory exists\n    os.makedirs(os.path.dirname(FILE_NAME), exist_ok=True)\n\n    temperature = random.uniform(20, 30)  # Temperature between 20 and 30\n    humidity = random.uniform(50, 60)  # Humidity between 50 and 60\n    timestamp = datetime.now()\n\n    # Check if file exists and write headers if not\n    if not os.path.isfile(FILE_NAME):\n        with open(FILE_NAME, 'w', newline='') as f:\n            csv_writer = csv.writer(f)\n            csv_writer.writerow(FIELDS)\n\n    # Append data\n    with open(FILE_NAME, 'a', newline='') as f:\n        csv_writer = csv.writer(f)\n        csv_writer.writerow([timestamp, temperature, humidity])\n\n    return FILE_NAME",
        "test": "import unittest\nimport os\nimport csv\nimport unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test environment; create the directory and file.\"\"\"\n        self.file_path = 'task_func_data/Output.txt'\n        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)\n        # Create an empty file for each test to ensure clean state\n        with open(self.file_path, 'w', newline='') as f:\n            writer = csv.writer(f)\n            writer.writerow(['Timestamp', 'Temperature', 'Humidity'])\n    def tearDown(self):\n        \"\"\"Clean up after tests; remove the file and directory.\"\"\"\n        os.remove(self.file_path)\n        os.rmdir('task_func_data')\n    def test_return_value(self):\n        # Test if the function returns the correct file path\n        self.assertEqual(task_func(), self.file_path)\n    def test_file_existence(self):\n        # Ensure the file exists after function execution\n        task_func()\n        self.assertTrue(os.path.isfile(self.file_path))\n    def test_file_content(self):\n        # Validate the content of the file\n        task_func()\n        with open(self.file_path, 'r') as f:\n            reader = csv.reader(f)\n            header = next(reader)\n            self.assertEqual(header, ['Timestamp', 'Temperature', 'Humidity'])\n            row = next(reader)\n            self.assertEqual(len(row), 3)\n            self.assertTrue(20 <= float(row[1]) <= 30)\n            self.assertTrue(50 <= float(row[2]) <= 60)\n    def test_data_appending(self):\n        # Test repeated executions to ensure data is appended correctly\n        task_func()\n        initial_line_count = sum(1 for line in open(self.file_path))\n        task_func()\n        final_line_count = sum(1 for line in open(self.file_path))\n        self.assertEqual(final_line_count, initial_line_count + 1)\n    def test_headers_only_once(self):\n        # Ensure headers are not duplicated\n        task_func()  # Run twice to potentially append headers again\n        task_func()\n        with open(self.file_path, 'r') as f:\n            reader = csv.reader(f)\n            headers = [row for row in reader if row == ['Timestamp', 'Temperature', 'Humidity']]\n            self.assertEqual(len(headers), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Train a linear regression model and return the model score of the test set. The provided DataFrame is used as training data, where target_column is used as target in training the model. Before training the provided data is split into a training and a test set using test_size and random_state parameters. >>> data = pd.DataFrame({ ...     'x1': rng.random(500), ... }) >>> data['y'] = data['x1'] * 2 + 1 >>> result = task_func(data, 'y', random_state=9, test_size=0.1) >>> result 1.0\nThe function should raise the exception for: ValueError: If data is not a DataFrame. ValueError: If data is empty. ValueError: If target_column ist not a column of data. ValueError: If data contains values that are not numeric. ValueError: If random_state is not an integer. ValueError: If test_size is not between 0 and 1.\nThe function should output with:\n    float: The model's score.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data should be a DataFrame.\")\n    \n    if data.empty:\n        raise ValueError(\"data should contain at least one row.\")\n    \n    if target_column not in data.columns:\n        raise ValueError(\"target_column should be in the provided DataFrame.\")\n    \n    if not all(np.issubdtype(dtype, np.number) for dtype in data.dtypes):\n        raise ValueError(\"data values should be numeric only.\")\n    \n    if test_size <= 0 or test_size >= 1:\n        raise ValueError(\"test_size should be between 0 and 1: 0 < test_size < 1\")\n    \n    if isinstance(random_state, int) is not True:\n        raise ValueError(\"random_state should be an integer.\") \n    \n    \n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    model = LinearRegression().fit(X_train, y_train)\n\n    return model.score(X_test, y_test)",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nclass TestCases(unittest.TestCase):\n    def test_case_test_size(self):\n        'test sizes out of allowed range'\n        rng = np.random.default_rng(seed=0)\n        data = pd.DataFrame({\n            'x1': rng.random(100),\n            'x2': rng.random(100),\n            'y': rng.random(100)\n        })\n        self.assertRaises(Exception, task_func, data, 'y', 5)\n        self.assertRaises(Exception, task_func, data, 'y', -1)\n        self.assertRaises(Exception, task_func, data, 'y', 0)\n        self.assertRaises(Exception, task_func, data, 'y', 1)\n    def test_case_random_state(self):\n        'random_state not an integer'\n        rng = np.random.default_rng(seed=0)\n        data = pd.DataFrame({\n            'x1': rng.random(100),\n            'x2': rng.random(100),\n            'y': rng.random(100)\n        })\n        self.assertRaises(Exception, task_func, data, 'y', 0.2, 'a')\n        self.assertRaises(Exception, task_func, data, 'y', 0.2, [1, 2])\n        self.assertRaises(Exception, task_func, data, 'y', 0.2, {'a': 2})\n    def test_case_df(self):\n        '''non DataFrame input'''\n        df = 3\n        target_column = 'test'\n        self.assertRaises(Exception, task_func, df, target_column)\n    def test_case_target_column(self):\n        '''target column not in DataFrame'''\n        rng = np.random.default_rng(seed=0)\n        df = pd.DataFrame(rng.integers(0, 10, size=(5, 2)), columns=['test', 'python'])\n        target_column = 'not'\n        self.assertRaises(Exception, task_func, df, target_column)\n    def test_case_empty_df(self):\n        '''empty df as input'''\n        df = pd.DataFrame(columns=['A', 'B'])\n        target_column = 'A'\n        self.assertRaises(Exception, task_func, df, target_column)\n    \n    def test_case_non_numeric_values(self):\n        '''df not numeric'''\n        data = {\n            'A': [1, 2, 'test'],\n            'B': [3, 3, 3]\n        }\n        df = pd.DataFrame(data)\n        target_column = 'A'\n        self.assertRaises(Exception, task_func, df, target_column)\n    def test_case_1(self):\n        'completely random input'\n        rng = np.random.default_rng(seed=0)\n        data = pd.DataFrame({\n            'x1': rng.random(100),\n            'x2': rng.random(100),\n            'y': rng.random(100)\n        })\n        result = task_func(data, 'y')\n        self.assertIsInstance(result, float)\n        self.assertAlmostEqual(result, -0.084144904538201)\n    def test_case_2(self):\n        'linear relation'\n        rng = np.random.default_rng(seed=0)\n        data = pd.DataFrame({\n            'x1': rng.random(500),\n        })\n        data['y'] = data['x1'] * 2 + 1\n        result = task_func(data, 'y')\n        self.assertIsInstance(result, float)\n        self.assertAlmostEqual(result, 1.0)\n    def test_case_3(self):\n        'linear relation'\n        rng = np.random.default_rng(seed=0)\n        data = pd.DataFrame({\n            'x1': rng.random(720) * 10,\n            'x2': rng.random(720) * 100\n        })\n        data['y'] = data['x1'] * 2 + data['x2'] * (-0.14) + 25\n        result = task_func(data, 'y')\n        self.assertIsInstance(result, float)\n        self.assertAlmostEqual(result, 1.0)\n    def test_case_4(self):\n        'linear relation with quadratic perturbation'\n        rng = np.random.default_rng(seed=0)\n        data = pd.DataFrame({\n            'x1': rng.random(720),\n            'x2': rng.random(720)\n        })\n        data['y'] = (\n            data['x1'] * 5.1 + data['x2'] * (-3.1) + 6.4 + data['x1']**2\n        )\n        random_state = 42\n        train_test_split = 0.4\n        result = task_func(data, 'y', test_size=train_test_split, random_state=random_state)\n        self.assertIsInstance(result, float)\n        self.assertAlmostEqual(result, 0.9985567445794377)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Execute a given Python code in a temporary directory.\nNote that: If the Python code can be run successfully return \"Script executed successfully!\", otherwise \"Script execution failed!\"\nThe function should output with:\n    str: String indicating the success or failure of the script execution.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n```",
        "gt": "import subprocess\nimport shutil\nimport os\ndef task_func(script_path: str, temp_dir: str) -> str:\n    try:\n        shutil.copy(script_path, temp_dir)\n        temp_script_path = os.path.join(temp_dir, os.path.basename(script_path))\n        result = subprocess.call([\"python\", temp_script_path])\n        print(result)\n        if result == 0:\n            return \"Script executed successfully!\"\n        else:\n            return \"Script execution failed!\"\n    except Exception as e:\n        return \"Script execution failed!\"",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'testdir_task_func'\n        os.makedirs(self.test_dir, exist_ok=True)\n        f = open(self.test_dir+\"/script4.py\",\"w\")\n        f.write(\"print('Hello from script4')\")\n        f.close()\n        f = open(self.test_dir+\"/script1.py\",\"w\")\n        f.write(\"import time\\ntime.sleep(20)\\nprint('waiting')\")\n        f.close()\n        f = open(self.test_dir+\"/script2.py\",\"w\")\n        f.close()\n        f = open(self.test_dir+\"/script3.py\",\"w\")\n        f.write(\"invalid python code\")\n        f.close()\n        \n        self.temp_dir = 'testdir_task_func/temp_dir'\n        os.makedirs(self.temp_dir, exist_ok=True)\n        \n    def tearDown(self):\n        # Clean up the test directory\n        shutil.rmtree(self.test_dir)\n    \n    def test_case_1(self):\n        # Testing with a non-existent script path\n        result = task_func('/path/to/non_existent_script.py', self.temp_dir)\n        self.assertEqual(result, \"Script execution failed!\")\n        self.assertEqual(os.path.exists(self.temp_dir+\"/non_existent_script.py\"), False)\n    \n    def test_case_2(self):\n        # Testing with a valid script path but the script contains errors\n        # Assuming we have a script named \"error_script.r\" which contains intentional errors\n        result = task_func(self.test_dir+\"/script3.py\", self.temp_dir)\n        self.assertEqual(result, \"Script execution failed!\")\n        self.assertEqual(os.path.exists(self.temp_dir+\"/script3.py\"), True)\n        \n    def test_case_3(self):\n        # Testing with a valid script path and the script executes successfully\n        # Assuming we have a script named \"sscript4.r\" which runs without errors\n        result = task_func(self.test_dir+\"/script4.py\", self.temp_dir)\n        self.assertEqual(result, \"Script executed successfully!\")\n        self.assertEqual(os.path.exists(self.temp_dir+\"/script4.py\"), True)\n    \n    def test_case_4(self):\n        # Testing with a script that takes a long time to execute\n        # Assuming we have a script named \"script1.r\" that intentionally runs for a long time\n        result = task_func(self.test_dir+\"/script1.py\", self.temp_dir)\n        self.assertEqual(result, \"Script executed successfully!\")\n        self.assertEqual(os.path.exists(self.temp_dir+\"/script1.py\"), True)\n    \n    def test_case_5(self):\n         # Testing with a script that empty\n        result = task_func(self.test_dir+\"/script2.py\", self.temp_dir)\n        self.assertEqual(result, \"Script executed successfully!\")\n        self.assertEqual(os.path.exists(self.temp_dir+\"/script2.py\"), True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Trains a simple neural network on given input data and target labels. The function: - Splits the data into a training set (75%) and a test set (25%), assuming the input dimension is always 2. - Constructs a Sequential model with one dense hidden layer and a sigmoid activation function. - Compiles the model using binary cross-entropy loss and SGD optimizer with a specified learning rate. - Fits the model to the training data (without verbose output), also evaluating it on the test set as validation data. - Plots the model's training and validation loss over epochs and returns the plot's Axes object for further customization.\nNote that: Notes: The input dimension of X must always be 2. The Axes title is 'Model loss' The x-axis label is 'Epoch' The y-axis label is 'Loss'\nThe function should output with:\n    Sequential: The trained Keras Sequential model.\n    matplotlib.axes.Axes: The Axes object of the plot. The plot visualizes the model's training and validation loss over epochs, with the x-axis representing epochs and the y-axis representing loss. The legend distinguishes between 'Train' and 'Test' losses.\nYou should write self-contained code starting with:\n```\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n```",
        "gt": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25)\n\n    model = Sequential([Dense(input_dim=2, units=1, activation='sigmoid')])\n    model.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))\n\n    history = model.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0, validation_data=(X_test, Y_test))\n\n    fig, ax = plt.subplots()\n    ax.plot(history.history['loss'], label='Train Loss')\n    ax.plot(history.history['val_loss'], label='Validation Loss')\n    ax.set_title('Model loss')\n    ax.set_ylabel('Loss')\n    ax.set_xlabel('Epoch')\n    ax.legend(['Train', 'Test'], loc='upper left')\n\n    return model, ax",
        "test": "import numpy as np\nimport unittest\nfrom keras.models import Sequential\nfrom keras.optimizers import SGD\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up input and output data for the tests\n        self.X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n        self.Y = np.array([[0], [1], [1], [0]])\n    def test_model_type(self):\n        # Test if the returned model is an instance of keras.engine.sequential.Sequential\n        model, _ = task_func(self.X, self.Y)\n        self.assertIsInstance(model, Sequential)\n    def test_axes_type(self):\n        # Test if the returned axes object is an instance of matplotlib.axes.Axes\n        _, ax = task_func(self.X, self.Y)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_axes_title(self):\n        # Test if the plot's title is correctly set to 'Model loss'\n        _, ax = task_func(self.X, self.Y)\n        self.assertEqual(ax.get_title(), 'Model loss')\n    def test_axes_xlabel(self):\n        # Test if the x-axis label is correctly set to 'Epoch'\n        _, ax = task_func(self.X, self.Y)\n        self.assertEqual(ax.get_xlabel(), 'Epoch')\n    def test_axes_ylabel(self):\n        # Test if the y-axis label is correctly set to 'Loss'\n        _, ax = task_func(self.X, self.Y)\n        self.assertEqual(ax.get_ylabel(), 'Loss')\n    def test_model_output_shape(self):\n        # Test if the model's output shape is as expected\n        model, _ = task_func(self.X, self.Y)\n        self.assertEqual(model.output_shape, (None, 1))\n    def test_model_weights(self):\n        # Test if the model has the correct number of weights arrays (for layers and biases)\n        model, _ = task_func(self.X, self.Y)\n        weights = model.get_weights()\n        self.assertEqual(len(weights), 2)\n    def test_model_loss(self):\n        # Test if the model uses 'binary_crossentropy' as its loss function\n        model, _ = task_func(self.X, self.Y)\n        self.assertIn('binary_crossentropy', model.loss)\n    def test_model_optimizer(self):\n        # Test if the model's optimizer is an instance of SGD\n        model, _ = task_func(self.X, self.Y)\n        self.assertIsInstance(model.optimizer, SGD)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a random sports ranking and sort it by points in descending order.\nNote that: Each team is assigned a name in the format \"Team i\" and a corresponding random number of points, where i ranges from 1 to the specified number of teams. The ranking is then sorted in descending order of points and returned as an OrderedDict.\nThe function should output with:\n    OrderedDict: Sorted dictionary where keys are team names and values are points.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n```",
        "gt": "import collections\nimport random\nfrom queue import PriorityQueue\ndef task_func(number_teams=5):\n\n    # Constants\n    \n    TEAMS = []\n    POINTS = []\n\n    for i in range(1, number_teams+1):\n        TEAMS.append(\"Team \"+str(i))\n        POINTS.append(10*i)\n    \n    shuffled_points = POINTS.copy()\n    random.shuffle(shuffled_points)\n    ranking = dict(zip(TEAMS, shuffled_points))\n\n    sorted_ranking = PriorityQueue()\n    for team, points in ranking.items():\n        sorted_ranking.put((-points, team))\n\n    sorted_ranking_dict = collections.OrderedDict()\n    while not sorted_ranking.empty():\n        points, team = sorted_ranking.get()\n        sorted_ranking_dict[team] = -points\n\n    return sorted_ranking_dict",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test if the return type is OrderedDict.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertIsInstance(result, collections.OrderedDict, \"Return type should be OrderedDict.\")\n    def test_length_of_return(self):\n        \"\"\"Test if the returned OrderedDict has the correct length.\"\"\"\n        random.seed(0)\n        result = task_func(5)\n        self.assertEqual(len(result), 5, \"Returned OrderedDict should have the same length as TEAMS.\")\n    def test_inclusion_of_teams(self):\n        \"\"\"Test if all predefined teams are included.\"\"\"\n        random.seed(0)\n        result = task_func(5)\n        TEAMS = []\n        for i in range(1, 5+1):\n            TEAMS.append(\"Team \"+str(i))\n        self.assertTrue(all(team in result for team in TEAMS), \"All predefined teams should be included in the result.\")\n    def test_ordering_of_points(self):\n        \"\"\"Test if points are in descending order.\"\"\"\n        random.seed(0)\n        result = task_func()\n        points = list(result.values())\n        self.assertTrue(all(points[i] >= points[i + 1] for i in range(len(points) - 1)), \"Points should be in descending order.\")\n    def test_data_types_in_return(self):\n        \"\"\"Test if keys and values in the returned OrderedDict are of correct data types.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertTrue(all(isinstance(team, str) for team in result.keys()), \"All keys in the result should be strings.\")\n        self.assertTrue(all(isinstance(points, int) for points in result.values()), \"All values in the result should be integers.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize the functions in a DataFrame. The function applies standard scaling to the features.\nThe function should output with:\n    df (pandas.DataFrame): The DataFrame with the standardized features.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, features):\n    if not features:\n        return df\n\n    # Initialize the StandardScaler\n    scaler = StandardScaler()\n    \n    # Apply StandardScaler to the specified features\n    # Using pd.DataFrame to explicitly reference DataFrame operations\n    df.loc[:, features] = pd.DataFrame(scaler.fit_transform(df.loc[:, features]), columns=features, index=df.index)\n\n    # Example of explicit np usage, even though not necessary for this function\n    # Just for demonstration: add a dummy operation using np\n    df['dummy'] = np.zeros(len(df))\n\n    return df.drop('dummy', axis=1)  ",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self) -> None:\n        np.random.seed(42)\n    def test_case_1(self):\n        df = pd.DataFrame(np.random.randn(10, 3), columns=['a', 'b', 'c'])\n        df = task_func(df, ['a', 'b'])\n        self.assertEqual(df.shape, (10, 3))\n        self.assertTrue('a' in df.columns)\n        self.assertTrue('b' in df.columns)\n        self.assertTrue('c' in df.columns)\n        self.assertTrue(np.all(df['a'] >= -5) and np.all(df['a'] <= 5))\n        self.assertTrue(np.all(df['b'] >= -5) and np.all(df['b'] <= 5))\n        self.assertTrue(np.all(df['c'] >= -5) and np.all(df['c'] <= 5))\n    def test_case_2(self):\n        df = pd.DataFrame({'a': [0, 0, 0], 'b': [0, 0, 0], 'c': [0, 0, 0]})\n        df = task_func(df, ['a', 'b'])\n        self.assertEqual(df.shape, (3, 3))\n        self.assertTrue('a' in df.columns)\n        self.assertTrue('b' in df.columns)\n        self.assertTrue('c' in df.columns)\n        self.assertTrue(np.all(df['a'] == 0))\n        self.assertTrue(np.all(df['b'] == 0))\n        self.assertTrue(np.all(df['c'] == 0))\n    def test_case_3(self):\n        df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]})\n        df = task_func(df, ['a', 'b'])\n        self.assertEqual(df.shape, (3, 3))\n        self.assertTrue('a' in df.columns)\n        self.assertTrue('b' in df.columns)\n        self.assertTrue('c' in df.columns)\n        self.assertTrue(np.all(df['a'] >= -3) and np.all(df['a'] <= 3))\n        self.assertTrue(np.all(df['b'] >= -3) and np.all(df['b'] <= 3))\n        self.assertTrue(np.all(df['c'] == [7, 8, 9]))\n    def test_case_4(self):\n        df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]})\n        df = task_func(df, ['c'])\n        self.assertEqual(df.shape, (3, 3))\n        self.assertTrue('a' in df.columns)\n        self.assertTrue('b' in df.columns)\n        self.assertTrue('c' in df.columns)\n        self.assertTrue(np.all(df['a'] == [1, 2, 3]))\n        self.assertTrue(np.all(df['b'] == [4, 5, 6]))\n        self.assertTrue(np.all(df['c'] >= -3) and np.all(df['c'] <= 3))\n    def test_case_5(self):\n        df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]})\n        df = task_func(df, [])\n        self.assertEqual(df.shape, (3, 3))\n        self.assertTrue('a' in df.columns)\n        self.assertTrue('b' in df.columns)\n        self.assertTrue('c' in df.columns)\n        self.assertTrue(np.all(df['a'] == [1, 2, 3]))\n        self.assertTrue(np.all(df['b'] == [4, 5, 6]))\n        self.assertTrue(np.all(df['c'] == [7, 8, 9]))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Check if a particular process is running based on its name. If it is not running, start it using the process name as a command. If it is running, terminate the process and restart it by executing the process name as a command.\nThe function should output with:\n    str: A message indicating the action taken:\n    \"Process not found. Starting <process_name>.\"\n    \"Process found. Restarting <process_name>.\"\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n```",
        "gt": "import subprocess\nimport psutil\nimport time\ndef task_func(process_name: str) -> str:\n    # Check if the process is running\n    is_running = any([proc for proc in psutil.process_iter() if proc.name() == process_name])\n    \n    # If the process is running, terminate it\n    if is_running:\n        for proc in psutil.process_iter():\n            if proc.name() == process_name:\n                proc.terminate()\n                time.sleep(5)\n        subprocess.Popen(process_name)\n        return f\"Process found. Restarting {process_name}.\"\n    else:\n        subprocess.Popen(process_name)\n        return f\"Process not found. Starting {process_name}.\"",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('psutil.process_iter')\n    @patch('subprocess.Popen')\n    def test_process_not_found_starts_process(self, mock_popen, mock_process_iter):\n        # Simulating no running process\n        mock_process_iter.return_value = []\n        result = task_func('random_non_existent_process')\n        self.assertEqual(result, \"Process not found. Starting random_non_existent_process.\")\n        mock_popen.assert_called_once_with('random_non_existent_process')\n    @patch('psutil.process_iter')\n    @patch('subprocess.Popen')\n    def test_process_found_restarts_process(self, mock_popen, mock_process_iter):\n        # Simulating a running process\n        process = MagicMock()\n        process.name.return_value = 'notepad'\n        mock_process_iter.return_value = [process]\n        result = task_func('notepad')\n        self.assertEqual(result, \"Process found. Restarting notepad.\")\n        # Expecting terminate called on the process and then restarted\n        process.terminate.assert_called_once()\n        mock_popen.assert_called_once_with('notepad')\n    @patch('psutil.process_iter')\n    @patch('subprocess.Popen')\n    def test_process_terminates_and_restarts_multiple_instances(self, mock_popen, mock_process_iter):\n        # Simulating multiple instances of a running process\n        process1 = MagicMock()\n        process2 = MagicMock()\n        process1.name.return_value = 'multi_instance'\n        process2.name.return_value = 'multi_instance'\n        mock_process_iter.return_value = [process1, process2]\n        result = task_func('multi_instance')\n        self.assertEqual(result, \"Process found. Restarting multi_instance.\")\n        process1.terminate.assert_called_once()\n        process2.terminate.assert_called_once()\n        mock_popen.assert_called_once_with('multi_instance')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Open an RGB image from a specific path, apply a blur filter, convert it to grayscale, and then display both the original and the edited images side by side. Returns numpy arrays representing both the original and the processed images.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays, the first representing the original image and\n    the second representing the blurred and grayscaled image.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n```",
        "gt": "from PIL import Image, ImageFilter\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path, blur_radius=5):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n\n    img = Image.open(img_path)\n    img = img.convert(\"RGB\")\n\n    blurred_img = img.filter(ImageFilter.GaussianBlur(blur_radius))\n    grey_img = cv2.cvtColor(np.array(blurred_img), cv2.COLOR_RGB2GRAY)\n\n    return np.array(img), np.array(grey_img)",
        "test": "import unittest\nimport numpy as np\nfrom PIL import Image, ImageDraw\ndef create_dummy_image(image_path='test_image.jpg', size=(10, 10)):\n    img = Image.new('RGB', size, color='white')\n    draw = ImageDraw.Draw(img)\n    draw.rectangle([2, 2, 8, 8], fill='black')\n    img.save(image_path)\nclass TestCases(unittest.TestCase):\n    def setUp(cls):\n        create_dummy_image()\n    def tearDown(cls):\n        os.remove('test_image.jpg')\n    def test_normal_functionality(self):\n        original, processed = task_func('test_image.jpg')\n        self.assertIsInstance(original, np.ndarray)\n        self.assertIsInstance(processed, np.ndarray)\n        \n        original_img_list = original.tolist()\n        processed_img_list = processed.tolist()\n        \n        # self.assertTrue(np.array_equal(segmented_img_list, segment_expect), \"The arrays should not be equal\")\n        \n        with open('df_contents.txt', 'w') as file:\n            file.write(str(processed_img_list))\n            \n        expect_original = [[[255, 255, 255], [252, 252, 252], [251, 251, 251], [255, 255, 255], [255, 255, 255], [255, 255, 255], [249, 249, 249], [249, 249, 249], [255, 255, 255], [247, 247, 247]], [[242, 242, 242], [255, 255, 255], [241, 241, 241], [255, 255, 255], [255, 255, 255], [250, 250, 250], [255, 255, 255], [255, 255, 255], [233, 233, 233], [255, 255, 255]], [[255, 255, 255], [237, 237, 237], [4, 4, 4], [0, 0, 0], [0, 0, 0], [0, 0, 0], [12, 12, 12], [0, 0, 0], [23, 23, 23], [250, 250, 250]], [[255, 255, 255], [255, 255, 255], [0, 0, 0], [5, 5, 5], [10, 10, 10], [3, 3, 3], [7, 7, 7], [0, 0, 0], [0, 0, 0], [255, 255, 255]], [[253, 253, 253], [255, 255, 255], [8, 8, 8], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [17, 17, 17], [11, 11, 11], [255, 255, 255]], [[255, 255, 255], [255, 255, 255], [2, 2, 2], [0, 0, 0], [12, 12, 12], [15, 15, 15], [0, 0, 0], [0, 0, 0], [0, 0, 0], [246, 246, 246]], [[254, 254, 254], [255, 255, 255], [4, 4, 4], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [3, 3, 3], [16, 16, 16], [254, 254, 254]], [[253, 253, 253], [255, 255, 255], [0, 0, 0], [0, 0, 0], [12, 12, 12], [0, 0, 0], [11, 11, 11], [0, 0, 0], [0, 0, 0], [249, 249, 249]], [[255, 255, 255], [250, 250, 250], [4, 4, 4], [0, 0, 0], [0, 0, 0], [7, 7, 7], [0, 0, 0], [7, 7, 7], [13, 13, 13], [241, 241, 241]], [[248, 248, 248], [255, 255, 255], [230, 230, 230], [255, 255, 255], [255, 255, 255], [255, 255, 255], [244, 244, 244], [249, 249, 249], [241, 241, 241], [255, 255, 255]]]\n        \n        expect_processed = [[190, 188, 187, 186, 185, 183, 182, 182, 182, 182], [189, 187, 185, 184, 183, 181, 180, 180, 180, 180], [187, 185, 184, 182, 181, 179, 178, 178, 178, 178], [185, 184, 182, 180, 179, 178, 177, 177, 177, 177], [184, 182, 181, 179, 178, 176, 175, 175, 175, 176], [183, 181, 179, 178, 177, 175, 174, 174, 174, 174], [182, 180, 178, 177, 176, 174, 173, 173, 173, 174], [182, 180, 178, 176, 175, 174, 173, 173, 173, 173], [182, 180, 178, 176, 175, 174, 173, 173, 173, 173], [182, 180, 178, 176, 176, 174, 173, 173, 173, 174]]\n        self.assertTrue(np.array_equal(expect_processed, processed_img_list), \"The arrays should not be equal\")\n        self.assertTrue(np.array_equal(expect_original, original_img_list), \"The arrays should not be equal\")\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.jpg')\n    def test_blur_effectiveness(self):\n        _, processed = task_func('test_image.jpg')\n        self.assertNotEqual(np.mean(processed), 255)  # Ensuring it's not all white\n    def test_returned_image_shapes(self):\n        original, processed = task_func('test_image.jpg')\n        self.assertEqual(original.shape, (10, 10, 3))\n        self.assertEqual(processed.shape, (10, 10))\n    def test_different_blur_radius(self):\n        _, processed_default = task_func('test_image.jpg')\n        _, processed_custom = task_func('test_image.jpg', blur_radius=10)\n        self.assertFalse(np.array_equal(processed_default, processed_custom))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate n random dots within a unit square (0 to 1 on both axes) in a 2D space and find the pair that comes closest to each other.\nNote that: This function will return None if the input n less than 2.\nThe function should output with:\n    tuple or None: A tuple of the form ((x1, y1), (x2, y2)), which are the coordinates of the closest pair,\n    or None if n is less than 2.\nYou should write self-contained code starting with:\n```\nimport random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n```",
        "gt": "import random\nfrom itertools import combinations\nimport math\ndef task_func(n):\n\n    if n < 2:\n        return None\n\n    points = [(random.random(), random.random()) for i in range(n)]\n    closest_pair = min(combinations(points, 2), key=lambda pair: math.hypot(pair[0][0] - pair[1][0], pair[0][1] - pair[1][1]))\n    return closest_pair",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_typical_use_case(self):\n        random.seed(0)\n        result = task_func(5)\n        self.assertIsInstance(result, tuple, \"Should return a tuple for 5 points\")\n    def test_zero_points(self):\n        random.seed(0)\n        result = task_func(0)\n        self.assertIsNone(result, \"Should return None for 0 points\")\n    def test_one_point(self):\n        random.seed(0)\n        result = task_func(1)\n        self.assertIsNone(result, \"Should return None for 1 point\")\n    def test_large_number_of_points(self):\n        random.seed(0)\n        result = task_func(1000)\n        self.assertIsInstance(result, tuple, \"Should return a tuple for 1000 points\")\n    def test_minimum_points(self):\n        random.seed(0)\n        result = task_func(2)\n        self.assertIsInstance(result, tuple, \"Should return a tuple for 2 points\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a list of all possible integer pairs within the range of 1 to n.\nThe function should raise the exception for: This function will raise Value Error if the input n is less than 1.\nThe function should output with:\n    list of tuples: A list of tuple pairs representing all possible combinations\n    of two numbers within the specified range.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import combinations\ndef task_func(n):\n```",
        "gt": "import numpy as np\nfrom itertools import combinations\ndef task_func(n):\n\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    numbers = np.arange(1, n + 1)\n    pairs = list(combinations(numbers, 2))\n    return pairs",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_small_range(self):\n        self.assertEqual(task_func(2), [(1, 2)])\n    def test_medium_range(self):\n        expected_output = [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n        self.assertEqual(task_func(4), expected_output)\n    def test_large_range(self):\n        result = task_func(10)\n        self.assertEqual(len(result), 45)  # 10 choose 2 combinations\n        self.assertIn((1, 10), result)\n    def test_edge_case_empty(self):\n        self.assertEqual(task_func(1), [])\n    def test_invalid_input_negative(self):\n        with self.assertRaises(ValueError):\n            task_func(-1)\n    def test_invalid_input_zero(self):\n        with self.assertRaises(ValueError):\n            task_func(0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Unzip all zip files in a directory whose name matches a certain pattern by splitting the filename the last time \"-\" occurs and using the prefix part of the filename as the directory to extract.\nThe function should output with:\n    list: A list of directories where the files were extracted.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n```",
        "gt": "import re\nimport os\nimport zipfile\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            file_path = os.path.join(directory, filename)\n            # Use the part before the first '-' as the directory name.\n            base_name = match.group(1)\n            extract_path = os.path.join(directory, base_name)\n            with zipfile.ZipFile(file_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_path)\n            if extract_path not in extracted_dirs:\n                extracted_dirs.append(extract_path)\n                os.makedirs(extract_path, exist_ok=True)  # Ensure the directory is created\n    return extracted_dirs",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock, mock_open, call\nimport os\nclass TestCases(unittest.TestCase):\n    @patch('os.listdir')\n    @patch('zipfile.ZipFile')\n    @patch('os.makedirs')\n    def test_case_1(self, mock_makedirs, mock_zipfile, mock_listdir):\n        mock_listdir.return_value = ['sample-123.zip', 'test_data-456.zip', 'data_test-789.zip']\n        mock_zipfile.return_value.__enter__.return_value.extractall = MagicMock()\n        test_dir = \"/fake/test_zip_dir\"\n        extracted_dirs = task_func(test_dir)\n        # Verify directories were correctly created\n        expected_dirs = [\n            os.path.join(test_dir, 'sample'),\n            os.path.join(test_dir, 'test_data'),\n            os.path.join(test_dir, 'data_test')\n        ]\n        actual_calls = [call(os.path.join(test_dir, x), exist_ok=True) for x in extracted_dirs]\n        mock_makedirs.assert_has_calls(actual_calls, any_order=True)\n        # Ensure zipfile is called correctly\n        zip_calls = [\n            call(os.path.join(test_dir, 'sample-123.zip'), 'r'),\n            call(os.path.join(test_dir, 'test_data-456.zip'), 'r'),\n            call(os.path.join(test_dir, 'data_test-789.zip'), 'r')\n        ]\n        mock_zipfile.assert_has_calls(zip_calls, any_order=True)\n        # Check returned directory list\n        self.assertListEqual(extracted_dirs, expected_dirs)\n    @patch('os.makedirs')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    def test_case_2(self, mock_listdir, mock_zipfile, mock_makedirs):\n        mock_listdir.return_value = ['test_data-123.zip']\n        mock_zipfile.return_value.__enter__.return_value.extractall = MagicMock()\n        test_dir = \"/fake/test_zip_dir\"\n        task_func(test_dir)\n        mock_makedirs.assert_called_once_with(os.path.join(test_dir, 'test_data'), exist_ok=True)\n        mock_zipfile.assert_called_once_with(os.path.join(test_dir, 'test_data-123.zip'), 'r')\n    @patch('os.makedirs')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    def test_case_3(self, mock_listdir, mock_zipfile, mock_makedirs):\n        mock_listdir.return_value = ['data_test-321.zip']\n        mock_zipfile.return_value.__enter__.return_value.extractall = MagicMock()\n        test_dir = \"/fake/test_zip_dir\"\n        task_func(test_dir)\n        mock_makedirs.assert_called_once_with(os.path.join(test_dir, 'data_test'), exist_ok=True)\n        mock_zipfile.assert_called_once_with(os.path.join(test_dir, 'data_test-321.zip'), 'r')\n    @patch('os.makedirs')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    def test_case_4(self, mock_listdir, mock_zipfile, mock_makedirs):\n        mock_listdir.return_value = []\n        test_dir = \"/fake/test_zip_dir\"\n        task_func(test_dir)\n        mock_makedirs.assert_not_called()\n        mock_zipfile.assert_not_called()\n    @patch('os.makedirs')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    def test_case_5(self, mock_listdir, mock_zipfile_class, mock_makedirs):\n        # Set up the expected filename and directory\n        test_dir = \"/fake/test_zip_dir\"\n        filename = 'test-456.zip'\n        mock_listdir.return_value = [filename]\n        expected_zip_path = os.path.join(test_dir, filename)\n        # Call the function with the test directory\n        task_func(test_dir)\n        # Assertions to ensure the ZipFile was handled correctly\n        mock_zipfile_class.assert_called_once_with(expected_zip_path, 'r')\n        mock_zipfile_class.return_value.__enter__.return_value.extractall.assert_called_once()\n        # Ensure the directory is created based on the filename without the zip part\n        expected_directory = os.path.join(test_dir, 'test')\n        mock_makedirs.assert_called_once_with(expected_directory, exist_ok=True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a population report DataFrame and CSV file based on provided JSON data.\nNote that: Notes: Output DataFrame has no extra index column. If this function encounters a float population that is otherwise valid, it will round it down to the nearest integer.\nThe function should raise the exception for: ValueError: If the JSON data is malformed, empty, contains non-string country names, non-numeric or negative populations. IOError: If the file cannot be written to the specified directory.\nThe function should output with:\n    str: The file path of the generated CSV report.\n    pd.DataFrame: The country-population data loaded from the input JSON, with columns:\n    \"Country\", \"Population\".\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n```",
        "gt": "import pandas as pd\nimport json\nimport os\nimport math\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    os.makedirs(output_dir, exist_ok=True)\n    file_path = os.path.join(output_dir, file_name)\n\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON data provided.\")\n\n    country_data_dict = data.get(\"Countries\")\n\n    if country_data_dict is None:\n        raise ValueError(\"No valid country population data found in JSON.\")\n\n    for country, population in country_data_dict.items():\n        if not isinstance(country, str):\n            raise ValueError(f\"Country name must be a string. Invalid entry: {country}\")\n        if not isinstance(population, int):\n            if isinstance(population, float):\n                country_data_dict[country] = math.floor(population)\n            else:\n                raise ValueError(\n                    f\"Population must be an integer. Invalid entry for {country}: {population}\"\n                )\n        if population < 0:\n            raise ValueError(\"Population cannot be negative.\")\n\n    country_data = [\n        [country, population] for country, population in country_data_dict.items()\n    ]\n    df = pd.DataFrame(country_data, columns=[\"Country\", \"Population\"])\n\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Failed to write the CSV file to {output_dir}: {e}\")\n\n    return file_path, df",
        "test": "import unittest\nimport os\nimport json\nimport pandas as pd\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.output_dir = self.temp_dir.name\n    def tearDown(self):\n        self.temp_dir.cleanup()\n    def check_df_format(self, df):\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue(\"Country\" in df.columns)\n        self.assertTrue(\"Population\" in df.columns)\n    def test_case_1(self):\n        # Test basic case\n        json_data = '{\"Countries\": {\"USA\": 331002651, \"UK\": 67886011}}'\n        csv_file, df1 = task_func(json_data, self.output_dir)\n        self.check_df_format(df1)\n        self.assertTrue(os.path.exists(csv_file))\n        df2 = pd.read_csv(csv_file)\n        self.check_df_format(df2)\n        pd.testing.assert_frame_equal(df1, df2)\n        self.assertTrue(df1.shape[0] == 2)\n        self.assertEqual(df1.loc[df1.Country == \"USA\", \"Population\"].item(), 331002651)\n        self.assertEqual(df1.loc[df1.Country == \"UK\", \"Population\"].item(), 67886011)\n    def test_case_2(self):\n        # Test with empty json\n        json_data = \"{}\"\n        with self.assertRaises(ValueError):\n            task_func(json_data, self.output_dir)\n    def test_case_3(self):\n        # Test incorrect JSON format\n        with self.assertRaises(ValueError):\n            task_func('{\"WRONG\": {\"USA\": 331002651, \"UK\": 67886011}}', self.output_dir)\n        with self.assertRaises(ValueError):\n            task_func('{\"USA\": 331002651, \"UK\": 67886011}', self.output_dir)\n        with self.assertRaises(ValueError):\n            task_func('{\"Countries\": {\"USA\": 331002651, \"UK\"', self.output_dir)\n    def test_case_4(self):\n        # Test that output directory is created if it does not exist\n        non_existing_dir = os.path.join(self.output_dir, \"new_directory\")\n        self.assertFalse(\n            os.path.exists(non_existing_dir), \"Directory already exists before test.\"\n        )\n        json_data = '{\"Countries\": {\"Country A\": 1000}}'\n        _, _ = task_func(json_data, non_existing_dir)\n        self.assertTrue(\n            os.path.exists(non_existing_dir),\n            \"Directory was not created by the function.\",\n        )\n    def test_case_5(self):\n        # Test with country names that include special characters\n        json_data = '{\"Countries\": {\"C\u00f4te d\\'Ivoire\": 26378274, \"S\u00e3o Tom\u00e9 and Pr\u00edncipe\": 219159}}'\n        csv_file, df = task_func(json_data, self.output_dir)\n        self.check_df_format(df)\n        self.assertTrue(os.path.exists(csv_file))\n        self.assertTrue(\"C\u00f4te d'Ivoire\" in df.Country.values)\n        self.assertTrue(\"S\u00e3o Tom\u00e9 and Pr\u00edncipe\" in df.Country.values)\n    def test_case_6(self):\n        # Test with empty \"Countries\" object\n        json_data = '{\"Countries\": {}}'\n        csv_file, df = task_func(json_data, self.output_dir)\n        self.check_df_format(df)\n        self.assertTrue(os.path.exists(csv_file))\n        self.assertTrue(df.empty)\n    def test_case_7(self):\n        # Test with non-numeric/negative population values\n        with self.assertRaises(ValueError):\n            task_func(\n                '{\"Countries\": {\"Country X\": \"1000000\", \"Country Y\": null}}',\n                self.output_dir,\n            )\n        with self.assertRaises(ValueError):\n            task_func(\n                '{\"Countries\": {\"Country X\": \"1000000\", \"Country Y\": \"ABC\"}}',\n                self.output_dir,\n            )\n        with self.assertRaises(ValueError):\n            task_func(\n                '{\"Countries\": {\"Country X\": \"1000000\", \"Country Y\": -1}}',\n                self.output_dir,\n            )\n    def test_case_8(self):\n        # Test handling zero population\n        json_data = '{\"Countries\": {\"Uninhabited Island\": 0}}'\n        csv_file, df = task_func(json_data, self.output_dir)\n        self.check_df_format(df)\n        self.assertTrue(os.path.exists(csv_file))\n        self.assertTrue(\"Uninhabited Island\" in df.Country.values)\n        self.assertEqual(\n            df.loc[df.Country == \"Uninhabited Island\", \"Population\"].item(), 0\n        )\n    def test_case_9(self):\n        # Test handling valid floats - should be correctly rounded\n        json_data = '{\"Countries\": {\"Country Float Pop\": 1234567.89, \"Another Country\": 98765.432}}'\n        csv_file, df = task_func(json_data, self.output_dir)\n        self.check_df_format(df)\n        self.assertTrue(os.path.exists(csv_file))\n        self.assertEqual(\n            df.loc[df.Country == \"Country Float Pop\", \"Population\"].item(), 1234567\n        )\n        self.assertEqual(\n            df.loc[df.Country == \"Another Country\", \"Population\"].item(), 98765\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate user activity logs from a given epoch time to the current time. This function iterates from the starting epoch time to the current system time, incrementally increasing the time by a random number of seconds (an integer in [1, 10]) between each log entry. Each log entry records a user performing an activity at a specific time.\nThe function should raise the exception for: ValueError: If the start time is after the current system time.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing logs of user activities, with columns:\n    'User':   User names, randomly chosen from a predefined list of users,\n    ['user1', 'user2', 'user3', 'user4', 'user5'].\n    'Activity': Activities performed by the users, randomly chosen from a\n    predefined list of activities, ['login', 'logout', 'browse',\n    'search', 'purchase'].\n    'Time': The timestamp of when the activity occurred, incrementally\n    increasing from the starting epoch time to the current time.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, seed=0):\n```",
        "gt": "import pandas as pd\nfrom datetime import datetime, timedelta\nimport random\ndef task_func(epoch_milliseconds, seed=0):\n    random.seed(seed)\n\n    USERS = [\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"]\n    ACTIVITIES = [\"login\", \"logout\", \"browse\", \"search\", \"purchase\"]\n\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    end_time = datetime.now()\n    if start_time >= end_time:\n        raise ValueError(\"Start time must be before current system time\")\n\n    logs = []\n    current_time = start_time\n    while current_time <= end_time:\n        user = random.choice(USERS)\n        activity = random.choice(ACTIVITIES)\n        logs.append([user, activity, current_time])\n        current_time += timedelta(seconds=random.randint(1, 10))\n    log_df = pd.DataFrame(logs, columns=[\"User\", \"Activity\", \"Time\"])\n    return log_df",
        "test": "import unittest\nimport pandas as pd\nfrom datetime import datetime, timedelta\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic functionality - 1 day ago\n        epoch_milliseconds = int(\n            (datetime.now() - timedelta(days=1)).timestamp() * 1000\n        )\n        log = task_func(epoch_milliseconds)\n        self.assertTrue(isinstance(log, pd.DataFrame))\n        self.assertTrue(\"User\" in log.columns)\n        self.assertTrue(\"Activity\" in log.columns)\n        self.assertTrue(\"Time\" in log.columns)\n        start_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n        self.assertEqual(log.iloc[0][\"Time\"], start_time)\n    def test_case_2(self):\n        # Test with a short time frame - 1 minutes ago\n        epoch_milliseconds = int(\n            (datetime.now() - timedelta(minutes=1)).timestamp() * 1000\n        )\n        log = task_func(epoch_milliseconds)\n        self.assertTrue(len(log) > 0)  # Should have at least one entry\n        self.assertTrue(\n            log[\"Time\"].min() >= datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n        )\n    def test_case_3(self):\n        # Test with a specific seed\n        epoch_milliseconds = int(\n            (datetime.now() - timedelta(days=1)).timestamp() * 1000\n        )\n        seed = 42\n        log = task_func(epoch_milliseconds, seed=seed)\n        first_row = log.iloc[0]\n        expected_user = \"user1\"\n        expected_activity = \"login\"\n        self.assertEqual(first_row[\"User\"], expected_user)\n        self.assertEqual(first_row[\"Activity\"], expected_activity)\n    def test_case_4(self):\n        # Test functionality over a longer period - 1 month ago\n        epoch_milliseconds = int(\n            (datetime.now() - timedelta(days=30)).timestamp() * 1000\n        )\n        log = task_func(epoch_milliseconds)\n        # Ensure that log timestamps are properly incrementing\n        time_diffs = log[\"Time\"].diff().dropna()\n        self.assertTrue(all(time_diffs > timedelta(seconds=0)))\n        seconds_in_a_month = (\n            30 * 24 * 60 * 60\n        )  # Approximate number of seconds in a month\n        max_possible_entries = (\n            seconds_in_a_month  # Assuming a minimum of 1-second increments\n        )\n        min_possible_entries = (\n            seconds_in_a_month // 10\n        )  # Assuming a maximum of 10-second increments\n        # Verify that the log has a reasonable number of entries given the time frame\n        self.assertTrue(min_possible_entries <= len(log) <= max_possible_entries)\n        self.assertTrue(\n            log[\"Time\"].min() >= datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n        )\n        self.assertTrue(log[\"Time\"].max() <= datetime.now())\n    def test_case_5(self):\n        # Test invalid start time (future)\n        epoch_milliseconds = int(\n            (datetime.now() + timedelta(days=1)).timestamp() * 1000\n        )\n        with self.assertRaises(Exception):\n            task_func(epoch_milliseconds)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the Euclidean distance between two lists, create a Pandas DataFrame from these lists with indices 'A' and 'B', and then draw the values with a line displaying the Euclidean distance.\nThe function should output with:\n    float: The computed Euclidean distance between the two lists.\n    pd.DataFrame: A DataFrame containing the two lists as columns.\n    matplotlib.axes.Axes: The generated plot's Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n```",
        "gt": "import pandas as pd\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef task_func(a, b):\n    # Calculate the Euclidean distance\n    euclidean_distance = distance.euclidean(a, b)\n\n    # Create a DataFrame\n    df = pd.DataFrame({'A': a, 'B': b})\n\n    # Plot the values\n    fig, ax = plt.subplots()\n    ax.plot(df['A'], df['B'])\n    ax.plot([df['A'].iloc[0], df['B'].iloc[0]], [df['A'].iloc[-1], df['B'].iloc[-1]], 'ro-')\n    \n    return euclidean_distance, df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        a = [1, 2, 3]\n        b = [2, 3, 4]\n        euclidean_distance, df, ax = task_func(a, b)\n        self.assertAlmostEqual(euclidean_distance, 1.732, places=3)\n        self.assertTrue('A' in df.columns)\n        self.assertTrue('B' in df.columns)\n        self.assertListEqual(df['A'].tolist(), a)\n        self.assertListEqual(df['B'].tolist(), b)\n        lines = ax.get_lines()\n        self.assertTrue(len(lines) > 0)\n    def test_case_2(self):\n        a = [1, 1, 1]\n        b = [1, 1, 1]\n        euclidean_distance, df, ax = task_func(a, b)\n        self.assertEqual(euclidean_distance, 0)\n        self.assertListEqual(df['A'].tolist(), a)\n        self.assertListEqual(df['B'].tolist(), b)\n        lines = ax.get_lines()\n        self.assertTrue(len(lines) > 0)\n    def test_case_3(self):\n        a = [0, 5, 10]\n        b = [10, 5, 0]\n        euclidean_distance, df, ax = task_func(a, b)\n        self.assertAlmostEqual(euclidean_distance, 14.142, places=3)\n        self.assertListEqual(df['A'].tolist(), a)\n        self.assertListEqual(df['B'].tolist(), b)\n        lines = ax.get_lines()\n        self.assertTrue(len(lines) > 0)\n    def test_case_4(self):\n        a = [3, 3, 3, 3]\n        b = [4, 4, 4, 4]\n        euclidean_distance, df, ax = task_func(a, b)\n        self.assertAlmostEqual(euclidean_distance, 2.0, places=3)\n        self.assertListEqual(df['A'].tolist(), a)\n        self.assertListEqual(df['B'].tolist(), b)\n        lines = ax.get_lines()\n        self.assertTrue(len(lines) > 0)\n    def test_case_5(self):\n        a = [1, 2, 3, 4, 5]\n        b = [5, 4, 3, 2, 1]\n        euclidean_distance, df, ax = task_func(a, b)\n        self.assertAlmostEqual(euclidean_distance, 6.325, places=3)\n        self.assertListEqual(df['A'].tolist(), a)\n        self.assertListEqual(df['B'].tolist(), b)\n        lines = ax.get_lines()\n        self.assertTrue(len(lines) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Searches for files within the specified directory matching a given regex pattern and computes a SHA256 hash of each file's content.\nThe function should output with:\n    dict: A dictionary with file paths as keys and their SHA256 hashes as values.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n```",
        "gt": "import binascii\nimport hashlib\nimport re\nOUTPUT_DIR = './output'\ndef task_func(directory: str, pattern: str = r\"(?<!Distillr)\\\\AcroTray\\.exe\") -> dict:\n    hashes = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                path = os.path.join(root, file)\n                with open(path, 'rb') as f:\n                    data = f.read()\n                    hash_digest = hashlib.sha256(data).digest()\n                    hashes[path] = binascii.hexlify(hash_digest).decode()\n    return hashes",
        "test": "import unittest\nimport tempfile\nimport shutil\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = OUTPUT_DIR\n        if not os.path.exists(self.test_dir):\n            os.makedirs(self.test_dir)\n        # Create a test file within the test_dir\n        self.test_file = os.path.join(self.test_dir, \"AcroTray.exe\")\n        with open(self.test_file, 'wb') as f:\n            f.write(b\"Dummy content for testing.\")\n    def tearDown(self):\n        # Clean up by removing the test directory and its contents\n        shutil.rmtree(self.test_dir, ignore_errors=True)\n    def test_matching_file(self):\n        \"\"\"Ensure the method correctly identifies and hashes a matching file.\"\"\"\n        # Use the directory, not the file path, and adjust the pattern if necessary.\n        result = task_func(self.test_dir, r\"AcroTray\\.exe$\")\n        # Verify that the file's full path is included in the results\n        self.assertIn(self.test_file, result.keys(), \"The file should be found and hashed.\")\n        # Optionally, verify the correctness of the hash value for added robustness.\n        # Compute the expected hash for comparison\n        with open(self.test_file, 'rb') as file:\n            data = file.read()\n            expected_hash = hashlib.sha256(data).hexdigest()\n        self.assertEqual(result[self.test_file], expected_hash, \"The hash value should match the expected hash.\")\n    def test_no_matching_file(self):\n        \"\"\"Test directory with no files matching the pattern.\"\"\"\n        no_match_dir = tempfile.mkdtemp()\n        self.addCleanup(shutil.rmtree, no_match_dir)  # Ensure cleanup\n        result = task_func(no_match_dir)\n        self.assertEqual(len(result), 0)\n    def test_empty_directory(self):\n        \"\"\"Test an empty directory.\"\"\"\n        empty_dir = tempfile.mkdtemp()\n        self.addCleanup(shutil.rmtree, empty_dir)  # Ensure cleanup\n        result = task_func(empty_dir)\n        self.assertEqual(len(result), 0)\n    def test_hash_correctness(self):\n        \"\"\"Verify that the SHA256 hash is correctly computed.\"\"\"\n        # Adjust the call to search within the test directory and specify a pattern that matches the test file\n        pattern = \"AcroTray\\.exe$\"  # Simplified pattern to match the filename directly\n        result = task_func(self.test_dir, pattern)\n        # Construct the expected key as it would appear in the result\n        expected_key = self.test_file\n        # Ensure the file was matched and the hash is present in the results\n        self.assertIn(expected_key, result)\n        hash_value = result[expected_key]\n        # Compute the expected hash for comparison\n        with open(self.test_file, 'rb') as f:\n            data = f.read()\n            expected_hash = hashlib.sha256(data).hexdigest()\n        self.assertEqual(hash_value, expected_hash)\n    def test_custom_pattern(self):\n        \"\"\"Test functionality with a custom pattern that does not match any file.\"\"\"\n        custom_pattern = r\"non_matching_pattern\\.exe$\"\n        result = task_func(self.test_file, custom_pattern)\n        self.assertEqual(len(result), 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze a list of employee data and calculate statistics for a given column. If the data list is empty, the sum will be 0 and mean, min, and max values will be NaN. The function also visualizes the data with a pie chart, using the Age column as labels.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the 'sum', 'mean', 'min', and 'max' of the column.\n    Axes object: The pie chart visualizing the column data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    # Constants encapsulated within the function\n    COLUMNS = [\"Age\", \"Salary\", \"Experience\"]\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n    column_data = df[column]\n\n    # Handle empty data\n    if df.empty:\n        result = {\"sum\": 0, \"mean\": np.nan, \"min\": np.nan, \"max\": np.nan}\n    else:\n        result = {\n            \"sum\": np.sum(column_data),\n            \"mean\": np.mean(column_data),\n            \"min\": np.min(column_data),\n            \"max\": np.max(column_data),\n        }\n\n    fig, ax = plt.subplots()\n    ax.pie(column_data, labels=df[\"Age\"], autopct=\"%1.1f%%\")\n    ax.set_title(f\"Pie Chart of {column}\")\n\n    return result, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Tests the 'Salary' column with normal data\n        data = [\n            [25, 50000, 2],\n            [30, 75000, 5],\n            [35, 100000, 7],\n            [40, 125000, 10],\n            [45, 150000, 12],\n        ]\n        stats, ax = task_func(\"Salary\", data)\n        self.assertEqual(\n            stats, {\"sum\": 500000, \"mean\": 100000.0, \"min\": 50000, \"max\": 150000}\n        )\n    def test_case_2(self):\n        # Tests the 'Experience' column\n        data = [\n            [26, 52000, 3],\n            [31, 76000, 6],\n            [36, 101000, 8],\n            [41, 126000, 11],\n            [46, 151000, 13],\n        ]\n        stats, ax = task_func(\"Experience\", data)\n        self.assertEqual(stats, {\"sum\": 41, \"mean\": 8.2, \"min\": 3, \"max\": 13})\n    def test_case_3(self):\n        # Tests the 'Age' column\n        data = [\n            [27, 53000, 4],\n            [32, 77000, 7],\n            [37, 102000, 9],\n            [42, 127000, 12],\n            [47, 152000, 14],\n        ]\n        stats, ax = task_func(\"Age\", data)\n        self.assertEqual(stats, {\"sum\": 185, \"mean\": 37.0, \"min\": 27, \"max\": 47})\n    def test_case_4(self):\n        # Test edge case when data is empty\n        data = []\n        stats, ax = task_func(\"Salary\", data)\n        self.assertEqual(\n            stats, {\"sum\": 0, \"mean\": np.nan, \"min\": np.nan, \"max\": np.nan}\n        )\n    def test_case_5(self):\n        # Tests with a single data entry\n        data = [[30, 75000, 5]]\n        stats, ax = task_func(\"Age\", data)\n        self.assertEqual(stats, {\"sum\": 30, \"mean\": 30.0, \"min\": 30, \"max\": 30})\n        self.assertTrue(\n            isinstance(ax, plt.Axes),\n            \"The plotting object is not an instance of matplotlib.axes._axes.Axes\",\n        )\n    def test_case_6(self):\n        # Tests handling of an invalid column name\n        data = [[25, 50000, 2], [30, 75000, 5]]\n        with self.assertRaises(KeyError):\n            task_func(\"InvalidColumn\", data)\n    def test_case_7(self):\n        # Tests that the pie chart is correctly generated for given data\n        data = [\n            [25, 50000, 2],\n            [30, 75000, 5],\n            [35, 100000, 7],\n            [40, 125000, 10],\n            [45, 150000, 12],\n        ]\n        _, ax = task_func(\"Salary\", data)\n        # Verify the number of pie slices matches the number of data points\n        self.assertEqual(\n            len(ax.patches),\n            len(data),\n            \"The number of pie slices does not match the number of data points.\",\n        )\n        # Optionally, check for the presence of labels (Ages)\n        labels = [str(age) for age, _, _ in data]  # Extracting age labels from data\n        plot_labels = [text.get_text() for text in ax.texts]\n        self.assertTrue(\n            all(label in plot_labels for label in labels),\n            \"Not all expected labels are present in the plot.\",\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a nested list of menu items, flatten the list using itertool chain, count the occurrences of each item, then plot a histogram with an alphabetically sorted x-axis labeled as \"Menu Items\" and y-axis as \"Frequency\".\nThe function should output with:\n    ax (object): An Axes object representing the histogram plot.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n```",
        "gt": "from collections import Counter\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(list_of_menuitems, title=\"Menu Distribution\", color=\"blue\", width=1.0):\n    # Flatten the list\n    flat_list = list(itertools.chain(*list_of_menuitems))\n\n    # Count the occurrences of each menu item\n    counter = Counter(flat_list)\n    labels, values = zip(*sorted(counter.items(), key=lambda x: x[0]))\n    indexes = np.arange(len(labels))\n\n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.bar(indexes, values, width, color=color)\n    ax.set_xticklabels(labels)\n    ax.set_xlabel(\"Menu Items\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(title)\n\n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        input_data = [[\"Pizza\", \"Burger\"], [\"Pizza\", \"Coke\"], [\"Pasta\", \"Coke\"]]\n        ax = task_func(input_data)\n        # Test default plot properties\n        self.assertEqual(ax.get_title(), \"Menu Distribution\")\n        self.assertEqual(ax.get_xlabel(), \"Menu Items\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        for p in ax.patches:\n            # RGBA color\n            self.assertEqual(p.get_facecolor(), (0.0, 0.0, 1.0, 1.0))\n            # bar width\n            self.assertEqual(p.get_width(), 1.0)\n    def test_case_2(self):\n        input_data = [[\"Pizza\", \"Burger\"], [\"Pizza\", \"Coke\"], [\"Pasta\", \"Coke\"]]\n        ax = task_func(input_data, title=\"Custom Title\", color=\"red\", width=0.8)\n        # Test custom plot properties\n        self.assertEqual(ax.get_title(), \"Custom Title\")\n        self.assertEqual(ax.get_xlabel(), \"Menu Items\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        for p in ax.patches:\n            # RGBA color\n            self.assertEqual(p.get_facecolor(), (1.0, 0.0, 0.0, 1.0))\n            # bar width\n            self.assertEqual(p.get_width(), 0.8)\n    def test_case_3(self):\n        input_data = [[\"Burger\"], [\"Pizza\"], [\"Pasta\"]]\n        ax = task_func(input_data)\n        # Test count\n        bars = [p.get_height() for p in ax.patches]\n        self.assertEqual(bars, [1, 1, 1])\n    def test_case_4(self):\n        input_data = [[\"Carrot\", \"Apple\"], [\"Apple\", \"Banana\"], [\"Banana\"]]\n        ax = task_func(input_data)\n        # Test x-axis order\n        self.assertEqual(\n            [_._text for _ in ax.get_xticklabels() if _._text],\n            [\"Apple\", \"Banana\", \"Carrot\"],\n        )\n    def test_case_5(self):\n        # Test input edge case: some empty elements\n        ax = task_func([[], [\"Apple\"]])\n        self.assertEqual(len(ax.patches), 1)\n        for p in ax.patches:\n            # bar width\n            self.assertEqual(p.get_width(), 1.0)\n            self.assertEqual(p.get_height(), 1)\n    def test_case_6(self):\n        with self.assertRaises(ValueError):\n            task_func([])\n        with self.assertRaises(ValueError):\n            task_func([[]])\n        with self.assertRaises(ValueError):\n            task_func(\"\")\n        with self.assertRaises(TypeError):\n            task_func(None)\n        with self.assertRaises(TypeError):\n            task_func(1)\n        with self.assertRaises(TypeError):\n            task_func([1])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Counts the occurrence of specific patterns in a string.\nThe function should raise the exception for: TypeError: If string is not a str. TypeError: If patterns is not a list of str.\nThe function should output with:\n    dict: A dictionary with patterns as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n```",
        "gt": "import re\nimport collections\ndef task_func(string, patterns=['nnn', 'aaa', 'sss', 'ddd', 'fff']):\n\n    if not isinstance(string, str):\n        raise TypeError(\"Input string should be of type string.\")\n\n    if not isinstance(patterns, list):\n        raise TypeError(\"patterns should be a list of strings.\")\n    \n    if not all(isinstance(s, str) for s in patterns):\n        raise TypeError(\"patterns should be a list of strings.\")\n\n    \n\n    pattern_counts = collections.defaultdict(int)\n\n    for pattern in patterns:\n        pattern_counts[pattern] = len(re.findall(pattern, string))\n\n    return dict(pattern_counts)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_empty_pattern(self):\n        'empty pattern'\n        result = task_func('asdf', patterns=[])\n        expected_result = {}\n        self.assertEqual(result, expected_result)\n    \n    def test_wrong_type(self):\n        'wrong input types'\n        self.assertRaises(Exception, task_func, {'string': 123})\n        self.assertRaises(Exception, task_func, {'string': ['asdf']})\n        self.assertRaises(Exception, task_func, {'string': {'a': 3}})\n        self.assertRaises(Exception, task_func, {'string': ['test'], 'patterns': 3})\n        self.assertRaises(Exception, task_func, {'string': ['test'], 'patterns': ['3', 1]})\n    def test_case_1(self):\n        result = task_func(\"nnnaaaasssdddeeefffggg\")\n        expected_result = {'nnn': 1, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n        self.assertEqual(result, expected_result)\n    \n    def test_case_2(self):\n        result = task_func(\"\")\n        expected_result = {'nnn': 0, 'aaa': 0, 'sss': 0, 'ddd': 0, 'fff': 0}\n        self.assertEqual(result, expected_result)\n    \n    def test_case_3(self):\n        result = task_func(\"xyz\")\n        expected_result = {'nnn': 0, 'aaa': 0, 'sss': 0, 'ddd': 0, 'fff': 0}\n        self.assertEqual(result, expected_result)\n    \n    def test_case_4(self):\n        result = task_func(\"nnnaaannnsssdddfffnnn\")\n        expected_result = {'nnn': 3, 'aaa': 1, 'sss': 1, 'ddd': 1, 'fff': 1}\n        self.assertEqual(result, expected_result)\n    \n    def test_case_5(self):\n        result = task_func(\"xxxyyyzzz\", patterns=['xxx', 'yyy', 'zzz', 'aaa'])\n        expected_result = {'xxx': 1, 'yyy': 1, 'zzz': 1, 'aaa': 0}\n        self.assertEqual(result, expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the N most common words in a text after removing URLs.\nNote that: Valid url is start with http or https\nThe function should output with:\n    list: A list of tuples where each tuple contains a word and its frequency.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\ndef task_func(text, top_n):\n```",
        "gt": "import re\nfrom collections import Counter\ndef task_func(text, top_n):\n    # Remove URLs\n    text = re.sub('http[s]?://\\S+', '', text)\n\n    # Tokenize the text using regex (improved tokenization)\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count the frequency of each word\n    word_freq = Counter(words)\n\n    return word_freq.most_common(top_n)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('Python is great. I love Python.', 2)\n        expected = [('Python', 2), ('is', 1)]\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        result = task_func('Visit https://www.python.org for more info. Python is great. I love Python.', 2)\n        expected = [('Python', 2), ('Visit', 1)]\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        text = 'Visit https://www.python.org and http://www.example.com. Python \u00e9 \u00f3timo! Adoro Python!'\n        result = task_func(text, 2)\n        expected = [('Python', 2), ('Visit', 1)]\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        result = task_func('', 2)\n        expected = []\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        result = task_func('Hello, world! How are you?', 2)\n        expected = [('Hello', 1), ('world', 1)]\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Unzips a list of tuples and calculates the mean of the numeric values for each position. The function accepts a list of tuples, where each tuple consists of alphanumeric values. It unzips the tuples, and calculates the mean of numeric values at each position using numpy, where non numeric values are ignores. If all values at a position are non numeric, the mean at this position is set to be np.nan. If the provided tuples have different number of entries, missing values are treated as zeros.\nThe function should output with:\n    list: A list of mean values for each numeric position across the tuples. Non-numeric positions are ignored.\n    An empty list is returned if the input list (data_list) is empty.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(data_list):\n```",
        "gt": "import numpy as np\nimport itertools\ndef task_func(data_list):\n    # Unzip the data while handling uneven tuple lengths by filling missing values with NaN\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n\n    # Calculate the mean of numeric values, ignoring non-numeric ones\n    mean_values = [np.nanmean([val for val in column if isinstance(val, (int, float))]) for column in unzipped_data]\n\n    return mean_values",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_regular_input(self):\n        # Test with regular input data\n        data_list = [('a', 1, 2), ('b', 2, 3), ('c', 3, 4), ('d', 4, 5), ('e', 5, 6)]\n        expected_result = [np.nan, 3.0, 4.0]  # Expected mean values\n        result = task_func(data_list)\n        np.testing.assert_almost_equal(result, expected_result)\n    def test_non_numeric_values(self):\n        # Test with non-numeric values in the tuples\n        data_list = [('a', 'x', 2), ('b', 2, 3), ('c', 'y', 4), ('d', 4, 'z'), ('e', 'k', 6)]\n        expected_result = [np.nan, 3.0, 3.75]  # Expected mean values, non-numeric items are ignored\n        result = task_func(data_list)\n        np.testing.assert_equal(result, expected_result)\n    def test_uneven_tuples(self):\n        # Test with uneven tuple lengths\n        data_list = [('a', 1), ('b', 2, 3), ('c',), ('d', 4, 5, 6), ('e', 5, 6)]\n        expected_result = [np.nan, 3.0, 4.66666666, 6.0]  # Expected mean values\n        result = task_func(data_list)\n        np.testing.assert_almost_equal(result, expected_result)\n    def test_all_non_numeric(self):\n        # Test where all elements are non-numeric\n        data_list = [('a', 'x'), ('b', 'y'), ('c', 'z'), ('d', 'k'), ('e', 'l')]\n        expected_result = [np.nan, np.nan]  # No numeric data to calculate the mean\n        result = task_func(data_list)\n        np.testing.assert_equal(result, expected_result)\n    def test_empty_input(self):\n        # Test with an empty input list\n        data_list = []\n        expected_result = []  # No data to process\n        result = task_func(data_list)\n        self.assertEqual(result, expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random array and apply min-max normalization (scaling) to transform the array values into a range between 0 and 1.\nThe function should output with:\n    scaled_array (numpy.ndarray): The normalized array.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nARRAY_LENGTH = 10\ndef task_func():\n```",
        "gt": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nARRAY_LENGTH = 10\ndef task_func():\n    np.random.seed(42)  # For reproducibility, as shown in your example\n    array = np.random.randint(0, 10, ARRAY_LENGTH).reshape(-1, 1)\n    scaler = MinMaxScaler()\n    scaled_array = scaler.fit_transform(array)\n    return scaled_array",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.result = task_func()  # Call the function once to use in multiple tests if needed\n    def test_normal_functionality(self):\n        \"\"\"Testing the basic functionality and shape of the output array.\"\"\"\n        self.assertEqual(self.result.shape, (10, 1), \"Array shape should be (10, 1)\")\n        self.assertTrue((self.result >= 0).all() and (self.result <= 1).all(), \"Array values should be in the range [0, 1]\")\n    def test_output_values(self):\n        \"\"\" Ensuring that the scaling works as expected. \"\"\"\n        expected_min = 0\n        expected_max = 1\n        actual_min = np.min(self.result)\n        actual_max = np.max(self.result)\n        self.assertEqual(actual_min, expected_min, \"The minimum of the scaled array should be 0\")\n        self.assertAlmostEqual(actual_max, expected_max, places=15, msg=\"The maximum of the scaled array should be very close to 1\")\n    def test_no_arguments(self):\n        \"\"\"Ensure that no arguments are passed to the function.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func(10)  # This should fail since the function expects no arguments\n    def test_unchanging_output(self):\n        \"\"\"Test if multiple calls to the function give the same result due to seed setting.\"\"\"\n        second_result = task_func()\n        np.testing.assert_array_equal(self.result, second_result, \"Results should be the same on every call due to fixed seed.\")\n    def test_distribution_of_values(self):\n        \"\"\"Test that the distribution of scaled values is neither constant nor degenerate (not all values the same).\"\"\"\n        unique_values = np.unique(self.result)\n        self.assertTrue(len(unique_values) > 1, \"There should be more than one unique scaled value to confirm distribution.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random poker hand consisting of five cards, and count the frequency of each card rank. The function creates a list of five cards where each card is a string made up of a rank and a suit (e.g., \"10H\" for Ten of Hearts). It then counts the frequency of each card rank in the hand using a Counter dictionary.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    hand (list): A list of five cards.\n    rank_count (counter): A Counter dictionary of card ranks with their frequencies in the hand.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\n# Constants\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n```",
        "gt": "from collections import Counter\nimport random\n# Constants\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\ndef task_func():\n\n    hand = []\n    for _ in range(5):\n        rank = random.choice(HAND_RANKS)\n        suit = random.choice(SUITS)\n        card = f'{rank}{suit}'\n        hand.append(card)\n\n    rank_counts = Counter([card[:-1] for card in hand])\n\n    return hand, rank_counts",
        "test": "import unittest\nfrom collections import Counter\nHAND_RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\nSUITS = ['H', 'D', 'C', 'S']\nclass TestCases(unittest.TestCase):\n    def setUp(self) -> None:\n        random.seed(42)\n    def test_poker_hand_length(self):\n        \"\"\"Test if the poker hand has 5 cards.\"\"\"\n        hand, rank_counts = task_func()\n        self.assertEqual(len(hand), 5, \"The poker hand should contain 5 cards.\")\n    def test_card_format(self):\n        \"\"\"Test if each card in the hand is formatted correctly.\"\"\"\n        hand, rank_counts = task_func()\n        for card in hand:\n            self.assertIn(len(card), [2, 3],\n                          \"Each card should be a string of length 2 or 3.\")\n            self.assertIn(card[:-1], HAND_RANKS,\n                          \"The rank of each card should be valid.\")\n            self.assertIn(card[-1], SUITS, \"The suit of each card should be valid.\")\n    def test_rank_counts_type(self):\n        \"\"\"Test if rank_counts is of type Counter.\"\"\"\n        hand, rank_counts = task_func()\n        self.assertIsInstance(rank_counts, Counter,\n                              \"rank_counts should be a Counter dictionary.\")\n    def test_rank_counts_keys(self):\n        \"\"\"Test if the keys of rank_counts are valid ranks.\"\"\"\n        hand, rank_counts = task_func()\n        for rank in rank_counts.keys():\n            self.assertIn(rank, HAND_RANKS, \"The ranks in rank_counts should be valid.\")\n    def test_rank_counts_values(self):\n        \"\"\"Test if the values of rank_counts are integers.\"\"\"\n        hand, rank_counts = task_func()\n        for count in rank_counts.values():\n            self.assertIsInstance(count, int,\n                                  \"The counts in rank_counts should be integers.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads a JSON file, extracts a value specified by an 'unknown_key' within a nested structure, hashes this value using SHA256, and writes the base64-encoded hash to a new file with a timestamp in its name. The JSON should contain a specific structure where the value to be hashed is under 'A' -> [unknown_key] -> 'maindata' -> [index 0] -> 'Info'.\nThe function should output with:\n    str: The absolute file path of the newly created file containing the hashed value.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n```",
        "gt": "import json\nimport os\nimport hashlib\nimport base64\nimport time\ndef task_func(file_path, unknown_key):\n    with open(file_path, 'r') as f:\n        data = json.load(f)\n    \n    value = data['A'][unknown_key][\"maindata\"][0][\"Info\"]\n    hashed_value = hashlib.sha256(value.encode()).digest()\n    hashed_str = base64.b64encode(hashed_value).decode()\n\n    new_file_name = f\"{unknown_key}_hashed_{int(time.time())}.txt\"\n    new_file_path = os.path.join(os.getcwd(), new_file_name)\n\n    with open(new_file_path, 'w') as f:\n        f.write(hashed_str)\n\n    return new_file_path",
        "test": "import unittest\nimport os\nimport json\nimport hashlib\nimport base64\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup temporary directory for tests\n        self.temp_dir = tempfile.mkdtemp()\n        # Create sample JSON data for the tests\n        self.path_1 = os.path.join(self.temp_dir, 'test1.json')\n        self.path_2 = os.path.join(self.temp_dir, 'test2.json')\n        sample_data_1 = {\n            'A': {\n                'B': {\n                    'maindata': [{'Info': 'hello world'}],\n                },\n                'C': {\n                    'maindata': [{'Info': 'goodbye world'}],\n                }\n            }\n        }\n        sample_data_2 = {\n            'A': {\n                'D': {\n                    'maindata': [{'Info': 'another world'}],\n                },\n                'E': {\n                    'maindata': [{'Info': 'yet another world'}],\n                }\n            }\n        }\n        # Write sample data to files\n        with open(self.path_1, 'w') as f:\n            json.dump(sample_data_1, f)\n        with open(self.path_2, 'w') as f:\n            json.dump(sample_data_2, f)\n    def tearDown(self):\n        # Clean up the temporary directory\n        os.remove(self.path_1)\n        os.remove(self.path_2)\n        os.rmdir(self.temp_dir)\n    def test_hash_length_for_key_B(self):\n        # Check the length of the base64-encoded SHA-256 hash for key B\n        result = task_func(self.path_1, 'B')\n        self.assertTrue(os.path.exists(result))\n        with open(result, 'r') as f:\n            hashed_value = f.read()\n        self.assertEqual(len(hashed_value), 44)\n        os.remove(result)\n    def test_hash_length_for_key_C(self):\n        # Check the length of the base64-encoded SHA-256 hash for key C\n        result = task_func(self.path_1, 'C')\n        self.assertTrue(os.path.exists(result))\n        with open(result, 'r') as f:\n            hashed_value = f.read()\n        self.assertEqual(len(hashed_value), 44)\n        os.remove(result)\n    def test_hash_length_for_key_D(self):\n        # Check the length of the base64-encoded SHA-256 hash for key D\n        result = task_func(self.path_2, 'D')\n        self.assertTrue(os.path.exists(result))\n        with open(result, 'r') as f:\n            hashed_value = f.read()\n        self.assertEqual(len(hashed_value), 44)\n        os.remove(result)\n    def test_hash_length_for_key_E(self):\n        # Check the length of the base64-encoded SHA-256 hash for key E\n        result = task_func(self.path_2, 'E')\n        self.assertTrue(os.path.exists(result))\n        with open(result, 'r') as f:\n            hashed_value = f.read()\n        self.assertEqual(len(hashed_value), 44)\n        os.remove(result)\n    def test_hash_value_for_key_B(self):\n        # Verify the hash value for key B is correctly computed and encoded\n        result = task_func(self.path_1, 'B')\n        expected_info = 'hello world'\n        expected_hash = hashlib.sha256(expected_info.encode()).digest()\n        expected_base64 = base64.b64encode(expected_hash).decode()\n        with open(result, 'r') as f:\n            hashed_value = f.read()\n        self.assertEqual(hashed_value, expected_base64)\n        os.remove(result)\n    def test_hash_value_for_key_C(self):\n        # Verify the hash value for key C is correctly computed and encoded\n        result = task_func(self.path_1, 'C')\n        expected_info = 'goodbye world'\n        expected_hash = hashlib.sha256(expected_info.encode()).digest()\n        expected_base64 = base64.b64encode(expected_hash).decode()\n        with open(result, 'r') as f:\n            hashed_value = f.read()\n        self.assertEqual(hashed_value, expected_base64)\n        os.remove(result)\n    def test_invalid_key_error(self):\n        # Test handling of invalid key\n        with self.assertRaises(KeyError):\n            task_func(self.path_1, 'Z')\n# Define this function only if needed to run tests manually",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a grade report for a list of students across various subjects. Each student's grades are randomly generated, and the report includes the average grade for each student. The randomness is seeded for reproducibility if a seed is provided.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing each student's grades across the subjects and their average grade.\n    Columns are ['Student', 'Subject1', 'Subject2', ..., 'Average Grade'].\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n```",
        "gt": "import pandas as pd\nimport statistics\nimport random\ndef task_func(students, subjects, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    report_data = []\n\n    for student in students:\n        grades = [random.randint(0, 100) for _ in subjects]\n        avg_grade = statistics.mean(grades)\n        report_data.append((student,) + tuple(grades) + (avg_grade,))\n\n    report_df = pd.DataFrame(report_data, columns=['Student'] + subjects + ['Average Grade'])\n\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_dataframe_structure(self):\n        students = ['Alice', 'Bob']\n        subjects = ['Math', 'Physics']\n        report = task_func(students, subjects, seed=42)\n        \n        # Check if the output is a DataFrame\n        self.assertIsInstance(report, pd.DataFrame)\n        \n        # Check the structure of the DataFrame\n        expected_columns = ['Student'] + subjects + ['Average Grade']\n        self.assertEqual(list(report.columns), expected_columns)\n    def test_average_grade_calculation(self):\n        students = ['Alice']\n        subjects = ['Math', 'Physics']\n        report = task_func(students, subjects, seed=42)\n        # Since we know the seed, we know the grades. Let's check the average.\n        alice_grades = report.iloc[0, 1:-1]\n        self.assertEqual(report.at[0, 'Average Grade'], alice_grades.mean())\n    def test_varying_input_sizes(self):\n        # Testing with different numbers of students and subjects\n        students = ['Alice', 'Bob', 'Charlie']\n        subjects = ['Math', 'Physics', 'Biology', 'English']\n        report = task_func(students, subjects, seed=42)\n        # Check if the number of rows matches the number of students\n        self.assertEqual(len(report), len(students))\n    def test_random_seed_reproducibility(self):\n        students = ['Alice', 'Bob']\n        subjects = ['Math', 'Physics']\n        \n        # If we run the function with the same seed, we should get the same results.\n        report1 = task_func(students, subjects, seed=42)\n        report2 = task_func(students, subjects, seed=42)\n        pd.testing.assert_frame_equal(report1, report2)\n    def test_without_seed(self):\n        students = ['Alice', 'Bob']\n        subjects = ['Math', 'Physics']\n        \n        # When run without a seed, there should be variability in results.\n        report1 = task_func(students, subjects)  # No seed here\n        report2 = task_func(students, subjects)  # No seed here\n        with self.assertRaises(AssertionError):\n            pd.testing.assert_frame_equal(report1, report2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw histograms of numeric columns in a DataFrame and return the plots. Each histogram represents the distribution of values in one numeric column, with the column name as the plot title, 'Value' as the x-axis label, and 'Frequency' as the y-axis label.\nThe function should raise the exception for: ValueError: If the input is not a non-empty DataFrame or if there are no numeric columns in the DataFrame.\nThe function should output with:\n    list: A list of Matplotlib Axes objects, each representing a histogram for a numeric column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"The input must be a non-empty pandas DataFrame.\")\n\n    numeric_cols = df.select_dtypes(include=np.number).columns\n    if not numeric_cols.size:\n        raise ValueError(\"DataFrame contains no numeric columns.\")\n\n    axes = []\n    for col in numeric_cols:\n        fig, ax = plt.subplots()\n        df[col].plot(kind='hist', title=col, ax=ax)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n\n    return axes",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)  # Set seed for reproducibility\n        self.df = pd.DataFrame({\n            'A': np.random.normal(0, 1, 1000),\n            'B': np.random.exponential(1, 1000),\n            'C': ['text'] * 1000  # Non-numeric column\n        })\n    def test_return_type(self):\n        axes = task_func(self.df)\n        for ax in axes:\n            self.assertIsInstance(ax, plt.Axes)\n    def test_invalid_input_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_invalid_input_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_no_numeric_columns(self):\n        df = pd.DataFrame({'C': ['text'] * 1000})\n        with self.assertRaises(ValueError):\n            task_func(df)\n    def test_histograms_count(self):\n        axes = task_func(self.df)\n        self.assertEqual(len(axes), 2)  # 'A' and 'B' are numeric\n    def test_plot_labels(self):\n        axes = task_func(self.df)\n        for ax in axes:\n            self.assertIn('Value', ax.get_xlabel())\n            self.assertIn('Frequency', ax.get_ylabel())\n            \n    def test_correctness_of_histogram_lines(self):\n        \"\"\"Verify that the histogram reflects the data distribution accurately.\"\"\"\n        axes = task_func(self.df)\n        for ax in axes:\n            column_name = ax.get_title()\n            column_data = self.df[column_name]\n            \n            # Correcting the calculation of hist_max to ensure the lambda function correctly references its parameter\n            hist_min = min(ax.patches, key=lambda patch: patch.get_x()).get_x()\n            hist_max = max(ax.patches, key=lambda patch: patch.get_x() + patch.get_width()).get_x() + max(ax.patches, key=lambda patch: patch.get_x() + patch.get_width()).get_width()\n            data_min, data_max = column_data.min(), column_data.max()\n            self.assertAlmostEqual(hist_min, data_min, delta=0.01, msg=f\"Histogram min for {column_name} does not match\")\n            self.assertAlmostEqual(hist_max, data_max, delta=0.01, msg=f\"Histogram max for {column_name} does not match\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw and return a subplot of a normal distribution with the given mean and standard deviation, utilizing numpy's linspace to create an array of 100 linearly spaced numbers between `mu - 3*sigma` and `mu + 3*sigma`.\nThe function should output with:\n    matplotlib.axes.Axes: The subplot representing the normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(mu=0, sigma=1):\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test default parameters\n        ax = task_func()\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        self.assertAlmostEqual(x[np.argmax(y)], 0, delta=0.1)\n        self.assertTrue(min(x) >= -3 and max(x) <= 3)\n    def test_case_2(self):\n        # Test positive mu and sigma with manual calculation\n        ax = task_func(mu=5, sigma=2)\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        expected_min, expected_max = 5 - 3 * 2, 5 + 3 * 2\n        self.assertAlmostEqual(min(x), expected_min, delta=0.1)\n        self.assertAlmostEqual(max(x), expected_max, delta=0.1)\n    def test_case_3(self):\n        # Test negative mu and small sigma\n        ax = task_func(mu=-3, sigma=0.5)\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        self.assertAlmostEqual(x[np.argmax(y)], -3, delta=0.1)\n        self.assertTrue(min(x) >= -3 - 1.5 and max(x) <= -3 + 1.5)\n    def test_case_4(self):\n        # Test large mu and sigma\n        mu, sigma = 1e6, 1e5\n        ax = task_func(mu=mu, sigma=sigma)\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        self.assertTrue(\n            len(x) > 0 and len(y) > 0,\n            \"Plot data should not be empty even for large mu and sigma.\",\n        )\n    def test_case_5(self):\n        # Test negative mu\n        ax = task_func(mu=-5, sigma=4)\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        self.assertAlmostEqual(x[np.argmax(y)], -5, delta=0.15)\n        self.assertTrue(min(x) >= -5 - 12 and max(x) <= -5 + 12)\n    def test_case_6(self):\n        # Test the function with a sigma of 0, which might represent a degenerate distribution\n        ax = task_func(mu=0, sigma=0)\n        lines = ax.get_lines()\n        self.assertEqual(\n            len(lines),\n            1,\n            \"Plot should contain exactly one line for a degenerate distribution.\",\n        )\n    def test_case_7(self):\n        # Test the function with extremely large values of mu and sigma to ensure it doesn't break\n        ax = task_func(mu=1e6, sigma=1e5)\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        self.assertTrue(\n            len(x) > 0 and len(y) > 0,\n            \"Plot data should not be empty even for large mu and sigma.\",\n        )\n    def test_case_8(self):\n        # Test the function with a very small positive sigma to check narrow distributions\n        ax = task_func(mu=0, sigma=1e-5)\n        lines = ax.get_lines()\n        x, y = lines[0].get_data()\n        # Checking that the plot peak is at mu and sigma affects the curve's spread.\n        self.assertAlmostEqual(\n            x[np.argmax(y)],\n            0,\n            delta=1e-5,\n            msg=\"Peak of the distribution should be at mu.\",\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract data from a text and create a Pandas DataFrame. The text contains several lines, each formatted as 'Score: 85, Category: Math'. Make sure to convert the scores in integer.\nThe function should output with:\n    DataFrame: A pandas DataFrame with extracted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\ndef task_func(text):\n```",
        "gt": "import pandas as pd\nimport regex as re\ndef task_func(text):\n    pattern = r\"Score: (.*?), Category: (.*?)(\\n|$)\"\n    matches = re.findall(pattern, text)\n    data = [\n        match[:2] for match in matches\n    ]  # Extracting only the score and category from each match\n    df = pd.DataFrame(data, columns=[\"Score\", \"Category\"])\n    df[\"Score\"] = df[\"Score\"].astype(int)\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        text = \"Score: 85, Category: Math\\nScore: 90, Category: Science\\nScore: 80, Category: Math\"\n        df = task_func(text)\n        self.assertEqual(len(df), 3)\n        self.assertEqual(df[\"Score\"].iloc[0], 85)\n        self.assertEqual(df[\"Category\"].iloc[0], \"Math\")\n        self.assertEqual(df[\"Score\"].iloc[1], 90)\n        self.assertEqual(df[\"Category\"].iloc[1], \"Science\")\n        self.assertEqual(df[\"Score\"].iloc[2], 80)\n        self.assertEqual(df[\"Category\"].iloc[2], \"Math\")\n    def test_case_2(self):\n        text = \"Score: 70, Category: History\"\n        df = task_func(text)\n        self.assertEqual(len(df), 1)\n        self.assertEqual(df[\"Score\"].iloc[0], 70)\n        self.assertEqual(df[\"Category\"].iloc[0], \"History\")\n    def test_case_3(self):\n        text = \"\"  # Empty string\n        df = task_func(text)\n        self.assertEqual(len(df), 0)  # Expecting an empty DataFrame\n    def test_case_4(self):\n        text = \"Score: 70, Category: Chemistry\"\n        df = task_func(text)\n        self.assertEqual(len(df), 1)\n        self.assertEqual(df[\"Score\"].iloc[0], 70)\n        self.assertEqual(df[\"Category\"].iloc[0], \"Chemistry\")\n    def test_case_5(self):\n        text = \"Score: 70, Category: Literature\\nScore: 37, Category: Mathematics\\nScore: 90, Category: Japanese\\nScore: 58, Category: Machine Learning\"\n        df = task_func(text)\n        self.assertEqual(len(df), 4)\n        self.assertEqual(df[\"Score\"].iloc[0], 70)\n        self.assertEqual(df[\"Category\"].iloc[0], \"Literature\")\n        self.assertEqual(df[\"Score\"].iloc[1], 37)\n        self.assertEqual(df[\"Category\"].iloc[1], \"Mathematics\")\n        self.assertEqual(df[\"Score\"].iloc[2], 90)\n        self.assertEqual(df[\"Category\"].iloc[2], \"Japanese\")\n        self.assertEqual(df[\"Score\"].iloc[3], 58)\n        self.assertEqual(df[\"Category\"].iloc[3], \"Machine Learning\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function calculates and returns the mean, median, mode, and variance for specified features in a DataFrame. It replaces certain values in the DataFrame based on a provided dictionary mapping before performing the calculations.\nNote that: The function would return \"Invalid input\" string if the input is invalid (e.g., does not contain the required 'feature1' key) or if there is an error in the calculation.\nThe function should output with:\n    dict: A dictionary containing statistics (mean, median, mode, variance) for each feature defined in the 'FEATURES' constant.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\ndef task_func(df, dct):\n\n    # Replace values using dictionary mapping\n    df = df.replace(dct)\n    \n    statistics = {}\n    try:\n        for feature in FEATURES:\n            # Calculate statistics\n            mean = np.mean(df[feature])\n            median = np.median(df[feature])\n            mode = stats.mode(df[feature])[0][0]\n            variance = np.var(df[feature])\n            \n            # Store statistics in dictionary\n            statistics[feature] = {'mean': mean, 'median': median, 'mode': mode, 'variance': variance}\n    except Exception as e:\n        return \"Invalid input\"        \n    return statistics",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with simple numeric values\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [5, 4, 3, 2, 1],\n            'feature3': [2, 2, 2, 2, 2],\n            'feature4': [1, 1, 3, 3, 5],\n            'feature5': [0, 1, 1, 1, 1]\n        })\n        dct = {}\n        \n        expected_result = {\n            'feature1': {'mean': 3.0, 'median': 3.0, 'mode': 1, 'variance': 2.0}, \n            'feature2': {'mean': 3.0, 'median': 3.0, 'mode': 1, 'variance': 2.0}, \n            'feature3': {'mean': 2.0, 'median': 2.0, 'mode': 2, 'variance': 0.0}, \n            'feature4': {'mean': 2.6, 'median': 3.0, 'mode': 1, 'variance': 2.24}, \n            'feature5': {'mean': 0.8, 'median': 1.0, 'mode': 1, 'variance': 0.16000000000000006},\n        }\n        result = task_func(df, dct)\n        self.assertEqual(result, expected_result)\n    def test_case_2(self):\n        # Test with string replacements\n        df = pd.DataFrame({\n            'feature1': ['a', 'b', 'a', 'a', 'c'],\n            'feature2': ['d', 'e', 'd', 'f', 'g'],\n            'feature3': ['h', 'i', 'j', 'k', 'l'],\n            'feature4': ['m', 'n', 'o', 'p', 'q'],\n            'feature5': ['r', 's', 't', 'u', 'v']\n        })\n        dct = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22}\n        \n        expected_result = {\n            'feature1': {'mean': 1.6, 'median': 1.0, 'mode': 1, 'variance': 0.64}, \n            'feature2': {'mean': 5.2, 'median': 5.0, 'mode': 4, 'variance': 1.3599999999999999},\n            'feature3': {'mean': 10.0, 'median': 10.0, 'mode': 8, 'variance': 2.0}, \n            'feature4': {'mean': 15.0, 'median': 15.0, 'mode': 13, 'variance': 2.0}, \n            'feature5': {'mean': 20.0, 'median': 20.0, 'mode': 18, 'variance': 2.0}\n        }\n        result = task_func(df, dct)\n        self.assertEqual(result, expected_result)\n    def test_case_3(self):\n        # Test with missing features in DataFrame\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3],\n            'feature2': [2, 3, 1],\n            'feature3': [4, 5, 6],\n            'feature4': [5, 6, 7],\n            'feature5': [7, 8, 9]\n        })\n        dct = {}\n        expected_result = {\n            'feature1': {'mean': 2.0, 'median': 2.0, 'mode': 1, 'variance': 0.6666666666666666}, \n            'feature2': {'mean': 2.0, 'median': 2.0, 'mode': 1, 'variance': 0.6666666666666666}, \n            'feature3': {'mean': 5.0, 'median': 5.0, 'mode': 4, 'variance': 0.6666666666666666}, \n            'feature4': {'mean': 6.0, 'median': 6.0, 'mode': 5, 'variance': 0.6666666666666666}, \n            'feature5': {'mean': 8.0, 'median': 8.0, 'mode': 7, 'variance': 0.6666666666666666}\n        }\n        result = task_func(df, dct)\n        self.assertEqual(result, expected_result)\n    def test_case_4(self):\n        # Test with string replacements\n        df = pd.DataFrame({\n            'feature1': ['a', 'b', 'c'],\n            'feature2': ['d', 'e', 'f'],\n            'feature3': ['h', 'i', 'j'],\n            'feature4': ['m', 'n', 'o'],\n            'feature5': ['r', 's', 't']\n        })\n        dct = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22}\n        \n        expected_result = {\n            'feature1': {'mean': 2.0, 'median': 2.0, 'mode': 1, 'variance': 0.6666666666666666}, \n            'feature2': {'mean': 5.0, 'median': 5.0, 'mode': 4, 'variance': 0.6666666666666666}, \n            'feature3': {'mean': 9.0, 'median': 9.0, 'mode': 8, 'variance': 0.6666666666666666}, \n            'feature4': {'mean': 14.0, 'median': 14.0, 'mode': 13, 'variance': 0.6666666666666666}, \n            'feature5': {'mean': 19.0, 'median': 19.0, 'mode': 18, 'variance': 0.6666666666666666}\n        }\n        result = task_func(df, dct)\n        self.assertEqual(result, expected_result)\n    \n    def test_case_5(self):\n        # Test with invalid input\n        df = pd.DataFrame({})\n        result = task_func(df, {})\n        self.assertEqual(result, \"Invalid input\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Run all Python codes in a specific directory and return their execution times.\nThe function should output with:\n    dict: A dictionary with the script names as keys and their execution times as values.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n```",
        "gt": "import subprocess\nimport os\nimport glob\nimport time\ndef task_func(test_dir):\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n\n    return execution_times",
        "test": "import unittest\nimport os\nimport glob\nimport time\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'testdir_task_func/'\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.sample_directory = 'testdir_task_func/sample_directory'\n        os.makedirs(self.sample_directory, exist_ok=True)\n        f = open(self.sample_directory+\"/script1.py\",\"w\")\n        f.write(\"a <- 42/nA <- a * 2/nprint(a)\")\n        f.close()\n        f = open(self.sample_directory+\"/script2.py\",\"w\")\n        f.write(\"a <- 42/nA <- a * 2/nprint(a)/nprint(A)\")\n        f.close()\n        f = open(self.sample_directory+\"/script3.py\",\"w\")\n        f.write(\"a <- 42/nA <- a * 2/nprint(A)\")\n        f.close()\n        self.empty_directory = \"testdir_task_func/empty_directory\"\n        os.makedirs(self.empty_directory, exist_ok=True)\n        self.mixed_directory = \"testdir_task_func/mixed_directory\"\n        os.makedirs(self.mixed_directory, exist_ok=True)\n        f = open(self.mixed_directory+\"/1.txt\",\"w\")\n        f.write(\"invalid\")\n        f.close()\n        f = open(self.mixed_directory+\"/script4.py\",\"w\")\n        f.write(\"print('Hello from script4')\")\n        f.close()\n        self.invalid_directory = \"testdir_task_func/invalid_directory\"\n        os.makedirs(self.invalid_directory, exist_ok=True)\n        f = open(self.invalid_directory+\"/1.txt\",\"w\")\n        f.write(\"invalid\")\n        f.close()\n        \n    def tearDown(self):\n        # Clean up the test directory\n        shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Testing with the created R scripts directory\n        result = task_func(self.sample_directory)\n        self.assertEqual(len(result), 3)  # There are 3 R scripts\n        self.assertTrue(\"script1.py\" in result)\n        self.assertTrue(\"script2.py\" in result)\n        self.assertTrue(\"script3.py\" in result)\n        for time_taken in result.values():\n            self.assertTrue(time_taken >= 0)  # Execution time should be non-negative\n    def test_case_2(self):\n        # Testing with a non-existent directory (should return an empty dictionary)\n        result = task_func(\"/non/existent/path/\")\n        self.assertEqual(result, {})\n    def test_case_3(self):\n        # Testing with a directory that has no Python scripts (should return an empty dictionary)\n        empty_dir = self.empty_directory\n        os.makedirs(empty_dir, exist_ok=True)\n        result = task_func(empty_dir)\n        self.assertEqual(result, {})\n    def test_case_4(self):\n        # Testing with a directory containing other types of files (should return an empty dictionary)\n        other_files_dir = self.invalid_directory\n        result = task_func(other_files_dir)\n        self.assertEqual(result, {})\n    def test_case_5(self):\n        # Testing with a directory containing a mix of Python scripts and other files\n        mix_files_dir = self.mixed_directory\n        result = task_func(mix_files_dir)\n        self.assertEqual(len(result), 1)  # Only 1 Python script\n        self.assertTrue(\"script4.py\" in result)\n        for time_taken in result.values():\n            self.assertTrue(time_taken >= 0)  # Execution time should be non-negative",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a CSV file containing text data and generates a histogram of the ten most common words. This function reads a CSV file, which is expected to contain a single column of text data. It then splits the text into words and creates a histogram of the frequency of the top ten most common words, excluding a predefined set of stopwords. The resulting histogram can be either displayed on the screen or saved to a file. The CSV file should have a single column with the header 'Text'. Each row under this column should contain a text string. If the CSV file does not have a header, the first column is assumed to be the text data.\nNote that: Notes: The function uses pandas for data manipulation, sklearn's CountVectorizer for text vectorization, and matplotlib for plotting. A predefined list of stopwords is used to filter out common but insignificant words from the histogram.\nThe function should raise the exception for: FileNotFoundError: If the specified file_path does not exist. It raises a FileNotFoundError with a message indicating the file path that was not found. Exception: For any other errors that occur during the function execution. In this case, the error is printed to the console, and None is returned.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot if save_path is not provided.\n    Useful for further customization or display in notebooks.\n    None: If save_path is provided, the plot is saved to the specified path,\n    and the function returns None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    try:\n        # Reading the CSV file into a DataFrame\n        df = pd.read_csv(file_path, usecols=[0], names=[\"Text\"], header=None)\n\n        # Vectorizing the text\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        word_count = vectorizer.fit_transform(df[\"Text\"].dropna())\n\n        # Calculating word frequency\n        sum_words = word_count.sum(axis=0)\n        words_freq = [\n            (word, sum_words[0, idx]) for word, idx in vectorizer.vocabulary_.items()\n        ]\n        words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)\n\n        # Preparing data for the top 10 words\n        top_words = words_freq[:10]\n        df_top = pd.DataFrame(top_words, columns=[\"Word\", \"Count\"])\n\n        # Plotting\n        ax = df_top.plot.bar(x=\"Word\", y=\"Count\", rot=0, legend=False)\n\n        # Saving or displaying the plot\n        if save_path:\n            plt.savefig(save_path)\n            plt.close()\n\n        return None if save_path else ax\n\n    except FileNotFoundError as exc:\n        raise FileNotFoundError(f\"File not found: {file_path}\") from exc\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None",
        "test": "import unittest\nfrom unittest.mock import patch\nimport matplotlib.pyplot as plt\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def tearDown(self):\n        \"\"\"Clean up by removing files created during tests.\"\"\"\n        plt.close()\n        if os.path.exists(\"test_output.png\"):\n            os.remove(\"test_output.png\")\n    @patch(\"pandas.read_csv\")\n    def test_display_plot(self, mock_read_csv):\n        \"\"\"\n        Test if the function displays a plot correctly when no save path is provided.\n        \"\"\"\n        # Mock data\n        mock_read_csv.return_value = pd.DataFrame(\n            {\"Text\": [\"word1 word2 word3\", \"word2 word3 word4\"]}\n        )\n        # Test\n        result = task_func(\"dummy_path.csv\")\n        print(result)\n        self.assertIsNotNone(result)\n    @patch(\"pandas.read_csv\")\n    def test_save_plot(self, mock_read_csv):\n        \"\"\"\n        Test if the function saves a plot correctly when a save path is provided.\n        \"\"\"\n        # Mock data\n        mock_read_csv.return_value = pd.DataFrame(\n            {\"Text\": [\"word1 word2 word3\", \"word2 word3 word4\"]}\n        )\n        # Test\n        result = task_func(\"dummy_path.csv\", \"test_output.png\")\n        self.assertIsNone(result)\n        self.assertTrue(os.path.exists(\"test_output.png\"))\n    @patch(\"pandas.read_csv\")\n    def test_empty_file(self, mock_read_csv):\n        \"\"\"\n        Test the function's behavior with an empty file.\n        \"\"\"\n        # Mock data\n        mock_read_csv.return_value = pd.DataFrame({\"Text\": []})\n        # Test\n        result = task_func(\"dummy_path.csv\")\n        self.assertIsNone(result)\n    @patch(\"pandas.read_csv\")\n    def test_invalid_file_path(self, mock_read_csv):\n        \"\"\"\n        Test the function's behavior with an invalid file path.\n        \"\"\"\n        mock_read_csv.side_effect = FileNotFoundError\n        # Test\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"invalid_path.csv\")\n    @patch(\"pandas.read_csv\")\n    def test_large_data_set(self, mock_read_csv):\n        \"\"\"\n        Test the function's behavior with a large data set.\n        \"\"\"\n        # Mock data: Generate a large dataset\n        mock_read_csv.return_value = pd.DataFrame(\n            {\"Text\": [\"word\" + str(i) for i in range(1000)]}\n        )\n        # Test\n        result = task_func(\"dummy_path.csv\")\n        self.assertIsNotNone(result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes numerical data from a CSV file. The function reads the CSV file, converts string representations of numbers with commas into floating point numbers, calculates the mean and standard deviation for each numerical column, generates a histogram plot for each numerical column, and performs an ANOVA test to check the statistical significance of differences between means of numerical columns (if applicable).\nNote that: The function assumes that all columns in the CSV file contain numerical data or string representations of numerical data. The ANOVA test is only performed if there are two or more numerical columns. Compute two columns \"F-value\" and \"P-value\" for each pair of numerical columns.\nThe function should output with:\n    means (pd.Series): Mean values of each numerical column.\n    std_devs (pd.Series): Standard deviation values of each numerical column.\n    axes (list[matplotlib.axes.Axes]): List of histogram plots for each numerical column.\n    anova_results (pd.DataFrame): ANOVA test results for each pair of numerical columns (if more than one numerical column is present).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_selection import f_oneway\ndef task_func(data_file_path: str):\n```",
        "gt": "import pandas as pd\nfrom sklearn.feature_selection import f_oneway\ndef task_func(data_file_path: str):\n    df = pd.read_csv(data_file_path)\n    # Convert strings with commas to float, if applicable\n    for col in df.columns:\n        df[col] = pd.to_numeric(df[col].replace(\",\", \"\", regex=True), errors=\"coerce\")\n    # drop columns with NaN values\n    df = df.dropna(axis=1)\n    means = df.mean()\n    std_devs = df.std()\n\n    # Creating a histogram for each numerical column\n    axes = []\n    for col in df.columns:\n        ax = df[col].hist(bins=50)\n        ax.set_title(col)\n        axes.append(ax)\n\n    plt.show()\n\n    # ANOVA Test if more than one numerical column\n    anova_results = None\n    if len(df.columns) > 1:\n        anova_results = pd.DataFrame(f_oneway(*[df[col] for col in df.columns if df[col].dtype != 'object']),\n                                     index=['F-value', 'P-value'], \n                                     columns=['ANOVA Results'])\n\n    return means, std_devs, axes, anova_results",
        "test": "import unittest\nfrom unittest.mock import patch\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    @patch(\"pandas.read_csv\")\n    def test_empty_file(self, mock_read_csv):\n        \"\"\"\n        Test the function with an empty CSV file.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame()\n        means, std_devs, axes, anova_results = task_func(\"empty.csv\")\n        self.assertTrue(means.empty)\n        self.assertTrue(std_devs.empty)\n        self.assertEqual(len(axes), 0)\n        self.assertIsNone(anova_results)\n    @patch(\"pandas.read_csv\")\n    def test_single_column(self, mock_read_csv):\n        \"\"\"\n        Test the function with a CSV file having a single numerical column.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"A\": [1, 2, 3, 4, 5]})\n        means, std_devs, axes, anova_results = task_func(\"single_column.csv\")\n        self.assertEqual(means[\"A\"], 3)\n        self.assertAlmostEqual(std_devs[\"A\"], 1.5811, places=4)\n        self.assertEqual(len(axes), 1)\n        self.assertIsNone(anova_results)\n    @patch(\"pandas.read_csv\")\n    def test_multiple_columns(self, mock_read_csv):\n        \"\"\"\n        Test the function with a CSV file having multiple numerical columns.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        means, _, axes, anova_results = task_func(\"multiple_columns.csv\")\n        self.assertEqual(means[\"A\"], 2)\n        self.assertEqual(means[\"B\"], 5)\n        self.assertEqual(len(axes), 2)\n        self.assertEqual(anova_results[\"ANOVA Results\"][\"F-value\"], 13.5)\n        self.assertAlmostEqual(anova_results[\"ANOVA Results\"][\"P-value\"], 0.021312, places=5)\n        \n    @patch(\"pandas.read_csv\")\n    def test_numerical_and_non_numerical_columns(self, mock_read_csv):\n        \"\"\"\n        Test the function with a mix of numerical and non-numerical columns.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [\"a\", \"b\", \"c\"]})\n        means, std_devs, axes, anova_results = task_func(\"mixed_columns.csv\")\n        self.assertEqual(len(means), 1)  # Only one numerical column\n        self.assertEqual(len(std_devs), 1)\n        self.assertEqual(len(axes), 1)\n        self.assertIsNone(anova_results)\n    @patch(\"pandas.read_csv\")\n    def test_with_special_characters(self, mock_read_csv):\n        \"\"\"\n        Test the function with a CSV file containing numbers with special characters (e.g., commas).\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"A\": [\"1,000\", \"2,000\", \"3,000\"]})\n        means, std_devs, axes, anova_results = task_func(\"special_characters.csv\")\n        self.assertAlmostEqual(means[\"A\"], 2000, places=0)\n        self.assertAlmostEqual(std_devs[\"A\"], pd.Series([1000, 2000, 3000]).std(), places=0)\n        self.assertEqual(len(axes), 1)\n        self.assertIsNone(anova_results)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculates the average time difference in seconds between each consecutive pair of timestamps in a given list, after converting them to a specified timezone.\nNote that: Notes: The function first converts each timestamp in the list to the specified timezone. It then calculates the absolute time difference in seconds between each consecutive pair of timestamps. If the list contains less than two timestamps, the function returns 0.0, as there are no pairs to compare. If there are no time differences (e.g., in case of a single timestamp after timezone conversion), it also returns 0.0. The function uses numpy's mean function to calculate the average time difference.\nThe function should output with:\n    float: The mean (average) time difference in seconds between each consecutive pair of timestamps.\n    If there are less than two timestamps in the list, the function returns 0.0.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n```",
        "gt": "from datetime import datetime\nimport pytz\nimport numpy as np\ndef task_func(time_strings, timezone):\n    if len(time_strings) < 2:\n        return 0.0\n\n    time_zone = pytz.timezone(timezone)\n    parsed_times = [\n        datetime.strptime(ts, \"%d/%m/%y %H:%M:%S.%f\")\n        .replace(tzinfo=pytz.UTC)\n        .astimezone(time_zone)\n        for ts in time_strings\n    ]\n\n    differences = [\n        abs((t2 - t1).total_seconds()) for t1, t2 in zip(parsed_times, parsed_times[1:])\n    ]\n\n    return np.mean(differences) if differences else 0.0",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_example_case(self):\n        \"\"\"Test the example case.\"\"\"\n        time_strings = [\n            \"30/03/09 16:31:32.123\",\n            \"30/03/09 16:32:33.123\",\n            \"30/03/09 16:33:34.123\",\n        ]\n        self.assertAlmostEqual(task_func(time_strings, \"America/New_York\"), 61.0)\n    def test_different_timezones(self):\n        \"\"\"Test different timezones.\"\"\"\n        time_strings = [\n            \"01/04/21 12:00:00.000\",\n            \"01/04/21 12:01:01.000\",\n            \"01/04/21 12:02:02.000\",\n        ]\n        self.assertAlmostEqual(task_func(time_strings, \"Asia/Tokyo\"), 61.0)\n        self.assertAlmostEqual(task_func(time_strings, \"Europe/London\"), 61.0)\n    def test_varying_differences(self):\n        \"\"\"Test varying differences.\"\"\"\n        time_strings = [\n            \"01/04/21 12:00:00.000\",\n            \"01/04/21 12:01:01.000\",\n            \"01/04/21 12:03:03.000\",\n        ]\n        self.assertAlmostEqual(task_func(time_strings, \"Asia/Tokyo\"), 91.5)\n    def test_single_time_string(self):\n        \"\"\"Test single time string.\"\"\"\n        time_strings = [\"01/04/21 12:00:00.000\"]\n        self.assertEqual(task_func(time_strings, \"Asia/Tokyo\"), 0.0)\n    def test_span_across_days(self):\n        \"\"\"Test span across days.\"\"\"\n        time_strings = [\"31/03/21 23:59:00.000\", \"01/04/21 00:01:00.000\"]\n        self.assertAlmostEqual(task_func(time_strings, \"Asia/Tokyo\"), 120.0)\n    def test_out_of_order_strings(self):\n        \"\"\"Test out of order strings.\"\"\"\n        time_strings = [\n            \"01/04/21 12:02:02.000\",\n            \"01/04/21 12:00:00.000\",\n            \"01/04/21 12:01:01.000\",\n        ]\n        self.assertAlmostEqual(task_func(time_strings, \"Asia/Tokyo\"), 91.5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a grade report for a specified number of grades. The function cycles through the given list of students, assigning each a random grade from a predefined range, and compiles this information into a pandas DataFrame. The random grades can be made reproducable by providing a seed in 'rng_seed'. >>> grade_report = task_func(5, rng_seed=12) >>> print(grade_report) Student  Grade 0    Alice      8 1      Bob      5 2  Charlie      9 3    David      6 4      Eve      3\nThe function should raise the exception for: ValueError: If list of students is empty.\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: 'Student' and 'Grade'. Each row represents a student's grade.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n```",
        "gt": "import pandas as pd\nfrom itertools import cycle\nfrom random import randint, seed\ndef task_func(\n    n_grades,\n    students=['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    grade_range=range(1, 11),\n    rng_seed=None\n):\n\n    if len(students) == 0:\n        raise ValueError(\"The students list should contain at least one student.\")\n\n    seed(rng_seed)\n\n    student_cycle = cycle(students)\n    grade_data = []\n\n    for _ in range(n_grades):\n        student = next(student_cycle)\n        grade = randint(min(grade_range), max(grade_range))\n        grade_data.append([student, grade])\n\n    grade_df = pd.DataFrame(grade_data, columns=['Student', 'Grade'])\n\n    return grade_df",
        "test": "import unittest\nfrom unittest.mock import patch\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    # Helper function to compare DataFrames\n    def are_dataframes_equal(self, df1, df2):\n        if df1.equals(df2):\n            return True\n        else:\n            # Check if the two dataframes have the same columns and values\n            return df1.shape == df2.shape and (df1.columns == df2.columns).all() and (df1.values == df2.values).all()\n    def test_case_1(self):\n        # Simple case with minimum input\n        result = task_func(1, ['Alice'], range(1, 2), rng_seed=32)\n        expected = pd.DataFrame({'Student': ['Alice'], 'Grade': [1]})\n        self.assertTrue(self.are_dataframes_equal(result, expected))\n    def test_case_2(self):\n        # Testing with multiple grades and checking the cycling feature of students\n        result = task_func(5, ['Alice', 'Bob'], range(1, 3), rng_seed=1233)\n        # Since grades are random, we check for correct students and valid grades only\n        expected_students = ['Alice', 'Bob', 'Alice', 'Bob', 'Alice']\n        self.assertEqual(list(result['Student']), expected_students)\n        self.assertTrue(all(grade in [1, 2] for grade in result['Grade']))\n    def test_case_3(self):\n        # Testing with different grade range\n        result = task_func(200, ['Alice'], range(100, 102), rng_seed=12)\n        # Check if the grades are within the specified range\n        self.assertTrue(all(100 <= grade <= 101 for grade in result['Grade']))\n    def test_case_4(self):\n        # Testing with a larger number of grades\n        number_of_grades = 1000\n        result = task_func(number_of_grades, ['Alice', 'Bob'], range(1, 5), rng_seed=42)\n        self.assertEqual(len(result), number_of_grades)\n        self.assertTrue(all(1 <= grade <= 4 for grade in result['Grade']))\n    def test_case_5(self):\n        # Testing with an empty list of students, which should handle the error gracefully\n        with self.assertRaises(Exception):\n            task_func(3, [], range(1, 3))\n    def test_default(self):\n        result = task_func(10, rng_seed=12)\n        expected = pd.DataFrame({\n            'Student': {0: 'Alice',\n            1: 'Bob',\n            2: 'Charlie',\n            3: 'David',\n            4: 'Eve',\n            5: 'Alice',\n            6: 'Bob',\n            7: 'Charlie',\n            8: 'David',\n            9: 'Eve'},\n            'Grade': {0: 8, 1: 5, 2: 9, 3: 6, 4: 3, 5: 7, 6: 1, 7: 6, 8: 8, 9: 5}\n        })\n        pd.testing.assert_frame_equal(result, expected, check_dtype=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Takes a Python dictionary, adds a current timestamp to it, serializes the modified dictionary to a JSON-formatted string, and then encodes this string using base64 encoding with ASCII character encoding.\nThe function should output with:\n    str: A base64 encoded string that represents the input dictionary with an added timestamp,\n    encoded in ASCII. The timestamp is added with the key 'timestamp'.\n    DATE_FORMAT: The timestamp format. Default to 'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n```",
        "gt": "import json\nimport base64\nfrom datetime import datetime\ndef task_func(data: dict, DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\") -> str:\n    # Adding current timestamp to the dictionary\n    data['timestamp'] = datetime.now().strftime(DATE_FORMAT)\n    \n    # Encoding the dictionary to a JSON-formatted string and then encoding it in ASCII using base64 encoding\n    json_data = json.dumps(data)\n    encoded_data = base64.b64encode(json_data.encode('ascii')).decode('ascii')\n    \n    return encoded_data",
        "test": "import unittest\nimport json\nimport base64\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    \n    def test_task_func_basic(self):\n        \"\"\"Test the task_func function with a basic dictionary.\"\"\"\n        data = {'name': 'John', 'age': 30, 'city': 'New York'}\n        encoded_data = task_func(data)\n        decoded_data = json.loads(base64.b64decode(encoded_data).decode('ascii'))\n        self.assertEqual(data['name'], decoded_data['name'])\n        self.assertEqual(data['age'], decoded_data['age'])\n        self.assertEqual(data['city'], decoded_data['city'])\n        self.assertIn('timestamp', decoded_data)\n        self.assertIsInstance(datetime.strptime(decoded_data['timestamp'], \"%Y-%m-%d %H:%M:%S\"), datetime)\n        \n    def test_task_func_empty(self):\n        \"\"\"Test the task_func function with an empty dictionary.\"\"\"\n        data = {}\n        encoded_data = task_func(data)\n        decoded_data = json.loads(base64.b64decode(encoded_data).decode('ascii'))\n        self.assertEqual(len(decoded_data), 1)\n        self.assertIn('timestamp', decoded_data)\n        self.assertIsInstance(datetime.strptime(decoded_data['timestamp'], \"%Y-%m-%d %H:%M:%S\"), datetime)\n        \n    def test_task_func_nested(self):\n        \"\"\"Test the task_func function with a nested dictionary.\"\"\"\n        data = {'user': {'name': 'John', 'age': 30}, 'location': {'city': 'New York', 'country': 'USA'}}\n        encoded_data = task_func(data)\n        decoded_data = json.loads(base64.b64decode(encoded_data).decode('ascii'))\n        self.assertEqual(data['user'], decoded_data['user'])\n        self.assertEqual(data['location'], decoded_data['location'])\n        self.assertIn('timestamp', decoded_data)\n        self.assertIsInstance(datetime.strptime(decoded_data['timestamp'], \"%Y-%m-%d %H:%M:%S\"), datetime)\n        \n    def test_task_func_numeric(self):\n        \"\"\"Test the task_func function with a dictionary containing numeric keys.\"\"\"\n        data = {1: 10, 2: 20, 3: 30}\n        encoded_data = task_func(data)\n        decoded_data = json.loads(base64.b64decode(encoded_data).decode('ascii'))\n        data_str_keys = {str(k): v for k, v in data.items()}\n        for k, v in data_str_keys.items():\n            self.assertEqual(v, decoded_data[k])\n        self.assertIn('timestamp', decoded_data)\n        self.assertIsInstance(datetime.strptime(decoded_data['timestamp'], \"%Y-%m-%d %H:%M:%S\"), datetime)\n        \n    def test_task_func_mixed(self):\n        \"\"\"Test the task_func function with a dictionary containing mixed types of keys and values.\"\"\"\n        data = {'name': 'John', 1: 30, 'nested': {'key': 'value'}, 'list': [1, 2, 3]}\n        encoded_data = task_func(data)\n        decoded_data = json.loads(base64.b64decode(encoded_data).decode('ascii'))\n        data_str_keys = {str(k): v for k, v in data.items()}\n        for k, v in data_str_keys.items():\n            self.assertEqual(v, decoded_data[k])\n        self.assertIn('timestamp', decoded_data)\n        self.assertIsInstance(datetime.strptime(decoded_data['timestamp'], \"%Y-%m-%d %H:%M:%S\"), datetime)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads a CSV file from a specified URL, converts it to JSON format, and saves it to a specified file path.\nThe function should output with:\n    str: The path to the saved JSON file.\nYou should write self-contained code starting with:\n```\nimport json\nimport csv\nimport requests\nfrom io import StringIO\n# Constants\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n```",
        "gt": "import json\nimport csv\nimport requests\nfrom io import StringIO\n# Constants\nCSV_URL = 'https://example.com/data.csv'\nJSON_FILE = 'data.json'\ndef task_func(csv_url=CSV_URL, json_file_path=JSON_FILE):\n    response = requests.get(csv_url)\n    csv_data = csv.reader(StringIO(response.text))\n\n    headers = next(csv_data)\n    json_data = [dict(zip(headers, row)) for row in csv_data]\n\n    with open(json_file_path, 'w') as json_file:\n        json.dump(json_data, json_file)\n\n    return json_file_path",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport json\nimport csv\nimport requests\nfrom io import StringIO\n# Mocking the CSV data\nmock_csv_data = \"\"\"header1,header2,header3\nvalue1a,value2a,value3a\nvalue1b,value2b,value3b\n\"\"\"\n# Creating the mocked response object for the requests.get call\nmock_response = Mock()\nmock_response.text = mock_csv_data\n# Blackbox test cases\nclass TestCases(unittest.TestCase):\n    \n    @patch(\"requests.get\", return_value=mock_response)\n    def test_case_1(self, mock_get):\n        # Testing with default parameters\n        output_file = task_func()\n        with open(output_file, 'r') as file:\n            data = json.load(file)\n        self.assertEqual(len(data), 2)\n        self.assertEqual(data[0]['header1'], 'value1a')\n        \n    @patch(\"requests.get\", return_value=mock_response)\n    def test_case_2(self, mock_get):\n        # Testing with custom parameters\n        output_file = task_func(\"https://example.com/mock.csv\", \"mock_output.json\")\n        with open(output_file, 'r') as file:\n            data = json.load(file)\n        self.assertEqual(data[1]['header2'], 'value2b')\n        \n    @patch(\"requests.get\", return_value=mock_response)\n    def test_case_3(self, mock_get):\n        # Testing JSON structure\n        output_file = task_func()\n        with open(output_file, 'r') as file:\n            data = json.load(file)\n        self.assertIn('header3', data[0])\n        \n    @patch(\"requests.get\", return_value=mock_response)\n    def test_case_4(self, mock_get):\n        # Testing CSV with only headers (no data)\n        mock_get.return_value.text = \"header1,header2,header3\\n\"\n        output_file = task_func()\n        with open(output_file, 'r') as file:\n            data = json.load(file)\n        self.assertEqual(len(data), 0)\n        \n    @patch(\"requests.get\", return_value=mock_response)\n    def test_case_5(self, mock_get):\n        # Testing CSV with multiple data rows\n        mock_get.return_value.text = mock_csv_data\n        output_file = task_func()\n        with open(output_file, 'r') as file:\n            data = json.load(file)\n        self.assertEqual(len(data), 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the difference between the ASCII values of each pair of adjacent letters in the input word. After calculating the difference, calculate the entropy of the differences.\nThe function should output with:\n    np.ndarray: A numpy array containing the difference between the ASCII values of each pair of adjacent letters in the word.\n    float: The entropy of the differences.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> np.ndarray:\n```",
        "gt": "import numpy as np\nfrom scipy import stats\ndef task_func(word: str) -> np.ndarray:\n    if not word:  # Handling the case for empty string\n        return np.array([])\n    word_ascii_values = np.array([ord(x) for x in word])\n    difference = np.diff(word_ascii_values)\n    entropy = stats.entropy(difference)\n    \n    return difference, entropy",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('abcdef')\n        expected_diff = np.array([1, 1, 1, 1, 1])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], 1.6094379124341005)\n        \n    def test_case_2(self):\n        result = task_func('hell')\n        expected_diff = np.array([-3, 7, 0])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], -np.inf)\n        \n    def test_case_3(self):\n        result = task_func('az')\n        expected_diff = np.array([25])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], 0.0)\n        \n    def test_case_4(self):\n        result = task_func('a')\n        expected_diff = np.array([])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], 0.0)\n        \n    def test_case_5(self):\n        result = task_func('i love Python')\n        expected_diff = np.array([-73,  76,   3,   7, -17, -69,  48,  41,  -5, -12,   7,  -1])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], -np.inf)\n        \n    def test_case_6(self):\n        result = task_func('Za')\n        expected_diff = np.array([7])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], 0.0)\n    def test_case_7(self):\n        result = task_func('racecar')\n        expected_diff = np.array([-17, 2, 2, -2, -2, 17])\n        np.testing.assert_array_equal(result[0], expected_diff)\n        self.assertEqual(result[1], -np.inf)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Traverse a directory for CSV files a get the file with the longest filename. From that CSV file, load e-mail data, convert it into a Pandas DataFrame, calculate the sum, mean and median of the list associated with each e-mail, and then draw a histogram of the median. - The column names of each CSV files are 'email' and 'list'. - The column 'list' contains a string representation of a list. It should be converted before usage. - If there is not csv file in the directory, return an empty dataframe with the columns expected. - If there is not csv file in the directory, return None instead of an empty plot.\nThe function should output with:\n    pandas.DataFrame : DataFrame containing the data from the CSV file with the longest filename augmented with the columns 'sum', 'mean' and 'median'.\n    matplotlib.axes._axes.Axes : Histogram of the median. None if there is no data to plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport numpy as np\nimport ast\ndef task_func(directory):\n```",
        "gt": "import pandas as pd\nimport os\nimport numpy as np\nimport ast\ndef task_func(directory):\n    name = None\n    for filename in os.listdir(directory):\n        if filename.endswith('.csv'):\n            if name is None :\n                name = filename\n            else :\n                name = filename if len(filename) > len(name) else name\n    if name is None :\n        return pd.DataFrame({}, columns = ['email', 'list'] + ['sum', 'mean', 'median']), None\n\n    df = pd.read_csv(os.path.join(directory, name))\n    df[\"list\"] = df[\"list\"].map(ast.literal_eval)\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['median'] = df['list'].apply(np.median)\n\n    return df, df[\"median\"].hist()",
        "test": "import unittest\nimport shutil\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.dir_1 = os.path.join(self.test_dir, \"dir_1\")\n        os.makedirs(self.dir_1, exist_ok=True)\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"first@example.com\", \"second@example.com\", \"third@example.com\"],\n                \"list\" : [[12, 17, 29, 45, 7, 3], [1, 1, 3, 73, 21, 19, 12], [91, 23, 7, 14, 66]]\n            }\n        )\n        df.to_csv(os.path.join(self.dir_1, \"csv.csv\"), index=False)\n        self.dir_2 = os.path.join(self.test_dir, \"dir_2\")\n        os.makedirs(self.dir_2, exist_ok=True)\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"fourth@example.com\", \"fifth@example.com\", \"sixth@example.com\", \"seventh@example.com\"],\n                \"list\" : [[12, 21, 35, 2, 1], [13, 4, 10, 20], [82, 23, 7, 14, 66], [111, 23, 4]]\n            }\n        )\n        df.to_csv(os.path.join(self.dir_2, \"csv.csv\"), index=False)\n        self.dir_3 = os.path.join(self.test_dir, \"dir_3\")\n        os.makedirs(self.dir_3, exist_ok=True)\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"eight@example.com\", \"ninth@example.com\"],\n                \"list\" : [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n            }\n        )\n        df.to_csv(os.path.join(self.dir_3, \"csv.csv\"), index=False)\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"tenth@example.com\", \"eleventh@example.com\"],\n                \"list\" : [[11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]\n            }\n        )\n        df.to_csv(os.path.join(self.dir_3, \"long_csv.csv\"), index=False)\n        self.dir_4 = os.path.join(self.test_dir, \"dir_4\")\n        os.makedirs(self.dir_4, exist_ok=True)\n        self.dir_5 = os.path.join(self.test_dir, \"dir_5\")\n        os.makedirs(self.dir_5, exist_ok=True)\n        df = pd.DataFrame(\n            {\n                \"email\": [\n                    \"first@example.com\",\n                ],\n                \"list\": [\n                    [12],\n                ],\n            }\n        )\n        df.to_csv(os.path.join(self.dir_5, \"csv.csv\"), index=False)\n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Test if the function correctly processes the CSV files and returns the appropriate DataFrame and histogram\n        df, ax = task_func(self.dir_1)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        # Check DataFrame structure and content\n        self.assertTrue(\n            all(\n                [\n                    col in df.columns\n                    for col in [\"email\", \"list\", \"sum\", \"mean\", \"median\"]\n                ]\n            )\n        )\n        # Check specific values in the DataFrame\n        self.assertEqual(df.loc[0, 'email'], 'first@example.com')\n        self.assertEqual(df.loc[1, 'email'], 'second@example.com')\n        self.assertEqual(df.loc[2, 'email'], 'third@example.com')\n        self.assertEqual(df.loc[1, 'sum'], 130)\n        self.assertEqual(df.loc[1, 'mean'], 130.0/7.0)\n        self.assertEqual(df.loc[1, 'median'], 12.0)\n        # Check attributes of the histogram\n        self.assertTrue(hasattr(ax, 'figure'))\n    def test_case_2(self):\n        # Test if the function correctly processes the CSV files and returns the appropriate DataFrame and histogram\n        df, ax = task_func(self.dir_2)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        # Check DataFrame structure and content\n        self.assertTrue(\n            all(\n                [\n                    col in df.columns\n                    for col in [\"email\", \"list\", \"sum\", \"mean\", \"median\"]\n                ]\n            )\n        )\n        # Check specific values in the DataFrame\n        self.assertEqual(df.loc[1, 'email'], 'fifth@example.com')\n        self.assertEqual(df.loc[1, 'sum'], 47)\n        self.assertEqual(df.loc[1, 'mean'], 11.75)\n        self.assertEqual(df.loc[2, 'median'], 23.0)\n        # Check attributes of the histogram\n        self.assertTrue(hasattr(ax, 'figure'))\n    def test_case_3(self):\n        # Test if the function correctly processes the CSV files and returns the appropriate DataFrame and histogram\n        df, ax = task_func(self.dir_3)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        # Check DataFrame structure and content\n        self.assertTrue(\n            all(\n                [\n                    col in df.columns\n                    for col in [\"email\", \"list\", \"sum\", \"mean\", \"median\"]\n                ]\n            )\n        )\n        # Check specific values in the DataFrame\n        self.assertEqual(df.loc[1, 'email'], 'eleventh@example.com')\n        self.assertEqual(df.loc[0, 'sum'], 65)\n        self.assertEqual(df.loc[1, 'sum'], 90)\n        self.assertEqual(df.loc[0, 'mean'], 13.0)\n        self.assertEqual(df.loc[1, 'mean'], 18.0)\n        self.assertEqual(df.loc[0, 'median'], 13.0)\n        self.assertEqual(df.loc[1, 'median'], 18.0)\n        # Check attributes of the histogram\n        self.assertTrue(hasattr(ax, 'figure'))\n    def test_case_4(self):\n        # Test with a directory without csv files\n        df, ax = task_func(self.dir_4)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        # Check DataFrame structure and content\n        self.assertTrue(\n            all(\n                [\n                    col in df.columns\n                    for col in [\"email\", \"list\", \"sum\", \"mean\", \"median\"]\n                ]\n            )\n        )\n        self.assertIsNone(ax)\n    def test_case_5(self):\n        # Test if the function correctly processes the CSV files and returns the appropriate DataFrame and histogram\n        df, ax = task_func(self.dir_5)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        # Check DataFrame structure and content\n        self.assertTrue(\n            all(\n                [\n                    col in df.columns\n                    for col in [\"email\", \"list\", \"sum\", \"mean\", \"median\"]\n                ]\n            )\n        )\n        # Check specific values in the DataFrame\n        print(df)\n        self.assertEqual(df.loc[0, \"email\"], \"first@example.com\")\n        self.assertEqual(df.loc[0, \"sum\"], 12)\n        self.assertEqual(df.loc[0, \"mean\"], 12.0)\n        self.assertEqual(df.loc[0, \"median\"], 12.0)\n        # Check attributes of the histogram\n        self.assertTrue(hasattr(ax, \"figure\"))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean, median, and mode of values in a list of lists. If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, and then calculate the statistics.\nThe function should output with:\n    dict: A dictionary with the mean, median, and mode of the values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n```",
        "gt": "import numpy as np\nimport random\nfrom scipy import stats\ndef task_func(list_of_lists, size=5, seed=0):\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    \n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Test with a mix of non-empty and empty lists.\n        input_data = [[1, 2, 3], [], [4, 5, 6]]\n        result = task_func(input_data)\n        self.assertTrue(result[\"mean\"] < 100)\n        self.assertTrue(result[\"median\"] < 100)\n        self.assertTrue(result[\"mode\"] < 100)\n    def test_case_2(self):\n        # Test with all non-empty lists.\n        input_data = [[7, 8, 9], [10, 11, 12], [13, 14, 15]]\n        result = task_func(input_data, 4)\n        combined_data = [7, 8, 9, 10, 11, 12, 13, 14, 15]\n        self.assertEqual(result[\"mean\"], np.mean(combined_data))\n        self.assertEqual(result[\"median\"], np.median(combined_data))\n        self.assertEqual(result[\"mode\"], stats.mode(combined_data).mode)\n    def test_case_3(self):\n        # Test with all empty lists.\n        input_data = [[], [], []]\n        result = task_func(input_data)\n        self.assertTrue(result[\"mean\"] < 100)\n        self.assertTrue(result[\"median\"] < 100)\n        self.assertTrue(result[\"mode\"] < 100)\n    def test_case_4(self):\n        # Test with lists containing both negative and positive integers.\n        input_data = [[-1, -2, -3], [4, 5, 6], [-7, -8, -9]]\n        result = task_func(input_data, 2)\n        combined_data = [-1, -2, -3, 4, 5, 6, -7, -8, -9]\n        self.assertEqual(result[\"mean\"], np.mean(combined_data))\n        self.assertEqual(result[\"median\"], np.median(combined_data))\n        self.assertEqual(result[\"mode\"], stats.mode(combined_data).mode)\n    def test_case_5(self):\n        # Test with a single list.\n        input_data = [[1, 2, 3, 4, 5]]\n        result = task_func(input_data)\n        self.assertEqual(result[\"mean\"], np.mean(input_data[0]))\n        self.assertEqual(result[\"median\"], np.median(input_data[0]))\n        self.assertEqual(result[\"mode\"], stats.mode(input_data[0]).mode)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Forecasts the share closing prices for the next 7 days using the ARIMA model and plots the forecast.\nThe function should output with:\n    Tuple[List[float], Axes]: A tuple containing:\n    A list with forecasted prices for the next 7 days.\n    A matplotlib Axes object containing the subplot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    # Creating the ARIMA model\n    model = ARIMA(df['closing_price'], order=(5, 1, 0))\n    model_fit = model.fit()\n    \n    # Forecasting the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    # Plotting the forecast\n    fig, ax = plt.subplots()\n    ax.plot(df['date'], df['closing_price'], label='Historical Closing Prices')\n    forecast_dates = pd.date_range(start=df['date'].iloc[-1] + pd.Timedelta(days=1), periods=7)\n    ax.plot(forecast_dates, forecast, label='Forecasted Closing Prices')\n    ax.legend()\n    \n    return forecast.tolist(), ax",
        "test": "# Importing required modules for testing\nimport unittest\nimport pandas as pd\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Creating a sample dataframe with closing prices for 7 days\n        df1 = pd.DataFrame({\n            'date': pd.date_range(start='2022-01-01', end='2022-01-07', freq='D'),\n            'closing_price': [100, 101, 102, 103, 104, 105, 106]\n        })\n        \n        # Running the function\n        forecast1, ax1 = task_func(df1)\n        \n        # Checking the type of the forecast and plot object\n        self.assertIsInstance(forecast1, list)\n        self.assertIsInstance(ax1, Axes)\n        \n        # Checking the length of the forecasted list\n        for a, b in zip(forecast1, [106.99999813460752, 107.99999998338443, 108.99999547091295, 109.99999867405204, 110.99999292499156, 111.99999573455818, 112.9999903188028]):\n            self.assertAlmostEqual(a, b, places=2)\n        \n        # Checking if the plot contains data\n        lines = ax1.get_lines()\n        self.assertTrue(lines[0].get_ydata().tolist(), [100, 101, 102, 103, 104, 105, 106])\n    def test_case_2(self):\n        # Creating a sample dataframe with closing prices for 7 days\n        df2 = pd.DataFrame({\n            'date': pd.date_range(start='2022-02-01', end='2022-02-07', freq='D'),\n            'closing_price': [200, 201, 202, 203, 204, 205, 206]\n        })\n        \n        # Running the function\n        forecast2, ax2 = task_func(df2)\n        \n        # Checking the type of the forecast and plot object\n        self.assertIsInstance(forecast2, list)\n        self.assertIsInstance(ax2, Axes)\n        \n        # Checking the length of the forecasted list\n        for a, b in zip(forecast2, [206.9999997816766, 208.00000005262595, 208.99999941300158, 210.000000028273, 210.99999903094576, 211.99999982088116, 212.99999869216418]):\n            self.assertAlmostEqual(a, b, places=2)\n        # Checking if the plot contains data\n        lines = ax2.get_lines()\n        self.assertAlmostEqual(lines[0].get_ydata().tolist(), [200, 201, 202, 203, 204, 205, 206])\n    def test_case_3(self):\n        # Creating a sample dataframe with closing prices for 7 days\n        df3 = pd.DataFrame({\n            'date': pd.date_range(start='2022-03-01', end='2022-03-07', freq='D'),\n            'closing_price': [300, 301, 302, 303, 304, 305, 306]\n        })\n        \n        # Running the function\n        forecast3, ax3 = task_func(df3)\n        \n        # Checking the type of the forecast and plot object\n        self.assertIsInstance(forecast3, list)\n        self.assertIsInstance(ax3, Axes)\n        \n        # Checking the length of the forecasted list\n        for a, b in zip(forecast3, [306.99999853839176, 308.00000003237324, 308.9999964108992, 309.9999991004857, 310.9999943724899, 311.9999968807911, 312.99999233933994]):\n            self.assertAlmostEqual(a, b, places=2)\n        # Checking if the plot contains data\n        lines = ax3.get_lines()\n        # get data from the line\n        self.assertAlmostEqual(lines[0].get_ydata().tolist(), [300, 301, 302, 303, 304, 305, 306])\n    def test_case_4(self):\n        # Creating a sample dataframe with closing prices for 7 days\n        df4 = pd.DataFrame({\n            'date': pd.date_range(start='2022-04-01', end='2022-04-07', freq='D'),\n            'closing_price': [400, 401, 402, 403, 404, 405, 406]\n        })\n        \n        # Running the function\n        forecast4, ax4 = task_func(df4)\n        \n        # Checking the type of the forecast and plot object\n        self.assertIsInstance(forecast4, list)\n        self.assertIsInstance(ax4, Axes)\n        \n        # Checking the length of the forecasted list\n        for a, b in zip(forecast4, [406.99999936259456, 408.0000000781549, 408.99999837145054, 409.9999998156926, 410.9999973988557, 411.99999898892963, 412.9999964967954]):\n            self.assertAlmostEqual(a, b, places=2)\n        # Checking if the plot contains data\n        lines = ax4.get_lines()\n        self.assertAlmostEqual(lines[0].get_ydata().tolist(), [400, 401, 402, 403, 404, 405, 406])\n    def test_case_5(self):\n        # Creating a sample dataframe with closing prices for 7 days\n        df5 = pd.DataFrame({\n            'date': pd.date_range(start='2022-05-01', end='2022-05-07', freq='D'),\n            'closing_price': [500, 501, 502, 503, 504, 505, 506]\n        })\n        \n        # Running the function\n        forecast5, ax5 = task_func(df5)\n        \n        # Checking the type of the forecast and plot object\n        self.assertIsInstance(forecast5, list)\n        self.assertIsInstance(ax5, Axes)\n        \n        # Checking the length of the forecasted list\n        for a, b in zip(forecast5, [506.99999853029163, 508.0000000310427, 508.99999639197796, 509.9999990913683, 510.9999943427388, 511.9999968573493, 512.9999922971087]):\n            self.assertAlmostEqual(a, b, places=2)\n        # Checking if the plot contains data\n        lines = ax5.get_lines()\n        self.assertTrue(lines[0].get_ydata().tolist(), [500, 501, 502, 503, 504, 505, 506])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a histogram from the data in a list of lists. If any sublist is empty, it will be filled with 5 random integers ranging from 0 to 100 (both inclusive) The histogram will then be constructed using the combined data from all sublists.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The histogram plot object.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n```",
        "gt": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\ndef task_func(list_of_lists, seed=0):\n    random.seed(seed)\n    data = []\n    # Initialize a fresh plot\n    plt.figure()\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(5)]\n\n    plot = sns.histplot(data)\n    return plot",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input: Two non-empty sublists and one empty sublist\n        plot = task_func([[1, 2, 3], [], [4, 5, 6]])\n        self.assertEqual(str(type(plot)), \"<class 'matplotlib.axes._axes.Axes'>\")\n        # Test the number of bars in the histogram\n        self.assertEqual(len(plot.patches), 5)\n    def test_case_2(self):\n        # Input: All empty sublists\n        plot = task_func([[], [], []])\n        self.assertEqual(str(type(plot)), \"<class 'matplotlib.axes._axes.Axes'>\")\n    def test_case_3(self):\n        # Input: Single non-empty sublist\n        plot = task_func([[1, 2, 3, 4, 5]], 77)\n        self.assertEqual(str(type(plot)), \"<class 'matplotlib.axes._axes.Axes'>\")\n        # Test the number of bars in the histogram\n        self.assertEqual(len(plot.patches), 4)\n    def test_case_4(self):\n        # Input: Single empty sublist\n        plot = task_func([[]])\n        self.assertEqual(str(type(plot)), \"<class 'matplotlib.axes._axes.Axes'>\")\n    def test_case_5(self):\n        # Input: Mixed empty and non-empty sublists\n        plot = task_func([[10, 20], [], [30, 40, 50], []])\n        self.assertEqual(str(type(plot)), \"<class 'matplotlib.axes._axes.Axes'>\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract all texts not enclosed in square brackets into a string and calculate the TF-IDF values which are returned as a dictionary.\nThe function should output with:\n    dict: A dictionary with words as keys and TF-IDF scores as values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n```",
        "gt": "import numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport re\ndef task_func(example_str):\n    pattern = r'\\[.*?\\]'\n    text = re.sub(pattern, '', example_str)\n    if not text.strip():\n        return {}\n\n    tfidf_vectorizer = TfidfVectorizer()\n    tfidf_matrix = tfidf_vectorizer.fit_transform([text])\n    feature_names = tfidf_vectorizer.get_feature_names_out()\n    tfidf_scores = dict(zip(feature_names, np.squeeze(tfidf_matrix.toarray())))\n\n    return tfidf_scores",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        input_str = \"Adversarial ] input ][[][ i[s []] a [ problem ] in [ machine learning ]\"\n        output = task_func(input_str)\n        expected_output = {\n            'adversarial': 0.5773502691896258, \n            'in': 0.5773502691896258, \n            'input': 0.5773502691896258\n        }\n        self.assertDictEqual(output, expected_output)\n    def test_case_2(self):\n        input_str = \"Alice [1234 Street, City, State] Bob Charlie [5678 Street, AnotherCity, State]\"\n        output = task_func(input_str)\n        expected_output = {\n            'alice': 0.5773502691896258, \n            'bob': 0.5773502691896258, \n            'charlie': 0.5773502691896258\n        }\n        self.assertDictEqual(output, expected_output)\n    def test_case_3(self):\n        input_str = \"No brackets here at all\"\n        output = task_func(input_str)\n        expected_output = {\n            'all': 0.4472135954999579, \n            'at': 0.4472135954999579, \n            'brackets': 0.4472135954999579, \n            'here': 0.4472135954999579, \n            'no': 0.4472135954999579\n        }\n        self.assertDictEqual(output, expected_output)\n    def test_case_4(self):\n        input_str = \"Mix [bracketed content] (and non-bracketed) content\"\n        output = task_func(input_str)\n        expected_output = {\n            'and': 0.4472135954999579, \n            'bracketed': 0.4472135954999579, \n            'content': 0.4472135954999579, \n            'mix': 0.4472135954999579, \n            'non': 0.4472135954999579\n        }\n        self.assertDictEqual(output, expected_output)\n    def test_case_5(self):\n        input_str = \"[Only bracketed content]\"\n        output = task_func(input_str)\n        expected_output = {}\n        self.assertDictEqual(output, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Hashes a password using the PBKDF2 HMAC algorithm with SHA-256 as the hashing algorithm, combined with a randomly generated salt, and returns both the salt and the hashed password, each base64-encoded.\nThe function should raise the exception for: ValueError if the password is None or empty\nThe function should output with:\n    tuple[bytes, bytes]: A tuple containing the base64-encoded salt and the base64-encoded hashed password as byte strings.\nYou should write self-contained code starting with:\n```\nimport base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n```",
        "gt": "import base64\nimport hashlib\nimport os\ndef task_func(password, SALT_LENGTH = 32):\n    if not password:\n        raise ValueError\n    salt = os.urandom(SALT_LENGTH)\n    hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)\n    return base64.b64encode(salt), base64.b64encode(hashed_password)",
        "test": "import unittest\nimport base64\nimport hashlib\nimport os\nclass TestCases(unittest.TestCase):\n    def decode_and_regenerate_password(self, encoded_salt, encoded_hashed_password, original_password):\n        \"\"\" Helper function to decode base64 encoded salt and password, and regenerate the hashed password. \"\"\"\n        decoded_salt = base64.b64decode(encoded_salt)\n        decoded_hashed_password = base64.b64decode(encoded_hashed_password)\n        regenerated_hashed_password = hashlib.pbkdf2_hmac('sha256', original_password.encode(), decoded_salt, 100000)\n        return regenerated_hashed_password, decoded_hashed_password\n    def test_case_1(self):\n        \"\"\" Testing with a simple password \"\"\"\n        salt, hashed_password = task_func('password123')\n        self.assertTrue(isinstance(salt, bytes) and isinstance(hashed_password, bytes))\n        regenerated, original = self.decode_and_regenerate_password(salt, hashed_password, 'password123')\n        self.assertEqual(regenerated, original)\n    def test_case_2(self):\n        \"\"\" Testing with a password containing special characters \"\"\"\n        salt, hashed_password = task_func('p@ssw0rd$%^&*')\n        self.assertTrue(isinstance(salt, bytes) and isinstance(hashed_password, bytes))\n        regenerated, original = self.decode_and_regenerate_password(salt, hashed_password, 'p@ssw0rd$%^&*')\n        self.assertEqual(regenerated, original)\n    def test_case_3(self):\n        \"\"\" Testing with a long password \"\"\"\n        long_password = 'a' * 1000\n        salt, hashed_password = task_func(long_password)\n        self.assertTrue(isinstance(salt, bytes) and isinstance(hashed_password, bytes))\n        regenerated, original = self.decode_and_regenerate_password(salt, hashed_password, long_password)\n        self.assertEqual(regenerated, original)\n    def test_case_4(self):\n        \"\"\" Testing with a short password \"\"\"\n        short_password = 'a'\n        salt, hashed_password = task_func(short_password)\n        self.assertTrue(isinstance(salt, bytes) and isinstance(hashed_password, bytes))\n        regenerated, original = self.decode_and_regenerate_password(salt, hashed_password, short_password)\n        self.assertEqual(regenerated, original)\n    def test_case_5(self):\n        \"\"\" Testing with a password that is a number \"\"\"\n        number_password = '1234567890'\n        salt, hashed_password = task_func(number_password)\n        self.assertTrue(isinstance(salt, bytes) and isinstance(hashed_password, bytes))\n        regenerated, original = self.decode_and_regenerate_password(salt, hashed_password, number_password)\n        self.assertEqual(regenerated, original)\n    def test_invalid_input(self):\n        \"\"\" Testing with invalid input such as None or empty string \"\"\"\n        with self.assertRaises(ValueError):\n            task_func(None)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a nested list of menu items, this function flattens the list and visualizes the frequency of each menu item using a seaborn barplot.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object representing the visualization, or None if there are no items to plot.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n```",
        "gt": "from collections import Counter\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\ndef task_func(list_of_menuitems):\n    if not list_of_menuitems or not any(list_of_menuitems):\n        print(\"No items to plot.\")\n        return None\n\n    # Flatten the nested list into a single list of items\n    flat_list = [item for sublist in list_of_menuitems for item in sublist]\n    if not flat_list:\n        print(\"No items to plot.\")\n        return None\n\n    # Count the occurrence of each item\n    counter = Counter(flat_list)\n\n    # Convert the counter to a DataFrame\n    df = pd.DataFrame(counter.items(), columns=['Item', 'Count'])\n\n    # Ensure there is data to plot\n    if df.empty:\n        print(\"No items to plot.\")\n        return None\n\n    # Create a seaborn barplot\n    sns.set(style=\"whitegrid\")\n    ax = sns.barplot(x=\"Count\", y=\"Item\", data=df, palette=\"viridis\")\n\n    plt.tight_layout()  # Adjust the layout to make room for the item labels\n    return ax",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up any repeated data here\n        self.menu_items = [['Pizza', 'Burger'], ['Pizza', 'Coke'], ['Pasta', 'Coke']]\n    def test_return_type(self):\n        \"\"\"Test that the function returns a matplotlib Axes object.\"\"\"\n        ax = task_func(self.menu_items)\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n    def test_empty_list(self):\n        \"\"\"Test the function with an empty list, expecting None as there's nothing to plot.\"\"\"\n        ax = task_func([])\n        self.assertIsNone(ax)\n    def test_single_item_list(self):\n        \"\"\"Test the function with a list containing a single menu item.\"\"\"\n        ax = task_func([['Pizza']])\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        # Checks for correct item count can be added if needed\n    def test_identical_items_list(self):\n        \"\"\"Test the function with a list where all items are identical.\"\"\"\n        ax = task_func([['Burger'], ['Burger'], ['Burger']])\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        # Could verify that 'Burger' is the only item and its count is correct\n    def test_multiple_items_same_count(self):\n        \"\"\"Test the function with a list where multiple items have the same count.\"\"\"\n        ax = task_func([['Soda', 'Water'], ['Soda', 'Water']])\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform Principal Component Analysis (PCA) on \"x\" as x-values and \"y\" as y-values and record the results with labels.\nThe function should output with:\n    fig: Matplotlib figure object.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(x, y, labels):\n    pca = PCA(n_components=2)\n\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        xy = np.vstack((x[i], y[i])).T\n        xy_transformed = pca.fit_transform(xy)\n        ax.plot(xy_transformed[:, 0], xy_transformed[:, 1], label=labels[i])\n    \n    ax.legend()\n    \n    return fig",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Generate sample data for testing\n        self.x_data = [\n            np.array([1, 2, 3, 4]),\n            np.array([5, 6, 7, 8]),\n            np.array([9, 10, 11, 12]),\n            np.array([13, 14, 15, 16]),\n            np.array([17, 18, 19, 20])\n        ]\n        \n        self.y_data = [\n            np.array([21, 22, 23, 24]),\n            np.array([25, 26, 27, 28]),\n            np.array([29, 30, 31, 32]),\n            np.array([33, 34, 35, 36]),\n            np.array([37, 38, 39, 40])\n        ]\n        \n        self.labels = ['H\u2082O', 'O\u2082', 'CO\u2082', 'N\u2082', 'Ar']\n    def test_case_1(self):\n        fig = task_func(self.x_data, self.y_data, self.labels)\n        # Check if returned object is a matplotlib figure\n        self.assertIsInstance(fig, plt.Figure)\n    def test_case_2(self):\n        # Testing with different data lengths\n        x_data = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])]\n        y_data = [np.array([10, 11, 12]), np.array([13, 14, 15]), np.array([16, 17, 18])]\n        fig = task_func(x_data, y_data, self.labels[:3])\n        self.assertIsInstance(fig, plt.Figure)\n    def test_case_3(self):\n        # Testing with data of length 2 (to avoid PCA error)\n        x_data = [np.array([1, 2]), np.array([4, 5]), np.array([7, 8])]\n        y_data = [np.array([10, 11]), np.array([13, 14]), np.array([16, 17])]\n        fig = task_func(x_data, y_data, self.labels[:3])\n        self.assertIsInstance(fig, plt.Figure)\n        \n    def test_case_4(self):\n        # Testing with longer data\n        x_data = [np.array(range(10)), np.array(range(10, 20)), np.array(range(20, 30))]\n        y_data = [np.array(range(30, 40)), np.array(range(40, 50)), np.array(range(50, 60))]\n        fig = task_func(x_data, y_data, self.labels[:3])\n        self.assertIsInstance(fig, plt.Figure)\n        \n    def test_case_5(self):\n        # Testing with random data\n        x_data = [np.random.randn(10) for _ in range(3)]\n        y_data = [np.random.randn(10) for _ in range(3)]\n        fig = task_func(x_data, y_data, self.labels[:3])\n        self.assertIsInstance(fig, plt.Figure)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a list of Unix timestamps to date objects, create a Pandas DataFrame, and draw a histogram. - The date format should be as DATE_FORMAT. - The DataFrame should have 'Timestamp' and 'Datetime' as column names. - If the list of timestamps is empty, raise a ValueError with the message \"Input list of timestamps is empty\".\nThe function should raise the exception for: ValueError(\"Input list of timestamps is empty.\"): If the list of timestamps is empty.\nThe function should output with:\n    pandas.DataFrame: A pandas DataFrame containing the original Unix timestamps and the converted datetime objects.\n    Axes: The Axes object of the histogram plot. The histogram will have 10 bins by default, representing the distribution of the datetime objects.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n```",
        "gt": "from datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(timestamps):\n    if not timestamps:\n        raise ValueError(\"Input list of timestamps is empty.\")\n    datetimes = [datetime.fromtimestamp(t).strftime(DATE_FORMAT) for t in timestamps]\n    df = pd.DataFrame({\"Timestamp\": timestamps, \"Datetime\": datetimes})\n    ax = plt.hist(pd.to_datetime(df[\"Datetime\"]))\n    plt.close()\n    return df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_data = [\n            [1318935276, 1342905276, 23074268],\n            [4235087541, 1234653346, 19862358],\n            [],\n            [1156829289],\n            [1000000000, 2000000000, 3000000000],\n        ]\n    def test_case_1(self):\n        input_timestamps = self.test_data[0]\n        self.assert_function_output(input_timestamps)\n    def test_case_2(self):\n        input_timestamps = self.test_data[1]\n        self.assert_function_output(input_timestamps)\n    def test_case_3(self):\n        input_timestamps = self.test_data[2]\n        with self.assertRaises(ValueError) as context:\n            task_func(input_timestamps)\n        self.assertEqual(\n            str(context.exception),\n            \"Input list of timestamps is empty.\",\n        )\n    def test_case_4(self):\n        input_timestamps = self.test_data[3]\n        self.assert_function_output(input_timestamps)\n    def test_case_5(self):\n        input_timestamps = self.test_data[4]\n        self.assert_function_output(input_timestamps)\n        df, ax = task_func(input_timestamps)\n        expected_df = pd.DataFrame(\n            {\n                \"Timestamp\": [1000000000, 2000000000, 3000000000],\n                \"Datetime\": [\n                    \"2001-09-09 01:46:40\",\n                    \"2033-05-18 03:33:20\",\n                    \"2065-01-24 05:20:00\",\n                ],\n            }\n        )\n        \n        pd.testing.assert_frame_equal(df, expected_df)\n    def assert_function_output(self, input_timestamps):\n        df, ax = task_func(input_timestamps)\n        # Assert that the DataFrame contains the correct timestamps\n        self.assertEqual(df[\"Timestamp\"].tolist(), input_timestamps)\n        # Assert the histogram attributes (e.g., number of bins)\n        self.assertEqual(len(ax[0]), 10)  # There should be 10 bars in the histogram",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a DataFrame containing dates and lists of numbers. It converts the lists into separate columns, performs Principal Component Analysis (PCA), and returns the explained variance ratio of the principal components along with a bar chart visualizing this ratio. Returns 0,0 if the input DataFrame is empty.\nNote that: The function use \"Explained Variance Ratio of Principal Components\" for the plot title. The function use \"Principal Component\" and \"Explained Variance Ratio\" as the xlabel and ylabel respectively.\nThe function should output with:\n    tuple: (explained_variance_ratio, ax)\n    explained_variance_ratio (ndarray): The explained variance ratio of the principal components.\n    ax (Axes): The matplotlib Axes object for the variance ratio bar chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    # Data preparation\n\n    if df.empty:\n        return 0,0\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    # Performing PCA\n    pca = PCA()\n    pca.fit(df.iloc[:,1:])\n    \n    # Extracting explained variance ratio\n    explained_variance_ratio = pca.explained_variance_ratio_\n    \n    # Creating bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(explained_variance_ratio)), explained_variance_ratio)\n    ax.set_title('Explained Variance Ratio of Principal Components')\n    ax.set_xlabel('Principal Component')\n    ax.set_ylabel('Explained Variance Ratio')\n    \n    return explained_variance_ratio, ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_return_types(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        variance_ratio, plot = task_func(df)\n        self.assertIsInstance(variance_ratio, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n    def test_known_input_output(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        variance_ratio, plot = task_func(df)\n        self.assertIsInstance(variance_ratio, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n    def test_empty_dataframe(self):\n        empty_df = pd.DataFrame()\n        variance_ratio, _ = task_func(empty_df)\n        self.assertEqual(variance_ratio, 0)\n    def test_single_row_dataframe(self):\n        single_row_df = pd.DataFrame([['2021-01-01', [8, 10, 12]]], columns=['Date', 'Value'])\n        variance_ratio, _ = task_func(single_row_df)\n        self.assertEqual(len(variance_ratio), 1)\n    def test_plot_attributes(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        _, ax = task_func(df)\n        self.assertEqual(ax.get_title(), 'Explained Variance Ratio of Principal Components')\n        self.assertEqual(ax.get_xlabel(), 'Principal Component')\n        self.assertEqual(ax.get_ylabel(), 'Explained Variance Ratio')\n    def test_plot_explained_variance_ratio(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        variance_ratio, ax = task_func(df)\n        bar_heights = [rect.get_height() for rect in ax.patches]\n        self.assertListEqual(bar_heights, list(variance_ratio))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates and plots a sales forecast starting from a given date, for a specified number of periods and frequency.\nThe function should output with:\n    A tuple containing:\n    1. A DataFrame with columns ['Date', 'Sales'], where 'Date' is the forecast date and 'Sales' are the forecasted sales.\n    2. A matplotlib Axes object for the sales forecast plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_date: str, periods: int, freq: str, random_seed: int = 0) -> (pd.DataFrame, plt.Axes):\n    np.random.seed(random_seed)\n    date_range = pd.date_range(start_date, periods=periods, freq=freq)\n    sales_forecast = np.random.randint(100, 500, size=periods)\n    forecast_df = pd.DataFrame({'Date': date_range, 'Sales': sales_forecast}).set_index('Date')\n\n    fig, ax = plt.subplots()\n    forecast_df['Sales'].plot(ax=ax, marker='o')\n    ax.set_title('Sales Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.grid(True)\n    \n    return forecast_df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        self.random_seed = 42\n    def test_basic_forecast(self):\n        df, ax = task_func('2021-01-01', 5, 'WOM-2FRI', self.random_seed)\n        self.assertEqual(len(df), 5)\n        self.assertTrue(all(df.columns == ['Sales']))\n        self.assertEqual(ax.get_title(), 'Sales Forecast')\n    def test_monthly_forecast(self):\n        df, ax = task_func('2022-01-01', 3, 'M', self.random_seed)\n        self.assertEqual(len(df), 3)\n        self.assertTrue(all(df.columns == ['Sales']))\n    def test_quarterly_forecast(self):\n        df, ax = task_func('2020-01-01', 4, 'Q', self.random_seed)\n        self.assertEqual(len(df), 4)\n        self.assertTrue(all(df.columns == ['Sales']))\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            task_func('2021-13-01', 5, 'M', self.random_seed)\n    def test_negative_periods(self):\n        with self.assertRaises(ValueError):\n            task_func('2021-01-01', -5, 'M', self.random_seed)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Cleans the text in a pandas DataFrame column named 'text' by removing all special characters, punctuation marks, and spaces, then calculates the length of the cleaned text.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two new columns 'clean_text' and 'text_length', where 'clean_text' is the cleaned text and 'text_length' is its length.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(input_df):\n```",
        "gt": "import re\nimport pandas as pd\ndef task_func(input_df):\n    def clean_text_and_calculate_length(row):\n        if pd.isnull(row['text']):\n            return pd.Series(['', 0], index=['clean_text', 'text_length'])\n        cleaned_text = re.sub('[^A-Za-z0-9]+', '', str(row['text']))\n        return pd.Series([cleaned_text, len(cleaned_text)], index=['clean_text', 'text_length'])\n    \n    return input_df.apply(clean_text_and_calculate_length, axis=1)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({'text': ['hello', 'world', 'Special $#! characters   spaces 888323', 'Hello, World!', '', None]})\n    def test_clean_text_and_calculate_length(self):\n        result = task_func(self.df)\n        expected_clean_text = ['hello', 'world', 'Specialcharactersspaces888323', 'HelloWorld', '', '']\n        expected_text_length = [5, 5, 29, 10, 0, 0]\n        pd.testing.assert_series_equal(result['clean_text'], pd.Series(expected_clean_text, name='clean_text'), check_names=False)\n        pd.testing.assert_series_equal(result['text_length'], pd.Series(expected_text_length, name='text_length'), check_names=False)\n    def test_with_special_characters(self):\n        df = pd.DataFrame({'text': ['@@@hello***', '%%%world$$$']})\n        result = task_func(df)\n        self.assertEqual(result['clean_text'].iloc[0], 'hello')\n        self.assertEqual(result['clean_text'].iloc[1], 'world')\n        self.assertEqual(result['text_length'].iloc[0], 5)\n        self.assertEqual(result['text_length'].iloc[1], 5)\n    def test_with_numeric_strings(self):\n        df = pd.DataFrame({'text': ['123', '4567']})\n        result = task_func(df)\n        self.assertEqual(result['clean_text'].iloc[0], '123')\n        self.assertEqual(result['clean_text'].iloc[1], '4567')\n        self.assertEqual(result['text_length'].iloc[0], 3)\n        self.assertEqual(result['text_length'].iloc[1], 4)\n    def test_empty_and_none(self):\n        df = pd.DataFrame({'text': ['', None]})\n        result = task_func(df)\n        self.assertEqual(result['clean_text'].iloc[0], '')\n        self.assertEqual(result['clean_text'].iloc[1], '')\n        self.assertEqual(result['text_length'].iloc[0], 0)\n        self.assertEqual(result['text_length'].iloc[1], 0)\n    def test_mixed_cases(self):\n        df = pd.DataFrame({'text': ['HelloWorld', 'HELLOworld123']})\n        result = task_func(df)\n        self.assertEqual(result['clean_text'].iloc[0], 'HelloWorld')\n        self.assertEqual(result['clean_text'].iloc[1], 'HELLOworld123')\n        self.assertEqual(result['text_length'].iloc[0], 10)\n        self.assertEqual(result['text_length'].iloc[1], 13)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist. ValueError: If no files matching the pattern are found.\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n```",
        "gt": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport os\ndef create_dummy_files(data_dir):\n    os.makedirs(data_dir, exist_ok=True)\n    # Creating test files\n    test_files_data = {\n        'file1.txt': '123 abc 456',\n        'file2.txt': '789 xyz',\n        'empty.txt': '',\n        'non_numeric.txt': 'abc def',\n        'mixed.txt': 'abc 123 def 456'\n    }\n    for filename, content in test_files_data.items():\n        with open(data_dir + filename, 'w') as file:\n            file.write(content)\ndef tear_down_files(data_dir):\n    for filename in os.listdir(data_dir):\n        os.remove(os.path.join(data_dir, filename))\n    os.rmdir(data_dir)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_data_dir = './test_data/'\n        os.makedirs(self.test_data_dir, exist_ok=True)\n        # Creating test files\n        test_files_data = {\n            'file1.txt': '123 abc 456',\n            'file2.txt': '789 xyz',\n            'empty.txt': '',\n            'non_numeric.txt': 'abc def',\n            'mixed.txt': 'abc 123 def 456'\n        }\n        for filename, content in test_files_data.items():\n            with open(self.test_data_dir + filename, 'w') as file:\n                file.write(content)\n    def tearDown(self):\n        for filename in os.listdir(self.test_data_dir):\n            os.remove(os.path.join(self.test_data_dir, filename))\n        os.rmdir(self.test_data_dir)\n    def test_normal_functionality(self):\n        df = task_func(self.test_data_dir)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 5)  # Number of files\n        self.assertIn('123', df.loc[df['Filename'] == 'file1.txt', 'Numeric Data'].values[0])\n        df_list = df.apply(lambda row: ','.join(str(e) for e in row), axis=1).tolist()\n        # Write the DataFrame to a file for inspection\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(df_list))\n        expect = ['empty.txt,[]', \"file1.txt,['123', '456']\", \"file2.txt,['789']\", \"mixed.txt,['123', '456']\", 'non_numeric.txt,[]']\n        self.assertEqual(df_list, expect)\n    def test_directory_not_exist(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('./nonexistent_directory/')\n    def test_no_matching_files(self):\n        with self.assertRaises(ValueError):\n            task_func(self.test_data_dir, '*.csv')\n    def test_empty_file(self):\n        df = task_func(self.test_data_dir)\n        self.assertEqual([], df.loc[df['Filename'] == 'empty.txt', 'Numeric Data'].values[0])\n    def test_mixed_content_file(self):\n        df = task_func(self.test_data_dir)\n        self.assertIn('123', df.loc[df['Filename'] == 'mixed.txt', 'Numeric Data'].values[0])\n        self.assertIn('456', df.loc[df['Filename'] == 'mixed.txt', 'Numeric Data'].values[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a pair plot from a numeric DataFrame and calculates its covariance matrix.\nThe function should raise the exception for: ValueError: If the DataFrame is empty. TypeError: If the DataFrame contains non-numeric data types.\nThe function should output with:\n    tuple:\n    covariance_df (pandas.DataFrame): The covariance matrix of the input DataFrame.\n    pair_plot (sns.axisgrid.PairGrid): Pair plot of the input DataFrame.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport numpy as np\ndef task_func(df):\n```",
        "gt": "import seaborn as sns\nimport numpy as np\ndef task_func(df):\n    if df.empty:\n        raise ValueError(\"DataFrame is empty. Non-empty DataFrame required.\")\n    if not all(df.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise TypeError(\n            \"DataFrame contains non-numeric data. Only numeric data types are supported.\"\n        )\n    covariance_df = df.cov()\n    pair_plot = sns.pairplot(df)\n\n    return covariance_df, pair_plot",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_covariance_one(self):\n        \"\"\"Test basic case with expected covariance of 1.0\"\"\"\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        covariance_df, _ = task_func(df)\n        self.assertTrue((covariance_df == 1).all().all())\n    def test_identical_values_dataframe(self):\n        \"\"\"Test DataFrame where all rows have identical values.\"\"\"\n        df = pd.DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2]})\n        covariance_df, _ = task_func(df)\n        self.assertTrue((covariance_df == 0).all().all())\n    def test_with_empty_dataframe(self):\n        \"\"\"Test handling empty input (should raise error).\"\"\"\n        df = pd.DataFrame()\n        with self.assertRaises(ValueError):\n            task_func(df)\n    def test_with_non_numeric_dataframe(self):\n        \"\"\"Test handling unsupported data types.\"\"\"\n        df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\"], \"B\": [\"d\", \"e\", \"f\"]})\n        with self.assertRaises(TypeError):\n            task_func(df)\n    def test_plot_attributes(self):\n        \"\"\"Test plot attributes.\"\"\"\n        df = pd.DataFrame({\"X\": [10, 20, 30], \"Y\": [15, 25, 35]})\n        _, pair_plot = task_func(df)\n        self.assertIsInstance(pair_plot, sns.axisgrid.PairGrid)\n        self.assertEqual(len(pair_plot.axes), 2)  # Should have 2x2 grid for pair plot\n    def test_single_column_dataframe(self):\n        \"\"\"Test handling of DataFrame with a single numeric column.\"\"\"\n        df = pd.DataFrame({\"A\": [1, 2, 3]})\n        covariance_df, _ = task_func(df)\n        self.assertEqual(covariance_df.loc[\"A\"].item(), 1.0)\n        self.assertEqual(covariance_df.shape, (1, 1))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process a Pandas DataFrame by removing a specific column and adding a 'IsEvenIndex' column. The 'IsEvenIndex' column is a boolean flag indicating if the index of each row is even.\nThe function should output with:\n    df (pd.DataFrame): The processed pandas DataFrame with the specified column removed and a new 'IsEvenIndex' column added.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(df, col):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(df, col):\n    # Remove specified column using pandas\n    updated_df = pd.DataFrame(df).drop(col, axis=1)\n    \n    # Add a new column 'IsEvenIndex' using numpy to determine if index is even\n    # The np.arange(len(updated_df)) creates an array of indexes, % 2 == 0 checks if they are even\n    updated_df['IsEvenIndex'] = np.arange(len(updated_df)) % 2 == 0\n    \n    return updated_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n        df = task_func(df, 'A')\n        self.assertEqual(df.shape, (100, 4))\n        self.assertFalse('A' in df.columns)\n    def test_case_2(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n        df = task_func(df, 'B')\n        self.assertEqual(df.shape, (100, 4))\n        self.assertFalse('B' in df.columns)\n    def test_case_3(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n        df = task_func(df, 'C')\n        self.assertEqual(df.shape, (100, 4))\n        self.assertFalse('C' in df.columns)\n    def test_case_4(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n        df = task_func(df, 'D')\n        self.assertEqual(df.shape, (100, 4))\n        self.assertFalse('D' in df.columns)\n    def test_case_5(self):\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n        df = task_func(df, 'A')\n        self.assertEqual(df.shape, (100, 4))\n        self.assertFalse('A' in df.columns)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a noisy sine wave of a specified length and adjusts a curve using curve_fit from scipy.optimize to the data.\nThe function should output with:\n    Axes object: A plot showing the noisy sine wave and its adjusted curve.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n```",
        "gt": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100, noise_level=0.2):\n    x = np.linspace(0, 4*np.pi, array_length)\n    y = np.sin(x) + noise_level * np.random.rand(array_length)\n\n    def func(x, a, b):\n        return a * np.sin(b * x)\n\n    popt, pcov = curve_fit(func, x, y, p0=[1, 1])\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'b-', label='data')\n    ax.plot(x, func(x, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f' % tuple(popt))\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n    \n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with default parameters\n        ax = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines), 2)\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n        self.assertTrue(ax.get_legend() is not None)\n    def test_case_4(self):\n        # Test with custom array_length and noise_level\n        ax = task_func(array_length=150, noise_level=0.1)\n        self.assertIsInstance(ax, plt.Axes)\n        x_data, y_data = ax.lines[0].get_data()\n        self.assertEqual(len(x_data), 150)\n        self.assertTrue(np.max(np.abs(np.diff(y_data))) <= 0.1 + 1)  # considering max amplitude of sine wave\n    def test_case_5(self):\n        # Test with very high noise_level\n        ax = task_func(noise_level=2.0)\n        self.assertIsInstance(ax, plt.Axes)\n        _, y_data = ax.lines[0].get_data()\n        self.assertTrue(np.max(np.abs(np.diff(y_data))) <= 2.0 + 1)  # considering max amplitude of sine wave\n    def test_varying_noise_levels(self):\n        \"\"\"Test the function with different noise levels.\"\"\"\n        for noise in [0, 0.1, 0.5]:\n            ax = task_func(noise_level=noise)\n            self.assertIsInstance(ax, plt.Axes)\n    def test_plot_outputs(self):\n        \"\"\"Check the output to confirm plot was created.\"\"\"\n        ax = task_func()\n        self.assertTrue(hasattr(ax, 'figure'), \"Plot does not have associated figure attribute\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Combine a list of dictionaries with the same keys into a single dictionary, turn it into a Pandas DataFrame and create a line plot of the data.\nThe function should output with:\n    matplotlib.axes._axes.Axes or None: Axes object of the plot showing 'Data over Time',\n    with 'Time' on the x-axis and 'Data Points' on the y-axis.\n    If data is empty, return None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n    df = pd.DataFrame(data)\n    plt.figure()\n    for label in df.columns:\n        plt.plot(df[label], label=label)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Data Points\")\n    plt.title(\"Data over Time\")\n    return plt.gca()",
        "test": "import unittest\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data1 = [\n            {\"A\": 10, \"B\": 15, \"C\": 12},\n            {\"A\": 12, \"B\": 20, \"C\": 14},\n            {\"A\": 15, \"B\": 18, \"C\": 15},\n            {\"A\": 11, \"B\": 17, \"C\": 13},\n        ]\n        self.data2 = [\n            {\"X\": 5, \"Y\": 8},\n            {\"X\": 6, \"Y\": 7},\n            {\"X\": 7, \"Y\": 6},\n            {\"X\": 8, \"Y\": 5},\n        ]\n        self.data3 = [{\"P\": 3, \"Q\": 2, \"R\": 4, \"S\": 1}, {\"P\": 4, \"Q\": 3, \"R\": 2, \"S\": 3}]\n        self.data4 = [{\"W\": 7}, {\"W\": 8}, {\"W\": 9}, {\"W\": 6}]\n        self.data5 = [{\"M\": 1, \"N\": 3}, {\"M\": 3, \"N\": 1}]\n    def test_case_1(self):\n        # Test for correct Axes instance and labels for a typical data set\n        ax = task_func(self.data1)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.get_title(), \"Data over Time\")\n        self.assertEqual(ax.get_xlabel(), \"Time\")\n        self.assertEqual(ax.get_ylabel(), \"Data Points\")\n        self.assertEqual(len(ax.lines), 3)\n    def test_case_2(self):\n        # Test for different keys across dictionaries in data list\n        data = [{\"A\": 1, \"B\": 2}, {\"B\": 3, \"C\": 4}, {\"A\": 5, \"C\": 6}]\n        ax = task_func(data)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertTrue(len(ax.lines) > 0)\n    def test_case_3(self):\n        # Test with empty data list\n        self.assertIsNone(task_func([]))\n    def test_case_4(self):\n        # Test with data containing non-numeric values\n        data = [{\"A\": \"text\", \"B\": \"more text\"}, {\"A\": 1, \"B\": 2}]\n        with self.assertRaises(TypeError):\n            task_func(data)\n    def test_case_5(self):\n        # Test with a single entry in the data list\n        data = [{\"A\": 1, \"B\": 2}]\n        ax = task_func(data)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(len(ax.lines), 2)\n    def test_case_6(self):\n        # Test focusing on data processing correctness\n        data = [\n            {\"A\": 10, \"B\": 15, \"C\": 12},\n            {\"A\": 12, \"B\": 20, \"C\": 14},\n            {\"A\": 15, \"B\": 18, \"C\": 15},\n            {\"A\": 11, \"B\": 17, \"C\": 13},\n        ]\n        ax = task_func(data)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        # Convert input data to DataFrame for easy comparison\n        input_df = pd.DataFrame(data)\n        # Iterate through each line in the plot and check against the input data\n        for line in ax.lines:\n            label = line.get_label()\n            _, y_data = line.get_data()\n            expected_y_data = input_df[label].values\n            # Use numpy to compare the y_data from plot and expected data from input\n            np.testing.assert_array_equal(\n                y_data, expected_y_data, err_msg=f\"Data mismatch for label {label}\"\n            )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Apply a Gaussian filter to a given image and draw the original and filtered images side by side.\nThe function should raise the exception for: ValueError: If sigma is non-positive. TypeError: If the input is not a numpy array.\nThe function should output with:\n    ax (matplotlib.axes.Axes): Axes object containing the plot. Two plots with titles 'Original' and 'Filtered'.\n    filtered_image (numpy.ndarray): The numpy array of pixel values for the filtered image.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter\ndef task_func(image, sigma=2):\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"The image must be a numpy array.\")\n    if sigma <= 0:\n        raise ValueError(\"Sigma must be positive.\")\n\n    filtered_image = gaussian_filter(image, sigma=sigma)\n\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n    ax[0].imshow(image, cmap=plt.cm.gray)\n    ax[0].set_title('Original')\n\n    ax[1].imshow(filtered_image, cmap=plt.cm.gray)\n    ax[1].set_title('Filtered')\n\n    return ax, filtered_image",
        "test": "import unittest\nfrom skimage import data\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_return_types(self):\n        image = data.coins()\n        ax, filtered_image = task_func(image)\n        self.assertIsInstance(ax, np.ndarray, \"ax is not a numpy array\")\n        self.assertIsInstance(filtered_image, np.ndarray, \"filtered_image is not a numpy array\")\n    def test_error_on_non_positive_sigma(self):\n        image = data.coins()\n        with self.assertRaises(ValueError):\n            task_func(image, sigma=0)\n    def test_error_on_invalid_image_type(self):\n        invalid_image = \"not an image\"\n        with self.assertRaises(TypeError):\n            task_func(invalid_image)\n    def test_subplot_titles(self):\n        image = data.coins()\n        ax, _ = task_func(image)\n        self.assertEqual(ax[0].get_title(), 'Original', \"Title of the first subplot is incorrect\")\n        self.assertEqual(ax[1].get_title(), 'Filtered', \"Title of the second subplot is incorrect\")\n    def test_filtered_image_difference(self):\n        image = data.coins()\n        _, filtered_image = task_func(image)\n        expect = gaussian_filter(image, sigma=2)\n        self.assertFalse(np.array_equal(image, filtered_image), \"Filtered image is not different from the original\")\n        self.assertEqual(expect.tolist(), filtered_image.tolist(), \"Filtered image is not different from the original\")\n    def test_sigma_blurring_effect(self):\n        image = data.coins()\n        _, filtered_image = task_func(image, sigma=2)\n        _, filtered_image_high_sigma = task_func(image, sigma=5)\n        diff_original = np.sum(np.abs(image - filtered_image))\n        diff_high_sigma = np.sum(np.abs(image - filtered_image_high_sigma))\n        self.assertGreater(diff_high_sigma, diff_original, \"Higher sigma does not increase blurring\")\n    def test_different_images(self):\n        images = [data.coins(), data.camera(), data.astronaut()]\n        for img in images:\n            _, filtered_image = task_func(img)\n            self.assertEqual(filtered_image.shape, img.shape, \"Filtered image shape does not match original image shape\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Series from a list \"l\". The function shuffles the list, then creates a longer series by cycling through the shuffled list. For each element in the series, it randomly selects n_groups characters from the start of the string and moves them to the end.\nThe function should output with:\n    pd.Series: A Series where each element is modified by moving \"n\"\n    characters from the start to the end.\nYou should write self-contained code starting with:\n```\nfrom random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n```",
        "gt": "from random import shuffle, randint\nimport pandas as pd\ndef task_func(l, n_groups = 5):\n    if not l:\n        return pd.Series()\n\n    # Shuffle list once\n    shuffle(l)\n    # Precompute random indices for each element to avoid calling randint excessively\n    random_shifts = [(randint(1, max(1, len(x) - 1)), randint(1, max(1, len(x) - 1))) for x in l]\n\n    # Create the full list by applying the precomputed shifts\n    modified_elements = []\n    for _ in range(n_groups):\n        for element, (start, end) in zip(l, random_shifts):\n            new_element = element[start:] + element[:end] if len(element) > 1 else element\n            modified_elements.append(new_element)\n\n    # Convert the list to a Series\n    return pd.Series(modified_elements)",
        "test": "import unittest\n# Constants\nN_GROUPS = 5\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Initialize common variables for testing\n        self.elements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n        self.n_groups = 5\n    def test_series_length(self):\n        \"\"\"Test the length of the series is as expected.\"\"\"\n        series = task_func(self.elements.copy())\n        expected_length = len(self.elements) * self.n_groups\n        self.assertEqual(len(series), expected_length, \"The series length should match the expected length.\")\n    def test_empty_list(self):\n        \"\"\"Test the function with an empty list to ensure it returns an empty Series.\"\"\"\n        series = task_func([])\n        self.assertTrue(series.empty, \"The series should be empty when the input list is empty.\")\n    def test_single_element_list(self):\n        \"\"\"Test the function with a single-element list.\"\"\"\n        series = task_func(['X'])\n        self.assertTrue(all([x == 'X' for x in series]),\n                        \"All entries in the series should be 'X' for a single-element input.\")\n    def test_elements_preserved(self):\n        \"\"\"Test that all original elements are present in the output series.\"\"\"\n        series = task_func(self.elements.copy())\n        unique_elements_in_series = set(''.join(series))\n        self.assertTrue(set(self.elements) <= unique_elements_in_series,\n                        \"All original elements should be present in the series.\")\n    def test_with_repeated_elements(self):\n        \"\"\"Test the function with a list containing repeated elements.\"\"\"\n        repeated_elements = ['A', 'A', 'B', 'B', 'C', 'C']\n        series = task_func(repeated_elements)\n        # Check if the series length is correct, considering repetitions\n        expected_length = len(repeated_elements) * self.n_groups\n        self.assertEqual(len(series), expected_length,\n                         \"The series length should correctly reflect the input list with repetitions.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Protects all double quotes in all Excel (.xlsx) files in the specified directory by prefixing them with a double backslash.\nThe function should output with:\n    int: The number of Excel files processed.\nYou should write self-contained code starting with:\n```\nimport regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n```",
        "gt": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\ndef task_func(directory_path='./xlsx_files/'):\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError('The specified directory does not exist.')\n    xlsx_files = glob.glob(directory_path + '/*.xlsx')\n    processed_files = 0\n\n    for xlsx_file in xlsx_files:\n        workbook = load_workbook(filename=xlsx_file)\n\n        for sheet in workbook.sheetnames:\n            for row in workbook[sheet].iter_rows():\n                for cell in row:\n                    if isinstance(cell.value, str):\n                        cell.value = re.sub(r'(?<=(^|[^\\\\])(\\\\\\\\)*)\"', r'\\\"',\n                                            cell.value)\n\n        workbook.save(xlsx_file)\n        processed_files += 1\n\n    return processed_files",
        "test": "import unittest\nimport os\nimport shutil\nfrom openpyxl import load_workbook, Workbook\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_directory = f\"{self.base_tmp_dir}/test/\"\n        os.makedirs(self.test_directory, exist_ok=True)\n        # Mock data for Excel files\n        file_data = [\n            {\n                \"filename\": \"file1.xlsx\",\n                \"sheets\": {\n                    \"Sheet1\": [\n                        [\"Hello\", \"World\", \"This is a \\\"test\\\" string.\"],\n                        [\"Another\", \"Row with \\\"quotes\\\"\", \"And \\\"more\\\" quotes.\"]\n                    ]\n                }\n            },\n            {\n                \"filename\": \"file2.xlsx\",\n                \"sheets\": {\n                    \"Sheet1\": [\n                        [\"Just a\", \"Normal row.\", \"Nothing special.\"],\n                        [\"Another\", \"normal row.\", \"Still nothing special.\"]\n                    ],\n                    \"Sheet2\": [\n                        [\"Sheet2 data.\", \"Another \\\"quoted\\\" string.\", \"End of row.\"]\n                    ]\n                }\n            },\n            {\n                \"filename\": \"file3.xlsx\",\n                \"sheets\": {\n                    \"Sheet1\": [\n                        [\"A simple\", \"row without\", \"any quotes.\"]\n                    ]\n                }\n            }\n        ]\n        # Create the Excel files based on the mock data\n        for file_info in file_data:\n            workbook = Workbook()\n            workbook.remove(workbook.active)  # Remove default sheet\n            for sheet_name, rows in file_info[\"sheets\"].items():\n                sheet = workbook.create_sheet(title=sheet_name)\n                for row in rows:\n                    sheet.append(row)\n            workbook.save(\n                filename=os.path.join(self.test_directory, file_info[\"filename\"]))\n    def tearDown(self):\n        # Remove the test directory\n        if os.path.exists(self.test_directory):\n            shutil.rmtree(self.test_directory)\n    def test_case_1(self):\n        # Process the mock Excel files\n        processed_files_count = task_func(directory_path=self.test_directory)\n        # Check the number of processed files\n        self.assertEqual(processed_files_count, 3)\n        # Check the content of file1.xlsx\n        workbook = load_workbook(\n            filename=os.path.join(self.test_directory, \"file1.xlsx\"))\n        sheet = workbook.active\n        self.assertEqual(sheet.cell(row=1, column=3).value,\n                         'This is a \\\\\"test\\\\\" string.')\n        self.assertEqual(sheet.cell(row=2, column=2).value, 'Row with \\\\\"quotes\\\\\"')\n        self.assertEqual(sheet.cell(row=2, column=3).value, 'And \\\\\"more\\\\\" quotes.')\n    def test_case_2(self):\n        # Check the content of file2.xlsx\n        workbook = load_workbook(\n            filename=os.path.join(self.test_directory, \"file2.xlsx\"))\n        sheet1 = workbook[\"Sheet1\"]\n        self.assertEqual(sheet1.cell(row=1, column=1).value, 'Just a')\n        sheet2 = workbook[\"Sheet2\"]\n        self.assertEqual(sheet2.cell(row=1, column=2).value,\n                         \"Another \\\"quoted\\\" string.\")\n    def test_case_3(self):\n        # Check the content of file3.xlsx\n        workbook = load_workbook(\n            filename=os.path.join(self.test_directory, \"file3.xlsx\"))\n        sheet = workbook.active\n        self.assertEqual(sheet.cell(row=1, column=1).value, 'A simple')\n    def test_case_4(self):\n        # Test with a directory that doesn't exist\n        with self.assertRaises(FileNotFoundError):\n            task_func(directory_path=\"/invalid/directory/\")\n    def test_case_5(self):\n        # Test with a directory that contains no .xlsx files\n        os.makedirs(f\"{self.test_directory}/empty_directory/\", exist_ok=True)\n        processed_files_count = task_func(\n            directory_path=f\"{self.test_directory}/empty_directory/\")\n        self.assertEqual(processed_files_count, 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with columns 'columns' and fill them with random values. Scale the columns at the provided indexes with sklearn StandardScaler. If scale_cols is empty no column is scaled >>> df = task_func(5, [1, 2, 3], random_seed=12) >>> print(df) A         B         C         D   E 0  75 -0.840307 -0.791926 -1.462784   3 1  67  0.673481  1.517859 -0.855820  49 2  52 -1.519967 -0.406962  1.177511  34 3  75  0.611694 -1.121896  0.782984  13 4  82  1.075099  0.802925  0.358109  35\nThe function should output with:\n    DataFrame: The resulting DataFrame after scaling the selected columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(n_rows, scale_cols, columns=['A', 'B', 'C', 'D', 'E'], random_seed=None):\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    \n    for i in scale_cols:\n        scaler = StandardScaler()\n        df[columns[i]] = scaler.fit_transform(df[[columns[i]]])\n    \n    return df",
        "test": "import unittest\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func(10, [0], random_seed=42)\n        self.assertEqual(len(df), 10)\n        self.assertEqual(list(df.columns), ['A', 'B', 'C', 'D', 'E'])\n        self.assertAlmostEqual(df['A'].mean(), 0.0, delta=0.2)\n        self.assertAlmostEqual(df['A'].std(), 1.0, delta=0.5)\n        expected = pd.DataFrame({\n            'A': {0: -0.20549386391116023,\n              1: -1.343049181990797,\n              2: 1.1155381183748696,\n              3: -0.16879853106988163,\n              4: -2.0402605059750907,\n             5: 0.6751941242795263,\n             6: 1.2256241168987054,\n             7: 0.8219754556446407,\n             8: 0.16145946450162582,\n             9: -0.24218919675243883},\n            'B': {0: 92, 1: 82, 2: 99, 3: 1, 4: 63, 5: 57, 6: 58, 7: 14, 8: 50, 9: 6},\n            'C': {0: 14, 1: 86, 2: 23, 3: 87, 4: 59, 5: 21, 6: 41, 7: 61, 8: 54, 9: 20},\n            'D': {0: 71, 1: 74, 2: 2, 3: 29, 4: 20, 5: 88, 6: 91, 7: 61, 8: 63, 9: 72},\n            'E': {0: 60, 1: 74, 2: 21, 3: 37, 4: 32, 5: 48, 6: 59, 7: 46, 8: 2, 9: 38}}\n        )\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False)\n    def test_case_2(self):\n        df = task_func(500, [1, 3], random_seed=1)\n        self.assertEqual(len(df), 500)\n        self.assertAlmostEqual(df['B'].mean(), 0.0, places=5)\n        self.assertAlmostEqual(df['B'].std(), 1.0, places=1)\n        self.assertAlmostEqual(df['D'].mean(), 0.0, places=5)\n        self.assertAlmostEqual(df['D'].std(), 1.0, places=1)\n    def test_case_3(self):\n        df = task_func(50, [])\n        self.assertEqual(len(df), 50)\n        self.assertNotEqual(df['A'].mean(), 0.0)\n        self.assertNotEqual(df['A'].std(), 1.0)\n    def test_case_4(self):\n        df = task_func(200, [0, 1, 2, 3, 4])\n        self.assertEqual(len(df), 200)\n        for col in ['A', 'B', 'C', 'D', 'E']:\n            self.assertAlmostEqual(df[col].mean(), 0.0, places=5)\n            self.assertAlmostEqual(df[col].std(), 1.0, places=1)\n    def test_case_5(self):\n        df = task_func(1, [2])\n        self.assertEqual(len(df), 1)\n        self.assertEqual(df['C'].iloc[0], 0.0)\n        # For a single-row DataFrame, the standard deviation will be NaN.\n        self.assertTrue(pd.isna(df['C'].std()))\n    def test_rng(self):\n        df1 = task_func(50, [1, 2], random_seed=2)\n        df2 = task_func(50, [1, 2], random_seed=2)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_custom_columns(self):\n        df = task_func(10, [1], columns=['test', 'scale'], random_seed=12)\n        expected = pd.DataFrame({\n            'test': {0: 75, 1: 6, 2: 3, 3: 76, 4: 22, 5: 52, 6: 13, 7: 34, 8: 74, 9: 76},\n            'scale': {0: -0.33880664428931573,\n            1: -1.1454891306924484,\n            2: 0.9518853339556965,\n            3: 0.33880664428931573,\n            4: 0.37107394374544106,\n            5: -1.0486872323240726,\n            6: 1.6617659219904533,\n            7: 1.210023729604699,\n            8: -1.210023729604699,\n            9: -0.79054883667507}\n        })\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates and return a heatmap of the cumulative sum of each column in a dictionary.\nNote that: Notes: Only numeric columns are considered for the heatmap. Non-numeric columns are ignored.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or if no numeric columns are present.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object of the Seaborn heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n    df = pd.DataFrame(data)\n    numeric_df = df.select_dtypes(include=[\"number\"])\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns present\")\n\n    df_cumsum = numeric_df.cumsum()\n    ax = sns.heatmap(df_cumsum)\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        plt.close(\"all\")\n    def test_cumsum_correctness(self):\n        data = {\"A\": [1, 2, 3], \"B\": [4, 5, 6]}\n        df = pd.DataFrame(data)\n        ax = task_func(data)\n        result_cumsum = df.cumsum().values.flatten()\n        heatmap_data = ax.collections[0].get_array().data.flatten()\n        np.testing.assert_array_equal(\n            result_cumsum, heatmap_data, \"Cumulative sum calculation is incorrect\"\n        )\n    def test_non_numeric_columns_ignored(self):\n        data = {\"A\": [1, 2, 3], \"B\": [\"one\", \"two\", \"three\"]}\n        ax = task_func(data)\n        self.assertIsInstance(\n            ax, plt.Axes, \"The result should be a matplotlib Axes object\"\n        )\n        self.assertEqual(\n            len(ax.get_xticklabels()), 1, \"Non-numeric columns should be ignored\"\n        )\n    def test_with_positive_numbers(self):\n        data = {\"A\": [1, 2, 3], \"B\": [4, 5, 6]}\n        result = task_func(data)\n        self.assertIsInstance(\n            result, plt.Axes, \"The result should be a matplotlib Axes object\"\n        )\n    def test_with_negative_numbers(self):\n        data = {\"A\": [-1, -2, -3], \"B\": [-4, -5, -6]}\n        result = task_func(data)\n        self.assertIsInstance(\n            result, plt.Axes, \"The result should be a matplotlib Axes object\"\n        )\n    def test_with_mixed_numbers(self):\n        data = {\"A\": [1, -2, 3], \"B\": [-4, 5, -6]}\n        result = task_func(data)\n        self.assertIsInstance(\n            result, plt.Axes, \"The result should be a matplotlib Axes object\"\n        )\n    def test_with_zeroes(self):\n        data = {\"A\": [0, 0, 0], \"B\": [0, 0, 0]}\n        result = task_func(data)\n        self.assertIsInstance(\n            result, plt.Axes, \"The result should be a matplotlib Axes object\"\n        )\n    def test_with_empty_dataframe(self):\n        data = {\"A\": [], \"B\": []}\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_no_numeric_columns(self):\n        data = {\"A\": [\"one\", \"two\", \"three\"], \"B\": [\"four\", \"five\", \"six\"]}\n        with self.assertRaises(ValueError):\n            task_func(data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process the given dictionary by performing the following operations: 1. Add a key \"a\" with a value of 1. 2. Generate a random salt of length 5 using lowercase ASCII letters. 3. For each key-value pair in the dictionary, concatenate the value with the generated salt, hash the concatenated string using SHA-256, and update the value with the hashed string. 4. Add a 'timestamp' key with the current UNIX timestamp as its value.\nThe function should output with:\n    dict: The processed dictionary with the hashed values and added keys.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n```",
        "gt": "import random\nimport string\nimport hashlib\nimport time\ndef task_func(data_dict: dict, seed=0) -> dict:\n    random.seed(seed)\n    # Constants\n    SALT_LENGTH = 5\n    \n    # Add the key 'a' with value 1\n    data_dict.update(dict(a=1))\n\n    # Generate a random salt\n    salt = ''.join(random.choice(string.ascii_lowercase) for _ in range(SALT_LENGTH))\n\n    # Concatenate the salt with the values and hash the concatenated string\n    for key in data_dict.keys():\n        data_dict[key] = hashlib.sha256((str(data_dict[key]) + salt).encode()).hexdigest()\n\n    # Timestamp the process\n    data_dict['timestamp'] = time.time()\n\n    return data_dict",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with a simple dictionary\n        result = task_func({'key': 'value'})\n        # The result should have 3 keys now: key, a, and timestamp\n        self.assertIn('key', result)\n        self.assertIn('a', result)\n        self.assertIn('timestamp', result)\n        # The value for 'a' should be hashed\n        self.assertNotEqual(result['a'], '1')\n        self.assertEqual(result['key'], '8691a011016e0fba3c2b0b8a26e4c9c722975f1defe42f580ab55a9c97dfccf8')\n        self.assertEqual(result['a'], '373f3d39a5d5075dfb4503ebe44f70eed8a48e1a32be02d182b2a26695c6f694')\n        self.assertIsInstance(result['timestamp'], float)\n    def test_case_2(self):\n        # Testing with an empty dictionary\n        result = task_func({})\n        # The result should have 2 keys now: a, and timestamp\n        self.assertIn('a', result)\n        self.assertIn('timestamp', result)\n    def test_case_3(self):\n        # Testing with a dictionary having multiple key-value pairs\n        result = task_func({'first': '1', 'second': '2'})\n        # The result should have 4 keys now: first, second, a, and timestamp\n        self.assertIn('first', result)\n        self.assertIn('second', result)\n        self.assertIn('a', result)\n        self.assertIn('timestamp', result)\n        # The values should be hashed\n        self.assertNotEqual(result['first'], '1')\n        self.assertNotEqual(result['second'], '2')\n    def test_case_4(self):\n        # Testing with a dictionary having non-string values\n        result = task_func({'number': 123, 'float': 45.67}, seed=11)\n        # The result should have 4 keys now: number, float, a, and timestamp\n        self.assertIn('number', result)\n        self.assertIn('float', result)\n        self.assertIn('a', result)\n        self.assertIn('timestamp', result)\n        # The values should be hashed\n        self.assertNotEqual(result['number'], '123')\n        self.assertNotEqual(result['float'], '45.67')\n        self.assertEqual(result['number'], '99a44a377de81b704fcc13054924e260927064689112828e9385597a93d65f76')\n        self.assertEqual(result['float'], '69e1ba5bed469d999e8d79b4ddbd5a96671502264c0bb0b005ded4e4d5057f16')\n        self.assertEqual(result['a'], 'c2189c194ccc63dc89a683f1b0e9682a423681074b4a69832de82ed4eaaa2ac7')\n        self.assertIsInstance(result['timestamp'], float)\n    def test_case_5(self):\n        # Testing with a dictionary having special characters in values\n        result = task_func({'special': '!@#$%^'})\n        # The result should have 3 keys now: special, a, and timestamp\n        self.assertIn('special', result)\n        self.assertIn('a', result)\n        self.assertIn('timestamp', result)\n        # The values should be hashed\n        self.assertNotEqual(result['special'], '!@#$%^')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame representing monthly sales of products and visualize the total sales. The function creates a DataFrame where each row represents a month, each column represents a product, and cell values represent sales figures. It then plots the total sales per product across all months using both a line plot and a heatmap for visualization. The function also displays: - A line plot showing the total sales per product. - A heatmap visualizing sales figures across products and months.\nThe function should output with:\n    pd.DataFrame: A DataFrame with randomly generated sales figures for each product over 12 months.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nPRODUCTS = ['Product' + str(i) for i in range(1, 6)]\nMONTHS = ['Month' + str(i) for i in range(1, 13)]\ndef task_func():\n    sales = np.random.randint(100, 1001, size=(len(MONTHS), len(PRODUCTS)))\n    df = pd.DataFrame(sales, index=MONTHS, columns=PRODUCTS)\n\n    # Visualizations\n    total_sales = df.sum()\n    plt.figure(figsize=(10, 5))\n    total_sales.plot(kind='line', title='Total Sales per Product')\n    plt.ylabel('Total Sales')\n    plt.show()\n\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(df, annot=True, fmt=\"d\", cmap='viridis')\n    plt.title('Monthly Sales per Product')\n    plt.show()\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_dataframe_shape(self):\n        \"\"\"Test if the DataFrame has the correct shape.\"\"\"\n        df = task_func()\n        self.assertEqual(df.shape, (12, 5))  # 12 months and 5 products\n    def test_dataframe_columns(self):\n        \"\"\"Test if the DataFrame has the correct column names.\"\"\"\n        df = task_func()\n        expected_columns = PRODUCTS\n        self.assertListEqual(list(df.columns), expected_columns)\n    def test_dataframe_index(self):\n        \"\"\"Test if the DataFrame has the correct index.\"\"\"\n        df = task_func()\n        expected_index = MONTHS\n        self.assertListEqual(list(df.index), expected_index)\n    def test_sales_range(self):\n        \"\"\"Test if sales figures are within the expected range.\"\"\"\n        df = task_func()\n        self.assertTrue((df >= 100).all().all() and (df <= 1000).all().all())\n    def test_returns_dataframe(self):\n        \"\"\"Test if the function returns a pandas DataFrame.\"\"\"\n        df = task_func()\n        self.assertIsInstance(df, pd.DataFrame)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a CSV file into a Pandas DataFrame and then delete the entire contents of the original file.\nThe function should raise the exception for: FileNotFoundError: If the CSV file does not exist.\nThe function should output with:\n    DataFrame: The contents of the CSV file as a pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n```",
        "gt": "import os\nimport pandas as pd\ndef task_func(filename: str) -> pd.DataFrame:\n    if not os.path.exists(filename):\n        raise FileNotFoundError(f\"No such file: '{filename}'\")\n\n    if os.stat(filename).st_size == 0:\n        # File is empty, return an empty DataFrame with no columns.\n        return pd.DataFrame()\n\n    df = pd.read_csv(filename)\n\n    # Erase the original file's content using a context manager to handle the file properly\n    with open(filename, 'w') as file:\n        file.truncate()\n\n    return df",
        "test": "import unittest\nimport shutil\nOUTPUT_DIR = r'./output'\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.output_dir = OUTPUT_DIR\n        if not os.path.exists(self.output_dir):\n            os.makedirs(self.output_dir)\n        self.test_file = os.path.join(self.output_dir, 'test.csv')\n        with open(self.test_file, 'w') as f:\n            f.write(\"col1,col2\\n1,2\\n3,4\")\n        # Debugging: Verify file content immediately after writing\n        with open(self.test_file, 'r') as f:\n            content = f.read()\n        print(f\"Debug: Content written to {self.test_file}: {content}\")\n    def tearDown(self):\n        # Clean up by removing the test file and the test_data directory\n        shutil.rmtree(self.output_dir, ignore_errors=True)\n    def test_file_not_found(self):\n        \"\"\"Test the function with a filename that does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent.csv')\n    def test_file_removal(self):\n        \"\"\"Ensure the function does not remove the file, only erases contents.\"\"\"\n        task_func(self.test_file)\n        self.assertTrue(os.path.exists(self.test_file))\n    def test_empty_csv(self):\n        \"\"\"Test reading an empty CSV file.\"\"\"\n        open(self.test_file, 'w').close()  # Ensure the file is empty\n        df = task_func(self.test_file)\n        self.assertTrue(df.empty, \"DataFrame should be empty for an empty CSV file.\")\n        self.assertEqual(os.path.getsize(self.test_file), 0, \"The file should still be erased.\")\n    def test_file_is_erased_after_reading(self):\n        \"\"\"Ensure the CSV file is erased after its content is read into a DataFrame.\"\"\"\n        _ = task_func(self.test_file)\n        # Check that the file exists but its content is erased\n        self.assertTrue(os.path.exists(self.test_file), \"The file should still exist.\")\n        self.assertEqual(os.path.getsize(self.test_file), 0, \"The file's content should be erased.\")\n    def test_handling_non_existent_file(self):\n        \"\"\"Test the function's response to being given a non-existent file path.\"\"\"\n        non_existent_file = os.path.join(self.output_dir, 'non_existent.csv')\n        with self.assertRaises(FileNotFoundError, msg=\"Expected FileNotFoundError for non-existent file.\"):\n            _ = task_func(non_existent_file)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract all URLs from a string-serialized JSON dict using a specific URL pattern and return a dict with the URLs as keys and the number of times they appear as values.\nThe function should output with:\n    dict: A dict with URLs as keys and the number of times they appear as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n```",
        "gt": "import re\nimport json\nfrom collections import Counter\ndef task_func(json_str, top_n=10):\n    pattern = r'(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})'\n    data = json.loads(json_str)\n    urls = []\n\n    def extract(dictionary):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                extract(value)\n            elif isinstance(value, str) and re.match(pattern, value):\n                urls.append(value)\n\n    extract(data)\n    if not urls:\n        return {}\n    elif len(urls) <= top_n:\n        return dict(Counter(urls))\n\n    return dict(Counter(urls).most_common(top_n))",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        json_str = '{\"name\": \"John\", \"website\": \"qwerthttps://www.example.com\"}'\n        result = task_func(json_str)\n        self.assertEqual(result, {})\n    def test_case_2(self):\n        json_str = '{\"name\": \"John\", \"social\": {\"twitter\": \"https://twitter.com/john\", \"linkedin\": \"https://linkedin.com/in/john\"}, \"website\": \"https://linkedin.com/in/john\"}'\n        result = task_func(json_str)\n        self.assertEqual(result, {'https://twitter.com/john': 1, 'https://linkedin.com/in/john': 2})\n        result = task_func(json_str, 1)\n        self.assertEqual(result, {'https://linkedin.com/in/john': 2})\n    def test_case_3(self):\n        json_str = 'This is an adversarial input 0061'\n        with self.assertRaises(json.decoder.JSONDecodeError):\n            result = task_func(json_str)\n    def test_case_4(self):\n        json_str = '{\"name\": \"John\", \"age\": 30}'\n        result = task_func(json_str)\n        self.assertEqual(result, {})\n    def test_case_5(self):\n        json_str = '{\"name\": \"John\", \"website\": \"example.com\", \"blog\": \"www.johnblog.com\"}'\n        result = task_func(json_str)\n        self.assertEqual(result, {'www.johnblog.com': 1})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract numeric data from a Pandas DataFrame based on a specific pattern. The function searches each cell for occurrences of the regex pattern '>number<number>' (e.g., '>1.23<') and replaces the cell content with the extracted numeric value. If no match is found, the cell is replaced with NaN.\nThe function should output with:\n    pd.DataFrame: A modified DataFrame with cells containing the extracted numeric values or NaN.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\nimport numpy as np\n# Constants\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n```",
        "gt": "import re\nimport pandas as pd\nimport numpy as np\n# Constants\nDATA_PATTERN = r'>\\d+\\.\\d+<'\ndef task_func(dataframe, data_pattern=DATA_PATTERN):\n    for col in dataframe.columns:\n        dataframe[col] = dataframe[col].apply(lambda x: float(re.search(data_pattern, x).group(0)[1:-1])\n                                              if pd.notnull(x) and re.search(data_pattern, x) else np.nan)\n    return dataframe",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        df = pd.DataFrame({'A': ['>1.23<', '>4.56<'], 'B': ['>7.89<', '>0.12<']})\n        result = task_func(df)\n        expected = pd.DataFrame({'A': [1.23, 4.56], 'B': [7.89, 0.12]})\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_case_2(self):\n        df = pd.DataFrame({'A': ['1.23', '4.56'], 'B': ['7.89', '0.12']})\n        result = task_func(df)\n        expected = pd.DataFrame({'A': [np.nan, np.nan], 'B': [np.nan, np.nan]})\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_case_3(self):\n        df = pd.DataFrame({'A': ['>1.23<', '4.56'], 'B': ['>7.89<', '0.12']})\n        result = task_func(df)\n        expected = pd.DataFrame({'A': [1.23, np.nan], 'B': [7.89, np.nan]})\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_case_4(self):\n        df = pd.DataFrame({'A': ['>1.23<', None], 'B': [None, '>0.12<']})\n        result = task_func(df)\n        expected = pd.DataFrame({'A': [1.23, np.nan], 'B': [np.nan, 0.12]})\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_case_5(self):\n        df = pd.DataFrame()\n        result = task_func(df)\n        expected = pd.DataFrame()\n        pd.testing.assert_frame_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a seaborn pair plot of the iris dataset using Arial font. This function sets the global font to Arial for better readability and visual appeal. It then generates a pair plot from the iris dataset, where each subplot represents the relationship between two features, colored by species. The plot includes the title 'Iris Dataset Pair Plot' and labels for each feature on the axes.\nThe function should output with:\n    plt.Figure: A matplotlib Figure object containing the seaborn pair plot of the iris dataset. The plot has 'Iris Dataset Pair Plot' as its title. Each subplot's axes are labeled with the corresponding feature names, such as 'sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', and 'petal width (cm)'.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n```",
        "gt": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\ndef task_func():\n\n    plt.rc('font', family='Arial')  # Set the global font to Arial.\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_df['species'] = iris.target\n\n    # Create a pair plot with the hue set to species.\n    pair_plot = sns.pairplot(iris_df, hue='species', vars=iris.feature_names)\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot', fontsize=16)  # Title for the figure\n    return pair_plot.fig",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fig = task_func()\n    def test_figure_type(self):\n        self.assertIsInstance(self.fig, plt.Figure, \"The returned object should be a matplotlib Figure.\")\n    def test_axes_existence(self):\n        self.assertGreater(len(self.fig.axes), 0, \"The figure should contain one or more axes.\")\n    def test_figure_children(self):\n        self.assertGreater(len(self.fig.get_children()), 0, \"The figure should have children.\")\n    def test_plot_labels(self):\n        # Check the first subplot for appropriate labels as a proxy for the rest\n        ax = self.fig.axes[0]\n        self.assertIn('sepal length', ax.get_xlabel() + ax.get_ylabel(), \"Axes labels should include feature names.\")\n    def test_plot_title(self):\n        # Check if the figure has a title set\n        self.assertIsNotNone(self.fig._suptitle, \"The figure should have a title.\")\n        self.assertEqual(self.fig._suptitle.get_text(), 'Iris Dataset Pair Plot', \"The figure title does not match expected.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Remove all special characters, punctuation marks and spaces from a string called \"input _ str\" using regex and then count the frequency of each word.\nThe function should output with:\n    dict: A dictionary with the frequency of each word.\nYou should write self-contained code starting with:\n```\nimport re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n```",
        "gt": "import re\nfrom nltk import word_tokenize\nfrom collections import Counter\ndef task_func(input_str):\n    cleaned_str = re.sub('[^A-Za-z0-9 ]+', '', input_str)\n    words = word_tokenize(cleaned_str)\n    freq_dict = Counter(words)\n\n    return freq_dict",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('Special $#! characters   spaces 888323')\n        expected = {'Special': 1, 'characters': 1, 'spaces': 1, '888323': 1}\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        result = task_func('Hello hello world')\n        expected = {'Hello': 1, 'hello': 1, 'world': 1}\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        result = task_func('')\n        expected = {}\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        result = task_func('123 123 456')\n        expected = {'123': 2, '456': 1}\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        result = task_func('Hello123 #$! 123')\n        expected = {'Hello123': 1, '123': 1}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame with colomns 'Team' and 'Match Result' of the results of football matches for multiple teams, incorporating random goals and penalties. Penalties are converted into fines using a predefined cost.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with columns ['Team', 'Match Result'], detailing each team's goals and accumulated fines.\nYou should write self-contained code starting with:\n```\nfrom random import randint, seed\nimport pandas as pd\n# Method\ndef task_func(goals, penalties, rng_seed=None):\n```",
        "gt": "from random import randint, seed\nimport pandas as pd\n# Method\ndef task_func(goals, penalties, rng_seed=None):\n    # Constants\n    TEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\n    PENALTY_COST = 1000  # in dollars\n\n    if rng_seed is not None:\n        seed(rng_seed)  # Set seed for reproducibility\n\n    match_results = []\n    for team in TEAMS:\n        team_goals = randint(0, abs(goals))\n        team_penalties = randint(0, abs(penalties))\n        penalty_cost = PENALTY_COST * team_penalties\n        result_string = f\"({team_goals} goals, ${penalty_cost})\"\n        match_results.append([team, result_string])\n\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Match Result'])\n\n    return results_df",
        "test": "import unittest\n# Test Suite\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.teams = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\n        self.penalty_cost = 1000  # Match the PENALTY_COST used in task_func\n    def test_goals_and_penalties_within_range(self):\n        \"\"\"Test that goals and penalties fall within specified ranges.\"\"\"\n        max_goals = 5\n        max_penalties = 3\n        df = task_func(max_goals, max_penalties)\n        for _, row in df.iterrows():\n            # Correctly extract goals and penalty cost from the 'Match Result' string\n            match_result = row['Match Result']\n            goals = int(match_result.split(' ')[0][1:])\n            penalty_cost = int(match_result.split('$')[-1][:-1])\n            # Check if goals are within the expected range\n            self.assertTrue(0 <= goals <= max_goals, f\"Goals {goals} not within range 0 to {max_goals}\")\n            # Calculate the maximum possible penalty cost and check it\n            max_penalty_cost = max_penalties * self.penalty_cost\n            self.assertTrue(0 <= penalty_cost <= max_penalty_cost,\n                            f\"Penalty cost {penalty_cost} not within range 0 to {max_penalty_cost}\")\n    def test_negative_input_handling(self):\n        \"\"\"Test that negative inputs are handled correctly.\"\"\"\n        max_goals = -5\n        max_penalties = -3\n        df = task_func(max_goals, max_penalties)\n        for _, row in df.iterrows():\n            # Correctly extract and check values as before, ensuring no negative values are produced\n            match_result = row['Match Result']\n            goals = int(match_result.split(' ')[0][1:])\n            penalty_cost = int(match_result.split('$')[-1][:-1])\n            self.assertTrue(0 <= goals, \"Goals are negative which is not expected\")\n            self.assertTrue(0 <= penalty_cost, \"Penalty cost is negative which is not expected\")\n    def test_zero_goals_and_penalties(self):\n        \"\"\"Test that the function handles 0 goals and 0 penalties correctly.\"\"\"\n        df = task_func(0, 0)\n        for _, row in df.iterrows():\n            match_result = row['Match Result']\n            goals = int(match_result.split(' ')[0][1:])\n            penalty_cost = int(match_result.split('$')[-1][:-1])\n            self.assertEqual(goals, 0, \"Goals should be 0 when max_goals is set to 0\")\n            self.assertEqual(penalty_cost, 0, \"Penalty cost should be 0 when max_penalties is set to 0\")\n    def test_extremely_high_values(self):\n        \"\"\"Test the function with extremely high values for goals and penalties.\"\"\"\n        max_goals = 1000\n        max_penalties = 500\n        df = task_func(max_goals, max_penalties)\n        for _, row in df.iterrows():\n            match_result = row['Match Result']\n            goals = int(match_result.split(' ')[0][1:])\n            penalty_cost = int(match_result.split('$')[-1][:-1])\n            self.assertTrue(0 <= goals <= max_goals, f\"Goals {goals} not within range 0 to {max_goals}\")\n            max_penalty_cost = max_penalties * self.penalty_cost\n            self.assertTrue(0 <= penalty_cost <= max_penalty_cost, f\"Penalty cost {penalty_cost} not within range 0 to {max_penalty_cost}\")\n    def test_mixed_values(self):\n        \"\"\"Test the function with a mix of low and high values for goals and penalties.\"\"\"\n        max_goals = 10\n        max_penalties = 1\n        df = task_func(max_goals, max_penalties)\n        for _, row in df.iterrows():\n            match_result = row['Match Result']\n            goals = int(match_result.split(' ')[0][1:])\n            penalty_cost = int(match_result.split('$')[-1][:-1])\n            self.assertTrue(0 <= goals <= max_goals, f\"Goals {goals} not within range 0 to {max_goals}\")\n            max_penalty_cost = max_penalties * self.penalty_cost\n            self.assertTrue(0 <= penalty_cost <= max_penalty_cost, f\"Penalty cost {penalty_cost} not within range 0 to {max_penalty_cost}\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function should: - Splits the input data into training (70%) and test (30%) sets. - Constructs a Keras Sequential model with one hidden dense layer and sigmoid activation. The input dimension is determined based on the first feature set of X. - Compiles the model using binary cross-entropy loss and SGD optimizer. - Fits the model to the training data in a non-verbose mode. - Plots the Precision-Recall curve for the model based on the test set data.\nNote that: Notes: The plot's x-axis is labeled 'Recall', and the y-axis is labeled 'Precision'. The title of the axes is set to 'Precision-Recall Curve'. The axes object allows for further customization of the plot outside the function.\nThe function should output with:\n    keras.models.Sequential: The trained Keras model.\n    matplotlib.axes._axes.Axes: The matplotlib Axes object for the Precision-Recall curve plot.\nYou should write self-contained code starting with:\n```\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n```",
        "gt": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_curve\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\ndef task_func(X, Y):\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\n    input_dim = X.shape[1]  # Dynamically set input dimension\n\n    model = keras.models.Sequential([keras.layers.Dense(units=1, input_dim=input_dim, activation='sigmoid')])\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.1))\n\n    model.fit(X_train, Y_train, epochs=200, batch_size=1, verbose=0)\n\n    Y_pred = model.predict(X_test, verbose=0).ravel()\n    precision, recall, thresholds = precision_recall_curve(Y_test, Y_pred)\n\n    fig, ax = plt.subplots()  # Modify here to return Axes object\n    ax.plot(recall, precision, label='Precision-Recall curve')\n    ax.set_xlabel('Recall')\n    ax.set_ylabel('Precision')\n    ax.set_title('Precision-Recall Curve')\n    ax.legend(loc='best')\n\n    return model, ax  # Return both the model and the axes object",
        "test": "import unittest\nimport numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import SGD\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Initialize common test data used in multiple test cases.\n        self.X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n        self.Y = np.array([0, 1, 1, 0])\n    def test_model_and_axes_types(self):\n        # Verify if the returned objects include a Keras Sequential model and a matplotlib Axes.\n        model, ax = task_func(self.X, self.Y)\n        self.assertIsInstance(model, Sequential, \"The function should return a Sequential model.\")\n        self.assertIsInstance(ax, Axes, \"The function should return a matplotlib Axes object.\")\n    def test_model_output_shape(self):\n        # Ensure the model's output shape is correct based on the input data.\n        model, _ = task_func(self.X, self.Y)\n        self.assertEqual(model.output_shape, (None, 1), \"The model's output shape should have one dimension for binary classification.\")\n    def test_model_loss(self):\n        # Confirm that the model uses binary cross-entropy as its loss function.\n        model, _ = task_func(self.X, self.Y)\n        self.assertEqual(model.loss, 'binary_crossentropy', \"Binary cross-entropy should be the loss function for the model.\")\n    def test_model_optimizer(self):\n        # Check if the model's optimizer is an instance of SGD.\n        model, _ = task_func(self.X, self.Y)\n        self.assertIsNotNone(model.optimizer)\n        self.assertIsInstance(model.optimizer, SGD, \"The optimizer for the model should be SGD.\")\n    def test_input_dimension_flexibility(self):\n        # Test the model's ability to handle inputs with varying feature dimensions.\n        X_varied = np.array([[0], [1], [2], [3]])\n        Y_varied = np.array([0, 1, 0, 1])\n        model, _ = task_func(X_varied, Y_varied)\n        self.assertEqual(model.input_shape[1], X_varied.shape[1], \"The model should dynamically adapt to the input feature size.\")\n    def test_axes_labels_and_title(self):\n        # Test if the Axes object has the correct title and labels as specified.\n        _, ax = task_func(self.X, self.Y)\n        self.assertEqual(ax.get_title(), 'Precision-Recall Curve', \"The plot's title should be 'Precision-Recall Curve'.\")\n        self.assertEqual(ax.get_xlabel(), 'Recall', \"The plot's x-axis label should be 'Recall'.\")\n        self.assertEqual(ax.get_ylabel(), 'Precision', \"The plot's y-axis label should be 'Precision'.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Archive all files that match a particular pattern and then delete the original files.\nNote that: This function will return the archive file path.\nThe function should output with:\n    archive_file (str): The archive file path.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n```",
        "gt": "import subprocess\nimport os\nimport glob\n# Constants\nARCHIVE_DIR = '/tmp/archive'\ndef task_func(pattern):\n    # Create archive directory if it does not exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n\n    # Get the list of files matching the pattern\n    file_list = glob.glob(pattern)\n    \n    if not file_list:\n        return \"No files found matching the pattern.\"\n\n    # Create a unique archive file name\n    archive_file_base = os.path.join(ARCHIVE_DIR, 'archive')\n    archive_file = archive_file_base + '.tar.gz'\n    counter = 1\n    while os.path.exists(archive_file):\n        archive_file = archive_file_base + f\"_{counter}.tar.gz\"\n        counter += 1\n    \n    # Create an archive file\n    subprocess.run(['tar', '-czf', archive_file] + file_list)\n    \n    # Delete the original files\n    for file in file_list:\n        os.remove(file)\n    \n    return archive_file",
        "test": "import unittest\nimport tarfile\nimport os\nimport glob\nimport unittest\nimport shutil\nfrom unittest.mock import patch, MagicMock\n# Constants for test\nTEST_FILES_DIR = './test_files'\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a directory for test files if it doesn't exist\n        os.makedirs(TEST_FILES_DIR, exist_ok=True)\n        # Create some sample files\n        self.sample_files = ['test1.txt', 'test2.txt', 'image1.jpg', 'image2.jpg']\n        for file in self.sample_files:\n            with open(os.path.join(TEST_FILES_DIR, file), 'w') as f:\n                f.write(\"Sample content for \" + file)\n    def tearDown(self):\n        # Remove the test directory after tests\n        shutil.rmtree(TEST_FILES_DIR)\n        shutil.rmtree(ARCHIVE_DIR)\n    def test_archive_txt_files(self):\n        # Archive txt files and verify\n        archive_path = task_func(os.path.join(TEST_FILES_DIR, '*.txt'))\n        self.assertTrue(os.path.isfile(archive_path))\n        # Ensure original files are deleted\n        for filename in glob.glob(os.path.join(TEST_FILES_DIR, '*.txt')):\n            self.assertFalse(os.path.exists(filename))\n    def test_archive_image_files(self):\n        # Archive image files and verify\n        archive_path = task_func(os.path.join(TEST_FILES_DIR, '*.jpg'))\n        self.assertTrue(os.path.isfile(archive_path))\n        # Check original files are deleted\n        for filename in glob.glob(os.path.join(TEST_FILES_DIR, '*.jpg')):\n            self.assertFalse(os.path.exists(filename))\n    def test_no_matching_files(self):\n        # Test with no matching files\n        result = task_func(os.path.join(TEST_FILES_DIR, '*.pdf'))\n        self.assertEqual(result, \"No files found matching the pattern.\")\n    def test_multiple_archiving_unique_naming(self):\n        # Test that multiple archives are named uniquely\n        task_func(os.path.join(TEST_FILES_DIR, '*.txt'))\n        archive_path1 = task_func(os.path.join(TEST_FILES_DIR, '*.txt'))\n        archive_path2 = task_func(os.path.join(TEST_FILES_DIR, '*.txt'))\n        self.assertEqual(archive_path1, archive_path2)\n    def test_archiving_in_nonexistent_directory(self):\n        # Test archiving when the archive directory does not initially exist\n        if os.path.exists(ARCHIVE_DIR):\n            shutil.rmtree(ARCHIVE_DIR)\n        archive_path = task_func(os.path.join(ARCHIVE_DIR, '*.txt'))\n        self.assertFalse(os.path.isfile(archive_path))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes articles by their titles for specific case-insensitive keywords (\"how\" or \"what\"), vectorizes the content using CountVectorizer, and groups them into clusters using KMeans clustering. This function is intended for basic content analysis and clustering to understand common themes or topics among articles asking questions starting with \"how\" or \"what\".\nThe function should output with:\n    list: List of cluster labels for the filtered articles, indicating the cluster to which each article belongs.\nYou should write self-contained code starting with:\n```\nimport re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n```",
        "gt": "import re\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(df):\n    pattern = re.compile(r'(how|what)', re.IGNORECASE)\n    interesting_articles = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n    if interesting_articles.empty:\n        return []\n\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(interesting_articles['Content'])\n\n    kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)\n    kmeans.fit(X)\n\n    return list(kmeans.labels_)",
        "test": "import unittest\nimport pandas as pd\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Prepare environment and variables for tests.\"\"\"\n        self.df_sample = pd.DataFrame({\n            'Title': ['How to code?', 'What is Python?', 'The art of programming', 'How to cook?', 'What is life?'],\n            'Content': ['This is a tutorial about coding...', 'Python is a programming language...',\n                        'Programming is an art...', 'This is a cooking tutorial...', 'Life is complicated...']\n        })\n        os.environ['OMP_NUM_THREADS'] = '1'  # Setup environment variable for deterministic parallel processing\n    def tearDown(self):\n        \"\"\"Clean up after tests.\"\"\"\n        os.environ.pop('OMP_NUM_THREADS', None)\n    def test_vectorizer_and_clustering(self):\n        \"\"\"Test if the vectorization and clustering are setting up as expected, without mocking.\"\"\"\n        cluster_labels = task_func(self.df_sample)\n        self.assertIn(set(cluster_labels), [{0, 1}])  # We expect two clusters\n        self.assertEqual(len(cluster_labels), 4, \"Expected 4 cluster labels.\")\n    def test_no_matching_articles(self):\n        \"\"\"Test the function with a DataFrame that has no titles containing 'how' or 'what'.\"\"\"\n        df_no_matches = pd.DataFrame({\n            'Title': ['Understanding AI', 'Introduction to Machine Learning'],\n            'Content': ['AI is a broad field.', 'Machine learning is a subset of AI.']\n        })\n        cluster_labels = task_func(df_no_matches)\n        self.assertEqual(len(cluster_labels), 0, \"Expected no cluster labels for DataFrame without matching titles.\")\n    def test_empty_dataframe(self):\n        \"\"\"Test the function with an empty DataFrame.\"\"\"\n        df_empty = pd.DataFrame(columns=['Title', 'Content'])\n        cluster_labels = task_func(df_empty)\n        self.assertEqual(len(cluster_labels), 0, \"Expected no cluster labels for an empty DataFrame.\")\n    def test_invalid_dataframe_structure(self):\n        \"\"\"Test the function with a DataFrame missing required columns.\"\"\"\n        df_invalid = pd.DataFrame({\n            'Headline': ['How to learn Python?'],  # Wrong column name\n            'Body': ['Content about Python.']  # Wrong column name\n        })\n        with self.assertRaises(KeyError):\n            task_func(df_invalid)\n    def test_function_exception_handling(self):\n        \"\"\"Test to ensure that function handles incorrect input types gracefully.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func(None)  # Passing None to simulate bad input",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a graph of temperature trends over the past week using randomly generated data. This function generates random integer temperatures in Celcius with a low of 15 and high of 35. To show temperature trend, it plots date on the x-axis and temperature on the y-axis.\nThe function should raise the exception for: ValueError: If days_in_past is less than 1.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Generated plot showing 'Temperature Trend'\n    with 'Date' on the a-xis and 'Temperature (\u00b0C)' on the y-axis.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n```",
        "gt": "from datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(days_in_past=7, random_seed=0):\n    np.random.seed(random_seed)\n\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be in the past\")\n\n    dates = [datetime.now().date() - timedelta(days=i) for i in range(days_in_past)]\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    fig, ax = plt.subplots()\n    ax.plot(dates, temperatures)\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    ax.set_title(\"Temperature Trend\")\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def _test_plot(self, ax):\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_xlabel(), \"Date\")\n        self.assertEqual(ax.get_ylabel(), \"Temperature (\u00b0C)\")\n        self.assertEqual(ax.get_title(), \"Temperature Trend\")\n    def test_case_1(self):\n        # Test default parameters\n        ax = task_func()\n        self._test_plot(ax)\n    def test_case_2(self):\n        # Test days in the past\n        for n_days in [1, 5, 50, 100]:\n            ax = task_func(n_days, random_seed=2)\n            self._test_plot(ax)\n            self.assertEqual(len(ax.lines[0].get_ydata()), n_days)\n    def test_case_3(self):\n        # Test handling invalid days in the past\n        with self.assertRaises(Exception):\n            task_func(0, random_seed=4)\n    def test_case_4(self):\n        # Test handling invalid days in the past\n        with self.assertRaises(Exception):\n            task_func(-1, random_seed=4)\n    def test_case_5(self):\n        # Test random seed reproducibility\n        ax1 = task_func(5, random_seed=42)\n        ax2 = task_func(5, random_seed=42)\n        self.assertTrue(\n            np.array_equal(ax1.lines[0].get_ydata(), ax2.lines[0].get_ydata())\n        )\n    def test_case_6(self):\n        # Test random seed difference\n        ax1 = task_func(5, random_seed=0)\n        ax2 = task_func(5, random_seed=42)\n        self.assertFalse(\n            np.array_equal(ax1.lines[0].get_ydata(), ax2.lines[0].get_ydata())\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame of products with their ID, quantity, code, price, product, and description based on a specified string of product data. The input string is expected to be divided into segments by newlines. Each segment is expected to be further split into parts by whitespace: ID, quantity, code, price, and a product description. The function will remove trailing whitespaces in each field and assign a product name per unique code. Product name is randomly sampled from: ['Apple', 'Banana', 'Orange', 'Pear', 'Grape']. The same product name will be assigned to each code for each input s, however different codes can be mapped to the same name. >>> s = '1 10 A10B 100 This is a description with spaces\\\\n2 20 B20C 200 Another description example' >>> df = task_func(s) >>> df ID  Quantity  Code  Price Product                        Description 0  1        10  A10B    100    Pear  This is a description with spaces 1  2        20  B20C    200    Pear        Another description example\nThe function should output with:\n    data_df (pd.DataFrame): DataFrame with columns: ['ID', 'Quantity', 'Code', 'Price', 'Product', 'Description'].\n    Quantity and Price are expected to be integers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nimport re\nimport random\ndef task_func(s: str, seed: int = 0) -> pd.DataFrame:\n\n    if not s:\n        raise ValueError(\"Incomplete data provided.\")\n\n    random.seed(seed)\n\n    products = [\"Apple\", \"Banana\", \"Orange\", \"Pear\", \"Grape\"]\n    code_to_product = dict()\n\n    data_list = []\n    segments = [segment.strip() for segment in s.split(\"\\n\")]\n    for segment in segments:\n        if segment:\n            elements = re.split(r\"\\s+\", segment.strip(), 4)\n            if len(elements) < 5:\n                raise ValueError(\"Incomplete data provided.\")\n            id, quantity, code, price, description = elements\n            product = code_to_product.get(code, random.choice(products))\n            data_list.append([id, quantity, code, price, product, description])\n    df = pd.DataFrame(\n        data_list, columns=[\"ID\", \"Quantity\", \"Code\", \"Price\", \"Product\", \"Description\"]\n    )\n    df[\"Quantity\"] = df[\"Quantity\"].astype(int)\n    df[\"Price\"] = df[\"Price\"].astype(int)\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df1 = pd.DataFrame(\n            {\n                \"ID\": [\"1\"],\n                \"Quantity\": [\"10\"],\n                \"Code\": [\"A10B\"],\n                \"Price\": [\"100\"],\n                \"Description\": [\"This is a description with spaces\"],\n            }\n        )\n        self.df2 = pd.DataFrame(\n            {\n                \"ID\": [\"2\"],\n                \"Quantity\": [\"15\"],\n                \"Code\": [\"B20C\"],\n                \"Price\": [\"200\"],\n                \"Description\": [\"Another description with spaces\"],\n            }\n        )\n        self.df_multiple = pd.concat([self.df1, self.df2]).reset_index(drop=True)\n        for col in [\"Quantity\", \"Price\"]:\n            self.df1[col] = self.df1[col].astype(int)\n            self.df2[col] = self.df2[col].astype(int)\n            self.df_multiple[col] = self.df_multiple[col].astype(int)\n    def _test_most_columns(self, df1, df2):\n        columns_to_test = [\"ID\", \"Quantity\", \"Code\", \"Price\", \"Description\"]\n        for col in columns_to_test:\n            pd.testing.assert_series_equal(df1[col], df2[col])\n    def test_case_1(self):\n        # Test basic structure and data correctness\n        input_str = \"1 10 A10B 100 This is a description with spaces\"\n        result = task_func(input_str)\n        self.assertIsInstance(result, pd.DataFrame)\n        self._test_most_columns(result, self.df1)\n    def test_case_2(self):\n        # Test multiline basic structure and correctness\n        input_str = \"\\n\".join(\n            [\n                \"1 10 A10B 100 This is a description with spaces\",\n                \"2 15 B20C 200 Another description with spaces\",\n            ]\n        )\n        result = task_func(input_str)\n        self._test_most_columns(result, self.df_multiple)\n    def test_case_3(self):\n        # Test multiline with trailing whitespaces\n        input_str = \"\\n\".join(\n            [\n                \"1 10 A10B 100 This is a description with spaces         \",\n                \"2 15 B20C 200 Another description with spaces     \",\n            ]\n        )\n        result = task_func(input_str)\n        self._test_most_columns(result, self.df_multiple)\n    def test_case_4(self):\n        # Test behavior with extra spaces in the input string\n        input_str = \"\\n\".join(\n            [\n                \"1   10 A10B 100       This is a description with spaces\",\n                \"2  15   B20C   200 Another description with spaces     \",\n            ]\n        )\n        result = task_func(input_str)\n        self._test_most_columns(result, self.df_multiple)\n    def test_case_5(self):\n        # Test code to product mapping when there are duplicates\n        input_str = \"\\n\".join(\n            [\n                \"1 10 A10B 100 This is a description with spaces\",\n                \"2 15 A10B 200 Another description with spaces\",\n            ]\n        )\n        result = task_func(input_str)\n        product_names = result[\"Product\"]\n        self.assertEqual(product_names.iloc[0], product_names.iloc[1])\n    def test_case_6(self):\n        # Test behavior with empty input string\n        input_str = \"\"\n        with self.assertRaises(ValueError):\n            task_func(input_str)\n    def test_case_7(self):\n        # Test behavior with incomplete input string\n        input_str = \"1 10\"\n        with self.assertRaises(ValueError):\n            task_func(input_str)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates RSA public and private keys, retrieves the content from the specified URL, calculates its SHA256 hash, and signs the hash with the private key. Returns the public key and the signed hash as a hexadecimal string.\nThe function should raise the exception for: ValueError: If there's an issue reaching the server (e.g., network error, invalid URL) or if the server returns an HTTP error. rsa.pkcs1.VerificationError: If there's a failure in signing the hash with the RSA private key. urllib.error.URLError: If the server is not reachable\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The hexadecimal string of the signed SHA256 hash of the URL content.\n    bytes: The hashed URL content, for verification purpose\nYou should write self-contained code starting with:\n```\nimport rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n```",
        "gt": "import rsa\nimport urllib.request\nfrom hashlib import sha256\ndef task_func(url):\n    try:\n        (pub_key, priv_key) = rsa.newkeys(512)\n\n        response = urllib.request.urlopen(url)\n        content = response.read()\n        hash_value = sha256(content).digest()\n        \n        signed_hash = rsa.sign(hash_value, priv_key, 'SHA-256').hex()\n\n        return pub_key, signed_hash, hash_value\n    except urllib.error.HTTPError as e:\n        raise ValueError(f\"Server returned an HTTP error: {e.code} {e.reason}\") from e\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(f\"Failed to reach the server. URL might be invalid: {e}\") from e\n    except rsa.pkcs1.VerificationError as e:\n        raise rsa.pkcs1.VerificationError(f\"Failed to sign the hash: {e}\") from e    ",
        "test": "import unittest\nfrom unittest.mock import patch\nimport rsa\nfrom hashlib import sha256\nclass TestCases(unittest.TestCase):\n    @patch('urllib.request.urlopen')\n    def test_return_type(self, mock_urlopen):\n        mock_urlopen.return_value.read.return_value = b\"test content\"\n        pub_key, signed_hash, hash_value = task_func(\"https://www.example.com\")\n        self.assertIsInstance(pub_key, rsa.PublicKey)\n        self.assertIsInstance(signed_hash, str)\n        self.assertIsInstance(hash_value, bytes)\n    @patch('urllib.request.urlopen')\n    def test_valid_signature(self, mock_urlopen):\n        mock_urlopen.return_value.read.return_value = b\"test content\"\n        pub_key, signed_hash, hash_value = task_func(\"https://www.example.com\")\n        content_hash = sha256(b\"test content\").digest()\n        try:\n            rsa.verify(content_hash, bytes.fromhex(signed_hash), pub_key)\n            verified = True\n        except rsa.VerificationError:\n            verified = False\n        self.assertTrue(verified)\n    @patch('urllib.request.urlopen')\n    def test_hashing_of_content(self, mock_urlopen):\n        mock_urlopen.return_value.read.return_value = b\"test content\"\n        pub_key, signed_hash, hash_value = task_func(\"https://www.example.com\")\n        # Assuming the function is modified to return the content hash for testing\n        self.assertEqual(sha256(b\"test content\").digest(), hash_value)\n    @patch('urllib.request.urlopen')\n    def test_network_error_handling_1(self, mock_urlopen):\n        mock_urlopen.side_effect = urllib.error.URLError(\"URL error\")\n        with self.assertRaises(urllib.error.URLError) as context:\n            pub_key, signed_hash, hash_value = task_func(\"https://www.example.com\")\n    @patch('urllib.request.urlopen')\n    def test_http_error_handling_2(self, mock_urlopen):\n        mock_urlopen.side_effect = urllib.error.HTTPError(\"https://www.example.com\", 404, \"Not Found\", hdrs={}, fp=None)\n        with self.assertRaises(ValueError) as context:\n            pub_key, signed_hash = task_func(\"https://www.example.com\")\n    @patch('urllib.request.urlopen')\n    @patch('rsa.sign')\n    def test_verification_error_handling(self, mock_sign, mock_urlopen):\n        mock_urlopen.return_value.read.return_value = b\"test content\"\n        mock_sign.side_effect = rsa.pkcs1.VerificationError(\"Verification failed\")\n        with self.assertRaises(rsa.pkcs1.VerificationError) as context:\n            pub_key, signed_hash, hash_value = task_func(\"https://www.example.com\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Searches a directory for CSV files matching a given regular expression pattern, reads sales data from these files, and plots the sales data with month on the x-axis and sales on the y-axis.\nNote that: Each CSV file contains two columns: 'Month' and 'Sales'.\nThe function should output with:\n    A list of matplotlib.axes._axes.Axes objects, each representing a plot of sales data from a matched CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n```",
        "gt": "import os\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(directory: str, pattern: str) -> list:\n\n    plots = []\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            df = pd.read_csv(os.path.join(directory, file))\n            ax = df.plot(x='Month', y='Sales', title=file)\n            plots.append(ax)\n    plt.show()\n    return plots",
        "test": "import unittest\nimport shutil\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Prepare test data\n        self.directory = \"task_func_data/\"\n        self.pattern = r\"^sales_data_\\d{4}.csv\"\n        os.makedirs(self.directory, exist_ok=True)\n        data_2021 = pd.DataFrame({\n            'Month': ['January', 'February', 'March'],\n            'Sales': [100, 150, 200]\n        })\n        data_2022 = pd.DataFrame({\n            'Month': ['January', 'February', 'March'],\n            'Sales': [120, 130, 210]\n        })\n        data_2021.to_csv(self.directory + \"sales_data_2021.csv\", index=False)\n        data_2022.to_csv(self.directory + \"sales_data_2022.csv\", index=False)\n    def tearDown(self):\n        # Clean up test data\n        shutil.rmtree(self.directory)\n    def test_plots_generated(self):\n        plots = task_func(self.directory, self.pattern)\n        self.assertEqual(len(plots), 2, \"Should generate two plots for two CSV files\")\n    def test_plot_titles(self):\n        plots = task_func(self.directory, self.pattern)\n        expected_titles = ['sales_data_2022.csv', 'sales_data_2021.csv']\n        plot_titles = [plot.get_title() for plot in plots]\n        self.assertEqual(set(plot_titles), set(expected_titles), \"Plot titles should match the CSV filenames\")\n    def test_no_files_matched(self):\n        plots = task_func(self.directory, r\"^no_match_\\d{4}.csv\")\n        self.assertEqual(len(plots), 0, \"Should return an empty list if no files match the pattern\")\n    def test_invalid_directory(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"/invalid/directory/\", self.pattern)\n    def test_plot_data_integrity(self):\n        plots = task_func(self.directory, self.pattern)\n        # Read the CSV files again to get expected data\n        expected_data = []\n        for file in os.listdir(self.directory):\n            if re.match(self.pattern, file):\n                df = pd.read_csv(os.path.join(self.directory, file))\n                expected_data.append(df['Sales'].to_list())\n        for plot, expected_sales in zip(plots, expected_data):\n            lines = plot.get_lines()\n            for line in lines:\n                y_data = line.get_ydata()\n                # Use np.isclose for floating point comparison, if necessary\n                self.assertTrue(any(np.array_equal(y_data, expected) for expected in expected_data), \"Plotted data should match the CSV file content\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Run a non-blocking echo server that appends the server's current time to received data and sends it back to the client, while handling exceptional conditions for each socket.\nThe function should output with:\n    str: A status message indicating the server's operation and run duration.\nYou should write self-contained code starting with:\n```\nimport socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n```",
        "gt": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setblocking(0)\n    server.bind((server_address, server_port))\n    server.listen(5)\n    inputs = [server]\n    outputs = []\n    message_queues = {}\n    end_time = datetime.now() + timedelta(seconds=run_duration)\n\n    try:\n        while datetime.now() < end_time:\n            readable, writable, _ = select.select(inputs, outputs, inputs, 1)\n            for s in readable:\n                if s is server:\n                    connection, _ = s.accept()\n                    connection.setblocking(0)\n                    inputs.append(connection)\n                    message_queues[connection] = queue.Queue()\n                else:\n                    data = s.recv(buffer_size)\n                    if data:\n                        message_queues[s].put(f\"{datetime.now()}: {data.decode()}\")\n                        if s not in outputs:\n                            outputs.append(s)\n                    else:\n                        if s in outputs:\n                            outputs.remove(s)\n                        inputs.remove(s)\n                        s.close()\n                        del message_queues[s]\n\n            for s in writable:\n                if s not in message_queues:\n                    continue  # Skip if socket's queue has been removed\n\n                try:\n                    next_msg = message_queues[s].get_nowait()\n                except queue.Empty:\n                    outputs.remove(s)\n                else:\n                    s.sendall(next_msg.encode(\"utf-8\"))\n\n    finally:\n        server.close()\n\n    return f\"Server started on {server_address}:{server_port}. Ran for {run_duration} seconds.\"",
        "test": "import unittest\nimport socket\nimport time\nimport threading\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        # Start the server in a separate thread\n        self.server_thread = threading.Thread(\n            target=task_func, args=(\"localhost\", 12345, 1024, 10)\n        )\n        self.server_thread.start()\n        time.sleep(1)\n    def tearDown(self):\n        # Ensure the server thread is closed after each test\n        self.server_thread.join()\n    def test_queue_empty_condition(self):\n        \"\"\"Test if the server correctly handles an empty queue condition.\"\"\"\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:\n            client.connect((\"localhost\", 12345))\n            # Send a message and then close the socket immediately\n            client.sendall(\"Hello\".encode())\n            client.close()\n            # The server should handle the empty queue condition without crashing\n            # Wait briefly to allow server to process the situation\n            time.sleep(1)\n            # Since the server should continue running and not crash,\n            # we can attempt a new connection to check server's state\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as new_client:\n                new_client.connect((\"localhost\", 12345))\n                test_message = \"Test after empty queue\"\n                new_client.sendall(test_message.encode())\n                response = new_client.recv(1024).decode()\n                self.assertIn(test_message, response)\n    def test_server_response(self):\n        \"\"\"Test if server correctly echoes received data with server time.\"\"\"\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:\n            client.connect((\"localhost\", 12345))\n            test_message = \"Hello, Server!\"\n            client.sendall(test_message.encode())\n            response = client.recv(1024).decode()\n            self.assertIn(test_message, response)\n    def test_multiple_connections(self):\n        \"\"\"Test the server's ability to handle multiple client connections.\"\"\"\n        responses = []\n        for _ in range(5):\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:\n                client.connect((\"localhost\", 12345))\n                client.sendall(\"Test\".encode())\n                responses.append(client.recv(1024).decode())\n        for response in responses:\n            # Assuming the server response format includes the timestamp followed by the echoed message\n            self.assertTrue(\"Test\" in response)\n    def test_no_data_received(self):\n        \"\"\"Test server behavior when no data is received from the client.\"\"\"\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:\n            client.connect((\"localhost\", 12345))\n            # Not sending any data\n            client.settimeout(2)\n            with self.assertRaises(socket.timeout):\n                client.recv(1024)\n    def test_server_closes_after_duration(self):\n        \"\"\"Test if the server closes after the specified duration.\"\"\"\n        # Wait for a duration longer than the server's run time\n        time.sleep(5)\n        with self.assertRaises((socket.timeout, ConnectionRefusedError)):\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:\n                client.settimeout(2)\n                client.connect((\"localhost\", 12345))\n                client.recv(1024)\n    def test_large_data_transfer(self):\n        \"\"\"Test the server's ability to handle a large data transfer.\"\"\"\n        large_data = \"A\" * 1000\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:\n            client.connect((\"localhost\", 12345))\n            client.sendall(large_data.encode())\n            # Initialize an empty string to accumulate the response\n            total_response = \"\"\n            while True:\n                # Receive data in chunks\n                part = client.recv(1024).decode()\n                total_response += part\n                # Check if the end of the message is reached\n                if large_data in total_response:\n                    break\n            # Assert that the large data string is in the response\n            self.assertIn(large_data, total_response)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw the color histogram of an image in 3D and call a function when a data point is selected.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the 3D plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\ndef task_func(file_path, onpick):\n```",
        "gt": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport cv2\nimport os\ndef task_func(file_path, onpick):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"No file found at {file_path}\")\n\n    img = cv2.imread(file_path)\n    color = ('b', 'g', 'r')\n    fig = plt.figure()\n    ax = Axes3D(fig)\n\n    for i, col in enumerate(color):\n        hist = cv2.calcHist([img], [i], None, [256], [0, 256])\n        ax.plot(np.arange(256), hist, color=col)\n\n    fig.canvas.mpl_connect('pick_event', onpick)\n\n    # plt.show()\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport cv2\nimport os\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a dummy image for testing\n        np.random.seed(42)\n        self.dummy_img_path = os.path.join(tempfile.mkdtemp(), 'test_image.jpg')\n        dummy_img = np.random.randint(0, 255, (20, 20, 3), dtype=np.uint8)\n        cv2.imwrite(self.dummy_img_path, dummy_img)\n    def tearDown(self):\n        # Cleanup the dummy image\n        if os.path.exists(self.dummy_img_path):\n            os.remove(self.dummy_img_path)\n    def test_valid_input(self):\n        def dummy_onpick(event):\n            pass\n        ax = task_func(self.dummy_img_path, dummy_onpick)\n        self.assertIsInstance(ax, Axes3D)\n    def test_invalid_file_path(self):\n        def dummy_onpick(event):\n            pass\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent.jpg', dummy_onpick)\n    def test_onpick_function(self):\n        # This test requires manual verification of onpick functionality\n        def dummy_onpick(event):\n            print(f\"Dummy onpick called with event: {event}\")\n        ax = task_func(self.dummy_img_path, dummy_onpick)\n        self.assertIsInstance(ax, Axes3D)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches the content of a webpage specified by its URL, parses it to find <script> tags, and attempts to evaluate any string within these tags as a Python dictionary.\nNote that: If an error occurs during the request or if no dictionaries are found/evaluable, an empty list is returned.\nThe function should output with:\n    list of dict: A list containing dictionaries that were successfully evaluated from string representations\n    found within <script> tags on the webpage.\nYou should write self-contained code starting with:\n```\nimport ast\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url):\n```",
        "gt": "import ast\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException:\n        return []\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    results = []\n    for script in soup.find_all('script'):\n        try:\n            results.append(ast.literal_eval(script.string))\n        except (ValueError, SyntaxError):\n            continue\n\n    return results",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\ndef mock_requests_get(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, text, status_code):\n            self.text = text\n            self.status_code = status_code\n        def raise_for_status(self):\n            if self.status_code != 200:\n                raise requests.RequestException(\"Mocked error\")\n    if args[0] == 'https://test1.com':\n        return MockResponse('<script>{\"key\": \"value\"}</script>', 200)\n    elif args[0] == 'https://test2.com':\n        return MockResponse('<script>{\"key1\": \"value1\"}</script><script>{\"key2\": \"value2\"}</script>', 200)\n    elif args[0] == 'https://test3.com':\n        return MockResponse('<div>No script tags here</div>', 200)\n    elif args[0] == 'https://test4.com':\n        return MockResponse('<script>Not a dictionary</script>', 200)\n    elif args[0] == 'https://error.com':\n        return MockResponse('Error', 404)\n    return MockResponse('', 404)\nclass TestCases(unittest.TestCase):\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_1(self, mock_get):\n        # Test with a single dictionary in the script tag\n        result = task_func('https://test1.com')\n        self.assertEqual(result, [{\"key\": \"value\"}])\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_2(self, mock_get):\n        # Test with multiple dictionaries in separate script tags\n        result = task_func('https://test2.com')\n        self.assertEqual(result, [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}])\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_3(self, mock_get):\n        # Test with no script tags\n        result = task_func('https://test3.com')\n        self.assertEqual(result, [])\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_4(self, mock_get):\n        # Test with a script tag that doesn't contain a dictionary\n        result = task_func('https://test4.com')\n        self.assertEqual(result, [])\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_5(self, mock_get):\n        # Test with a URL that returns an error\n        result = task_func('https://error.com')\n        self.assertEqual(result, [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate and display a countplot of predefined shape-color pairs. This function creates a visual representation of a specified number of unique shape-color combinations, each displayed as a bar in the countplot. The shape-color pairs are selected from a predefined list.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object of the countplot, which can be used for\n    further customizations or to retrieve information about the plot.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n```",
        "gt": "import itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nSHAPES = [\n    \"Circle\",\n    \"Square\",\n    \"Triangle\",\n    \"Rectangle\",\n    \"Pentagon\",\n    \"Hexagon\",\n    \"Heptagon\",\n    \"Octagon\",\n    \"Nonagon\",\n    \"Decagon\",\n]\nCOLORS = [\n    \"Red\",\n    \"Blue\",\n    \"Green\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Purple\",\n    \"Orange\",\n    \"Pink\",\n    \"Brown\",\n]\ndef task_func(num_pairs=10):\n    max_pairs = len(SHAPES) * len(COLORS)\n    num_pairs = min(num_pairs, max_pairs)\n    \n    pairs = [f\"{s}:{c}\" for s, c in itertools.product(SHAPES, COLORS)][:num_pairs]\n    \n    # Drawing the countplot\n    ax = sns.countplot(x=pairs, hue=pairs, palette=\"Set3\", legend=False)\n    plt.xticks(rotation=90)\n    \n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for task_func.\"\"\"\n    def tearDown(self):\n        plt.clf()\n    def test_basic_functionality(self):\n        \"\"\"Test basic functionality with default parameters.\"\"\"\n        random.seed(0)\n        ax = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n    def test_pair_count(self):\n        \"\"\"Test if the number of displayed shape-color pairs matches the input.\"\"\"\n        random.seed(1)\n        num_pairs = 7\n        ax = task_func(num_pairs)\n        displayed_pairs = len(set(tick.get_text() for tick in ax.get_xticklabels()))\n        self.assertEqual(displayed_pairs, num_pairs)\n    def test_valid_pairs(self):\n        \"\"\"Ensure displayed shape-color pairs are valid combinations.\"\"\"\n        random.seed(2)\n        ax = task_func(10)\n        displayed_pairs = [tick.get_text() for tick in ax.get_xticklabels()]\n        for pair in displayed_pairs:\n            shape, color = pair.split(\":\")\n            self.assertIn(shape, SHAPES)\n            self.assertIn(color, COLORS)\n    def test_max_pairs(self):\n        \"\"\"Test with the maximum number of pairs possible.\"\"\"\n        random.seed(3)\n        max_pairs = len(SHAPES) * len(COLORS)\n        ax = task_func(max_pairs)\n        displayed_pairs = len(set(tick.get_text() for tick in ax.get_xticklabels()))\n        self.assertEqual(displayed_pairs, max_pairs)\n    def test_min_pairs(self):\n        \"\"\"Test with the minimum number of pairs, which is 1.\"\"\"\n        random.seed(4)\n        ax = task_func(1)\n        displayed_pairs = len(set(tick.get_text() for tick in ax.get_xticklabels()))\n        self.assertEqual(displayed_pairs, 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a dataset with five features sampled from the standard normal distribution and a target variable. The target value is created by computing the sum of the features and adding random numbers sampled from the standard normal distribution. Then cross-validate the dataset using a RandomForestRegressor model and return the mean cross-validation score. >>> results = task_func(random_seed=1) >>> print(results) (0.47332912782858, RandomForestRegressor(random_state=1))\nThe function should raise the exception for: ValueError: If num_samples / cv < 2\nThe function should output with:\n    float: The mean cross-validation score.\n    model: the trained model\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n```",
        "gt": "import numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\ndef task_func(num_samples=100, n_estimators=100, random_seed=None, cv=5):\n    \n    if num_samples / cv < 2:\n        raise ValueError(\"num_samples / cv should be greater than or equal to 2.\")\n\n    np.random.seed(random_seed)\n    X = np.random.randn(num_samples, 5)\n    y = np.sum(X, axis=1) + np.random.randn(num_samples)\n    \n    model = RandomForestRegressor(n_estimators=n_estimators,\n                                  random_state=random_seed\n                                  )\n    \n    cv_scores = cross_val_score(model, X, y, cv=cv)\n    \n    return np.mean(cv_scores), model",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_rng(self):\n        'rng reproducability'\n        result1, _ = task_func(random_seed=42)\n        result2, _ = task_func(random_seed=42)\n        self.assertAlmostEqual(result1, result2)\n    def test_case_1(self):\n        'default params'\n        result, model = task_func(random_seed=1)\n        self.assertAlmostEqual(result, 0.47332912782858)\n        self.assertTrue(isinstance(model, RandomForestRegressor))\n    def test_case_2(self):\n        'random outcome with distinct seeds'\n        result1, _ = task_func(random_seed=2)\n        result2, _ = task_func(random_seed=3)\n        self.assertFalse(result1 == result2)\n    def test_case_3(self):\n        result, model = task_func(random_seed=2, cv=2, n_estimators=2)\n        self.assertAlmostEqual(result, 0.2316988319594362)\n        self.assertTrue(isinstance(model, RandomForestRegressor))\n    def test_case_4(self):\n        'test exception'\n        self.assertRaises(Exception,\n                          task_func,\n                          {'random_seed': 223, 'cv': 3,\n                           'n_estimators': 100, 'num_samples': 4}\n                          )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Handles an HTTP GET request to retrieve a static file from the server. This function processes an HTTP GET request, extracts the filename from it, checks the existence of the file in the server's directory, and returns an HTTP response. The response either contains the file content (if found) or an appropriate error message (if not found or if the request is invalid).\nThe function should output with:\n    str: An HTTP response string, which includes the status code, content length (for 200 OK responses), and the file content\n    or an error message.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\ndef task_func(request):\n```",
        "gt": "import re\nimport os\ndef task_func(request):\n    match = re.match(r\"^GET /([\\w\\.\\-]+) HTTP/1\\.1$\", request)\n    if match:\n        file_name = match.group(1)\n        if os.path.exists(file_name):\n            try:\n                with open(file_name, \"rb\") as file:\n                    content = file.read()\n                    response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content.decode('utf-8')}\"\n            except Exception:\n                response = (\n                    \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n                )\n        else:\n            response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    else:\n        response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    return response",
        "test": "import unittest\nimport re\nimport os\nfrom unittest.mock import mock_open, patch\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        \"\"\"Set up the environment for testing by creating test files.\"\"\"\n        with open(\"test.txt\", \"w\", encoding=\"utf-8\") as f:\n            f.write(\"This is a test file.\")\n    def tearDown(self):\n        \"\"\"Clean up the environment by deleting the test files created.\"\"\"\n        os.remove(\"test.txt\")\n    def test_file_found(self):\n        \"\"\"Test the response when the requested file is found.\"\"\"\n        request = \"GET /test.txt HTTP/1.1\"\n        expected_response = (\n            \"HTTP/1.1 200 OK\\r\\nContent-Length: 20\\r\\n\\r\\nThis is a test file.\"\n        )\n        self.assertEqual(task_func(request), expected_response)\n    def test_file_not_found(self):\n        \"\"\"Test the response when the requested file is not found.\"\"\"\n        request = \"GET /nonexistent.txt HTTP/1.1\"\n        expected_response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        self.assertEqual(task_func(request), expected_response)\n    def test_bad_request(self):\n        \"\"\"Test the response for a badly formatted request.\"\"\"\n        request = \"BAD REQUEST\"\n        expected_response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n        self.assertEqual(task_func(request), expected_response)\n    def test_empty_request(self):\n        \"\"\"Test the response for an empty request.\"\"\"\n        request = \"\"\n        expected_response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n        self.assertEqual(task_func(request), expected_response)\n    def test_invalid_method_request(self):\n        \"\"\"Test the response for a request with an invalid HTTP method.\"\"\"\n        request = \"POST /test.txt HTTP/1.1\"\n        expected_response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n        self.assertEqual(task_func(request), expected_response)\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"data\")\n    def test_internal_server_error(self, mock_file):\n        \"\"\"Test the response when there's an internal server error (e.g., file read error).\"\"\"\n        mock_file.side_effect = Exception(\"Mocked exception\")\n        request = \"GET /test.txt HTTP/1.1\"\n        expected_response = (\n            \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n        )\n        self.assertEqual(task_func(request), expected_response)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a CSV file into a DataFrame, filter the lines in which the employee ID begins with a prefix, and draw a histogram of its age.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the filtered data, containing the columns 'Employee ID' and 'Age'.\n    Axes: A histogram plot of the 'Age' column of the filtered data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(data='/path/to/data.csv', emp_prefix='EMP'):\n    # Load data and filter\n    df = pd.read_csv(data)\n    df = df[df['Employee ID'].str.startswith(emp_prefix)]\n\n    # Plot histogram\n    ax = sns.histplot(data=df, x='Age', kde=True)\n\n    return df, ax",
        "test": "import unittest\nimport shutil\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.f_1 = os.path.join(self.test_dir, \"csv_1.csv\")\n        df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"EMP001\", \"EMP002\", \"EMP003\", \"ENG001\", \"ENG002\"],\n                \"Age\" : [23, 45, 27, 32, 33]\n            }\n        )\n        df.to_csv(self.f_1, index = False)\n        self.f_2 = os.path.join(self.test_dir, \"csv_2.csv\")\n        df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"CUSTOM001\", \"MAN001\", \"CUSTOM002\", \"HR001\"],\n                \"Age\" : [34, 56, 27, 29]\n            }\n        )\n        df.to_csv(self.f_2, index = False)\n        self.f_3 = os.path.join(self.test_dir, \"csv_3.csv\")\n        df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"CUSTOM003\", \"CUSTOM004\", \"CUSTOM005\"],\n                \"Age\" : [44, 45, 46]\n            }\n        )\n        df.to_csv(self.f_3, index = False)\n        self.f_4 = os.path.join(self.test_dir, \"csv_4.csv\")\n        df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"HR007\", \"HR008\", \"HR009\", \"DR001\", \"DR002\"],\n                \"Age\" : [57, 31, 28, 49, 51]\n            }\n        )\n        df.to_csv(self.f_4, index = False)\n        self.f_5 = os.path.join(self.test_dir, \"csv_5.csv\")\n        df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"RS001\", \"RS002\"],\n                \"Age\" : [29, 36]\n            }\n        )\n        df.to_csv(self.f_5, index = False)\n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Test the function with default parameters\n        df, ax = task_func(self.f_1)\n        print(df.columns)\n        expected_df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"EMP001\", \"EMP002\", \"EMP003\"],\n                \"Age\" : [23, 45, 27]\n            }\n        )\n        self.assertIsInstance(df, pd.DataFrame)\n        pd.testing.assert_frame_equal(df.reset_index(drop=True), expected_df.reset_index(drop=True))\n        self.assertIsNotNone(ax)\n    def test_case_2(self):\n        # Test the function with custom input data and prefix\n        df, ax = task_func(self.f_2, 'CUSTOM')\n        expected_df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"CUSTOM001\", \"CUSTOM002\"],\n                \"Age\" : [34, 27]\n            }\n        )\n        self.assertIsInstance(df, pd.DataFrame)\n        pd.testing.assert_frame_equal(df.reset_index(drop=True), expected_df.reset_index(drop=True))\n        self.assertIsNotNone(ax)\n    def test_case_3(self):\n        # Test the function with invalid prefix\n        df, ax = task_func(self.f_3, 'INVALID')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue(df.shape[0] == 0)\n        self.assertTrue(all([col in df.columns for col in [\"Employee ID\", \"Age\"]]))\n        self.assertIsNotNone(ax)\n    def test_case_4(self):\n        # Test the function with custom input data and prefix\n        df, ax = task_func(self.f_4, 'DR')\n        expected_df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"DR001\", \"DR002\"],\n                \"Age\" : [49, 51]\n            }\n        )\n        self.assertIsInstance(df, pd.DataFrame)\n        pd.testing.assert_frame_equal(df.reset_index(drop=True), expected_df.reset_index(drop=True))\n        self.assertIsNotNone(ax)\n    def test_case_5(self):\n        # Test the function with custom input data and prefix\n        df, ax = task_func(self.f_5, 'RS')\n        expected_df = pd.DataFrame(\n            {\n                \"Employee ID\" : [\"RS001\", \"RS002\"],\n                \"Age\" : [29, 36]\n            }\n        )\n        self.assertIsInstance(df, pd.DataFrame)\n        pd.testing.assert_frame_equal(df.reset_index(drop=True), expected_df.reset_index(drop=True))\n        self.assertIsNotNone(ax)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Exports the specifications of functions in 'f_list' to a CSV file at 'file_path'. The CSV file columns are as follows: - 'Function Name': The name of the function. - 'Number of Arguments': The number of arguments the function takes. - 'Defaults': Default values for the function's arguments, if any. - 'Annotations': Type annotations of the function's arguments and return value, if any. - 'Is Lambda': Boolean value indicating whether the function is a lambda function. Each row in the CSV file corresponds to a function in 'f_list'.\nThe function should raise the exception for: ValueError: If 'f_list' is not a list of functions, 'f_list' is empty, or 'file_path' is not a valid path. IOError: If there's an error in writing to the specified file path.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport inspect\nimport pandas as pd\ndef task_func(f_list, file_path):\n```",
        "gt": "import inspect\nimport pandas as pd\ndef task_func(f_list, file_path):\n    \n    if not all(callable(f) for f in f_list):\n        raise ValueError(\"All elements in f_list must be callable functions.\")\n    if not f_list:\n        raise ValueError(\"f_list should not be empty.\")\n    if not isinstance(file_path, str):\n        raise ValueError(\"file_path must be a string.\")\n\n\n    func_info = []\n    for f in f_list:\n        spec = inspect.getfullargspec(f)\n        is_lambda = lambda x: x.__name__ == (lambda: None).__name__\n        func_info.append([\n            f.__name__, \n            len(spec.args), \n            spec.defaults, \n            spec.annotations, \n            is_lambda(f)\n        ])\n\n    df = pd.DataFrame(func_info, columns=['Function Name', 'Number of Arguments', 'Defaults', 'Annotations', 'Is Lambda'])\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError as e:\n        raise IOError(f\"Error writing to file: {e}\")",
        "test": "import unittest\nimport pandas as pd\nimport os\nclass TestCases(unittest.TestCase):\n    def test_valid_input(self):\n        def sample_func(x, y=1): return x + y\n        task_func([sample_func], 'test.csv')\n        df = pd.read_csv('test.csv')\n        self.assertEqual(df.loc[0, 'Function Name'], 'sample_func')\n        self.assertEqual(df.loc[0, 'Number of Arguments'], 2)\n        self.assertIsNotNone(df.loc[0, 'Defaults'])\n        self.assertFalse(df.loc[0, 'Is Lambda'])\n    def test_empty_function_list(self):\n        with self.assertRaises(ValueError):\n            task_func([], 'test.csv')\n    def test_invalid_function_list(self):\n        with self.assertRaises(ValueError):\n            task_func([1, 2, 3], 'test.csv')\n    def test_invalid_file_path(self):\n        with self.assertRaises(ValueError):\n            task_func([lambda x: x], 123)\n    def test_io_error(self):\n        def sample_func(x): return x\n        with self.assertRaises(IOError):\n            task_func([sample_func], '/invalidpath/test.csv')\n    def test_lambda_function(self):\n        task_func([lambda x: x], 'test.csv')\n        df = pd.read_csv('test.csv')\n        self.assertTrue(df.loc[0, 'Is Lambda'])\n    def tearDown(self):\n        try:\n            os.remove('test.csv')\n        except OSError:\n            pass\n    \n    def test_multiple_functions(self):\n        def func_a(x): return x * 2\n        def func_b(x, y=1): return x + y\n        lambda_func = lambda x: x ** 2\n        task_func([func_a, func_b, lambda_func], 'test.csv')\n        df = pd.read_csv('test.csv')\n        # Check if all functions are listed\n        expected_names = ['func_a', 'func_b', '<lambda>']\n        self.assertListEqual(list(df['Function Name']), expected_names)\n        # Check number of arguments\n        self.assertEqual(df.loc[df['Function Name'] == 'func_a', 'Number of Arguments'].values[0], 1)\n        self.assertEqual(df.loc[df['Function Name'] == 'func_b', 'Number of Arguments'].values[0], 2)\n        self.assertEqual(df.loc[df['Function Name'] == '<lambda>', 'Number of Arguments'].values[0], 1)\n        # Check if lambda is correctly identified\n        self.assertFalse(df.loc[df['Function Name'] == 'func_a', 'Is Lambda'].values[0])\n        self.assertFalse(df.loc[df['Function Name'] == 'func_b', 'Is Lambda'].values[0])\n        self.assertTrue(df.loc[df['Function Name'] == '<lambda>', 'Is Lambda'].values[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform K-Means clustering on the given data by first turning it into a DataFrame with two columns \"x\" and \"y\" and then return the labels and centroids.\nThe function should output with:\n    tuple: The labels and centroids as numpy arrays.\n    kmeans.labels_: A NumPy array where each element is the cluster label assigned to each data point.\n    kmeans.cluster_centers_: A NumPy array containing the coordinates of the cluster centers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list, n_clusters=2, random_state=0):\n```",
        "gt": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(x_list, y_list, n_clusters=2, random_state=0):\n    df = pd.DataFrame({'x': x_list, 'y': y_list})\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state).fit(df)\n    return kmeans.labels_, kmeans.cluster_centers_",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self) -> None:\n        self.random_state = 0\n        self.n_clusters = 2\n    def test_case_1(self):\n        labels, centroids = task_func([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7],\n                                  self.n_clusters, self.random_state)\n        self.assertEqual(labels[0], 0)\n        self.assertEqual(labels[1], 0)\n        self.assertEqual(labels[2], 0)\n        self.assertEqual(labels[3], 1)\n        self.assertEqual(labels[4], 1)\n        self.assertEqual(labels[5], 1)\n        self.assertEqual(centroids[0][0], 2.)\n        self.assertEqual(centroids[0][1], 3.)\n        self.assertEqual(centroids[1][0], 5.)\n        self.assertEqual(centroids[1][1], 6.)\n    def test_case_2(self):\n        labels, centroids = task_func([1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2],\n                                  self.n_clusters, self.random_state)\n        self.assertEqual(labels[0], 0)\n        self.assertEqual(labels[1], 0)\n        self.assertEqual(labels[2], 0)\n        self.assertEqual(labels[3], 0)\n        self.assertEqual(labels[4], 0)\n        self.assertEqual(labels[5], 0)\n        self.assertEqual(centroids[0][0], 1.)\n        self.assertEqual(centroids[0][1], 2.)\n    def test_case_3(self):\n        labels, centroids = task_func([1, 2, 3, 4, 5, 6], [2, 2, 2, 2, 2, 2],\n                                  self.n_clusters, self.random_state)\n        self.assertEqual(labels[0], 0)\n        self.assertEqual(labels[1], 0)\n        self.assertEqual(labels[2], 0)\n        self.assertEqual(labels[3], 1)\n        self.assertEqual(labels[4], 1)\n        self.assertEqual(labels[5], 1)\n        self.assertEqual(centroids[0][0], 2.)\n        self.assertEqual(centroids[0][1], 2.)\n        self.assertEqual(centroids[1][0], 5.)\n        self.assertEqual(centroids[1][1], 2.)\n    def test_case_4(self):\n        labels, centroids = task_func([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0],\n                                  self.n_clusters, self.random_state)\n        self.assertEqual(labels[0], 0)\n        self.assertEqual(labels[1], 0)\n    def test_case_5(self):\n        labels, centroids = task_func([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\n                                  self.n_clusters, self.random_state)\n        self.assertEqual(labels[0], 0)\n        self.assertEqual(labels[1], 0)\n        self.assertEqual(labels[2], 0)\n        self.assertEqual(labels[3], 1)\n        self.assertEqual(labels[4], 1)\n        self.assertEqual(labels[5], 1)\n        self.assertEqual(centroids[0][0], 2.)\n        self.assertEqual(centroids[0][1], 2.)\n        self.assertEqual(centroids[1][0], 5.)\n        self.assertEqual(centroids[1][1], 5.)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a tuple with a list of random points within a circle of a given radius.\nThe function should output with:\n    out (list): A list of points within a circle.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n```",
        "gt": "import numpy as np\nimport math\nimport random\nfrom random import uniform\ndef task_func(radius, num_points):\n    out = []\n    \n    for _ in range(num_points):\n        theta = uniform(0, 2*np.pi)\n        r = radius * math.sqrt(uniform(0, 1))\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        out.append((x, y))\n        \n    return out",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        points = task_func(1, 3)\n        for x, y in points:\n            self.assertTrue(x**2 + y**2 <= 1)\n    def test_case_2(self):\n        points = task_func(2, 3)\n        for x, y in points:\n            self.assertTrue(x**2 + y**2 <= 4)\n    def test_case_3(self):\n        points = task_func(3, 3)\n        for x, y in points:\n            self.assertTrue(x**2 + y**2 <= 9)\n    def test_case_4(self):\n        points = task_func(4, 3)\n        for x, y in points:\n            self.assertTrue(x**2 + y**2 <= 16)\n    def test_case_5(self):\n        points = task_func(5, 3)\n        for x, y in points:\n            self.assertTrue(x**2 + y**2 <= 25)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a dictionary of test results into a pandas DataFrame and Calculate the average test score and the standard deviation for a particular student from this DataFrame. >>> scores = {'Student': [1, 2, 1, 1], 'Score': [10, 1, 1, 1]} >>> task_func(scores, 1) (array([4.        , 5.19615242]),    Student  Score 0        1     10 1        2      1 2        1      1 3        1      1)\nThe function should raise the exception for: ValueError: student is not present in the test_scores dataframe\nThe function should output with:\n    np.array([float, float]): A numpy array containing the average score and the standard deviation for the student.\n    DataFrame: the converted dictionary.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(test_scores, student):\n    test_scores = pd.DataFrame(test_scores)\n    if student not in test_scores['Student'].values:\n        raise ValueError(f\"The student with ID {student} is not present in the test scores DataFrame.\")\n    student_scores = test_scores[test_scores['Student'] == student]['Score']\n    average_score = student_scores.mean()\n    std = student_scores.std()\n    \n    return np.array([average_score, std]), test_scores",
        "test": "import unittest\nfrom faker import Faker\nimport numpy as np\nimport pandas as pd\nfake = Faker()\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.student_ids = range(1, 6)\n        self.students_sample = list(np.random.choice(self.student_ids, 50, replace=True))\n        self.scores = {\n            'Student': self.students_sample, \n            'Score': list(np.random.randint(50, 101, size=50))\n        }\n    def test_case_1(self):\n        student_id = self.students_sample[0]\n        scores_df = pd.DataFrame(self.scores)\n        expected_avg = scores_df[scores_df['Student'] == student_id]['Score'].mean()\n        expected_std = scores_df[scores_df['Student'] == student_id]['Score'].std()\n        res, df = task_func(self.scores, student_id)\n        avg, std = res\n        self.assertIsInstance(res, np.ndarray)\n        self.assertAlmostEqual(expected_avg, avg, places=2)\n        self.assertAlmostEqual(expected_std, std, places=2)\n        pd.testing.assert_frame_equal(pd.DataFrame(self.scores), df)\n    def test_case_2(self):\n        student_id = max(self.student_ids) + 1\n        with self.assertRaises(ValueError):\n            task_func(self.scores, student_id)\n    def test_case_3(self):\n        empty_df = dict.fromkeys(['Student', 'Score'])\n        student_id = fake.random_int(min=1, max=100)\n        with self.assertRaises(ValueError):\n            task_func(empty_df, student_id)\n    def test_case_4(self):\n        scores = {\n            'Student': list(self.student_ids), \n            'Score': [100] * len(self.student_ids)\n        }\n        student_id = self.student_ids[3]\n        res, df = task_func(scores, student_id)\n        avg, std = res\n        self.assertIsInstance(res, np.ndarray)\n        self.assertEqual(avg, 100.0)\n        self.assertTrue(np.isnan(std))\n        pd.testing.assert_frame_equal(pd.DataFrame(scores), df)\n    def test_case_5(self):\n        scores = {\n            'Student': list(self.student_ids) * 10, \n            'Score': list(np.random.randint(50, 101, size=len(self.student_ids)*10))\n        }\n        student_id = self.student_ids[4]\n        scores_df = pd.DataFrame(scores)\n        expected_avg = scores_df[scores_df['Student'] == student_id]['Score'].mean()\n        expected_std = scores_df[scores_df['Student'] == student_id]['Score'].std()\n        res, df = task_func(scores, student_id)\n        avg, std = res\n        self.assertAlmostEqual(expected_avg, avg, places=2)\n        self.assertAlmostEqual(expected_std, std, places=2)\n        pd.testing.assert_frame_equal(pd.DataFrame(scores), df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a given function 'f' and returns a dictionary containing its name, the square root of the number of arguments, and the count of lambda functions present in its default values. This function demonstrates introspection of Python functions and the use of mathematical operations on the introspected data.\nThe function should output with:\n    dict: A dictionary containing the function's name, the square root of the number of arguments,\n    and the count of lambda functions in default values.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport types\nimport math\ndef task_func(f):\n```",
        "gt": "import inspect\nimport types\nimport math\ndef task_func(f):\n    spec = inspect.getfullargspec(f)\n\n    info = {\n        'function_name': f.__name__,\n        'sqrt_args': math.sqrt(len(spec.args)),\n    }\n\n    if spec.defaults:\n        info['lambda_in_defaults'] = sum(1 for d in spec.defaults if isinstance(d, types.LambdaType))\n    else:\n        info['lambda_in_defaults'] = 0\n\n    return info",
        "test": "import unittest\nimport math\nclass TestCases(unittest.TestCase):\n    def test_regular_function(self):\n        def sample_function(x, y, z=3): pass\n        result = task_func(sample_function)\n        self.assertEqual(result['function_name'], 'sample_function')\n        self.assertEqual(result['sqrt_args'], math.sqrt(3))\n    def test_lambda_in_defaults(self):\n        def func_with_lambda(x, y=lambda a: a+2): pass\n        result = task_func(func_with_lambda)\n        self.assertEqual(result['lambda_in_defaults'], 1)\n    def test_no_arguments(self):\n        def no_arg_func(): pass\n        result = task_func(no_arg_func)\n        self.assertEqual(result['sqrt_args'], 0)\n    def test_function_with_no_lambda_defaults(self):\n        def func_without_lambda(x, y=2): pass\n        result = task_func(func_without_lambda)\n        self.assertEqual(result['lambda_in_defaults'], 0)\n    def test_function_with_multiple_defaults(self):\n        def sample_function(x, y=2, z=lambda a: a+2, w=lambda b: b*2): pass\n        result = task_func(sample_function)\n        self.assertEqual(result['lambda_in_defaults'], 2)\n    def test_lambda_function(self):\n        lambda_func = lambda x, y=lambda a: a * 2: x + y(2)\n        result = task_func(lambda_func)\n        self.assertEqual(result['function_name'], '<lambda>')\n        self.assertEqual(result['sqrt_args'], math.sqrt(2), \"Sqrt of args should be sqrt(2) for lambda_func with 2 args\")\n        self.assertEqual(result['lambda_in_defaults'], 1, \"There should be 1 lambda in defaults\")\n    \n    def test_sqrt_args_correctness(self):\n        def test_func(a, b, c=3, d=lambda x: x + 1): pass\n        result = task_func(test_func)\n        self.assertEqual(result['sqrt_args'], math.sqrt(4), \"Sqrt of args count should match expected value\")\n    # Test for edge case or error handling\n    def test_non_function_input(self):\n        with self.assertRaises(TypeError):\n            task_func(\"This is not a function\")\n    # Directly verifying the math operation\n    def test_math_operation_direct_check(self):\n        def test_func(a, b, c=3, d=lambda x: x + 1): pass\n        result = task_func(test_func)\n        self.assertAlmostEqual(result['sqrt_args'], math.sqrt(4), msg=\"sqrt_args should accurately represent the square root of the number of arguments.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a number of random lowercase letters and count their occurrences. This function takes an integer input to determine how many random letters to generate and an optional seed for consistent randomness. It then creates a list of these letters, chosen from the English lowercase alphabet, and counts each letter's occurrences. The result is returned as a Counter object (from the collections module) which behaves like a dictionary where the keys are the letters, and the values are their counts.\nNote that: The function internally uses a list to store the randomly generated letters before counting them. The randomness of letter selection can be consistent by providing a seed.\nThe function should output with:\n    Counter: A collections.Counter object with the count of each letter.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n```",
        "gt": "import string\nimport random\nfrom collections import Counter\ndef task_func(n, seed=None):\n    LETTERS = string.ascii_lowercase\n    if seed is not None:\n        random.seed(seed)\n    letters = [random.choice(LETTERS) for _ in range(n)]\n    letter_counts = Counter(letters)\n    return letter_counts",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_randomness_with_seed(self):\n        # Using a seed should give consistent results\n        result1 = task_func(100, seed=1)\n        result2 = task_func(100, seed=1)\n        self.assertEqual(result1, result2)\n    def test_randomness_without_seed(self):\n        # Without a seed, the results should be potentially different\n        result1 = task_func(100)\n        result2 = task_func(100)\n        self.assertNotEqual(result1, result2)\n    def test_validity_of_counts(self):\n        # The total counts should equal the number of letters generated\n        num_letters = 200\n        result = task_func(num_letters, seed=2)\n        self.assertEqual(sum(result.values()), num_letters)\n    def test_non_negative_counts(self):\n        # All counts should be non-negative\n        result = task_func(100, seed=3)\n        self.assertTrue(all(count >= 0 for count in result.values()))\n    def test_type_of_return_value(self):\n        # The return type should be a Counter object\n        result = task_func(100, seed=4)\n        self.assertIsInstance(result, Counter)\n    def test_return_value(self):\n        # test specific values\n        result = task_func(10, seed=42)\n        exp = Counter({'d': 2, 'x': 2, 'h': 2, 'u': 1, 'a': 1, 'i': 1, 'e': 1})\n        self.assertEqual(result, exp)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Encrypt the categorical data in a specific column of a DataFrame using LabelEncoder.\nThe function should output with:\n    pd.DataFrame: The DataFrame with the encoded column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df: pd.DataFrame, column_name: str) -> pd.DataFrame:\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame({'fruit': ['apple', 'banana', 'cherry', 'apple', 'banana']})\n        encoded_df = task_func(df, 'fruit')\n        self.assertEqual(encoded_df['fruit'].tolist(), [0, 1, 2, 0, 1])\n    def test_case_2(self):\n        df = pd.DataFrame({'animal': ['cat', 'dog', 'bird', 'cat', 'bird']})\n        encoded_df = task_func(df, 'animal')\n        self.assertEqual(encoded_df['animal'].tolist(), [1, 2, 0, 1, 0])\n    def test_case_3(self):\n        df = pd.DataFrame({'color': ['red', 'blue', 'green', 'red', 'green']})\n        encoded_df = task_func(df, 'color')\n        self.assertEqual(encoded_df['color'].tolist(), [2, 0, 1, 2, 1])\n    def test_case_4(self):\n        df = pd.DataFrame({'vehicle': ['car', 'bus', 'train', 'car', 'train']})\n        encoded_df = task_func(df, 'vehicle')\n        self.assertEqual(encoded_df['vehicle'].tolist(), [1, 0, 2, 1, 2])\n    def test_case_5(self):\n        df = pd.DataFrame({'city': ['NYC', 'LA', 'SF', 'NYC', 'SF']})\n        encoded_df = task_func(df, 'city')\n        self.assertEqual(encoded_df['city'].tolist(), [1, 0, 2, 1, 2])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Constructs a DataFrame that enumerates the character counts of each string in a provided list of elements. This function can optionally include an index column for each row in the DataFrame.\nNote that: The order of columns in the returned DataFrame will be ['Index', 'Element', 'Count'] if the index is included.\nThe function should output with:\n    DataFrame: Returns a pandas DataFrame with columns for elements and their respective character counts.\n    Includes an 'Index' column if requested.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nDEFAULT_COLUMNS = ['Element', 'Count']\ndef task_func(elements, include_index=False):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nDEFAULT_COLUMNS = ['Element', 'Count']\ndef task_func(elements, include_index=False):\n    elements_series = pd.Series(elements)\n    count_series = elements_series.apply(lambda x: len(x))\n    data_dict = {'Element': elements_series, 'Count': count_series}\n    if include_index:\n        data_dict['Index'] = np.arange(len(elements))\n    count_df = pd.DataFrame(data_dict)\n    if include_index:\n        count_df = count_df[['Index', 'Element', 'Count']]  # Reordering columns to put 'Index' first\n    return count_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func(['hello'])\n        expected = pd.DataFrame({'Element': ['hello'], 'Count': [5]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_2(self):\n        result = task_func(['a', 'bc', 'def'])\n        expected = pd.DataFrame({'Element': ['a', 'bc', 'def'], 'Count': [1, 2, 3]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_3(self):\n        result = task_func(['zzz', 'zzz'])\n        expected = pd.DataFrame({'Element': ['zzz', 'zzz'], 'Count': [3, 3]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_4(self):\n        result = task_func(['hello world', 'open ai'])\n        expected = pd.DataFrame({'Element': ['hello world', 'open ai'], 'Count': [11, 7]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_5(self):\n        result = task_func(['hello', 'world'], include_index=True)\n        expected = pd.DataFrame({'Index': np.array([0, 1], dtype='int64'), 'Element': ['hello', 'world'], 'Count': [5, 5]})\n        pd.testing.assert_frame_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function fetches JSON data from a specified URL and converts it into a Pandas DataFrame. It expects the JSON to be in a format that is directly convertible to a DataFrame, typically a list of dictionaries. The function handles various scenarios including successful data retrieval and conversion, network issues, and invalid JSON format.\nNote that: Notes: The function uses a timeout of 5 seconds for the network request to avoid hanging indefinitely. It checks the HTTP response status and raises an HTTPError for unsuccessful status codes. Directly converts the HTTP response to JSON and then to a DataFrame, without intermediate processing.\nThe function should raise the exception for: SystemError: If there is a network-related issue such as a connection error, timeout, or if the server responded with an unsuccessful status code (like 404 or 500). This is a re-raised exception from requests.RequestException to provide a more specific error message. ValueError: If the fetched data is not in a valid JSON format that can be converted into a DataFrame. This could occur if the data structure does not match the expected format (e.g., not a list of dictionaries).\nThe function should output with:\n    pd.DataFrame: A DataFrame constructed from the JSON data fetched from the URL.\nYou should write self-contained code starting with:\n```\nimport requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n```",
        "gt": "import requests\nimport pandas as pd\ndef task_func(url: str) -> pd.DataFrame:\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n        data = response.json()  # Directly converts the response content to JSON\n        df = pd.DataFrame(data)\n        return df\n    except requests.RequestException as e:\n        raise SystemError(f\"Network error occurred: {e}\") from e\n    except ValueError as exc:\n        raise ValueError(\"Invalid JSON format for DataFrame conversion\") from exc",
        "test": "import unittest\nimport requests\nimport pandas as pd\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"requests.get\")\n    def test_valid_json(self, mock_get):\n        \"\"\"Test a valid JSON.\"\"\"\n        mock_get.return_value.json.return_value = [{\"A\": 1, \"B\": 3}, {\"A\": 2, \"B\": 4}]\n        mock_get.return_value.status_code = 200\n        df = task_func(\"https://example.com/data.json\")\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(df.columns.tolist(), [\"A\", \"B\"])\n        self.assertListEqual(df[\"A\"].tolist(), [1, 2])\n        self.assertListEqual(df[\"B\"].tolist(), [3, 4])\n    @patch(\"requests.get\")\n    def test_empty_json(self, mock_get):\n        \"\"\"Test an empty JSON.\"\"\"\n        mock_get.return_value.json.return_value = []\n        mock_get.return_value.status_code = 200\n        df = task_func(\"https://example.com/empty.json\")\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(len(df), 0)\n    @patch(\"requests.get\")\n    def test_invalid_json(self, mock_get):\n        \"\"\"Test an invalid JSON.\"\"\"\n        mock_get.return_value.json.side_effect = ValueError()\n        with self.assertRaises(ValueError):\n            task_func(\"https://example.com/invalid.json\")\n    @patch(\"requests.get\")\n    def test_large_json(self, mock_get):\n        \"\"\"Test a large JSON.\"\"\"\n        mock_get.return_value.json.return_value = [{\"X\": i} for i in range(1000)]\n        mock_get.return_value.status_code = 200\n        df = task_func(\"https://example.com/large.json\")\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(df[\"X\"].tolist(), list(range(1000)))\n    @patch(\"requests.get\")\n    def test_null_json(self, mock_get):\n        \"\"\"Test a JSON that is null.\"\"\"\n        mock_get.return_value.json.return_value = None\n        mock_get.return_value.status_code = 200\n        df = task_func(\"https://example.com/null.json\")\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(len(df), 0)\n    @patch(\"requests.get\")\n    def test_system_error(self, mock_get):\n        \"\"\"Test a general error.\"\"\"\n        mock_get.side_effect = requests.RequestException\n        with self.assertRaises(SystemError):\n            task_func(\"https://example.com/data.json\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean of the numeric values for each position in the provided data list and return the results. Optionally, the results can be exported to a specified JSON file.\nThe function should output with:\n    dict: A dictionary with keys in the format 'Position {i}' and values being the mean of the numeric values\n    at position i in the provided data list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n```",
        "gt": "import numpy as np\nimport itertools\nimport json\ndef task_func(data_list, json_file_name=\"mean_values.json\"):\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n    mean_values = [np.nanmean(column) for column in unzipped_data[1:]]\n\n    results = {'Position {}'.format(i+1): mean_value for i, mean_value in enumerate(mean_values)}\n    \n    with open(json_file_name, 'w') as f:\n        json.dump(results, f)\n\n    return results",
        "test": "import unittest\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.json_file = tempfile.NamedTemporaryFile(delete=False)\n    def tearDown(self):\n        self.json_file.close()\n    def test_case_1(self):\n        data_list = [('a', 1, 2), ('b', 2, 3), ('c', 3, 4), ('d', 4, 5), ('e', 5, 6)]\n        expected_output = {'Position 1': 3.0, 'Position 2': 4.0}\n        self.assertEqual(task_func(data_list, self.json_file.name), expected_output)\n    def test_case_2(self):\n        data_list = [('a', 10, 20), ('b', 20, 30), ('c', 30, 40)]\n        expected_output = {'Position 1': 20.0, 'Position 2': 30.0}\n        self.assertEqual(task_func(data_list, self.json_file.name), expected_output)\n    def test_case_3(self):\n        data_list = [('a', 5), ('b', 10), ('c', 15)]\n        expected_output = {'Position 1': 10.0}\n        self.assertEqual(task_func(data_list, self.json_file.name), expected_output)\n    def test_case_4(self):\n        data_list = [('a', 1, 2, 3), ('b', 4, 5, 6), ('c', 7, 8, 9)]\n        expected_output = {'Position 1': 4.0, 'Position 2': 5.0, 'Position 3': 6.0}\n        self.assertEqual(task_func(data_list, self.json_file.name), expected_output)\n        \n    def test_case_5(self):\n        # Test with JSON file export\n        data_list = [('a', 1, 2), ('b', 2, 3), ('c', 3, 4)]\n        expected_output = {'Position 1': 2.0, 'Position 2': 3.0}\n        result = task_func(data_list, json_file_name=self.json_file.name)\n        self.assertEqual(result, expected_output)\n        with open(self.json_file.name, \"r\") as f:\n            json_output = json.load(f)\n        self.assertEqual(json_output, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a time string from one timezone to another, considering various cases such as daylight saving time.\nNote that: The example assumes no daylight saving time shift between the given timezones at the specified date and time.\nThe function should output with:\n    str: The converted time string in the format 'dd/mm/yy HH:MM:SS.fff'. The conversion takes into account any differences in daylight saving rules between the source and target timezones.\nYou should write self-contained code starting with:\n```\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n```",
        "gt": "import pytz\nfrom dateutil.parser import parse\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_string, from_tz, to_tz):\n    from_zone = pytz.timezone(from_tz)\n    to_zone = pytz.timezone(to_tz)\n    dt = parse(time_string, dayfirst=True)\n    dt = from_zone.localize(dt)\n    dt = dt.astimezone(to_zone)\n\n    return dt.strftime(TIME_FORMAT)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_utc_to_est(self):\n        \"\"\"\n        Test conversion from UTC to Eastern Standard Time.\n        \"\"\"\n        result = task_func(\"30/03/09 16:31:32.123\", \"UTC\", \"America/New_York\")\n        expected = \"30/03/09 12:31:32.123000\"  # Adjusted for daylight saving time if applicable\n        self.assertEqual(result, expected)\n    def test_est_to_utc(self):\n        \"\"\"\n        Test conversion from Eastern Standard Time to UTC.\n        \"\"\"\n        result = task_func(\"30/03/09 12:31:32.123\", \"America/New_York\", \"UTC\")\n        expected = \"30/03/09 16:31:32.123000\"  # Adjusted for daylight saving time if applicable\n        self.assertEqual(result, expected)\n    def test_utc_to_ist(self):\n        \"\"\"\n        Test conversion from UTC to Indian Standard Time.\n        \"\"\"\n        result = task_func(\"01/04/09 00:00:00.000\", \"UTC\", \"Asia/Kolkata\")\n        expected = \"01/04/09 05:30:00.000000\"  # IST is UTC+5:30\n        self.assertEqual(result, expected)\n    def test_ist_to_utc(self):\n        \"\"\"\n        Test conversion from Indian Standard Time to UTC.\n        \"\"\"\n        result = task_func(\"01/04/09 05:30:00.000\", \"Asia/Kolkata\", \"UTC\")\n        expected = \"01/04/09 00:00:00.000000\"  # IST is UTC+5:30\n        self.assertEqual(result, expected)\n    def test_utc_to_gmt(self):\n        \"\"\"\n        Test conversion from UTC to GMT (should be the same).\n        \"\"\"\n        result = task_func(\"15/04/09 10:30:00.000\", \"UTC\", \"GMT\")\n        expected = \"15/04/09 10:30:00.000000\"  # GMT and UTC are the same\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Removes all jQuery files (JavaScript files containing 'jquery' in their name) from a specified directory.\nNote that: Removed files are logged in 'jquery_removal.log' file.\nThe function should raise the exception for: If the specified directory does not exist the code would raise FileNotFoundError.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    int: The number of files removed.\n    list: The names of the removed files.\nYou should write self-contained code starting with:\n```\nimport os\nimport logging\ndef task_func(directory):\n```",
        "gt": "import os\nimport logging\ndef task_func(directory):\n\n    # Configure logging\n    logging.basicConfig(filename='jquery_removal.log', level=logging.INFO,\n                        format='%(asctime)s - %(levelname)s - %(message)s')\n    \n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Get all files in the directory\n    files = os.listdir(directory)\n\n    # Remove jQuery files\n    removed_files = 0\n    removed_file_names = []\n    for file in files:\n        if 'jquery' in file and file.endswith('.js'):\n            try:\n                os.remove(os.path.join(directory, file))\n                removed_files += 1\n                removed_file_names.append(file)\n                logging.info(f\"Removed jQuery file: {file}\")\n            except Exception as e:\n                logging.error(f\"Error while removing file {file}: {e}\")\n\n    return removed_files, removed_file_names",
        "test": "import unittest\nfrom unittest.mock import MagicMock, patch\nclass TestCases(unittest.TestCase):\n    @patch('os.path.exists')\n    @patch('os.listdir')\n    @patch('os.remove')\n    def test_remove_jquery_files(self, mock_remove, mock_listdir, mock_exists):\n        mock_exists.return_value = True\n        mock_listdir.return_value = ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js', 'otherfile.txt', 'example.js']\n        removed_count, removed_files = task_func('/fake/directory')\n        self.assertEqual(removed_count, 3)\n        self.assertListEqual(removed_files, ['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])\n    @patch('os.path.exists')\n    @patch('os.listdir')\n    def test_empty_directory(self, mock_listdir, mock_exists):\n        mock_exists.return_value = True\n        mock_listdir.return_value = []\n        removed_count, removed_files = task_func('/fake/empty/directory')\n        self.assertEqual(removed_count, 0)\n        self.assertListEqual(removed_files, [])\n    @patch('os.path.exists')\n    def test_nonexistent_directory(self, mock_exists):\n        mock_exists.return_value = False\n        with self.assertRaises(FileNotFoundError):\n            task_func('/fake/nonexistent/directory')\n    @patch('os.path.exists', return_value=True)\n    @patch('os.listdir', return_value=['jquery-1.js', 'jquery-2.min.js', 'jquery-ui.css'])\n    @patch('os.remove')\n    def test_remove_jquery_files_not_js(self, mock_remove, mock_listdir, mock_exists):\n        removed_count, removed_files = task_func('/fake/directory')\n        self.assertEqual(removed_count, 2)\n        self.assertListEqual(removed_files, ['jquery-1.js', 'jquery-2.min.js'])\n    @patch('os.path.exists', return_value=True)\n    @patch('os.listdir', return_value=['subdir', 'jquery-1.js'])\n    @patch('os.remove')\n    def test_remove_jquery_files_subdirectory(self, mock_remove, mock_listdir, mock_exists):\n        removed_count, removed_files = task_func('/fake/directory')\n        self.assertEqual(removed_count, 1)\n        self.assertListEqual(removed_files, ['jquery-1.js'])\n    @patch('os.path.exists', return_value=True)\n    @patch('os.listdir', return_value=['jquery-1.js', 'jquery-2.js', 'jquery-ui.js'])\n    @patch('os.remove', side_effect=OSError(\"Permission denied\"))\n    def test_remove_jquery_files_error(self, mock_remove, mock_listdir, mock_exists):\n        removed_count, removed_files = task_func('/fake/directory')\n        self.assertEqual(removed_count, 0)\n        self.assertListEqual(removed_files, [])\n    @patch('os.path.exists', return_value=True)\n    @patch('os.listdir', return_value=['jquery-1.js', 'jquery-2.min.js', 'jquery-ui.css'])\n    @patch('os.remove')\n    def test_logging(self, mock_remove, mock_listdir, mock_exists):\n        \"\"\"Test if logging works as expected.\"\"\"\n        with patch('logging.info') as mock_info, \\\n             patch('logging.error') as mock_error:\n            task_func('/fake/directory')\n            mock_info.assert_called()\n            mock_error.assert_not_called()  # Ensure that no error message is logged\n    def tearDown(self):\n        \"\"\"Remove the generated log file after each test.\"\"\"\n        log_file = 'jquery_removal.log'\n        if os.path.exists(log_file):\n            logging.shutdown()  # Manually close the logging file handler\n            os.remove(log_file)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts all URLs from a given string, analyzes each URL to extract the domain, and retrieves the IP address of each domain.\nThe function should raise the exception for: socket.gaierror if the domain cannot be resolved\nThe function should output with:\n    dict: A dictionary with domains as keys and their respective IP addresses (IPv4) as values. If a domain cannot be resolved, the IP address will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n```",
        "gt": "import re\nimport socket\nimport urllib.parse\ndef task_func(myString):\n    urls = re.findall(r'https?://[^\\s,]+', myString)\n    ip_addresses = {}\n\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        try:\n            ip_addresses[domain] = socket.gethostbyname(domain)\n        except socket.gaierror:\n            ip_addresses[domain] = None  # Handle domains that cannot be resolved\n\n    return ip_addresses",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a single valid URL\n        input_str = \"Visit http://www.google.com for more details.\"\n        with patch('socket.gethostbyname', return_value='192.0.2.1'):\n            result = task_func(input_str)\n            self.assertEqual(result, {'www.google.com': '192.0.2.1'})\n    def test_case_2(self):\n        # Test with multiple valid URLs\n        input_str = \"Check these links: http://www.google.com, https://www.python.org\"\n        with patch('socket.gethostbyname', side_effect=['192.0.2.1', '192.0.2.2']):\n            result = task_func(input_str)\n            self.assertEqual(result, {'www.google.com': '192.0.2.1', 'www.python.org': '192.0.2.2'})\n    def test_case_3(self):\n        # Test with a string that doesn't contain any URLs\n        input_str = \"Hello, World!\"\n        result = task_func(input_str)\n        self.assertEqual(result, {})\n    def test_case_4(self):\n        # Test with a string containing invalid URLs\n        input_str = \"Check these: randomtext, another:randomtext\"\n        result = task_func(input_str)\n        self.assertEqual(result, {})\n    def test_case_5(self):\n        # Test with a string containing valid and invalid URLs\n        input_str = \"Valid: http://www.google.com, Invalid: randomtext\"\n        with patch('socket.gethostbyname', return_value='192.0.2.1'):\n            result = task_func(input_str)\n            self.assertEqual(result, {'www.google.com': '192.0.2.1'})\n    def test_case_6(self):\n        # Test with a domain that cannot be resolved\n        input_str = \"Visit http://nonexistent.domain.com\"\n        with patch('socket.gethostbyname', side_effect=socket.gaierror):\n            result = task_func(input_str)\n            self.assertEqual(result, {'nonexistent.domain.com': None})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Executes a list of shell commands in parallel using multiprocessing, and collects their outputs.\nNote that: Notes: If `commands` is an empty list, the function returns an empty list without attempting to execute any commands.\nThe function should output with:\n    list: A list of byte strings, each representing the output of a command. Returns an empty list if `commands` is empty.\nYou should write self-contained code starting with:\n```\nimport subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n```",
        "gt": "import subprocess\nfrom multiprocessing import Pool\ndef execute_command(command):\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, _ = process.communicate()\n    return output\ndef task_func(commands):\n\n    if not commands:  # Handle case where commands list is empty\n        return []\n\n    with Pool(processes=len(commands)) as pool:\n        outputs = pool.map(execute_command, commands)\n\n    return outputs",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.Popen')\n    def test_return_type(self, mock_popen):\n        \"\"\"Test that the function returns a list of byte strings.\"\"\"\n        mock_popen.return_value.communicate.return_value = (b'output', b'')\n        commands = ['ls']\n        result = task_func(commands)\n        self.assertIsInstance(result, list)\n        self.assertTrue(all(isinstance(output, bytes) for output in result))\n    @patch('subprocess.Popen')\n    def test_empty_command_list(self, mock_popen):\n        \"\"\"Test the function with an empty command list.\"\"\"\n        mock_popen.return_value.communicate.return_value = (b'', b'')\n        result = task_func([])\n        self.assertEqual(result, [])\n        mock_popen.assert_not_called()\n    @patch('subprocess.Popen')\n    def test_return_type_with_mocked_commands(self, mock_popen):\n        \"\"\"Test that the function returns a list with mocked commands.\"\"\"\n        mock_popen.return_value.communicate.return_value = (b'Hello', b''), (b'World', b'')\n        commands = ['echo \"Hello\"', 'echo \"World\"']\n        result = task_func(commands)\n        self.assertIsInstance(result, list)\n        self.assertEqual(len(result), 2)\n    @patch('subprocess.Popen')\n    def test_handling_specific_number_of_commands(self, mock_popen):\n        \"\"\"Test the function with a specific number of commands.\"\"\"\n        mock_popen.return_value.communicate.side_effect = [(b'output1', b''), (b'output2', b'')]\n        commands = ['ls', 'pwd']\n        result = task_func(commands)\n        self.assertEqual(len(result), 2)\n    @patch('subprocess.Popen')\n    def test_handling_empty_string_command(self, mock_popen):\n        \"\"\"Test the function with an empty string as a command.\"\"\"\n        mock_popen.return_value.communicate.return_value = (b'', b'')\n        commands = ['']\n        result = task_func(commands)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0], b'')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Stem every word in a sentence, except the last, and count the frequency of each stem.\nThe function should output with:\n    dict: A dictionary with stemmed words as keys and their frequency as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n```",
        "gt": "import re\nimport string\nfrom nltk.stem import PorterStemmer\nfrom collections import Counter\nSTEMMER = PorterStemmer()\ndef task_func(content):\n    content = content.split(' ')[:-1]\n    words = [word.strip(string.punctuation).lower() for word in re.split('\\W+', ' '.join(content))]\n    stemmed_words = [STEMMER.stem(word) for word in words]\n    word_counts = Counter(stemmed_words)\n\n    return dict(word_counts)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('running runner run')\n        self.assertEqual(result, {'run': 1, 'runner': 1})\n    \n    def test_case_2(self):\n        result = task_func('dancing dancer danced')\n        self.assertEqual(result, {'danc': 1, 'dancer': 1})\n        \n    def test_case_3(self):\n        result = task_func('loving lover love')\n        self.assertEqual(result, {'love': 1, 'lover': 1})\n        \n    def test_case_4(self):\n        result = task_func('computing computer compute')\n        self.assertEqual(result, {'comput': 2})\n        \n    def test_case_5(self):\n        result = task_func('swimming swimmer swim')\n        self.assertEqual(result, {'swim': 1, 'swimmer': 1})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Open an RGB image, convert it to grayscale, find contours using the cv2 library, and return the original image and contours.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    tuple: A tuple containing the original image as a numpy array and a list of contours.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n```",
        "gt": "import cv2\nimport numpy as np\nimport os\ndef task_func(img_path):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n    \n    img = cv2.imread(img_path)\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    \n    # Find contours\n    contours, _ = cv2.findContours(gray_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n    return np.array(img), contours",
        "test": "import unittest\nimport numpy as np\nfrom PIL import Image, ImageDraw\nimport os\n            \n            \ndef create_dummy_image(image_path='test_image.jpg', size=(10, 10)):\n    img = Image.new('RGB', size, color='white')\n    draw = ImageDraw.Draw(img)\n    draw.rectangle([2, 2, 8, 8], fill='black')\n    img.save(image_path)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        create_dummy_image()\n    def tearDown(self):\n        os.remove('test_image.jpg')\n    def test_normal_functionality(self):\n        img, contours = task_func('test_image.jpg')\n        self.assertIsInstance(img, np.ndarray)\n        self.assertTrue(isinstance(contours, tuple) and len(contours) > 0)\n        with open(\"filename\", 'w') as file:\n            # Convert the image array to a list and save\n            file.write(\"# Image Array\\n\")\n            image_list = img.tolist()\n            file.write(f\"{image_list}\\n\")\n            \n            # Save the contours\n            file.write(\"\\n# Contours\\n\")\n            for contour in contours:\n                # Convert each contour array to a list\n                contour_list = contour.tolist()\n                file.write(f\"{contour_list}\\n\")\n        \n        expect_img = [[[255, 255, 255], [252, 252, 252], [251, 251, 251], [255, 255, 255], [255, 255, 255], [255, 255, 255], [249, 249, 249], [249, 249, 249], [255, 255, 255], [247, 247, 247]], [[242, 242, 242], [255, 255, 255], [241, 241, 241], [255, 255, 255], [255, 255, 255], [250, 250, 250], [255, 255, 255], [255, 255, 255], [233, 233, 233], [255, 255, 255]], [[255, 255, 255], [237, 237, 237], [4, 4, 4], [0, 0, 0], [0, 0, 0], [0, 0, 0], [12, 12, 12], [0, 0, 0], [23, 23, 23], [250, 250, 250]], [[255, 255, 255], [255, 255, 255], [0, 0, 0], [5, 5, 5], [10, 10, 10], [3, 3, 3], [7, 7, 7], [0, 0, 0], [0, 0, 0], [255, 255, 255]], [[253, 253, 253], [255, 255, 255], [8, 8, 8], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [17, 17, 17], [11, 11, 11], [255, 255, 255]], [[255, 255, 255], [255, 255, 255], [2, 2, 2], [0, 0, 0], [12, 12, 12], [15, 15, 15], [0, 0, 0], [0, 0, 0], [0, 0, 0], [246, 246, 246]], [[254, 254, 254], [255, 255, 255], [4, 4, 4], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [3, 3, 3], [16, 16, 16], [254, 254, 254]], [[253, 253, 253], [255, 255, 255], [0, 0, 0], [0, 0, 0], [12, 12, 12], [0, 0, 0], [11, 11, 11], [0, 0, 0], [0, 0, 0], [249, 249, 249]], [[255, 255, 255], [250, 250, 250], [4, 4, 4], [0, 0, 0], [0, 0, 0], [7, 7, 7], [0, 0, 0], [7, 7, 7], [13, 13, 13], [241, 241, 241]], [[248, 248, 248], [255, 255, 255], [230, 230, 230], [255, 255, 255], [255, 255, 255], [255, 255, 255], [244, 244, 244], [249, 249, 249], [241, 241, 241], [255, 255, 255]]]\n        \n        expect_contours = [[[[0, 0]], [[0, 9]], [[9, 9]], [[9, 0]]],\n                            [[[5, 8]], [[6, 7]], [[7, 8]], [[6, 9]]],\n                            [[[6, 7]], [[7, 6]], [[8, 6]], [[9, 7]], [[8, 8]], [[7, 8]]],\n                            [[[2, 4]], [[3, 3]], [[6, 3]], [[7, 4]], [[8, 4]], [[9, 5]], [[8, 6]], [[7, 6]], [[5, 8]], [[4, 7]], [[5, 8]], [[4, 9]], [[3, 9]], [[1, 7]], [[2, 6]]],\n                            [[[4, 5]], [[5, 5]]],\n                            [[[1, 3]], [[2, 2]], [[3, 3]], [[2, 4]]],\n                            [[[6, 2]], [[7, 1]], [[9, 3]], [[8, 4]], [[7, 4]], [[6, 3]]],\n                            [[[2, 2]], [[3, 1]], [[5, 1]], [[6, 2]], [[5, 3]], [[3, 3]]]]\n        \n        self.assertTrue(np.array_equal(expect_img, img), \"The arrays should not be equal\")\n        \n        for i in range(len(contours)):\n            self.assertTrue(np.array_equal(contours[i], expect_contours[i]), \"The arrays should not be equal\")\n        \n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.jpg')\n    def test_image_shape(self):\n        img, _ = task_func('test_image.jpg')\n        self.assertEqual(img.shape, (10, 10, 3))\n    def test_contours_output_type(self):\n        _, contours = task_func('test_image.jpg')\n        self.assertIsInstance(contours, tuple)\n    def test_invalid_img_path_type(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(123)  # Passing a non-string path",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scrape the first table from a web page and extract data into a Pandas DataFrame. This function scrapes the first table found on the specified web page URL and extracts the data into a DataFrame, where each row in the DataFrame corresponds to a table row (<tr>) from the web page, and each column represents the data contained within table data elements (<td>) of that row. The DataFrame's columns are named after the table's header row (<th> elements), if present. If the table lacks headers, the DataFrame's columns remain unnamed.\nNote that: Assumes the webpage contains at least one table and attempts to parse the first table encountered.\nThe function should raise the exception for: ConnectionError: If there is an issue connecting to the URL. requests.HTTPError: If the HTTP request to the URL fails. ValueError: If no table data is found on the page or if the page content cannot be parsed.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the scraped table data, with rows corresponding to table rows and\n    columns named after the table headers, if available.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n```",
        "gt": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\ndef task_func(url='http://example.com'):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Could not connect to URL: {e}\")\n    except requests.HTTPError as e:\n        raise requests.HTTPError(f\"HTTP error occurred: {e}\")\n\n    try:\n        soup = BeautifulSoup(response.text, 'html.parser')\n        table = soup.find('table')  # Assuming only the first table is of interest\n        if table is None:\n            raise ValueError(\"No table found on the page.\")\n\n        # Extracting headers if present\n        headers = [th.text.strip() for th in table.find_all('th')]\n        \n        # Extracting data rows\n        data = []\n        for row in table.find_all('tr'):\n            cols = row.find_all('td')\n            if not cols:  # This skips rows without <td> (like header rows)\n                continue\n            cols = [ele.text.strip() for ele in cols]\n            data.append(cols)\n\n        if not data:\n            raise ValueError(\"No data found in the table.\")\n\n        df = pd.DataFrame(data, columns=headers if headers else None)\n    except Exception as e:\n        raise ValueError(f\"Error parsing the page content: {e}\")\n    return df",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport pandas as pd\nimport requests\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_return_type(self, mock_get):\n        # Simulate HTML content for a successful response\n        mock_get.return_value.ok = True\n        mock_get.return_value.text = '<table><tr><td>1</td><td>Test</td></tr></table>'\n        df = task_func('http://mockedurl.com')\n        self.assertIsInstance(df, pd.DataFrame)\n    @patch('requests.get')\n    def test_invalid_url(self, mock_get):\n        # Simulate a connection error\n        mock_get.side_effect = requests.ConnectionError\n        with self.assertRaises(ConnectionError):\n            task_func('http://thisurldoesnotexist.tld')\n    @patch('requests.get')\n    def test_empty_page(self, mock_get):\n        # Simulate an empty page\n        mock_get.return_value.ok = True\n        mock_get.return_value.text = ''\n        with self.assertRaises(ValueError):\n            task_func('http://example.com/empty')\n    @patch('requests.get')\n    def test_non_html_content(self, mock_get):\n        # Simulate non-HTML content\n        mock_get.return_value.ok = True\n        mock_get.return_value.text = 'Non-HTML content'\n        with self.assertRaises(ValueError):\n            task_func('http://example.com/nonhtml')\n    @patch('requests.get')\n    def test_http_error(self, mock_get):\n        # Simulate an HTTP error\n        response_mock = Mock()\n        response_mock.raise_for_status.side_effect = requests.HTTPError\n        mock_get.return_value = response_mock\n        with self.assertRaises(requests.HTTPError):\n            task_func('http://example.com/error')\n            \n    @patch('requests.get')\n    def test_return_type_with_complex_data(self, mock_get):\n        # Simulate HTML content for a successful response with a more complex table structure\n        html_content = \"\"\"\n        <table>\n            <thead>\n                <tr><th>ID</th><th>Name</th><th>Role</th></tr>\n            </thead>\n            <tbody>\n                <tr><td>1</td><td>John Doe</td><td>Developer</td></tr>\n                <tr><td>2</td><td>Jane Smith</td><td>Designer</td></tr>\n                <tr><td>3</td><td>Mike Brown</td><td>Manager</td></tr>\n            </tbody>\n        </table>\n        \"\"\"\n        mock_get.return_value.ok = True\n        mock_get.return_value.text = html_content\n        df = task_func('http://mockedurl.com')\n        self.assertIsInstance(df, pd.DataFrame)\n        # Additionally, verify that the DataFrame has the correct structure and content\n        expected_columns = ['ID', 'Name', 'Role']\n        self.assertEqual(list(df.columns), expected_columns, \"DataFrame should have columns: ID, Name, and Role\")\n        self.assertEqual(len(df), 3, \"DataFrame should have 3 rows corresponding to the table rows\")\n        # Verify some data points to ensure the table data is correctly parsed\n        self.assertEqual(df.iloc[0]['ID'], '1')\n        self.assertEqual(df.iloc[0]['Name'], 'John Doe')\n        self.assertEqual(df.iloc[0]['Role'], 'Developer')\n        self.assertEqual(df.iloc[2]['Name'], 'Mike Brown', \"The last row's Name should be 'Mike Brown'\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a list of tuples turn them into a Pandas DataFrame with math.sin applied to each number.\nThe function should output with:\n    df (DataFrame): A pandas DataFrame. Each row of df corresponds to a tuple from tuples_list, with the values being the sine of the original values in the tuple.\nYou should write self-contained code starting with:\n```\nimport math\nimport pandas as pd\ndef task_func(tuples_list):\n```",
        "gt": "import math\nimport pandas as pd\ndef task_func(tuples_list):\n    df = pd.DataFrame([(math.sin(n) for n in t) for t in tuples_list])\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)])\n        self.assertEqual(df.shape, (3, 4))\n        self.assertEqual(df.iloc[0, 0], math.sin(1))\n        self.assertEqual(df.iloc[0, 1], math.sin(2))\n        self.assertEqual(df.iloc[0, 2], math.sin(3))\n        self.assertEqual(df.iloc[0, 3], math.sin(4))\n        self.assertEqual(df.iloc[1, 0], math.sin(5))\n        self.assertEqual(df.iloc[1, 1], math.sin(6))\n        self.assertEqual(df.iloc[1, 2], math.sin(7))\n        self.assertEqual(df.iloc[1, 3], math.sin(8))\n        self.assertEqual(df.iloc[2, 0], math.sin(9))\n        self.assertEqual(df.iloc[2, 1], math.sin(10))\n        self.assertEqual(df.iloc[2, 2], math.sin(11))\n        self.assertEqual(df.iloc[2, 3], math.sin(12))\n    def test_case_2(self):\n        df = task_func([(1, 2, 3, 4)])\n        self.assertEqual(df.shape, (1, 4))\n        self.assertEqual(df.iloc[0, 0], math.sin(1))\n        self.assertEqual(df.iloc[0, 1], math.sin(2))\n        self.assertEqual(df.iloc[0, 2], math.sin(3))\n        self.assertEqual(df.iloc[0, 3], math.sin(4))\n    def test_case_3(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8)])\n        self.assertEqual(df.shape, (2, 4))\n        self.assertEqual(df.iloc[0, 0], math.sin(1))\n        self.assertEqual(df.iloc[0, 1], math.sin(2))\n        self.assertEqual(df.iloc[0, 2], math.sin(3))\n        self.assertEqual(df.iloc[0, 3], math.sin(4))\n        self.assertEqual(df.iloc[1, 0], math.sin(5))\n        self.assertEqual(df.iloc[1, 1], math.sin(6))\n        self.assertEqual(df.iloc[1, 2], math.sin(7))\n        self.assertEqual(df.iloc[1, 3], math.sin(8))\n    def test_case_4(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)])\n        self.assertEqual(df.shape, (4, 4))\n        self.assertEqual(df.iloc[0, 0], math.sin(1))\n        self.assertEqual(df.iloc[0, 1], math.sin(2))\n        self.assertEqual(df.iloc[0, 2], math.sin(3))\n        self.assertEqual(df.iloc[0, 3], math.sin(4))\n        self.assertEqual(df.iloc[1, 0], math.sin(5))\n        self.assertEqual(df.iloc[1, 1], math.sin(6))\n        self.assertEqual(df.iloc[1, 2], math.sin(7))\n        self.assertEqual(df.iloc[1, 3], math.sin(8))\n        self.assertEqual(df.iloc[2, 0], math.sin(9))\n        self.assertEqual(df.iloc[2, 1], math.sin(10))\n        self.assertEqual(df.iloc[2, 2], math.sin(11))\n        self.assertEqual(df.iloc[2, 3], math.sin(12))\n        self.assertEqual(df.iloc[3, 0], math.sin(13))\n        self.assertEqual(df.iloc[3, 1], math.sin(14))\n        self.assertEqual(df.iloc[3, 2], math.sin(15))\n        self.assertEqual(df.iloc[3, 3], math.sin(16))\n    def test_case_5(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16), (17, 18, 19, 20)])\n        self.assertEqual(df.shape, (5, 4))\n        self.assertEqual(df.iloc[0, 0], math.sin(1))\n        self.assertEqual(df.iloc[0, 1], math.sin(2))\n        self.assertEqual(df.iloc[0, 2], math.sin(3))\n        self.assertEqual(df.iloc[0, 3], math.sin(4))\n        self.assertEqual(df.iloc[1, 0], math.sin(5))\n        self.assertEqual(df.iloc[1, 1], math.sin(6))\n        self.assertEqual(df.iloc[1, 2], math.sin(7))\n        self.assertEqual(df.iloc[1, 3], math.sin(8))\n        self.assertEqual(df.iloc[2, 0], math.sin(9))\n        self.assertEqual(df.iloc[2, 1], math.sin(10))\n        self.assertEqual(df.iloc[2, 2], math.sin(11))\n        self.assertEqual(df.iloc[2, 3], math.sin(12))\n        self.assertEqual(df.iloc[3, 0], math.sin(13))\n        self.assertEqual(df.iloc[3, 1], math.sin(14))\n        self.assertEqual(df.iloc[3, 2], math.sin(15))\n        self.assertEqual(df.iloc[3, 3], math.sin(16))\n        self.assertEqual(df.iloc[4, 0], math.sin(17))\n        self.assertEqual(df.iloc[4, 1], math.sin(18))\n        self.assertEqual(df.iloc[4, 2], math.sin(19))\n        self.assertEqual(df.iloc[4, 3], math.sin(20))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws five squares of random colors using Turtle Graphics. Each square is drawn sequentially with a 1-second pause between squares. The function requires a list of colors as input and sets up a Turtle Graphics window, creates a Turtle object, and uses it to draw the squares with colors from the provided list. The window remains open after drawing.\nThe function should output with:\n    None.\nYou should write self-contained code starting with:\n```\nfrom random import choice\nimport turtle\nimport time\ndef task_func(colors):\n```",
        "gt": "from random import choice\nimport turtle\nimport time\ndef task_func(colors):\n    window = turtle.Screen()\n    window.bgcolor('white')\n\n    t = turtle.Turtle()\n    t.speed(1)\n\n    for _ in range(5):\n        t.color(choice(colors))\n        for _ in range(4):\n            t.forward(100)\n            t.right(90)\n        time.sleep(1)\n\n    window.mainloop()",
        "test": "import unittest\nfrom unittest.mock import patch, call\nimport turtle\nclass TestCases(unittest.TestCase):\n    @patch('turtle.Turtle')\n    @patch('turtle.Screen')\n    def test_turtle_setup(self, mock_screen, mock_turtle):\n        \"\"\" Test the setup of the Turtle Graphics environment. \"\"\"\n        colors = ['red', 'blue', 'green', 'yellow', 'purple']\n        task_func(colors)\n        mock_screen.assert_called_once()\n        mock_turtle.assert_called_once()\n    @patch('turtle.Turtle')\n    @patch('turtle.Screen')\n    def test_function_executes_without_error(self, mock_screen, mock_turtle):\n        \"\"\" Test that the task_func function executes without raising any errors. \"\"\"\n        colors = ['red', 'blue', 'green', 'yellow', 'purple']\n        try:\n            task_func(colors)\n            execution_successful = True\n        except Exception:\n            execution_successful = False\n        self.assertTrue(execution_successful)\n    @patch('turtle.Turtle')\n    def test_square_drawing(self, mock_turtle):\n        \"\"\" Test that the turtle moves correctly to draw squares. \"\"\"\n        colors = ['red', 'blue', 'green', 'yellow', 'purple']\n        task_func(colors)\n        move_calls = [call.forward(100), call.right(90)] * 4 * 5  # 4 sides per square, 5 squares\n        mock_turtle.return_value.assert_has_calls(move_calls, any_order=True)\n    @patch('time.sleep')\n    @patch('turtle.Turtle')\n    def test_time_delay(self, mock_turtle, mock_sleep):\n        \"\"\" Test that there is a time delay between each square. \"\"\"\n        colors = ['red', 'blue', 'green', 'yellow', 'purple']\n        task_func(colors)\n        self.assertEqual(mock_sleep.call_count, 5)\n        mock_sleep.assert_called_with(1)\n    @patch('turtle.Turtle')\n    @patch('turtle.Screen')\n    def test_mainloop_invocation(self, mock_screen, mock_turtle):\n        \"\"\" Test that the Turtle window's mainloop is called. \"\"\"\n        colors = ['red', 'blue', 'green', 'yellow', 'purple']\n        task_func(colors)\n        mock_screen.return_value.mainloop.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>' in the specified column, and return the cleaned DataFrame.\nThe function should output with:\n    pd.DataFrame: The cleaned Pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nimport os\nimport sys\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    if not os.path.exists(file_path):\n        print(f'File does not exist: {file_path}')\n        sys.exit(1)\n\n    df = pd.read_csv(file_path)\n    \n    # Check if the column exists\n    if column_name in df.columns:\n        df[column_name] = df[column_name].replace({'\\n': '<br>'}, regex=True)\n    else:\n        print(f\"Column '{column_name}' does not exist in the DataFrame. No changes were made.\")\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        os.mkdir('test')\n        data = {\n            'ID': [1, 2, 3],\n            'Value': [\"Hello\\nWorld\", \"Python\\nis\\nawesome\", \"No newlines here\"]\n        }\n        df = pd.DataFrame(data)\n        df.to_csv('test/test_data_1.csv', index=False)\n        data = {\n            'ID': [1, 2],\n            'Comments': [\"Good\\nMorning\", \"Happy\\nCoding\"]\n        }\n        df = pd.DataFrame(data)\n        df.to_csv('test/test_data_2.csv', index=False)\n        data = {\n            'ID': [1, 2],\n            'Text': [\"Line 1\", \"Line 2\\nLine 3\"]\n        }\n        df = pd.DataFrame(data)\n        df.to_csv('test/test_data_3.csv', index=False)\n    def tearDown(self):\n        os.remove('test/test_data_1.csv')\n        os.remove('test/test_data_2.csv')\n        os.remove('test/test_data_3.csv')\n        os.rmdir('test')\n    def test_case_1(self):\n        df = task_func('test/test_data_1.csv', 'Value')\n        self.assertEqual(df['Value'].iloc[0], \"Hello<br>World\")\n        self.assertEqual(df['Value'].iloc[1], \"Python<br>is<br>awesome\")\n        self.assertEqual(df['Value'].iloc[2], \"No newlines here\")\n        \n    def test_case_2(self):\n        df = task_func('test/test_data_2.csv', 'Comments')\n        self.assertEqual(df['Comments'].iloc[0], \"Good<br>Morning\")\n        self.assertEqual(df['Comments'].iloc[1], \"Happy<br>Coding\")\n        \n    def test_case_3(self):\n        df = task_func('test/test_data_3.csv', 'Text')\n        self.assertEqual(df['Text'].iloc[0], \"Line 1\")\n        self.assertEqual(df['Text'].iloc[1], \"Line 2<br>Line 3\")\n        \n    def test_case_4(self):\n        df1 = task_func('test/test_data_1.csv', 'Value')\n        df2 = task_func('test/test_data_1.csv', '')\n        self.assertEqual(df1['Value'].iloc[0], \"Hello<br>World\")\n        self.assertEqual(df2['Value'].iloc[0], \"Hello\\nWorld\")\n        \n    def test_case_5(self):\n        df1 = task_func('test/test_data_1.csv', 'Value')\n        df2 = task_func('test/test_data_1.csv', 'NonExistentColumn')\n        self.assertEqual(df1['Value'].iloc[0], \"Hello<br>World\")\n        self.assertEqual(df2['Value'].iloc[0], \"Hello\\nWorld\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate n random Unix timestamps and convert them to strings formatted as UTC DATE_FORMAT. Plot a histogram of the distribution of the generated timestamps. If an output path is provided, save the histogram to the specified path. Otherwise, display the plot.\nThe function should output with:\n    list: The list of n formatted timestamps.\nYou should write self-contained code starting with:\n```\nimport time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n```",
        "gt": "import time\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\ndef task_func(n, output_path=None):\n    timestamps = []\n    for _ in range(n):\n        timestamp = random.randint(0, int(time.time()))\n        formatted_time = datetime.utcfromtimestamp(timestamp).strftime(DATE_FORMAT)\n        timestamps.append(formatted_time)\n\n    plt.hist([datetime.strptime(t, DATE_FORMAT) for t in timestamps])\n\n    if output_path:\n        plt.savefig(output_path)\n    else:\n        plt.show()\n    return timestamps",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.o_1 = os.path.join(self.test_dir, \"histogram_1.png\")\n    def tearDown(self) -> None:\n        import shutil\n        try:\n            shutil.rmtree(self.test_dir)\n        except:\n            pass\n    def test_case_1(self):\n        random.seed(42)\n        result = task_func(10)\n        self.assertEqual(len(result), 10)\n    def test_case_2(self):\n        random.seed(42)\n        result = task_func(15)\n        for timestamp in result:\n            try:\n                datetime.strptime(timestamp, DATE_FORMAT)\n            except ValueError:\n                self.fail(f\"Timestamp {timestamp} doesn't match the specified format.\")\n    def test_case_3(self):\n        random.seed(42)\n        task_func(20, output_path=self.o_1)\n        self.assertTrue(os.path.exists(self.o_1))\n    def test_case_4(self):\n        result = task_func(50)\n        self.assertEqual(len(result), len(set(result)))\n    def test_case_5(self):\n        result = task_func(0)\n        self.assertEqual(len(result), 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read an image, create a histogram of the image pixel intensities, save the histogram as a PNG file, and return the histogram plot object. The function also displays the original image and its histogram. The limit to the size of the image depends on the hardware capabilities of the system you are working on. A possible size of an image is 20x20.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the histogram plot.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n```",
        "gt": "import cv2\nimport os\nfrom matplotlib import pyplot as plt\ndef task_func(image_path='image.jpg', histogram_path='histogram.png'):\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    hist = cv2.calcHist([img], [0], None, [256], [0, 256])\n\n    plt.figure()\n    plt.title(\"Grayscale Histogram\")\n    plt.xlabel(\"Bins\")\n    plt.ylabel(\"# of Pixels\")\n    axes = plt.plot(hist)[0].axes\n    plt.savefig(histogram_path)\n    return axes",
        "test": "import unittest\nimport os\nfrom PIL import Image, ImageDraw\nimport matplotlib\ndef create_dummy_image(image_path='test_image.jpg', size=(20, 20)):\n    \"\"\"\n    Creates a dummy grayscale image for testing.\n    The image size is 20x20 pixels.\n    \"\"\"\n    img = Image.new('L', size, color='white')\n    draw = ImageDraw.Draw(img)\n    draw.rectangle([2, 2, 6, 6], fill='black')\n    draw.line([2, 15, 18, 15], fill='black', width=1)\n    img.save(image_path)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        create_dummy_image()\n    def tearDown(self):\n        os.remove('test_image.jpg')\n        if os.path.exists('histogram.png'):\n            os.remove('histogram.png')\n    def test_normal_functionality(self):\n        histogram_axes = task_func('test_image.jpg', 'histogram.png')\n        self.assertTrue(os.path.exists('histogram.png'))\n        self.assertIsInstance(histogram_axes, matplotlib.axes.Axes)\n        self.assertEqual(histogram_axes.title.get_text(), \"Grayscale Histogram\")\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.jpg')\n    def test_histogram_labels(self):\n        histogram_axes = task_func('test_image.jpg')\n        self.assertEqual(histogram_axes.get_xlabel(), \"Bins\")\n        self.assertEqual(histogram_axes.get_ylabel(), \"# of Pixels\")\n    def test_histogram_output_type(self):\n        histogram_axes = task_func('test_image.jpg')\n        self.assertIsInstance(histogram_axes.get_lines()[0], matplotlib.lines.Line2D)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function reads data from a CSV file, normalizes a specific column named 'column1', and then plots the normalized data. - The title is created using Python's string formatting, aligning 'Plot Title' and 'Normalized Column 1' on either side of a colon, each padded to 20 characters. - Similarly, the x-label is formatted with 'Index' and 'Normalized Value' on either side of a colon, each padded to 20 characters. - The y-label is set in the same manner, with 'Frequency' and 'Normalized Value' on either side of a colon.\nThe function should output with:\n    The matplotlib.axes.Axes object with the plot of the normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path: str):\n    df = pd.read_csv(csv_file_path)\n    mean = df[\"column1\"].mean()\n    std = df[\"column1\"].std()\n    df[\"column1_normalized\"] = (df[\"column1\"] - mean) / std\n\n    # Creating a figure and axes\n    _, ax = plt.subplots()\n    # Plotting on the created axes\n    ax.plot(df[\"column1_normalized\"])\n    title = \"%*s : %*s\" % (20, \"Plot Title\", 20, \"Normalized Column 1\")\n    xlabel = \"%*s : %*s\" % (20, \"Index\", 20, \"Normalized Value\")\n    ylabel = \"%*s : %*s\" % (20, \"Frequency\", 20, \"Normalized Value\")\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n\n    # Return the axes object for further manipulation\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @patch(\"pandas.read_csv\")\n    def test_title_format(self, mock_read_csv):\n        \"\"\"Test that the function returns the correct title.\"\"\"\n        # Mocking the DataFrame\n        mock_data = pd.DataFrame({\"column1\": np.random.rand(10)})\n        mock_read_csv.return_value = mock_data\n        ax = task_func(\"dummy_path\")\n        expected_title = \"          Plot Title :  Normalized Column 1\"\n        self.assertEqual(ax.get_title(), expected_title)\n    @patch(\"pandas.read_csv\")\n    def test_xlabel_format(self, mock_read_csv):\n        \"\"\"Test that the function returns the correct xlabel.\"\"\"\n        mock_data = pd.DataFrame({\"column1\": np.random.rand(10)})\n        mock_read_csv.return_value = mock_data\n        ax = task_func(\"dummy_path\")\n        expected_xlabel = \"               Index :     Normalized Value\"\n        self.assertEqual(ax.get_xlabel(), expected_xlabel)\n    @patch(\"pandas.read_csv\")\n    def test_ylabel_format(self, mock_read_csv):\n        \"\"\"Test that the function returns the correct ylabel.\"\"\"\n        mock_data = pd.DataFrame({\"column1\": np.random.rand(10)})\n        mock_read_csv.return_value = mock_data\n        ax = task_func(\"dummy_path\")\n        expected_ylabel = \"           Frequency :     Normalized Value\"\n        self.assertEqual(ax.get_ylabel(), expected_ylabel)\n    @patch(\"pandas.read_csv\")\n    def test_data_points_length(self, mock_read_csv):\n        \"\"\"Test that the function returns the correct number of data points.\"\"\"\n        mock_data = pd.DataFrame({\"column1\": np.random.rand(10)})\n        mock_read_csv.return_value = mock_data\n        ax = task_func(\"dummy_path\")\n        line = ax.get_lines()[0]\n        self.assertEqual(len(line.get_data()[1]), 10)\n    @patch(\"pandas.read_csv\")\n    def test_data_points_range(self, mock_read_csv):\n        \"\"\"Test that the function returns the correct data points.\"\"\"\n        mock_data = pd.DataFrame({\"column1\": np.random.rand(10)})\n        mock_read_csv.return_value = mock_data\n        ax = task_func(\"dummy_path\")\n        line = ax.get_lines()[0]\n        data_points = line.get_data()[1]\n        self.assertTrue(all(-3 <= point <= 3 for point in data_points))\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a list of random sinusoidal values and plot them in a graph.\nThe function should output with:\n    Axes object: The plot of the sinusoidal wave.\nYou should write self-contained code starting with:\n```\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n# Constants\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n```",
        "gt": "import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n# Constants\nRANGE = 10000\nSIZE = 1000\nPI = np.pi\ndef task_func(size=SIZE, frequency=1):\n    x_values = np.arange(0, size)\n    y_values = [math.sin((2 * PI / RANGE) * (x + int(RANGE * random.random()) * frequency)) for x in range(size)]\n    \n    fig, ax = plt.subplots()\n    ax.plot(x_values, y_values)\n    \n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n        \n    def test_case_4(self):\n        ax = task_func(size=1500, frequency=0.5)\n        x_data, y_data = ax.lines[0].get_data()\n        self.assertEqual(len(x_data), 1500)\n        self.assertTrue(min(y_data) >= -1 and max(y_data) <= 1)\n    def test_standard_functionality(self):\n        \"\"\"Test the function with default parameters.\"\"\"\n        ax = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n    def test_varying_sizes(self):\n        \"\"\"Test the function with different array sizes.\"\"\"\n        for size in [0, 10, 500, 1500]:\n            ax = task_func(size=size)\n            self.assertIsInstance(ax, plt.Axes)\n            self.assertEqual(len(ax.lines[0].get_xdata()), size)\n    def test_different_frequencies(self):\n        \"\"\"Test the function with different frequencies.\"\"\"\n        for frequency in [0.5, 1, 2]:\n            ax = task_func(frequency=frequency)\n            self.assertIsInstance(ax, plt.Axes)\n    def test_plot_output(self):\n        \"\"\"Verify the plot is generated and is of correct type.\"\"\"\n        ax = task_func()\n        self.assertTrue(hasattr(ax, 'figure'), \"Plot does not have associated figure attribute\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all subsets of a given size from a tuple and calculate the product of the sums of the subsets. Additionally, return the top_n sums of the subsets. If the subset size is larger than the tuple length, return 1. If the subset size is 0, return 1.\nThe function should output with:\n    int: The product of the sums of the subsets.\n    list: The top_n sums of the subsets as a pandas Series.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n```",
        "gt": "import itertools\nimport math\nfrom pandas import Series\ndef task_func(elements, subset_size, top_n=2):\n    if subset_size > len(elements) or subset_size <= 0:\n        return 1, []\n\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations if len(combination) != 0]\n    product = math.prod(sums)\n    top_sums = sorted(sums, reverse=True)[:top_n]\n    top_sums = Series(top_sums)\n    return product, top_sums",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Default values\n        result, _ = task_func((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2)\n        expected = 2781259372192376861719959017613164544000000000\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        # Custom tuple and subset size\n        result, sums = task_func((1, 2, 3), 2)\n        expected = 60\n        self.assertEqual(result, expected)\n        # Test the top sums\n        self.assertEqual(list(sums), [5, 4])\n        # Test the type of the top sums\n        self.assertIsInstance(sums, Series)\n    def test_case_3(self):\n        # Larger subset size than tuple length\n        result, _ = task_func((1, 2, 3), 5)\n        expected = 1  # No subset of size 5 can be formed, so the product will be 1\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        # Subset size of 0\n        result, sums = task_func((1, 2, 3), 0)\n        expected = 1  # No subset of size 0 can be formed, so the product will be 1\n        self.assertEqual(result, expected)\n        self.assertEqual(list(sums), [])\n    def test_case_5(self):\n        # Larger tuple\n        result, _ = task_func((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), 4)\n        self.assertIsInstance(result, int)  # Ensure the result is an integer",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Finds the most common two-letter combination in a given, cleaned word (lowercased and alphabetic characters only) and returns its frequency. The search is case-insensitive and ignores non-alphabetic characters.\nThe function should output with:\n    list: A list containing a single tuple. The tuple consists of the most frequent two-letter combination (str)\n    and its frequency (int). Returns an empty list if the word has fewer than 2 letters, or after cleaning,\n    the word has fewer than 2 alphabetic characters.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport re\ndef task_func(word: str) -> list:\n```",
        "gt": "from collections import Counter\nimport re\ndef task_func(word: str) -> list:\n    # Clean the word: lowercase and keep alphabetic characters only\n    clean_word = re.sub('[^a-z]', '', word.lower())\n    \n    if len(clean_word) < 2:\n        return []\n    \n    pairs = [clean_word[i:i+2] for i in range(len(clean_word) - 1)]\n    pair_counter = Counter(pairs)\n    most_common = pair_counter.most_common(1)\n    \n    # This check ensures we return the result directly from most_common without additional filtering\n    return most_common",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_repeating_pairs(self):\n        self.assertEqual(task_func(\"aabbcc\"), [('aa', 1)], \"Should identify single repeating pair\")\n        \n    def test_mixed_repeating_pairs(self):\n        self.assertEqual(task_func(\"abcabc\"), [('ab', 2)], \"Should identify most frequent pair in mixed sequence\")\n        \n    def test_single_character(self):\n        self.assertEqual(task_func(\"a\"), [], \"Should return empty list for single character\")\n        \n    def test_unique_pairs(self):\n        self.assertEqual(task_func(\"abcdef\"), [('ab', 1)], \"Should handle all unique pairs\")\n        \n    def test_empty_string(self):\n        self.assertEqual(task_func(\"\"), [], \"Should return empty list for empty string\")\n    def test_case_insensitive(self):\n        # Corrected the expected count to match the correct behavior of the function\n        self.assertEqual(task_func(\"aAaAbbBB\"), [('aa', 3)], \"Should be case-insensitive\")\n    def test_ignore_non_alphabetic(self):\n        self.assertEqual(task_func(\"abc123abc!\"), [('ab', 2)], \"Should ignore non-alphabetic characters\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a bar chart representing the positions of each letter in the given word within the English alphabet using numpy and matplotlib.pyplot. Constants: - ALPHABET: A list containing all lowercase letters of the English alphabet.\nNote that: The function uses the index of each letter in the English alphabet to represent its position. For example, 'a' will be represented by 1, 'b' by 2, and so on.\nThe function should output with:\n    Axes: A matplotlib.axes._axes.Axes object representing the generated plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport string\n# Constants\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport string\n# Constants\nALPHABET = list(string.ascii_lowercase)\ndef task_func(word):\n    # Validate the input word to contain only alphabetic characters\n    if not all(char in ALPHABET for char in word):\n        raise ValueError(\"The word should contain only lowercase alphabetic characters.\")\n        \n    # Calculate the positions of each letter in the word within the alphabet\n    letter_positions = np.array(list(map(lambda x: ALPHABET.index(x) + 1, word)))\n    \n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n    \n    # Draw the bar chart on the axis\n    ax.bar(np.arange(len(letter_positions)), letter_positions)\n    \n    # Configure plot settings\n    ax.set_xlabel('Letter Index')\n    ax.set_ylabel('Alphabetical Position')\n    ax.set_title('Alphabetical Position of Letters in Word')\n    \n    plt.show()\n    \n    return ax",
        "test": "import unittest\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        ax = task_func('abc')\n        self.assertIsInstance(ax, Axes, \"The returned object is not an instance of Axes.\")\n        self.assertEqual(ax.patches[0].get_height(), 1, \"The height of the first bar should be 1.\")\n        self.assertEqual(ax.patches[1].get_height(), 2, \"The height of the second bar should be 2.\")\n        self.assertEqual(ax.patches[2].get_height(), 3, \"The height of the third bar should be 3.\")\n    \n    def test_case_2(self):\n        ax = task_func('xyz')\n        self.assertIsInstance(ax, Axes, \"The returned object is not an instance of Axes.\")\n        self.assertEqual(ax.patches[0].get_height(), 24, \"The height of the first bar should be 24.\")\n        self.assertEqual(ax.patches[1].get_height(), 25, \"The height of the second bar should be 25.\")\n        self.assertEqual(ax.patches[2].get_height(), 26, \"The height of the third bar should be 26.\")\n        \n    def test_case_3(self):\n        ax = task_func('ace')\n        self.assertIsInstance(ax, Axes, \"The returned object is not an instance of Axes.\")\n        self.assertEqual(ax.patches[0].get_height(), 1, \"The height of the first bar should be 1.\")\n        self.assertEqual(ax.patches[1].get_height(), 3, \"The height of the second bar should be 3.\")\n        self.assertEqual(ax.patches[2].get_height(), 5, \"The height of the third bar should be 5.\")\n        \n    def test_case_4(self):\n        ax = task_func('bd')\n        self.assertIsInstance(ax, Axes, \"The returned object is not an instance of Axes.\")\n        self.assertEqual(ax.patches[0].get_height(), 2, \"The height of the first bar should be 2.\")\n        self.assertEqual(ax.patches[1].get_height(), 4, \"The height of the second bar should be 4.\")\n        \n    def test_case_5(self):\n        with self.assertRaises(ValueError):\n            task_func('a1b')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform a linear regression on two columns of a dataset and record the result. Additionally, generates a plot representing the original data and the fitted line.\nThe function should raise the exception for: ValueError: If the specified columns do not exist in the DataFrame.\nThe function should output with:\n    tuple: The slope, intercept, r-value, p-value, and standard error of the regression.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nfrom scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n```",
        "gt": "from scipy.stats import linregress\nimport matplotlib.pyplot as plt\ndef task_func(data, column1, column2):\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Specified columns must exist in the DataFrame\")\n\n    x = data[column1].values\n    y = data[column2].values\n\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'o', label='original data')\n    ax.plot(x, intercept + slope*x, 'r', label='fitted line')\n    ax.legend()\n\n    return (slope, intercept, r_value, p_value, std_err), ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data = pd.DataFrame({\n            'Column1': [14, 1, 7, 10, 5],\n            'Column2': [25, 22, 8, 15, 11]\n        })\n    def test_regression_results(self):\n        result, _ = task_func(self.data, 'Column1', 'Column2')\n        self.assertIsInstance(result, tuple)\n        self.assertEqual(len(result), 5)\n    def test_invalid_columns(self):\n        with self.assertRaises(ValueError):\n            task_func(self.data, 'Invalid1', 'Column2')\n    def test_plot_axes(self):\n        _, ax = task_func(self.data, 'Column1', 'Column2')\n        self.assertEqual(len(ax.lines), 2)  # Original data and fitted line\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame(), 'Column1', 'Column2')\n    def test_single_point_regression(self):\n        single_point_data = pd.DataFrame({'Column1': [1], 'Column2': [2]})\n        result, ax = task_func(single_point_data, 'Column1', 'Column2')\n        # self.assertEqual(result[0], np.nan)\n        self.assertEqual(result[2], 0)  # Slope should be 0 for single point\n    \n    def test_return_values(self):\n        result, ax = task_func(self.data, 'Column1', 'Column2')\n        # print(result)\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(result))\n        expect = (0.3456790123456789, 13.641975308641975, 0.23699046752221187, 0.7011032163730078, 0.8181438416490141)\n        for res, exp in zip(result, expect):\n            self.assertAlmostEqual(res, exp, places=7)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Open an image, rotate it around a certain angle, and then display both the original and the rotated images side by side. Additionally, return both images as numpy arrays.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays, the first representing the original image and\n    the second representing the rotated image. Expands the rotated image to make it large enough to hold the entire rotated image.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n```",
        "gt": "from PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\ndef task_func(img_path, angle):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n    \n    img = Image.open(img_path)\n    rotated_img = img.rotate(angle,expand=True)\n\n    # Convert images to numpy arrays\n    original_img_array = np.array(img)\n    rotated_img_array = np.array(rotated_img)\n    \n    # Display original and rotated images side by side\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.imshow(img)\n    plt.title('Original Image')\n    plt.subplot(1, 2, 2)\n    plt.imshow(rotated_img)\n    plt.title('Rotated Image')\n\n    return original_img_array, rotated_img_array",
        "test": "import unittest\nfrom PIL import Image, ImageDraw\nimport numpy as np\nimport os\ndef create_dummy_image(image_path='test_image.png', size=(10, 10)):\n    \"\"\"\n    Creates a dummy color image for testing.\n    The image size is 10x10 pixels.\n    \"\"\"\n    img = Image.new('RGB', size, color='white')\n    draw = ImageDraw.Draw(img)\n    # Draw small shapes\n    draw.point((2, 2), fill='red')  # Red point\n    draw.point((5, 5), fill='green')  # Green point\n    draw.point((8, 8), fill='blue')  # Blue point\n    img.save(image_path)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        create_dummy_image()\n    def tearDown(self):\n        os.remove('test_image.png')\n    def test_normal_functionality(self):\n        original_img, rotated_img = task_func('test_image.png', 45)\n        self.assertIsInstance(original_img, np.ndarray)\n        self.assertIsInstance(rotated_img, np.ndarray)\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.png', 45)\n    def test_zero_rotation(self):\n        original_img, rotated_img = task_func('test_image.png', 0)\n        self.assertTrue(np.array_equal(original_img, rotated_img))\n    def test_full_rotation(self):\n        original_img, rotated_img = task_func('test_image.png', 360)\n        self.assertTrue(np.array_equal(original_img, rotated_img))\n    def test_negative_angle(self):\n        _, rotated_img = task_func('test_image.png', -45)\n        self.assertIsInstance(rotated_img, np.ndarray)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the number of words and punctuation marks in a string.\nThe function should output with:\n    tuple: A tuple containing the number of words and punctuation marks.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n```",
        "gt": "import re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    # Use a regex that matches sequences of alphanumeric characters as words\n    words = re.findall(r'\\b\\w+\\b', text)\n    punctuation_marks = [char for char in text if char in PUNCTUATION]\n\n    return len(words), len(punctuation_marks)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_basic_input(self):\n        \"\"\"Test with basic input string\"\"\"\n        result = task_func(\"Hello, world! This is a test.\")\n        self.assertEqual(result, (6, 3))\n    def test_no_punctuation(self):\n        \"\"\"Test with a string that has words but no punctuation\"\"\"\n        result = task_func(\"No punctuation here just words\")\n        self.assertEqual(result, (5, 0))\n    \n    def test_with_empty_string(self):\n        \"\"\"Test with an empty string\"\"\"\n        result = task_func(\"\")\n        self.assertEqual(result, (0, 0))\n    def test_with_multiple_spaces(self):\n        \"\"\"Test with a string that has multiple spaces between words\"\"\"\n        result = task_func(\"This  is   a    test     with      multiple       spaces\")\n        self.assertEqual(result, (7, 0))\n    def test_with_only_punctuation(self):\n        \"\"\"Test with a string that consists only of punctuation marks\"\"\"\n        result = task_func(\"!!!\")\n        self.assertEqual(result, (0, 3))\n    \n    def test_with_single_punctuation(self):\n        \"\"\"Test with a string that is a single punctuation mark\"\"\"\n        result = task_func(\"!\")\n        self.assertEqual(result, (0, 1))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a list of tuples, extract numeric values, compute basic statistics, and generate a histogram with an overlaid probability density function (PDF).\nThe function should output with:\n    np.array: A numpy array of the extracted numeric values.\n    dict: Basic statistics for the array including mean, standard deviation, minimum, and maximum.\n    Axes: A matplotlib Axes object showing the histogram with overlaid PDF. The histogram\n    is plotted with density set to True, alpha as 0.6, and bins set to 'auto' for automatic bin selection.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(original):\n    arr = np.array([b for (a, b) in original])\n\n    computed_stats = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr)\n    }\n    \n    # Plotting histogram and PDF\n    fig, ax = plt.subplots()\n    ax.hist(arr, density=True, alpha=0.6, bins='auto', label='Histogram')\n    \n    # Adding PDF\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, computed_stats['mean'], computed_stats['std'])\n    ax.plot(x, p, 'k', linewidth=2, label='PDF')\n    ax.set_title('Histogram with PDF')\n    ax.legend()\n    plt.close(fig)  # Close the plot to prevent display here\n    \n    return arr, computed_stats, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n        arr, stats, ax = task_func(original)\n        self.assertTrue(isinstance(arr, np.ndarray))\n        self.assertEqual(list(arr), [1, 2, 3, 4])\n        self.assertEqual(stats, {'mean': 2.5, 'std': 1.118033988749895, 'min': 1, 'max': 4})\n        self.assertTrue(ax.get_title(), 'Histogram with PDF')\n    def test_case_2(self):\n        original = [('x', 10), ('y', 20)]\n        arr, stats, ax = task_func(original)\n        self.assertTrue(isinstance(arr, np.ndarray))\n        self.assertEqual(list(arr), [10, 20])\n        self.assertEqual(stats, {'mean': 15.0, 'std': 5.0, 'min': 10, 'max': 20})\n        self.assertTrue(ax.get_title(), 'Histogram with PDF')\n    def test_case_3(self):\n        original = [('p', -5), ('q', -10), ('r', -15)]\n        arr, stats, ax = task_func(original)\n        self.assertTrue(isinstance(arr, np.ndarray))\n        self.assertEqual(list(arr), [-5, -10, -15])\n        self.assertEqual(stats, {'mean': -10.0, 'std': 4.08248290463863, 'min': -15, 'max': -5})\n        self.assertTrue(ax.get_title(), 'Histogram with PDF')\n    def test_case_4(self):\n        original = [('m', 0), ('n', 0), ('o', 0)]\n        arr, stats, ax = task_func(original)\n        self.assertTrue(isinstance(arr, np.ndarray))\n        self.assertEqual(list(arr), [0, 0, 0])\n        self.assertEqual(stats, {'mean': 0.0, 'std': 0.0, 'min': 0, 'max': 0})\n        self.assertTrue(ax.get_title(), 'Histogram with PDF')\n    def test_case_5(self):\n        original = [('u', 5.5), ('v', 6.5), ('w', 7.5)]\n        arr, stats, ax = task_func(original)\n        self.assertTrue(isinstance(arr, np.ndarray))\n        self.assertEqual(list(arr), [5.5, 6.5, 7.5])\n        self.assertEqual(stats, {'mean': 6.5, 'std': 0.816496580927726, 'min': 5.5, 'max': 7.5})\n        self.assertTrue(ax.get_title(), 'Histogram with PDF')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Organize files in a directory based on the first text that is not enclosed in square brackets. Move the files to subdirectories named after this text. If no matching text is found, the file is not moved.\nThe function should output with:\n    tuple:\n    str: The directory path with organized files.\n    dict: A dictionary where keys are the created subdirectories and values are lists of files moved to them.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n```",
        "gt": "import re\nimport os\nimport shutil\nfrom datetime import datetime\ndef task_func(directory):\n    DATE_FORMAT = '%Y%m%d%H%M%S'\n    moved_files = {}\n    for filename in os.listdir(directory):\n        with open(os.path.join(directory, filename), 'r') as file:\n            content = file.read()\n            match = re.search('(.*?)\\[.*?\\]', content)\n            if match:\n                subdirectory = match.group(1).strip()\n\n                if not os.path.exists(os.path.join(directory, subdirectory)):\n                    os.makedirs(os.path.join(directory, subdirectory))\n\n                new_filename = f\"{filename.split('.')[0]}_{datetime.now().strftime(DATE_FORMAT)}.{filename.split('.')[1]}\"\n                shutil.move(os.path.join(directory, filename), os.path.join(directory, subdirectory, new_filename))\n                \n                if subdirectory not in moved_files:\n                    moved_files[subdirectory] = []\n                moved_files[subdirectory].append(new_filename)\n\n    return directory, moved_files",
        "test": "import unittest\nimport doctest\nimport tempfile\nfrom faker import Faker\ndef create_test_directory(directory_name, files_content):\n    \"\"\"\n    Helper function to create a test directory and populate it with files containing specified content.\n    \"\"\"\n    if not os.path.exists(directory_name):\n        os.makedirs(directory_name)\n        \n    for filename, content in files_content.items():\n        with open(os.path.join(directory_name, filename), \"w\") as file:\n            file.write(content)\nclass TestCases(unittest.TestCase):\n    fake = Faker()\n    def setUp(self):\n        # Create a temporary directory for testing\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_dir = f\"{self.base_tmp_dir}/test/\"\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n        os.makedirs(self.test_dir)\n    def tearDown(self):\n        # Cleanup the test directory after each test\n        if os.path.exists(self.base_tmp_dir):\n            shutil.rmtree(self.base_tmp_dir)\n    def test_case_1(self):\n        # Basic test with one file and one matching text\n        create_test_directory(self.test_dir, {\"test_file1.txt\": \"example[content]\"})\n        _, moved_files = task_func(self.test_dir)\n        self.assertIn(\"example\", moved_files)\n        self.assertEqual(len(moved_files[\"example\"]), 1)\n    def test_case_2(self):\n        # Test with multiple files and multiple matching texts\n        create_test_directory(self.test_dir, {\n            \"test_file1.txt\": \"example[content]\",\n            \"test_file2.txt\": \"sample[content]\",\n            \"test_file3.txt\": \"example[more content]\"\n        })\n        _, moved_files = task_func(self.test_dir)\n        self.assertIn(\"example\", moved_files)\n        self.assertIn(\"sample\", moved_files)\n        self.assertEqual(len(moved_files[\"example\"]), 2)\n        self.assertEqual(len(moved_files[\"sample\"]), 1)\n    def test_case_3(self):\n        # Test with a file that doesn't have matching text\n        create_test_directory(self.test_dir, {\"test_file1.txt\": \"[example]content\"})\n        _, moved_files = task_func(self.test_dir)\n        self.assertNotIn(\"content\", moved_files)\n    def test_case_4(self):\n        # Test with empty file\n        create_test_directory(self.test_dir, {\"test_file1.txt\": \"\"})\n        _, moved_files = task_func(self.test_dir)\n        self.assertEqual(moved_files, {})\n    def test_case_5(self):\n        # Test with random content generated using Faker\n        content = self.fake.text() + \"[random_content]\"\n        create_test_directory(self.test_dir, {\"test_file1.txt\": content})\n        _, moved_files = task_func(self.test_dir)\n        self.assertTrue(len(moved_files) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a CSV file containing a 2D matrix populated exclusively with random lowercase letters.\nThe function should output with:\n    None: Writes a CSV file to the specified path.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n```",
        "gt": "import numpy as np\nimport pandas as pd\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\nOUTPUT_DIR = './output'\ndef task_func(file_path, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.mkdir(output_dir)\n    matrix = pd.DataFrame(np.random.choice(LETTERS, (10, 10)))\n    matrix.to_csv(file_path, sep='\\t', header=False, index=False)\n\n    return None",
        "test": "import unittest\nimport shutil\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        if not os.path.exists(OUTPUT_DIR):\n            os.mkdir(OUTPUT_DIR)\n    def tearDown(self):\n        \"\"\"Clean up any files created during the tests.\"\"\"\n        # Check and remove the expected file if it exists\n        # if os.path.exists(FILE_PATH):\n        #     os.remove(FILE_PATH)\n        if os.path.exists(OUTPUT_DIR):\n            shutil.rmtree(OUTPUT_DIR)\n    def test_case_1(self):\n        # Testing with a sample file path\n        file_path = os.path.join(OUTPUT_DIR, 'test_output_1.csv')\n        task_func(file_path)\n        df = pd.read_csv(file_path, sep='\\t', header=None)\n        self.assertEqual(df.shape, (10, 10), \"Matrix shape should be 10x10\")\n    def test_case_2(self):\n        # Testing if the generated matrix contains only lowercase letters\n        file_path = os.path.join(OUTPUT_DIR, 'test_output_2.csv')\n        task_func(file_path)\n        df = pd.read_csv(file_path, sep='\\t', header=None)\n        all_lower = df.applymap(str.islower).all().all()\n        self.assertTrue(all_lower, \"All elements should be lowercase letters\")\n    def test_case_3(self):\n        # Testing if the generated matrix contains only letters from the alphabet\n        file_path = os.path.join(OUTPUT_DIR, 'test_output_3.csv')\n        task_func(file_path)\n        df = pd.read_csv(file_path, sep='\\t', header=None)\n        all_alpha = df.applymap(str.isalpha).all().all()\n        self.assertTrue(all_alpha, \"All elements should be alphabetic\")\n    def test_case_4(self):\n        # Testing if the generated matrix contains different letters\n        file_path = os.path.join(OUTPUT_DIR, 'test_output_4.csv')\n        task_func(file_path)\n        df = pd.read_csv(file_path, sep='\\t', header=None)\n        unique_elements = df.nunique().sum()\n        self.assertTrue(unique_elements > 10, \"Matrix should have more than 10 unique elements\")\n    def test_case_5(self):\n        # Testing if the function overwrites existing files\n        file_path = os.path.join(OUTPUT_DIR, 'test_output_5.csv')\n        with open(file_path, 'w') as f:\n            f.write(\"test\")\n        task_func(file_path)\n        with open(file_path, 'r') as f:\n            content = f.read()\n        self.assertNotEqual(content, \"test\", \"Function should overwrite existing content\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the stopwords found in the text after you have removed URLs.\nNote that: Valid url is start with http or https The capitilization need to macth the stopwords\nThe function should output with:\n    list: A list of tuples where each tuple contains a word and its frequency.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n```",
        "gt": "import re\nfrom collections import Counter\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Remove URLs\n    text = re.sub('http[s]?://\\S+', '', text)\n    # Tokenize the text using regex (improved tokenization)\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Count the frequency of each word\n    word_freq = Counter(words)\n    result = Counter(words)\n    for i in word_freq:\n        if i not in PREDEFINED_STOPWORDS:\n            del result[i]\n    return list(result.items())",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a URL\n        input_text = 'Visit https://www.python.org for more info. Python is great.'\n        expected_output = [('for', 1), ('more', 1), ('is', 1)]\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_case_2(self):\n        # Test without a URL\n        input_text = 'Python is an amazing programming language.'\n        expected_output = [('is', 1), ('an', 1)]\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_case_3(self):\n        # Test with long text\n        input_text = \"Python is an interpreted, high-level and general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\"\n        expected_output = [('is', 1), ('an', 1), ('and', 4), ('by', 1), ('in', 1), ('with', 1), ('its', 1), ('of', 1), ('to', 1), ('for', 1)]\n        print(task_func(input_text))\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_case_4(self):\n        # Test with multiple URLs\n        input_text = 'Check out https://www.python.org and https://www.djangoproject.com. Both are amazing.'\n        expected_output = [('out', 1), ('and', 1), ('are', 1)]\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_case_5(self):\n        # Test with short text\n        input_text = 'I love Python.'\n        expected_output = []\n        self.assertEqual(task_func(input_text), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a signed hash of a file's contents using RSA encryption. The file's contents are hashed using SHA-256, and then the hash is signed with a private RSA key stored in 'private.pem'. The signed hash is encoded in base64. Assuming 'empty.txt' is an empty file and a valid 'private.pem' is present, >>> len(task_func('empty.txt')) > 0 True\nThe function should output with:\n    str: The base64 encoded signed hash of the file.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n```",
        "gt": "import hashlib\nimport rsa\nimport base64\ndef task_func(file_path):\n    with open(file_path, 'rb') as f:\n        content = f.read()\n\n    hash_output = hashlib.sha256(content).digest()\n\n    with open('private.pem', 'rb') as key_file:\n        private_key = rsa.PrivateKey.load_pkcs1(key_file.read())\n    signature = rsa.sign(hash_output, private_key, 'SHA-256')\n\n    return base64.b64encode(signature).decode('utf-8')",
        "test": "import unittest\nimport os\nimport rsa\nimport base64\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test environment: create necessary files with mock content.\"\"\"\n        with open('example.txt', 'w') as f:\n            f.write('This is a test file.')\n        with open('empty.txt', 'w') as f:\n            f.write('')  # Empty file\n        # Generate a test RSA key pair\n        (pub_key, priv_key) = rsa.newkeys(512)\n        with open('private.pem', 'wb') as f:\n            f.write(priv_key.save_pkcs1('PEM'))\n        \n        # Create an intentionally invalid private key file\n        with open('invalid_private.pem', 'w') as f:\n            f.write('Invalid key content')\n    def tearDown(self):\n        \"\"\"Clean up by removing the files created for the test.\"\"\"\n        for filename in ['example.txt', 'empty.txt', 'private.pem', 'invalid_private.pem']:\n            if os.path.exists(filename):\n                os.remove(filename)\n    def test_signed_hash_of_file(self):\n        \"\"\"Ensure a non-empty signature is produced for a file with content.\"\"\"\n        result = task_func('example.txt')\n        self.assertTrue(len(result) > 0)\n    def test_signed_hash_of_empty_file(self):\n        \"\"\"Ensure a non-empty signature is produced for an empty file.\"\"\"\n        result = task_func('empty.txt')\n        self.assertTrue(len(result) > 0)\n    def test_file_not_exist(self):\n        \"\"\"Verify FileNotFoundError is raised for non-existent file paths.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent.txt')\n    def test_invalid_private_key_format(self):\n        \"\"\"Test that an invalid private key format raises ValueError.\"\"\"\n        # Temporarily replace the valid key with an invalid one for this test\n        os.rename('private.pem', 'temp_private.pem')\n        os.rename('invalid_private.pem', 'private.pem')\n        try:\n            with self.assertRaises(ValueError):\n                task_func('example.txt')\n        finally:\n            # Ensure cleanup happens correctly\n            os.rename('private.pem', 'invalid_private.pem')\n            os.rename('temp_private.pem', 'private.pem')\n    def test_different_files_same_key(self):\n        \"\"\"Ensure different files produce different signatures using the same key.\"\"\"\n        # Assuming another_example.txt exists and contains different content\n        if os.path.exists('another_example.txt'):\n            hash1 = task_func('example.txt')\n            hash2 = task_func('another_example.txt')\n            self.assertNotEqual(hash1, hash2)\n    @patch('rsa.sign', side_effect=rsa.pkcs1.VerificationError(\"Mocked verification error\"))\n    def test_rsa_verification_error_handling(self, mock_sign):\n        \"\"\"Test that rsa.pkcs1.VerificationError is correctly handled within the signing process.\"\"\"\n        with self.assertRaises(rsa.pkcs1.VerificationError):\n            task_func('example.txt')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a palindrome sentence using random words from a specified pool. The sentence's length is randomly chosen between a minimum (MIN_WORDS) and maximum (MAX_WORDS) number of words. The function ensures that the sentence reads the same forwards and backwards. Check if the generated sentence length is within the specified range. >>> sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL) >>> MIN_WORDS <= len(sentence.split()) <= MAX_WORDS True\nThe function should output with:\n    str: The generated palindrome sentence.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n```",
        "gt": "import numpy as np\nimport random\ndef task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL):\n    sentence_length = np.random.randint(MIN_WORDS, MAX_WORDS + 1)\n    first_half = [random.choice(WORDS_POOL) for _ in range(sentence_length // 2)]\n\n    # For odd-length sentences, add a middle word\n    if sentence_length % 2 == 1:\n        middle_word = [random.choice(WORDS_POOL)]\n        second_half = first_half[::-1]\n        sentence = first_half + middle_word + second_half\n    else:\n        second_half = first_half[::-1]\n        sentence = first_half + second_half\n\n    return ' '.join(sentence)",
        "test": "import unittest\n# Constants for testing\nMIN_WORDS = 3\nMAX_WORDS = 10\nWORDS_POOL = ['apple', 'banana', 'racecar', 'world', 'level', 'madam', 'radar', 'rotor']\nclass TestCases(unittest.TestCase):\n    def test_is_palindrome(self):\n        \"\"\"Test that the sentence generated is a palindrome.\"\"\"\n        sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL)\n        processed_sentence = \" \".join(sentence.split()[::-1])\n        self.assertEqual(processed_sentence, sentence)\n    def test_sentence_length_within_range(self):\n        \"\"\"Test that the sentence length is within the specified range.\"\"\"\n        sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL)\n        length = len(sentence.split())\n        self.assertTrue(MIN_WORDS <= length <= MAX_WORDS)\n    def test_multiple_sentences(self):\n        \"\"\"Test that multiple generated sentences are palindromes.\"\"\"\n        for _ in range(5):\n            sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL)\n            processed_sentence = \" \".join(sentence.split()[::-1])\n            self.assertEqual(processed_sentence, sentence)\n    def test_word_choice_from_pool(self):\n        \"\"\"Test that all words in the sentence are from the provided word pool.\"\"\"\n        sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL)\n        words = sentence.split()\n        for word in words:\n            self.assertIn(word, WORDS_POOL)\n    def test_symmetry_of_sentence(self):\n        \"\"\"Test that the sentence is symmetric around its center.\"\"\"\n        sentence = task_func(MIN_WORDS, MAX_WORDS, WORDS_POOL)\n        words = sentence.split()\n        mid = len(words) // 2\n        if len(words) % 2 == 0:\n            self.assertEqual(words[:mid], words[:-mid-1:-1])\n        else:\n            self.assertEqual(words[:mid], words[-mid:][::-1])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save the date time object \"dt\" in the pickle file \"save.pkl\" and then read it back for validation.\nThe function should output with:\n    loaded_dt (datetime): The loaded datetime object from 'save.pkl'.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\n# Constants\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n```",
        "gt": "import pickle\nimport os\n# Constants\nFILE_NAME = 'save.pkl'\ndef task_func(dt):\n    with open(FILE_NAME, 'wb') as file:\n        pickle.dump(dt, file)\n    \n    with open(FILE_NAME, 'rb') as file:\n        loaded_dt = pickle.load(file)\n\n    os.remove(FILE_NAME)\n\n    return loaded_dt",
        "test": "import unittest\nfrom datetime import datetime\nimport pytz\nclass TestCases(unittest.TestCase):\n    def test_datetime_saving_and_loading(self):\n        # Test saving and loading the current datetime with UTC timezone\n        dt = datetime.now(pytz.UTC)\n        loaded_dt = task_func(dt)\n        self.assertEqual(dt, loaded_dt, \"The loaded datetime object should match the original\")\n    def test_timezone_awareness(self):\n        # Test saving and loading a timezone-aware datetime object\n        tz = pytz.timezone('Asia/Tokyo')\n        dt = datetime.now(tz)\n        loaded_dt = task_func(dt)\n        self.assertEqual(dt, loaded_dt, \"The loaded datetime object should be timezone aware and match the original\")\n    def test_file_cleanup(self):\n        # Test whether the pickle file is properly cleaned up\n        dt = datetime.now(pytz.UTC)\n        task_func(dt)\n        self.assertFalse(os.path.exists(FILE_NAME), \"The pickle file should be cleaned up after loading\")\n    def test_naive_datetime(self):\n        # Test saving and loading a naive datetime object\n        dt = datetime.now()\n        loaded_dt = task_func(dt)\n        self.assertEqual(dt, loaded_dt, \"The loaded datetime object should match the original naive datetime\")\n        self.assertIsNone(loaded_dt.tzinfo, \"The loaded datetime object should be naive (no timezone)\")\n    def test_different_timezones(self):\n        # Test saving and loading datetime objects with different timezones\n        tz1 = pytz.timezone('US/Eastern')\n        tz2 = pytz.timezone('Europe/London')\n        dt1 = datetime.now(tz1)\n        dt2 = datetime.now(tz2)\n        loaded_dt1 = task_func(dt1)\n        loaded_dt2 = task_func(dt2)\n        self.assertEqual(dt1, loaded_dt1, \"The loaded datetime object should match the original (US/Eastern)\")\n        self.assertEqual(dt2, loaded_dt2, \"The loaded datetime object should match the original (Europe/London)\")\n        self.assertEqual(dt1.tzinfo, loaded_dt1.tzinfo, \"The loaded datetime object should have the same timezone (US/Eastern)\")\n        self.assertEqual(dt2.tzinfo, loaded_dt2.tzinfo, \"The loaded datetime object should have the same timezone (Europe/London)\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Opens an image file, extracts text using OCR, and converts the text encoding, with a fallback to image comment processing.\nThe function should raise the exception for: ValueError: UnicodeDecodeError or LookupError occurs during conversion ValueError: If incorrect encodings are provided for the text or comment conversion.\nThe function should output with:\n    comment (str): The text extracted from the image or the image comment, converted to the target encoding.\n    If OCR extraction and comment processing both fail, returns an empty string.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n```",
        "gt": "from PIL import Image\nimport codecs\nimport pytesseract\nIMAGE_PATH = \"image.png\"\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    with Image.open(filename) as image:\n        try:\n            extracted_text = pytesseract.image_to_string(image)\n            if extracted_text:\n                try:\n                    return extracted_text.encode(from_encoding).decode(to_encoding)\n                except (UnicodeDecodeError, LookupError) as exc:\n                    raise ValueError(\"Incorrect encoding provided.\") from exc\n        except Exception:\n            # If OCR fails, fall back to processing the image comment\n            pass\n\n        comment = image.info.get(\"comment\", \"\")\n        if isinstance(comment, bytes):\n            try:\n                return (\n                    codecs.decode(comment, from_encoding)\n                    .encode(to_encoding)\n                    .decode(to_encoding)\n                )\n            except (UnicodeDecodeError, LookupError) as exc:\n                raise ValueError(\"Incorrect encoding provided.\") from exc\n\n        return comment",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nfrom PIL import Image\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.mock_image = Mock()\n        self.mock_image.info.get.return_value = b\"Mocked Comment in cp1251\"\n    @patch(\"PIL.Image.open\")\n    @patch(\"pytesseract.image_to_string\")\n    def test_successful_ocr_extraction_and_encoding(self, mock_ocr, mock_open):\n        \"\"\"Test with successful OCR text extraction and encoding conversion.\"\"\"\n        mock_open.return_value.__enter__.return_value = self.mock_image\n        mock_ocr.return_value = \"Extracted Text in cp1251\"\n        result = task_func(\"dummy_path\", \"cp1251\", \"utf8\")\n        self.assertEqual(result, \"Extracted Text in cp1251\")\n    @patch(\"PIL.Image.open\")\n    @patch(\"pytesseract.image_to_string\", side_effect=Exception)\n    def test_ocr_fails_comment_extraction_succeeds(self, mock_ocr, mock_open):\n        \"\"\"Test OCR fails, but comment extraction and encoding conversion succeed.\"\"\"\n        mock_open.return_value.__enter__.return_value = self.mock_image\n        # Mocked comment in cp1251 encoding\n        self.mock_image.info.get.return_value = \"Mocked Comment in cp1251\".encode(\n            \"cp1251\"\n        )\n        result = task_func(\"dummy_path\", \"cp1251\", \"utf8\")\n        # Expected result after converting the mocked comment from cp1251 to utf8\n        expected_result = \"Mocked Comment in cp1251\".encode(\"cp1251\").decode(\"utf8\")\n        self.assertEqual(result, expected_result)\n    @patch(\"PIL.Image.open\")\n    @patch(\"pytesseract.image_to_string\")\n    def test_ocr_succeeds_encoding_fails(self, mock_ocr, mock_open):\n        \"\"\"Test OCR text extraction succeeds, but encoding conversion fails.\"\"\"\n        mock_open.return_value.__enter__.return_value = self.mock_image\n        mock_ocr.return_value = \"Extracted Text in wrong encoding\"\n        with self.assertRaises(ValueError):\n            task_func(\"dummy_path\", \"invalid_encoding\", \"utf8\")\n    @patch(\"PIL.Image.open\")\n    @patch(\"pytesseract.image_to_string\", side_effect=Exception)\n    def test_ocr_and_comment_extraction_fail(self, mock_ocr, mock_open):\n        \"\"\"Test both OCR and comment extraction fail.\"\"\"\n        mock_open.return_value.__enter__.return_value = self.mock_image\n        self.mock_image.info.get.return_value = \"\"  # No comment in metadata\n        result = task_func(\"dummy_path\")\n        self.assertEqual(result, \"\")\n    @patch(\"PIL.Image.open\")\n    @patch(\"pytesseract.image_to_string\")\n    def test_ocr_extraction_succeeds_no_encoding_needed(self, mock_ocr, mock_open):\n        \"\"\"Test OCR extraction succeeds, no encoding conversion needed.\"\"\"\n        mock_open.return_value.__enter__.return_value = self.mock_image\n        mock_ocr.return_value = \"Extracted Text already in utf8\"\n        result = task_func(\"dummy_path\", \"utf8\", \"utf8\")\n        self.assertEqual(result, \"Extracted Text already in utf8\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Turn the provided data into a DataFrame and then calculate the correlation matrix of numeric columns.\nThe function should output with:\n    correlation_matrix (pd.DataFrame): The correlation matrix.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(data, cols):\n    df = pd.DataFrame(data, columns=cols)\n    \n    df_np = np.array(df)\n    df = pd.DataFrame(df_np, columns=cols)\n    \n    correlation_matrix = df.corr()\n    return correlation_matrix",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame([[5.1, 3.5, 1.4], [4.9, 3.0, 1.4], [4.7, 3.2, 1.3]], columns = ['x', 'y', 'z'])\n        correlation_matrix = task_func([[5.1, 3.5, 1.4], [4.9, 3.0, 1.4], [4.7, 3.2, 1.3]], ['x', 'y', 'z'])\n        self.assertTrue(np.allclose(correlation_matrix, df.corr()))\n    def test_case_2(self):\n        df = pd.DataFrame([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], columns = ['x', 'y', 'z'])\n        correlation_matrix = task_func([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], ['x', 'y', 'z'])\n        self.assertTrue(np.allclose(correlation_matrix, df.corr()))\n    def test_case_3(self):\n        df = pd.DataFrame([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], columns = ['x', 'y', 'z'])\n        correlation_matrix = task_func([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], ['x', 'y', 'z'])\n        self.assertTrue(np.allclose(correlation_matrix, df.corr()))\n    \n    def test_case_4(self):\n        df = pd.DataFrame([[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]], columns = ['x', 'y', 'z'])\n        correlation_matrix = task_func([[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]], ['x', 'y', 'z'])\n        self.assertTrue(np.allclose(correlation_matrix, df.corr()))\n    def test_case_5(self):\n        df = pd.DataFrame([[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0], [-7.0, -8.0, -9.0]], columns = ['x', 'y', 'z'])\n        correlation_matrix = task_func([[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0], [-7.0, -8.0, -9.0]], ['x', 'y', 'z'])\n        self.assertTrue(np.allclose(correlation_matrix, df.corr()))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the Part-of-Speech (POS) tags in a sentence without the last word.\nThe function should output with:\n    dict: A dictionary with POS tags as keys and their count as values.\nYou should write self-contained code starting with:\n```\nimport nltk\n# Download necessary NLTK data (if not already present)\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom collections import Counter\ndef task_func(content):\n```",
        "gt": "import nltk\n# Download necessary NLTK data (if not already present)\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nfrom collections import Counter\ndef task_func(content):\n    words = content.split()[:-1]  # Split and remove the last word\n    pos_tags = nltk.pos_tag(words)  # Tokenization is built into pos_tag for simple whitespace tokenization\n    pos_counts = Counter(tag for _, tag in pos_tags)\n    return dict(pos_counts)",
        "test": "import unittest\nimport re\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        sentence = \"this is an example content\"\n        # Expected output after removing \"content\"\n        expected_output = {'DT': 2, 'NN': 1, 'VBZ': 1}\n        self.assertEqual(task_func(sentence), expected_output)\n    def test_case_2(self):\n        sentence = \"The quick brown fox jumps\"\n        # \"jumps\" is removed; expect {'DT': 1, 'JJ': 1, 'NN': 1} for \"The quick brown fox\"\n        expected_output = {'DT': 1, 'JJ': 1, 'NN': 2}\n        self.assertEqual(task_func(sentence), expected_output)\n    def test_case_3(self):\n        sentence = \"Over the lazy dog\"\n        # \"dog\" is removed; expect {'IN': 1, 'DT': 1, 'JJ': 1} for \"Over the lazy\"\n        expected_output = {'DT': 1, 'IN': 1, 'NN': 1}\n        self.assertEqual(task_func(sentence), expected_output)\n    def test_case_4(self):\n        sentence = \"Hello world\"\n        # \"world\" is removed; expect {} for \"Hello\"\n        expected_output = {'NN': 1}  # \"Hello\" might be tagged as interjection 'UH' if not considered a proper noun\n        self.assertEqual(task_func(sentence), expected_output)\n    def test_case_5(self):\n        sentence = \"This is a longer sentence with various parts of speech\"\n        # After removing \"speech\", adjust expectation\n        expected_output = {'DT': 2, 'IN': 2, 'JJ': 1, 'NN': 1, 'NNS': 1, 'RBR': 1, 'VBZ': 1}\n        self.assertEqual(task_func(sentence), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform K-means clustering on a dataset and generate a scatter plot visualizing the clusters and their centroids.\nThe function should raise the exception for: ValueError: If 'data' is not a pd.DataFrame. ValueError: If 'n_clusters' is not an integer greater than 1.\nThe function should output with:\n    tuple:\n    np.ndarray: An array of cluster labels assigned to each sample.\n    plt.Axes: An Axes object with the scatter plot showing the clusters and centroids.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\ndef task_func(data, n_clusters=3):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    labels = kmeans.fit_predict(data)\n    centroids = kmeans.cluster_centers_\n\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis', alpha=0.6, label='Data points')\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='red', label='Centroids')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    ax.set_title('K-Means Clustering')\n    ax.legend()\n\n    return labels, ax",
        "test": "import unittest\nfrom matplotlib.collections import PathCollection  # Correct import\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n        self.data = pd.DataFrame(np.random.rand(100, 2), columns=['Feature1', 'Feature2'])\n    def test_cluster_centers(self):\n        _, ax = task_func(self.data, 3)\n        centroids = [child for child in ax.get_children() if isinstance(child, PathCollection) and child.get_label() == 'Centroids']\n        self.assertTrue(len(centroids) > 0, \"Centroids should be marked in the plot.\")\n        self.assertEqual(len(centroids[0].get_offsets()), 3, \"There should be 3 centroids marked in the plot.\")\n    def test_single_cluster_error(self):\n        with self.assertRaises(ValueError):\n            _, _ = task_func(self.data, 1)\n    def test_valid_input(self):\n        labels, ax = task_func(self.data, 3)\n        self.assertEqual(len(labels), 100)  # Ensure labels array matches data length\n    def test_invalid_data_type(self):\n        with self.assertRaises(ValueError):\n            _, _ = task_func([[1, 2], [3, 4]], 3)\n    def test_invalid_cluster_number(self):\n        with self.assertRaises(ValueError):\n            _, _ = task_func(self.data, -1)\n    def test_return_type(self):\n        _, ax = task_func(self.data, 3)\n        self.assertIsInstance(ax, plt.Axes)  # Ensuring the plot is returned\n    def test_return_labels(self):\n        labels, _ = task_func(self.data, 3)\n        unique_labels = np.unique(labels)\n        self.assertEqual(len(unique_labels), 3)  # Checking if 3 unique labels are returned",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a random string of a specified length that conforms to a given regular expression pattern. The function repeatedly generates random strings, using both uppercase and lowercase ASCII letters, of the specified length until one matches the pattern. >>> bool(re.match('^[A-Z]+$', task_func(3, '^[A-Z]+$'))) True\nThe function should output with:\n    str: A randomly generated string that matches the specified pattern.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n```",
        "gt": "import re\nimport string\nfrom random import choice\ndef task_func(n, pattern):\n    while True:\n        s = ''.join(choice(string.ascii_letters) for _ in range(n))\n        if re.match(pattern, s):\n            return s",
        "test": "import unittest\nimport re\nclass TestCases(unittest.TestCase):\n    def test_correct_length(self):\n        # Ensure the generated string has the requested length\n        self.assertEqual(len(task_func(5, '^[a-z]*$')), 5)\n    def test_pattern_matching(self):\n        # Check if the generated string matches a simple pattern\n        self.assertTrue(re.match('^[a-z]+$', task_func(5, '^[a-z]+$')))\n    def test_lowercase_letters(self):\n        # Verify the function generates a string of only lowercase letters\n        self.assertTrue(re.match('^[a-z]{10}$', task_func(10, '^[a-z]{10}$')))\n    def test_uppercase_letters(self):\n        # Verify the function generates a string of only uppercase letters\n        self.assertTrue(re.match('^[A-Z]{10}$', task_func(10, '^[A-Z]{10}$')))\n    def test_mixed_case_letters(self):\n        # Ensure the function can handle mixed case patterns\n        pattern = '^[A-Za-z]{10}$'\n        result = task_func(10, pattern)\n        self.assertTrue(re.match(pattern, result) and any(c.islower() for c in result) and any(c.isupper() for c in result))\n    def test_zero_length_string(self):\n        # Test for generating a zero-length string, expecting an empty string as a result\n        self.assertEqual(task_func(0, '^$'), '')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a matrix of random values with specified dimensions and scale it between 0 and 1. >>> task_func(2, 2) array([[0., 1.], [1., 0.]])\nThe function should output with:\n    ndarray: A numpy ndarray with scaled values between 0 and 1.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n```",
        "gt": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(rows=3, columns=2, seed=42):\n    np.random.seed(seed) # Ensure reproducibility for consistent outputs across different runs\n    matrix = np.random.rand(rows, columns)\n    scaler = MinMaxScaler()\n    scaled_matrix = scaler.fit_transform(matrix)\n\n    return scaled_matrix",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        result = task_func()\n        self.assertEqual(result.shape, (3, 2))\n        self.assertTrue(np.all(result >= 0))\n    \n    def test_case_2(self):\n        result = task_func(2, 2)\n        self.assertEqual(result.shape, (2, 2))\n        self.assertTrue(np.all(result >= 0) and np.all(result <= 1))\n        \n    def test_case_3(self):\n        result = task_func(4, 3)\n        self.assertEqual(result.shape, (4, 3))\n        self.assertTrue(np.all(result >= 0) and np.all(result <= 1))\n    \n    def test_case_4(self):\n        result = task_func(5, 1)\n        self.assertEqual(result.shape, (5, 1))\n        self.assertTrue(np.all(result >= 0))\n        \n    def test_case_5(self):\n        result = task_func(1, 5)\n        self.assertEqual(result.shape, (1, 5))\n        self.assertTrue(np.all(result >= 0) and np.all(result <= 1))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Make a delay for a given amount of time for a specified number of samples, measure the actual delay and calculate the statistical properties of the delay times.\nThe function should output with:\n    tuple: The mean and standard deviation of the delay times.\nYou should write self-contained code starting with:\n```\nimport time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n```",
        "gt": "import time\nimport numpy as np\ndef task_func(samples=10, delay=0.1):\n    delay_times = []\n\n    for _ in range(samples):\n        t1 = time.time()\n        time.sleep(delay)\n        t2 = time.time()\n        delay_times.append(t2 - t1)\n\n    delay_times = np.array(delay_times)\n\n    mean = np.mean(delay_times)\n    std = np.std(delay_times)\n\n    return mean, std",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        start = time.time()\n        mean, std = task_func(samples=100, delay=0.001)\n        end = time.time()\n        self.assertAlmostEqual(100 * 0.001, end-start, delta=3)\n        self.assertAlmostEqual(mean, 0.001, places=0)\n        self.assertTrue(0 <= std <= 0.01)\n        \n    def test_case_2(self):\n        start = time.time()\n        mean, std = task_func(samples=3, delay=0.1)\n        end = time.time()\n        self.assertAlmostEqual(3 * 0.1, end-start, places=1)\n        self.assertAlmostEqual(mean, 0.1, delta=0.2)\n        self.assertTrue(0 <= std <= 0.01)\n    def test_case_3(self):\n        start = time.time()\n        mean, std = task_func(samples=2, delay=0.2)\n        end = time.time()\n        self.assertAlmostEqual(2 * 0.2, end-start, places=1)\n        self.assertTrue(0.19 <= mean <= 0.21)\n        self.assertTrue(0 <= std <= 0.02)\n    def test_case_4(self):\n        start = time.time()\n        mean, std = task_func(samples=100, delay=0.05)\n        end = time.time()\n        self.assertTrue(3 <= end-start <= 7)\n        self.assertTrue(0.03 <= mean <= 0.07)\n        self.assertTrue(0 <= std <= 0.05)\n    def test_case_5(self):\n        start = time.time()\n        mean, std = task_func(samples=1, delay=1)\n        end = time.time()\n        self.assertAlmostEqual(1, end-start, places=0)\n        self.assertTrue(0.9 <= mean <= 1.1)\n        self.assertTrue(0 <= std <= 0.1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace all elements in DataFrame columns that do not exist in the target_values array with zeros, and then output the distribution of each column after replacing. - label each plot as the name of the column it corresponds to.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted data.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n```",
        "gt": "import seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_values=[1, 3, 4]):\n    df = df.applymap(lambda x: x if x in target_values else 0)\n    plt.figure(figsize=(10, 5))\n    for column in df.columns:\n        sns.kdeplot(df[column], label=column, warn_singular=False)\n    plt.legend()\n    return df, plt.gca()",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame({\"A\": [1, 4, 7, 6, 7, 3, 4, 4]})\n        df1, ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        df = pd.DataFrame({\"A\": [1, 2, 3, 4, 5], \"B\": [7, 4, 3, 3, 1]})\n        df1, ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines), 2)\n    def test_case_3(self):\n        df = pd.DataFrame({\"A\": [5, 6, 2, 9, 7, 3, 2, 2, 8, 1]})\n        target_values = [1, 2, 3, 4, 5]\n        df1, ax = task_func(df, target_values=target_values)\n        mask = df1.isin(target_values) | (df1 == 0)\n        self.assertTrue(mask.all().all())\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_4(self):\n        df = pd.DataFrame({\"A\": [10, 20, 30, 40, 50], \"B\": [50, 40, 10, 10, 30]})\n        target_values = [10, 20, 30]\n        df1, ax = task_func(df, target_values=target_values)\n        mask = df1.isin(target_values) | (df1 == 0)\n        self.assertTrue(mask.all().all())\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines), 2)\n    def test_case_5(self):\n        df = pd.DataFrame({\"A\": [5, 6, 2, 9, 7, 3, 2, 2, 8, 1]})\n        df1, ax = task_func(df, target_values=[])\n        self.assertTrue(df1.eq(0).all().all())\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_7(self):\n        df = pd.DataFrame({\"A\": [5, 6, 2, 9, 7, 3, 2, 2, 8, 1]})\n        df1, ax = task_func(df, target_values=[5, 6, 2, 9, 7, 3, 8, 1])\n        self.assertTrue(df1.equals(df))\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a bar chart of the counts of each unique value in the 'value' column of a pandas DataFrame and return the Axes object. Empty DataFrame will return an empty bar chart.\nNote that: This function use \"Value Distribution\" for the plot title. This function use \"Value\" and \"Count\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    Axes: The matplotlib Axes object of the bar chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    value_counts = df['value'].value_counts()\n    ax = plt.bar(value_counts.index, value_counts.values)\n    plt.xlabel('Value')\n    plt.ylabel('Count')\n    plt.title('Value Distribution')\n    return plt.gca()",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_normal_dataframe(self):\n        df = pd.DataFrame({\n            'id': [1, 1, 2, 2, 3, 3],\n            'value': ['A', 'B', 'A', 'B', 'A', 'B']\n        })\n        ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes, \"Should return an Axes object\")\n        self.assertEqual(len(ax.patches), 2, \"Should have 2 bars for values 'A' and 'B'\")\n        self.assertEqual(ax.get_title(), \"Value Distribution\", \"Incorrect title\")\n        plt.close()\n    def test_empty_dataframe(self):\n        df = pd.DataFrame(columns=['id', 'value'])\n        ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes, \"Should handle empty DataFrame\")\n        self.assertEqual(len(ax.patches), 0, \"Should have no bars for an empty DataFrame\")\n        plt.close()\n    def test_numeric_values(self):\n        df = pd.DataFrame({\n            'id': [1, 2, 3],\n            'value': [100, 200, 300]\n        })\n        ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes, \"Should handle numeric values in 'value' column\")\n        plt.close()\n    \n    def test_plot_attributes(self):\n        df = pd.DataFrame({\n            'id': [1, 2, 3],\n            'value': [100, 200, 300]\n        })\n        ax = task_func(df)\n        self.assertEqual(ax.get_title(), 'Value Distribution')\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Count')\n        plt.close()\n    \n    def test_plot_point(self):\n        df = pd.DataFrame({\n            'id': [1, 1, 2, 2],\n            'value': ['A', 'B', 'A', 'B']\n        })\n        ax = task_func(df)\n        # Get the actual value counts from the DataFrame\n        actual_value_counts = df['value'].value_counts()\n        # Get the patches from the bar plot\n        patches = ax.patches\n        # Ensure that each patch (bar) has the correct height (count)\n        for i, patch in enumerate(patches):\n            # The height of each bar should match the count of its corresponding value\n            expected_height = actual_value_counts.iloc[i]\n            self.assertAlmostEqual(patch.get_height(), expected_height, delta=0.1, msg=f\"Bar {i+1} does not have the correct height\")\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Zip files with certain extensions from a source directory and save it as a zip file saved to a target directory.\nNote that: The valid extensions are: ['.txt', '.docx', '.xlsx', '.csv'].\nThe function should raise the exception for: OSError: If the source_directory does not exist.\nThe function should output with:\n    str: The full path to the created zip file in the format \"/path/to/target_directory/zip_name.zip\".\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n```",
        "gt": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\ndef task_func(source_directory, target_directory, zip_name):\n    if not os.path.exists(source_directory):\n        raise OSError(\"source_directory must exist.\")\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory, exist_ok=True)\n\n    zip_path = os.path.join(target_directory, f\"{zip_name.strip()}.zip\")\n    with zipfile.ZipFile(zip_path, \"w\") as zipf:\n        for extension in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n            for file in glob.glob(\n                f\"{source_directory}/**/*{extension}\", recursive=True\n            ):\n                zipf.write(file, arcname=Path(file).name)\n\n    return os.path.abspath(zip_path)",
        "test": "import unittest\nimport tempfile\nimport os\nfrom pathlib import Path\nimport zipfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_source_dir = tempfile.TemporaryDirectory()\n        self.temp_target_dir = tempfile.TemporaryDirectory()\n        self.test_source_dir = self.temp_source_dir.name\n        self.test_target_dir = self.temp_target_dir.name\n        # Setup directory and files structure for testing\n        self.files_structure = {\n            \"empty_dir\": [],\n            \"no_matching_files\": [\"a.pdf\", \"b.gif\"],\n            \"some_matching_files\": [\"c.txt\", \"d.docx\", \"e.png\"],\n            \"all_matching_files\": [\"f.txt\", \"g.docx\", \"h.xlsx\", \"i.csv\"],\n            \"nested_dir\": [\"nested/j.txt\", \"nested/k.docx\", \"nested/l.png\"],\n            \"deeply_nested_dir\": [\"deep/nested/m.xlsx\", \"deep/nested/n.csv\"],\n            \"mixed_extensions\": [\"o.txt\", \"p.docx\", \"q.unknown\", \"r.csv\"],\n            \"subdirs_with_files\": [\n                \"subdir1/s.txt\",\n                \"subdir2/t.xlsx\",\n                \"subdir3/u.docx\",\n                \"subdir2/v.csv\",\n            ],\n        }\n        for dir_key, files in self.files_structure.items():\n            if files:\n                for file_path in files:\n                    full_path = os.path.join(self.test_source_dir, dir_key, file_path)\n                    os.makedirs(os.path.dirname(full_path), exist_ok=True)\n                    with open(full_path, \"w\") as f:\n                        f.write(\"dummy content\")\n            else:\n                os.makedirs(os.path.join(self.test_source_dir, dir_key), exist_ok=True)\n    def tearDown(self):\n        self.temp_source_dir.cleanup()\n        self.temp_target_dir.cleanup()\n    def zip_file_count(self, zip_path):\n        extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n        with zipfile.ZipFile(zip_path, \"r\") as zip_ref:\n            return sum(\n                1 for item in zip_ref.namelist() if Path(item).suffix in extensions\n            )\n    def test_case_1(self):\n        # Test empty directory\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"empty_dir\"),\n            self.test_target_dir,\n            \"empty_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 0)\n    def test_case_2(self):\n        # Test no matching files\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"no_matching_files\"),\n            self.test_target_dir,\n            \"no_match_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 0)\n    def test_case_3(self):\n        # Test some matching files\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"some_matching_files\"),\n            self.test_target_dir,\n            \"some_match_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 2)\n    def test_case_4(self):\n        # Test all matching files\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"all_matching_files\"),\n            self.test_target_dir,\n            \"all_match_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 4)\n    def test_case_5(self):\n        # Test nested directory\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"nested_dir\"),\n            self.test_target_dir,\n            \"nested_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 2)\n    def test_case_6(self):\n        # Test mixed extension\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"mixed_extensions\"),\n            self.test_target_dir,\n            \"mixed_extensions_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 3)\n    def test_case_7(self):\n        # Test subdirectories with files\n        zip_path = task_func(\n            os.path.join(self.test_source_dir, \"subdirs_with_files\"),\n            self.test_target_dir,\n            \"subdirs_with_files_test\",\n        )\n        self.assertEqual(self.zip_file_count(zip_path), 4)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\nThe function should output with:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\nYou should write self-contained code starting with:\n```\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nN_COMPONENTS = 2\ndef task_func(L):\n```",
        "gt": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nN_COMPONENTS = 2\ndef task_func(L):\n    data = np.array(L)\n\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n\n    return pca_result, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        test_input = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        pca_result, plot = task_func(test_input)\n        self.assertIsInstance(pca_result, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n        self.assertEqual(pca_result.shape, (3, 2))\n    def test_case_2(self):\n        test_input = [[1, 1], [1, 1], [1, 1]]\n        pca_result, plot = task_func(test_input)\n        self.assertIsInstance(pca_result, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n        self.assertEqual(pca_result.shape, (3, 2))\n    def test_case_3(self):\n        test_input = [[1, 2], [3, 4], [5, 6], [7, 8]]\n        pca_result, plot = task_func(test_input)\n        self.assertIsInstance(pca_result, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n        self.assertEqual(pca_result.shape, (4, 2))\n    def test_case_4(self):\n        test_input = [[-1, -2], [-3, -4], [-5, -6]]\n        pca_result, plot = task_func(test_input)\n        self.assertIsInstance(pca_result, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n        self.assertEqual(pca_result.shape, (3, 2))\n    def test_case_5(self):\n        test_input = [[-1, 2], [3, -4], [5, -6]]\n        pca_result, plot = task_func(test_input)\n        self.assertIsInstance(pca_result, np.ndarray)\n        self.assertIsInstance(plot, plt.Axes)\n        self.assertEqual(pca_result.shape, (3, 2))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts an XML string into a dictionary representation and optionally saves it as a JSON file. This function is useful for easily accessing data stored in XML format and saving it for future use. Convert an XML string with nested elements. >>> result = task_func('<school><class><student>Emma</student></class></school>') >>> result['school']['class']['student'] 'Emma' Save the parsed XML as a JSON file. >>> task_func('<data><item>1</item><item>2</item></data>', save_json=True, json_file_path='data.json') # A JSON file 'data.json' will be created with the parsed XML data.\nThe function should raise the exception for: ValueError: If the input XML string is empty or contains only whitespace.\nThe function should output with:\n    dict: A dictionary representation of the XML string.\nYou should write self-contained code starting with:\n```\nimport xmltodict\nimport json\ndef task_func(s, save_json, json_file_path):\n```",
        "gt": "import xmltodict\nimport json\ndef task_func(s, save_json, json_file_path):\n    if not s.strip():  # Check for empty or whitespace-only string\n        raise ValueError(\"The input XML string is empty or contains only whitespace.\")\n    \n    my_dict = xmltodict.parse(s)\n\n    if save_json and json_file_path:\n        with open(json_file_path, 'w') as json_file:\n            json.dump(my_dict, json_file, indent=4)\n\n    return my_dict",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.json_file_path = 'test_output.json'\n    \n    def tearDown(self):\n        if os.path.exists(self.json_file_path):\n            os.remove(self.json_file_path)\n    def test_simple_xml_to_dict(self):\n        xml_str = '<person><name>John</name><age>30</age></person>'\n        result = task_func(xml_str, False, '')\n        self.assertEqual(result['person']['name'], 'John')\n        self.assertEqual(result['person']['age'], '30')\n    def test_nested_xml_to_dict(self):\n        xml_str = '<school><class><student>Emma</student></class></school>'\n        result = task_func(xml_str, False, '',)\n        self.assertEqual(result['school']['class']['student'], 'Emma')\n    def test_empty_xml_to_dict(self):\n        xml_str = '<empty></empty>'\n        result = task_func(xml_str, False, '')\n        self.assertTrue('empty' in result and result['empty'] is None or result['empty'] == '')\n    def test_attribute_xml_to_dict(self):\n        xml_str = '<book id=\"123\">Python Guide</book>'\n        result = task_func(xml_str, False, '')\n        self.assertEqual(result['book']['@id'], '123')\n        self.assertEqual(result['book']['#text'], 'Python Guide')\n    def test_complex_xml_to_dict(self):\n        xml_str = '<family><person name=\"John\"><age>30</age></person><person name=\"Jane\"><age>28</age></person></family>'\n        result = task_func(xml_str, False, '')\n        self.assertEqual(result['family']['person'][0]['@name'], 'John')\n        self.assertEqual(result['family']['person'][0]['age'], '30')\n        self.assertEqual(result['family']['person'][1]['@name'], 'Jane')\n        self.assertEqual(result['family']['person'][1]['age'], '28')\n    def test_save_xml_to_json(self):\n        xml_str = '<data><item>1</item></data>'\n        task_func(xml_str, True, self.json_file_path,)\n        self.assertTrue(os.path.exists(self.json_file_path))\n        with open(self.json_file_path, 'r') as file:\n            data = file.read()\n            self.assertIn('1', data)\n    def test_empty_string_input(self):\n        xml_str = ''\n        with self.assertRaises(ValueError):\n            task_func(xml_str, False, '')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find all matches with a regex pattern in a list of strings in an SQL database. The function loads an sql database and selects all entries from the specified table. Matches are returned in a DataFrame.\nThe function should raise the exception for: ValueError: If db_file does not exist.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the matches.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n```",
        "gt": "import sqlite3\nimport pandas as pd\nimport os\ndef task_func(db_file, table_name, column_name, pattern='\\d+[xX]'):\n\n    if not os.path.isfile(db_file):\n        raise ValueError('db_file does not exist.')\n\n    conn = sqlite3.connect(db_file)\n    df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n\n    if df[column_name].dtype == 'object':  # Check if the column data type is a string\n        matches = df[df[column_name].str.contains(pattern)]\n    else:\n        matches = pd.DataFrame(columns=df.columns)  # Return an empty DataFrame\n\n    return matches",
        "test": "import unittest\nimport sqlite3\nimport pandas as pd\nimport os\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to hold the database\n        self.test_dir = tempfile.mkdtemp()\n        self.db_path = os.path.join(self.test_dir, \"test.db\")\n        # Set up a new database and populate it with initial data\n        self.conn = sqlite3.connect(self.db_path)\n        self.conn.execute(\"CREATE TABLE test_table (id INTEGER PRIMARY KEY, test_column TEXT)\")\n        data = [\n            (1, \"4x4 car\"),\n            (2, \"New 3x3 puzzle\"),\n            (3, \"Product with 5X feature\"),\n            (4, \"1xsafe\"),\n            (5, \"3xmother\")\n        ]\n        self.conn.executemany(\"INSERT INTO test_table (id, test_column) VALUES (?, ?)\", data)\n        self.conn.commit()\n    def tearDown(self):\n        # Close the connection and remove the temporary directory\n        self.conn.close()\n        os.remove(self.db_path)\n        os.rmdir(self.test_dir)\n    def test_regular_expression_match(self):\n        # Test case with known data and expected matches\n        result = task_func(self.db_path, 'test_table', 'test_column')\n        expected = pd.DataFrame({\n            'id': [1, 2, 3, 4, 5],\n            'test_column': ['4x4 car', 'New 3x3 puzzle', 'Product with 5X feature', '1xsafe', '3xmother']\n        }, index=[0, 1, 2, 3, 4])\n        pd.testing.assert_frame_equal(result, expected)\n    def test_no_matches(self):\n        # Test case where no entries match the pattern\n        result = task_func(self.db_path, 'test_table', 'test_column', pattern='abc')\n        self.assertTrue(result.empty)\n    def test_non_existent_table(self):\n        # Catch the OperationalError from sqlite directly\n        with self.assertRaises(Exception):\n            task_func(self.db_path, 'fake_table', 'test_column')\n    def test_non_existent_column(self):\n        # Catch the correct exception for non-existent column\n        with self.assertRaises(KeyError):\n            task_func(self.db_path, 'test_table', 'fake_column')\n    def test_different_pattern(self):\n        # Test case with a different pattern\n        self.conn.execute(\"INSERT INTO test_table (id, test_column) VALUES (?, ?)\", (6, \"something 1ab2x\"))\n        self.conn.commit()\n        result = task_func(self.db_path, 'test_table', 'test_column', pattern='1ab2x')\n        result.reset_index(drop=True, inplace=True)  # Resetting index before comparison\n        expected = pd.DataFrame({\n            'id': [6],\n            'test_column': ['something 1ab2x']\n        }, index=[0])\n        pd.testing.assert_frame_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the occurrence of each integer in the values of the input dictionary, where each value is a list of integers, and return a dictionary with these counts. The resulting dictionary's keys are the integers, and the values are their respective counts across all lists in the input dictionary.\nThe function should output with:\n    dict: A dictionary where each key is an integer from any of the input lists, and the value is the count of\n    how often that integer appears in all the lists combined.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\ndef task_func(d):\n```",
        "gt": "from collections import Counter\nimport itertools\ndef task_func(d):\n    count_dict = Counter(itertools.chain.from_iterable(d.values()))\n    return dict(count_dict)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        \"\"\"Checks the basic functionality with single-element lists.\"\"\"\n        input_dict = {'a': [1], 'b': [2], 'c': [3]}\n        expected_output = {1: 1, 2: 1, 3: 1}\n        self.assertEqual(task_func(input_dict), expected_output)\n    def test_case_2(self):\n        \"\"\"Verifies the function with lists that have distinct integers.\"\"\"\n        input_dict = {'a': [1, 2], 'b': [3, 4], 'c': [5, 6]}\n        expected_output = {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\n        self.assertEqual(task_func(input_dict), expected_output)\n        \n    def test_case_3(self):\n        \"\"\" Tests the function with lists containing duplicate integers to ensure counts are aggregated correctly.\"\"\"\n        input_dict = {'a': [1, 1, 2], 'b': [3, 4, 4], 'c': [5, 5, 5]}\n        expected_output = {1: 2, 2: 1, 3: 1, 4: 2, 5: 3}\n        self.assertEqual(task_func(input_dict), expected_output)\n        \n    def test_case_4(self):\n        \"\"\" Validates how the function handles an empty dictionary.\"\"\"\n        input_dict = {}\n        expected_output = {}\n        self.assertEqual(task_func(input_dict), expected_output)\n        \n    def test_case_5(self):\n        \"\"\"Ensures the function handles dictionaries where lists are empty correctly.\"\"\"\n        input_dict = {'a': [], 'b': [], 'c': []}\n        expected_output = {}\n        self.assertEqual(task_func(input_dict), expected_output)\n    def test_case_6(self):\n        \"\"\"Test input with mixed integer and non-integer types to see if function filters or fails gracefully\"\"\"\n        input_dict = {'a': [1, 2, 'three'], 'b': [4, None], 'c': [5, [6]]}\n        with self.assertRaises(TypeError):\n            task_func(input_dict)\n    def test_case_7(self):\n        \"\"\"Test with large lists to evaluate performance\"\"\"\n        input_dict = {'a': list(range(1000)), 'b': list(range(1000))}\n        expected_output = {i: 2 for i in range(1000)}\n        result = task_func(input_dict)\n        self.assertEqual(result, expected_output)\n    def test_case_8(self):\n        \"\"\"Test with non-string keys to see how function handles it\"\"\"\n        input_dict = {1: [1, 2, 3], 2.5: [4, 5, 6]}\n        expected_output = {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\n        self.assertEqual(task_func(input_dict), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Display a plot showing a normal distribution with a given mean and standard deviation and overlay a histogram of randomly generated samples from this distribution. The plot title should be 'Normal Distribution'.\nThe function should output with:\n    fig (matplotlib.figure.Figure): The generated figure. Useful for testing purposes.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu, sigma, num_samples):\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, p, 'k', linewidth=2)\n\n    ax.set_title('Normal Distribution')\n    plt.show()\n    return fig",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        np.random.seed(42)\n        mu = 0\n        sigma = 1\n        num_samples = 1000\n        fig = task_func(mu, sigma, num_samples)\n        ax = fig.gca()\n        self.assertEqual(ax.get_title(), \"Normal Distribution\")\n        self.assertTrue(len(ax.patches) > 0)\n        self.assertTrue(len(ax.lines) > 0)\n    def test_case_2(self):\n        np.random.seed(42)\n        mu = 5\n        sigma = 2\n        num_samples = 1000\n        fig = task_func(mu, sigma, num_samples)\n        ax = fig.gca()\n        self.assertEqual(ax.get_title(), \"Normal Distribution\")\n        self.assertTrue(len(ax.patches) > 0)\n        self.assertTrue(len(ax.lines) > 0)\n    def test_case_3(self):\n        np.random.seed(42)\n        mu = 0\n        sigma = 1\n        num_samples = 10\n        fig = task_func(mu, sigma, num_samples)\n        ax = fig.gca()\n        self.assertEqual(ax.get_title(), \"Normal Distribution\")\n        self.assertTrue(len(ax.patches) > 0)\n        self.assertTrue(len(ax.lines) > 0)\n    def test_case_4(self):\n        np.random.seed(42)\n        mu = 0\n        sigma = 1\n        num_samples = 10\n        fig = task_func(mu, sigma, num_samples)\n        ax = fig.gca()\n        self.assertEqual(ax.get_title(), \"Normal Distribution\")\n        self.assertTrue(len(ax.patches) > 0)\n        self.assertTrue(len(ax.lines) > 0)\n    def test_case_5(self):\n        np.random.seed(42)\n        mu = 0\n        sigma = 1\n        num_samples = 10\n        fig = task_func(mu, sigma, num_samples)\n        ax = fig.gca()\n        self.assertEqual(ax.get_title(), \"Normal Distribution\")\n        self.assertTrue(len(ax.patches) > 0)\n        self.assertTrue(len(ax.lines) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a dataframe of random strings and create a heatmap showing the correlation in the frequency of each letter in these strings. This function generates a specified number of random strings, each of a given length, and calculates the frequency of each letter in these strings. A heatmap of the correlation matrix is then displayed, showing the co-occurrence frequencies of different letters within these strings. If the number of rows specified is zero, the function will print a message indicating that no data is available to generate the heatmap and will return None. Otherwise, it processes the DataFrame to convert the generated strings into a one-hot encoded format and then sums up these encodings to calculate the frequency of each letter. Note - If no strings are generated (e.g., rows = 0), the DataFrame will be empty. In this case, the function prints a message \"No data to generate heatmap.\" and returns None. - If the DataFrame is not empty, each string is split into its constituent letters, converted into one-hot encoded format, and then the frequency of each letter is calculated by summing these encodings.\nThe function should output with:\n    matplotlib.axes._axes.Axes or None: A seaborn heatmap plot object if\n    data is generated; otherwise, None.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\n# Constants\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport random\nimport string\nimport pandas as pd\nimport seaborn as sns\n# Constants\nLETTERS = list(string.ascii_lowercase)\ndef task_func(rows=1000, string_length=3):\n\n    # Generate random strings\n    data = [\"\".join(random.choices(LETTERS, k=string_length)) for _ in range(rows)]\n\n    # Create a DataFrame and compute letter frequency\n    df = pd.DataFrame({\"String\": data})\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        print(\"No data to generate heatmap.\")\n        return None\n\n    df = pd.get_dummies(df[\"String\"].apply(list).explode()).groupby(level=0).sum()\n\n    # Calculate the correlation matrix\n    corr = df.corr()\n\n    # Create and return the heatmap\n    ax = sns.heatmap(corr, annot=True, fmt=\".2f\")\n    plt.close()  # Close the plot to prevent it from showing during function call\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for task_func.\"\"\"\n    def test_default_parameters(self):\n        \"\"\"\n        Test task_func with default parameters (rows=1000, string_length=3).\n        Verifies if the function returns a matplotlib Axes object.\n        \"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertIsInstance(result, plt.Axes)\n    def test_custom_rows(self):\n        \"\"\"\n        Test task_func with a custom number of rows.\n        Verifies if the function still returns a matplotlib Axes object.\n        \"\"\"\n        random.seed(1)\n        result = task_func(rows=500)\n        self.assertIsInstance(result, plt.Axes)\n    def test_custom_string_length(self):\n        \"\"\"\n        Test task_func with a custom string length.\n        Verifies if the function still returns a matplotlib Axes object.\n        \"\"\"\n        random.seed(2)\n        result = task_func(string_length=5)\n        self.assertIsInstance(result, plt.Axes)\n    def test_large_dataset(self):\n        \"\"\"\n        Test task_func with a large dataset.\n        Verifies if the function can handle a large number of rows without errors.\n        \"\"\"\n        random.seed(3)\n        result = task_func(rows=10000, string_length=3)\n        self.assertIsInstance(result, plt.Axes)\n    def test_zero_rows(self):\n        \"\"\"\n        Test task_func with zero rows.\n        Verifies if the function handles edge case of zero rows by returning None.\n        \"\"\"\n        random.seed(4)\n        result = task_func(rows=0)\n        self.assertIsNone(result, \"Function should return None for zero rows.\")\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function takes a list of tuples. The first value of each tuple is a string, the other values are numeric. E.g. ('test', 2, 12.4, -2) It calculates the mean over all tuples of the numerical values for each tuple position excluding the first position, and writes the results into a specified text file. The content in the text file is formated as follows: 'Position 'x': 'mean', where x is the current tuple position and 'mean' denotes the computed mean value. Each Position is written in a new line. It returns a list of the calculated mean values. Missing values and non numeric values at positions other than the first are filled / replaced with np.nan. If an empty list is handed to the function an empty list is returned and an empty file is created. The function utilizes the 'numpy' library for numerical operations and the 'itertools' library to handle the iteration through the data structure.\nThe function should output with:\n    list: A list of mean values calculated from the numerical data in the tuples.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n```",
        "gt": "import numpy as np\nimport itertools\ndef task_func(data_list, file_name):\n    # Unzipping the data to separate the elements of the tuples\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n    mean_values = []\n    # Calculating the mean values excluding the first position (non-numerical)\n    for column in unzipped_data[1:]:\n        numeric_values = [val for val in column if isinstance(val, (int, float))]\n        if numeric_values:\n            mean_values.append(np.nanmean(numeric_values))\n        else:\n            mean_values.append(np.nan)\n\n    # Writing the mean values to the specified file\n    with open(file_name, 'w') as f:\n        for i, mean_value in enumerate(mean_values, start=1):\n            f.write('Position {}: {}\\n'.format(i, mean_value))\n    \n    # Returning the list of mean values for testing purposes\n    return mean_values",
        "test": "import unittest\nimport os\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Variables for the tests\n        self.data_list = [('a', 1, 2), ('b', 2, 3), ('c', 3, 4), ('d', 4, 5), ('e', 5, 6)]\n        self.file_name = \"test_output.txt\"\n    def tearDown(self) -> None:\n        if os.path.isfile(self.file_name):\n            os.remove(self.file_name)\n    def read_file_content(self, file_path):\n        # Read the content of the file and return it as a list of lines\n        with open(file_path, 'r') as file:\n            return file.readlines()\n    def test_mean_values_with_valid_data(self):\n        expected_means = [3.0, 4.0]  # Expected mean values\n        expected_file_content = [\"Position 1: 3.0\\n\", \"Position 2: 4.0\\n\"]\n        result = task_func(self.data_list, self.file_name)\n        self.assertEqual(result, expected_means)\n        self.assertTrue(os.path.isfile(self.file_name))  # Check file creation\n        # Verify the content of the created file\n        actual_file_content = self.read_file_content(self.file_name)\n        self.assertEqual(actual_file_content, expected_file_content)\n    def test_function_with_empty_data(self):\n        result = task_func([], self.file_name)\n        self.assertEqual(result, [])  # Should return an empty list\n        self.assertTrue(os.path.isfile(self.file_name))  # Check file creation\n        expected_file_content = []\n        actual_file_content = self.read_file_content(self.file_name)\n        self.assertEqual(actual_file_content, expected_file_content)\n    def test_function_with_non_numeric_data(self):\n        data_with_non_numeric = [('a', 'x', 'y'), ('b', 'p', 'q')]\n        result = task_func(data_with_non_numeric, self.file_name)\n        self.assertEqual(result, [np.nan, np.nan])\n        self.assertTrue(os.path.isfile(self.file_name))  # Check file creation\n        expected_file_content = [\"Position 1: nan\\n\", \"Position 2: nan\\n\"]\n        actual_file_content = self.read_file_content(self.file_name)\n        self.assertEqual(actual_file_content, expected_file_content)\n    def test_function_with_incomplete_tuples(self):\n        inconsistent_data = [('a', 1), ('b',), ('c', 2, 3)]\n        expected_means = [1.5, 3.0]  # Expected means\n        result = task_func(inconsistent_data, self.file_name)\n        self.assertEqual(result, expected_means)\n        self.assertTrue(os.path.isfile(self.file_name))  # Check file creation\n        expected_file_content = [\"Position 1: 1.5\\n\", \"Position 2: 3.0\\n\"]\n        actual_file_content = self.read_file_content(self.file_name)\n        self.assertEqual(actual_file_content, expected_file_content)\n    def test_function_with_all_nan_values(self):\n        data_all_nan = [('a', np.nan, np.nan) for _ in range(5)]\n        expected_means = [np.nan, np.nan]\n        result = task_func(data_all_nan, self.file_name)\n        # Check if all values are 'nan'\n        self.assertTrue(result, expected_means)\n        self.assertTrue(os.path.isfile(self.file_name))  # Check file creation\n        expected_file_content = [\"Position 1: nan\\n\", \"Position 2: nan\\n\"]\n        actual_file_content = self.read_file_content(self.file_name)\n        self.assertEqual(actual_file_content, expected_file_content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Lists files in the specified source directory without descending into subdirectories and copies them to a destination directory.\nThe function should raise the exception for: ValueError: If source_path does not exist or is not a directory.\nThe function should output with:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n    full paths) that were copied.\nYou should write self-contained code starting with:\n```\nimport shutil\nimport pathlib\ndef task_func(source_path, destination_path):\n```",
        "gt": "import shutil\nimport pathlib\ndef task_func(source_path, destination_path):\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n\n    destination_path.mkdir(parents=True, exist_ok=True)\n\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)",
        "test": "import unittest\nimport tempfile\nimport pathlib\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.test_source_dir = pathlib.Path(self.temp_dir.name) / \"testf817-source\"\n        self.test_target_dir = pathlib.Path(self.temp_dir.name) / \"testf817-target\"\n        self.test_source_dir.mkdir(parents=True, exist_ok=True)\n        self.test_target_dir.mkdir(parents=True, exist_ok=True)\n    def tearDown(self):\n        self.temp_dir.cleanup()\n    def create_files(self, paths):\n        for path in paths:\n            full_path = self.test_source_dir / path\n            full_path.parent.mkdir(parents=True, exist_ok=True)\n            full_path.touch()\n    def test_case_1(self):\n        # Test empty directory\n        target_dir_before = list(self.test_target_dir.iterdir())\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        target_dir_after = list(self.test_target_dir.iterdir())\n        self.assertEqual(result, (\"testf817-source\", []))\n        self.assertEqual(target_dir_before, target_dir_after)\n    def test_case_2(self):\n        # Test directory with one file\n        self.create_files([\"file1.txt\"])\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        self.assertEqual(result, (\"testf817-source\", [\"file1.txt\"]))\n        # Check if files are copied correctly\n        self.assertEqual(\n            list(self.test_target_dir.iterdir()), [self.test_target_dir / \"file1.txt\"]\n        )\n    def test_case_3(self):\n        # Test directory with multiple files\n        self.create_files([\"file1.txt\", \"file2.txt\", \"file3.txt\"])\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        self.assertEqual(len(result), 2)\n        self.assertEqual(result[0], \"testf817-source\")\n        self.assertEqual(\n            sorted(result[1]), sorted([\"file1.txt\", \"file2.txt\", \"file3.txt\"])\n        )\n        self.assertEqual(\n            sorted(self.test_target_dir.iterdir()),\n            sorted(\n                [\n                    self.test_target_dir / \"file1.txt\",\n                    self.test_target_dir / \"file2.txt\",\n                    self.test_target_dir / \"file3.txt\",\n                ]\n            ),\n        )\n    def test_case_4(self):\n        # Test directory with subdirectories\n        self.test_source_dir.joinpath(\"subdir1\").mkdir()\n        self.create_files([\"file1.txt\", \"file2.txt\"])\n        self.create_files([\"subdir1/file3.txt\"])  # File inside subdirectory\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        self.assertEqual(len(result), 2)\n        self.assertEqual(result[0], \"testf817-source\")\n        self.assertEqual(sorted(result[1]), sorted([\"file1.txt\", \"file2.txt\"]))\n        # Check if files in subdirectories are ignored and only files in the source directory are copied\n        self.assertEqual(\n            sorted(self.test_target_dir.iterdir()),\n            sorted(\n                [self.test_target_dir / \"file1.txt\", self.test_target_dir / \"file2.txt\"]\n            ),\n        )\n    def test_case_5(self):\n        # Test non-existent source directory\n        with self.assertRaises(ValueError):\n            task_func(str(self.test_source_dir / \"nonexistent\"), str(self.test_target_dir))\n    def test_case_6(self):\n        # Test non-existent destination directory\n        shutil.rmtree(self.test_target_dir)\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        self.assertEqual(result, (\"testf817-source\", []))\n        # Check if destination directory is created\n        self.assertTrue(self.test_target_dir.exists())\n    def test_case_7(self):\n        # Test copying files to existing destination directory\n        self.create_files([\"file1.txt\", \"file2.txt\"])\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        self.assertEqual(sorted(result[1]), sorted([\"file1.txt\", \"file2.txt\"]))\n        # Call the function again\n        self.create_files([\"file3.txt\", \"file4.txt\"])\n        result = task_func(str(self.test_source_dir), str(self.test_target_dir))\n        # There should now be 4 files in the directory\n        self.assertEqual(\n            sorted(self.test_source_dir.iterdir()),\n            sorted(\n                [\n                    self.test_source_dir / \"file1.txt\",\n                    self.test_source_dir / \"file2.txt\",\n                    self.test_source_dir / \"file3.txt\",\n                    self.test_source_dir / \"file4.txt\",\n                ]\n            ),\n        )\n        # which means 4 files should have been copied\n        self.assertEqual(\n            sorted(result[1]),\n            sorted([\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\"]),\n        )\n        # and 4 files should be in the destination\n        self.assertEqual(\n            sorted(self.test_target_dir.iterdir()),\n            sorted(\n                [\n                    self.test_target_dir / \"file1.txt\",\n                    self.test_target_dir / \"file2.txt\",\n                    self.test_target_dir / \"file3.txt\",\n                    self.test_target_dir / \"file4.txt\",\n                ]\n            ),\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a series of n sine waves with increasing frequency with a fidelity of 0.01 radians as provided by the ANGLES array. The amplitude of each wave is 1. The function returns a list of numpy arrays with the y values of the sine waves. Additionally, calculate the Fast Fourier Transform (FFT) of the mixed signal and plot the histogram of the magnitude of the FFT data. If n_waves is less than 1, return an empty list for the sine waves, an empty array for the FFT data, and None for the axes object.\nThe function should output with:\n    list: A list of numpy arrays with the y values of the sine waves.\n    np.array: FFT data.\n    plt.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\nANGLES = np.arange(0, 2*np.pi, 0.01)\ndef task_func(n_waves, seed=0):\n    np.random.seed(seed)\n    sine_wave_series = []\n\n    if n_waves < 1:\n        return sine_wave_series, np.array([]), None\n\n    for frequency in range(1, n_waves+1):\n        wave = np.sin(frequency * ANGLES)\n        sine_wave_series.append(wave)\n\n    fft_data = fft(np.sum(sine_wave_series, axis=0))\n    _, ax = plt.subplots()\n    ax.hist(np.abs(fft_data))\n\n    return sine_wave_series, fft_data, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing basic functionality with 3 waves\n        sine_waves, fft_data, ax = task_func(3)\n        self.assertEqual(len(sine_waves), 3)  # Should return 3 waves\n        self.assertTrue(isinstance(sine_waves[0], np.ndarray))  # Each wave should be a numpy array\n        # Testing if the FFT data is a numpy array\n        self.assertIsInstance(fft_data, np.ndarray)\n        # Testing if the axes object is returned\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        # Testing with 5 waves\n        sine_waves, fft_data, ax = task_func(5)\n        self.assertEqual(len(sine_waves), 5)\n        self.assertTrue(isinstance(sine_waves[4], np.ndarray))\n        # Test the axis limits of the histogram\n        self.assertAlmostEqual(ax.get_xlim()[1], 331.2, places=1)\n        # Test the axis bins\n        self.assertEqual(len(ax.patches), 10)\n    def test_case_3(self):\n        # Testing with 1 wave\n        sine_waves, fft_data, ax = task_func(1, seed=5)\n        self.assertEqual(len(sine_waves), 1)\n        self.assertTrue(isinstance(sine_waves[0], np.ndarray))\n        # Test the FFT data\n        self.assertIsInstance(fft_data, np.ndarray)\n        self.assertEqual(fft_data.shape, (629,))\n        # test the maximum value of the FFT data\n        self.assertAlmostEqual(np.max(np.abs(fft_data)), 314.3, places=1)\n    def test_case_4(self):\n        # Testing edge case with 0 waves\n        sine_waves, fft_data, ax = task_func(0)\n        self.assertEqual(len(sine_waves), 0)\n        self.assertEqual(fft_data.shape, (0,))\n        self.assertIsNone(ax)\n    def test_case_5(self):\n        # Testing with negative number, should return empty list\n        sine_waves, fft_data, ax = task_func(-5)\n        self.assertEqual(len(sine_waves), 0)\n        self.assertEqual(fft_data.shape, (0,))\n        self.assertIsNone(ax)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a sales time-series and decompose it into trend, seasonal, and residual components. >>> result = task_func('2020-01-01', 24, 'M', 'multiplicative') >>> len(result['seasonal']) 24\nThe function should output with:\n    A dictionary containing 'trend', 'seasonal', and 'residual' components as Pandas Series.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndef task_func(start_date='2016-01-01', periods=24, freq='M', model='additive'):\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    sales_data = np.random.randint(low=100, high=500, size=periods)\n    sales_series = pd.Series(sales_data, index=date_range)\n    try:\n        decomposition = seasonal_decompose(sales_series, model=model, period=12 if freq == 'M' else 4)\n    except ValueError as e:\n        return {'error': str(e)}\n    \n    return {\n        'trend': decomposition.trend,\n        'seasonal': decomposition.seasonal,\n        'residual': decomposition.resid\n    }",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        np.random.seed(42)  # For reproducibility\n        result = task_func(periods=24)  # Adjust to meet the minimum requirement for decomposition\n        self.assertTrue(all(key in result for key in ['trend', 'seasonal', 'residual']))\n    def test_multiplicative_model(self):\n        np.random.seed(0)  # For reproducibility\n        result = task_func('2020-01-01', 24, 'M', 'multiplicative')\n        self.assertTrue(all(key in result for key in ['trend', 'seasonal', 'residual']))\n    def test_custom_parameters(self):\n        np.random.seed(55)  # For reproducibility\n        result = task_func('2017-01-01', 36, 'M')\n        self.assertEqual(len(result['trend']), 36)\n    def test_weekly_frequency(self):\n        np.random.seed(1)  # For reproducibility\n        result = task_func('2022-01-01', 104, 'W', 'additive')\n        self.assertTrue(all(key in result for key in ['trend', 'seasonal', 'residual']))\n        self.assertEqual(len(result['seasonal']), 104)\n        \n    def test_insufficient_periods_error(self):\n        np.random.seed(66)  # For reproducibility\n        result = task_func('2022-01-01', 12, 'M')\n        self.assertIn('error', result)\n        \n    def test_additive_decomposition_properties(self):\n        np.random.seed(42)  # For reproducibility\n        periods = 36\n        result = task_func('2020-01-01', periods, 'M')\n        reconstructed = result['trend'].fillna(0) + result['seasonal'].fillna(0) + result['residual'].fillna(0)\n        self.assertTrue(np.allclose(reconstructed.head(12), reconstructed.head(12), atol=1))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all combinations from a tuple with length n and return a random combination of length n.\nThe function should output with:\n    tuple: A combination of the input tuple.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport random\ndef task_func(t, n):\n```",
        "gt": "import itertools\nimport random\ndef task_func(t, n):\n    combinations = list(itertools.combinations(t, n))\n    selected_combination = random.choice(combinations)\n\n    return selected_combination",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        combination = task_func((1, 2, 3, 4), 2)\n        self.assertTrue(tuple(sorted(combination)) in [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])\n    def test_case_2(self):\n        combination = task_func((1, 2, 3, 4), 3)\n        self.assertTrue(tuple(sorted(combination)) in [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)])\n    def test_case_3(self):\n        combination = task_func((1, 2, 3, 4), 4)\n        self.assertTrue(tuple(sorted(combination)) in [(1, 2, 3, 4)])\n    def test_case_4(self):\n        combination = task_func((1, 2, 3, 4), 1)\n        self.assertTrue(tuple(sorted(combination)) in [(1,), (2,), (3,), (4,)])\n    def test_case_5(self):\n        combination = task_func((1, 2, 3, 4), 0)\n        self.assertTrue(tuple(sorted(combination)) in [()])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a CSV file with weather data for each hour of the current day.\nNote that: The row names for the csv are 'Temperature', 'Humidity', and 'Pressure' Temperature ranged rom -50 to 50 Humidity ranged rom 0 to 100 Pressure ranged rom 980 to 1040\nThe function should output with:\n    str: The path to the created file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\n# Constants\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n```",
        "gt": "import csv\nimport random\n# Constants\nDATA = ['Temperature', 'Humidity', 'Pressure']\nRANGE = {\n    'Temperature': (-50, 50),\n    'Humidity': (0, 100),\n    'Pressure': (980, 1040)\n}\ndef task_func(file_name=\"data.csv\"):\n    with open(file_name, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + DATA)\n        \n        for hour in range(24):\n            row = [f'{hour}:00']\n            for data_type in DATA:\n                min_val, max_val = RANGE[data_type]\n                row.append(random.uniform(min_val, max_val))\n            writer.writerow(row)\n\n    return file_name",
        "test": "import unittest\nimport os\nimport csv\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup for the test cases, creating a mock file name\n        self.mock_file_name = \"test_task_func_data.csv\"\n        \n    def tearDown(self):\n        # Cleanup after each test, removing the generated file if it exists\n        if os.path.exists(self.mock_file_name):\n            os.remove(self.mock_file_name)\n    def test_case_1(self):\n        # Testing default file name\n        random.seed(0)\n        returned_file = task_func(self.mock_file_name)\n        self.assertTrue(os.path.exists(returned_file))\n        \n    def test_case_2(self):\n        # Testing custom file name\n        random.seed(0)\n        returned_file = task_func(self.mock_file_name)\n        self.assertTrue(os.path.exists(returned_file))\n        \n    def test_case_3(self):\n        # Testing content structure of the CSV file\n        random.seed(0)\n        task_func(self.mock_file_name)\n        with open(self.mock_file_name, 'r') as file:\n            reader = csv.reader(file)\n            header = next(reader)\n            self.assertEqual(header, ['Time', 'Temperature', 'Humidity', 'Pressure'])\n            \n    def test_case_4(self):\n        # Testing content data ranges of the CSV file\n        random.seed(0)\n        task_func(self.mock_file_name)\n        with open(self.mock_file_name, 'r') as file:\n            reader = csv.reader(file)\n            next(reader)  # Skip header\n            for row in reader:\n                temp, humidity, pressure = float(row[1]), float(row[2]), float(row[3])\n                self.assertTrue(-50 <= temp <= 50)\n                self.assertTrue(0 <= humidity <= 100)\n                self.assertTrue(980 <= pressure <= 1040)\n                \n    def test_case_5(self):\n        # Testing number of rows (24 hours + header)\n        random.seed(0)\n        task_func(self.mock_file_name)\n        with open(self.mock_file_name, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            self.assertEqual(len(rows), 25)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sorts a given dictionary by its keys in ascending order and returns a PrettyTable object displaying the sorted items with the names 'Key' and 'Value'. Display an empty dictionary. >>> str(task_func({})).startswith('+') True\nThe function should output with:\n    PrettyTable: A PrettyTable object representing the sorted dictionary.\nYou should write self-contained code starting with:\n```\nfrom collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n```",
        "gt": "from collections import OrderedDict\nfrom prettytable import PrettyTable\ndef task_func(my_dict):\n    ordered_dict = OrderedDict(sorted(my_dict.items(), key=lambda t: t[0]))\n    table = PrettyTable(['Key', 'Value'])\n\n    for key, value in ordered_dict.items():\n        table.add_row([key, value])\n\n    return table",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_sort_and_display_dict(self):\n        my_dict = {3: 'apple', 1: 'banana', 2: 'cherry'}\n        table = task_func(my_dict)\n        expected_header = '+-----+--------+'\n        self.assertIn(expected_header, str(table))\n        self.assertIn('banana', str(table))\n    def test_empty_dict(self):\n        table = task_func({})\n        expected_header = '+-----+-------+'\n        self.assertIn(expected_header, str(table))\n    def test_single_element_dict(self):\n        my_dict = {1: 'single'}\n        table = task_func(my_dict)\n        self.assertIn('single', str(table))\n    def test_non_string_values(self):\n        my_dict = {1: 100, 2: 200.5}\n        table = task_func(my_dict)\n        self.assertIn('100', str(table))\n        self.assertIn('200.5', str(table))\n    def test_string_keys(self):\n        my_dict = {'a': 'apple', 'b': 'banana'}\n        table = task_func(my_dict)\n        self.assertIn('apple', str(table))\n        self.assertIn('banana', str(table))\n    def test_large_dict(self):\n        my_dict = {i: str(i) for i in range(1000)}\n        table = task_func(my_dict)\n        self.assertEqual(len(table._rows), 1000)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the frequency of each letter in a string and return a bar chart of frequencies. Results are case-insensitive. If non-string input is provided, function will throw an error.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the frequency of each letter.\n    Axes: The bar subplot of 'Letter Frequencies' with 'Letters' on the x-axis and 'Frequency'\n    on the y-axis.\nYou should write self-contained code starting with:\n```\nimport string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n```",
        "gt": "import string\nimport matplotlib.pyplot as plt\ndef task_func(s):\n\n    if not isinstance(s, str):\n        raise TypeError(\"Expected string input\")\n\n    LETTERS = string.ascii_lowercase\n\n    s = s.lower()\n\n    letter_counts = {letter: s.count(letter) for letter in LETTERS}\n\n    fig, ax = plt.subplots()\n    ax.bar(letter_counts.keys(), letter_counts.values())\n    ax.set_xlabel(\"Letters\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Letter Frequencies\")\n\n    return letter_counts, ax",
        "test": "import unittest\nimport string\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a simple sentence\n        s = \"This is a test string.\"\n        expected_output = {\n            letter: s.lower().count(letter) for letter in string.ascii_lowercase\n        }\n        result, ax = task_func(s)\n        self.assertEqual(result, expected_output)\n        self.assertEqual(ax.get_title(), \"Letter Frequencies\")\n        self.assertEqual(ax.get_xlabel(), \"Letters\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n    def test_case_2(self):\n        # Test with a string having all alphabets\n        s = \"abcdefghijklmnopqrstuvwxyz\"\n        expected_output = {letter: 1 for letter in string.ascii_lowercase}\n        result, ax = task_func(s)\n        self.assertEqual(result, expected_output)\n        self.assertEqual(ax.get_title(), \"Letter Frequencies\")\n        self.assertEqual(ax.get_xlabel(), \"Letters\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n    def test_case_3(self):\n        # Test with a string having no alphabets\n        s = \"1234567890!@#$%^&*()\"\n        expected_output = {letter: 0 for letter in string.ascii_lowercase}\n        result, ax = task_func(s)\n        self.assertEqual(result, expected_output)\n        self.assertEqual(ax.get_title(), \"Letter Frequencies\")\n        self.assertEqual(ax.get_xlabel(), \"Letters\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n    def test_case_4(self):\n        # Test with an empty string\n        s = \"\"\n        expected_output = {letter: 0 for letter in string.ascii_lowercase}\n        result, ax = task_func(s)\n        self.assertEqual(result, expected_output)\n        self.assertEqual(ax.get_title(), \"Letter Frequencies\")\n        self.assertEqual(ax.get_xlabel(), \"Letters\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n    def test_case_5(self):\n        # Test error handling\n        for invalid in [123, []]:\n            with self.assertRaises(Exception):\n                task_func(invalid)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a demographic dataset with information about people from different countries, their age, and gender. Genders are encoded using sklearn LabelEncoder. Datapoints are sampled from the lists using a numpy.random.default_rng with seed: rng_seed. >>> demographics = task_func(5, countries=['Austria', 'Germany'], rng_seed=3) >>> print(demographics) Country  Age  Gender 0  Germany   51       1 1  Austria   54       1 2  Austria   42       0 3  Austria   19       1 4  Austria   21       1\nThe function should raise the exception for: ValueError: If num_samples is not an integer.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the demographics data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(num_samples, countries=['Russia', 'China', 'USA', 'India', 'Brazil'], \n           ages=np.arange(18, 60), genders=['Male', 'Female'], rng_seed=None):\n\n    if not isinstance(num_samples, int):\n        raise ValueError(\"num_samples should be an integer.\")\n\n    rng = np.random.default_rng(seed=rng_seed)\n    countries = rng.choice(countries, num_samples)\n    ages = rng.choice(ages, num_samples)\n    genders = rng.choice(genders, num_samples)\n\n    le = LabelEncoder()\n    encoded_genders = le.fit_transform(genders)\n\n    demographics = pd.DataFrame({\n        'Country': countries,\n        'Age': ages,\n        'Gender': encoded_genders\n    })\n\n    return demographics",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_num_samples(self):\n        'num_samples not an integer'\n        self.assertRaises(Exception, task_func, 'test')\n    \n    # Test Case 1: Basic test with default parameters\n    def test_case_1(self):\n        demographics = task_func(10, rng_seed=1)\n        self.assertEqual(len(demographics), 10)\n        self.assertTrue(set(demographics['Country'].unique()).issubset(['Russia', 'China', 'USA', 'India', 'Brazil']))\n        self.assertTrue(all(18 <= age <= 59 for age in demographics['Age']))\n        self.assertTrue(set(demographics['Gender'].unique()).issubset([0, 1]))\n    # Test Case 2: Test with custom countries list\n    def test_case_2(self):\n        demographics = task_func(5, countries=['Canada', 'Australia'], rng_seed=1)\n        self.assertEqual(len(demographics), 5)\n        self.assertTrue(set(demographics['Country'].unique()).issubset(['Canada', 'Australia']))\n        self.assertTrue(all(18 <= age <= 59 for age in demographics['Age']))\n        self.assertTrue(set(demographics['Gender'].unique()).issubset([0, 1]))\n    # Test Case 3: Test with custom age range\n    def test_case_3(self):\n        demographics = task_func(5, ages=np.arange(25, 40), rng_seed=1)\n        self.assertEqual(len(demographics), 5)\n        self.assertTrue(all(25 <= age <= 40 for age in demographics['Age']))\n        self.assertTrue(set(demographics['Gender'].unique()).issubset([0, 1]))\n    # Test Case 4: Test with custom gender list\n    def test_case_4(self):\n        demographics = task_func(5, genders=['Non-Binary'], rng_seed=1)\n        self.assertEqual(len(demographics), 5)\n        self.assertTrue(set(demographics['Gender'].unique()).issubset([0]))\n    # Test Case 5: Test with larger sample size\n    def test_case_5(self):\n        demographics = task_func(100, rng_seed=1)\n        self.assertEqual(len(demographics), 100)\n        self.assertTrue(set(demographics['Country'].unique()).issubset(['Russia', 'China', 'USA', 'India', 'Brazil']))\n        self.assertTrue(all(18 <= age <= 59 for age in demographics['Age']))\n        self.assertTrue(set(demographics['Gender'].unique()).issubset([0, 1]))\n    def test_case_6(self):\n        'check for specific return value'\n        demographics = task_func(5, rng_seed=3)\n        expected_df = pd.DataFrame({\n            'Country': ['Brazil', 'Russia', 'Russia', 'China', 'Russia'],\n            'Age': [51, 54, 42, 19, 21],\n            'Gender': [1, 1, 0, 1, 1]\n        })\n        pd.testing.assert_frame_equal(demographics, expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Signs the specified request data with a secret key using HMAC SHA256, then URL encodes the signature and replace spaces with '+'.\nThe function should raise the exception for: TypeError: If `req_data` is not a dictionary.\nThe function should output with:\n    str: The URL encoded HMAC signature of the request data.\nYou should write self-contained code starting with:\n```\nimport json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n```",
        "gt": "import json\nimport urllib.parse\nimport hmac\nimport hashlib\ndef task_func(req_data, secret_key):\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    # Convert request data to json string\n    json_req_data = json.dumps(req_data)\n    # Create a new hmac object with the secret key and the json string as the message\n    hmac_obj = hmac.new(secret_key.encode(), json_req_data.encode(), hashlib.sha256)\n    # Get the hmac signature\n    hmac_signature = hmac_obj.hexdigest()  # Use hexdigest for a hexadecimal representation\n    # URL encode the hmac signature\n    url_encoded_signature = urllib.parse.quote_plus(hmac_signature)\n\n    return url_encoded_signature",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up common test data and secret key.\"\"\"\n        self.secret_key = 'test_secret_key'\n    \n    def compute_expected_signature(self, req_data):\n        \"\"\"Compute the expected HMAC signature for comparison in tests.\"\"\"\n        json_req_data = json.dumps(req_data)\n        hmac_obj = hmac.new(self.secret_key.encode(), json_req_data.encode(), hashlib.sha256)\n        hmac_hex = hmac_obj.hexdigest()\n        url_encoded_signature = urllib.parse.quote_plus(hmac_hex)\n        \n        return url_encoded_signature\n    def test_return_type(self):\n        \"\"\"Ensure the function returns a string.\"\"\"\n        result = task_func({'key': 'value'}, self.secret_key)\n        self.assertIsInstance(result, str)\n    def test_known_data_signature(self):\n        \"\"\"Validate the HMAC signature against a known output for specific data.\"\"\"\n        known_data = {'known': 'data'}\n        expected_signature = self.compute_expected_signature(known_data)\n        result = task_func(known_data, self.secret_key)\n        self.assertEqual(result, expected_signature)\n    def test_empty_data(self):\n        \"\"\"Verify the function behaves correctly with empty input data.\"\"\"\n        result = task_func({}, self.secret_key)\n        expected_signature_for_empty_data = self.compute_expected_signature({})\n        self.assertEqual(result, expected_signature_for_empty_data)\n    def test_complex_data_structure(self):\n        \"\"\"Check the function's behavior with complex nested data structures.\"\"\"\n        complex_data = {'list': [1, 2, 3], 'nested': {'key': 'value'}}\n        result = task_func(complex_data, self.secret_key)\n        expected_signature = self.compute_expected_signature(complex_data)\n        self.assertEqual(result, expected_signature)\n    def test_non_dict_input(self):\n        \"\"\"Ensure non-dictionary inputs raise the appropriate error.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func('not a dict', self.secret_key)\n    def test_different_data_different_signatures(self):\n        \"\"\"Test that different data results in different HMAC signatures.\"\"\"\n        data1 = {'data': 'test1'}\n        data2 = {'data': 'test2'}\n        result1 = task_func(data1, self.secret_key)\n        result2 = task_func(data2, self.secret_key)\n        expected_signature1 = self.compute_expected_signature(data1)\n        expected_signature2 = self.compute_expected_signature(data2)\n        self.assertEqual(result1, expected_signature1)\n        self.assertEqual(result2, expected_signature2)\n        self.assertNotEqual(result1, result2)\n    def test_consistent_hash_with_same_input(self):\n        \"\"\"Test that hashing the same data multiple times results in the same hashes.\"\"\"\n        data = {'consistent': 'data'}\n        result1 = task_func(data, self.secret_key)\n        result2 = task_func(data, self.secret_key)\n        expected_signature = self.compute_expected_signature(data)\n        self.assertEqual(result1, expected_signature)\n        self.assertEqual(result2, expected_signature)\n        self.assertEqual(result1, result2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a sales report for a list of products in different categories. The report includes the quantity sold and revenue generated for each product.\nNote that: The column names uses are 'Product', 'Category', 'Quantity Sold', and 'Revenue'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with sales data for the products.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n```",
        "gt": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n\n    report_data = []\n\n    for product in product_list:\n        category = categories[random.randint(0, len(categories)-1)]\n        quantity_sold = random.randint(min_value, max_value)\n        revenue = quantity_sold * random.randint(min_value, max_value)\n        report_data.append([product, category, quantity_sold, revenue])\n\n    report_df = pd.DataFrame(report_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    \n    categories = ['Electronics', 'Fashion', 'Home', 'Beauty', 'Sports']\n    products = ['Product ' + str(i) for i in range(1, 101)]\n    \n    def test_case_1(self):\n        random.seed(0)\n        report = task_func(self.products[:5], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 5)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_2(self):\n        random.seed(0)\n        report = task_func(self.products[5:10], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 5)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_3(self):\n        random.seed(0)\n        report = task_func([self.products[10]], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 1)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_4(self):\n        random.seed(0)\n        report = task_func(self.products[10:20], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 10)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_5(self):\n        random.seed(0)\n        report = task_func(self.products[20:40], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 20)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n    \n    def test_case_6(self):\n        random.seed(0)\n        report = task_func([self.products[0]], self.categories, 10, 10)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 1)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        self.assertEqual(report.iloc[0]['Quantity Sold'], 10)\n        self.assertEqual(report.iloc[0]['Revenue'], 100)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots \"num_points\" random points on the polar diagram represented by \"ax.\" The radial ticks on the plot are positioned based on the number of points divided by 10 degrees.\nThe function should raise the exception for: This function will raise a ValueError if the input ax is not and Axes. This function will raise a ValueError if it is use the negative number as num_points.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified Axes object with plotted points.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport numpy as np\ndef task_func(ax, num_points):\n```",
        "gt": "import matplotlib\nimport numpy as np\ndef task_func(ax, num_points):\n    \n    if not isinstance(ax, matplotlib.axes.Axes):\n        raise ValueError(\"The input is not an axes\")\n\n    r = np.random.rand(num_points)\n    theta = 2 * np.pi * np.random.rand(num_points)\n\n    ax.scatter(theta, r)\n    ax.set_rlabel_position(num_points / 10)\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with 10 points\n        np.random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        modified_ax = task_func(ax, 10)\n        self.assertIsInstance(modified_ax, plt.Axes, \"Should return a matplotlib Axes object\")\n        self.assertEqual(modified_ax.get_rlabel_position(), 10 / 10, \"Radial label position should be set to 1\")\n        plt.close()\n    def test_case_2(self):\n        # Test with 100 points\n        np.random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        modified_ax = task_func(ax, 100)\n        self.assertIsInstance(modified_ax, plt.Axes, \"Should return a matplotlib Axes object\")\n        self.assertEqual(modified_ax.get_rlabel_position(), 100 / 10, \"Radial label position should be set to 10\")\n        plt.close()\n    def test_case_3(self):\n        # Test with 50 points\n        np.random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        modified_ax = task_func(ax, 50)\n        self.assertIsInstance(modified_ax, plt.Axes, \"Should return a matplotlib Axes object\")\n        self.assertEqual(modified_ax.get_rlabel_position(), 50 / 10, \"Radial label position should be set to 5\")\n        plt.close()\n    def test_case_4(self):\n        # Test with 0 points (edge case)\n        np.random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        modified_ax = task_func(ax, 0)\n        self.assertIsInstance(modified_ax, plt.Axes, \"Should return a matplotlib Axes object\")\n        self.assertEqual(modified_ax.get_rlabel_position(), 0 / 10, \"Radial label position should be set to 0\")\n        plt.close()\n    def test_case_5(self):\n        # Test with negative points (invalid input)\n        np.random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        with self.assertRaises(ValueError, msg=\"Should raise ValueError for negative number of points\"):\n            task_func(ax, -10)\n        plt.close()\n    def test_case_6(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_ax\", 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a hexadecimal string to various encodings. This function takes a hexadecimal string as input and performs several encoding operations. Initially, it decodes the hexadecimal string to bytes and then converts these bytes into a UTF-8 string. This UTF-8 string is subsequently encoded into different formats: hexadecimal, base64, UTF-8, UTF-16, UTF-32, ASCII (if possible), URL encoding, and ROT13. Note that if ASCII not possible, returns 'Not representable in ASCII'. >>> task_func(\"68656c6c6f\") {'hex': '68656c6c6f', 'base64': 'aGVsbG8=', 'utf-8': 'hello', 'utf-16': 'hello', 'utf-32': 'hello', 'ASCII': 'hello', 'URL': 'hello', 'ROT13': 'uryyb'}\nThe function should output with:\n    dict: A dictionary containing the input string encoded in various formats. The dictionary's keys\n    are the encoding types ('hex', 'base64', 'utf-8', 'utf-16', 'utf-32', 'ASCII', 'URL', 'ROT13'),\n    and the values are the corresponding encoded strings. If the string cannot be represented in ASCII,\n    the 'ASCII' key maps to 'Not representable in ASCII'.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n```",
        "gt": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\ndef task_func(hex_string):\n    encodings = {}\n\n    # Convert hex string to its string representation\n    decoded_str = bytes.fromhex(hex_string).decode(\"utf-8\")\n\n    # Hexadecimal encoding\n    encodings[\"hex\"] = binascii.hexlify(decoded_str.encode()).decode()\n\n    # Base64 encoding\n    encodings[\"base64\"] = base64.b64encode(decoded_str.encode()).decode()\n\n    # UTF-8 encoding\n    encodings[\"utf-8\"] = decoded_str.encode(\"utf-8\").decode()\n\n    # UTF-16 encoding\n    encodings[\"utf-16\"] = decoded_str.encode(\"utf-16\").decode(\"utf-16\")\n\n    # UTF-32 encoding\n    encodings[\"utf-32\"] = decoded_str.encode(\"utf-32\").decode(\"utf-32\")\n\n    # ASCII encoding - only if characters are in ASCII range\n    try:\n        encodings[\"ASCII\"] = decoded_str.encode(\"ascii\").decode()\n    except UnicodeEncodeError:\n        encodings[\"ASCII\"] = \"Not representable in ASCII\"\n\n    # URL encoding\n    encodings[\"URL\"] = urllib.parse.quote(decoded_str)\n\n    # ROT13 encoding\n    encodings[\"ROT13\"] = codecs.encode(decoded_str, \"rot_13\")\n\n    return encodings",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_hex_string_sample(self):\n        \"\"\"Test the sample input from the problem description.\"\"\"\n        hex_str = \"4a4b4c\"\n        result = task_func(hex_str)\n        self.assertEqual(result[\"hex\"], hex_str)\n        self.assertEqual(result[\"base64\"], \"SktM\")\n        self.assertEqual(result[\"utf-8\"], \"JKL\")\n        self.assertEqual(result[\"utf-16\"], \"JKL\")\n        self.assertEqual(result[\"utf-32\"], \"JKL\")\n        self.assertEqual(result[\"ASCII\"], \"JKL\")\n        self.assertEqual(result[\"URL\"], \"JKL\")\n        self.assertEqual(result[\"ROT13\"], \"WXY\")\n    def test_hex_string_1(self):\n        \"\"\"Test a hex string with a mix of letters and numbers.\"\"\"\n        hex_str = \"68656c6c6f\"\n        result = task_func(hex_str)\n        self.assertEqual(result[\"hex\"], hex_str)\n        self.assertEqual(result[\"base64\"], \"aGVsbG8=\")\n        self.assertEqual(result[\"utf-8\"], \"hello\")\n        self.assertEqual(result[\"utf-16\"], \"hello\")\n        self.assertEqual(result[\"utf-32\"], \"hello\")\n        self.assertEqual(result[\"ASCII\"], \"hello\")\n        self.assertEqual(result[\"URL\"], \"hello\")\n        self.assertEqual(result[\"ROT13\"], \"uryyb\")\n    def test_hex_string_2(self):\n        \"\"\"Test a hex string with a mix of letters and numbers.\"\"\"\n        hex_str = \"776f726c64\"\n        result = task_func(hex_str)\n        self.assertEqual(result[\"hex\"], hex_str)\n        self.assertEqual(result[\"base64\"], \"d29ybGQ=\")\n        self.assertEqual(result[\"utf-8\"], \"world\")\n        self.assertEqual(result[\"utf-16\"], \"world\")\n        self.assertEqual(result[\"utf-32\"], \"world\")\n        self.assertEqual(result[\"ASCII\"], \"world\")\n        self.assertEqual(result[\"URL\"], \"world\")\n        self.assertEqual(result[\"ROT13\"], \"jbeyq\")\n    def test_hex_string_3(self):\n        \"\"\"Test a hex string with a mix of letters and numbers.\"\"\"\n        hex_str = \"616263\"\n        result = task_func(hex_str)\n        self.assertEqual(result[\"hex\"], hex_str)\n        self.assertEqual(result[\"base64\"], \"YWJj\")\n        self.assertEqual(result[\"utf-8\"], \"abc\")\n        self.assertEqual(result[\"utf-16\"], \"abc\")\n        self.assertEqual(result[\"utf-32\"], \"abc\")\n        self.assertEqual(result[\"ASCII\"], \"abc\")\n        self.assertEqual(result[\"URL\"], \"abc\")\n        self.assertEqual(result[\"ROT13\"], \"nop\")\n    def test_hex_string_4(self):\n        \"\"\"Test a hex string with a mix of letters and numbers.\"\"\"\n        hex_str = \"313233\"\n        result = task_func(hex_str)\n        self.assertEqual(result[\"hex\"], hex_str)\n        self.assertEqual(result[\"base64\"], \"MTIz\")\n        self.assertEqual(result[\"utf-8\"], \"123\")\n        self.assertEqual(result[\"utf-16\"], \"123\")\n        self.assertEqual(result[\"utf-32\"], \"123\")\n        self.assertEqual(result[\"ASCII\"], \"123\")\n        self.assertEqual(result[\"URL\"], \"123\")\n        self.assertEqual(result[\"ROT13\"], \"123\")\n    def test_hex_string_non_ascii(self):\n        \"\"\"Test a hex string with non-ASCII characters.\"\"\"\n        hex_str = \"c3a9\"\n        result = task_func(hex_str)\n        self.assertEqual(result[\"hex\"], hex_str)\n        self.assertEqual(result[\"base64\"], \"w6k=\")\n        self.assertEqual(result[\"utf-8\"], \"\u00e9\")\n        self.assertEqual(result[\"utf-16\"], \"\u00e9\")\n        self.assertEqual(result[\"utf-32\"], \"\u00e9\")\n        self.assertEqual(result[\"ASCII\"], \"Not representable in ASCII\")\n        self.assertEqual(result[\"URL\"], \"%C3%A9\")\n        self.assertEqual(result[\"ROT13\"], \"\u00e9\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Computes the sum of numeric values and counts the occurrences of categories in a list of tuples. Each tuple in the input list contains a numeric value and a category. This function calculates the sum of all the numeric values and also counts how many times each category appears in the list.\nThe function should output with:\n    tuple: A 2-element tuple where the first element is the sum of the numeric values, and the\n    second element is a dictionary with categories as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n```",
        "gt": "import numpy as np\nfrom collections import Counter\ndef task_func(list_of_tuples):\n\n    numeric_values = [pair[0] for pair in list_of_tuples]\n    categories = [pair[1] for pair in list_of_tuples]\n\n    total_sum = np.sum(numeric_values)\n    category_counts = Counter(categories)\n\n    return total_sum, dict(category_counts)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Regular list of tuples with different categories\n        input_data = [(5, 'Fruits'), (9, 'Vegetables'), (-1, 'Dairy'), (-2, 'Bakery'), (4, 'Meat')]\n        sum_values, count_values = task_func(input_data)\n        self.assertEqual(sum_values, 15)\n        self.assertEqual(count_values, {'Fruits': 1, 'Vegetables': 1, 'Dairy': 1, 'Bakery': 1, 'Meat': 1})\n    def test_case_2(self):\n        # List of tuples with all the same categories\n        input_data = [(5, 'Fruits'), (9, 'Fruits'), (-1, 'Fruits'), (-2, 'Fruits')]\n        sum_values, count_values = task_func(input_data)\n        self.assertEqual(sum_values, 11)\n        self.assertEqual(count_values, {'Fruits': 4})\n    def test_case_3(self):\n        # List of tuples with all negative numeric values\n        input_data = [(-5, 'Fruits'), (-9, 'Vegetables'), (-1, 'Dairy')]\n        sum_values, count_values = task_func(input_data)\n        self.assertEqual(sum_values, -15)\n        self.assertEqual(count_values, {'Fruits': 1, 'Vegetables': 1, 'Dairy': 1})\n    def test_case_4(self):\n        # Empty list\n        input_data = []\n        sum_values, count_values = task_func(input_data)\n        self.assertEqual(sum_values, 0)\n        self.assertEqual(count_values, {})\n    def test_case_5(self):\n        # List of tuples with mixed positive and negative numeric values for the same category\n        input_data = [(5, 'Fruits'), (-5, 'Fruits'), (3, 'Fruits')]\n        sum_values, count_values = task_func(input_data)\n        self.assertEqual(sum_values, 3)\n        self.assertEqual(count_values, {'Fruits': 3})\n    def test_empty_list(self):\n        \"\"\"Test with an empty list.\"\"\"\n        self.assertEqual(task_func([]), (0, {}))\n    def test_all_negative_values(self):\n        \"\"\"Test with all negative numeric values.\"\"\"\n        list_of_tuples = [(-5, 'Fruits'), (-2, 'Vegetables')]\n        self.assertEqual(task_func(list_of_tuples), (-7, {'Fruits': 1, 'Vegetables': 1}))\n    def test_duplicate_categories(self):\n        \"\"\"Test with duplicate categories.\"\"\"\n        list_of_tuples = [(1, 'Fruits'), (2, 'Fruits'), (3, 'Vegetables')]\n        self.assertEqual(task_func(list_of_tuples), (6, {'Fruits': 2, 'Vegetables': 1}))\n    def test_single_tuple_in_list(self):\n        \"\"\"Test with a single tuple in the list.\"\"\"\n        list_of_tuples = [(10, 'Meat')]\n        self.assertEqual(task_func(list_of_tuples), (10, {'Meat': 1}))\n    def test_float_numeric_values(self):\n        \"\"\"Test with non-integer numeric values (floats).\"\"\"\n        list_of_tuples = [(1.5, 'Fruits'), (2.5, 'Vegetables')]\n        self.assertEqual(task_func(list_of_tuples), (4.0, {'Fruits': 1, 'Vegetables': 1}))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a bar plot showing the frequency of letters in the given dataset, and highlight the letter associated with the maximum integer value.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the generated plot, with the x-axis labeled 'Letter', the y-axis labeled 'Count', the title 'Letter Counts with Max Value Letter Highlighted', and the labels 'Letter Counts' and 'Max Value Letter' in the legend.\nYou should write self-contained code starting with:\n```\nimport collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import collections\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    letter_counts = collections.Counter([item[0] for item in data])\n    max_value_letter = max(data, key=itemgetter(1))[0]\n\n    letters, counts = zip(*letter_counts.items())\n    # Initialize a fresh plot\n    plt.figure()\n    ax = plt.bar(letters, counts, label='Letter Counts')\n\n    if max_value_letter in letter_counts:\n        plt.bar(max_value_letter, letter_counts[max_value_letter], color='red', label='Max Value Letter')\n\n    plt.xlabel('Letter')\n    plt.ylabel('Count')\n    plt.title('Letter Counts with Max Value Letter Highlighted')\n    plt.legend()\n\n    return plt.gca()",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data = [('a', 10), ('b', 15), ('a', 5), ('c', 20), ('b', 10)]\n        self.ax = task_func(self.data)\n    def test_case_1(self):\n        \"\"\"Test if the number of bars in the plot matches the number of unique letters in the dataset.\"\"\"\n        self.assertEqual(len([rect for rect in self.ax.patches]), len(set([item[0] for item in self.data]))+1)\n    def test_case_2(self):\n        \"\"\"Test if the letter with the maximum value is correctly highlighted.\"\"\"\n        max_value_letter = max(self.data, key=lambda item: item[1])[0]\n        for rect in self.ax.patches:\n            if rect.get_label() == 'Max Value Letter':\n                self.assertEqual(rect.get_x(), ord(max_value_letter) - ord('a'))\n    def test_case_3(self):\n        \"\"\"Test if the plot has correct labels, title, and legend.\"\"\"\n        self.assertEqual(self.ax.get_xlabel(), 'Letter')\n        self.assertEqual(self.ax.get_ylabel(), 'Count')\n        self.assertEqual(self.ax.get_title(), 'Letter Counts with Max Value Letter Highlighted')\n        self.assertTrue(self.ax.get_legend() is not None)\n    def test_case_4(self):\n        \"\"\"Test if the frequency counts for each letter are correct.\"\"\"\n        from collections import Counter\n        letter_freq = Counter([item[0] for item in self.data])\n        for rect in self.ax.patches:\n            if rect.get_label() == 'Letter Counts':\n                self.assertEqual(rect.get_height(), letter_freq[chr(int(rect.get_x()) + ord('a'))])\n    def test_case_5(self):\n        \"\"\"Test if non-maximum value letters are not highlighted.\"\"\"\n        max_value_letter = max(self.data, key=lambda item: item[1])[0]\n        non_max_letters = set([item[0] for item in self.data if item[0] != max_value_letter])\n        for rect in self.ax.patches:\n            if rect.get_label() == 'Letter Counts' and chr(int(rect.get_x()) + ord('a')) in non_max_letters:\n                self.assertNotEqual(rect.get_facecolor(), 'red')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a \"shopping cart\" (Counter object) for each list in list_of_lists. The items in the cart are randomly selected from a predefined list of possible items (POSSIBLE_ITEMS). The frequency of each item in the cart corresponds to the length of the list.\nThe function should output with:\n    baskets (list): A list of Counters, each representing a 'shopping cart'.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom random import choice, seed\n# Constants\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n```",
        "gt": "from collections import Counter\nfrom random import choice, seed\n# Constants\nPOSSIBLE_ITEMS = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ndef task_func(list_of_lists):\n    seed(42)  # Set the seed for reproducibility\n    baskets = []\n    for list_ in list_of_lists:\n        basket = Counter()\n        for _ in list_:\n            basket[choice(POSSIBLE_ITEMS)] += 1\n        baskets.append(basket)\n\n    return baskets",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with empty list\n        result = task_func([])\n        self.assertEqual(result, [])\n    def test_case_2(self):\n        # Testing with empty sublists\n        result = task_func([[], [], []])\n        for basket in result:\n            self.assertEqual(basket, Counter())\n        \n    def test_case_3(self):\n        # Testing with sublists of different lengths\n        result = task_func([[1], [1, 2], [1, 2, 3]])\n        self.assertEqual(len(result), 3)\n        self.assertEqual(sum(result[0].values()), 1)\n        self.assertEqual(sum(result[1].values()), 2)\n        self.assertEqual(sum(result[2].values()), 3)\n    def test_case_4(self):\n        # Testing with sublists containing the same element\n        result = task_func([[1, 1, 1], [2, 2, 2, 2]])\n        self.assertEqual(len(result), 2)\n        self.assertEqual(sum(result[0].values()), 3)\n        self.assertEqual(sum(result[1].values()), 4)\n        \n    def test_case_5(self):\n        # Testing with large sublists\n        result = task_func([[1]*100, [2]*200])\n        self.assertEqual(len(result), 2)\n        self.assertEqual(sum(result[0].values()), 100)\n        self.assertEqual(sum(result[1].values()), 200)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Divide a string into words, remove punctuation marks and convert them to lowercase letters.\nThe function should output with:\n    cleaned_words (list): A list of cleaned words.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n```",
        "gt": "import re\nimport string\n# Constants\nPUNCTUATION = string.punctuation\ndef task_func(text):\n    words = re.split(r'\\s+', text)\n    cleaned_words = [re.sub(f'[{PUNCTUATION}]', '', word).lower() for word in words]\n\n    return cleaned_words",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_standard_input(self):\n        \"\"\"Test with standard input containing words, punctuation, and whitespaces\"\"\"\n        input_text = \"Hello, world! This is a test.\"\n        expected_output = ['hello', 'world', 'this', 'is', 'a', 'test']\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_empty_string(self):\n        \"\"\"Test with an empty string\"\"\"\n        input_text = \"\"\n        expected_output = ['']\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_string_with_no_punctuation(self):\n        \"\"\"Test with a string that has no punctuation marks\"\"\"\n        input_text = \"Python is great\"\n        expected_output = ['python', 'is', 'great']\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_string_with_numbers(self):\n        \"\"\"Test with a string that includes numbers and punctuation\"\"\"\n        input_text = \"1234! Test with numbers.\"\n        expected_output = ['1234', 'test', 'with', 'numbers']\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_string_with_special_characters(self):\n        \"\"\"Test with a string that includes special characters\"\"\"\n        input_text = \"Special chars @#$%^&*()\"\n        expected_output = ['special', 'chars', '']\n        self.assertEqual(task_func(input_text), expected_output)\n    def test_string_with_whitespaces(self):\n        \"\"\"Test with a string that includes extra whitespaces between words\"\"\"\n        input_text = \"   Extra   whitespaces   \"\n        expected_output = ['', 'extra', 'whitespaces', '']\n        self.assertEqual(task_func(input_text), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\nThe function should raise the exception for: Exception: If the input array is empty. ValueError: If Values are not numeric.\nThe function should output with:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n    Category contains the the first elements of each tuple.\n    Value contains the normalized values of each tuple.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_pairs):\n\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        '''test with normal input data'''\n        input_data = [('traditional', -4), ('we', 7), ('because', 3), ('ability', 10), ('exactly', -7)]\n        result = task_func(input_data)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue('Value' in result.columns)\n        self.assertAlmostEqual(result[result['Category'] == 'traditional']['Value'].item(), 0.176471, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'we']['Value'].item(), 0.823529, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'because']['Value'].item(), 0.588235, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'ability']['Value'].item(), 1.000000, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'exactly']['Value'].item(), 0.000000, places=6)\n    def test_case_2(self):\n        '''test empty input'''\n        input_data = []\n        self.assertRaises(Exception, task_func, input_data)\n    def test_case_3(self):\n        '''non numeric values'''\n        input_data = [('fast', 'test'), ('ago', -8), ('player', 7), ('standard', 2), ('specific', 0)]\n        self.assertRaises(Exception, task_func, input_data)\n    def test_case_4(self):\n        '''Floating point values'''\n        input_data = [('real', 4.453), ('others', -1.12), ('professor', -2.2), ('other', -5), ('task', -7.933)]\n        result = task_func(input_data)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue('Value' in result.columns)\n        self.assertAlmostEqual(result[result['Category'] == 'real']['Value'].item(), 1.000000, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'others']['Value'].item(), 0.550057, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'professor']['Value'].item(), 0.462861, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'other']['Value'].item(), 0.236800, places=6)\n        self.assertAlmostEqual(result[result['Category'] == 'task']['Value'].item(), 0.000000, places=6)\n    def test_case_5(self):\n        '''test for basic output structure'''\n        input_data = [('visit', 4), ('brother', -2), ('experience', -10), ('whether', 8), ('hand', 3)]\n        result = task_func(input_data)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue('Value' in result.columns)\n        self.assertTrue('Category' in result.columns)\n        self.assertTrue(0 <= result['Value'].min() <= 1)\n        self.assertTrue(0 <= result['Value'].max() <= 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Counts matches from a CSV file based on a given regex pattern. By default, it captures content between parentheses as a single match and any word or sequence of non-alphanumeric characters outside as matches in a string.\nThe function should output with:\n    dict: A dictionary with counts of matches.\nYou should write self-contained code starting with:\n```\nimport csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n```",
        "gt": "import csv\nimport re\nfrom collections import Counter\ndef task_func(file_path, regex_pattern=r'\\(.+?\\)|\\w+|[\\W_]+'):\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        text = ' '.join(row[0] for row in reader)\n        matches = re.findall(regex_pattern, text)\n\n    counts = Counter(matches)\n    return dict(counts)",
        "test": "import unittest\nimport os\nimport shutil\nimport doctest\nimport tempfile\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    base_tmp_dir = tempfile.mkdtemp()\n    test_data_dir = f\"{base_tmp_dir}/test\"\n    def setUp(self):\n        self.csv_file_path = 'data.csv'\n        # Create the directory if it doesn't exist\n        if not os.path.exists(self.test_data_dir):\n            os.makedirs(self.test_data_dir)\n        test_files = {\n            \"test1.csv\": [\"a\", \"b\", \"(abc)\", \"a\", \"a\", \"(def)\", \"b\", \"(ghi)\", \"a\", \"c\", \"(abc)\"],\n            \"test2.csv\": [\"x\", \"y\", \"(xyz)\", \"x\", \"(uvw)\", \"z\", \"y\", \"(rst)\", \"(xyz)\"],\n            \"test3.csv\": [\"1\", \"2\", \"(345)\", \"(678)\", \"2\", \"3\", \"(901)\", \"4\", \"(234)\"],\n            \"test4.csv\": [\"@\", \"#\", \"($%^)\", \"&\", \"*\", \"(*)_+\", \"@\", \"(#&)\"],\n            \"test5.csv\": [\"apple\", \"banana\", \"(cherry)\", \"date\", \"(fig)\", \"grape\", \"(kiwi)\", \"lemon\", \"(mango)\"]\n        }\n        self.file_paths = {}\n        # Write test data to CSV files\n        for file_name, data in test_files.items():\n            file_path = os.path.join(self.test_data_dir, file_name)\n            with open(file_path, \"w\", newline='') as file:\n                writer = csv.writer(file)\n                for item in data:\n                    writer.writerow([item])\n            self.file_paths[file_name] = file_path\n    def tearDown(self):\n        shutil.rmtree(self.test_data_dir)\n    def test_case_1(self):\n        result = task_func(self.file_paths[\"test1.csv\"])\n        expected = {'a': 4, ' ': 3, 'b': 2, ' (': 4, 'abc': 2, ') ': 3, 'def': 1, 'ghi': 1, 'c': 1, ')': 1}\n        self.assertEqual(result, expected, f\"Expected {expected} but got {result}\")\n    def test_case_2(self):\n        result = task_func(self.file_paths[\"test2.csv\"])\n        expected = {'x': 2, ' ': 2, 'y': 2, ' (': 3, 'xyz': 2, ') ': 2, 'uvw': 1, 'z': 1, 'rst': 1, ') (': 1, ')': 1}\n        self.assertEqual(result, expected, f\"Expected {expected} but got {result}\")\n    def test_case_3(self):\n        result = task_func(self.file_paths[\"test3.csv\"])\n        expected = {'1': 1, ' ': 2, '2': 2, ' (': 3, '345': 1, ') (': 1, '678': 1, ') ': 2, '3': 1, '901': 1, '4': 1, '234': 1, ')': 1}\n        self.assertEqual(result, expected, f\"Expected {expected} but got {result}\")\n    def test_case_4(self):\n        result = task_func(self.file_paths[\"test4.csv\"])\n        expected = {'@ # ($%^) & * (*)_+ @ (#&)': 1}\n        self.assertEqual(result, expected, f\"Expected {expected} but got {result}\")\n    def test_case_5(self):\n        result = task_func(self.file_paths[\"test5.csv\"])\n        expected = {'apple': 1, ' ': 1, 'banana': 1, ' (': 4, 'cherry': 1, ') ': 3, 'date': 1, 'fig': 1, 'grape': 1, 'kiwi': 1, 'lemon': 1, 'mango': 1, ')': 1}\n        self.assertEqual(result, expected, f\"Expected {expected} but got {result}\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a Flask application with a RESTful API endpoint. The endpoint, when accessed, fetches data from an external API and returns the response as JSON. It is configured to use a specified templates folder, which must be provided when calling this function. The URL for the external API must also be provided when initializing the app.\nThe function should output with:\n    app (Flask): A Flask application instance with a configured RESTful API endpoint.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n```",
        "gt": "from flask import Flask\nfrom flask_restful import Resource, Api\nimport requests\ndef task_func(api_url, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    api = Api(app)\n\n    class DataResource(Resource):\n        def get(self):\n            response = requests.get(api_url)\n            data = response.json()\n            return data\n\n    api.add_resource(DataResource, '/data')\n\n    return app",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom flask import Flask\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test variables.\"\"\"\n        self.api_url = 'https://api.example.com/data'\n        self.template_folder = 'templates'\n    def test_app_instance(self):\n        \"\"\"Test if the function returns a Flask app instance.\"\"\"\n        app = task_func(self.api_url, self.template_folder)\n        self.assertIsInstance(app, Flask)\n    def test_api_endpoint_configuration(self):\n        \"\"\"Test if the API endpoint '/data' is configured correctly.\"\"\"\n        app = task_func(self.api_url, self.template_folder)\n        with app.test_request_context('/data'):\n            self.assertTrue('/data' in [str(route) for route in app.url_map.iter_rules()])\n    @patch('requests.get')\n    def test_data_endpoint_response(self, mock_get):\n        \"\"\"Test if the data endpoint returns expected JSON data.\"\"\"\n        mock_get.return_value.json.return_value = {'test': 'value'}\n        app = task_func(self.api_url, self.template_folder)\n        client = app.test_client()\n        response = client.get('/data')\n        self.assertEqual(response.json, {'test': 'value'})\n    @patch('requests.get')\n    def test_external_api_call(self, mock_get):\n        \"\"\"Test if the external API is called with the correct URL.\"\"\"\n        mock_get.return_value.status_code = 200  # Assume that the API call is successful\n        mock_get.return_value.json.return_value = {'test': 'value'}  # Ensure this returns a serializable dictionary\n        app = task_func(self.api_url, self.template_folder)\n        client = app.test_client()\n        client.get('/data')\n        mock_get.assert_called_once_with(self.api_url)\n    @patch('requests.get')\n    def test_api_endpoint_status_code(self, mock_get):\n        \"\"\"Test if the API endpoint returns the correct status code when accessed.\"\"\"\n        mock_get.return_value.status_code = 200  # Mock the status code as 200\n        mock_get.return_value.json.return_value = {'data': 'example'}\n        \n        app = task_func(self.api_url, self.template_folder)\n        client = app.test_client()\n        response = client.get('/data')\n        self.assertEqual(response.status_code, 200)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate and return the total and average counts for each type of fruit. This function takes a list of tuples, each containing a fruit name and its count, then calculates the total count and the average count for each type of fruit. The results are returned as a pandas DataFrame with each row representing a different fruit. If fruit_data is an empty list, an empty dataFrame is returned. >>> fruit = [('apple', 1), ('orange', 25), ('apple', 111)] >>> df = task_func(fruit) >>> df.sort_index(inplace=True) >>> print(df) Total Count  Average Count apple           112           56.0 orange           25           25.0\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: 'Total Count' and 'Average Count'.\n    Each row's index is the fruit name.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(fruit_data):\n\n    if len(fruit_data) == 0:\n        return pd.DataFrame()\n\n    # Unpacking the fruit names and counts separately\n    fruits, counts = zip(*fruit_data)\n    fruits = unique_values = list(set(fruits))\n    # Calculating total counts\n    total_counts = {fruit: np.sum([count for fruit_, count in fruit_data if fruit_ == fruit])\n                  for fruit in fruits}\n    # Calculating average counts\n    avg_counts = {fruit: np.mean([count for fruit_, count in fruit_data if fruit_ == fruit])\n                  for fruit in fruits}\n\n    # Creating a DataFrame to hold the report\n    report_df = pd.DataFrame(list(zip(total_counts.values(), avg_counts.values())),\n                             index=fruits,\n                             columns=['Total Count', 'Average Count'])\n\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    test_data_sets = [\n        [('vote', 19), ('those', 15), ('recent', 4), ('manage', 12), ('again', 13), ('box', 16), ('box', 16), ('box', 16)],\n        [('experience', 14), ('interesting', 8), ('firm', 13), ('enjoy', 19), ('area', 3), ('what', 12), ('along', 1)],\n        [('our', 11), ('then', 2), ('imagine', 6), ('heavy', 17), ('low', 6), ('site', 12), ('nearly', 3), ('organization', 6), ('me', 14), ('eat', 17)],\n        [('involve', 2), ('money', 11), ('use', 15), ('fish', 19), ('boy', 3), ('both', 10)], [('take', 16), ('activity', 12), ('tend', 10), ('take', 2)]\n    ]\n    def test_empty(self):\n        report = task_func([])\n        self.assertTrue(report.empty)\n    def test_case_1(self):\n        # Using the first set of test data\n        report = task_func(self.test_data_sets[0])\n        expected = pd.DataFrame(\n            {\n            'Total Count': {'vote': 19,\n            'those': 15,\n            'recent': 4,\n            'manage': 12,\n            'again': 13,\n            'box': 48},\n            'Average Count': {'vote': 19.0,\n            'those': 15.0,\n            'recent': 4.0,\n            'manage': 12.0,\n            'again': 13.0,\n            'box': 16.0}\n            }\n        )\n        # The report should be a DataFrame with the correct columns and index\n        report.sort_index(inplace=True)\n        expected.sort_index(inplace=True)\n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertListEqual(list(report.columns), ['Total Count', 'Average Count'])\n        pd.testing.assert_frame_equal(report, expected, check_dtype=False)\n    def test_case_2(self):\n        # Using the second set of test data\n        report = task_func(self.test_data_sets[1])\n        expected = pd.DataFrame(\n            {'Total Count': {'experience': 14.0,\n                'interesting': 8.0,\n                'firm': 13.0,\n                'enjoy': 19.0,\n                'area': 3.0,\n                'what': 12.0,\n                'along': 1.0},\n                'Average Count': {'experience': 14.0,\n                'interesting': 8.0,\n                'firm': 13.0,\n                'enjoy': 19.0,\n                'area': 3.0,\n                'what': 12.0,\n                'along': 1.0}}\n        )\n        report.sort_index(inplace=True)\n        expected.sort_index(inplace=True)\n        # The report should be a DataFrame with the correct columns and index\n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertListEqual(list(report.columns), ['Total Count', 'Average Count'])\n        pd.testing.assert_frame_equal(report, expected, check_dtype=False)\n    def test_case_3(self):\n        # Using the third set of test data\n        report = task_func(self.test_data_sets[2])\n        expected = pd.DataFrame(\n            {'Total Count': {'our': 11.0,\n            'then': 2.0,\n            'imagine': 6.0,\n            'heavy': 17.0,\n            'low': 6.0,\n            'site': 12.0,\n            'nearly': 3.0,\n            'organization': 6.0,\n            'me': 14.0,\n            'eat': 17.0},\n            'Average Count': {'our': 11.0,\n            'then': 2.0,\n            'imagine': 6.0,\n            'heavy': 17.0,\n            'low': 6.0,\n            'site': 12.0,\n            'nearly': 3.0,\n            'organization': 6.0,\n            'me': 14.0,\n            'eat': 17.0}}\n        )\n        report.sort_index(inplace=True)\n        expected.sort_index(inplace=True)\n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertListEqual(list(report.columns), ['Total Count', 'Average Count'])\n        pd.testing.assert_frame_equal(report, expected, check_dtype=False)\n    def test_case_4(self):\n        # Using the fourth set of test data\n        report = task_func(self.test_data_sets[3])\n        expected = pd.DataFrame(\n            {'Total Count': {'involve': 2.0,\n            'money': 11.0,\n            'use': 15.0,\n            'fish': 19.0,\n            'boy': 3.0,\n            'both': 10.0},\n            'Average Count': {'involve': 2.0,\n            'money': 11.0,\n            'use': 15.0,\n            'fish': 19.0,\n            'boy': 3.0,\n            'both': 10.0}}\n        )\n        report.sort_index(inplace=True)\n        expected.sort_index(inplace=True)\n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertListEqual(list(report.columns), ['Total Count', 'Average Count'])\n        pd.testing.assert_frame_equal(report, expected, check_dtype=False)\n    def test_case_5(self):\n        # Using the fifth set of test data\n        report = task_func(self.test_data_sets[4])\n        expected = pd.DataFrame(\n            {'Total Count': {'take': 18.0, 'activity': 12.0, 'tend': 10.0},\n            'Average Count': {'take': 9.0, 'activity': 12.0, 'tend': 10.0}}\n        )\n        report.sort_index(inplace=True)\n        expected.sort_index(inplace=True)\n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertListEqual(list(report.columns), ['Total Count', 'Average Count'])\n        pd.testing.assert_frame_equal(report, expected, check_dtype=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Encodes a dict of list as a Base64 string. The dict is first converted to a Pandas DataFrame. Then convert the data franme to CSV format and encoded to bytes, finally encoded it to a Base64 string.\nThe function should output with:\n    str: The Base64 encoded string of the DataFrame's CSV representation.\nYou should write self-contained code starting with:\n```\nimport base64\nimport pandas as pd\ndef task_func(df):\n```",
        "gt": "import base64\nimport pandas as pd\ndef task_func(df):\n    df = pd.DataFrame(df)\n    csv = df.to_csv(index=False)\n    csv_bytes = csv.encode('utf-8')\n    base64_bytes = base64.b64encode(csv_bytes)\n    base64_string = base64_bytes.decode('utf-8')\n\n    return base64_string",
        "test": "import unittest\nfrom io import StringIO\nclass TestCases(unittest.TestCase):\n    def test_encode_basic_dataframe(self):\n        df = {'A': [1, 2, 3], 'B': [4, 5, 6]}\n        encoded_df = task_func(df)\n        decoded_csv = pd.read_csv(StringIO(base64.b64decode(encoded_df.encode('utf-8')).decode('utf-8')))\n        pd.testing.assert_frame_equal(pd.DataFrame(df), decoded_csv)\n    def test_encode_with_different_columns(self):\n        df = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}\n        encoded_df = task_func(df)\n        decoded_csv = pd.read_csv(StringIO(base64.b64decode(encoded_df.encode('utf-8')).decode('utf-8')))\n        pd.testing.assert_frame_equal(pd.DataFrame(df), decoded_csv)\n    def test_encode_empty_dataframe(self):\n        df = {'X': [], 'Y': []}\n        encoded_df = task_func(df)\n        decoded_csv = pd.read_csv(StringIO(base64.b64decode(encoded_df.encode('utf-8')).decode('utf-8')))\n        pd.testing.assert_frame_equal(pd.DataFrame(df), decoded_csv, check_dtype=False, check_index_type=False)\n    def test_encode_with_specific_values(self):\n        df = {'ID': [101, 102, 103], 'Score': [85, 90, 88]}\n        encoded_df = task_func(df)\n        decoded_csv = pd.read_csv(StringIO(base64.b64decode(encoded_df.encode('utf-8')).decode('utf-8')))\n        pd.testing.assert_frame_equal(pd.DataFrame(df), decoded_csv)\n    def test_encode_with_string_values(self):\n        df = {'City': ['NY', 'LA'], 'Population': [8000000, 4000000]}\n        encoded_df = task_func(df)\n        decoded_csv = pd.read_csv(StringIO(base64.b64decode(encoded_df.encode('utf-8')).decode('utf-8')))\n        pd.testing.assert_frame_equal(pd.DataFrame(df), decoded_csv)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates and returns a dictionary with the mode and entropy of a numpy array constructed from a given list. The function first converts the list into a numpy array, then calculates the mode and the entropy (base 2) of this array, and finally adds them to the initial dictionary with the keys 'mode' and 'entropy'.\nThe function should raise the exception for: ValueError if the input list `numbers` is empty\nThe function should output with:\n    dict: A dictionary containing the 'mode' and 'entropy' of the array with their respective calculated values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n```",
        "gt": "import numpy as np\nfrom scipy.stats import mode\nfrom scipy.stats import entropy\ndef task_func(numbers):\n    if len(numbers) == 0:\n        raise ValueError\n    my_dict = {'array': np.array(numbers)}\n    mode_value = mode(my_dict['array']).mode[0]\n    ent = entropy(my_dict['array'], base=2)\n    my_dict['mode'] = mode_value\n    my_dict['entropy'] = ent\n    return my_dict",
        "test": "import unittest\nimport numpy as np\nfrom scipy.stats import mode, entropy\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test that the function returns a dictionary.\"\"\"\n        result = task_func([1, 2, 3])\n        self.assertIsInstance(result, dict)\n    def test_mode_calculation(self):\n        \"\"\"Test that the mode is correctly calculated.\"\"\"\n        result = task_func([1, 2, 2, 3])\n        self.assertEqual(result['mode'], 2)\n    def test_entropy_calculation(self):\n        \"\"\"Test that the entropy is correctly calculated.\"\"\"\n        test_array = np.array([1, 2, 2, 3])\n        expected_entropy = entropy(test_array, base=2)\n        result = task_func([1, 2, 2, 3])\n        self.assertAlmostEqual(result['entropy'], expected_entropy)\n    def test_multiple_modes(self):\n        \"\"\"Test that in case of multiple modes, the first mode encountered is returned.\"\"\"\n        result = task_func([1, 1, 2, 2, 3])\n        self.assertEqual(result['mode'], 1)\n    def test_dictionary_keys(self):\n        \"\"\"Test that the returned dictionary contains the correct keys.\"\"\"\n        result = task_func([1, 1, 2, 2, 3])\n        self.assertIn('mode', result)\n        self.assertIn('entropy', result)\n    def test_empty_input_list(self):\n        \"\"\"Test that the function raises a ValueError when the input list is empty.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([])\n    def test_single_element_list(self):\n        \"\"\"Test that the function correctly handles a list with a single element.\"\"\"\n        result = task_func([42])\n        self.assertEqual(result['mode'], 42)\n        self.assertEqual(result['entropy'], 0.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame from a list of pairs and visualize the data using a bar chart. - The title of the barplot should be set to 'Category vs Value'`.\nThe function should output with:\n    tuple:\n    DataFrame: A pandas DataFrame with columns 'Category' and 'Value'.\n    Axes: A matplotlib Axes displaying a bar chart of categories vs. values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(list_of_pairs):\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x=\"Category\", y=\"Value\", data=df)\n    plt.title(\"Category vs Value\")\n    ax = plt.gca()\n    return df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @staticmethod\n    def is_bar(ax, expected_values, expected_categories):\n        extracted_values = [\n            bar.get_height() for bar in ax.patches\n        ]  # extract bar height\n        extracted_categories = [\n            tick.get_text() for tick in ax.get_xticklabels()\n        ]  # extract category label\n        for actual_value, expected_value in zip(extracted_values, expected_values):\n            assert (\n                actual_value == expected_value\n            ), f\"Expected value '{expected_value}', but got '{actual_value}'\"\n        for actual_category, expected_category in zip(\n            extracted_categories, expected_categories\n        ):\n            assert (\n                actual_category == expected_category\n            ), f\"Expected category '{expected_category}', but got '{actual_category}'\"\n    def test_case_1(self):\n        df, ax = task_func(\n            [\n                (\"Allison\", 49),\n                (\"Cassidy\", 72),\n                (\"Jamie\", -74),\n                (\"Randy\", -25),\n                (\"Joshua\", -85),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(), [\"Allison\", \"Cassidy\", \"Jamie\", \"Randy\", \"Joshua\"]\n        )\n        self.assertEqual(df[\"Value\"].tolist(), [49, 72, -74, -25, -85])\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n        self.is_bar(\n            ax=ax,\n            expected_categories=[\"Allison\", \"Cassidy\", \"Jamie\", \"Randy\", \"Joshua\"],\n            expected_values=[49, 72, -74, -25, -85],\n        )\n    def test_case_2(self):\n        df, ax = task_func(\n            [\n                (\"Jonathan\", 36),\n                (\"Maureen\", 47),\n                (\"Zachary\", -32),\n                (\"Kristen\", 39),\n                (\"Donna\", -23),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(),\n            [\"Jonathan\", \"Maureen\", \"Zachary\", \"Kristen\", \"Donna\"],\n        )\n        self.assertEqual(df[\"Value\"].tolist(), [36, 47, -32, 39, -23])\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n    def test_case_3(self):\n        df, ax = task_func(\n            [\n                (\"Eric\", -91),\n                (\"Jennifer\", 52),\n                (\"James\", -79),\n                (\"Matthew\", 25),\n                (\"Veronica\", 2),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(),\n            [\"Eric\", \"Jennifer\", \"James\", \"Matthew\", \"Veronica\"],\n        )\n        self.assertEqual(df[\"Value\"].tolist(), [-91, 52, -79, 25, 2])\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n    def test_case_4(self):\n        df, ax = task_func(\n            [\n                (\"Caitlin\", -82),\n                (\"Austin\", 64),\n                (\"Scott\", -11),\n                (\"Brian\", -16),\n                (\"Amy\", 100),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(), [\"Caitlin\", \"Austin\", \"Scott\", \"Brian\", \"Amy\"]\n        )\n        self.assertEqual(df[\"Value\"].tolist(), [-82, 64, -11, -16, 100])\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n    def test_case_5(self):\n        df, ax = task_func(\n            [\n                (\"Justin\", 96),\n                (\"Ashley\", 33),\n                (\"Daniel\", 41),\n                (\"Connie\", 26),\n                (\"Tracy\", 10),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(), [\"Justin\", \"Ashley\", \"Daniel\", \"Connie\", \"Tracy\"]\n        )\n        self.assertEqual(df[\"Value\"].tolist(), [96, 33, 41, 26, 10])\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n    def test_case_6(self):\n        df, ax = task_func(\n            [\n                (\"Vanessa\", -115),\n                (\"Roberto\", -267),\n                (\"Barbara\", 592),\n                (\"Amanda\", 472),\n                (\"Rita\", -727),\n                (\"Christopher\", 789),\n                (\"Brandon\", 457),\n                (\"Kylie\", -575),\n                (\"Christina\", 405),\n                (\"Dylan\", 265),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(),\n            [\n                \"Vanessa\",\n                \"Roberto\",\n                \"Barbara\",\n                \"Amanda\",\n                \"Rita\",\n                \"Christopher\",\n                \"Brandon\",\n                \"Kylie\",\n                \"Christina\",\n                \"Dylan\",\n            ],\n        )\n        self.assertEqual(\n            df[\"Value\"].tolist(), [-115, -267, 592, 472, -727, 789, 457, -575, 405, 265]\n        )\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n    def test_case_7(self):\n        df, ax = task_func(\n            [\n                (\"Kevin\", -896),\n                (\"Kirk\", 718),\n                (\"Cathy\", -328),\n                (\"Ryan\", -605),\n                (\"Peter\", -958),\n                (\"Brenda\", -266),\n                (\"Laura\", 117),\n                (\"Todd\", 807),\n                (\"Ann\", 981),\n                (\"Kimberly\", -70),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(),\n            [\n                \"Kevin\",\n                \"Kirk\",\n                \"Cathy\",\n                \"Ryan\",\n                \"Peter\",\n                \"Brenda\",\n                \"Laura\",\n                \"Todd\",\n                \"Ann\",\n                \"Kimberly\",\n            ],\n        )\n        self.assertEqual(\n            df[\"Value\"].tolist(),\n            [-896, 718, -328, -605, -958, -266, 117, 807, 981, -70],\n        )\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")\n    def test_case_8(self):\n        df, ax = task_func(\n            [\n                (\"Samuel\", -366),\n                (\"Kathy\", -267),\n                (\"Michael\", -379),\n                (\"Teresa\", 926),\n                (\"Stephanie\", -73),\n                (\"Joy\", -892),\n                (\"Robert\", 988),\n                (\"Jenna\", -362),\n                (\"Jodi\", 816),\n                (\"Carlos\", 981),\n            ]\n        )\n        # Testing the DataFrame\n        self.assertEqual(\n            df[\"Category\"].tolist(),\n            [\n                \"Samuel\",\n                \"Kathy\",\n                \"Michael\",\n                \"Teresa\",\n                \"Stephanie\",\n                \"Joy\",\n                \"Robert\",\n                \"Jenna\",\n                \"Jodi\",\n                \"Carlos\",\n            ],\n        )\n        self.assertEqual(\n            df[\"Value\"].tolist(),\n            [-366, -267, -379, 926, -73, -892, 988, -362, 816, 981],\n        )\n        # Testing the plot title\n        self.assertEqual(ax.get_title(), \"Category vs Value\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the number of non-stop words in a given text.\nThe function should output with:\n    dict: A dictionary with the words (as keys) and their counts (as values).\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n```",
        "gt": "import re\nfrom collections import Counter\nfrom nltk.corpus import stopwords\ndef task_func(text: str) -> dict:\n    words = re.findall(r'\\b\\w+\\b', text)\n    non_stopwords = [word for word in words if word.lower() not in set(stopwords.words('english'))]\n    count = dict(Counter(non_stopwords))\n\n    return count",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Simple sentence with some stopwords\n        input_text = \"This is a simple test.\"\n        expected_output = {'simple': 1, 'test': 1}\n        self.assertDictEqual(task_func(input_text), expected_output)\n    def test_case_2(self):\n        # Longer sentence with repeated words\n        input_text = \"Some words are repeated more than once. Repeated words are common.\"\n        expected_output = {'words': 2, 'repeated': 1, 'Repeated': 1, 'common': 1}\n        self.assertDictEqual(task_func(input_text), expected_output)\n        \n    def test_case_3(self):\n        # Text with no stopwords\n        input_text = \"Python programming language.\"\n        expected_output = {'Python': 1, 'programming': 1, 'language': 1}\n        self.assertDictEqual(task_func(input_text), expected_output)\n        \n    def test_case_4(self):\n        # Text with all stopwords\n        input_text = \"This is an and the with\"\n        expected_output = {}\n        self.assertDictEqual(task_func(input_text), expected_output)\n        \n    def test_case_5(self):\n        # Empty text\n        input_text = \"\"\n        expected_output = {}\n        self.assertDictEqual(task_func(input_text), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Modifies a dictionary, sorts it by the frequency of its values, and backs up files from a source directory. This function performs three main tasks: 1. Updates the input dictionary by adding a key 'a' with the value 1. 2. Sorts the dictionary by the frequency of its values in descending order. 3. Backs up all files from the specified source directory to a backup directory. >>> data_dict = {'avc': '1', 'hello': 'world', 'test': 'world', 'cat': 'meow'} >>> updated_dict, value_frequencies, backup_status = task_func(data_dict, 'to_backup', 'backup') >>> print(updated_dict) {'a': 1, 'avc': '1', 'hello': 'world', 'test': 'world', 'cat': 'meow'} >>> print(value_frequencies) [('avc', 1), ('world', 2), ('meow', 1), (1, 2)] >>> print(backup_status) True\nThe function should output with:\n    tuple:\n    dict: The modified dictionary with the added key and value.\n    list: A list of tuples representing the sorted items of the dictionary by their frequency.\n    bool: A boolean indicating whether the backup was successful (True) or not (False).\nYou should write self-contained code starting with:\n```\nimport collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n```",
        "gt": "import collections\nimport operator\nimport os\nimport shutil\ndef task_func(data_dict, source_directory, backup_directory):\n    # Add the key 'a' with value 1\n    data_dict.update({'a': 1})\n\n    # Count the frequency of the values\n    counter = collections.Counter(data_dict.values())\n\n    # Sort the dictionary by the frequency\n    sorted_dict = sorted(counter.items(), key=operator.itemgetter(1), reverse=True)\n\n    # Backup files\n    backup_status = False\n    if os.path.isdir(source_directory):\n        shutil.copytree(source_directory, backup_directory, dirs_exist_ok=True)\n        backup_status = True\n\n    return data_dict, sorted_dict, backup_status",
        "test": "import unittest\nimport os\nimport shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    source_directory = tempfile.mkdtemp()\n    backup_directory = tempfile.mkdtemp()\n    def setUp(self):\n        # Cleanup backup directory before each test\n        if os.path.exists(self.backup_directory):\n            shutil.rmtree(self.backup_directory)\n        os.makedirs(self.backup_directory)\n        if os.path.exists(self.source_directory):\n            shutil.rmtree(self.source_directory)\n        os.makedirs(self.source_directory)\n        # creatre source files\n        with open(os.path.join(self.backup_directory, 'backup.txt'), 'w') as file:\n            file.write('This file should be backuped.')\n    def test_normal_operation(self):\n        data_dict = {'key1': 'value1', 'key2': 'value2'}\n        updated_dict, value_frequencies, backup_status = task_func(data_dict, self.source_directory, self.backup_directory)\n        # Assertions for dictionary operations\n        self.assertIn('a', updated_dict)  # Checking the new key insertion\n        self.assertEqual(updated_dict['a'], 1)  # Checking the value of the new key\n        expected_dict = {'a': 1, 'key1': 'value1', 'key2': 'value2'}\n        self.assertEqual(updated_dict, expected_dict)\n        self.assertEqual(value_frequencies, [('value1', 1), ('value2', 1), (1, 1)])\n        # Assertion for file backup operation\n        self.assertTrue(backup_status)  # Backup should be successful\n        self.assertTrue(['backup.txt'])  # Backup directory should not be empty\n        with open(os.path.join(self.backup_directory, 'backup.txt')) as file:\n            txt = file.read()\n            self.assertEqual(txt, 'This file should be backuped.')\n    def test_empty_dictionary(self):\n        data_dict = {}\n        updated_dict, value_frequencies, backup_status = task_func(data_dict, self.source_directory, self.backup_directory)\n        self.assertEqual(updated_dict, {'a': 1})\n        self.assertTrue(['backup.txt'])  # Backup directory should not be empty\n        with open(os.path.join(self.backup_directory, 'backup.txt')) as file:\n            txt = file.read()\n            self.assertEqual(txt, 'This file should be backuped.')\n    def test_non_existent_source_directory(self):\n        non_existent_directory = \"/path/to/non/existent/directory\"\n        data_dict = {'key': 'value'}\n        # Expecting the backup to fail because the source directory does not exist\n        _, _, backup_status = task_func(data_dict, non_existent_directory, self.backup_directory)\n        self.assertFalse(backup_status)\n    def test_pre_existing_files_in_backup(self):\n        # Create a file in the backup directory\n        with open(os.path.join(self.backup_directory, 'pre_existing.txt'), 'w') as file:\n            file.write('This file existed before backup operation.')\n        data_dict = {'key': 'value'}\n        _, _, backup_status = task_func(data_dict, self.source_directory, self.backup_directory)\n        # Backup operation should still be successful\n        self.assertTrue(backup_status)\n        self.assertIn('pre_existing.txt', os.listdir(self.backup_directory))  # The pre-existing file should still be there\n    def test_non_string_dictionary(self):\n        data_dict = {1: 'one', 2: 'two', 3.5: 'three point five'}\n        updated_dict, _, backup_status = task_func(data_dict, self.source_directory, self.backup_directory)\n        expected_dict = {1: 'one', 2: 'two', 3.5: 'three point five', 'a': 1}\n        self.assertEqual(updated_dict, expected_dict)\n        # Backup checks\n        self.assertTrue(['backup.txt'])  # Backup directory should not be empty\n        with open(os.path.join(self.backup_directory, 'backup.txt')) as file:\n            txt = file.read()\n            self.assertEqual(txt, 'This file should be backuped.')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots a series of lines for each list in `list_of_lists`. Each line is plotted with shuffled y-values and sequential x-values starting from 1. The function shuffles the y-values of each inner list before plotting. Each line is plotted with a different color from a predetermined set of colors. The function cycles through these colors for each inner list.\nNote that: If an inner list is empty, it will be skipped and no line will be plotted for it. The colors are reused cyclically if there are more inner lists than colors available. The shuffling of y-values is random and different each time the function is called, unless a random seed is set externally. The function uses a default set of colors defined in the COLORS constant.\nThe function should output with:\n    tuple: A tuple containing the figure and axes objects of the plotted graph.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n```",
        "gt": "import matplotlib.pyplot as plt\nfrom itertools import cycle\nimport numpy as np\nfrom random import shuffle\nCOLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\ndef task_func(list_of_lists):\n    fig, ax = plt.subplots()\n    color_cycle = cycle(COLORS)\n\n    for list_ in list_of_lists:\n        y_values = np.arange(1, len(list_) + 1)\n        shuffle(y_values)\n        ax.plot(y_values, next(color_cycle))\n\n    return fig, ax",
        "test": "import unittest\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\nimport matplotlib.colors as mcolors\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def test_return_types(self):\n        \"\"\"Check that the function returns the correct types.\"\"\"\n        random.seed(0)\n        fig, ax = task_func([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"]])\n        self.assertIsInstance(\n            fig,\n            Figure,\n            \"The first return value should be an instance of matplotlib.figure.Figure.\",\n        )\n        self.assertIsInstance(\n            ax,\n            Axes,\n            \"The second return value should be an instance of matplotlib.axes._axes.Axes.\",\n        )\n    def test_number_of_lines(self):\n        \"\"\"Check that the correct number of lines are plotted.\"\"\"\n        random.seed(1)\n        _, ax = task_func([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"]])\n        self.assertEqual(\n            len(ax.lines), 2, \"There should be 2 lines plotted for 2 lists.\"\n        )\n        _, ax = task_func([[\"x\", \"y\", \"z\"]])\n        self.assertEqual(len(ax.lines), 1, \"There should be 1 line plotted for 1 list.\")\n    def test_color_cycle(self):\n        \"\"\"Check that the colors of the plotted lines follow the specified cycle.\"\"\"\n        random.seed(2)\n        _, ax = task_func([[\"x\"], [\"y\"], [\"z\"], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"]])\n        expected_colors = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\", \"b\"]\n        # Convert color codes to RGBA format\n        expected_colors_rgba = [mcolors.to_rgba(c) for c in expected_colors]\n        actual_colors_rgba = [line.get_color() for line in ax.lines]\n        self.assertEqual(\n            actual_colors_rgba,\n            expected_colors_rgba,\n            \"The colors of the plotted lines should follow the specified cycle.\",\n        )\n    def test_y_values(self):\n        \"\"\"Check that the y-values are shuffled.\"\"\"\n        random.seed(3)\n        _, ax = task_func([[\"x\", \"y\", \"z\"]])\n        y_data = ax.lines[0].get_ydata()\n        self.assertTrue(\n            set(y_data) == {1, 2, 3},\n            \"The y-values should be shuffled numbers from the range [1, len(list)].\",\n        )\n    def test_empty_input(self):\n        \"\"\"Check that no lines are plotted for an empty input list.\"\"\"\n        random.seed(4)\n        _, ax = task_func([])\n        self.assertEqual(\n            len(ax.lines),\n            0,\n            \"There should be no lines plotted for an empty input list.\",\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a histogram of samples drawn from a normal distribution and overlays the probability density function (PDF) of the normal distribution. The plot is titled with the fit results, showing the mean and standard deviation used in the generation. The function returns both the plot and the samples generated.\nNote that: Notes: The plot title is \"Fit results: mean = %.2f, std = %.2f\". This title format on the plot displays the mean and standard deviation of the normal distribution used to generate the histogram. The values are presented in a format where %.2f is replaced by the floating-point numbers corresponding to `mean` and `std_dev` respectively, rounded to two decimal places. The number of bins is set to 30 The actual values in the array depend on the random seed and will vary each time the function is called.\nThe function should output with:\n    tuple: A tuple containing:\n    matplotlib.figure.Figure: The figure object for the plot.\n    numpy.ndarray: An array of samples drawn from the normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n```",
        "gt": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, num_samples):\n    samples = np.random.normal(mean, std_dev, num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mean, std_dev)\n    ax.plot(x, p, 'k', linewidth=2)\n    title = \"Fit results: mean = %.2f,  std = %.2f\" % (mean, std_dev)\n    ax.set_title(title)\n\n    return samples, fig",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\" Set up for each test, fixing the random seed for reproducibility. \"\"\"\n        np.random.seed(0)\n    def test_samples_length(self):\n        \"\"\" Test if the number of generated samples is correct. \"\"\"\n        samples, _ = task_func(0, 1, 1000)\n        self.assertEqual(len(samples), 1000)\n    def test_samples_type(self):\n        \"\"\" Test the type of the samples. \"\"\"\n        samples, _ = task_func(0, 1, 1000)\n        self.assertIsInstance(samples, np.ndarray)\n    def test_mean_approximation(self):\n        \"\"\" Test if the mean of the samples is approximately equal to the specified mean. \"\"\"\n        samples, _ = task_func(0, 1, 1000)\n        self.assertAlmostEqual(np.mean(samples), 0, places=1)\n    def test_std_dev_approximation(self):\n        \"\"\" Test if the standard deviation of the samples is approximately equal to the specified standard deviation. \"\"\"\n        samples, _ = task_func(0, 1, 1000)\n        self.assertAlmostEqual(np.std(samples), 1, places=1)\n    def test_plot_title(self):\n        \"\"\" Test if the plot title correctly reflects the mean and standard deviation. \"\"\"\n        _, fig = task_func(0, 1, 1000)\n        self.assertIn(\"mean = 0.00,  std = 1.00\", fig.axes[0].get_title())\n    def test_histogram_bins(self):\n        \"\"\" Test if the histogram displays the correct number of bins. \"\"\"\n        _, fig = task_func(0, 1, 1000)\n        self.assertEqual(len(fig.axes[0].patches), 30)  # Check for 30 bins, as defined in the function\n    def test_pdf_overlay(self):\n        \"\"\" Test if the probability density function (PDF) is correctly overlayed on the histogram. \"\"\"\n        _, fig = task_func(0, 1, 1000)\n        lines = fig.axes[0].get_lines()\n        self.assertGreater(len(lines), 0)  # Ensure that at l\n    def test_pdf_overlay_accuracy(self):\n        \"\"\" Test if the PDF overlay accurately represents the normal distribution. \"\"\"\n        mean, std_dev, num_samples = 0, 1, 1000\n        _, fig = task_func(mean, std_dev, num_samples)\n        ax = fig.axes[0]\n        line = ax.get_lines()[0]  # Assuming the first line is the PDF\n        x, y = line.get_data()\n        expected_y = norm.pdf(x, mean, std_dev)\n        np.testing.assert_array_almost_equal(y, expected_y, decimal=2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Divide the given DataFrame into a training set and a test set (70%: 30% split), separate the \"target\" column and return the four resulting DataFrames.\nThe function should output with:\n    tuple: A tuple containing four DataFrames: X_train, X_test, y_train, y_test.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\ndef task_func(df):\n    X = pd.DataFrame.drop(df, 'target', axis=1)\n    y = pd.DataFrame(df['target'])\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n    return X_train, X_test, y_train, y_test",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 5)), columns=list('ABCDE'))\n        df['target'] = np.random.randint(0, 2, size=100)\n        X_train, X_test, y_train, y_test = task_func(df)\n        self.assertEqual(X_train.shape, (70, 5))\n        self.assertEqual(X_test.shape, (30, 5))\n        self.assertEqual(y_train.shape[0], 70)\n        self.assertEqual(y_test.shape[0], 30)\n    def test_case_2(self):\n        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'target': [0, 1, 0]})\n        X_train, X_test, y_train, y_test = task_func(df)\n        self.assertEqual(X_train.shape, (2, 2))\n        self.assertEqual(X_test.shape, (1, 2))\n        self.assertEqual(y_train.shape[0], 2)\n        self.assertEqual(y_test.shape[0], 1)\n    def test_case_3(self):\n        df = pd.DataFrame({'A': [0, 0, 0], 'B': [0, 0, 0], 'target': [0, 0, 0]})\n        X_train, X_test, y_train, y_test = task_func(df)\n        self.assertEqual(X_train.shape, (2, 2))\n        self.assertEqual(X_test.shape, (1, 2))\n        self.assertEqual(y_train.shape[0], 2)\n        self.assertEqual(y_test.shape[0], 1)\n        self.assertEqual(X_train.iloc[0, 0], 0)\n        self.assertEqual(X_train.iloc[0, 1], 0)\n        self.assertEqual(X_train.iloc[1, 0], 0)\n        self.assertEqual(X_train.iloc[1, 1], 0)\n        self.assertEqual(X_test.iloc[0, 0], 0)\n        self.assertEqual(X_test.iloc[0, 1], 0)\n        if isinstance(y_train, pd.DataFrame):\n            self.assertEqual(y_train.iloc[0, 0], 0)\n            self.assertEqual(y_train.iloc[1, 0], 0)\n        else:\n            self.assertEqual(y_train.iloc[1], [0])\n            self.assertEqual(y_test.iloc[0], [0])\n    def test_case_4(self):\n        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'target': [1, 1, 1]})\n        X_train, X_test, y_train, y_test = task_func(df)\n        self.assertEqual(X_train.shape, (2, 2))\n        self.assertEqual(X_test.shape, (1, 2))\n        self.assertEqual(y_train.shape[0], 2)\n        self.assertEqual(y_test.shape[0], 1)\n    \n    def test_case_5(self):\n        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'target': [0, 0, 0]})\n        X_train, X_test, y_train, y_test = task_func(df)\n        self.assertEqual(X_train.shape, (2, 2))\n        self.assertEqual(X_test.shape, (1, 2))\n        self.assertEqual(y_train.shape[0], 2)\n        self.assertEqual(y_test.shape[0], 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Decode a raw string from base64, decouple HTML entities, replace multiple spaces with a single space, strip leading and subsequent spaces, and wrap text to a certain line length.\nThe function should output with:\n    wrapped_text (str): The cleaned and formatted string.\nYou should write self-contained code starting with:\n```\nimport base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n```",
        "gt": "import base64\nimport re\nfrom html import unescape\nimport textwrap\ndef task_func(raw_string, line_length):\n\n    # Decode the string from base64\n    decoded_string = base64.b64decode(raw_string).decode('utf-8')\n\n    # Unescape HTML entities\n    unescaped_string = unescape(decoded_string)\n\n    # Replace multiple spaces with a single space and strip leading and trailing spaces\n    cleaned_string = re.sub(' +', ' ', unescaped_string).strip()\n\n    # Wrap the text\n    wrapped_text = textwrap.fill(cleaned_string, line_length)\n\n    return wrapped_text",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func('SGVsbG8sICBXb3JsZCEgICAg', 5), 'Hello\\n, Wor\\nld!')\n    def test_case_2(self):\n        self.assertEqual(task_func('SGVsbG8sICBXb3JsZCEgICAg', 10), 'Hello,\\nWorld!')\n    def test_case_3(self):\n        self.assertEqual(task_func('SGVsbG8sICBXb3JsZCEgICAg', 20), 'Hello, World!')\n    def test_case_4(self):\n        self.assertEqual(task_func('SGVsbG8sICBXb3JsZCEgICAg', 1), 'H\\ne\\nl\\nl\\no\\n,\\nW\\no\\nr\\nl\\nd\\n!')\n    def test_case_5(self):\n        self.assertEqual(task_func('SGVsbG8sICBXb3JsZCEgICAg', 2), 'He\\nll\\no,\\nWo\\nrl\\nd!')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate factorials for a list of numbers in parallel using multiprocessing.\nThe function should raise the exception for: ValueError: If any element in the input list is not an integer or is negative.\nThe function should output with:\n    dict[int, int]: A dictionary with numbers as keys and their factorial as values.\nYou should write self-contained code starting with:\n```\nfrom multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\n    \ndef task_func(numbers: list) -> dict:\n```",
        "gt": "from multiprocessing import Pool\nimport math\ndef calculate_factorial(number: int) -> tuple:\n    return number, math.factorial(number)\n    \ndef task_func(numbers: list) -> dict:\n    # Check input types\n    if not all(isinstance(n, int) and n >= 0 for n in numbers):\n        raise ValueError(\"All elements in the list must be integers\")\n    with Pool() as pool:\n        factorial_dict = dict(pool.starmap(calculate_factorial, [(i,) for i in numbers]))\n    return factorial_dict",
        "test": "import unittest\nimport math\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test that the function returns a dictionary.\"\"\"\n        result = task_func([3, 4, 5])\n        self.assertIsInstance(result, dict)\n    def test_empty_list(self):\n        \"\"\"Test function with an empty list.\"\"\"\n        result = task_func([])\n        self.assertEqual(result, {})\n    def test_single_element(self):\n        \"\"\"Test function with a single-element list.\"\"\"\n        result = task_func([5])\n        self.assertEqual(result, {5: 120})\n    def test_non_integer_input(self):\n        \"\"\"Test function with non-integer input.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([\"a\"])\n    def test_large_numbers(self):\n        \"\"\"Test function with large numbers.\"\"\"\n        result = task_func([10])\n        self.assertEqual(result[10], math.factorial(10))\n    def test_negative_numbers(self):\n        \"\"\"Test function with a negative number.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([-1])  # Assuming we want to enforce non-negative integers only\n    def test_very_large_number(self):\n        \"\"\"Test function with a very large number to check for performance or overflow issues.\"\"\"\n        number = 20  # A reasonable choice to avoid excessive computation time in tests\n        result = task_func([number])\n        self.assertEqual(result[number], math.factorial(number))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a hex string representation into actual bytes and records the frequency of each byte value. The function supports hex strings with or without '\\\\x' prefix.\nThe function should raise the exception for: ValueError: If 'hex_str' is not a valid hex string.\nThe function should output with:\n    tuple: A tuple containing a pandas DataFrame of byte frequencies with columns ['Byte Value', 'Frequency']\n    and a matplotlib Axes object for the plot with 'Byte Value' as the X-axis and 'Frequency' as the Y-axis.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n```",
        "gt": "import binascii\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(hex_str):\n    hex_str_cleaned = hex_str.replace('\\\\x', '')\n    try:\n        bytes_data = binascii.unhexlify(hex_str_cleaned)\n    except binascii.Error:\n        raise ValueError(\"Invalid hex string\")\n\n    byte_values, byte_counts = np.unique(np.frombuffer(bytes_data, dtype=np.uint8), return_counts=True)\n    df = pd.DataFrame({'Byte Value': byte_values, 'Frequency': byte_counts})\n\n    fig, ax = plt.subplots()\n    ax.bar(df['Byte Value'], df['Frequency'])\n    ax.set_xlabel('Byte Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Bytes in Hex String')\n\n    return df, ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_valid_hex_string(self):\n        df, ax = task_func('F3BE8080')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(df), len(set('F3BE8080')) // 2)  # Unique byte values\n        self.assertTrue(all(col in df.columns for col in ['Byte Value', 'Frequency']))\n        df_list = df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(df_list))\n        expect = ['128,2', '190,1', '243,1']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    def test_invalid_hex_string(self):\n        with self.assertRaises(ValueError):\n            task_func('invalid')\n    def test_empty_string(self):\n        df, ax = task_func('')\n        self.assertTrue(df.empty)\n        # Adjusted expectation: ax should not be None, as the plot can still be generated but will be empty\n        self.assertIsInstance(ax, plt.Axes)\n    def test_df_columns(self):\n        df, _ = task_func('F3BE8080')\n        self.assertListEqual(list(df.columns), ['Byte Value', 'Frequency'])\n    def test_alternative_format(self):\n        df, ax = task_func('\\\\xF3\\\\xBE\\\\x80\\\\x80')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIsInstance(ax, plt.Axes)\n        # Correct the expected number of unique bytes\n        self.assertEqual(len(df), 3)  # There are three unique bytes\n        # Validate that the DataFrame contains the expected byte values and frequencies\n        expected_values = [128, 190, 243]  # Expected byte values\n        expected_frequencies = [2, 1, 1]  # Expected frequencies for each byte value\n        # Check if the DataFrame contains the expected values and frequencies\n        for value, frequency in zip(expected_values, expected_frequencies):\n            self.assertTrue((df['Byte Value'] == value).any())\n            self.assertEqual(df.loc[df['Byte Value'] == value, 'Frequency'].values[0], frequency)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Gaussian distribution and plot its histogram.\nThe function should output with:\n    tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n```",
        "gt": "import random\nimport matplotlib.pyplot as plt\n# Constants\nDISTRIBUTION_SIZE = 1000\ndef task_func(bins=30):\n\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nclass TestCases(unittest.TestCase):\n    def test_histogram_axes_type(self):\n        random.seed(0)\n        _, ax = task_func()\n        self.assertTrue(ax, plt.Axes)\n        plt.close()\n    def test_distribution_length(self):\n        random.seed(0)\n        distribution, _ = task_func()\n        self.assertEqual(len(distribution), 1000)\n        plt.close()\n    def test_distribution_type(self):\n        random.seed(0)\n        distribution, _ = task_func()\n        self.assertIsInstance(distribution, list, \"Distribution should be a list\")\n        self.assertTrue(all(isinstance(x, float) for x in distribution))\n        plt.close()\n    def test_histogram_bin_count(self):\n        random.seed(0)\n        _, ax = task_func(bins=20)\n        self.assertEqual(len(ax.patches), 20)\n        plt.close()\n    def test_default_bin_count(self):\n        random.seed(0)\n        _, ax = task_func()\n        self.assertEqual(len(ax.patches), 30)\n        plt.close()\n    \n    def test_plot_distribution(self):\n        random.seed(0)\n        distribution, ax = task_func()\n        heights, bins, _ = plt.hist(distribution)\n        expected_heights, _ = np.histogram(distribution, bins=bins)\n        np.testing.assert_allclose(heights, expected_heights, rtol=0.1, err_msg=\"Distribution not plotted correctly\")\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random float number from a list of hex strings and then encode the float number in utf-8.\nThe function should output with:\n    bytes: The utf-8 encoded float number.\nYou should write self-contained code starting with:\n```\nimport codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n```",
        "gt": "import codecs\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS):\n    hex_key = random.choice(hex_keys)\n    float_num = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    encoded_float = codecs.encode(str(float_num), 'utf-8')\n\n    return encoded_float",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_default_functionality(self):\n        \"\"\"Test the function with default parameters.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, bytes)  # Check if output is correctly encoded in UTF-8\n    def test_custom_hex_keys(self):\n        \"\"\"Test the function with a custom list of hexadecimal keys.\"\"\"\n        custom_keys = ['1A2FC614', '1B0FC614', '1C9FC614']\n        result = task_func(hex_keys=custom_keys)\n        self.assertIsInstance(result, bytes)\n    def test_empty_list(self):\n        \"\"\"Test the function with an empty list.\"\"\"\n        with self.assertRaises(IndexError):  # Assuming random.choice will raise IndexError on empty list\n            task_func(hex_keys=[])\n    def test_consistency_of_output(self):\n        \"\"\"Ensure that the output is consistent with a fixed seed.\"\"\"\n        random.seed(42)  # Set the seed for predictability\n        first_result = task_func()\n        random.seed(42)  # Reset seed to ensure same choice is made\n        second_result = task_func()\n        self.assertEqual(first_result, second_result)\n    def test_invalid_hex_key(self):\n        \"\"\"Test with an invalid hex key.\"\"\"\n        invalid_keys = ['ZZZZZZZZ', 'XXXX']\n        with self.assertRaises(ValueError):\n            task_func(hex_keys=invalid_keys)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a CSV file to train a Random Forest classifier and generates a formatted classification report.\nNote that: The CSV file must have a column with the name specified by 'target_column', and it should be in a format readable by pandas.read_csv().\nThe function should raise the exception for: ValueError: If the specified target_column is not found in the CSV file.\nThe function should output with:\n    str: A formatted classification report. The report includes metrics such as precision, recall,\n    f1-score for each class, as well as overall accuracy, macro average, and weighted average.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\ndef task_func(csv_file_path, target_column=\"target\", test_size=0.2, n_estimators=100):\n    df = pd.read_csv(csv_file_path)\n    if target_column not in df.columns:\n        raise ValueError(f\"'{target_column}' column not found in the CSV file.\")\n\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=42\n    )\n    clf = RandomForestClassifier(n_estimators=n_estimators, random_state=42)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    report = classification_report(y_test, y_pred)\n\n    # New formatting approach\n    lines = report.split(\"\\n\")\n    formatted_lines = []\n    for line in lines:\n        # Split the line into words and rejoin with specific spacing\n        parts = line.split()\n        if len(parts) == 5:  # Class-specific metrics\n            formatted_line = f\"{parts[0]:<15}{parts[1]:>10}{parts[2]:>10}{parts[3]:>10}{parts[4]:>10}\"\n        elif len(parts) == 4:  # Overall metrics\n            formatted_line = f\"{parts[0]:<15}{parts[1]:>10}{parts[2]:>10}{parts[3]:>10}\"\n        else:\n            formatted_line = line  # Header or empty lines\n        formatted_lines.append(formatted_line)\n\n    formatted_report = \"\\n\".join(formatted_lines)\n    return formatted_report",
        "test": "import unittest\nfrom unittest.mock import patch\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"pandas.read_csv\")\n    def test_default_parameters(self, mock_read_csv):\n        \"\"\"\n        Test task_func with default parameters using an adequately sized mock dataset.\n        \"\"\"\n        mock_data = {\n            \"feature1\": range(100),\n            \"feature2\": range(100, 200),\n            \"target\": [0, 1] * 50,  # Alternating 0s and 1s\n        }\n        mock_read_csv.return_value = pd.DataFrame(mock_data)\n        result = task_func(\"dummy_path.csv\")\n        self.assertIn(\"precision\", result)\n    @patch(\"pandas.read_csv\")\n    def test_non_default_target_column(self, mock_read_csv):\n        \"\"\"\n        Test task_func with a non-default target column using a larger mock dataset.\n        \"\"\"\n        mock_data = {\n            \"feature1\": range(100),\n            \"feature2\": range(100, 200),\n            \"label\": [1, 0] * 50,  # Alternating 1s and 0s\n        }\n        mock_read_csv.return_value = pd.DataFrame(mock_data)\n        result = task_func(\"dummy_path.csv\", target_column=\"label\")\n        self.assertIn(\"precision\", result)\n    @patch(\"pandas.read_csv\")\n    def test_different_test_size(self, mock_read_csv):\n        \"\"\"\n        Test task_func with a different test size and a larger dataset.\n        \"\"\"\n        mock_data = {\n            \"feature1\": range(100),\n            \"feature2\": range(100, 200),\n            \"target\": [0, 1, 1, 0] * 25,  # Repeated pattern\n        }\n        mock_read_csv.return_value = pd.DataFrame(mock_data)\n        result = task_func(\"dummy_path.csv\", test_size=0.5)\n        self.assertIn(\"precision\", result)\n    @patch(\"pandas.read_csv\")\n    def test_different_n_estimators(self, mock_read_csv):\n        \"\"\"\n        Test task_func with a different number of estimators and an expanded dataset.\n        \"\"\"\n        mock_data = {\n            \"feature1\": range(100),\n            \"feature2\": range(100, 200),\n            \"target\": [1, 0] * 50,  # Alternating 1s and 0s\n        }\n        mock_read_csv.return_value = pd.DataFrame(mock_data)\n        result = task_func(\"dummy_path.csv\", n_estimators=50)\n        self.assertIn(\"precision\", result)\n    @patch(\"pandas.read_csv\")\n    def test_missing_target_column(self, mock_read_csv):\n        \"\"\"\n        Test task_func with a missing target column.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame(\n            {\"feature1\": [1, 2], \"feature2\": [3, 4]}\n        )\n        with self.assertRaises(ValueError):\n            task_func(\"dummy_path.csv\", target_column=\"not_exist\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Add a new key-value pair to the dictionary and plot the distribution of its values.\nThe function should output with:\n    dict: The updated dictionary.\n    matplotlib.axes.Axes: The axes object of the plotted bar graph.\nYou should write self-contained code starting with:\n```\nimport collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n```",
        "gt": "import collections\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(dictionary, new_key, new_value):\n    # Add new key-value pair to the dictionary\n    dictionary[new_key] = new_value\n    \n    # Plot the distribution of its values\n    values_counts = collections.Counter(dictionary.values())\n    ax = sns.barplot(y=list(values_counts.keys()), x=list(values_counts.values()))\n    plt.title(\"Distribution of Dictionary Values\")\n    plt.xlabel(\"Values\")\n    plt.ylabel(\"Counts\")\n    \n    return dictionary, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        dictionary = {'a': 'apple', 'b': 'banana'}\n        new_key = 'c'\n        new_value = 'cherry'\n        updated_dict, _ = task_func(dictionary, new_key, new_value)\n        self.assertEqual(updated_dict, {'a': 'apple', 'b': 'banana', 'c': 'cherry'})\n    def test_case_2(self):\n        dictionary = {}\n        new_key = 'd'\n        new_value = 'date'\n        updated_dict, _ = task_func(dictionary, new_key, new_value)\n        self.assertEqual(updated_dict, {'d': 'date'})\n    def test_case_3(self):\n        dictionary = {'a': 'apple', 'b': 'apple'}\n        new_key = 'c'\n        new_value = 'apple'\n        updated_dict, _ = task_func(dictionary, new_key, new_value)\n        self.assertEqual(updated_dict, {'a': 'apple', 'b': 'apple', 'c': 'apple'})\n    def test_case_4(self):\n        dictionary = {'e': 'eggplant', 'f': 'fig', 'g': 'grape'}\n        new_key = 'h'\n        new_value = 'honeydew'\n        updated_dict, _ = task_func(dictionary, new_key, new_value)\n        self.assertEqual(updated_dict, {'e': 'eggplant', 'f': 'fig', 'g': 'grape', 'h': 'honeydew'})\n    def test_case_5(self):\n        dictionary = {'i': 'ice cream'}\n        new_key = 'i'\n        new_value = 'icing'\n        updated_dict, _ = task_func(dictionary, new_key, new_value)\n        self.assertEqual(updated_dict, {'i': 'icing'})  # The value should be updated",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Adds all modules of a specified package to the system path. This function is useful for dynamically importing modules from a package that might not be on the standard path. >>> len(task_func('pandas')) >= 2 True Verify that 'numpy' (a common package) modules are added to the path, >>> 'random' in task_func('numpy') True\nThe function should raise the exception for: ImportError: If the package is not installed or cannot be found. The exception message should contain the instruction to install the package (i.e., f\"pip install {package_name}\").\nThe function should output with:\n    list: A list of module names that were added to the system path.\nYou should write self-contained code starting with:\n```\nimport os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n```",
        "gt": "import os\nimport sys\nimport importlib\nfrom pkgutil import iter_modules\ndef task_func(package_name):\n    added_modules = []\n    try:\n        package = importlib.import_module(package_name)\n    except ImportError:\n        raise ImportError(f\"The package '{package_name}' is not installed! Please install the package first using 'pip install {package_name}'\")\n\n    for _, module_name, _ in iter_modules(package.__path__):\n        module_path = os.path.join(package.__path__[0], module_name)\n        if module_path not in sys.path:\n            sys.path.append(module_path)\n            added_modules.append(module_name)\n\n    return added_modules",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport sys\nclass TestCases(unittest.TestCase):\n    @patch('importlib.import_module')\n    @patch('pkgutil.iter_modules')\n    def test_package_module_addition(self, mock_iter_modules, mock_import_module):\n        # Create a mock for the package with a __path__ attribute as a list\n        package_mock = MagicMock()\n        package_mock.__path__ = ['mocked_path']  # Ensure this is a list\n        # Configure import_module to return the package mock when any module name is passed\n        mock_import_module.return_value = package_mock\n        # Setup the mock for iter_modules to simulate finding modules in a package\n        mock_iter_modules.return_value = [\n            (None, 'module1', True),  # Simulate a package has 'module1'\n            (None, 'module2', True)  # Simulate a package has 'module2'\n        ]\n        # Call the function under test\n        modules_added = task_func('numpy')\n        # Perform your assertions here\n        # For example, assert that modules were \"added\" (imported)\n        self.assertFalse(len(modules_added) > 0)\n    def test_nonexistent_package(self):\n        with self.assertRaises(ImportError):\n            task_func('nonexistentpkg')\n    def test_empty_package(self):\n        try:\n            modules_added = task_func('empty_package')\n            self.assertEqual(len(modules_added), 0)\n        except ImportError:\n            self.assertTrue(True, \"Package not found, which is expected in this test.\")\n    def test_module_path_in_sys_path(self):\n        # Assuming 'numpy' is installed\n        modules_added = task_func('numpy')\n        for module in modules_added:\n            self.assertTrue(any(module in path for path in sys.path))\n    def test_no_duplicates_in_sys_path(self):\n        # Assuming 'numpy' is installed\n        modules_added = task_func('numpy')\n        for module in modules_added:\n            self.assertEqual(sum(module in path for path in sys.path), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a simple scatter plot with 'n' points.\nThe function should output with:\n    plot (matplotlib.figure.Figure): The generated plot titled \"Scatter plot of random points\", with x-axis labeled \"X\" and y-axis labeled \"Y\".\n    points (list of tuples): List containing the (x, y) coordinates of the plotted points.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(n, seed=0):\n    # Setting the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generating random points\n    x = np.random.rand(n)\n    y = np.random.rand(n)\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_title(\"Scatter plot of random points\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n\n    return fig, list(zip(x, y))",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic point type and structure\n        _, points = task_func(5)\n        self.assertTrue(\n            all(\n                isinstance(point, tuple)\n                and len(point) == 2\n                and all(isinstance(coord, float) for coord in point)\n                for point in points\n            ),\n            \"Points should be a list of tuples with float coordinates\",\n        )\n    def test_case_2(self):\n        # Test parameter 'n'\n        for n in [0, 1, 5, 100]:\n            plot, points = task_func(n)\n            self.assertEqual(len(points), n)\n            self.assertTrue(isinstance(plot, type(plt.figure())))\n    def test_case_3(self):\n        # Test random seed - reproduction\n        _, points1 = task_func(5, seed=1)\n        _, points2 = task_func(5, seed=1)\n        self.assertEqual(\n            points1, points2, \"Points generated with the same seed should match exactly\"\n        )\n    def test_case_4(self):\n        # Test random seed - differences\n        _, points1 = task_func(5, seed=1)\n        _, points2 = task_func(5, seed=10)\n        self.assertNotEqual(\n            points1, points2, \"Points generated with the same seed should match exactly\"\n        )\n    def test_case_5(self):\n        # Test invalid inputs\n        with self.assertRaises(ValueError):\n            task_func(-5)\n        with self.assertRaises(TypeError):\n            task_func(5.5)\n        with self.assertRaises(TypeError):\n            task_func(\"5\")\n    def test_case_6(self):\n        # Test visualization\n        fig, _ = task_func(1)\n        ax = fig.axes[0]\n        self.assertEqual(ax.get_title(), \"Scatter plot of random points\")\n        self.assertEqual(ax.get_xlabel(), \"X\")\n        self.assertEqual(ax.get_ylabel(), \"Y\")\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Obtain system details, including operating system, architecture, and memory usage. This function gathers information about the system's operating system, architecture, and memory usage. It calculates the percentage of used memory  by comparing the total and currently used memory. The gathered details are then returned in a dictionary format with specific keys for each piece of information.\nThe function should output with:\n    dict: A dictionary containing:\n    'OS': Operating System name (e.g., 'Windows', 'Linux').\n    'Architecture': System architecture (typically first item from platform.architecture(), e.g., '64bit').\n    'Memory Usage': Formatted string representing the percentage of memory currently in use,\n    calculated as (used memory / total memory) * 100.\nYou should write self-contained code starting with:\n```\nimport psutil\nimport platform\ndef task_func():\n```",
        "gt": "import psutil\nimport platform\ndef task_func():\n    system_info = {}\n\n    system_info['OS'] = platform.system()\n    system_info['Architecture'] = platform.architecture()[0]\n\n    total_memory = psutil.virtual_memory().total\n    used_memory = psutil.virtual_memory().used\n    system_info['Memory Usage'] = f'{used_memory/total_memory*100:.2f}%'\n\n    return system_info",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_presence_OS(self):\n        \"\"\"Test that the result has the correct keys and that each key maps to the expected data type.\"\"\"\n        result = task_func()\n        self.assertTrue('OS' in result and isinstance(result['OS'], str))\n    def test_presence_architecture(self):\n        \"\"\"Test that the result has the correct keys and that each key maps to the expected data type.\"\"\"\n        result = task_func()\n        self.assertTrue('Architecture' in result and isinstance(result['Architecture'], str))\n    def test_presence_memory_usage(self):\n        \"\"\"Test that the result has the correct keys and that each key maps to the expected data type.\"\"\"\n        result = task_func()\n        self.assertTrue('Memory Usage' in result and isinstance(result['Memory Usage'], str))\n    def test_return_type(self):\n        \"\"\"Test that the result has the correct keys and that each key maps to the expected data type.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, dict)\n    def test_memory_usage_format(self):\n        \"\"\"Test that the 'Memory Usage' key is correctly formatted as a percentage.\"\"\"\n        result = task_func()\n        self.assertRegex(result['Memory Usage'], r\"\\d{1,3}\\.\\d{2}%\")\n    \n    def test_non_empty_values(self):\n        \"\"\"Ensure that the values associated with each key are non-empty.\"\"\"\n        result = task_func()\n        for key, value in result.items():\n            self.assertTrue(bool(value))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a word cloud from the text of a Wikipedia page.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted data. Is None if there is no wikipedia page with the title given as input.\nYou should write self-contained code starting with:\n```\nimport wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n```",
        "gt": "import wikipedia\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(page_title):\n    try:\n        text = wikipedia.page(page_title).content\n    except Exception as e:\n        print(f\"An error occured: {e}\")\n        return None\n    wordcloud = WordCloud().generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    ax = plt.gca()\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nclass A :\n    def __init__(self, content) -> None:\n        self.content = content\n        self.text = content\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @patch('wikipedia.page')\n    def test_case_1(self, mock_function):\n        # Mocking the function to prevent actual execution\n        mock_function.return_value = A(\"I want to sleep\")\n        # Running the function\n        _ = task_func('Python (programming language)')\n    @patch('wikipedia.page')\n    def test_case_2(self, mock_function):\n        # Mocking the function to prevent actual execution\n        mock_function.return_value = A(\"I want to sleep because it is important to sleep.\")\n        # Running the function\n        _ = task_func('Python (programming language)')\n    @patch('wikipedia.page')\n    def test_case_3(self, mock_function):\n        # Mocking the function to prevent actual execution\n        mock_function.return_value = A(\"I want to sleep\")\n        # Running the function\n        _ = task_func('Python (programming language)')\n    @patch('wikipedia.page')\n    def test_case_4(self, mock_function):\n        # Mocking the function to prevent actual execution\n        mock_function.return_value =A(\"I want to eat\")\n        # Running the function\n        _ = task_func('Python (programming language)')\n    @patch('wikipedia.page')\n    def test_case_5(self, mock_function):\n        # Mocking the function to prevent actual execution\n        mock_function.return_value = A(\"I want to help you to get your business to work.\")\n        # Running the function\n        _ = task_func('Python (programming language)')\n    def test_case_6(self):\n        ax = task_func(\"Invalid Page Title\")\n        self.assertIsNone(ax)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the continuous substring of x, which has the maximum total weight, given a dictionary where the keys are characters and the values are their weights.\nThe function should output with:\n    max_substr (str): The continuous substring with the highest weight.\nYou should write self-contained code starting with:\n```\nfrom itertools import combinations\nimport math\ndef task_func(x, w):\n```",
        "gt": "from itertools import combinations\nimport math\ndef task_func(x, w):\n    max_weight = -math.inf\n    max_substr = ''\n\n    for start, end in combinations(range(len(x) + 1), 2):\n        substr = x[start:end]\n        weight = sum(w.get(c, 0) for c in substr)\n        if weight > max_weight:\n            max_weight = weight\n            max_substr = substr\n\n    return max_substr",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func('c', {'a': 1, 'b': 2, 'c': 3}), 'c')\n    \n    def test_case_2(self):\n        self.assertEqual(task_func('aabc', {'a': 10, 'b': -5, 'c': 3}), 'aa')\n    def test_case_3(self):\n        self.assertEqual(task_func('aabc', {'a': 10, 'b': -2, 'c': 3}), 'aabc')\n    def test_case_4(self):\n        self.assertEqual(task_func('aabc', {'a': 2, 'b': -5, 'c': 3}), 'aa')\n    \n    def test_case_5(self):\n        self.assertEqual(task_func('aabc', {'a': 0, 'b': -1, 'c': 1}), 'c')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a matrix of specified dimensions with random integers within a given range, and then converts it into a pandas DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing random integers within the specified range.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport random\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport random\ndef task_func(rows=3, cols=2, min_val=0, max_val=100, seed=0):\n    random.seed(seed)\n    if min_val == max_val:\n        matrix = np.full((rows, cols), min_val)\n    else:\n        matrix = np.array([[random.randrange(min_val, max_val) for j in range(cols)] for i in range(rows)])\n    df = pd.DataFrame(matrix)\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func()\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.iloc[:, 0].tolist(), [49, 53, 33])\n        self.assertEqual(df.iloc[:, 1].tolist(), [97, 5, 65])\n        \n    def test_case_2(self):\n        df = task_func(rows=5, cols=4)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.iloc[:, 0].tolist(), [49, 33, 38, 27, 17])\n        self.assertEqual(df.iloc[:, 1].tolist(), [97, 65, 61, 64, 96])\n        self.assertEqual(df.iloc[:, 2].tolist(), [53, 62, 45, 17, 12])\n    def test_case_3(self):\n        df = task_func(min_val=10, max_val=20)\n        self.assertEqual(df.iloc[:, 0].tolist(), [16, 10, 18])\n        self.assertEqual(df.iloc[:, 1].tolist(), [16, 14, 17])\n        \n    def test_case_4(self):\n        df = task_func(min_val=50, max_val=50)\n        self.assertEqual(df.iloc[:, 0].tolist(), [50, 50, 50])\n        self.assertEqual(df.iloc[:, 1].tolist(), [50, 50, 50])\n    def test_case_5(self):\n        df = task_func(rows=0, cols=2)\n        self.assertTrue(df.empty)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of each letter in a list of lists. If a list is empty, fill it with a random sample from the alphabet, and then count the letters.\nThe function should output with:\n    Counter: A Counter object with the frequency of each letter.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport random\n# Constants\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n```",
        "gt": "from collections import Counter\nimport itertools\nimport random\n# Constants\nALPHABET = 'abcdefghijklmnopqrstuvwxyz'\ndef task_func(list_of_lists, seed=0):\n    random.seed(seed)\n    flattened_list = list(itertools.chain(*list_of_lists))\n\n    for list_item in list_of_lists:\n        if list_item == []:\n            flattened_list += random.sample(ALPHABET, 10)\n\n    counter = Counter(flattened_list)\n    \n    return counter",
        "test": "import unittest\nfrom collections import Counter\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func([['a', 'b', 'c'], ['d', 'e', 'f']])\n        expected = Counter({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1})\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        result = task_func([['a', 'b', 'c'], [], ['d', 'e', 'f']])\n        # Since the function can add random letters, we'll ensure that the known letters are counted correctly\n        self.assertEqual(sum(result.values()), 16)  # 6 known letters + 10 random letters\n    def test_case_3(self):\n        result = task_func([[], [], []])\n        # Here, the function should add 30 random letters (10 for each empty list)\n        self.assertEqual(sum(result.values()), 30)\n    def test_case_4(self):\n        result = task_func([])\n        # For an entirely empty input list, the result should also be an empty Counter\n        self.assertEqual(result, Counter())\n    def test_case_5(self):\n        result = task_func([['x', 'y', 'z'], ['a', 'b', 'c']])\n        expected = Counter({'x': 1, 'y': 1, 'z': 1, 'a': 1, 'b': 1, 'c': 1})\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a given dataset to compute the average of each row, plots the distribution of these averages, and evaluates their normality. The function returns these averages as an additional column in a DataFrame, the plot of the distribution, and the p-value from the normality test if applicable.\nNote that: The function uses seaborn's distplot for visualization and scipy's normaltest for statistical analysis. It requires at least 20 data points to perform the normality test.\nThe function should raise the exception for: ValueError: If the input data does not have exactly eight columns.\nThe function should output with:\n    tuple: Contains three elements:\n    DataFrame: A pandas DataFrame with the original data and an added 'Average' column.\n    Axes object: The Axes object from the seaborn distribution plot of the averages.\n    float or None: The p-value from the normality test on the averages, or None\n    if the test could not be conducted.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    if data.shape[1] != 8:\n        raise ValueError(\"Data must contain exactly eight columns.\")\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n\n    ax = sns.kdeplot(df['Average'], linewidth=3)\n\n    # Check if there are enough samples for normaltest\n    if len(df['Average']) >= 20:\n        k2, p = stats.normaltest(df['Average'])\n    else:\n        p = None\n\n    return df, ax, p",
        "test": "import numpy as np\nimport pandas as pd\nimport unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Mock plt.show to prevent it from displaying plots during tests\n        self.addCleanup(plt.close, 'all')\n    def test_basic_functionality(self):\n        data = np.array([[1, 2, 3, 4, 4, 3, 7, 1], [6, 2, 3, 4, 3, 4, 4, 1]])\n        df, ax, p_value = task_func(data)\n        expected_averages = [np.mean(row) for row in data]\n        self.assertTrue(isinstance(df, pd.DataFrame), \"Expected output to be a pandas DataFrame\")\n        self.assertIn('Average', df.columns, \"DataFrame should have an 'Average' column\")\n        self.assertTrue(np.array_equal(df['Average'], expected_averages), \"Averages are not calculated correctly\")\n        self.assertTrue(isinstance(ax, plt.Axes), \"Expected a matplotlib Axes object for plotting\")\n    def test_empty_input(self):\n        data = np.array([[]])\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_insufficient_columns(self):\n        data = np.random.rand(10, 7)  # Only 7 columns, one less than required\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_non_numeric_input(self):\n        data = np.array([['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']])\n        with self.assertRaises(TypeError):\n            task_func(data)\n    def test_plot_output(self):\n        data = np.random.rand(20, 8)\n        df, ax, _ = task_func(data)\n        self.assertEqual(len(ax.lines), 1, \"There should be one line on the plot\")\n    def test_normality_test(self):\n        # Create a dataset large enough to properly trigger the normality test\n        data = np.random.rand(20, 8)  # Increase to 20 rows\n        df, ax, p_value = task_func(data)\n        self.assertIsNotNone(p_value, \"p-value should not be None for sufficient data size\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw the histogram and the custom normal distribution curve from the mean and standard deviation derived from the values of a list of ValueObjects and return the plotted Axes. For an empty list, the mean and the standard deviation is 0.\nThe function should output with:\n    Axes: The plotted Axes.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n```",
        "gt": "import numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport random\nfrom matplotlib.axes import Axes\nclass ValueObject:\n    value = 0\n    def __init__(self, mu=0, std=1, seed=77):\n        random.seed(seed)\n        self.value = random.gauss(mu, std)\ndef task_func(obj_list) -> Axes:\n    if len(obj_list) == 0:\n        values = [0]\n    else:\n        values = [obj.value for obj in obj_list]\n\n    # Create a new figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot histogram\n    ax.hist(values, bins=30, density=True, alpha=0.6, color='g')\n    mean = np.mean(values)\n    std = np.std(values)\n\n    # Plot the PDF.\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std)\n    ax.plot(x, p, 'k', linewidth=2)\n\n    title = \"Fit results: mu = %.2f,  std = %.2f\" % (mean, std)\n    ax.set_title(title)\n\n    plt.close(fig)  # Close the figure to avoid display during function execution\n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with a small number of objects\n        obj_list = [ValueObject(mu=23, std=77), ValueObject(mu=23, std=77, seed=222), ValueObject(mu=23, std=77, seed=333)]\n        ax = task_func(obj_list)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(ax.get_title(), \"Fit results: mu = 10.76,  std = 39.42\")\n    def test_case_2(self):\n        # Testing with a larger number of objects\n        obj_list = [ValueObject(mu=23, std=65) for _ in range(1000)]\n        ax = task_func(obj_list)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(ax.get_title(), \"Fit results: mu = 40.53,  std = 0.00\")\n    def test_case_3(self):\n        # Testing with an even larger number of objects\n        obj_list = [ValueObject(mu=23, std=77, seed=88), ValueObject(mu=11, std=99), ValueObject(mu=41, std=77)]\n        ax = task_func(obj_list)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(ax.get_title(), \"Fit results: mu = 27.52,  std = 32.92\")\n    def test_case_4(self):\n        # Testing with an empty list of objects\n        obj_list = []\n        ax = task_func(obj_list)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(ax.get_title(), \"Fit results: mu = 0.00,  std = 0.00\")\n    def test_case_5(self):\n        # Testing with a single object\n        obj_list = [ValueObject(mu=23, std=77, seed=12)]\n        ax = task_func(obj_list)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(ax.get_title(), \"Fit results: mu = -88.28,  std = 0.00\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a given directory, listing each file it contains along with its size, creation time, and last modification time without recursing into subdirectories. >>> result = task_func('/path/to/empty_directory') >>> print(result) []\nNote that: Notes: The function assumes the directory exists and contains only files (no subdirectories are processed). Times are reported in system time, UTC. The creation and modification times are platform dependent; on some systems, the creation time might not be available and might be replaced by the last metadata change time.\nThe function should raise the exception for: ValueError: If the provided directory does not exist.\nThe function should output with:\n    list of tuples: Each tuple contains (file name, file size in bytes,\n    creation time in ISO format, modification time in ISO format).\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n```",
        "gt": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\ndef task_func(directory_path: str):\n    if not Path(directory_path).is_dir():\n        raise ValueError(f\"The path {directory_path} is not a valid directory.\")\n\n    file_details = []\n    for entry in os.scandir(directory_path):\n        if entry.is_file():\n            file_info = os.stat(entry.path)\n            file_size = file_info.st_size\n            creation_time = datetime.fromtimestamp(\n                file_info.st_ctime, timezone.utc\n            ).isoformat()\n            modification_time = datetime.fromtimestamp(\n                file_info.st_mtime, timezone.utc\n            ).isoformat()\n            file_details.append(\n                (entry.name, file_size, creation_time, modification_time)\n            )\n\n    return file_details",
        "test": "import unittest\nimport tempfile\nimport os\nfrom datetime import datetime, timezone, timedelta\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up a 'before' time with leeway for testing file modification times\n        self.before_creation = datetime.now(timezone.utc) - timedelta(seconds=1)\n        # Setup a temporary directory\n        self.test_dir = tempfile.TemporaryDirectory()\n        # Create test files\n        self.files = {\n            \"empty.txt\": 0,\n            \"small.txt\": 5,\n            \"medium.txt\": 50,\n            \"large.txt\": 500,\n            \"utc_test.txt\": 10,\n        }\n        for file_name, size in self.files.items():\n            path = os.path.join(self.test_dir.name, file_name)\n            with open(path, \"wb\") as f:\n                f.write(os.urandom(size))\n    def tearDown(self):\n        # Cleanup the directory after tests\n        self.test_dir.cleanup()\n    def test_case_1(self):\n        # Test the function on an existing directory.\n        result = task_func(self.test_dir.name)\n        self.assertEqual(len(result), len(self.files))\n    def test_case_2(self):\n        # Test the function with a non-existing directory.\n        with self.assertRaises(ValueError):\n            task_func(\"/path/to/non/existing/directory\")\n    def test_case_3(self):\n        # Test the function with an empty directory.\n        with tempfile.TemporaryDirectory() as empty_dir:\n            result = task_func(empty_dir)\n            self.assertEqual(len(result), 0)\n    def test_case_4(self):\n        # Test if the function correctly identifies file sizes.\n        result = task_func(self.test_dir.name)\n        sizes = {file[0]: file[1] for file in result}\n        for file_name, size in self.files.items():\n            self.assertEqual(sizes[file_name], size)\n    def test_case_5(self):\n        # Test if the function lists all expected files, regardless of order.\n        result = task_func(self.test_dir.name)\n        file_names = sorted([file[0] for file in result])\n        expected_file_names = sorted(\n            list(self.files.keys())\n        )  # Assuming 'utc_test.txt' is expected.\n        self.assertListEqual(file_names, expected_file_names)\n    def test_case_6(self):\n        # Test if modification times are correctly identified.\n        result = task_func(self.test_dir.name)\n        # Check if modification times are reasonable (not testing specific times because of system differences)\n        for _, _, creation_time, modification_time in result:\n            creation_datetime = datetime.fromisoformat(creation_time)\n            modification_datetime = datetime.fromisoformat(modification_time)\n            self.assertTrue(creation_datetime <= modification_datetime)\n    def test_case_7(self):\n        # Test that the function ignores directories.\n        sub_dir_path = os.path.join(self.test_dir.name, \"subdir\")\n        os.mkdir(sub_dir_path)\n        # Add a file inside the sub-directory to ensure it's not empty\n        with open(os.path.join(sub_dir_path, \"file.txt\"), \"w\") as sub_file:\n            sub_file.write(\"This is a test.\")\n        result = task_func(self.test_dir.name)\n        self.assertEqual(\n            len(result), len(self.files)\n        )  # Should not count the subdir or its contents\n    def test_case_8(self):\n        # Test if file names are correctly identified.\n        result = task_func(self.test_dir.name)\n        names = [file[0] for file in result]\n        for name in self.files.keys():\n            self.assertIn(name, names)\n    def test_case_9(self):\n        # Test that a non-directory path raises a ValueError.\n        with tempfile.NamedTemporaryFile() as tmpfile:\n            with self.assertRaises(ValueError):\n                task_func(tmpfile.name)\n    def test_case_10(self):\n        # Test timestamps are in UTC and within a reasonable accuracy window.\n        self.after_creation = datetime.now(timezone.utc)\n        result = task_func(self.test_dir.name)\n        for _, _, creation_time, modification_time in result:\n            creation_dt = datetime.fromisoformat(creation_time)\n            modification_dt = datetime.fromisoformat(modification_time)\n            # Ensure the timestamps are in UTC\n            self.assertEqual(creation_dt.tzinfo, timezone.utc)\n            self.assertEqual(modification_dt.tzinfo, timezone.utc)\n            # Ensure timestamps are within a reasonable window\n            self.assertTrue(self.before_creation <= creation_dt <= self.after_creation)\n            self.assertTrue(\n                self.before_creation <= modification_dt <= self.after_creation\n            )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Removes English stopwords from a text column in a DataFrame and returns the modified DataFrame. Constants: - STOPWORDS: A set containing common English stopwords.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with the stopwords removed from the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\n# Constants\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n```",
        "gt": "import pandas as pd\nimport re\n# Constants\nSTOPWORDS = set([\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n    \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\",\n    \"these\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\n    \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\",\n    \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\",\n    \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\",\n    \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\",\n    \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\",\n    \"don\", \"should\", \"now\"\n])\ndef task_func(data, column):\n    df = pd.DataFrame(data)\n    df[column] = df[column].apply(lambda x: ' '.join([word for word in re.findall(r'\\b\\w+\\b', x) if word.lower() not in STOPWORDS]))\n    return df",
        "test": "import unittest\nimport pandas as pd\n# Import the refined function\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = {'text': ['This is a sample sentence.', 'Another example here.']}\n        expected_df = pd.DataFrame({'text': ['sample sentence', 'Another example']})\n        result_df = task_func(data, 'text')\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    def test_case_2(self):\n        data = {'content': ['Stopwords should be removed.', 'Testing this function.']}\n        expected_df = pd.DataFrame({'content': ['Stopwords removed', 'Testing function']})\n        result_df = task_func(data, 'content')\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    def test_case_3(self):\n        data = {'sentence': ['Hello world!', 'Good morning.']}\n        expected_df = pd.DataFrame({'sentence': ['Hello world', 'Good morning']})\n        result_df = task_func(data, 'sentence')\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    def test_case_4(self):\n        data = {'text': ['This is a single sentence.'] * 100}\n        expected_df = pd.DataFrame({'text': ['single sentence'] * 100})\n        result_df = task_func(data, 'text')\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    def test_case_5(self):\n        data = {'line': [''] * 50}\n        expected_df = pd.DataFrame({'line': [''] * 50})\n        result_df = task_func(data, 'line')\n        pd.testing.assert_frame_equal(result_df, expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Identify and count duplicate values in a DataFrame's 'value' column. This function also plots a histogram for all values in the 'value' column and overlays a normal distribution curve on the histogram.\nThe function should output with:\n    tuple: A tuple containing:\n    Counter: A Counter object with the count of each duplicate value.\n    Axes: A matplotlib.axes.Axes object that represents the plot\n    of the histogram with the 'value' column data. If applicable,\n    a normal distribution curve fitted to the data is overlaid. The\n    histogram's bars are green with 60% opacity, and the normal\n    distribution curve is black with a linewidth of 2. The plot is\n    titled \"Distribution\", with \"Value\" as the x-axis label and\n    \"Frequency\" as the y-axis label.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n```",
        "gt": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(df, bins=4):\n    # Filter only duplicate values\n    duplicates = df[df[\"value\"].duplicated(keep=False)]\n    duplicates_counter = Counter(duplicates[\"value\"])\n\n    # Check if data is empty or constant\n    if df.empty or df[\"value\"].nunique() == 1:\n        mu, std = None, None\n    else:\n        mu, std = norm.fit(df[\"value\"])\n\n    fig, ax = plt.subplots()\n    ax.hist(df[\"value\"], bins=bins, density=True, alpha=0.6, color=\"g\")\n    if mu is not None and std is not None:\n        xmin, xmax = plt.xlim()\n        x = np.linspace(xmin, xmax, 100)\n        p = norm.pdf(x, mu, std)\n        ax.plot(x, p, \"k\", linewidth=2)\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Distribution\")\n\n    return duplicates_counter, ax",
        "test": "import unittest\nimport pandas as pd\nfrom collections import Counter\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def _check_plot(self, ax):\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Distribution\")\n        self.assertEqual(ax.get_xlabel(), \"Value\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n    def test_case_1(self):\n        # Basic case - no repeated value\n        df = pd.DataFrame({\"value\": [1, 2, 3, 4, 5]})\n        counter, ax = task_func(df)\n        self._check_plot(ax)\n        self.assertEqual(counter, Counter())\n    def test_case_2(self):\n        # Basic case - all repeated values\n        df = pd.DataFrame({\"value\": [1, 1, 1, 1, 1]})\n        counter, ax = task_func(df)\n        self._check_plot(ax)\n        self.assertEqual(counter, Counter({1: 5}))\n    def test_case_3(self):\n        # Basic case - test empty\n        df = pd.DataFrame({\"value\": []})\n        counter, ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(counter, Counter())\n    def test_case_4(self):\n        # Basic case with more diverse data distribution\n        df = pd.DataFrame({\"value\": [5, 5, 5, 5, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]})\n        counter, ax = task_func(df)\n        self._check_plot(ax)\n        self.assertEqual(counter, Counter({5: 4, 1: 4, 2: 3, 3: 2}))\n    def test_case_5(self):\n        # Test bins explicitly\n        np.random.seed(0)\n        df = pd.DataFrame({\"value\": np.random.rand(100)})\n        for bins in [2, 10, 20]:\n            _, ax = task_func(df, bins=bins)\n            self.assertEqual(\n                len(ax.patches), bins, f\"Expected {bins} bins in the histogram.\"\n            )\n    def test_case_6(self):\n        # Test handling non-numeric value\n        df = pd.DataFrame({\"value\": [\"a\", \"b\", \"c\", \"a\", \"b\", \"b\"]})\n        with self.assertRaises(TypeError):\n            task_func(df)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Backs up a given source folder to the specified backup directory, then deletes the source folder.\nThe function should raise the exception for: ValueError: If the source folder does not exist. Exception: If an error occurs while deleting the source folder.\nThe function should output with:\n    bool: True if the operation is successful, False otherwise.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(src_folder, backup_dir):\n```",
        "gt": "import os\nimport shutil\ndef task_func(src_folder, backup_dir):\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    \n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    \n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False",
        "test": "import unittest\nimport tempfile\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        # Create a temporary directory for testing\n        self.src_folder = tempfile.mkdtemp()\n        self.backup_dir = tempfile.mkdtemp()\n        \n        # Create a sample file in the source folder\n        with open(os.path.join(self.src_folder, \"sample.txt\"), \"w\") as f:\n            f.write(\"This is a sample file.\")\n    \n    def tearDown(self):\n        # Cleanup\n        if os.path.exists(self.src_folder):\n            shutil.rmtree(self.src_folder)\n        if os.path.exists(self.backup_dir):\n            shutil.rmtree(self.backup_dir)\n    \n    def test_case_1(self):\n        result = task_func(self.src_folder, self.backup_dir)\n        self.assertTrue(result)\n        self.assertFalse(os.path.exists(self.src_folder))\n        self.assertTrue(os.path.exists(os.path.join(self.backup_dir, os.path.basename(self.src_folder), \"sample.txt\")))\n    \n    def test_case_2(self):\n        shutil.rmtree(self.src_folder)\n        with self.assertRaises(ValueError):\n            task_func(self.src_folder, self.backup_dir)\n    \n    def test_case_3(self):\n        os.rmdir(self.backup_dir)\n        result = task_func(self.src_folder, self.backup_dir)\n        self.assertTrue(result)\n        self.assertFalse(os.path.exists(self.src_folder))\n        self.assertTrue(os.path.exists(os.path.join(self.backup_dir, os.path.basename(self.src_folder), \"sample.txt\")))\n    \n    def test_case_4(self):\n        self.assertTrue(task_func(self.src_folder, self.src_folder))\n    \n    def test_case_5(self):\n        os.makedirs(os.path.join(self.backup_dir, os.path.basename(self.src_folder)))\n        with self.assertRaises(FileExistsError):\n            task_func(self.src_folder, self.backup_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Move files from the source directory to the target directory based on a specified pattern. This function iterates through all files in the source directory, and if a file's name matches the specified pattern, it is moved to the target directory.\nThe function should output with:\n    moved_files_count (int): The number of files that were successfully moved from the source directory to the target directory.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n```",
        "gt": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))\n            moved_files_count += 1\n\n    return moved_files_count",
        "test": "import unittest\nimport os\nimport shutil\nfrom faker import Faker\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up temporary directories for the source and target\n        self.test_dir = tempfile.mkdtemp()\n        self.source_dir = os.path.join(self.test_dir, 'source')\n        self.target_dir = os.path.join(self.test_dir, 'target')\n        os.makedirs(self.source_dir, exist_ok=True)\n        os.makedirs(self.target_dir, exist_ok=True)\n        # Create files that match and do not match the pattern\n        self.match_files = ['file1.txt', 'document1.doc', 'notes.docx']\n        self.no_match_files = ['image.png', 'data.csv', 'script.js']\n        for file in self.match_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write('Hello World')\n        for file in self.no_match_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write('Hello World')\n    def tearDown(self):\n        # Remove the test directory after each test\n        shutil.rmtree(self.test_dir)\n    def test_files_moved(self):\n        # Test that only files matching the pattern are moved\n        result = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(result, len(self.match_files))\n        self.assertTrue(all(os.path.exists(os.path.join(self.target_dir, f)) for f in self.match_files))\n        self.assertTrue(all(os.path.exists(os.path.join(self.source_dir, f)) for f in self.no_match_files))\n    def test_no_files_moved(self):\n        # Test when no files match the pattern\n        custom_pattern = r'\\.pdf$'  # No files with .pdf extension exist\n        result = task_func(self.source_dir, self.target_dir, custom_pattern)\n        self.assertEqual(result, 0)\n        self.assertEqual(len(os.listdir(self.target_dir)), 0)\n    def test_directory_does_not_exist(self):\n        # Test handling of a non-existent source directory\n        shutil.rmtree(self.source_dir)\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.source_dir, self.target_dir)\n    def test_empty_source_directory(self):\n        # Test with an empty source directory\n        for file in os.listdir(self.source_dir):\n            os.remove(os.path.join(self.source_dir, file))\n        result = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(result, 0)\n        self.assertEqual(len(os.listdir(self.target_dir)), 0)\n    def test_target_directory_creation(self):\n        # Test automatic creation of the target directory if it doesn't exist\n        shutil.rmtree(self.target_dir)\n        self.assertFalse(os.path.exists(self.target_dir))\n        task_func(self.source_dir, self.target_dir)\n        self.assertTrue(os.path.exists(self.target_dir))\n        self.assertTrue(any(os.path.exists(os.path.join(self.target_dir, f)) for f in self.match_files))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Parses XML content from a string and converts it into a CSV format.\nNote that: Ensure that the XML content passed to the function is well-formed. The output CSV path should be a valid file path where the user has write permissions, to prevent IOError.\nThe function should raise the exception for: ET.ParseError: This exception is raised if the input XML content is malformed or cannot be successfully parsed. The exception message includes details about the parsing error. IOError: Raised if there is an issue with writing to the specified CSV file path. This can happen due to reasons like invalid file path, full disk space, lack of write permissions, etc. The exception message provides details about the IO error.\nThe function should output with:\n    None: The function does not return any value. Instead, it writes the output to\n    a CSV file at the specified path.\nYou should write self-contained code starting with:\n```\nimport xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n```",
        "gt": "import xml.etree.ElementTree as ET\nimport csv\ndef task_func(xml_content, output_csv_path):\n    try:\n        root = ET.fromstring(xml_content)\n        data = [[elem.tag, elem.text] for elem in root.iter()]\n\n        with open(output_csv_path, \"w\", newline=\"\", encoding=\"utf-8\") as f:\n            writer = csv.writer(f)\n            writer.writerows(data)\n    except ET.ParseError as e:\n        raise ET.ParseError(f\"Error parsing XML: {e}\") from e\n    except IOError as e:\n        raise IOError(f\"Error writing CSV file: {e}\") from e",
        "test": "import unittest\nimport xml.etree.ElementTree as ET\nimport csv\nimport shutil\nfrom pathlib import Path\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    test_data_dir = \"mnt/data/task_func_data\"\n    def setUp(self):\n        \"\"\"Set up method to create a directory for test files.\"\"\"\n        self.test_dir = Path(self.test_data_dir)\n        self.test_dir.mkdir(parents=True, exist_ok=True)\n    def check_csv_content(self, xml_content, csv_path):\n        \"\"\"Helper function to check if the CSV content matches the XML content.\"\"\"\n        root = ET.fromstring(xml_content)\n        expected_data = [\n            [elem.tag, elem.text if elem.text is not None else \"\"]\n            for elem in root.iter()\n        ]\n        with open(csv_path, \"r\", encoding=\"utf-8\") as file:\n            reader = csv.reader(file)\n            csv_data = list(reader)\n        self.assertEqual(expected_data, csv_data)\n    def test_simple_xml(self):\n        \"\"\"Test with simple XML content.\"\"\"\n        xml_content = \"<root><element>data</element></root>\"\n        csv_output = self.test_dir / \"output_scenario_0.csv\"\n        task_func(xml_content, csv_output)\n        self.check_csv_content(xml_content, csv_output)\n    def test_nested_xml(self):\n        \"\"\"Test with nested XML content.\"\"\"\n        xml_content = \"<root><parent><child>data</child></parent></root>\"\n        csv_output = self.test_dir / \"output_scenario_1.csv\"\n        task_func(xml_content, csv_output)\n        self.check_csv_content(xml_content, csv_output)\n    def test_empty_xml(self):\n        \"\"\"Test with an empty XML.\"\"\"\n        xml_content = \"<root></root>\"\n        csv_output = self.test_dir / \"output_scenario_2.csv\"\n        task_func(xml_content, csv_output)\n        self.check_csv_content(xml_content, csv_output)\n    def test_xml_with_attributes(self):\n        \"\"\"Test with an XML that contains elements with attributes.\"\"\"\n        xml_content = '<root><element attr=\"value\">data</element></root>'\n        csv_output = self.test_dir / \"output_scenario_3.csv\"\n        task_func(xml_content, csv_output)\n        self.check_csv_content(xml_content, csv_output)\n    def test_large_xml(self):\n        \"\"\"Test with a larger XML file.\"\"\"\n        xml_content = (\n            \"<root>\"\n            + \"\".join([f\"<element>{i}</element>\" for i in range(100)])\n            + \"</root>\"\n        )\n        csv_output = self.test_dir / \"output_scenario_4.csv\"\n        task_func(xml_content, csv_output)\n        self.check_csv_content(xml_content, csv_output)\n    def test_invalid_xml_content(self):\n        \"\"\"Test with invalid XML content to trigger ET.ParseError.\"\"\"\n        xml_content = \"<root><element>data</element\"  # Malformed XML\n        csv_output = self.test_dir / \"output_invalid_xml.csv\"\n        with self.assertRaises(ET.ParseError):\n            task_func(xml_content, csv_output)\n    def test_unwritable_csv_path(self):\n        \"\"\"Test with an unwritable CSV path to trigger IOError.\"\"\"\n        xml_content = \"<root><element>data</element></root>\"\n        csv_output = self.test_dir / \"non_existent_directory\" / \"output.csv\"\n        with self.assertRaises(IOError):\n            task_func(xml_content, csv_output)\n    def tearDown(self):\n        # Cleanup the test directories\n        dirs_to_remove = [\"mnt/data\", \"mnt\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Simulate rolling a certain number of a standard six-sided dice several times, then identify and display the distribution of the sums of the dice rolls in a bar plot.\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    Counter: A Counter object with the count of each possible sum.\n    Axes: A matplotlib Axes object representing the bar plot of the Distribution of Dice Roll Sums,\n    with Sum of Dice Roll on the x-axis and count on the y-axis.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n```",
        "gt": "from collections import Counter\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(num_rolls, num_dice, plot_path=None, random_seed=0):\n    POSSIBLE_VALUES = list(range(1, 7))\n\n    random.seed(random_seed)\n\n    sums = []\n    for _ in range(num_rolls):\n        roll = [random.choice(POSSIBLE_VALUES) for _ in range(num_dice)]\n        sums.append(sum(roll))\n\n    sums_counter = Counter(sums)\n\n    labels, values = zip(*sums_counter.items())\n\n    plt.bar(labels, values)\n    plt.xlabel(\"Sum of Dice Roll\")\n    plt.ylabel(\"Count\")\n    plt.title(\"Distribution of Dice Roll Sums\")\n    ax = plt.gca()\n    if plot_path:\n        plt.savefig(plot_path)\n\n    return sums_counter, ax",
        "test": "import unittest\nimport os\nfrom collections import Counter\nimport tempfile\nimport shutil\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to store plots\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Close matplotlib plots and remove temporary directory\n        plt.close(\"all\")\n    def test_case_1(self):\n        # Test basic functionality with 100 rolls and 2 dice\n        result, ax = task_func(100, 2, random_seed=42)\n        self.assertIsInstance(result, Counter)\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_2(self):\n        # Test plot saving functionality\n        plot_path = os.path.join(self.test_dir, \"test_plot.png\")\n        result, ax = task_func(1000, 1, plot_path, random_seed=42)\n        self.assertIsInstance(result, Counter)\n        self.assertTrue(os.path.exists(plot_path))\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_3(self):\n        # Test with a larger number of dice\n        result, ax = task_func(500, 5, random_seed=42)\n        self.assertIsInstance(result, Counter)\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_4(self):\n        # Test with the minimum possible inputs\n        result, ax = task_func(1, 1, random_seed=42)\n        self.assertIsInstance(result, Counter)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(len(result), 1)  # Only one possible sum with 1 roll of 1 die\n    def test_case_5(self):\n        # Test the effect of different random seeds on the result consistency\n        result1, _ = task_func(100, 2, random_seed=42)\n        result2, _ = task_func(100, 2, random_seed=43)\n        self.assertNotEqual(\n            result1, result2, \"Results should differ with different seeds\"\n        )\n    def test_case_6(self):\n        # Test plot detail correctness (labels, title)\n        plot_path = os.path.join(self.test_dir, \"test_plot_detail.png\")\n        _, ax = task_func(10, 2, plot_path, random_seed=42)\n        self.assertTrue(\n            \"sum of dice roll\" in ax.get_xlabel().lower(), \"X-axis label is incorrect\"\n        )\n        self.assertEqual(ax.get_ylabel(), \"Count\", \"Y-axis label is incorrect\")\n        self.assertTrue(\n            \"distribution of dice roll sums\" in ax.get_title().lower(),\n            \"Plot title is incorrect\",\n        )\n    def test_case_7(self):\n        # Test data correctness with a manually calculated example\n        result, _ = task_func(2, 1, random_seed=42)\n        expected = Counter({6: 1, 1: 1})\n        self.assertEqual(\n            result, expected, \"Data distribution does not match expected outcome\"\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace all elements in DataFrame columns that are not present in the target_values array with zeros, and then perform a linear regression using the target column. >>> rng = np.random.default_rng(seed=0) >>> df = pd.DataFrame(rng.integers(0, 100, size=(1000, 5)), columns=['A', 'B', 'C', 'D', 'predict']) >>> model = task_func(df, 'predict') >>> print(model.coef_) [-0.00173703 -0.02190392 -0.03304266  0.00759771] >>> print(model.intercept_) 53.362739257681035\nThe function should raise the exception for: ValueError: If df is not a DataFrame or if target_column is not a string or if target_values is not an array-like object\nThe function should output with:\n    LinearRegression: The trained Linear Regression model.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target_column, target_values=None):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame.\")\n    \n    if df.empty:\n        raise ValueError(\"df should contain at least one row\")\n    \n    if target_column not in df.columns:\n        raise ValueError(\"target_column should be in DataFrame\")\n    \n    if not all(np.issubdtype(dtype, np.number) for dtype in df.dtypes):\n        raise ValueError(\"df values should be numeric only\")\n\n    if target_values != None:\n        df = df.applymap(lambda x: x if x in target_values else 0)\n\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    model = LinearRegression().fit(X, y)\n\n    return model",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nclass TestCases(unittest.TestCase):\n    \n    def lin_relation_1d(self, x, w0, w1):\n        '''1-d linear relation for testing'''\n        return w0 + w1*x\n    \n    def lin_relation_nd(self, row, w0, w):\n        '''n-dimension linear relation for testing'''\n        result = 0\n        for i, x in enumerate(row.values):\n            result += x * w[i]\n        return w0 + result \n    def test_case_df(self):\n        '''non DataFrame input'''\n        df = 3\n        target_column = 'test'\n        self.assertRaises(Exception, task_func, df, target_column)\n    def test_case_target_column(self):\n        '''target column not in DataFrame'''\n        rng = np.random.default_rng(seed=0)\n        df = pd.DataFrame(rng.integers(0, 10, size=(5, 2)), columns=['test', 'python'])\n        target_column = 'not'\n        self.assertRaises(Exception, task_func, df, target_column)\n    def test_case_empty_df(self):\n        '''empty df as input'''\n        df = pd.DataFrame(columns=['A', 'B'])\n        target_column = 'A'\n        self.assertRaises(Exception, task_func, df, target_column)\n    \n    def test_case_non_numeric_values(self):\n        '''df not numeric'''\n        data = {\n            'A': [1, 2, 'test'],\n            'B': [3, 3, 3]\n        }\n        df = pd.DataFrame(data)\n        target_column = 'A'\n        self.assertRaises(Exception, task_func, df, target_column)\n    def test_case_1(self):\n        '''prediction for one column'''\n        rng = np.random.default_rng(seed=0)\n        df = pd.DataFrame(rng.integers(0, 100, size=(1000, 1)), columns=list('A'))\n        df['predict'] = df.apply(self.lin_relation_1d, args=(2, 4))\n        model = task_func(df, 'predict')\n        self.assertIsInstance(model, LinearRegression, \"Returned value is not a LinearRegression model.\")\n        # make sure predictions work as expected\n        pred = model.predict(df.drop('predict', axis=1))\n        self.assertTrue(np.allclose(pred.tolist(), df['predict'].tolist()))\n        # assert model params\n        self.assertAlmostEqual(model.coef_[0], 4, places=4)\n        self.assertAlmostEqual(model.intercept_, 2, places=4)\n        \n    def test_case_2(self):\n        '''multiple column prediction'''\n        rng = np.random.default_rng(seed=0)\n        df = pd.DataFrame(rng.integers(0, 100, size=(1000, 5)), columns=list('ABCDE'))\n        df['predict'] = df.apply(self.lin_relation_nd, axis=1, args=(4, [2.5, 5.8, 6, 4, -1]))\n        model = task_func(df, 'predict')\n        self.assertIsInstance(model, LinearRegression, \"Returned value is not a LinearRegression model.\")\n        # make sure predictions work as expected\n        pred = model.predict(df.drop('predict', axis=1))\n        self.assertTrue(np.allclose(pred.tolist(), df['predict'].tolist()))\n        # assert model params\n        self.assertTrue(np.allclose(model.coef_, [2.5, 5.8, 6, 4, -1]))\n        self.assertAlmostEqual(model.intercept_, 4, places=4)\n    def test_case_3(self):\n        '''test working target value --> with target value linear regression can't deliver good results'''\n        rng = np.random.default_rng(seed=0)\n        df = pd.DataFrame(rng.integers(0, 10, size=(1000, 1)), columns=list('A'))\n        df['predict'] = df.apply(self.lin_relation_1d, args=(0, 2))\n        model = task_func(df, 'predict', target_values=[1, 2, 4, 8])\n        self.assertIsInstance(model, LinearRegression, \"Returned value is not a LinearRegression model.\")\n        \n        # make sure predictions work as expected\n        masked_df = df.applymap(lambda x: x if x in [1, 2, 4, 8] else 0)\n        masked_predict = masked_df['predict']\n        pred = model.predict(masked_df.drop('predict', axis=1))\n        self.assertTrue(not np.allclose(pred.tolist(), masked_predict.tolist()))\n        # assert model params\n        self.assertAlmostEqual(model.coef_[0], 0.2921456, places=2)\n        self.assertAlmostEqual(model.intercept_, 0.81175, places=4)\n        \n    def test_case_4(self):\n        '''df with constant values'''\n        df = pd.DataFrame(np.full((10, 10), 3), columns=list('ABCDEFGHIJ'))\n        model = task_func(df, 'J')\n        self.assertTrue(all(coef == 0 for coef in model.coef_), \"Model coefficients are not correct.\")\n        self.assertAlmostEqual(model.intercept_, 3, places=4)\n    def test_case_5(self):\n        '''df filled with random floats'''\n        rng = np.random.default_rng(seed=0)\n        df = pd.DataFrame(rng.random(size=(1000, 5)) * 10, columns=list('ABCDE'))\n        df['predict'] = df.apply(self.lin_relation_nd, axis=1, args=(-1, [15, -4.8, 12, 40.2, -2]))\n        model = task_func(df, 'predict')\n        self.assertIsInstance(model, LinearRegression, \"Returned value is not a LinearRegression model.\")\n        # make sure predictions work as expected\n        pred = model.predict(df.drop('predict', axis=1))\n        self.assertTrue(np.allclose(pred.tolist(), df['predict'].tolist()))\n        # assert model params\n        self.assertTrue(np.allclose(model.coef_, [15, -4.8, 12, 40.2, -2]))\n        self.assertAlmostEqual(model.intercept_, -1, places=4)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalizes a 2D numeric array (matrix) using the Z score.\nThe function should output with:\n    DataFrame: The normalized DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n```",
        "gt": "import pandas as pd\nfrom scipy import stats\ndef task_func(matrix):\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_extreme_values_shape(self):\n        \"\"\"Test the function with extreme values to ensure output shape is correct.\"\"\"\n        matrix = [[1, 2], [10000, 20000]]\n        result_df = task_func(matrix)\n        # Verify that the shape of the result is the same as the input\n        self.assertEqual(result_df.shape, (2, 2))\n    def test_case_2(self):\n        matrix = np.array([[2, 5], [5, 2]])\n        result = task_func(matrix)\n        expected_result = pd.DataFrame({\n            0: [-1.0, 1.0],\n            1: [1.0, -1.0]\n        })\n        pd.testing.assert_frame_equal(result, expected_result)\n    def test_case_3(self):\n        matrix = np.array([[5]])\n        result = task_func(matrix)\n        expected_result = pd.DataFrame({\n            0: [0.0]\n        })\n        pd.testing.assert_frame_equal(result, expected_result)\n    def test_uniform_data(self):\n        \"\"\"Test a matrix where all elements are the same.\"\"\"\n        matrix = [[1, 1], [1, 1]]\n        expected_result = pd.DataFrame({\n            0: [0.0, 0.0],\n            1: [0.0, 0.0]\n        })\n        pd.testing.assert_frame_equal(task_func(matrix), expected_result)\n    def test_non_numeric_data(self):\n        \"\"\"Test the function with non-numeric data.\"\"\"\n        matrix = [['a', 'b'], ['c', 'd']]\n        with self.assertRaises(TypeError):\n            task_func(matrix)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Get the public IP address of the current host from an API.\nThe function should raise the exception for: If the API request fails, the function will return the error message.\nThe function should output with:\n    str: The public IP address.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n```",
        "gt": "import re\nimport urllib.request\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(API_URL):\n\n    try:\n        response = urllib.request.urlopen(API_URL)\n        data = json.loads(response.read())\n        ip = data['ip']\n        if re.match(IP_REGEX, ip):\n            return ip\n        else:\n            return 'Invalid IP address received'\n    except Exception as e:\n        return str(e)",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport json\nclass TestCases(unittest.TestCase):\n    API_URL = 'https://api.ipify.org?format=json'\n    @patch('urllib.request.urlopen')\n    def test_valid_ip(self, mock_urlopen):\n        # Mocking a valid IP response\n        mock_response = MagicMock()\n        mock_response.read.return_value = json.dumps({'ip': '192.168.1.1'}).encode('utf-8')\n        mock_urlopen.return_value = mock_response\n        mock_response.__enter__.return_value = mock_response\n        mock_response.__exit__.return_value = None\n        result = task_func(self.API_URL)\n        self.assertEqual(result, '192.168.1.1')\n    @patch('urllib.request.urlopen')\n    def test_invalid_ip(self, mock_urlopen):\n        # Mocking an invalid IP response\n        mock_response = MagicMock()\n        mock_response.read.return_value = json.dumps({'ip': '500.500.500.500'}).encode('utf-8')\n        mock_urlopen.return_value = mock_response\n        mock_response.__enter__.return_value = mock_response\n        mock_response.__exit__.return_value = None\n        result = task_func(self.API_URL)\n        self.assertEqual(result, '500.500.500.500')\n    @patch('urllib.request.urlopen')\n    def test_api_failure(self, mock_urlopen):\n        # Mocking an API failure\n        mock_response = MagicMock()\n        mock_urlopen.side_effect = Exception(\"API failure\")\n        mock_response.__enter__.return_value = mock_response\n        mock_response.__exit__.return_value = None\n        result = task_func(self.API_URL)\n        self.assertTrue(\"API failure\" in result)\n    @patch('urllib.request.urlopen')\n    def test_missing_ip_key(self, mock_urlopen):\n        # Mocking response missing the 'ip' key\n        mock_response = MagicMock()\n        mock_response.read.return_value = json.dumps({}).encode('utf-8')\n        mock_urlopen.return_value = mock_response\n        mock_response.__enter__.return_value = mock_response\n        mock_response.__exit__.return_value = None\n        result = task_func(self.API_URL)\n        self.assertEqual(result, \"'ip'\")\n    @patch('urllib.request.urlopen')\n    def test_non_json_response(self, mock_urlopen):\n        # Mocking a non-JSON response from API\n        mock_response = MagicMock()\n        mock_response.read.return_value = \"Non-JSON response\".encode('utf-8')\n        mock_urlopen.return_value = mock_response\n        mock_response.__enter__.return_value = mock_response\n        mock_response.__exit__.return_value = None",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Runs the provided backup shell script and logs the start time, end time, and exit status in a specified JSON log file.\nThe function should raise the exception for: FileNotFoundError: If the script file does not exist. RuntimeError: If there is an error executing the script.\nThe function should output with:\n    dict: A dictionary containing:\n    'start_time': The start time of the script execution in the format '%Y-%m-%d %H:%M:%S'.\n    'end_time': The end time of the script execution in the format '%Y-%m-%d %H:%M:%S'.\n    'exit_status': The exit status of the script execution (0 for success, other values indicate an error).\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n```",
        "gt": "import subprocess\nimport os\nimport json\nfrom datetime import datetime\ndef task_func(script_name='backup.sh', log_file='/home/user/backup_log.json'):\n    log_data = {}\n\n    if not os.path.isfile(script_name):\n        raise FileNotFoundError(f\"Script {script_name} does not exist.\")\n\n    start_time = datetime.now()\n    log_data['start_time'] = start_time.strftime('%Y-%m-%d %H:%M:%S')\n\n    try:\n        exit_status = subprocess.call(['./' + script_name])\n    except Exception as e:\n        raise RuntimeError(f\"Failed to run {script_name}: {str(e)}\")\n\n    end_time = datetime.now()\n    log_data['end_time'] = end_time.strftime('%Y-%m-%d %H:%M:%S')\n    log_data['exit_status'] = exit_status\n\n    with open(log_file, 'w') as f:\n        json.dump(log_data, f)\n    \n    return log_data",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nclass TestCases(unittest.TestCase):\n    \n    @patch(\"os.path.isfile\", return_value=True)\n    @patch(\"subprocess.call\", return_value=0)\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"{}\")\n    def test_default_values_successful_script(self, mock_file, mock_subprocess, mock_os):\n        \"\"\"Test the function with default parameters and successful execution\"\"\"\n        result = task_func()\n        self.assertIn('start_time', result)\n        self.assertIn('end_time', result)\n        self.assertEqual(result['exit_status'], 0)\n    @patch(\"os.path.isfile\", return_value=False)\n    def test_script_does_not_exist(self, mock_os):\n        \"\"\"Test the function raising FileNotFoundError when the script file does not exist\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func()\n    @patch(\"os.path.isfile\", return_value=True)\n    @patch(\"subprocess.call\", side_effect=Exception(\"Script failed\"))\n    def test_script_execution_failure(self, mock_subprocess, mock_os):\n        \"\"\"Test the function raising RuntimeError on script execution failure\"\"\"\n        with self.assertRaises(RuntimeError):\n            task_func()\n    @patch(\"os.path.isfile\", return_value=True)\n    @patch(\"subprocess.call\", return_value=0)\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"{}\")\n    def test_custom_values_successful_script(self, mock_file, mock_subprocess, mock_os):\n        \"\"\"Test the function with custom script name and log file with successful execution\"\"\"\n        script_name = \"custom_backup.sh\"\n        log_file = \"/home/user/custom_backup_log.json\"\n        result = task_func(script_name, log_file)\n        self.assertIn('start_time', result)\n        self.assertIn('end_time', result)\n        self.assertEqual(result['exit_status'], 0)\n    @patch(\"os.path.isfile\", return_value=True)\n    @patch(\"subprocess.call\", return_value=0)\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"{}\")\n    def test_log_data_format(self, mock_file, mock_subprocess, mock_os):\n        \"\"\"Test that the timestamps are in the correct format\"\"\"\n        result = task_func()\n        self.assertTrue(result['start_time'].count(\":\") == 2)\n        self.assertTrue(result['end_time'].count(\":\") == 2)\n    @patch(\"os.path.isfile\", return_value=True)\n    @patch(\"subprocess.call\", return_value=1)\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"{}\")\n    def test_non_zero_exit_status(self, mock_file, mock_subprocess, mock_os):\n        \"\"\"Test the function with a non-zero exit status\"\"\"\n        result = task_func()\n        self.assertEqual(result['exit_status'], 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random hexadecimal string of a given length and then attempt to decode it in ASCII. The resulting ASCII string may contain non-printable characters or be shorter than the input length.\nThe function should output with:\n    str: The decoded ASCII string.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport string\nimport random\ndef task_func(length):\n```",
        "gt": "import binascii\nimport string\nimport random\ndef task_func(length):\n    HEX_CHARS = string.hexdigits.lower()\n    hex_string = \"\".join(random.choice(HEX_CHARS) for _ in range(length))\n    return binascii.unhexlify(hex_string).decode(\"utf-8\", \"ignore\")",
        "test": "import unittest\nimport string\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_correct_length(self):\n        \"\"\"Test the length of the hexadecimal string before decoding.\"\"\"\n        random.seed(2)\n        length = 8\n        HEX_CHARS = string.hexdigits.lower()\n        hex_string = \"\".join(random.choice(HEX_CHARS) for _ in range(length))\n        result = task_func(length)\n        # Check if the length of the hexadecimal string before decoding is correct\n        self.assertEqual(len(hex_string), length)\n        self.assertEqual(result, \"]\")\n    def test_correct_type(self):\n        \"\"\"Test the type of the output.\"\"\"\n        random.seed(4)\n        result = task_func(6)\n        self.assertIsInstance(result, str)\n        self.assertEqual(result, \"y<\")\n    def test_non_empty_string_positive_length(self):\n        \"\"\"Test the output for a positive length.\"\"\"\n        random.seed(6)\n        result = task_func(6)\n        self.assertNotEqual(result, \"\")\n        self.assertEqual(result, \"\\x10\")\n    def test_zero_length(self):\n        \"\"\"Test the output for a zero length.\"\"\"\n        random.seed(8)\n        result = task_func(0)\n        self.assertEqual(result, \"\")\n    def test_negative_length_handling(self):\n        \"\"\"Test the output for a negative length.\"\"\"\n        random.seed(10)\n        result = task_func(-1)\n        self.assertEqual(result, \"\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots the cumulative probability distribution of a given NumPy array of numbers, representing how the cumulative probability increases with the sorted data indexes.\nNote that: In case of an all-zeros input, the cumulative probability remains at 0 across all indexes. The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve. The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and \"Cumulative Probability\" on the y-axis.\nThe function should raise the exception for: ValueError: If the input array contains negative numbers or NaNs. TypeError: If the input array contains non-numeric inputs.\nThe function should output with:\n    matplotlib.pyplot.Axes: The plot of cumulative probabilities.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data: np.ndarray) -> plt.Axes:\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        plt.close(\"all\")\n    def helper_assert_plot_attributes(self, ax):\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertIn(\"Cumulative Probability Plot\", ax.get_title())\n        self.assertIn(\"Index\", ax.get_xlabel())\n        self.assertIn(\"Cumulative Probability\", ax.get_ylabel())\n        lines = ax.get_lines()\n        self.assertIsInstance(\n            lines[0], Line2D, \"The plot should contain a Line2D object.\"\n        )\n        self.assertEqual(lines[0].get_marker(), \"o\", \"The marker should be 'o'.\")\n        self.assertEqual(lines[0].get_linestyle(), \"-\", \"The linestyle should be '-'.\")\n    def helper_assert_cumulative_probability_correctness(\n        self, ax, expected_cumulative_prob\n    ):\n        line = ax.get_lines()[0]\n        np.testing.assert_array_almost_equal(\n            line.get_ydata(),\n            expected_cumulative_prob,\n            decimal=2,\n            err_msg=\"Cumulative probability calculation is incorrect.\",\n        )\n    def test_negative_numbers(self):\n        data = np.array([-1, 0, 1, 2, 3])\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_nan_values(self):\n        data = np.array([1, 2, 3, np.nan, 5])\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_non_numeric_values(self):\n        data = np.array([1, 2, 3, \"hello\", 5])\n        with self.assertRaises(TypeError):\n            task_func(data)\n    def test_increasing_array(self):\n        data = np.array([1, 2, 3])\n        ax = task_func(data)\n        expected_cumulative_prob = np.array([1 / 6, 1 / 2, 1])\n        self.helper_assert_plot_attributes(ax=ax)\n        self.helper_assert_cumulative_probability_correctness(\n            ax=ax, expected_cumulative_prob=expected_cumulative_prob\n        )\n    def test_constant_array(self):\n        data = np.array([1, 1, 1, 1, 1])\n        ax = task_func(data)\n        self.helper_assert_plot_attributes(ax)\n        expected_cumulative_prob = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\n        self.helper_assert_cumulative_probability_correctness(\n            ax=ax, expected_cumulative_prob=expected_cumulative_prob\n        )\n    def test_zeros_array(self):\n        data = np.array([0, 0, 0, 0, 0])\n        ax = task_func(data)\n        self.helper_assert_plot_attributes(ax)\n        expected_cumulative_prob = np.array([0, 0, 0, 0, 0])\n        self.helper_assert_cumulative_probability_correctness(\n            ax=ax, expected_cumulative_prob=expected_cumulative_prob\n        )\n    def test_single_element_array(self):\n        data = np.array([7])\n        ax = task_func(data)\n        self.helper_assert_plot_attributes(ax)\n        expected_cumulative_prob = np.array([1])\n        self.helper_assert_cumulative_probability_correctness(\n            ax=ax, expected_cumulative_prob=expected_cumulative_prob\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize two lists of numbers using the StandardScaler from sklearn and visualize the standardized values using a bar plot.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing the standardized values.\n    matplotlib.axes.Axes: Axes object of the displayed bar plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(a, b, columns=['A', 'B']):\n    # Handle empty input lists by returning an empty DataFrame and Axes object\n    if len(a) == 0 or len(b) == 0:\n        fig, ax = plt.subplots()\n        plt.close(fig)  # Prevent empty plot from displaying\n        return pd.DataFrame(), ax\n\n    scaler = StandardScaler()\n    standardized_values = scaler.fit_transform(np.array([a, b]).T)\n    df = pd.DataFrame(standardized_values, columns=columns)\n\n    ax = df.plot(kind='bar')\n    plt.show()\n    return df, ax",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_standard_case(self):\n        \"\"\"Test the function with non-empty lists.\"\"\"\n        df, ax = task_func([1, 2, 3], [4, 5, 6])\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (3, 2))\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_empty_lists(self):\n        \"\"\"Test the function with empty lists.\"\"\"\n        df, ax = task_func([], [])\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.empty, True)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_unequal_length_lists(self):\n        \"\"\"Test the function with lists of unequal length. Expecting an exception.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([1, 2, 3], [4, 5])\n    def test_single_value_lists(self):\n        \"\"\"Test the function with single-value lists.\"\"\"\n        df, ax = task_func([1], [1])\n        self.assertEqual(df.shape, (1, 2))\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_large_lists(self):\n        \"\"\"Test the function with large lists.\"\"\"\n        df, ax = task_func(list(range(100)), list(range(100, 200)))\n        self.assertEqual(df.shape, (100, 2))\n        self.assertIsInstance(ax, matplotlib.axes.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all possible combinations of r elements from a given number list taken from JSON string input.\nNote that: The datetime to be extracted is located in the 'number_list' key in the JSON data.\nThe function should raise the exception for: Raise an Exception if the json_list is an invalid JSON, empty, or does not have 'number_list' key.\nThe function should output with:\n    list: A list of tuples, each tuple representing a combination.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport json\ndef task_func(json_list, r):\n```",
        "gt": "import itertools\nimport json\ndef task_func(json_list, r):\n    try:\n        # Convert JSON string to Python dictionary\n        data = json.loads(json_list)\n\n        # Extract number_list from dictionary\n        number_list = data['number_list']\n        return list(itertools.combinations(number_list, r))\n    except Exception as e:\n        raise e",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('{\"number_list\": [1, 2, 3, 4, 5]}', 3)\n        expected = [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        result = task_func('{\"number_list\": [\"a\", \"b\", \"c\"]}', 2)\n        expected = [('a', 'b'), ('a', 'c'), ('b', 'c')]\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        result = task_func('{\"number_list\": [1, 2, 3]}', 1)\n        expected = [(1,), (2,), (3,)]\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        with self.assertRaises(Exception):\n            result = task_func('[]', 1)\n    def test_case_5(self):\n        result = task_func('{\"number_list\": [1, 2]}', 3)\n        expected = []\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches data from a given CSV URL and returns a pandas DataFrame sorted based on the specified column. >>> task_func(\"http://example.com/data.csv\", sort_by_column=\"price\") id   title  price 2   3  Cherry    0.2 0   1   Apple    0.3 1   2  Banana    0.5\nThe function should raise the exception for: Exception: If the response status code is not 200.\nThe function should output with:\n    DataFrame: The pandas DataFrame that sorted based on the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n```",
        "gt": "import pandas as pd\nimport requests\nfrom io import StringIO\ndef task_func(csv_url, sort_by_column=\"title\"):\n    response = requests.get(csv_url)\n    response.raise_for_status()  # Raise an exception for invalid responses\n    csv_data = response.text\n    df = pd.read_csv(StringIO(csv_data))\n    sorted_df = df.sort_values(by=sort_by_column)\n    return sorted_df",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nimport pandas as pd\nimport requests\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_case_1(self, mock_get):\n        mock_csv_content = \"id,title,price\\n2,Banana,0.5\\n1,Apple,0.3\\n3,Cherry,0.2\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func(\"http://example.com/data.csv\", 'title')\n        expected_titles = [\"Apple\", \"Banana\", \"Cherry\"]\n        actual_titles = result['title'].tolist()\n        self.assertEqual(actual_titles, expected_titles)\n    @patch('requests.get')\n    def test_case_2(self, mock_get):\n        mock_csv_content = \"id,title,price\\n2,Banana,0.5\\n1,Apple,0.3\\n3,Cherry,0.2\\n\"\n        \n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func(\"http://example.com/tst.csv\", 'price')\n        self.assertEqual(result.iloc[0]['price'], 0.2)\n        self.assertEqual(result.iloc[1]['price'], 0.3)\n        self.assertEqual(result.iloc[2]['price'], 0.5)\n    @patch('requests.get')\n    def test_case_3(self, mock_get):\n        mock_csv_content = \"id,title,price\\n2,Banana,0.5\\n1,Apple,0.3\\n3,Cherry,0.2\\n\"\n        \n        \n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func(\"http://example.com/tst.csv\")\n        self.assertEqual(result.iloc[0]['title'], \"Apple\")\n        self.assertEqual(result.iloc[1]['title'], \"Banana\")\n        self.assertEqual(result.iloc[2]['title'], \"Cherry\")\n    @patch('requests.get')\n    def test_case_4(self, mock_get):\n        mock_csv_content =  \"id,title,price\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func(\"http://example.com/empty.csv\")\n        self.assertTrue(result.empty)\n    @patch('requests.get')\n    def test_case_5(self, mock_get):\n        mock_csv_content = \"id,name,age\\n2,John,25\\n1,Alice,30\\n3,Bob,20\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 200\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        \n        result = task_func(\"http://example.com/test_2.csv\", \"age\")\n        self.assertEqual(result.iloc[0]['name'], \"Bob\")\n        self.assertEqual(result.iloc[1]['name'], \"John\")\n        self.assertEqual(result.iloc[2]['name'], \"Alice\")\n    \n    @patch('requests.get')\n    def test_case_6(self, mock_get):\n        mock_csv_content =  \"id,title,price\\n\"\n        mock_response = requests.models.Response()\n        mock_response.status_code = 400\n        mock_response.headers['content-type'] = 'text/csv'\n        mock_response._content = mock_csv_content.encode('utf-8')\n        mock_get.return_value = mock_response\n        with self.assertRaises(Exception): \n            result = task_func(\"http://example.com/error.csv\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame containing ratings for a given list of products. Ratings are generated randomly based on the provided weights. The DataFrame is sorted by ratings in descending order.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two columns: 'Product' and 'Rating', sorted by 'Rating' in descending order.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n```",
        "gt": "import pandas as pd\nfrom random import choices, seed\ndef task_func(products, ratings, weights, random_seed=42):\n\n    seed(random_seed)  # Setting the seed for reproducibility\n    product_ratings = []\n\n    for product in products:\n        rating = choices(ratings, weights, k=1)[0]\n        product_ratings.append([product, rating])\n\n    df = pd.DataFrame(product_ratings, columns=[\"Product\", \"Rating\"])\n    df.sort_values(\"Rating\", ascending=False, inplace=True)\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.products = [\"iPhone\", \"iPad\", \"Macbook\", \"Airpods\", \"Apple Watch\"]\n        self.ratings = [1, 2, 3, 4, 5]\n        self.weights = [0.05, 0.1, 0.2, 0.3, 0.35]\n    def test_random_reproducibility(self):\n        df1 = task_func(self.products, self.ratings, self.weights, 42)\n        df2 = task_func(self.products, self.ratings, self.weights, 42)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_dataframe_structure(self):\n        df = task_func(self.products, self.ratings, self.weights)\n        self.assertEqual(list(df.columns), ['Product', 'Rating'])\n        self.assertEqual(len(df), len(self.products))\n    def test_rating_range(self):\n        df = task_func(self.products, self.ratings, self.weights)\n        self.assertTrue(df['Rating'].isin(self.ratings).all())\n    def test_sort_order(self):\n        df = task_func(self.products, self.ratings, self.weights)\n        sorted_df = df.sort_values('Rating', ascending=False)\n        pd.testing.assert_frame_equal(df, sorted_df)\n    def test_different_seeds(self):\n        df1 = task_func(self.products, self.ratings, self.weights, 42)\n        df2 = task_func(self.products, self.ratings, self.weights, 24)\n        with self.assertRaises(AssertionError):\n            pd.testing.assert_frame_equal(df1, df2)\n    \n    def test_values(self):\n        df1 = task_func(self.products, self.ratings, self.weights, 42)\n        df_list = df1.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['Apple Watch,5', 'iPhone,4', 'Macbook,3', 'Airpods,3', 'iPad,1']\n   \n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame with two columns, 'X' and 'Y', each filled with random integers within a specified range, and plots these points using a scatter plot. The visualization is created using Seaborn on top of Matplotlib. The function is designed to be parameter-free for simplicity, utilizing constants for configuration. No Parameters.\nThe function should output with:\n    pd.DataFrame: A DataFrame with 'X' and 'Y' columns containing the generated random integers.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants defining the range of random integers and the size of the DataFrame\nRANGE = 100\nSIZE = 1000\ndef task_func():\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants defining the range of random integers and the size of the DataFrame\nRANGE = 100\nSIZE = 1000\ndef task_func():\n    # Generate the DataFrame with random integers within the specified range [0, RANGE)\n    df = pd.DataFrame({\n        'X': np.random.randint(0, RANGE, SIZE),\n        'Y': np.random.randint(0, RANGE, SIZE)\n    })\n\n    # Draw a scatter plot using Seaborn for a more refined visual output\n    sns.scatterplot(data=df, x='X', y='Y')\n    plt.show()\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_dataframe_shape(self):\n        \"\"\"Test that the DataFrame has the correct shape.\"\"\"\n        df = task_func()\n        self.assertEqual(df.shape, (SIZE, 2))\n    def test_random_range(self):\n        \"\"\"Test that the random numbers fall within the specified range.\"\"\"\n        df = task_func()\n        self.assertTrue(df['X'].between(0, RANGE-1).all())\n        self.assertTrue(df['Y'].between(0, RANGE-1).all())\n    def test_columns_existence(self):\n        \"\"\"Ensure both 'X' and 'Y' columns exist.\"\"\"\n        df = task_func()\n        self.assertIn('X', df.columns)\n        self.assertIn('Y', df.columns)\n    def test_non_empty_dataframe(self):\n        \"\"\"Check that the DataFrame is not empty.\"\"\"\n        df = task_func()\n        self.assertFalse(df.empty)\n    def test_columns_type(self):\n        \"\"\"Test that 'X' and 'Y' columns are of integer type.\"\"\"\n        df = task_func()\n        self.assertTrue(np.issubdtype(df['X'].dtype, np.integer))\n        self.assertTrue(np.issubdtype(df['Y'].dtype, np.integer))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a set of 2D random points within a specified range and size, applies KMeans clustering to these points, and plots the results with cluster centroids. The function creates a scatter plot of the clustered points with each cluster displayed in a different color and the centroids of these clusters highlighted.\nThe function should output with:\n    A tuple containing the numpy array of data points and the fitted KMeans model.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\ndef task_func():\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n\n    return data, kmeans",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_data_size(self):\n        \"\"\"Ensure the generated data has the correct size.\"\"\"\n        data, _ = task_func()\n        self.assertEqual(data.shape, (SIZE, 2))\n    def test_cluster_centers_shape(self):\n        \"\"\"Check the shape of the cluster centers array.\"\"\"\n        _, kmeans = task_func()\n        self.assertEqual(kmeans.cluster_centers_.shape, (CLUSTERS, 2))\n    def test_fitted_model(self):\n        \"\"\"Verify the model is a KMeans instance and is fitted.\"\"\"\n        _, kmeans = task_func()\n        self.assertIsInstance(kmeans, KMeans)\n        self.assertTrue(hasattr(kmeans, 'labels_'))\n    def test_data_range(self):\n        \"\"\"Ensure that generated data points fall within the specified range.\"\"\"\n        data, _ = task_func()\n        self.assertTrue((data >= 0).all() and (data <= RANGE).all())\n    def test_cluster_labels(self):\n        \"\"\"Verify that cluster labels are assigned to each data point.\"\"\"\n        _, kmeans = task_func()\n        self.assertEqual(len(kmeans.labels_), SIZE)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Dataframe to show the football match results of teams 'Team' with random goals 'Goals' and penalties 'Penalty Cost', and create a bar plot of the results. Penalties are converted into fines according to the penalty costs.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing columns for teams, their goals, and penalty costs.\n    Axes: A matplotlib Axes object representing the bar plot of the results.\nYou should write self-contained code starting with:\n```\nfrom random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants (they can be overridden with default parameters)\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n```",
        "gt": "from random import randint, seed\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants (they can be overridden with default parameters)\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\ndef task_func(goals, penalties, teams=TEAMS, penalty_cost=PENALTY_COST, rng_seed=None):\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    # Ensure goals and penalties are treated as positive\n    goals = abs(goals)\n    penalties = abs(penalties)\n\n    match_results = []\n    for team in teams:\n        team_goals = randint(0, goals)\n        team_penalties = randint(0, penalties)\n        team_penalty_cost = penalty_cost * team_penalties\n        match_results.append([team, team_goals, team_penalty_cost])\n\n    results_df = pd.DataFrame(match_results, columns=['Team', 'Goals', 'Penalty Cost'])\n    ax = results_df.plot(kind='bar', x='Team', y=['Goals', 'Penalty Cost'], stacked=True)\n    plt.ylabel('Results')\n\n    return results_df, ax",
        "test": "import unittest\n# Unit Tests\nclass TestCases(unittest.TestCase):\n    def test_positive_outcomes(self):\n        \"\"\"Test the function with positive goals and penalties.\"\"\"\n        df, _ = task_func(5, 3, rng_seed=42)\n        # Check if the DataFrame is not empty and has the correct columns\n        self.assertFalse(df.empty)\n        self.assertListEqual(list(df.columns), ['Team', 'Goals', 'Penalty Cost'])\n    def test_zero_goals_penalties(self):\n        \"\"\"Test the function with zero goals and penalties.\"\"\"\n        df, _ = task_func(0, 0, teams=['Team A'], rng_seed=42)\n        # Check that goals and penalty costs are 0\n        self.assertTrue((df['Goals'] == 0).all())\n        self.assertTrue((df['Penalty Cost'] == 0).all())\n    def test_negative_input(self):\n        \"\"\"Ensure negative inputs are treated as positive.\"\"\"\n        df, _ = task_func(-5, -3, rng_seed=42)\n        # Check for absence of negative values in results\n        self.assertFalse((df['Goals'] < 0).any())\n        self.assertFalse((df['Penalty Cost'] < 0).any())\n    def test_single_team(self):\n        \"\"\"Test with a single team to ensure correct results.\"\"\"\n        df, _ = task_func(10, 5, teams=['Solo Team'], rng_seed=42)\n        # Ensure only one row exists and contains 'Solo Team'\n        self.assertEqual(len(df), 1)\n        self.assertEqual(df.iloc[0]['Team'], 'Solo Team')\n    def test_custom_penalty_cost(self):\n        \"\"\"Test the function with a custom penalty cost.\"\"\"\n        custom_cost = 500\n        df, _ = task_func(5, 3, penalty_cost=custom_cost, rng_seed=42)\n        # Validate that the penalty cost calculation uses the custom cost\n        self.assertTrue((df['Penalty Cost'] % custom_cost == 0).all() or (df['Penalty Cost'] == 0).all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw the phase of a complex function over a range of x and y and return the matplotlib axes object along with the 2D array of calculated phase values.\nThe function should raise the exception for: TypeError: If either `x` or `y` is not a numpy.ndarray. ValueError: If `x` and `y` do not have the same length.\nThe function should output with:\n    tuple: containing\n    matplotlib.axes.Axes: The axes object with the phase plot.\n    numpy.ndarray: The 2D array of calculated phase values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\ndef task_func(x, y):\n    # Type check for x and y\n    if not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        raise TypeError(\"x and y must be numpy.ndarray\")\n\n    # Handle empty arrays\n    if x.size == 0 or y.size == 0:\n        print(\"Empty x or y array provided.\")\n        return None, np.array([])  # Adjusted to return a tuple\n\n    # Check for mismatched array sizes\n    if len(x) != len(y):\n        raise ValueError(\"Mismatched array sizes: x and y must have the same length\")\n\n    Z = np.zeros((len(y), len(x)), dtype=float)\n    for i in range(len(y)):\n        for j in range(len(x)):\n            z = complex(x[j], y[i])\n            Z[i, j] = cmath.phase(z**2 - 1)\n\n    fig, ax = plt.subplots()\n    c = ax.imshow(Z, extent=(np.amin(x), np.amax(x), np.amin(y), np.amax(y)), origin='lower', cmap='hsv')\n    fig.colorbar(c, ax=ax, label=\"Phase (radians)\")\n    ax.grid()\n\n    return ax, Z",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cmath\nclass TestCases(unittest.TestCase):\n    def test_input_types(self):\n        \"\"\"Test the function with non-numpy array inputs.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func([1, 2, 3], np.array([1, 2, 3]))\n    def test_empty_arrays(self):\n        \"\"\"Test function with empty numpy arrays.\"\"\"\n        _, Z = task_func(np.array([]), np.array([]))\n        self.assertEqual(Z.size, 0)\n    def test_single_point(self):\n        \"\"\"Test the function with single-point arrays.\"\"\"\n        ax, Z = task_func(np.array([0]), np.array([0]))\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertIsInstance(Z, np.ndarray)\n    def test_phase_calculation(self):\n        \"\"\"Test phase calculation for known values.\"\"\"\n        x = np.array([1, -1])\n        y = np.array([0, 0])\n        _, Z = task_func(x, y)\n        expected_phases = np.array([cmath.phase((1 + 0j)**2 - 1), cmath.phase((-1 + 0j)**2 - 1)])\n        np.testing.assert_array_almost_equal(Z[0], expected_phases)\n    def test_mismatched_array_sizes(self):\n        \"\"\"Test function with arrays of different lengths.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(np.array([0]), np.array([0, 1]))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all possible 3-letter combinations of the alphabet, save them in a pandas DataFrame, and draw a histogram of the frequency of the first letters in these combinations. This function uses itertools.product to create all possible combinations of three letters. It then creates a DataFrame from these combinations and plots a histogram to show the frequency of each letter appearing as the first letter in these combinations.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with all 3-letter combinations.\n    Axes: A matplotlib Axes object representing the histogram plot.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport string\nimport pandas as pd\ndef task_func():\n```",
        "gt": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n    LETTERS = list(string.ascii_lowercase)\n    combinations = list(itertools.product(LETTERS, repeat=3))\n    df = pd.DataFrame(combinations, columns=[\"a\", \"b\", \"c\"])\n\n    # Getting value counts and ensuring the correct order of letters\n    value_counts = df[\"a\"].value_counts().reindex(LETTERS, fill_value=0)\n\n    # Plotting the histogram with the correct order\n    ax = value_counts.plot(kind=\"bar\")\n\n    return df, ax",
        "test": "import unittest\nimport itertools\nimport string\nimport matplotlib.pyplot as plt\nLETTERS = list(string.ascii_lowercase)\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func\"\"\"\n    def test_dataframe_shape(self):\n        \"\"\"\n        Test if the DataFrame has the correct shape (17576 rows, 3 columns)\n        \"\"\"\n        df, _ = task_func()\n        self.assertEqual(df.shape, (17576, 3))\n    def test_dataframe_columns(self):\n        \"\"\"\n        Test if the DataFrame has the correct column names (a, b, c)\n        \"\"\"\n        df, _ = task_func()\n        self.assertListEqual(list(df.columns), [\"a\", \"b\", \"c\"])\n    def test_histogram_plot(self):\n        \"\"\"\n        Test if the histogram plot is an instance of matplotlib Axes\n        \"\"\"\n        _, ax = task_func()\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_first_column_values(self):\n        \"\"\"\n        Test if the first column of the DataFrame contains only lowercase letters\n        \"\"\"\n        df, _ = task_func()\n        self.assertTrue(all(letter in string.ascii_lowercase for letter in df[\"a\"]))\n    def test_no_empty_values(self):\n        \"\"\"\n        Test if there are no empty values in the DataFrame\n        \"\"\"\n        df, _ = task_func()\n        self.assertFalse(df.isnull().values.any())\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Get the public IP address from a JSON response containing the IP address.\nNote that: The function needs to check whether the provided IP address is valid. If the IP address is not valid, the function will return 'Invalid IP address received'.\nThe function should output with:\n    str: The public IP address.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(ip_address):\n```",
        "gt": "import re\nimport json\n# Constants\nIP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\ndef task_func(ip_address):\n\n    try:\n        response = ip_address\n        data = json.loads(response)\n        ip = data['ip']\n        if re.match(IP_REGEX, ip):\n            return ip\n        else:\n            return 'Invalid IP address received'\n    except Exception as e:\n        return str(e)",
        "test": "import unittest\nimport json\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ip_address = json.dumps({'ip': '192.168.1.1'}).encode('utf-8')\n        \n        result = task_func(ip_address)\n        self.assertEqual(result, '192.168.1.1')\n    def test_case_2(self):\n        ip_address = json.dumps({'ip': '500.500.500.500'}).encode('utf-8')\n        \n        result = task_func(ip_address)\n        self.assertEqual(result, '500.500.500.500')\n    def test_case_3(self):\n        ip_address = json.dumps({'ip': '192.168.0.3'}).encode('utf-8')\n        \n        result = task_func(ip_address)\n        self.assertEqual(result, '192.168.0.3')\n    def test_case_4(self):\n        ip_address = json.dumps({'ip': ''}).encode('utf-8')\n        \n        result = task_func(ip_address)\n        self.assertEqual(result, 'Invalid IP address received')\n    def test_case_5(self):\n        ip_address = json.dumps({'ip': 'Non-JSON response'}).encode('utf-8')\n        \n        result = task_func(ip_address)\n        self.assertEqual(result, 'Invalid IP address received')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a Python dictionary into a JSON-formatted string, encode this string in base64 format, and send it as a 'payload' in a POST request to an API endpoint.\nThe function should output with:\n    requests.Response: The response object received from the API endpoint after the POST request.\nYou should write self-contained code starting with:\n```\nimport requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n```",
        "gt": "import requests\nimport json\nimport base64\ndef task_func(data, url=\"http://your-api-url.com\"):\n    json_data = json.dumps(data)\n    encoded_data = base64.b64encode(json_data.encode('ascii')).decode('ascii')\n    response = requests.post(url, json={\"payload\": encoded_data})\n    \n    return response",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport requests\nimport json\n# Mocking the requests.post method\ndef mock_post(*args, **kwargs):\n    mock_response = Mock()\n    mock_response.status_code = 200\n    mock_response.text = \"OK\"\n    return mock_response\nclass TestCases(unittest.TestCase):\n    @patch('requests.post', side_effect=mock_post)\n    def test_case_1(self, mock_post_method):\n        data = {'name': 'John', 'age': 30, 'city': 'New York'}\n        response = task_func(data, url=\"http://mock-api-url.com\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, \"OK\")\n    \n    @patch('requests.post', side_effect=mock_post)\n    def test_case_2(self, mock_post_method):\n        data = {'task': 'Write code', 'status': 'completed'}\n        response = task_func(data, url=\"http://mock-api-url.com\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, \"OK\")\n    @patch('requests.post', side_effect=mock_post)\n    def test_case_3(self, mock_post_method):\n        data = {}\n        response = task_func(data, url=\"http://mock-api-url.com\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, \"OK\")\n    @patch('requests.post', side_effect=mock_post)\n    def test_case_4(self, mock_post_method):\n        data = {'fruit': 'apple', 'color': 'red', 'taste': 'sweet'}\n        response = task_func(data, url=\"http://mock-api-url.com\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, \"OK\")\n    @patch('requests.post', side_effect=mock_post)\n    def test_case_5(self, mock_post_method):\n        data = {'country': 'USA', 'capital': 'Washington, D.C.'}\n        response = task_func(data, url=\"http://mock-api-url.com\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.text, \"OK\")\n    @patch('requests.post', side_effect=mock_post)\n    def test_case_6(self, mock_post_method):\n        # Test to verify that the POST request is made with the correct parameters\n        data = {'name': 'John', 'age': 30, 'city': 'New York'}\n        json_data = json.dumps(data)\n        encoded_data = base64.b64encode(json_data.encode('ascii')).decode('ascii')\n        task_func(data, url=\"http://mock-api-url.com\")\n        try:\n            mock_post_method.assert_called_once_with(\"http://mock-api-url.com\", data={\"payload\": encoded_data})\n        except:\n            mock_post_method.assert_called_once_with(\"http://mock-api-url.com\", json={\"payload\": encoded_data})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Filters rows in a DataFrame based on the starting letter of the values in the 'Word' column. It then calculates the lengths of these words and returns a box plot representing the distribution of these lengths.\nThe function should output with:\n    Axes: A box plot visualizing the distribution of the word lengths for words starting\n    with the specified letter. If the DataFrame is empty or the 'Word' column is missing,\n    returns None.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nimport time\ndef task_func(df, letter):\n```",
        "gt": "import seaborn as sns\nimport time\ndef task_func(df, letter):\n    start_time = time.time()\n    # Validate if 'Word' column exists in df\n    if 'Word' not in df.columns:\n        raise ValueError(\"The DataFrame should contain a 'Word' column.\")\n\n    # Handle empty DataFrame\n    if df.empty:\n        print(\"The DataFrame is empty.\")\n        return None\n\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    if filtered_df.empty:\n        print(f\"No words start with the letter '{letter}'.\")\n        return None\n\n    word_lengths = filtered_df['Word'].str.len()\n    ax = sns.boxplot(x=word_lengths)\n    ax.set_title(f\"Word Lengths Distribution for Words Starting with '{letter}'\")\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Check and set the backend\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.words = ['apple', 'banana', 'cherry', 'date', 'apricot', 'blueberry', 'avocado']\n        self.df = pd.DataFrame({'Word': self.words})\n    @patch('seaborn.boxplot')\n    def test_word_filtering(self, mock_boxplot):\n        \"\"\"Test if the function correctly filters words starting with a given letter.\"\"\"\n        task_func(self.df, 'a')\n        filtered_words = ['apple', 'apricot', 'avocado']\n        self.assertTrue(all(word.startswith('a') for word in filtered_words), \"Word filtering by letter 'a' failed.\")\n    @patch('seaborn.boxplot')\n    def test_boxplot_called(self, mock_boxplot):\n        \"\"\"Test if seaborn's boxplot is called when valid data is provided.\"\"\"\n        task_func(self.df, 'a')\n        mock_boxplot.assert_called_once()\n    @patch('matplotlib.pyplot.show')\n    def test_return_type(self, mock_show):\n        \"\"\"Test the return type is an Axes.\"\"\"\n        ax = task_func(self.df, 'a')\n        self.assertIsInstance(ax, plt.Axes)\n    def test_empty_dataframe(self):\n        \"\"\"Test handling of empty DataFrame.\"\"\"\n        empty_df = pd.DataFrame({'Word': []})\n        result = task_func(empty_df, 'a')\n        self.assertIsNone(result, \"Empty DataFrame should return None.\")\n    def test_no_word_column(self):\n        \"\"\"Test handling of DataFrame without 'Word' column.\"\"\"\n        df_without_word = pd.DataFrame({'NoWord': self.words})\n        with self.assertRaises(ValueError):\n            task_func(df_without_word, 'a')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Serialize an object using pickle and overwrite the specified file with this serialized data. Before writing, checks if the directory exists, creating it if necessary.\nThe function should output with:\n    bool: True if the operation is successful, False otherwise.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\ndef task_func(filename, data):\n```",
        "gt": "import pickle\nimport os\ndef task_func(filename, data):\n    try:\n        directory = os.path.dirname(filename)\n        if directory and not os.path.exists(directory):\n            os.makedirs(directory)\n\n        # Serialize the object and write it to the file\n        with open(filename, 'wb') as f:\n            pickle.dump(data, f)\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_data = {'key': 'value'}\n        self.filename = 'test_file.pkl'\n    def tearDown(self):\n        # Remove the file after the test\n        if os.path.exists(self.filename):\n            os.remove(self.filename)\n    def test_serialization_success(self):\n        # Test successful serialization\n        self.assertTrue(task_func(self.filename, self.test_data))\n        # Verify the file exists\n        self.assertTrue(os.path.exists(self.filename))\n    def test_serialization_readback(self):\n        # Test if the serialized then deserialized data matches the original data\n        task_func(self.filename, self.test_data)\n        with open(self.filename, 'rb') as f:\n            data_readback = pickle.load(f)\n        self.assertEqual(self.test_data, data_readback)\n    def test_serialization_failure(self):\n        # Test failure due to an invalid filename (e.g., directory does not exist)\n        result = task_func('/non/existent/path/' + self.filename, self.test_data)\n        self.assertFalse(result)\nimport unittest",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function generates a status report of room bookings for a specified date and displays a bar plot representing the booking statuses of various rooms. It validates the provided date, compiles a booking status report, and visualizes the data in a bar plot.\nThe function should raise the exception for: ValueError: Raised in two scenarios: 1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date. 2. If `date_str` refers to a past date.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing booking status for each room.\n    matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n```",
        "gt": "import pandas as pd\nfrom datetime import datetime\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\ndef task_func(date_str, booking_data):\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n\n    return report_df, ax",
        "test": "import unittest\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_future_date_valid_booking_data(self):\n        \"\"\"\n        Test task_func with a future date and valid booking data.\n        \"\"\"\n        future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n        booking_data = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n        report_df, _ = task_func(future_date, booking_data)\n        self.assertIn(\"Room1\", report_df[\"Room\"].values)\n        self.assertIn(\"Booked\", report_df[\"Booking Status\"].values)\n    def test_past_date(self):\n        \"\"\"\n        Test task_func with a past date to ensure it raises a ValueError.\n        \"\"\"\n        past_date = \"2020-01-01\"\n        booking_data = {\"Room1\": \"Booked\"}\n        with self.assertRaises(ValueError):\n            task_func(past_date, booking_data)\n    def test_invalid_date_format(self):\n        \"\"\"\n        Test task_func with an invalid date format to check for ValueError.\n        \"\"\"\n        invalid_date = \"15-06-2023\"\n        booking_data = {\"Room1\": \"Booked\"}\n        with self.assertRaises(ValueError):\n            task_func(invalid_date, booking_data)\n    def test_booking_data_for_nonexistent_room(self):\n        \"\"\"\n        Test task_func with booking data for a room not in the ROOMS constant.\n        \"\"\"\n        future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n        booking_data = {\"Room6\": \"Booked\"}\n        report_df, _ = task_func(future_date, booking_data)\n        self.assertIn(\"Not Listed\", report_df[\"Booking Status\"].values)\n    def test_no_booking_data(self):\n        \"\"\"\n        Test task_func with no booking data provided.\n        \"\"\"\n        future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n        booking_data = {}\n        report_df, _ = task_func(future_date, booking_data)\n        self.assertTrue((report_df[\"Booking Status\"] == \"Not Listed\").all())\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Searches for files in the specified directory that match a given regex pattern. This function walks through the directory, matches filenames against the pattern, and saves the matched file paths to a CSV file. It returns a DataFrame of these paths with colomn 'File Path'.\nThe function should output with:\n    pd.DataFrame: DataFrame with a single column 'File Path' of matched paths.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n```",
        "gt": "import os\nimport re\nimport pandas as pd\ndef task_func(pattern: str, directory: str, output_csv: str) -> pd.DataFrame:\n    matched_paths = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                matched_paths.append(os.path.join(root, file))\n\n    df = pd.DataFrame(matched_paths, columns=['File Path'])\n    df.to_csv(output_csv, index=False)\n\n    return df",
        "test": "import unittest\nimport shutil\nOUTPUT_DIR = './output'\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = OUTPUT_DIR\n        if not os.path.exists(self.test_dir):\n            os.makedirs(self.test_dir)\n        # Create test files\n        self.test_file1 = os.path.join(self.test_dir, \"test1.txt\")\n        self.test_file2 = os.path.join(self.test_dir, \"ignore.exe\")\n        with open(self.test_file1, 'w') as f:\n            f.write(\"This is a test file.\")\n        with open(self.test_file2, 'w') as f:\n            f.write(\"This file should be ignored.\")\n    def tearDown(self):\n        # Remove the test directory and all its contents\n        shutil.rmtree(self.test_dir, ignore_errors=True)\n    def test_file_matching(self):\n        \"\"\"Ensure function matches correct files.\"\"\"\n        output_csv = os.path.join(self.test_dir, \"matched_files.csv\")\n        df = task_func(r\".*\\.txt$\", self.test_dir, output_csv)\n        self.assertTrue(os.path.exists(output_csv))\n        self.assertIn(self.test_file1, df['File Path'].values)\n    def test_no_files_matched(self):\n        \"\"\"Test when no files match the pattern.\"\"\"\n        output_csv = os.path.join(self.test_dir, \"no_match.csv\")\n        df = task_func(r\".*\\.md$\", self.test_dir, output_csv)\n        self.assertTrue(df.empty)\n    def test_output_file_creation(self):\n        \"\"\"Ensure the output file is created.\"\"\"\n        output_csv = os.path.join(self.test_dir, \"output_creation.csv\")\n        _ = task_func(r\".*\\.txt$\", self.test_dir, output_csv)\n        self.assertTrue(os.path.exists(output_csv))\n    def test_correct_number_of_matches(self):\n        \"\"\"Test the number of files matched is correct.\"\"\"\n        output_csv = os.path.join(self.test_dir, \"correct_number.csv\")\n        df = task_func(r\".*\\.txt$\", self.test_dir, output_csv)\n        self.assertEqual(len(df), 1)\n    def test_pattern_specificity(self):\n        \"\"\"Ensure the regex pattern correctly distinguishes file types.\"\"\"\n        output_csv = os.path.join(self.test_dir, \"pattern_specificity.csv\")\n        df = task_func(r\"test1\\.txt$\", self.test_dir, output_csv)\n        self.assertEqual(len(df), 1)\n        self.assertIn(\"test1.txt\", df['File Path'].values[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a report on the file size in a directory and write it to a CSV file.\nThe function should output with:\n    str: The path of the CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport os.path\nimport csv\nimport collections\n# Constants\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n```",
        "gt": "import os\nimport os.path\nimport csv\nimport collections\n# Constants\nFILE_NAME = 'file_sizes.csv'\ndef task_func(my_path):\n\n    file_sizes = collections.defaultdict(int)\n\n    for dirpath, dirnames, filenames in os.walk(my_path):\n        for f in filenames:\n            fp = os.path.join(dirpath, f)\n            file_sizes[f] += os.path.getsize(fp)\n\n    with open(os.path.join(my_path, FILE_NAME), 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['File Name', 'Size'])\n        for row in file_sizes.items():\n            writer.writerow(row)\n\n    return os.path.join(my_path, FILE_NAME)",
        "test": "import unittest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def test_non_empty_directory(self):\n        with tempfile.TemporaryDirectory() as temp_dir:\n            # Create sample files\n            with open(os.path.join(temp_dir, 'file1.txt'), 'w') as f:\n                f.write('Hello')\n            with open(os.path.join(temp_dir, 'file2.txt'), 'w') as f:\n                f.write('World')\n            # Run the function\n            csv_path = task_func(temp_dir)\n            # Verify CSV file creation and contents\n            self.assertTrue(os.path.exists(csv_path), 'CSV file not created')\n            with open(csv_path, 'r') as csvfile:\n                reader = csv.reader(csvfile)\n                rows = list(reader)\n                self.assertEqual(len(rows), 3, 'Incorrect number of rows in CSV')\n                self.assertEqual(rows[1][1], '5', 'Incorrect file size for file1.txt')\n                self.assertEqual(rows[2][1], '5', 'Incorrect file size for file2.txt')\n    def test_empty_directory(self):\n        with tempfile.TemporaryDirectory() as temp_dir:\n            csv_path = task_func(temp_dir)\n            self.assertTrue(os.path.exists(csv_path), 'CSV file not created in empty directory')\n            with open(csv_path, 'r') as csvfile:\n                reader = csv.reader(csvfile)\n                rows = list(reader)\n                self.assertEqual(len(rows), 1, 'CSV file should only contain headers in empty directory')\n    def test_nested_directories(self):\n        with tempfile.TemporaryDirectory() as temp_dir:\n            # Create sample files in nested directories\n            os.makedirs(os.path.join(temp_dir, 'subdir1'))\n            os.makedirs(os.path.join(temp_dir, 'subdir2'))\n            with open(os.path.join(temp_dir, 'subdir1', 'file1.txt'), 'w') as f:\n                f.write('Hello')\n            with open(os.path.join(temp_dir, 'subdir2', 'file2.txt'), 'w') as f:\n                f.write('World')\n            # Run the function\n            csv_path = task_func(temp_dir)\n            # Verify CSV file creation and contents\n            self.assertTrue(os.path.exists(csv_path), 'CSV file not created for nested directories')\n            with open(csv_path, 'r') as csvfile:\n                reader = csv.reader(csvfile)\n                rows = list(reader)\n                self.assertEqual(len(rows), 3, 'Incorrect number of rows in CSV for nested directories')\n                self.assertEqual(rows[1][1], '5', 'Incorrect file size for subdir1/file1.txt')\n                self.assertEqual(rows[2][1], '5', 'Incorrect file size for subdir2/file2.txt')\n        \n    def test_single_file(self):\n        with tempfile.TemporaryDirectory() as temp_dir:\n            # Create sample files\n            with open(os.path.join(temp_dir, 'file1.txt'), 'w') as f:\n                f.write('Hellooooooooooo')\n            csv_path = task_func(temp_dir)\n            self.assertTrue(os.path.exists(csv_path), 'CSV file not created')\n    def test_large_number_of_files(self):\n        with tempfile.TemporaryDirectory() as temp_dir:\n            # Create a large number of files\n            for i in range(100):\n                with open(os.path.join(temp_dir, f'file{i}.txt'), 'w') as f:\n                    f.write(str(i))\n            \n            csv_path = task_func(temp_dir)\n            self.assertTrue(os.path.exists(csv_path), 'CSV file not created for large number of files')\n            with open(csv_path, 'r') as csvfile:\n                reader = csv.reader(csvfile)\n                rows = list(reader)\n                self.assertEqual(len(rows), 101, 'Incorrect number of rows for large number of files')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a normal distribution with the given mean and standard deviation. Creates a figure containing a histogram and a Q-Q plot of the generated samples.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n\n    return fig",
        "test": "import unittest\nfrom matplotlib import colors as mcolors\nfrom matplotlib.figure import Figure\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_standard_normal_distribution(self):\n        \"\"\"Test with standard normal distribution parameters (mu=0, sigma=1).\"\"\"\n        fig = task_func(0, 1)\n        self.assertIsInstance(fig, Figure)\n        self.assertEqual(len(fig.axes), 2)  # Should contain two subplots\n        self._test_histogram_attributes(fig.axes[0], expected_bins=30, color='g')\n        self._test_qq_plot_attributes(fig.axes[1])\n    def test_nonzero_mean(self):\n        \"\"\"Test with a nonzero mean.\"\"\"\n        mu = 5\n        sigma = 1\n        fig = task_func(mu, sigma)\n        self.assertIsInstance(fig, Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self._test_histogram_attributes(fig.axes[0], expected_bins=30, color='g')\n        self._test_qq_plot_attributes(fig.axes[1])\n    def test_different_standard_deviation(self):\n        \"\"\"Test with a different standard deviation.\"\"\"\n        mu = 0\n        sigma = 2\n        fig = task_func(mu, sigma)\n        self.assertIsInstance(fig, Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self._test_histogram_attributes(fig.axes[0], expected_bins=30, color='g')\n        self._test_qq_plot_attributes(fig.axes[1])\n    def test_negative_mean(self):\n        \"\"\"Test with a negative mean.\"\"\"\n        mu = -5\n        sigma = 1\n        fig = task_func(mu, sigma)\n        self.assertIsInstance(fig, Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self._test_histogram_attributes(fig.axes[0], expected_bins=30, color='g')\n        self._test_qq_plot_attributes(fig.axes[1])\n    def test_large_standard_deviation(self):\n        \"\"\"Test with a large standard deviation.\"\"\"\n        mu = 0\n        sigma = 5\n        fig = task_func(mu, sigma)\n        self.assertIsInstance(fig, Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self._test_histogram_attributes(fig.axes[0], expected_bins=30, color='g')\n        self._test_qq_plot_attributes(fig.axes[1])\n    def _test_histogram_attributes(self, ax, expected_bins, color):\n        \"\"\"Helper function to test histogram attributes.\"\"\"\n        n, bins, patches = ax.hist([], bins=expected_bins, color=color)  # Dummy histogram to get attributes\n        self.assertEqual(expected_bins, len(patches))  # The number of bars should match the number of bins\n        self.assertEqual(patches[0].get_facecolor(), mcolors.to_rgba(color))  # Checking the color of the bars\n    def _test_qq_plot_attributes(self, ax):\n        \"\"\"Helper function to test Q-Q plot attributes.\"\"\"\n        self.assertTrue(len(ax.get_lines()) > 0)  # Check if there are lines in the Q-Q plot",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "import pandas as pd\nTrain a random forest classifier to perform the classification of the rows in a dataframe with respect to the column of interest plot the bar plot of feature importance of each column in the dataframe. - The xlabel of the bar plot should be 'Feature Importance Score', the ylabel 'Features' and the title 'Visualizing Important Features'. - Sort the feature importances in a descending order. - Use the feature importances on the x-axis and the feature names on the y-axis.\nThe function should output with:\n    sklearn.model.RandomForestClassifier : The random forest classifier trained on the input data.\n    matplotlib.axes.Axes: The Axes object of the plotted data.\nYou should write self-contained code starting with:\n```\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n```",
        "gt": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, target_column):\n\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    model = RandomForestClassifier(random_state=42).fit(X, y)\n    feature_imp = pd.Series(model.feature_importances_, index=X.columns).sort_values(\n        ascending=False\n    )\n    plt.figure(figsize=(10, 5))\n    ax = sns.barplot(x=feature_imp, y=feature_imp.index)\n    ax.set_xlabel(\"Feature Importance Score\")\n    ax.set_ylabel(\"Features\")\n    ax.set_title(\"Visualizing Important Features\")\n    return model, ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [4, 6, 2, 11],\n                \"B\": [7, 5, 3, 12],\n                \"C\": [1, 9, 8, 10],\n                \"D\": [1, 0, 1, 0],\n            }\n        )\n        target_column = \"D\"\n        model, ax = task_func(df, target_column)\n        self._validate_results(model, ax)\n    def test_case_2(self):\n        df = pd.DataFrame(\n            {\n                \"E\": [1, 2, 3, 4, 5],\n                \"F\": [6, 7, 8, 9, 10],\n                \"G\": [11, 12, 13, 14, 15],\n                \"H\": [0, 0, 1, 0, 1],\n            }\n        )\n        target_column = \"H\"\n        model, ax = task_func(df, target_column)\n        self._validate_results(model, ax)\n    def test_case_3(self):\n        df = pd.DataFrame(\n            {\n                \"I\": [21, 17, -2, 33, 11, 19],\n                \"J\": [-3, -25, 3, 12, 2, 2],\n                \"K\": [31, 29, 8, -10, -2, -1],\n                \"L\": [6, 5, 4, 40, -35, 23],\n                \"M\": [1, 1, 1, 0, 0, 0],\n            }\n        )\n        target_column = \"M\"\n        model, ax = task_func(df, target_column)\n        self._validate_results(model, ax)\n    def test_case_4(self):\n        df = pd.DataFrame(\n            {\n                \"N\": [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5],\n                \"O\": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],\n            }\n        )\n        target_column = \"O\"\n        model, ax = task_func(df, target_column)\n        self._validate_results(model, ax)\n    def test_case_5(self):\n        df = pd.DataFrame(\n            {\n                \"P\": [-1, -1, -1, -1],\n                \"Q\": [-1, -1, -1, 1],\n                \"R\": [-1, -1, 1, 1],\n                \"S\": [-1, 1, 1, 1],\n                \"T\": [1, -1, 1, -1],\n                \"U\": [1, 1, 0, 1],\n                \"V\": [0, -1, 0, 0],\n                \"W\": [-1, 0, 1, 1],\n                \"X\": [1, 0, 1, 0],\n            }\n        )\n        target_column = \"X\"\n        model, ax = task_func(df, target_column)\n        self._validate_results(model, ax)\n    def _validate_results(self, model, ax):\n        # Asserting that the trained model is an instance of RandomForestClassifier\n        self.assertIsInstance(model, RandomForestClassifier)\n        # Asserting that the axes object is returned for visualization\n        self.assertIsInstance(ax, plt.Axes)\n        # Asserting that the title of the plot is as expected\n        self.assertEqual(ax.get_title(), \"Visualizing Important Features\")\n        self.assertEqual(ax.get_xlabel(), \"Feature Importance Score\")\n        self.assertEqual(ax.get_ylabel(), \"Features\")\n        # Feature importances\n        self.assertListEqual(\n            sorted(list(model.feature_importances_))[::-1],\n            [bar.get_width() for bar in ax.patches],\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save the provided Pandas DataFrame \"df\" in a pickle file with the given name, read it back for validation, and delete the intermediate file.\nThe function should output with:\n    loaded_df (pd.DataFrame): The loaded DataFrame from the specified file.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n```",
        "gt": "import pickle\nimport os\ndef task_func(df, file_name=\"save.pkl\"):\n    with open(file_name, \"wb\") as file:\n        pickle.dump(df, file)\n\n    with open(file_name, \"rb\") as file:\n        loaded_df = pickle.load(file)\n\n    os.remove(file_name)\n\n    return loaded_df",
        "test": "import unittest\nimport os\nimport pandas as pd\nimport numpy as np\nimport tempfile\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n    def tearDown(self):\n        self.temp_dir.cleanup()\n    def test_case_1(self):\n        # Test with random integers\n        df = pd.DataFrame(\n            np.random.randint(0, 100, size=(100, 4)), columns=list(\"ABCD\")\n        )\n        file_path = os.path.join(self.temp_dir.name, \"test.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(df.equals(loaded_df))\n        self.assertFalse(os.path.exists(file_path))\n    def test_case_2(self):\n        # Test with floats\n        df = pd.DataFrame(np.random.rand(50, 3), columns=list(\"XYZ\"))\n        file_path = os.path.join(self.temp_dir.name, \"floats.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(df.equals(loaded_df))\n        self.assertFalse(os.path.exists(file_path))\n    def test_case_3(self):\n        # Test with strings\n        df = pd.DataFrame({\"A\": [\"foo\", \"bar\", \"baz\"], \"B\": [\"qux\", \"quux\", \"corge\"]})\n        file_path = os.path.join(self.temp_dir.name, \"strings.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(df.equals(loaded_df))\n        self.assertFalse(os.path.exists(file_path))\n    def test_case_4(self):\n        # Test with empty dataframe\n        df = pd.DataFrame()\n        file_path = os.path.join(self.temp_dir.name, \"empty.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(df.equals(loaded_df))\n        self.assertFalse(os.path.exists(file_path))\n    def test_case_5(self):\n        # Test with datetime\n        df = pd.DataFrame(\n            {\"Date\": [datetime(2020, 1, 1), datetime(2020, 1, 2)], \"Value\": [10, 20]}\n        )\n        file_path = os.path.join(self.temp_dir.name, \"datetime.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(df.equals(loaded_df))\n        self.assertFalse(os.path.exists(file_path))\n    def test_case_6(self):\n        # Test larger dataframe\n        df = pd.DataFrame(\n            np.random.randint(0, 100, size=(10000, 10)),\n            columns=[f\"Col{i}\" for i in range(10)],\n        )\n        file_path = os.path.join(self.temp_dir.name, \"large.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(df.equals(loaded_df))\n        self.assertFalse(os.path.exists(file_path))\n    def test_case_7(self):\n        # Test single entry dataframe\n        df = pd.DataFrame({\"Single\": [42]})\n        file_path = os.path.join(self.temp_dir.name, \"test_file_small.pkl\")\n        loaded_df = task_func(df, file_path)\n        self.assertTrue(\n            df.equals(loaded_df), \"Loaded DataFrame does not match the original.\"\n        )\n        self.assertFalse(os.path.exists(file_path))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Look for all ascendingly sorted files in a directory that start with a given pattern, and return the number of files against their size. You should return a pandas DataFrame with 2 columns 'File' and 'Size' with correspond to the file name and the size respectively.\nThe function should output with:\n    pandas.DataFrame: A pandas DataFrame with file names and their sizes.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n```",
        "gt": "import pandas as pd\nimport re\nimport os\ndef task_func(dir_path: str, pattern: str = '^EMP'):\n    file_sizes = []\n    for file in sorted(os.listdir(dir_path)):\n        if re.match(pattern, file):\n            file_sizes.append((file, os.path.getsize(os.path.join(dir_path, file))))\n\n    df = pd.DataFrame(file_sizes, columns=['File', 'Size'])\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.f_1 = os.path.join(self.test_dir, \"EMP001.doc\")\n        self.f_2 = os.path.join(self.test_dir, \"EMP002.doc\")\n        self.f_3 = os.path.join(self.test_dir, \"EMP003.doc\")\n        self.f_4 = os.path.join(self.test_dir, \"NOTEMP1.txt\")\n        self.f_5 = os.path.join(self.test_dir, \"NOTEMP2.txt\")\n        self.f_6 = os.path.join(self.test_dir, \"A1.txt\")\n        self.f_7 = os.path.join(self.test_dir, \"A2.txt\")\n        self.f_8 = os.path.join(self.test_dir, \"A3.txt\")\n        self.f_9 = os.path.join(self.test_dir, \"B1.py\")\n        self.f_10 = os.path.join(self.test_dir, \"B2.py\")\n        for i, element in enumerate([self.f_1, self.f_2, self.f_3, self.f_4, self.f_5, self.f_6, self.f_7, self.f_8, self.f_9, self.f_10]) :\n            with open(element, \"w\") as f :\n                f.write(f\"Test content {i+1}\")\n    def tearDown(self):\n        for filename in [\n            self.f_1, self.f_2, self.f_3, self.f_4, self.f_5,\n            self.f_6, self.f_7, self.f_8, self.f_9, self.f_10\n        ]:\n            os.remove(filename)\n        os.rmdir(self.test_dir)\n    def test_case_1(self):\n        report = task_func(self.test_dir)\n        self.assertEqual(len(report), 3)\n        for i, row in report.iterrows():\n            self.assertEqual(row['Size'], os.path.getsize(os.path.join(self.test_dir, f\"EMP00{i+1}.doc\")))\n    def test_case_2(self):\n        report = task_func(self.test_dir, pattern=\"^NOTEMP\")\n        self.assertEqual(len(report), 2)\n        for i, row in report.iterrows():\n            self.assertEqual(row['Size'], os.path.getsize(os.path.join(self.test_dir, f\"NOTEMP{i+1}.txt\")))\n    def test_case_3(self):\n        report = task_func(self.test_dir, pattern=\"NOTFOUND\")\n        expected_df = pd.DataFrame(\n            {\n                \"File\" : [],\n                \"Size\" : []\n            }\n        ).astype({\"File\" : \"object\", \"Size\" : \"object\"})\n        self.assertTrue(\n            report.empty\n        )\n        self.assertTrue(report.shape == expected_df.shape)\n    def test_case_4(self):\n        report = task_func(self.test_dir, pattern=\"^A\")\n        self.assertEqual(len(report), 3)\n        for i, row in report.iterrows():\n            self.assertEqual(row['Size'], os.path.getsize(os.path.join(self.test_dir, f\"A{i+1}.txt\")))\n    def test_case_5(self):\n        report = task_func(self.test_dir, pattern=\"^B\")\n        self.assertEqual(len(report), 2)\n        for i, row in report.iterrows():\n            self.assertEqual(row['Size'], os.path.getsize(os.path.join(self.test_dir, f\"B{i+1}.py\")))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame that displays the grades of a randomly selected group of students in multiple courses. Calculate the average grade in each course, the number of students with a passing grade (>= 60), and visualize this information using a bar plot with title 'Course-wise Average and Passing Grade Counts'.\nThe function should output with:\n    Tuple[pd.DataFrame, plt.Axes]: A tuple containing the generated DataFrame and the bar plot's Axes object.\nYou should write self-contained code starting with:\n```\nfrom random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n```",
        "gt": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndef task_func(num_students):\n    # Generate sample students and grades\n\n    # Constants\n    STUDENTS = ['Student' + str(i) for i in range(1, 101)]\n    COURSES = ['Course' + str(i) for i in range(1, 6)]\n\n    students_sample = sample(STUDENTS, num_students)\n    grades = np.random.randint(40, 101, size=(num_students, len(COURSES)))\n\n    # Create DataFrame\n    df = pd.DataFrame(grades, index=students_sample, columns=COURSES)\n\n    # Create plot\n    fig, ax = plt.subplots()\n    df.mean().plot(kind='bar', ax=ax, position=1, width=0.4, color='b', label='Average Grade')\n    df[df >= 60].count().plot(kind='bar', ax=ax, position=0, width=0.4, color='g', label='Passing Grade Counts')\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.legend()\n\n    return df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Test with 10 students\n        df, ax = task_func(10)\n        \n        # Check DataFrame dimensions\n        self.assertEqual(df.shape, (10, 5))\n        \n        # Check plot title\n        self.assertEqual(ax.get_title(), 'Course-wise Average and Passing Grade Counts')\n    \n    def test_case_2(self):\n        # Test with 50 students\n        df, ax = task_func(50)\n        \n        # Check DataFrame dimensions\n        self.assertEqual(df.shape, (50, 5))\n        \n        # Check plot title\n        self.assertEqual(ax.get_title(), 'Course-wise Average and Passing Grade Counts')\n        \n    def test_case_3(self):\n        # Test with 100 students\n        df, ax = task_func(100)\n        \n        # Check DataFrame dimensions\n        self.assertEqual(df.shape, (100, 5))\n        \n        # Check plot title\n        self.assertEqual(ax.get_title(), 'Course-wise Average and Passing Grade Counts')\n    \n    def test_case_4(self):\n        # Test with 1 student\n        df, ax = task_func(1)\n        \n        # Check DataFrame dimensions\n        self.assertEqual(df.shape, (1, 5))\n        \n        # Check plot title\n        self.assertEqual(ax.get_title(), 'Course-wise Average and Passing Grade Counts')\n        \n    def test_case_5(self):\n        # Test with 5 students\n        df, ax = task_func(5)\n        \n        # Check DataFrame dimensions\n        self.assertEqual(df.shape, (5, 5))\n        \n        # Check plot title\n        self.assertEqual(ax.get_title(), 'Course-wise Average and Passing Grade Counts')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "After a random delay, generate a Django HttpResponse with JSON data to simulate the latency of the network.\nThe function should output with:\n    HttpResponse: A Django HttpResponse with JSON data.\nYou should write self-contained code starting with:\n```\nfrom django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\ndef task_func(data, min_delay, max_delay):\n```",
        "gt": "from django.http import HttpResponse\nfrom django.conf import settings\nimport random\nimport time\ndef task_func(data, min_delay, max_delay):\n\n    # Generate a random delay\n    delay = random.uniform(min_delay, max_delay)\n\n    # Wait for the delay\n    time.sleep(delay)\n\n    response = HttpResponse(data, content_type='application/json')\n\n    return response",
        "test": "import unittest\nimport json\nimport random\nif not settings.configured:\n    settings.configure(DEBUG=True)\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        random.seed(0)\n        data = json.dumps({\"key\": \"value\"})\n        response = task_func(data, 1, 2)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(json.loads(response.content), {\"key\": \"value\"})\n    def test_case_2(self):\n        random.seed(0)\n        data = json.dumps({\"test\": \"data\", \"sample\": \"value\"})\n        response = task_func(data, 0, 1)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(json.loads(response.content), {\"test\": \"data\", \"sample\": \"value\"})\n    def test_case_3(self):\n        random.seed(0)\n        data = json.dumps({\"hello\": \"world\"})\n        response = task_func(data, 1, 3)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(json.loads(response.content), {\"hello\": \"world\"})\n    def test_case_4(self):\n        random.seed(0)\n        data = json.dumps({})\n        response = task_func(data, 0, 0)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(json.loads(response.content), {})\n    def test_case_5(self):\n        random.seed(0)\n        data = json.dumps({\"a\": 1, \"b\": 2, \"c\": 3})\n        response = task_func(data, 2, 4)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(json.loads(response.content), {\"a\": 1, \"b\": 2, \"c\": 3})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Insert random data into an SQLite3 table that contains random names, ages, and heights. If the table does not exist, it will be created. This function uses the following constants: - NAMES: List of possible names ['John', 'Jane', 'Steve', 'Emma', 'Liam', 'Olivia']. - AGES: Range of possible ages from 18 to 64. - HEIGHTS: Range of possible heights from 150cm to 199cm.\nThe function should raise the exception for: ValueError: If num_entries is negative.\nThe function should output with:\n    int: The number of rows inserted.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport numpy as np\nfrom random import choice, seed\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n```",
        "gt": "import sqlite3\nimport numpy as np\nfrom random import choice, seed\ndef task_func(db_path, table_name, num_entries, random_seed=None):\n    # Setting the random seed if provided\n    if random_seed is not None:\n        seed(random_seed)\n        np.random.seed(random_seed)\n\n    if num_entries < 0:\n        raise ValueError(\"num_entries cannot be negative.\")\n\n    NAMES = [\"John\", \"Jane\", \"Steve\", \"Emma\", \"Liam\", \"Olivia\"]\n    AGES = list(range(18, 65))\n    HEIGHTS = list(range(150, 200))\n\n    conn = sqlite3.connect(db_path)\n    cur = conn.cursor()\n\n    table_creation_sql = (\n        \"CREATE TABLE IF NOT EXISTS {} (name TEXT, age INTEGER, height INTEGER)\".format(\n            table_name\n        )\n    )\n    cur.execute(table_creation_sql)\n\n    inserted_rows = 0\n    for _ in range(num_entries):\n        name = choice(NAMES)\n        age = choice(AGES)\n        height = choice(HEIGHTS)\n        insertion_sql = \"INSERT INTO {} VALUES (?, ?, ?)\".format(table_name)\n        cur.execute(insertion_sql, (name, age, height))\n        inserted_rows += cur.rowcount\n\n    conn.commit()\n\n    return inserted_rows",
        "test": "import unittest\nimport os\nimport sqlite3\nimport tempfile\nclass TestCases(unittest.TestCase):\n    NAMES = [\"John\", \"Jane\", \"Steve\", \"Emma\", \"Liam\", \"Olivia\"]\n    AGES = range(18, 65)\n    HEIGHTS = range(150, 200)\n    def setUp(self):\n        # Setup a temporary directory before each test\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.db_path = os.path.join(self.temp_dir.name, \"test.db\")\n    def tearDown(self):\n        # Clean up the temporary directory after each test\n        self.temp_dir.cleanup()\n    def test_case_1(self):\n        # Test inserting 50 entries with a fixed seed\n        result = task_func(self.db_path, \"SamplePeople\", 50, random_seed=42)\n        self.assertEqual(result, 50)\n    def test_case_2(self):\n        # Test inserting 30 entries into a new table with a fixed seed\n        result = task_func(self.db_path, \"NewPeople\", 30, random_seed=42)\n        self.assertEqual(result, 30)\n    def test_case_3(self):\n        # Test inserting 20 entries, verifying smaller batch works as expected\n        result = task_func(self.db_path, \"SamplePeople\", 20, random_seed=42)\n        self.assertEqual(result, 20)\n    def test_case_4(self):\n        # Test inserting a large number of entries (200) with a fixed seed\n        result = task_func(self.db_path, \"SamplePeople\", 200, random_seed=42)\n        self.assertEqual(result, 200)\n    def test_case_5(self):\n        # Test inserting 0 entries to check handling of empty input\n        result = task_func(self.db_path, \"SamplePeople\", 0, random_seed=42)\n        self.assertEqual(result, 0)\n    def test_case_6(self):\n        # Test the content of the rows for correctness against expected values\n        task_func(self.db_path, \"ContentCheck\", 10, random_seed=42)\n        conn = sqlite3.connect(self.db_path)\n        cur = conn.cursor()\n        cur.execute(\"SELECT * FROM ContentCheck\")\n        rows = cur.fetchall()\n        for row in rows:\n            self.assertIn(row[0], self.NAMES)\n            self.assertIn(row[1], self.AGES)\n            self.assertIn(row[2], self.HEIGHTS)\n    def test_case_7(self):\n        # Test invalid db path\n        with self.assertRaises(sqlite3.OperationalError):\n            task_func(\"/invalid/path.db\", \"TestTable\", 10)\n    def test_case_8(self):\n        # Test invalid table names (SQL keywords)\n        with self.assertRaises(sqlite3.OperationalError):\n            task_func(self.db_path, \"Select\", 10)\n    def test_case_9(self):\n        # Test handling invalid num_entries\n        with self.assertRaises(Exception):\n            task_func(self.db_path, \"TestTable\", -1)\n        with self.assertRaises(TypeError):\n            task_func(self.db_path, \"TestTable\", \"ten\")\n    def test_case_10(self):\n        # Test handling invalid random seed\n        with self.assertRaises(Exception):\n            task_func(self.db_path, \"TestTable\", 10, random_seed=\"invalid\")\n    def test_case_11(self):\n        # Test different schema in existing table\n        conn = sqlite3.connect(self.db_path)\n        cur = conn.cursor()\n        cur.execute(\"CREATE TABLE TestTable (id INTEGER)\")\n        conn.close()\n        with self.assertRaises(sqlite3.OperationalError):\n            task_func(self.db_path, \"TestTable\", 10)\n    def test_case_12(self):\n        # Insert a known set of data and verify its integrity\n        task_func(self.db_path, \"IntegrityCheck\", 1, random_seed=42)\n        conn = sqlite3.connect(self.db_path)\n        cur = conn.cursor()\n        cur.execute(\"SELECT * FROM IntegrityCheck\")\n        row = cur.fetchone()\n        self.assertIsNotNone(row)\n    def test_case_13(self):\n        # Test against SQL injection in table_name parameter\n        malicious_name = \"Test; DROP TABLE IntegrityCheck;\"\n        with self.assertRaises(sqlite3.OperationalError):\n            task_func(self.db_path, malicious_name, 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Parses a JSON string to find a URL associated with a specified key, downloads the file from the URL, and saves it with a timestamped filename. The filename format is '{unknown_key}_{timestamp}.txt', where 'timestamp' is formatted as '%Y%m%d%H%M%S%f' to include the date and time down to microseconds. The file is saved in the specified directory or in the current working directory by default.\nThe function should output with:\n    str: The absolute path of the downloaded file, reflecting where it has been saved.\nYou should write self-contained code starting with:\n```\nimport json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n```",
        "gt": "import json\nimport requests\nimport os\nfrom datetime import datetime\ndef task_func(json_data, unknown_key, save_dir=None):\n    data = json.loads(json_data)\n    url = data[unknown_key]  # Assuming the key directly contains the URL\n    \n    response = requests.get(url)\n    \n    # Using datetime to include milliseconds in the timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    save_dir = save_dir or os.getcwd()\n    file_path = os.path.join(save_dir, filename)\n    \n    with open(file_path, 'wb') as f:\n        f.write(response.content)\n    return file_path",
        "test": "import unittest\nimport os\nimport tempfile\nimport shutil\nfrom unittest.mock import patch\ndef mock_requests_get(*args, **kwargs):\n    class MockResponse:\n        def __init__(self):\n            self.content = b\"Fake content\"  # Mocked file content\n    return MockResponse()\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up a temporary directory to isolate file system effects\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Clean up the temporary directory after each test\n        shutil.rmtree(self.test_dir)\n    @patch('requests.get', mock_requests_get)\n    def test_download_with_direct_key(self):\n        # Test downloading a file with a direct key in JSON and check content\n        json_str = '{\"unknown\": \"https://example.com/file.txt\"}'\n        file_path = task_func(json_str, 'unknown', save_dir=self.test_dir)\n        self.assertTrue(os.path.exists(file_path))\n        with open(file_path, 'rb') as f:\n            content = f.read()\n        self.assertEqual(content, b\"Fake content\")\n    @patch('requests.get', mock_requests_get)\n    def test_download_with_incorrect_key(self):\n        # Ensure that a KeyError is raised for a nonexistent key in JSON\n        json_str = '{\"unknown\": \"https://example.com/file.txt\"}'\n        with self.assertRaises(KeyError):\n            task_func(json_str, 'nonexistent', save_dir=self.test_dir)\n    \n    @patch('requests.get', mock_requests_get)\n    def test_download_with_specified_directory(self):\n        # Test file download into a specified directory and verify content\n        json_str = '{\"anotherkey\": \"https://example.com/file3.txt\"}'\n        file_path = task_func(json_str, 'anotherkey', save_dir=self.test_dir)\n        self.assertTrue(os.path.exists(file_path))\n        with open(file_path, 'rb') as f:\n            content = f.read()\n        self.assertEqual(content, b\"Fake content\")\n    @patch('requests.get', mock_requests_get)\n    def test_download_to_default_directory(self):\n        # Test downloading a file to the default directory and verify content\n        json_str = '{\"key4\": \"https://example.com/file4.txt\"}'\n        file_path = task_func(json_str, 'key4')\n        self.assertTrue(os.path.exists(file_path))\n        with open(file_path, 'rb') as f:\n            content = f.read()\n        self.assertEqual(content, b\"Fake content\")\n        os.remove(file_path)  # Cleanup since this is in the current directory\n    @patch('requests.get', mock_requests_get)\n    def test_multiple_downloads(self):\n        # Test downloading multiple files to check unique timestamp in filenames\n        json_str1 = '{\"key5\": \"https://example.com/file5.txt\"}'\n        json_str2 = '{\"key5\": \"https://example.com/file6.txt\"}'\n        file_path1 = task_func(json_str1, 'key5', save_dir=self.test_dir)\n        file_path2 = task_func(json_str2, 'key5', save_dir=self.test_dir)\n        self.assertNotEqual(file_path1, file_path2)\n        self.assertTrue(os.path.exists(file_path1))\n        self.assertTrue(os.path.exists(file_path2))\n        with open(file_path1, 'rb') as f:\n            content1 = f.read()\n        with open(file_path2, 'rb') as f:\n            content2 = f.read()\n        self.assertEqual(content1, b\"Fake content\")\n        self.assertEqual(content2, b\"Fake content\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a report on the number of animals in a zoo. For each animal, generate a random count within a specified range, calculate the mean, median, and standard deviation of these counts, and return a DataFrame with these statistics. Additionally, generate a bar chart of the counts.\nNote that: The mode is not included in the returned DataFrame due to the possibility of no repeating values in the randomly generated counts.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns ['Animal', 'Mean', 'Median', 'Standard Deviation'].\n    Each animal's count is randomly generated 10 times within the range 1 to 100, inclusive.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\ndef task_func(animals=None, seed=42):\n```",
        "gt": "import pandas as pd\nfrom random import randint, seed as random_seed\nimport statistics\nimport numpy as np\ndef task_func(animals=None, seed=42):\n    random_seed(seed)\n    animals = animals or ['Lion', 'Elephant', 'Tiger', 'Giraffe', 'Panda']\n    report_data = []\n\n    for animal in animals:\n        counts = [randint(1, 100) for _ in range(10)]\n        mean = statistics.mean(counts)\n        median = statistics.median(counts)\n        mode = statistics.mode(counts)\n        std_dev = np.std(counts)\n        report_data.append([animal, mean, median, mode, std_dev])\n    \n    report_df = pd.DataFrame(report_data, columns=['Animal', 'Mean', 'Median', 'Mode', 'Standard Deviation'])\n\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_default_animals(self):\n        report = task_func()\n        \n        self.assertEqual(len(report), 5)  # Default number of animals\n        self.assertListEqual(list(report['Animal']), ['Lion', 'Elephant', 'Tiger', 'Giraffe', 'Panda'])\n        df_list = report.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(df_list))\n            \n        expect = ['Lion,42.0,30.5,95,33.250563904992646', 'Elephant,44.4,41.5,12,34.1970758983864', 'Tiger,61.1,71.0,30,28.76264939118092', 'Giraffe,51.8,54.5,54,29.208902752414375', 'Panda,35.8,32.0,44,24.595934623429134']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    def test_custom_animals(self):\n        custom_animals = ['Dog', 'Cat']\n        report = task_func(custom_animals)\n        self.assertEqual(len(report), len(custom_animals))\n        self.assertListEqual(list(report['Animal']), custom_animals)\n    def test_statistics_columns(self):\n        report = task_func()\n        expected_columns = ['Animal', 'Mean', 'Median', 'Mode', 'Standard Deviation']\n        self.assertListEqual(list(report.columns), expected_columns)\n    def test_positive_counts(self):\n        report = task_func()\n        self.assertTrue(all(report['Mean'] > 0))\n        self.assertTrue(all(report['Median'] > 0))\n        self.assertTrue(all(report['Mode'] > 0))\n        self.assertTrue(all(report['Standard Deviation'] >= 0))\n    def test_data_frame_structure(self):\n        report = task_func()\n        self.assertIsInstance(report, pd.DataFrame)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate word vectors from a list of texts using the gensim Word2Vec model and nltk.corpus.stopwords. The texts are first cleaned by removing all non-alphanumeric characters except space, lowercased, and stop words are removed.\nThe function should output with:\n    Word2Vec: A trained Word2Vec model.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n```",
        "gt": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(texts, stopwords=None):\n    if stopwords is None:\n        stopwords = nltk.corpus.stopwords.words('english')\n        \n    cleaned_texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    tokenized_texts = [[word for word in text.split() if word not in stopwords] for text in cleaned_texts]\n    \n    # Handle empty texts input by returning an untrained Word2Vec model\n    if not tokenized_texts:\n        return Word2Vec(vector_size=100)\n\n    model = Word2Vec(sentences=tokenized_texts, vector_size=100, window=5, min_count=1, workers=4)\n\n    return model",
        "test": "import unittest\nstopwords_mock = [\"is\", \"my\", \"a\", \"with\", \"and\", \"it\", \"to\", \"the\", \"of\", \"in\"]\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        texts = [\"Hello, World!\", \"Machine Learning is great\", \"Python is my favorite programming language\"]\n        model = task_func(texts, stopwords=stopwords_mock)\n        self.assertIsInstance(model, Word2Vec)\n        self.assertIn('python', model.wv.key_to_index)\n        \n    def test_case_2(self):\n        texts = [\"Hello!!!\", \"@Machine Learning\", \"Python###\"]\n        model = task_func(texts, stopwords=stopwords_mock)\n        self.assertIsInstance(model, Word2Vec)\n        self.assertIn('python', model.wv.key_to_index)\n        \n    def test_case_3(self):\n        texts = []\n        model = task_func(texts, stopwords=stopwords_mock)\n        self.assertIsInstance(model, Word2Vec)\n        \n    def test_case_4(self):\n        texts = [\"This is a long sentence with many words, and it should still work!\", \n                 \"Another long sentence to check the function's capability.\"]\n        model = task_func(texts, stopwords=stopwords_mock)\n        self.assertIsInstance(model, Word2Vec)\n        self.assertIn('long', model.wv.key_to_index)\n        \n    def test_case_5(self):\n        texts = [\"Bonjour\", \"Hola\", \"Ciao\"]\n        model = task_func(texts, stopwords=stopwords_mock)\n        self.assertIsInstance(model, Word2Vec)\n        self.assertIn('bonjour', model.wv.key_to_index)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame filled with random integers. The dimensions of the DataFrame (number of rows and columns) are determined by multiplying pairs of integers from nested lists within the input list of lists 'L'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with random integers.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\n# Constants\nRANGE = (1, 100)\ndef task_func(L):\n```",
        "gt": "import numpy as np\nimport pandas as pd\n# Constants\nRANGE = (1, 100)\ndef task_func(L):\n    rows, columns = L[0][0] * L[0][1], L[1][0] * L[1][1]\n    random_array = np.random.randint(RANGE[0], RANGE[1], size=(rows, columns))\n    df = pd.DataFrame(random_array)\n    \n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        result = task_func([[2, 3], [5, 6]])\n        self.assertEqual(result.shape, (2*3, 5*6))\n        self.assertTrue((result.values >= 1).all())\n        self.assertTrue((result.values <= 100).all())\n    def test_case_2(self):\n        result = task_func([[1, 1], [1, 1]])\n        self.assertEqual(result.shape, (1*1, 1*1))\n        self.assertTrue((result.values >= 1).all())\n        self.assertTrue((result.values <= 100).all())\n    def test_case_3(self):\n        result = task_func([[4, 5], [2, 3]])\n        self.assertEqual(result.shape, (4*5, 2*3))\n        self.assertTrue((result.values >= 1).all())\n        self.assertTrue((result.values <= 100).all())\n    def test_case_4(self):\n        result = task_func([[3, 2], [6, 5]])\n        self.assertEqual(result.shape, (3*2, 6*5))\n        self.assertTrue((result.values >= 1).all())\n        self.assertTrue((result.values <= 100).all())\n    def test_case_5(self):\n        result = task_func([[7, 8], [1, 2]])\n        self.assertEqual(result.shape, (7*8, 1*2))\n        self.assertTrue((result.values >= 1).all())\n        self.assertTrue((result.values <= 100).all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Shuffles the columns of a given 2D numpy array and visualizes it as a heatmap.\nNote that: Notes: This function uses the features list as labels for the heatmap's x-axis if features is provided; otherwise, it defaults to strings of the numerical labels starting from 1 up to the number of columns in the array.\nThe function should raise the exception for: ValueError: If 'features' is provided and does not match the number of columns in 'array'; and if 'array' is empty or not 2-dimensional.\nThe function should output with:\n    Axes: The matplotlib Axes object containing the heatmap.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(array, features=None, seed=None):\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    if array.size == 0 or len(array.shape) != 2:\n        raise ValueError(\"Input array must be 2-dimensional and non-empty.\")\n\n    if features is not None and len(features) != array.shape[1]:\n        raise ValueError(\"Features list must match the number of columns in the array.\")\n\n    shuffled_array = np.random.permutation(array.T).T\n\n    fig, ax = plt.subplots()\n    sns.heatmap(\n        shuffled_array,\n        xticklabels=features if features is not None else np.arange(array.shape[1]) + 1,\n        ax=ax,\n    )\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.array = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n        self.expected_labels = [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    def test_default_features(self):\n        \"\"\"Test heatmap with default features.\"\"\"\n        ax = task_func(self.array)\n        xticklabels = [tick.get_text() for tick in ax.get_xticklabels()]\n        self.assertEqual(xticklabels, self.expected_labels)\n        self.assertTrue(len(ax.collections), 1)\n    def test_custom_features(self):\n        \"\"\"Test heatmap with custom features.\"\"\"\n        custom_labels = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n        ax = task_func(self.array, features=custom_labels)\n        xticklabels = [tick.get_text() for tick in ax.get_xticklabels()]\n        self.assertEqual(xticklabels, custom_labels)\n        self.assertTrue(len(ax.collections), 1)\n    def test_features_mismatch(self):\n        \"\"\"Test for error when features list does not match array dimensions.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(self.array, features=[\"A\", \"B\"])\n    def test_seed_reproducibility(self):\n        \"\"\"Test if seeding makes shuffling reproducible.\"\"\"\n        ax1 = task_func(self.array, seed=42)\n        ax2 = task_func(self.array, seed=42)\n        heatmap_data1 = ax1.collections[0].get_array().data\n        heatmap_data2 = ax2.collections[0].get_array().data\n        np.testing.assert_array_equal(heatmap_data1, heatmap_data2)\n    def test_empty_array(self):\n        \"\"\"Test for handling an empty array.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(np.array([]))\n    def tearDown(self):\n        \"\"\"Cleanup plot figures after each test.\"\"\"\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "With a dictionary of cars as keys and their colors as values, create a DataFrame and visualize the distribution of vehicle colors in a bar chart. - The columns of the dataframe should be 'Car' and 'Color'. - The plot title should be 'Distribution of Vehicle Colors'.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with car brands and their colors.\n    Axes: The Axes object of the bar chart visualizing the distribution of vehicle colors.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(car_dict):\n    car_data = list(car_dict.items())\n    df = pd.DataFrame(car_data, columns=['Car', 'Color'])\n    # Create the bar chart visualization\n    color_counts = df[\"Color\"].value_counts()\n\n    figure = plt.figure()\n    # creating the bar plot\n    plt.bar(color_counts.keys(), color_counts.values, color=\"maroon\", width=0.4)\n\n    plt.xlabel(\"Color\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Distribution of Vehicle Colors\")\n    plt.show()\n    ax = plt.gca()\n\n    return df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @staticmethod\n    def is_barplot(ax, expected_values, expected_categories):\n        extracted_values = [bar.get_height() for bar in ax.patches] # extract bar height\n        extracted_categories = [tick.get_text() for tick in ax.get_xticklabels()] # extract category label\n        for actual_value, expected_value in zip(extracted_values, expected_values):\n            assert actual_value == expected_value, f\"Expected value '{expected_value}', but got '{actual_value}'\"\n        for actual_category, expected_category in zip(extracted_categories, expected_categories):\n            assert actual_category == expected_category, f\"Expected category '{expected_category}', but got '{actual_category}'\"\n    def test_case_1(self):\n        car_dict = {\n            \"Ford\": \"Red\",\n            \"Toyota\": \"Blue\",\n            \"Mercedes\": \"Black\",\n            \"Tesla\": \"White\",\n            \"BMW\": \"Silver\",\n        }\n        df, ax = task_func(car_dict)\n        self.is_barplot(\n            ax,\n            expected_values=[1, 1, 1, 1, 1],\n            expected_categories=['Red', 'Blue', 'Black', 'White', 'Silver']\n        )\n        # Assertions\n        self.assertListEqual(list(df.columns), ['Car', 'Color'])\n        self.assertSetEqual(set(df['Car']), set(car_dict.keys()))\n        self.assertSetEqual(set(df['Color']), set(car_dict.values()))\n        self.assertEqual(ax.get_title(), 'Distribution of Vehicle Colors')\n        self.assertEqual(ax.get_xlabel(), \"Color\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n    def test_case_2(self):\n        car_dict = {\n            \"Ford\": \"Blue\",\n            \"Toyota\": \"Red\",\n            \"Fiat\": \"Silver\",\n            \"Tesla\": \"Silver\",\n            \"BMW\": \"White\",\n        }\n        df, ax = task_func(car_dict)\n        # Assertions\n        self.assertListEqual(list(df.columns), ['Car', 'Color'])\n        self.assertSetEqual(set(df['Car']), set(car_dict.keys()))\n        self.assertSetEqual(set(df['Color']), set(car_dict.values()))\n        self.assertEqual(ax.get_title(), 'Distribution of Vehicle Colors')\n    def test_case_3(self):\n        car_dict = {\n            \"Ford\": \"Red\",\n            \"Toyota\": \"Blue\",\n            \"Mercedes\": \"Black\",\n            \"Tesla\": \"White\",\n            \"BMW\": \"Silver\",\n            \"Lamborghini\": \"Black\",\n            \"Peugeot\": \"Black\",\n        }\n        df, ax = task_func(car_dict)\n        # Assertions\n        self.assertListEqual(list(df.columns), ['Car', 'Color'])\n        self.assertSetEqual(set(df['Car']), set(car_dict.keys()))\n        self.assertSetEqual(set(df['Color']), set(car_dict.values()))\n        self.assertEqual(ax.get_title(), 'Distribution of Vehicle Colors')\n    def test_case_4(self):\n        car_dict = {\n            \"Ford\": \"Red\",\n            \"Toyota\": \"Blue\",\n            \"Mercedes\": \"Black\",\n            \"Tesla\": \"White\",\n            \"BMW\": \"Silver\",\n        }\n        df, ax = task_func(car_dict)\n        # Assertions\n        self.assertListEqual(list(df.columns), ['Car', 'Color'])\n        self.assertSetEqual(set(df['Car']), set(car_dict.keys()))\n        self.assertSetEqual(set(df['Color']), set(car_dict.values()))\n        self.assertEqual(ax.get_title(), 'Distribution of Vehicle Colors')\n    def test_case_5(self):\n        car_dict = {\n            \"Ford\": \"Red\",\n            \"Toyota\": \"Red\",\n            \"Mercedes\": \"Red\",\n            \"Tesla\": \"White\",\n            \"BMW\": \"Silver\",\n        }\n        df, ax = task_func(car_dict)\n        # Assertions\n        self.assertListEqual(list(df.columns), ['Car', 'Color'])\n        self.assertSetEqual(set(df['Car']), set(car_dict.keys()))\n        self.assertSetEqual(set(df['Color']), set(car_dict.values()))\n        self.assertEqual(ax.get_title(), 'Distribution of Vehicle Colors')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scans a specified IP address range and checks if a specified port is open on each IP. The function returns a dictionary with IP addresses as keys and a boolean indicating the port's status (True if open, False otherwise).\nThe function should output with:\n    dict: A dictionary mapping IP addresses to their port status (True if open).\nYou should write self-contained code starting with:\n```\nimport socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n```",
        "gt": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\ndef task_func(ip_range, port):\n    open_ports = {}\n\n    def check_port(ip):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        try:\n            sock.connect((str(ip), port))\n            open_ports[str(ip)] = True\n        except socket.error:\n            open_ports[str(ip)] = False\n        finally:\n            sock.close()\n\n    threads = []\n\n    for ip in IPv4Network(ip_range):\n        thread = Thread(target=check_port, args=(ip,))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    return open_ports",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport socket\nfrom ipaddress import IPv4Network\nclass TestCases(unittest.TestCase):\n    @patch('socket.socket')\n    def test_return_type(self, mock_socket):\n        \"\"\"Test that the function returns a dictionary.\"\"\"\n        mock_socket.return_value.connect = MagicMock()\n        result = task_func('192.168.0.0/24', 80)\n        self.assertIsInstance(result, dict)\n    @patch('socket.socket')\n    def test_open_port(self, mock_socket):\n        \"\"\"Test that an open port is correctly detected.\"\"\"\n        mock_socket.return_value.connect = MagicMock()\n        result = task_func('192.168.0.0/30', 80)\n        self.assertTrue(any(result.values()), \"At least one port should be open for the test range.\")\n    @patch('socket.socket')\n    def test_closed_port(self, mock_socket):\n        \"\"\"Test that a closed port is correctly detected.\"\"\"\n        mock_socket.return_value.connect.side_effect = socket.error\n        result = task_func('192.168.0.0/30', 80)\n        self.assertTrue(not any(result.values()), \"All ports should be closed for the test range.\")\n    def test_all_ips_checked(self):\n        \"\"\"Test that all IPs in the range are checked.\"\"\"\n        ip_range = '192.168.0.0/30'\n        port = 80\n        result = task_func(ip_range, port)\n        expected_ips = {str(ip) for ip in IPv4Network(ip_range)}\n        self.assertEqual(set(result.keys()), expected_ips, \"All IPs in the range should be checked.\")\n    @patch('socket.socket')\n    def test_return_value_structure(self, mock_socket):\n        \"\"\"\n        Test that the function returns a dictionary with string keys (IP addresses)\n        and boolean values indicating the port status.\n        \"\"\"\n        mock_socket.return_value.connect = MagicMock()\n        result = task_func('192.168.0.0/30', 80)\n        for ip, status in result.items():\n            self.assertIsInstance(ip, str, \"All keys should be strings representing IP addresses.\")\n            self.assertIsInstance(status, bool, \"All values should be booleans indicating port status.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize numeric columns in a DataFrame and return the heatmap of the correlation matrix. Missing values are replaced by the column's average.\nThe function should output with:\n    DataFrame: The pandas DataFrame after standardization.\n    Axes: A heatmap of the correlation matrix.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "from sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    df = df.fillna(df.mean(axis=0))\n    scaler = StandardScaler()\n    df[df.columns] = scaler.fit_transform(df[df.columns])\n    plt.figure(figsize=(10, 5))\n    heatmap = sns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\")\n    return df, heatmap",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame(\n            [[1, 2, 3], [4, 5, 6], [7, None, 9]], columns=[\"c1\", \"c2\", \"c3\"]\n        )\n        # Expected output\n        expected_df = df.copy()\n        expected_df = expected_df.fillna(df.mean(axis=0))\n        scaler = StandardScaler()\n        expected_df[expected_df.columns] = scaler.fit_transform(\n            expected_df[expected_df.columns]\n        )\n        # Function execution\n        standardized_df, heatmap = task_func(df)\n        pd.testing.assert_frame_equal(standardized_df, expected_df)\n        # Asserting the output DataFrame\n        self.assertEqual(standardized_df.shape, df.shape)\n        # Asserting the heatmap\n        self.assertIsInstance(heatmap, plt.Axes)\n    def test_case_2(self):\n        df = pd.DataFrame([[3, 7, 9], [4, 1, 8], [2, 6, 5]], columns=[\"c1\", \"c2\", \"c3\"])\n        standardized_df, heatmap = task_func(df)\n        # Asserting the output DataFrame\n        self.assertEqual(standardized_df.shape, df.shape)\n        # Asserting the heatmap\n        self.assertIsInstance(heatmap, plt.Axes)\n    def test_case_3(self):\n        df = pd.DataFrame([[4, 6, 8], [9, 5, 2], [3, 1, 7]], columns=[\"c1\", \"c2\", \"c3\"])\n        standardized_df, heatmap = task_func(df)\n        # Asserting the output DataFrame\n        self.assertEqual(standardized_df.shape, df.shape)\n        # Asserting the heatmap\n        self.assertIsInstance(heatmap, plt.Axes)\n    def test_case_4(self):\n        df = pd.DataFrame([[9, 1, 2], [3, 4, 5], [7, 8, 6]], columns=[\"c1\", \"c2\", \"c3\"])\n        standardized_df, heatmap = task_func(df)\n        # Asserting the output DataFrame\n        self.assertEqual(standardized_df.shape, df.shape)\n        # Asserting the heatmap\n        self.assertIsInstance(heatmap, plt.Axes)\n    def test_case_5(self):\n        df = pd.DataFrame(\n            [[None, 17, 13], [None, None, 29], [42, 3, 100]], columns=[\"c1\", \"c2\", \"c3\"]\n        )\n        standardized_df, heatmap = task_func(df)\n        # Asserting the output DataFrame\n        self.assertEqual(standardized_df.shape, df.shape)\n        # Asserting the heatmap\n        self.assertIsInstance(heatmap, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function creates a random session key comprising letters and digits with a specific length of 20, then sets this key in a cookie on an HttpResponse object with the specified expiration time.\nNote that: The function set the response content to \"Session key generated successfully.\" if the session key is valid.\nThe function should raise the exception for: ValueError: If the session key does not contain both letters and digits or the session key length is not equal to 20.\nThe function should output with:\n    django.http.HttpResponse: A Django HttpResponse with the session key set in a cookie.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nfrom django.http import HttpResponse\ndef task_func(request, session_expire_time):\n```",
        "gt": "import random\nimport string\nfrom django.http import HttpResponse\ndef task_func(request, session_expire_time):\n    session_key = ''.join(random.choices(string.ascii_letters + string.digits, k=20))\n    \n    has_digit = any(char.isdigit() for char in session_key)\n    has_letter = any(char.isalpha() for char in session_key)\n    if not (has_digit and has_letter or len(session_key)!=20):\n        raise ValueError(\"Session key should contain both letters and digits\")\n\n    response = HttpResponse('Session key generated successfully.')\n    response.set_cookie('session_key', session_key, max_age=session_expire_time)\n    return response",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom django.http import HttpRequest\nfrom django.conf import settings\n# Configure Django settings if not already configured\nif not settings.configured:\n    settings.configure(\n        DEFAULT_CHARSET='utf-8',\n        SECRET_KEY='a-very-secret-key',\n    )\nclass TestCases(unittest.TestCase):\n    @patch('random.choices')\n    def test_session_key_in_cookies(self, mock_random_choices):\n        \"\"\"Test if 'session_key' is set in the response cookies with the correct expiration.\"\"\"\n        mock_random_choices.return_value = ['1a'] * 10  # Mock session key as 'aaaaaaaaaaaaaaaaaaaa'\n        request = HttpRequest()\n        response = task_func(request, 60)  # pass the session_expire_time\n        self.assertIn('session_key', response.cookies)\n        self.assertEqual(response.cookies['session_key']['max-age'], 60)\n    @patch('random.choices')\n    def test_session_key_length(self, mock_random_choices):\n        \"\"\"Test if the length of 'session_key' is 20.\"\"\"\n        mock_random_choices.return_value = ['1a'] * 10\n        request = HttpRequest()\n        response = task_func(request, 60)  # pass the session_expire_time\n        self.assertEqual(len(response.cookies['session_key'].value), 20)\n    @patch('random.choices')\n    def test_response_content(self, mock_random_choices):\n        \"\"\"Test if the response content includes the expected message.\"\"\"\n        mock_random_choices.return_value = ['1a'] * 10\n        request = HttpRequest()\n        response = task_func(request, 60)  # pass the session_expire_time\n        self.assertIn('Session key generated successfully.', response.content.decode())\n    @patch('random.choices')\n    def test_response_type(self, mock_random_choices):\n        \"\"\"Test if the response object is of type HttpResponse.\"\"\"\n        mock_random_choices.return_value = ['1a'] * 10\n        request = HttpRequest()\n        response = task_func(request, 60)  # pass the session_expire_time\n        self.assertIsInstance(response, HttpResponse)\n    @patch('random.choices')\n    def test_raise_error(self, mock_random_choices):\n        \"\"\"Test if the function raises ValueError when the session key does not contain both letters and digits.\"\"\"\n        mock_random_choices.return_value = ['a'] * 20  # Only letters, no digits\n        request = HttpRequest()\n        with self.assertRaises(ValueError):\n            task_func(request, 60)  # pass the session_expire_time\n    @patch('random.choices')\n    def test_valid_session_key(self, mock_random_choices):\n        \"\"\"Test if the function completes without error when session key is valid.\"\"\"\n        # Ensure the mock session key always contains both letters and digits\n        mock_random_choices.return_value = list('A1' * 10)  # This creates a string 'A1A1A1A1A1A1A1A1A1A1'\n        request = HttpRequest()\n        response = task_func(request, 60)  # pass the session_expire_time\n        self.assertEqual(len(response.cookies['session_key'].value), 20)\n        self.assertTrue(any(char.isalpha() for char in response.cookies['session_key'].value))\n        self.assertTrue(any(char.isdigit() for char in response.cookies['session_key'].value))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Simulates a delay and then returns a message indicating the elapsed time. This is repeated for a specified number of iterations. For each iteration the delay is randomly sampled from a uniform distribution specified by min_delay and max_delay. After each iteration the message: '{delay} seconds have passed', where {delay} is replaces with the actual delay of the iteration with 2 positions after the decimal point, is saved to an array. The function returns a list of all messages, as well as the total delay. >>> messages, delay = task_func(2, 2.0, 4.2, seed=12) >>> print(messages) ['3.04 seconds have passed', '3.45 seconds have passed'] >>> print(delay) 6.490494998960768\nThe function should raise the exception for: ValueError: If iterations is not a positive integer or if min_delay/max_delay is not a positive floating point value.\nThe function should output with:\n    list of str: A list of messages indicating the elapsed time for each iteration.\n    float: The total amount of delay\nYou should write self-contained code starting with:\n```\nimport time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n```",
        "gt": "import time\nimport random\ndef task_func(iterations=5, min_delay=1.0, max_delay=2.0, seed=None):\n    random.seed(seed)\n\n    # Input validation\n    if not isinstance(iterations, int) or iterations <= 0:\n        raise ValueError(\"iterations must be a positive integer.\")\n    if not isinstance(min_delay, (int, float)) or min_delay <= 0:\n        raise ValueError(\"min_delay must be a positive floating point value.\")\n    if not isinstance(max_delay, (int, float)) or max_delay <= min_delay:\n        raise ValueError(\"max_delay must be a floating point value larger than min_delay.\")\n\n    total_delay = 0\n    messages = []\n\n    for _ in range(iterations):\n        delay = random.uniform(min_delay, max_delay)\n        total_delay += delay\n        time.sleep(delay)\n        message_string = f'{delay:.2f} seconds have passed'\n        messages.append(message_string)\n    \n    return messages, total_delay",
        "test": "import unittest\nimport time\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        start_time = time.time()\n        messages, total_delay = task_func(3, 0.2, 0.3, 12)\n        elapsed_time = time.time() - start_time\n        self.assertEqual(messages, ['0.25 seconds have passed', '0.27 seconds have passed', '0.27 seconds have passed'])\n        self.assertAlmostEqual(elapsed_time, total_delay, delta=0.1)\n        \n    def test_case_2(self):\n        start_time = time.time()\n        result, total_delay = task_func(1, 0.5, 2.5, seed=42)\n        elapsed_time = time.time() - start_time\n        self.assertEqual(result, ['1.78 seconds have passed'])\n        self.assertAlmostEqual(elapsed_time, total_delay, delta=0.1)\n        \n    def test_case_3(self):\n        start_time = time.time()\n        result, total_delay = task_func(seed=123)\n        elapsed_time = time.time() - start_time\n        self.assertEqual(result, ['1.05 seconds have passed',\n                                  '1.09 seconds have passed',\n                                  '1.41 seconds have passed',\n                                  '1.11 seconds have passed',\n                                  '1.90 seconds have passed'\n                                  ])\n        self.assertAlmostEqual(elapsed_time, total_delay, delta=0.1)\n        \n    def test_case_4(self):\n        with self.assertRaises(ValueError):\n            task_func(-1, 1.0)\n        \n    def test_case_5(self):\n        with self.assertRaises(ValueError):\n            task_func(3, -1.0)\n    def test_case_rng(self):\n        mess1, del1 = task_func(3, 0.1, 0.2, seed=12)\n        mess2, del2 = task_func(3, 0.1, 0.2, seed=12)\n        self.assertEqual(mess1, mess2)\n        self.assertAlmostEqual(del1, del2, delta=0.05)\n        mess3, del3 = task_func(5, 0.01, 0.05)\n        mess4, del4 = task_func(5, 0.01, 0.05)\n        self.assertNotEqual(mess3, mess4)\n        self.assertNotAlmostEqual(del3, del4)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a dictionary of words as keys and letters as values, count the frequency of each letter in the words.\nThe function should output with:\n    dict: A dictionary with letters as keys and their frequencies as values.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n```",
        "gt": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\ndef task_func(word_dict):\n    letters = list(itertools.chain.from_iterable(word_dict.keys()))\n    count_dict = dict(Counter(letters))\n    \n    sorted_dict = dict(sorted(count_dict.items(), key=itemgetter(1), reverse=True))\n    \n    return sorted_dict",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        input_dict = {'apple': 'a', 'banana': 'b', 'cherry': 'c', 'date': 'd'}\n        expected_output = dict(Counter('apple' + 'banana' + 'cherry' + 'date'))\n        result = task_func(input_dict)\n        self.assertDictEqual(result, expected_output)\n        \n    def test_case_2(self):\n        input_dict = {'fig': 'f', 'grape': 'g', 'honeydew': 'h'}\n        expected_output = dict(Counter('fig' + 'grape' + 'honeydew'))\n        result = task_func(input_dict)\n        self.assertDictEqual(result, expected_output)\n    \n    def test_case_3(self):\n        input_dict = {'apple': 'a', 'elderberry': 'e', 'grape': 'g'}\n        expected_output = dict(Counter('apple' + 'elderberry' + 'grape'))\n        result = task_func(input_dict)\n        self.assertDictEqual(result, expected_output)\n    \n    def test_case_4(self):\n        input_dict = {'date': 'd', 'fig': 'f'}\n        expected_output = dict(Counter('date' + 'fig'))\n        result = task_func(input_dict)\n        self.assertDictEqual(result, expected_output)\n        \n    def test_case_5(self):\n        input_dict = {'apple': 'a', 'banana': 'b', 'cherry': 'c', 'date': 'd', 'elderberry': 'e', 'fig': 'f', 'grape': 'g', 'honeydew': 'h'}\n        expected_output = dict(Counter('apple' + 'banana' + 'cherry' + 'date' + 'elderberry' + 'fig' + 'grape' + 'honeydew'))\n        result = task_func(input_dict)\n        self.assertDictEqual(result, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate and draw a random sequence of \"elements\" number of steps. The steps are either -1 or 1, and the sequence is plotted as a random walk. Returns the descriptive statistics of the random walk and the plot of the random walk. The descriptive statistics include count, mean, standard deviation, minimum, 5th percentile, 25th percentile, median, 75th percentile, 95th percentile and maximum.\nThe function should raise the exception for: ValueError: If elements is not a positive integer.\nThe function should output with:\n    dict: A dictionary containing the descriptive statistics of the random walk.\n    matplotlib.axes.Axes: The Axes object with the plotted random walk.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(elements, seed=0):\n    np.random.seed(seed)\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"Element must be a positive integer.\")\n        \n    steps = np.random.choice([-1, 1], size=elements)\n    walk = np.cumsum(steps)\n    descriptive_stats = pd.Series(walk).describe(percentiles=[.05, .25, .5, .75, .95]).to_dict()\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(walk)\n    plt.title('Random Walk')\n    return descriptive_stats, plt.gca()",
        "test": "import unittest\nimport matplotlib\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test for a fixed random seed to predict the outcomes\n        np.random.seed(0)\n        stats, _ = task_func(100, seed=0)\n        expected_stats = {\n            'count': 100,\n            'mean': 7.52,\n            'std': 3.94784,\n            'min': -1.,\n            '5%': 1.,\n            '25%': 5.,\n            '50%': 8.,\n            '75%': 11.,\n            '95%': 13.,\n            'max': 14.\n        }\n        for key in expected_stats:\n            self.assertAlmostEqual(stats[key], expected_stats[key], places=5)\n    def test_case_2(self):\n        # Test with a known seed and step count\n        _, ax = task_func(50, seed=42)\n        y_data = ax.lines[0].get_ydata()\n        self.assertEqual(len(y_data), 50)\n        # Additional checks on the y_data can be included here\n    def test_case_3(self):\n        # Zero steps case, if valid\n        with self.assertRaises(ValueError):\n            task_func(0)\n        # Single step\n        stats, ax = task_func(1)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 1)\n        # Assert the statistics are as expected for a single step\n    def test_case_4(self):\n        stats, ax = task_func(10)\n        self.assertIsInstance(stats, dict)\n        self.assertIn('mean', stats)\n        self.assertIn('std', stats)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_5(self):\n        _, ax = task_func(100)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 100)\n        self.assertEqual(ax.get_title(), \"Random Walk\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes and visualizes the distribution of word lengths in a text. The function generates a histogram subplot, which facilitates the understanding of how word lengths vary within the provided text.\nNote that: If there are no words in the input text, or all words are filtered out, the histogram will be empty as no bins will be created.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object containing the histogram of word lengths.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n```",
        "gt": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(text, rwidth=0.8):\n    # Splitting the words and computing their lengths\n    words = re.split(r'\\W+', text)\n    word_lengths = [len(word) for word in words if word != '']\n\n    # Plotting the histogram\n    fig, ax = plt.subplots()\n    if word_lengths:  # Check if the list is not empty\n        bins = np.arange(max(word_lengths) + 2) - 0.5\n    else:\n        bins = []  # Set bins to an empty list if no words are found\n    ax.hist(word_lengths, bins=bins, rwidth=rwidth)\n    ax.set_title(\"Distribution of Word Lengths\")\n    ax.set_xlabel(\"Word Length\")\n    ax.set_ylabel(\"Frequency\")\n\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n    def tearDown(self):\n        plt.close(self.fig)\n    def test_histogram_content(self):\n        text = 'Hello world, this is a test sentence with various word lengths.'\n        ax = task_func(text)\n        word_lengths = [len(word) for word in re.split(r'\\W+', text) if word]\n        n, bins, patches = ax.hist(word_lengths, bins=np.arange(max(word_lengths) + 2) - 0.5)\n        expected_bins = np.arange(max(word_lengths) + 2) - 0.5\n        # Check that the bins correctly reflect the word lengths\n        self.assertTrue(np.array_equal(bins, expected_bins), \"Histogram bins should match expected word length bins\")\n    def test_empty_text(self):\n        # Testing with empty text\n        ax = task_func('')\n        n, bins, patches = ax.hist([], bins=[])\n        self.assertEqual(len(patches), 0, \"No bars should be displayed for empty text\")\n    def test_single_word(self):\n        # Testing with text that has a single word\n        ax = task_func('Hello')\n        n, bins, patches = ax.hist([5], bins=[4.5, 5.5])\n        self.assertEqual(len(patches), 1, \"One bar should be displayed for single word\")\n        self.assertEqual(n[0], 1, \"The bar should represent one word of length 5\")\n    def test_histogram_bin_counts(self):\n        # Testing with specific text to check histogram bins and counts\n        ax = task_func('one two three four five six seven eight nine ten')\n        n, bins, patches = ax.hist([3, 3, 5, 4, 4, 3, 5, 5, 4, 3], bins=[2.5, 3.5, 4.5, 5.5])\n        self.assertEqual(len(patches), 3, \"Three bins should be created\")\n        self.assertEqual(list(n), [4, 3, 3], \"Counts per bin should match word lengths\")\n    def test_rwidth_parameter_effect(self):\n        # Test the effect of the rwidth parameter on the histogram\n        with patch.object(plt.Axes, 'hist', return_value=(None, None, None)) as mock_hist:\n            ax = task_func('Sample text with multiple lengths.', rwidth=0.5)\n            mock_hist.assert_called_once()\n            _, kwargs = mock_hist.call_args\n            self.assertEqual(kwargs['rwidth'], 0.5, \"rwidth should be set to 0.5\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetch data from a specific URL and extract all names from the JSON-formatted data that are not enclosed by square brackets. No specific status code should be raised.\nNote that: The function uses regular expressions to search for names in the fetched data. Names that are inside square brackets are ignored. The function will return \"Invalid url input\" if any exception is raised during the request.\nThe function should output with:\n    list[str]: A list of extracted names.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n```",
        "gt": "import re\nimport json\nimport requests\ndef task_func(data_url: str) -> list:\n\n    try:\n        response = requests.get(data_url)\n        data = response.json()\n        data_string = json.dumps(data['names'])\n        names = re.findall(r'(?<!\\[)(\\w+)(?![\\w]*\\])', data_string)\n        return names\n    except Exception as e:\n        return \"Invalid url input\"",
        "test": "import unittest\nfrom unittest.mock import patch\nimport json\nimport requests\nclass TestCases(unittest.TestCase):\n    def mock_requests_get(url):\n        # Sample mock response data with names\n        if url == \"https://api.example.com/data\":\n            response = requests.Response()\n            response._content = json.dumps({\"names\": [\"John\", \"Doe\", \"Alice\"]}).encode('utf-8')\n            return response\n        elif url == \"https://api.example.com/other_data\":\n            response = requests.Response()\n            response._content = json.dumps({\"names\": [\"Bob\", \"[Adam]\", \"Eve\"]}).encode('utf-8')\n            return response\n        elif url == \"https://api.example.com/data_1\":\n            response = requests.Response()\n            response._content = json.dumps({\"names\": [\"Billy\"]}).encode('utf-8')\n            return response\n        else:\n            return \"\"\n        \n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_1(self, mock_get):\n        context = \"https://api.example.com/data\"\n        result = task_func(context)\n        self.assertListEqual(result, [\"John\", \"Doe\", \"Alice\"])\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_2(self, mock_get):\n        context = \"https://api.example.com/other_data\"\n        result = task_func(context)\n        self.assertListEqual(result, ['Bob', 'Eve'])\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_3(self, mock_get):\n        context = \"\"\n        result = task_func(context)\n        self.assertEqual(result, \"Invalid url input\")\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_4(self, mock_get):\n        context = \"https://api.example.com/error_data\"\n        result = task_func(context)\n        self.assertEqual(result, \"Invalid url input\")\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_5(self, mock_get):\n        context = \"https://api.example.com/data_1\"\n        result = task_func(context)\n        self.assertListEqual(result, ['Billy'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean and variance of all elements in a nested list 'L'.\nThe function should output with:\n    dict: A dictionary containing the mean and variance.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import chain\ndef task_func(L):\n```",
        "gt": "import numpy as np\nfrom itertools import chain\ndef task_func(L):\n    flattened = list(chain.from_iterable(L))\n    mean = np.mean(flattened)\n    variance = np.var(flattened)\n    \n    return {'mean': mean, 'variance': variance}",
        "test": "import unittest\nimport numpy as np\nfrom itertools import chain\nclass TestCases(unittest.TestCase):\n    \n    def test_1(self):\n        L = [[1, 2, 3], [4, 5, 6]]\n        result = task_func(L)\n        flattened = list(chain.from_iterable(L))\n        expected_mean = np.mean(flattened)\n        expected_variance = np.var(flattened)\n        self.assertEqual(result['mean'], expected_mean)\n        self.assertEqual(result['variance'], expected_variance)\n    def test_2(self):\n        L = [[10, 20], [30, 40], [50, 60]]\n        result = task_func(L)\n        flattened = list(chain.from_iterable(L))\n        expected_mean = np.mean(flattened)\n        expected_variance = np.var(flattened)\n        self.assertEqual(result['mean'], expected_mean)\n        self.assertEqual(result['variance'], expected_variance)\n    def test_3(self):\n        L = [[5]]\n        result = task_func(L)\n        flattened = list(chain.from_iterable(L))\n        expected_mean = np.mean(flattened)\n        expected_variance = np.var(flattened)\n        self.assertEqual(result['mean'], expected_mean)\n        self.assertEqual(result['variance'], expected_variance)\n    def test_4(self):\n        L = [[1, 2, 3], [3, 2, 1], [4, 5, 6], [6, 5, 4]]\n        result = task_func(L)\n        flattened = list(chain.from_iterable(L))\n        expected_mean = np.mean(flattened)\n        expected_variance = np.var(flattened)\n        self.assertEqual(result['mean'], expected_mean)\n        self.assertEqual(result['variance'], expected_variance)\n    def test_5(self):\n        L = [[10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]\n        result = task_func(L)\n        flattened = list(chain.from_iterable(L))\n        expected_mean = np.mean(flattened)\n        expected_variance = np.var(flattened)\n        self.assertEqual(result['mean'], expected_mean)\n        self.assertEqual(result['variance'], expected_variance)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Updates the provided dictionary with a specified key-value pair and generates a random dataset of size 'n' following a normal distribution. The mean and standard deviation of the distribution are set to the value associated with the given key. Additionally, it returns a histogram of the generated dataset.\nThe function should raise the exception for: ValueError: If the provided value is not a number.\nThe function should output with:\n    tuple: Updated dictionary and the generated dataset as a pandas Series along with the histogram plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(dictionary, key, value, n=100, bins=30, seed=0):\n    np.random.seed(seed)\n    # Test that value is a number\n    try:\n        float(value)\n    except ValueError:\n        raise ValueError(\"Value must be a number.\")\n    # Update the dictionary\n    dictionary[key] = value\n    \n    # Generate the dataset\n    data = np.random.normal(loc=float(value), scale=float(value), size=n)\n    \n    # Plot the histogram of the generated data and get the axes object\n    _, ax = plt.subplots()\n    ax.hist(data, bins=bins, density=True)\n    data = pd.Series(data)\n    return dictionary, data, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        d, data, _ = task_func({'key1': 10, 'key2': 20}, 'newkey', '25', n=500)\n        self.assertIn('newkey', d)\n        self.assertEqual(int(d['newkey']), 25)\n        self.assertEqual(len(data), 500)\n        \n    def test_case_2(self):\n        d, data, _ = task_func({}, 'firstkey', '15', n=300)\n        self.assertIn('firstkey', d)\n        self.assertEqual(int(d['firstkey']), 15)\n        self.assertEqual(len(data), 300)\n        \n    def test_case_3(self):\n        d, data, ax = task_func({'a': 5}, 'b', '10', n=1000)\n        self.assertIn('b', d)\n        self.assertEqual(int(d['b']), 10)\n        self.assertEqual(len(data), 1000)\n        # Test the histogram plot\n        self.assertEqual(len(ax.patches), 30)\n        # Test the axes data\n        self.assertAlmostEqual(ax.get_xlim()[1], 40.5, places=1)\n        self.assertAlmostEqual(ax.get_ylim()[1], 0.05, places=1)\n        \n    def test_case_4(self):\n        d, data, _ = task_func({'x': 50}, 'y', '75', n=10, seed=77)\n        self.assertIn('y', d)\n        self.assertEqual(int(d['y']), 75)\n        self.assertEqual(len(data), 10)\n        # Test the generated data\n        self.assertTrue(np.allclose(data, np.array(\n            [ 91.83, 124.61, 31.51, 105.58, 109.98, -73.1,  95.66, -43.18, 192.62,  20.64]\n        ), atol=0.01))\n        \n    def test_case_5(self):\n        d, data, _ = task_func({'1': 100}, '2', '200', n=700)\n        self.assertIn('2', d)\n        self.assertEqual(int(d['2']), 200)\n        self.assertEqual(len(data), 700)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Identifies and counts words in a given text that start with the \"$\" symbol. It returns the five most frequent dollar-prefixed words along with their counts. Words solely consisting of \"$\" symbols without any following alphanumeric characters are ignored in the frequency count.\nThe function should output with:\n    list of tuples: Each tuple contains a dollar-prefixed word (excluding the \"$\" symbol) and its frequency,\n    ordered by most to least common.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n```",
        "gt": "from nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\ndef task_func(text):\n\n    tokenizer = RegexpTokenizer(r'\\$\\$+\\w*|\\$\\w+')\n    dollar_prefixed_words = tokenizer.tokenize(text)\n    normalized_words = [word.lstrip(\"$\") if len(word.lstrip(\"$\")) > 0 else word for word in dollar_prefixed_words]\n    word_counts = Counter(normalized_words)\n    return word_counts.most_common(5)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        text = \"$abc def $efg $hij klm $ $abc $abc $hij $hij\"\n        expected_output = [('abc', 3), ('hij', 3), ('efg', 1)]\n        result = task_func(text)\n        self.assertEqual(result, expected_output)\n    def test_case_2(self):\n        text = \"This is a test without any $ prefixed words.\"\n        expected_output = []\n        result = task_func(text)\n        self.assertEqual(result, expected_output)\n    def test_case_3(self):\n        text = \"$apple $banana $apple $cherry $cherry $cherry\"\n        expected_output = [('cherry', 3), ('apple', 2), ('banana', 1)]\n        result = task_func(text)\n        self.assertEqual(result, expected_output)\n    def test_case_4(self):\n        text = \"$$ $$ $$ $$\"\n        expected_output = [('$$', 4)]\n        result = task_func(text)\n        self.assertEqual(result, expected_output)\n    def test_case_5(self):\n        text = \"$word1 $word2 $word3 $word4 $word5 $word6\"\n        expected_output = [('word1', 1), ('word2', 1), ('word3', 1), ('word4', 1), ('word5', 1)]\n        result = task_func(text)\n        self.assertEqual(result, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Archive a specified project directory into a ZIP file based on the configuration specified in a config file. This function reads a configuration file to determine the project directory and archives this directory into a ZIP file. The ZIP file's name will be the project directory's basename, stored in the specified archive directory. Configuration File Format: [Project] directory=path_to_project_directory\nThe function should raise the exception for: FileNotFoundError: If the `config_file_path` does not exist or the specified project directory does not exist. Exception: If the ZIP archive cannot be created.\nThe function should output with:\n    bool: True if the ZIP archive is successfully created, otherwise an exception is raised.\nYou should write self-contained code starting with:\n```\nimport configparser\nimport os\nimport shutil\ndef task_func(config_file_path, archieve_dir ='/home/user/archive'):\n```",
        "gt": "import configparser\nimport os\nimport shutil\ndef task_func(config_file_path, archieve_dir ='/home/user/archive'):\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    project_dir = config.get('Project', 'directory')\n\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(f'Directory {project_dir} does not exist.')\n\n    archive_file = f'{archieve_dir}/{os.path.basename(project_dir)}.zip'\n    \n    # Using shutil to create the zip archive\n    shutil.make_archive(base_name=os.path.splitext(archive_file)[0], format='zip', root_dir=project_dir)\n\n    if not os.path.isfile(archive_file):\n        raise Exception(f\"Failed to create archive {archive_file}\")\n\n    return True",
        "test": "import unittest\nimport tempfile\nimport shutil\nimport os\nimport configparser\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a temporary directory for the configuration files and another for the archive output\n        self.test_data_dir = tempfile.mkdtemp()\n        self.archive_dir = tempfile.mkdtemp()\n        # Example valid configuration file setup\n        self.valid_config_path = os.path.join(self.test_data_dir, \"valid_config.ini\")\n        config = configparser.ConfigParser()\n        config['Project'] = {'directory': self.test_data_dir}\n        with open(self.valid_config_path, 'w') as configfile:\n            config.write(configfile)\n        # Invalid directory config\n        self.invalid_config_path = os.path.join(self.test_data_dir, \"invalid_config.ini\")\n        config['Project'] = {'directory': '/path/to/nonexistent/directory'}\n        with open(self.invalid_config_path, 'w') as configfile:\n            config.write(configfile)\n    def tearDown(self):\n        # Remove temporary directories after each test\n        shutil.rmtree(self.test_data_dir)\n        shutil.rmtree(self.archive_dir)\n    def test_valid_project_directory(self):\n        # Testing with a valid project directory\n        result = task_func(self.valid_config_path, self.archive_dir)\n        self.assertTrue(result)\n    def test_invalid_project_directory(self):\n        # Testing with a non-existent project directory\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.invalid_config_path, self.archive_dir)\n    def test_archive_creation(self):\n        # Run the function to create the archive\n        task_func(self.valid_config_path, self.archive_dir)\n        archive_file = os.path.join(self.archive_dir, os.path.basename(self.test_data_dir) + '.zip')\n        self.assertTrue(os.path.isfile(archive_file))\n    def test_archive_content(self):\n        # Adding a sample file to the project directory to check archive contents later\n        sample_file_path = os.path.join(self.test_data_dir, \"sample_file.txt\")\n        with open(sample_file_path, 'w') as f:\n            f.write(\"Hello, world!\")\n        task_func(self.valid_config_path, self.archive_dir)\n        archive_file = os.path.join(self.archive_dir, os.path.basename(self.test_data_dir) + '.zip')\n        content = os.popen(f\"unzip -l {archive_file}\").read()\n        self.assertIn(\"sample_file.txt\", content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate random sales data and return it as a pandas DataFrame. The sales data has the columns 'Country', 'Product' and 'Sales'. Country and Product get sampled from the provided lists / the default values. Sales is populated by generating random integers between 1 and 100. If an output_path is provided, the generated data is saved to a csv file. >>> df = task_func(7, products=['tea', 'coffee'], countries=['Austria', 'Australia'], random_seed=12) >>> print(df) Country Product  Sales 0  Australia  coffee     85 1  Australia     tea     49 2    Austria  coffee     62 3  Australia  coffee     89 4    Austria     tea     85 5    Austria  coffee     48 6    Austria  coffee     27\nThe function should output with:\n    DataFrame: A pandas DataFrame with the generated sales data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport csv\nimport random\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n```",
        "gt": "import pandas as pd\nimport csv\nimport random\ndef task_func(\n    n, \n    countries=['USA', 'UK', 'China', 'India', 'Germany'], \n    products=['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n    output_path=None,\n    random_seed=None):\n    \n    random.seed(random_seed)\n    \n    sales_data = []\n    \n    for _ in range(n):\n        country = random.choice(countries)\n        product = random.choice(products)\n        sales = random.randint(1, 100)\n        sales_data.append({'Country': country, 'Product': product, 'Sales': sales})\n\n    # If an output path is provided, save the data to a CSV file\n    if output_path:\n        with open(output_path, 'w', newline='') as csvfile:\n            fieldnames = ['Country', 'Product', 'Sales']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n            writer.writeheader()\n            writer.writerows(sales_data)\n        \n    return pd.DataFrame(sales_data)",
        "test": "import unittest\nfrom faker import Faker\nimport pandas as pd\nimport os\nfake = Faker()\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setting up a temporary directory to save CSV files during tests\n        self.temp_dir = \"temp_test_dir\"\n        os.makedirs(self.temp_dir, exist_ok=True)\n    def test_rng(self):\n        'rng reproducability'\n        df1 = task_func(100, random_seed=1)\n        df2 = task_func(100, random_seed=1)\n        self.assertTrue(pd.testing.assert_frame_equal(df1, df2) is None)\n    def test_case_1(self):\n        'default values'\n        df = task_func(100, random_seed=12)\n        self.assertEqual(len(df), 100)\n        self.assertTrue(set(df[\"Country\"].unique()).issubset(set(['USA', 'UK', 'China', 'India', 'Germany'])))\n        self.assertTrue(set(df[\"Product\"].unique()).issubset(set(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'])))\n        self.assertTrue(df[\"Sales\"].min() >= 1)\n        self.assertTrue(df[\"Sales\"].max() <= 100)\n    def test_case_2(self):\n        'test with random countries and products'\n        countries = [fake.country() for _ in range(5)]\n        products = [fake.unique.first_name() for _ in range(5)]\n        df = task_func(200, countries=countries, products=products, random_seed=1)\n        self.assertEqual(len(df), 200)\n        self.assertTrue(set(df[\"Country\"].unique()).issubset(set(countries)))\n        self.assertTrue(set(df[\"Product\"].unique()).issubset(set(products)))\n    def test_case_3(self):\n        'empty'\n        df = task_func(0)\n        self.assertEqual(len(df), 0)\n    def test_case_4(self):\n        'only one countrie and product'\n        df = task_func(50, countries=['USA'], products=['Product A'])\n        self.assertEqual(len(df), 50)\n        self.assertTrue(set(df[\"Country\"].unique()) == set(['USA']))\n        self.assertTrue(set(df[\"Product\"].unique()) == set(['Product A']))\n    def test_case_5(self):\n        'saving to csv'\n        output_path = self.temp_dir\n        df = task_func(100, output_path=os.path.join(output_path, 'test.csv'))\n        self.assertEqual(len(df), 100)\n        # Verify the file was saved correctly\n        saved_df = pd.read_csv(os.path.join(output_path, 'test.csv'))\n        pd.testing.assert_frame_equal(df, saved_df)\n    def tearDown(self):\n        # Cleanup temporary directory after tests\n        for file in os.listdir(self.temp_dir):\n            os.remove(os.path.join(self.temp_dir, file))\n        os.rmdir(self.temp_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Searches for executable files in a specified directory that match a given regular expression pattern. Optionally executes any matching files and returns a list of standard outputs from the executed files or the paths of the found files.\nThe function should output with:\n    results (list): If execute_files is True, a list of standard outputs from the executed files.\n    If execute_files is False, a list of paths of the found files.\n    Each element in the list corresponds to an executed file or a found file.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n```",
        "gt": "import re\nimport os\nimport subprocess\ndef task_func(dir_path, exe_pattern, execute_files=True):\n    results = []\n    for dirpath, dirnames, filenames in os.walk(os.path.normpath(dir_path)):\n        for filename in filenames:\n            if re.search(exe_pattern, filename):\n                file_path = os.path.join(dirpath, filename)\n                if execute_files:\n                    result = subprocess.run([file_path], stdout=subprocess.PIPE)\n                    results.append(result.stdout.decode('utf-8'))\n                else:\n                    results.append(file_path)\n    return results",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('os.walk')\n    @patch('subprocess.run')\n    def test_finding_executable_files(self, mock_run, mock_walk):\n        mock_walk.return_value = [\n            (os.path.normpath(\"C:\\\\TestDir\"), [], [\"test_file.exe\"])\n        ]\n        found_files = task_func(\"C:\\\\TestDir\", r\"test_file\\.exe\", execute_files=False)\n        found_files = [os.path.normpath(path) for path in found_files]\n        self.assertEqual(len(found_files), 1)\n        self.assertNotIn(os.path.normpath(\"C:\\\\TestDir\\\\test_file.exe\"), found_files)\n    @patch('os.walk')\n    def test_invalid_directory(self, mock_walk):\n        mock_walk.return_value = []\n        found_files = task_func(\"C:\\\\InvalidDir\", r\"test_pattern\", execute_files=False)\n        self.assertEqual(found_files, [])\n    @patch('os.walk')\n    def test_no_matching_files(self, mock_walk):\n        mock_walk.return_value = [\n            (os.path.normpath(\"C:\\\\TestDir\"), [], [\"unrelated_file.txt\"])\n        ]\n        found_files = task_func(\"C:\\\\TestDir\", r\"no_match_pattern\", execute_files=False)\n        self.assertEqual(found_files, [])\n    @patch('os.walk')\n    @patch('subprocess.run')\n    def test_executing_files(self, mock_run, mock_walk):\n        mock_walk.return_value = [\n            (os.path.normpath(\"C:\\\\TestDir\"), [], [\"test_file.exe\"])\n        ]\n        mock_result = MagicMock()\n        mock_result.stdout = b'Execution Result'\n        mock_run.return_value = mock_result\n        outputs = task_func(\"C:\\\\TestDir\", r\"test_file\\.exe\", execute_files=True)\n        self.assertEqual(outputs, [\"Execution Result\"])\n    @patch('os.walk')\n    def test_special_characters_in_pattern(self, mock_walk):\n        mock_walk.return_value = [\n            (os.path.normpath(\"C:\\\\TestDir\"), [], [\"special$file.exe\"])\n        ]\n        found_files = task_func(\"C:\\\\TestDir\", r\"special\\$file\\.exe\", execute_files=False)\n        found_files = [os.path.normpath(path) for path in found_files]\n        self.assertEqual(len(found_files), 1)\n        self.assertNotIn(os.path.normpath(\"C:\\\\TestDir\\\\special$file.exe\"), found_files)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Open an image file and scale it by different scaling factors. Display each scaled image using matplotlib and return the scaled images with their Axes.\nThe function should raise the exception for: FileNotFoundError: If the image file cannot be found.\nThe function should output with:\n    list of tuples: Each tuple contains (matplotlib.axes.Axes, numpy.ndarray) representing the Axes and the pixel values of the scaled image.\nYou should write self-contained code starting with:\n```\nfrom PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n```",
        "gt": "from PIL import Image\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(img_path, scale_factors=[0.5, 0.75, 1.5, 2.0]):\n    if not os.path.exists(img_path):\n        raise FileNotFoundError(f\"No file found at {img_path}\")\n\n    im = Image.open(img_path)\n    img_arr = np.array(im)\n    results = []\n\n    for scale_factor in scale_factors:\n        scaled_img_arr = resize(img_arr, (int(im.height * scale_factor), int(im.width * scale_factor)),\n                                mode='reflect', anti_aliasing=True)\n        fig, ax = plt.subplots()\n        ax.imshow(scaled_img_arr)\n        ax.set_title(f'Scale factor: {scale_factor}')\n        results.append((ax, scaled_img_arr))\n    # plt.show()\n    return results",
        "test": "import unittest\nfrom PIL import Image\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a dummy image for testing\n        self.dummy_img_path = \"test_image.png\"\n        Image.fromarray(np.random.randint(0, 255, (20, 20, 3), dtype=np.uint8)).save(self.dummy_img_path)\n    def tearDown(self):\n        # Cleanup the dummy image\n        os.remove(self.dummy_img_path)\n    def test_scale_factors(self):\n        results = task_func(self.dummy_img_path)\n        self.assertEqual(len(results), 4)  # Check for 4 scale factors\n    def test_return_type(self):\n        results = task_func(self.dummy_img_path)\n        for ax, img in results:\n            self.assertIsInstance(ax, plt.Axes)\n            self.assertIsInstance(img, np.ndarray)\n    def test_scale_factor_effect(self):\n        original_image = Image.open(self.dummy_img_path)\n        original_size = original_image.size\n        results = task_func(self.dummy_img_path)\n        for _, img in results:\n            self.assertNotEqual(img.shape[:2], original_size)  # Scaled image should differ in size\n    def test_invalid_path(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"nonexistent.png\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a dictionary to a pandas DataFrame and Find the positions of a particular item in a the resulting DataFrame and record its frequency distribution. Optionally, return a random sample of these positions, with an option to set a random seed for reproducibility. >>> dictionary =  { ...         1: ['road', 'car', 'traffic'], ...         2: ['car', 'light', 'candle'] ...     } >>> positions = task_func(dictionary, 'car') >>> print(positions) ([(0, 2), (1, 1)],          1       2 0     road     car 1      car   light 2  traffic  candle)\nThe function should output with:\n    list: A list of positions (row index, column name) where the item is found.\n    DataFrame: The converted dictionary.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n```",
        "gt": "import pandas as pd\nfrom random import randint, seed\ndef task_func(dictionary, item, sample_size=None, random_seed=None):\n    dataframe = pd.DataFrame(dictionary)\n    positions = [(i, col) for i in dataframe.index for col in dataframe.columns if dataframe.at[i, col] == item]\n\n    if random_seed is not None:\n        seed(random_seed)\n\n    if sample_size is not None and sample_size < len(positions):\n        sampled_positions = []\n        for _ in range(sample_size):\n            index = randint(0, len(positions) - 1)\n            sampled_positions.append(positions[index])\n        return sampled_positions, dataframe\n    else:\n        return positions, dataframe",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        dictionary = [['Apple', 'Banana', 'Orange', 'Apple', 'Banana'] for _ in range(5)]\n        positions, df = task_func(dictionary, 'Apple')\n        self.assertListEqual(sorted(positions), sorted([(0, 0), (0, 3), (1, 0), (1, 3), (2, 0), (2, 3), (3, 0), (3, 3), (4, 0), (4, 3)]))\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_2(self):\n        dictionary = [['Orange', 'Banana', 'Apple', 'Apple', 'Banana'] for _ in range(5)]\n        positions, df = task_func(dictionary, 'Apple')\n        self.assertListEqual(sorted(positions), sorted([(0, 2), (0, 3), (1, 2), (1, 3), (2, 2), (2, 3), (3, 2), (3, 3), (4, 2), (4, 3)]))\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_3(self):\n        dictionary = [['Apple', 'Banana', 'Apple', 'Orange', 'Banana'] for _ in range(5)]\n        positions, df = task_func(dictionary, 'Orange')\n        self.assertListEqual(positions, [(i, 3) for i in range(5)])\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_4(self):\n        dictionary = [['Banana', 'Banana', 'Banana', 'Banana', 'Banana'] for _ in range(5)]\n        positions, df = task_func(dictionary, 'Apple')\n        self.assertListEqual(positions, [])\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_5(self):\n        dictionary = [['Apple', 'Apple', 'Apple', 'Apple', 'Apple'] for _ in range(5)]\n        positions, df = task_func(dictionary, 'Apple')\n        self.assertListEqual(positions, [(i, j) for i in range(5) for j in range(5)])\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_6(self):\n        dictionary = [['Apple', 'Banana', 'Orange', 'Apple', 'Banana'] for _ in range(5)]\n        sample_size = 3\n        seed_value = 42\n        positions_sampled, df = task_func(dictionary, 'Apple', sample_size=sample_size, random_seed=seed_value)\n        self.assertEqual(len(positions_sampled), sample_size)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_7(self):\n        dictionary = [['Apple', 'Banana', 'Orange', 'Apple', 'Banana'] for _ in range(10)]\n        sample_size = 5\n        seed_value = 42\n        positions_sampled_1, df = task_func(dictionary, 'Apple', sample_size=sample_size, random_seed=seed_value)\n        positions_sampled_2, df = task_func(dictionary, 'Apple', sample_size=sample_size, random_seed=seed_value)\n        self.assertListEqual(positions_sampled_1, positions_sampled_2)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a dictionary where keys are letters from a predefined list LETTERS and values are lists of random integers. Then, calculates the population standard deviation for each list of integers and returns a dictionary of these values. The random integers for each key are generated within the range 0 to 100, and each list contains between 1 to 10 integers.\nThe function should output with:\n    dict: A dictionary where each key corresponds to a letter from the input list and each value is the\n    population standard deviation of a list of random integers associated with that key.\nYou should write self-contained code starting with:\n```\nimport random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n```",
        "gt": "import random\nimport math\ndef task_func(LETTERS=[chr(i) for i in range(97, 123)]):\n    random_dict = {k: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for k in LETTERS}\n    sd_dict = {\n        k: math.sqrt(sum((i - sum(v) / len(v)) ** 2 for i in v) / len(v))\n        for k, v in random_dict.items()\n    }\n    return sd_dict",
        "test": "import unittest\nfrom unittest.mock import patch\nimport math\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.LETTERS = [chr(i) for i in range(97, 123)]\n        random.seed(42)\n    def test_default_letters(self):\n        # Test the function with the default set of letters\n        sd_dict = task_func()\n        self.assertEqual(set(self.LETTERS), set(sd_dict.keys()))\n        for val in sd_dict.values():\n            self.assertGreaterEqual(val, 0)\n    def test_custom_letters(self):\n        # Test the function with a custom set of letters\n        custom_letters = ['x', 'y', 'z']\n        sd_dict = task_func(custom_letters)\n        self.assertEqual(set(custom_letters), set(sd_dict.keys()))\n        for val in sd_dict.values():\n            self.assertGreaterEqual(val, 0)\n    \n    @patch('random.randint')\n    def test_uniform_values(self, mocked_randint):\n         # Test with uniform values to check standard deviation is zero\n        mocked_randint.side_effect = [3, 50, 50, 50, 3, 50, 50, 50]  # Two iterations: size 3, values all 50\n        letters = ['a', 'b']\n        sd_dict = task_func(letters)\n        self.assertTrue(all(math.isclose(val, 0, abs_tol=1e-5) for val in sd_dict.values()))\n    \n    def test_empty_letters(self):\n        # Test with an empty list of letters\n        sd_dict = task_func([])\n        self.assertEqual(sd_dict, {})\n    @patch('random.randint')\n    def test_known_values(self, mocked_randint):\n        # Test with known values to check correct standard deviation calculation\n        mocked_randint.side_effect = [2, 10, 1]  # List size of 2, with values 10 and 1\n        letters = ['a']\n        sd_dict = task_func(letters)\n        values = [10, 1]\n        mean = sum(values) / len(values)\n        sum_of_squares = sum((x - mean) ** 2 for x in values)\n        expected_sd = math.sqrt(sum_of_squares / len(values))\n        self.assertAlmostEqual(list(sd_dict.values())[0], expected_sd)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a high-dimensional dataset, run PCA to reduce its dimensionality, and then draw a heatmap of the covariance matrix of the transformed data.\nThe function should output with:\n    tuple:\n    transformed_data (ndarray): The transformed data of shape (N_SAMPLES, n_components).\n    heatmap_axes (Axes): The heatmap of the covariance matrix of the transformed data or None if n_components=1.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n```",
        "gt": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(n_components=2, N_SAMPLES=500, N_FEATURES=50, random_seed=None):\n    np.random.seed(random_seed)  # Ensuring reproducibility\n    X = np.random.rand(N_SAMPLES, N_FEATURES)\n\n    pca = PCA(n_components=n_components, random_state=random_seed)\n    X_transformed = pca.fit_transform(X)\n\n    if n_components == 1:\n        return X_transformed, None\n\n    fig, ax = plt.subplots(figsize=(10, 7))\n    sns.heatmap(np.cov(X_transformed.T), annot=True, fmt=\".2f\", ax=ax)\n\n    return X_transformed, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.seed = 42\n        # default parameters\n        self.n_components = 2\n        self.N_SAMPLES = 500\n        self.N_FEATURES = 50\n    def test_case_1(self):\n        # Test basic functionality - results\n        transformed_data, _ = task_func()\n        self.assertEqual(transformed_data.shape, (self.N_SAMPLES, self.n_components))\n        np.random.seed(self.seed)\n        X = np.random.rand(self.N_SAMPLES, self.N_FEATURES)\n        pca = PCA(n_components=self.n_components, random_state=self.seed)\n        pca.fit(X)\n        self.assertTrue(np.sum(pca.explained_variance_ratio_) <= 1)\n    def test_case_2(self):\n        # Test basic functionality - visualization\n        _, heatmap_axes = task_func()\n        self.assertIsNotNone(heatmap_axes)\n        self.assertIsInstance(heatmap_axes, plt.Axes)\n        self.assertEqual(len(heatmap_axes.get_xticklabels()), 2)\n        self.assertEqual(len(heatmap_axes.get_yticklabels()), 2)\n    def test_case_3(self):\n        # Test n_components\n        for n_components in [1, 10, self.N_FEATURES]:\n            transformed_data, _ = task_func(\n                n_components=n_components, N_FEATURES=self.N_FEATURES\n            )\n            self.assertEqual(transformed_data.shape, (self.N_SAMPLES, n_components))\n    def test_case_4(self):\n        # Test N_SAMPLES\n        for n_samples in [self.n_components, 10, 50, 100]:\n            transformed_data, _ = task_func(N_SAMPLES=n_samples)\n            self.assertEqual(transformed_data.shape, (n_samples, self.n_components))\n    def test_case_5(self):\n        # Test N_FEATURES\n        for n_features in [self.n_components, 10, 50, 100]:\n            transformed_data, _ = task_func(N_FEATURES=n_features)\n            self.assertEqual(\n                transformed_data.shape, (self.N_SAMPLES, self.n_components)\n            )\n    def test_case_6(self):\n        # Test random_seed\n        transformed_data1, _ = task_func(random_seed=self.seed)\n        transformed_data2, _ = task_func(random_seed=self.seed)\n        np.testing.assert_array_equal(transformed_data1, transformed_data2)\n        transformed_data2, _ = task_func(random_seed=0)\n        with self.assertRaises(AssertionError):\n            np.testing.assert_array_equal(transformed_data1, transformed_data2)\n    def test_case_7(self):\n        # Function should fail at invalid values\n        with self.assertRaises(ValueError):\n            # negative n_components\n            task_func(n_components=-1)\n        with self.assertRaises(ValueError):\n            # more components than features\n            task_func(n_components=self.N_FEATURES + 10, N_FEATURES=self.N_FEATURES)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a numeric array from the \"original\" list, calculate Fast Fourier Transform (FFT) and record the original and FFT data. Additionally, plot the histogram of the magnitude of the FFT data and return the axes object of the plot. For an empty list, return an empty array for the FFT data and None for the axes object.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: FFT data.\n    plt.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n```",
        "gt": "import numpy as np\nfrom scipy.fft import fft\nfrom matplotlib import pyplot as plt\ndef task_func(original):\n    arr = np.array([b for (_, b) in original])\n\n    if arr.size == 0:\n        fft_data = np.array([])\n        return arr, fft_data, None\n\n    fft_data = fft(arr)\n    _, ax = plt.subplots()\n    ax.hist(np.abs(fft_data))\n\n    return arr, fft_data, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n        arr, fft_data, _ = task_func(original)\n        self.assertTrue(np.array_equal(arr, np.array([1, 2, 3, 4])))\n        self.assertIsInstance(fft_data, np.ndarray)\n        self.assertEqual(fft_data.shape, (4,))\n    def test_case_2(self):\n        original = [('a', i) for i in range(1, 101)]\n        arr, fft_data, ax = task_func(original)\n        self.assertTrue(np.array_equal(arr, np.array(range(1, 101))))\n        self.assertIsInstance(fft_data, np.ndarray)\n        self.assertEqual(fft_data.shape, (100,))\n        # Test that the plot is created\n        self.assertIsInstance(ax, plt.Axes)\n        # Test the axis limits\n        self.assertEqual(ax.get_xlim(), (-200.0, 5300.0))\n    def test_case_3(self):\n        original = [('a', 5) for i in range(10)]\n        arr, fft_data, _ = task_func(original)\n        self.assertTrue(np.array_equal(arr, np.array([5]*10)))\n        self.assertIsInstance(fft_data, np.ndarray)\n        self.assertEqual(fft_data.shape, (10,))\n    def test_case_4(self):\n        original = [('a', i) for i in range(10)]\n        arr, fft_data, ax = task_func(original)\n        self.assertTrue(np.array_equal(arr, np.array(range(10))))\n        self.assertIsInstance(fft_data, np.ndarray)\n        self.assertEqual(fft_data.shape, (10,))\n        # Test the plot data array\n        self.assertEqual(len(ax.get_children()), 20)\n        # Test the plot limits\n        self.assertEqual(ax.get_xlim(), (3.0, 47.0))\n    def test_case_5(self):\n        original = []\n        arr, fft_data, ax = task_func(original)\n        self.assertTrue(np.array_equal(arr, np.array([])))\n        self.assertIsInstance(fft_data, np.ndarray)\n        self.assertEqual(fft_data.shape, (0,))\n        self.assertIsNone(ax)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculates the Pearson correlation coefficient between numerical scores and categorical grades. This function performs three main tasks: 1. Converts scores from string format to floats. 2. Encodes categorical grades into numerical values based on their rank order. 3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\nThe function should output with:\n    correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n    Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nfrom scipy.stats import pearsonr\ndef task_func(data):\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_normal_operation(self):\n        \"\"\"\n        Test normal operation with valid input.\n        \"\"\"\n        data = {\"Score_String\": [\"80.5\", \"85.7\", \"90.2\"], \"Grade\": [\"B\", \"B+\", \"A-\"]}\n        result = task_func(data)\n        self.assertIsInstance(result, float)\n    def test_empty_input(self):\n        \"\"\"\n        Test the function with empty input.\n        \"\"\"\n        data = {\"Score_String\": [], \"Grade\": []}\n        result = task_func(data)\n        self.assertTrue(pd.isna(result))\n    def test_invalid_score_format(self):\n        \"\"\"\n        Test the function with invalid score format.\n        \"\"\"\n        data = {\"Score_String\": [\"eighty\", \"85.7\", \"90.2\"], \"Grade\": [\"B\", \"B+\", \"A-\"]}\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_mismatched_lengths(self):\n        \"\"\"\n        Test the function with mismatched lengths of scores and grades.\n        \"\"\"\n        data = {\"Score_String\": [\"80.5\", \"85.7\"], \"Grade\": [\"B\", \"B+\", \"A-\"]}\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_non_ordinal_grades(self):\n        \"\"\"\n        Test the function with non-ordinal grade inputs.\n        \"\"\"\n        data = {\n            \"Score_String\": [\"80.5\", \"85.7\", \"90.2\"],\n            \"Grade\": [\"Pass\", \"Fail\", \"Pass\"],\n        }\n        result = task_func(data)\n        self.assertIsInstance(result, float)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Copies data from an Excel spreadsheet into a new Excel file, then reads the new Excel file and returns its contents.\nThe function should raise the exception for: FileNotFoundError: If the original Excel file does not exist at the specified path. ValueError: If the specified sheet does not exist in the workbook.\nThe function should output with:\n    DataFrame: A pandas DataFrame representing the content of the new Excel file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n```",
        "gt": "import pandas as pd\nimport os\ndef task_func(original_file_location=\"test.xlsx\", new_file_location=\"new_test.xlsx\", sheet_name=\"Sheet1\"):\n    if not os.path.exists(original_file_location):\n        raise FileNotFoundError(f\"No file found at {original_file_location}\")\n\n    # Read data from the original Excel file\n    try:\n        original_df = pd.read_excel(original_file_location, sheet_name=sheet_name)\n    except ValueError as e:\n        raise ValueError(f\"Error reading sheet: {e}\")\n\n    # Write data to a new Excel file\n    original_df.to_excel(new_file_location, index=False)\n\n    # Read and return data from the new Excel file\n    new_df = pd.read_excel(new_file_location)\n    return new_df",
        "test": "import unittest\nimport os\nimport pandas as pd\ndef create_dummy_excel(file_path='test.xlsx', sheet_name='Sheet1'):\n    \"\"\"\n    Creates a dummy Excel file for testing with a specified sheet name and sample data.\n    \"\"\"\n    df = pd.DataFrame({'A': [10, 30], 'B': [20, 40]})\n    df.to_excel(file_path, index=False, sheet_name=sheet_name)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        create_dummy_excel()\n    def tearDown(self):\n        os.remove('test.xlsx')\n        if os.path.exists('new_test.xlsx'):\n            os.remove('new_test.xlsx')\n    def test_normal_functionality(self):\n        df = task_func('test.xlsx', 'new_test.xlsx', 'Sheet1')\n        \n        expect = pd.DataFrame({'A': [10, 30], 'B': [20, 40]})\n        self.assertIsInstance(df, pd.DataFrame)\n        pd.testing.assert_frame_equal(expect, df)\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.xlsx', 'new_test.xlsx', 'Sheet1')\n    def test_invalid_sheet_name(self):\n        with self.assertRaises(ValueError):\n            task_func('test.xlsx', 'new_test.xlsx', 'NonExistentSheet')\n    def test_data_integrity(self):\n        df = task_func('test.xlsx', 'new_test.xlsx', 'Sheet1')\n        expected_df = pd.DataFrame({'A': [10, 30], 'B': [20, 40]})\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_column_names_preserved(self):\n        df = task_func('test.xlsx', 'new_test.xlsx', 'Sheet1')\n        self.assertListEqual(list(df.columns), ['A', 'B'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Performs a Fast Fourier Transform (FFT) on the sum of each row in a 2D array and plots the absolute values of the FFT coefficients.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object displaying the plot of the absolute values of the FFT coefficients.\nYou should write self-contained code starting with:\n```\nfrom scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n```",
        "gt": "from scipy import fftpack\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    row_sums = arr.sum(axis=1)\n    fft_coefficients = fftpack.fft(row_sums)\n\n    _, ax = plt.subplots()\n    ax.plot(np.abs(fft_coefficients))\n    ax.set_title(\"Absolute values of FFT coefficients\")\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nfrom scipy import fftpack\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_plot_title(self):\n        \"\"\"Test that the plot title is correct.\"\"\"\n        arr = np.array([[i + j for i in range(3)] for j in range(5)])\n        ax = task_func(arr)\n        self.assertEqual(ax.get_title(), \"Absolute values of FFT coefficients\")\n    def test_plot_data(self):\n        \"\"\"Test that the plot data is correct.\"\"\"\n        arr = np.array([[i + j for i in range(3)] for j in range(5)])\n        ax = task_func(arr)\n        y_data = ax.lines[0].get_ydata()\n        row_sums = arr.sum(axis=1)\n        fft_coefficients = fftpack.fft(row_sums)\n        expected_y_data = np.abs(fft_coefficients)\n        np.testing.assert_array_equal(y_data, expected_y_data)\n    def test_with_zeros(self):\n        \"\"\"Test that the plot data is correct when the array is all zeros.\"\"\"\n        arr = np.zeros((5, 3))\n        ax = task_func(arr)\n        y_data = ax.lines[0].get_ydata()\n        expected_y_data = np.zeros(5)\n        np.testing.assert_array_equal(y_data, expected_y_data)\n    def test_with_ones(self):\n        \"\"\"Test that the plot data is correct when the array is all ones.\"\"\"\n        arr = np.ones((5, 3))\n        ax = task_func(arr)\n        y_data = ax.lines[0].get_ydata()\n        expected_y_data = [15.0, 0.0, 0.0, 0.0, 0.0]\n        np.testing.assert_array_almost_equal(y_data, expected_y_data)\n    def test_with_large_numbers(self):\n        \"\"\"Test that the plot data is correct when the array has large numbers.\"\"\"\n        arr = np.array([[i * 100 + j * 1000 for i in range(3)] for j in range(5)])\n        ax = task_func(arr)\n        y_data = ax.lines[0].get_ydata()\n        row_sums = arr.sum(axis=1)\n        fft_coefficients = fftpack.fft(row_sums)\n        expected_y_data = np.abs(fft_coefficients)\n        np.testing.assert_array_equal(y_data, expected_y_data)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform Principal Component Analysis (PCA) on the given array and record the first two main components.\nNote that: This function use \"PCA Result\" as the title of the plot. This function use \"First Principal Component\" and \"Second Principal Component\" as the xlabel and ylabel of the plot, respectively.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object of the generated plot\nYou should write self-contained code starting with:\n```\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(l):\n```",
        "gt": "from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    pca = PCA(n_components=2)\n    principalComponents = pca.fit_transform(l)\n    \n    fig = plt.figure(figsize=(6, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter(principalComponents[:, 0], principalComponents[:, 1])\n    plt.xlabel('First Principal Component')\n    plt.ylabel('Second Principal Component')\n    plt.title('PCA Result')\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input 1: simple 2D array\n        l = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        ax = task_func(l)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(ax.get_title(), \"PCA Result\")\n        self.assertEqual(ax.get_xlabel(), \"First Principal Component\")\n        self.assertEqual(ax.get_ylabel(), \"Second Principal Component\")\n        # Check the number of points\n        self.assertEqual(len(ax.collections[0].get_offsets()), len(l))\n        plt.close()\n    def test_case_2(self):\n        # Input 2: another simple 2D array\n        l = np.array([[2, 3], [4, 5], [6, 7], [8, 9]])\n        ax = task_func(l)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(ax.get_title(), \"PCA Result\")\n        self.assertEqual(ax.get_xlabel(), \"First Principal Component\")\n        self.assertEqual(ax.get_ylabel(), \"Second Principal Component\")\n        # Check the number of points\n        self.assertEqual(len(ax.collections[0].get_offsets()), len(l))\n        plt.close()\n    def test_case_3(self):\n        # Input 3: larger array\n        np.random.seed(0)\n        l = np.random.rand(10, 2)\n        ax = task_func(l)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(ax.get_title(), \"PCA Result\")\n        self.assertEqual(ax.get_xlabel(), \"First Principal Component\")\n        self.assertEqual(ax.get_ylabel(), \"Second Principal Component\")\n        # Check the number of points\n        self.assertEqual(len(ax.collections[0].get_offsets()), len(l))\n        plt.close()\n    def test_case_4(self):\n        # Input 4: array with similar values (less variance)\n        l = np.array([[1, 2], [1, 2.1], [1.1, 2], [1.1, 2.1]])\n        ax = task_func(l)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(ax.get_title(), \"PCA Result\")\n        self.assertEqual(ax.get_xlabel(), \"First Principal Component\")\n        self.assertEqual(ax.get_ylabel(), \"Second Principal Component\")\n        # Check the number of points\n        self.assertEqual(len(ax.collections[0].get_offsets()), len(l))\n        plt.close()\n    def test_case_5(self):\n        # Input 5: array with larger values\n        l = np.array([[100, 200], [300, 400], [500, 600], [700, 800]])\n        ax = task_func(l)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(ax.get_title(), \"PCA Result\")\n        self.assertEqual(ax.get_xlabel(), \"First Principal Component\")\n        self.assertEqual(ax.get_ylabel(), \"Second Principal Component\")\n        # Check the number of points\n        self.assertEqual(len(ax.collections[0].get_offsets()), len(l))\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Check a log file and format the lines that contain certain keywords. This code reads the log file specified by log_file_path; searches for lines containing any of the keywords provided in the list; and formats each line to display the keyword, the timestamp, and the message separated by 20 spaces.\nThe function should output with:\n    formatted_lines (list): Returns a list of formatted strings containing the relevant information.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n```",
        "gt": "import os\nimport re\ndef task_func(log_file_path: str, keywords: list):\n    if not os.path.exists(log_file_path):\n        raise FileNotFoundError(f\"Log file {log_file_path} does not exist.\")\n    \n    formatted_lines = []\n    with open(log_file_path, 'r') as log:\n        for line in log:\n            for keyword in keywords:\n                if keyword in line:\n                    parts = re.split(r'\\s+', line.strip(), maxsplit=2)\n                    if len(parts) == 3:\n                        formatted_line = f\"{keyword:>{20}} : {parts[1]:>{20}} : {parts[2]:>{20}}\"\n                        formatted_lines.append(formatted_line)\n                    else:\n                        # Handle lines that do not conform to expected structure\n                        formatted_lines.append(f\"Line format unexpected: {line.strip()}\")\n    return formatted_lines",
        "test": "import unittest\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup code to create a test log file\n        self.test_file_path = \"test_log_file.log\"\n        with open(self.test_file_path, 'w') as f:\n            f.write(\"ERROR 11:30:10 This is an error message\\n\")\n            f.write(\"WARNING 11:35:10 This is a warning message\\n\")\n    def tearDown(self):\n        # Cleanup the test log file\n        os.remove(self.test_file_path)\n    def test_nonexistent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"/path/to/nonexistent/file.log\", ['ERROR', 'WARNING'])\n    def test_empty_keywords(self):\n        self.assertEqual(task_func(self.test_file_path, []), [])\n    def test_single_keyword(self):\n        result = task_func(self.test_file_path, ['ERROR'])\n        self.assertTrue(all('ERROR' in line for line in result))\n    def test_multiple_keywords(self):\n        result = task_func(self.test_file_path, ['ERROR', 'WARNING'])\n        self.assertTrue(all(any(kw in line for kw in ['ERROR', 'WARNING']) for line in result))\n    def test_all_keywords(self):\n        result = task_func(self.test_file_path, ['ERROR', 'WARNING', 'INFO'])\n        self.assertTrue(len(result) >= 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize the 'age' and 'income' columns for each group by 'id' in a Pandas DataFrame, and return the standardized DataFrame.\nThe function should raise the exception for: This function will raise ValueError if the DataFrame does not have the 'id', 'age', and 'income' columns.\nThe function should output with:\n    DataFrame: The pandas DataFrame after standardizing 'age' and 'income' columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    try:\n        scaler = StandardScaler()\n\n        df_grouped = df.groupby('id').apply(lambda x: pd.DataFrame(scaler.fit_transform(x[['age', 'income']]), columns=['age', 'income'], index=x.index))\n\n        return df_grouped\n    except:\n        raise ValueError()",
        "test": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport unittest\nclass TestCases(unittest.TestCase):\n    def test_empty_dataframe(self):\n        df = pd.DataFrame(columns=['id', 'age', 'income'])\n        result = task_func(df)\n        self.assertEqual(len(result), 0)\n    def test_example_dataframe(self):\n        df = pd.DataFrame({\n            'id': [1, 1, 2, 2, 3, 3],\n            'age': [25, 26, 35, 36, 28, 29],\n            'income': [50000, 60000, 70000, 80000, 90000, 100000]\n        })\n        result = task_func(df)\n        scaler = StandardScaler()\n        #check random point\n        self.assertEqual(-1, result.iloc[0]['age'])\n    def test_single_group(self):\n        df = pd.DataFrame({'id': [1, 1], 'age': [30, 40], 'income': [50000, 60000]})\n        result = task_func(df)\n        self.assertEqual(len(result), 2)\n        self.assertNotEqual(result.iloc[0]['age'], 30)  # Checking if values are standardized\n    def test_multiple_groups(self):\n        df = pd.DataFrame({'id': [1, 1, 2, 2], 'age': [25, 35, 45, 55], 'income': [30000, 40000, 50000, 60000]})\n        result = task_func(df)\n        self.assertEqual(len(result), 4)\n    def test_negative_values(self):\n        df = pd.DataFrame({'id': [1, 1], 'age': [-20, -30], 'income': [-10000, -20000]})\n        result = task_func(df)\n        self.assertEqual(len(result), 2)\n    def test_large_data(self):\n        df = pd.DataFrame({'id': list(range(1000)), 'age': list(range(1000)), 'income': list(range(1000, 2000))})\n        result = task_func(df)\n        self.assertEqual(len(result), 1000)\n    \n    def test_invalid_df(self):\n        df = pd.DataFrame()\n        with self.assertRaises(ValueError):\n            task_func(df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Train a linear regression model on a given DataFrame.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    LinearRegression: The trained linear regression model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Constants\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Constants\nFEATURES = ['feature '+str(i) for i in range(1, 11)]\nTARGET = 'target'\ndef task_func(df):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    X = df[FEATURES]\n    y = df[TARGET]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return model",
        "test": "import unittest\nimport pandas as pd\nfrom io import StringIO\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with CSV data\n        TESTDATA = StringIO(\"\"\"feature 1,feature 2,feature 3,feature 4,feature 5,feature 6,feature 7,feature 8,feature 9,feature 10,target\n                    0.42400509556218957,0.4556954476778564,0.5876033479070203,0.7372019791788254,0.631294770216076,0.4950266019166166,0.0638144062778504,0.7069802218693271,0.9005726909016923,0.6939292546038213,14.696123816111275\n                    0.7424296388887492,0.37759478623365395,0.6150348990404139,0.5245385173014507,0.34372354676823247,0.26734555024798334,0.25816065500447305,0.7593949490266066,0.28726200622586806,0.1389614032632609,11.314445952000693\n                    0.5542329648360879,0.8921257562394426,0.8642884839827235,0.15535175081891284,0.04765544199312799,0.6959587174128501,0.8750991336831166,0.9405740432480505,0.6080858349786378,0.20758024604975633,11.840952373242706\n                    0.3128080182238582,0.4306484443433306,0.13158163455824945,0.6124936004910966,0.3658172041589832,0.8865358950435007,0.6896354766071041,0.49374167962283977,0.09496096416410882,0.8635022149845224,9.881725132197595\n                    0.9918117132641856,0.34155948441867745,0.13825937535425548,0.2075606744217059,0.5024270600409457,0.4499385613253092,0.927332889017184,0.9226317268159956,0.7109355740305163,0.48498273400417413,7.67743979269295\n                    0.8487974650141276,0.5419882208385368,0.6219327392404139,0.607186072248796,0.5817917868937075,0.16757506758203844,0.513478962441245,0.5813924083375205,0.2999370992352748,0.8095241847125411,9.573604006544201\n                    0.8531765660138543,0.6230807384621613,0.121193482114335,0.40339655427645227,0.8252000772363516,0.7089362855980166,0.4399130776125867,0.5547381179483073,0.5271579371209105,0.4887721459504082,8.545564982333383\n                    0.7379434286935841,0.35388533243065834,0.28270164727057234,0.10937131252334209,0.7554490444282028,0.11627353503671667,0.29878795437943706,0.5272147239980629,0.6682257849027331,0.4506451053217232,5.300497868985032\n                    0.51734842472885,0.7300897961646883,0.8822236158906909,0.8223865310105216,0.14248094409880296,0.49409856103306826,0.9337165561571048,0.8043124404561036,0.912213630647814,0.41502961287020834,13.653900113057855\n                    0.4338281641525509,0.6559602318884544,0.62746801792774,0.5038739464689795,0.08921870715449975,0.7274382944105564,0.6152014156275979,0.2093703770326366,0.9052167270350973,0.4696339914768609,8.237209873174972\n                    \"\"\")\n        df = pd.read_csv(TESTDATA)\n        model = task_func(df)\n        self.assertIsInstance(model, LinearRegression, \"Return type should be LinearRegression\")\n        self.assertEqual(len(model.coef_), 10, \"Model should have coefficients for all 10 features\")\n        \n    def test_case_2(self):\n        # Testing with JSON data\n        TESTDATA = StringIO(\"\"\"[{\"feature 1\":0.4240050956,\"feature 2\":0.4556954477,\"feature 3\":0.5876033479,\n                            \"feature 4\":0.7372019792,\"feature 5\":0.6312947702,\"feature 6\":0.4950266019,\n                            \"feature 7\":0.0638144063,\"feature 8\":0.7069802219,\"feature 9\":0.9005726909,\n                            \"feature 10\":0.6939292546,\"target\":14.6961238161},{\"feature 1\":0.7424296389,\n                            \"feature 2\":0.3775947862,\"feature 3\":0.615034899,\"feature 4\":0.5245385173,\n                            \"feature 5\":0.3437235468,\"feature 6\":0.2673455502,\"feature 7\":0.258160655,\n                            \"feature 8\":0.759394949,\"feature 9\":0.2872620062,\"feature 10\":0.1389614033,\n                            \"target\":11.314445952},{\"feature 1\":0.5542329648,\"feature 2\":0.8921257562,\n                            \"feature 3\":0.864288484,\"feature 4\":0.1553517508,\"feature 5\":0.047655442,\n                            \"feature 6\":0.6959587174,\"feature 7\":0.8750991337,\"feature 8\":0.9405740432,\n                            \"feature 9\":0.608085835,\"feature 10\":0.207580246,\"target\":11.8409523732}\n                            ] \"\"\")\n        df = pd.read_json(TESTDATA)\n        model = task_func(df)\n        self.assertIsInstance(model, LinearRegression, \"Return type should be LinearRegression\")\n        self.assertEqual(len(model.coef_), 10, \"Model should have coefficients for all 10 features\")\n        \n    def test_case_3(self):\n        # Testing with random data\n        np.random.seed(0)\n        df = pd.DataFrame({\n            'feature ' + str(i): np.random.rand(100) for i in range(1, 11)\n        })\n        df['target'] = df.apply(lambda row: sum(row), axis=1)\n        model = task_func(df)\n        self.assertIsInstance(model, LinearRegression, \"Return type should be LinearRegression\")\n        self.assertEqual(len(model.coef_), 10, \"Model should have coefficients for all 10 features\")\n    def test_case_4(self):\n        # Testing with data where all features are zeros\n        df = pd.DataFrame({\n            'feature ' + str(i): [0]*100 for i in range(1, 11)\n        })\n        df['target'] = [0]*100\n        model = task_func(df)\n        self.assertIsInstance(model, LinearRegression, \"Return type should be LinearRegression\")\n        self.assertTrue(all(coef == 0 for coef in model.coef_), \"All coefficients should be zero\")\n    def test_case_5(self):\n        # Testing with data where target is a linear combination of features\n        np.random.seed(0)\n        df = pd.DataFrame({\n            'feature ' + str(i): np.random.rand(100) for i in range(1, 11)\n        })\n        df['target'] = df['feature 1'] + 2*df['feature 2'] + 3*df['feature 3']\n        model = task_func(df)\n        self.assertIsInstance(model, LinearRegression, \"Return type should be LinearRegression\")\n        self.assertAlmostEqual(model.coef_[0], 1, places=1, msg=\"Coefficient for feature 1 should be close to 1\")\n        self.assertAlmostEqual(model.coef_[1], 2, places=1, msg=\"Coefficient for feature 2 should be close to 2\")\n        self.assertAlmostEqual(model.coef_[2], 3, places=1, msg=\"Coefficient for feature 3 should be close to 3\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame representing the GDP for a predefined set of countries based on their presence in the p rovided dictionary. The GDP values are simulated with random integers to model economic data.\nThe function should output with:\n    DataFrame: A pandas DataFrame with each country's name from the input as the index and a randomly generated GDP\n    value as the column. GDP values range between 1,000,000,000 and 100,000,000,000.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(country_dict):\n    COUNTRIES = ['USA', 'UK', 'China', 'Japan', 'Australia']\n    country_gdp = {country: np.random.randint(1000000000, 100000000000, dtype=np.int64) for country in COUNTRIES if\n                   country in country_dict.values()}\n\n    gdp_df = pd.DataFrame.from_dict(country_gdp, orient='index', columns=['GDP'])\n\n    return gdp_df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        country_dict = {'John': 'USA', 'Alice': 'UK', 'Bob': 'China'}\n        result = task_func(country_dict)\n        self.assertIsInstance(result, pd.DataFrame)\n        self.assertListEqual(list(result.index), ['USA', 'UK', 'China'])\n        self.assertTrue(result['GDP'].apply(lambda x: 1000000000 <= x <= 100000000000).all())\n    def test_case_2(self):\n        country_dict = {'Charlie': 'Japan', 'David': 'Australia'}\n        result = task_func(country_dict)\n        self.assertIsInstance(result, pd.DataFrame)\n        self.assertListEqual(list(result.index), ['Japan', 'Australia'])\n        self.assertTrue(result['GDP'].apply(lambda x: 1000000000 <= x <= 100000000000).all())\n    def test_case_3(self):\n        country_dict = {'Eve': 'USA', 'Frank': 'UK', 'Grace': 'China', 'Hannah': 'Japan', 'Ian': 'Australia'}\n        result = task_func(country_dict)\n        self.assertIsInstance(result, pd.DataFrame)\n        self.assertListEqual(list(result.index), ['USA', 'UK', 'China', 'Japan', 'Australia'])\n        self.assertTrue(result['GDP'].apply(lambda x: 1000000000 <= x <= 100000000000).all())\n    def test_case_4(self):\n        country_dict = {'Jack': 'USA'}\n        result = task_func(country_dict)\n        self.assertIsInstance(result, pd.DataFrame)\n        self.assertListEqual(list(result.index), ['USA'])\n        self.assertTrue(result['GDP'].apply(lambda x: 1000000000 <= x <= 100000000000).all())\n    def test_case_5(self):\n        country_dict = {}\n        result = task_func(country_dict)\n        self.assertIsInstance(result, pd.DataFrame)\n        self.assertListEqual(list(result.index), [])\n        self.assertTrue(result.empty)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of each word in a text after removing specific stopwords.\nThe function should output with:\n    Series: A pandas Series with word frequencies excluding the words in STOPWORDS list.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\n# Constants\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n```",
        "gt": "import pandas as pd\nimport regex as re\n# Constants\nSTOPWORDS = [\"a\", \"an\", \"the\", \"in\", \"is\", \"are\"]\ndef task_func(text):\n    words = re.findall(r\"\\b\\w+\\b\", text.lower())\n    words = [word for word in words if word not in STOPWORDS]\n    word_counts = pd.Series(words).value_counts().rename(None)\n    return word_counts",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        text = \"This is a sample text This text contains sample words\"\n        word_counts = task_func(text).to_dict()\n        expected_counts = {\"this\": 2, \"sample\": 2, \"text\": 2, \"contains\": 1, \"words\": 1}\n        self.assertDictEqual(word_counts, expected_counts)\n    def test_case_2(self):\n        text = \"Hello world Hello everyone\"\n        word_counts = task_func(text).to_dict()\n        expected_counts = {\"hello\": 2, \"world\": 1, \"everyone\": 1}\n        self.assertDictEqual(word_counts, expected_counts)\n    def test_case_3(self):\n        text = \"a an the in is are\"\n        word_counts = task_func(text).to_dict()\n        expected_counts = {}\n        self.assertDictEqual(word_counts, expected_counts)\n    def test_case_4(self):\n        text = \"This is a test sentence which has a bunch of words and no period\"\n        word_counts = task_func(text).to_dict()\n        expected_counts = {\n                \"this\": 1,\n                \"test\": 1,\n                \"sentence\": 1,\n                \"which\": 1,\n                \"has\": 1,\n                \"bunch\": 1,\n                \"of\": 1,\n                \"words\": 1,\n                \"and\": 1,\n                \"no\": 1,\n                \"period\": 1,\n            }\n        self.assertDictEqual(word_counts, expected_counts)\n    def test_case_5(self):\n        text = (\n            \"I I I want want to to to to to go to to to the olympics olympics this year\"\n        )\n        word_counts = task_func(text).to_dict()\n        expected_counts = {\"i\": 3, \"want\": 2, \"to\": 8, \"go\": 1, \"olympics\": 2, \"this\": 1, \"year\": 1}\n        self.assertDictEqual(word_counts, expected_counts)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of matrix \"P\" and 3D tensor \"T\" then return dataframe of normalized results. This function performs matrix-tensor multiplication between a matrix \"P\" and a 3D tensor \"T\" using numpy. It checks if the shapes of P and T are compatible for multiplication, raising a ValueError if they are not. The function then normalizes the resulting 2D array using sklearn's StandardScaler. The final output is returned as a pandas DataFrame, with columns named feature_0, feature_1, ..., feature_n, where n is the number of features in the flattened result of the matrix-tensor multiplication.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with the normalized result.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(P, T):\n    if P.size == 0 or T.size == 0:\n        raise ValueError(\"Inputs cannot be empty.\")\n    if P.shape[1] != T.shape[0]:\n        raise ValueError(\n            f\"Matrix P shape {P.shape[1]} and Tensor T shape {T.shape[0]} are incompatible for tensor multiplication.\"\n        )\n\n    result = np.tensordot(P, T, axes=[1, 0]).swapaxes(0, 1)\n    result = result.reshape(result.shape[0], -1)\n\n    scaler = StandardScaler()\n    result = scaler.fit_transform(result)\n\n    adjusted_feature_names = [f\"feature_{i}\" for i in range(result.shape[1])]\n    result = pd.DataFrame(result, columns=adjusted_feature_names)\n\n    return result",
        "test": "import unittest\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nclass TestCases(unittest.TestCase):\n    def tensor_product_manual(self, P, T):\n        \"\"\"Manually compute the tensor product without any normalization.\"\"\"\n        result = np.tensordot(P, T, axes=[1, 0]).swapaxes(0, 1)\n        result = result.reshape(result.shape[0], -1)\n        return result\n    def test_case_1(self):\n        np.random.seed(0)\n        P = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        T = np.random.rand(3, 4, 4)\n        result = task_func(P, T)\n        manual_result = self.tensor_product_manual(P, T)\n        # Reverse normalization for comparison\n        scaler = StandardScaler().fit(manual_result)\n        reversed_result = scaler.inverse_transform(result)\n        self.assertEqual(result.shape, (4, 12))\n        self.assertTrue(np.isclose(result.mean().mean(), 0, atol=1e-5))\n        self.assertTrue(np.allclose(manual_result, reversed_result, atol=1e-5))\n    def test_case_2(self):\n        np.random.seed(0)\n        P = np.array([[1, 2], [3, 4], [5, 6]])\n        T = np.random.rand(3, 5, 5)\n        with self.assertRaises(ValueError):\n            task_func(P, T)\n    def test_case_3(self):\n        np.random.seed(0)\n        P = np.eye(4)\n        T = np.random.rand(4, 6, 6)\n        result = task_func(P, T)\n        manual_result = self.tensor_product_manual(P, T)\n        # Reverse normalization for comparison\n        scaler = StandardScaler().fit(manual_result)\n        reversed_result = scaler.inverse_transform(result)\n        self.assertEqual(result.shape, (6, 24))\n        self.assertTrue(np.isclose(result.mean().mean(), 0, atol=1e-5))\n        self.assertTrue(np.allclose(manual_result, reversed_result, atol=1e-5))\n    def test_case_4(self):\n        np.random.seed(0)\n        P = np.ones((5, 5))\n        T = np.random.rand(5, 7, 7)\n        result = task_func(P, T)\n        manual_result = self.tensor_product_manual(P, T)\n        # Reverse normalization for comparison\n        scaler = StandardScaler().fit(manual_result)\n        reversed_result = scaler.inverse_transform(result)\n        self.assertEqual(result.shape, (7, 35))\n        self.assertTrue(np.isclose(result.mean().mean(), 0, atol=1e-5))\n        self.assertTrue(np.allclose(manual_result, reversed_result, atol=1e-5))\n    def test_case_5(self):\n        np.random.seed(0)\n        P = np.diag(np.arange(1, 7))\n        T = np.random.rand(6, 8, 8)\n        result = task_func(P, T)\n        manual_result = self.tensor_product_manual(P, T)\n        # Reverse normalization for comparison\n        scaler = StandardScaler().fit(manual_result)\n        reversed_result = scaler.inverse_transform(result)\n        self.assertEqual(result.shape, (8, 48))\n        self.assertTrue(np.isclose(result.mean().mean(), 0, atol=1e-5))\n        self.assertTrue(np.allclose(manual_result, reversed_result, atol=1e-5))\n    def test_case_6(self):\n        # Test with an empty matrix and tensor, expecting a ValueError due to incompatible shapes\n        P = np.array([])\n        T = np.array([])\n        with self.assertRaises(ValueError):\n            task_func(P, T)\n    def test_case_7(self):\n        # Test with non-numeric inputs in matrices/tensors to verify type handling\n        P = np.array([[\"a\", \"b\"], [\"c\", \"d\"]])\n        T = np.random.rand(2, 2, 2)\n        with self.assertRaises(Exception):\n            task_func(P, T)\n    def test_case_8(self):\n        # Test with zero matrix and tensor to verify handling of all-zero inputs\n        P = np.zeros((5, 5))\n        T = np.zeros((5, 3, 3))\n        result = task_func(P, T)\n        self.assertTrue(np.allclose(result, np.zeros((3, 15))))\n    def test_case_9(self):\n        # Test DataFrame output for correct column names, ensuring they match expected feature naming convention\n        P = np.random.rand(3, 3)\n        T = np.random.rand(3, 4, 4)\n        result = task_func(P, T)\n        expected_columns = [\n            \"feature_0\",\n            \"feature_1\",\n            \"feature_2\",\n            \"feature_3\",\n            \"feature_4\",\n            \"feature_5\",\n            \"feature_6\",\n            \"feature_7\",\n            \"feature_8\",\n            \"feature_9\",\n            \"feature_10\",\n            \"feature_11\",\n        ]\n        self.assertListEqual(list(result.columns), expected_columns)\n    def test_case_10(self):\n        # Test to ensure DataFrame indices start from 0 and are sequential integers\n        P = np.random.rand(2, 3)\n        T = np.random.rand(3, 5, 5)\n        result = task_func(P, T)\n        expected_indices = list(range(5))  # Expected indices for 5 rows\n        self.assertListEqual(list(result.index), expected_indices)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function writes a dictionary of metrics to a specified log file, appending a timestamp to each entry. >>> metrics = {'precision': 0.75, 'recall': 0.80} >>> task_func(metrics, 'evaluation.log') An error occurred: [Errno 2] No such file or directory: './logs/evaluation.log' False\nThe function should output with:\n    bool: True if the metrics were successfully written to the file, False otherwise.\nYou should write self-contained code starting with:\n```\nimport os\nfrom datetime import datetime\n# Constants\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n```",
        "gt": "import os\nfrom datetime import datetime\n# Constants\nLOG_DIR = './logs'\ndef task_func(metrics, filename, log_dir=LOG_DIR):\n\n    if not isinstance(metrics, dict):\n        raise ValueError(\"Metrics must be a dictionary\")\n    if not isinstance(filename, str):\n        raise ValueError(\"Filename must be a string\")\n    \n    try:\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            f.write(f'{datetime.now()}\\n')\n            for key, value in metrics.items():\n                f.write(f'{key}: {value}\\n')\n            f.write('\\n')\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.metrics = {'accuracy': 0.98, 'loss': 0.05}\n        self.filename = 'metrics.log'\n        self.log_dir = './temp_logs'\n    def test_non_string_filename(self):\n        with self.assertRaises(ValueError):\n            task_func(self.metrics, 12345, log_dir=self.log_dir)\n    def test_non_dictionary_metrics(self):\n        with self.assertRaises(ValueError):\n            task_func('accuracy: 0.95', self.filename, log_dir=self.log_dir)\n    @patch('os.makedirs')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('os.path.exists', return_value=True)\n    def test_normal_metrics_logging(self, mock_exists, mock_file, mock_makedirs):\n        result = task_func(self.metrics, self.filename, log_dir=self.log_dir)\n        self.assertTrue(result)\n        mock_file.assert_called_once_with(os.path.join(self.log_dir, self.filename), 'a')\n    @patch('os.makedirs')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('os.path.exists', return_value=True)\n    def test_normal_metrics_logging(self, mock_exists, mock_file, mock_makedirs):\n        result = task_func(self.metrics, self.filename, log_dir=self.log_dir)\n        self.assertTrue(result)\n        mock_file.assert_called_once_with(os.path.join(self.log_dir, self.filename), 'a')\n    @patch('os.makedirs')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('os.path.exists', return_value=False)\n    def test_non_existent_log_directory(self, mock_exists, mock_file, mock_makedirs):\n        result = task_func(self.metrics, self.filename, log_dir='./nonexistent_dir')\n        self.assertTrue(result)\n    @patch('os.makedirs')\n    @patch('builtins.open', new_callable=MagicMock)\n    @patch('os.path.exists', return_value=True)\n    def test_empty_metrics(self, mock_exists, mock_open, mock_makedirs):\n        # Setup the mock file handle that open returns\n        mock_file_handle = mock_open.return_value.__enter__.return_value\n        \n        # Call the function\n        metrics = {}\n        filename = 'empty_metrics.log'\n        log_dir = './temp_logs'\n        result = task_func(metrics, filename, log_dir=log_dir)\n        # Assert that the function returned True for successful logging\n        self.assertTrue(result)\n        # Check that 'write' was called exactly twice: once for the timestamp, once for the newline\n        self.assertEqual(mock_file_handle.write.call_count, 2)\n        # Check that the calls were for writing the timestamp and an empty line\n        args_list = mock_file_handle.write.call_args_list\n        self.assertTrue(args_list[0][0][0].endswith('\\n'))  # Check if first write is a timestamp ending with newline\n        self.assertEqual(args_list[1][0][0], '\\n')  # Check if second write is just a newline\n    def test_non_string_filename(self):\n        with self.assertRaises(ValueError):\n            task_func(self.metrics, 12345, log_dir=self.log_dir)\n    def test_non_dictionary_metrics(self):\n        with self.assertRaises(ValueError):\n            task_func('accuracy: 0.95', self.filename, log_dir=self.log_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Serializes an object to a JSON string, handling complex data types through a custom JSONEncoder. This function is capable of serializing data types such as datetime, numpy.ndarray, and Decimal which are not natively supported by the default JSON serialization mechanisms. Serialize a simple dictionary. >>> task_func({'name': 'Alice', 'age': 30}) '{\"name\": \"Alice\", \"age\": 30}'\nThe function should raise the exception for: TypeError: If an object of an unsupported type is encountered that cannot be serialized by both the custom and default JSON encoders. This ensures that users are made aware of serialization limitations for types not explicitly handled.\nThe function should output with:\n    str: The serialized JSON string of the object.\nYou should write self-contained code starting with:\n```\nimport json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\ndef task_func(my_obj):\n```",
        "gt": "import json\nfrom datetime import datetime\nimport numpy as np\nfrom decimal import Decimal\ndef task_func(my_obj):\n    \n    class ComplexEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, datetime):\n                return obj.isoformat()\n            elif isinstance(obj, np.ndarray):\n                return obj.tolist()\n            elif isinstance(obj, Decimal):\n                return str(obj)\n            return json.JSONEncoder.default(self, obj)\n    return json.dumps(my_obj, cls=ComplexEncoder)",
        "test": "import unittest\nfrom datetime import datetime\nfrom decimal import Decimal\nimport numpy as np\nimport pytz\nclass TestCases(unittest.TestCase):\n    def test_datetime_serialization(self):\n        \"\"\"Test serialization of datetime objects.\"\"\"\n        obj = {'time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.utc)}\n        result = task_func(obj)\n        self.assertIn('2023-01-01T12:00:00+00:00', result)\n    def test_decimal_serialization(self):\n        \"\"\"Test serialization of Decimal objects.\"\"\"\n        obj = {'price': Decimal('99.99')}\n        result = task_func(obj)\n        self.assertIn('99.99', result)\n    def test_numpy_array_serialization(self):\n        \"\"\"Test serialization of numpy arrays.\"\"\"\n        obj = {'data': np.array([1, 2, 3])}\n        result = task_func(obj)\n        self.assertIn('[1, 2, 3]', result)\n    def test_combined_serialization(self):\n        \"\"\"Test combined serialization of datetime, numpy array, and Decimal.\"\"\"\n        obj = {'time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.utc), 'data': np.array([1, 2, 3]), 'price': Decimal('99.99')}\n        result = task_func(obj)\n        self.assertIn('2023-01-01T12:00:00+00:00', result)\n        self.assertIn('[1, 2, 3]', result)\n        self.assertIn('99.99', result)\n    def test_simple_object_serialization(self):\n        \"\"\"Test serialization of simple objects (e.g., string, int).\"\"\"\n        obj = {'name': 'Alice', 'age': 30}\n        result = task_func(obj)\n        self.assertEqual(result, '{\"name\": \"Alice\", \"age\": 30}')\n    def test_unsupported_type_fallback(self):\n        \"\"\"Test that unsupported types fall back to the default encoder.\"\"\"\n        class UnsupportedType:\n            pass\n        obj = {'unsupported': UnsupportedType()}\n        with self.assertRaises(TypeError):\n            task_func(obj)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scrape the 'title' from a specified web page, save it in JSON format to a given file, and append to the file if it exists.`\nNote that: Notes: If the web page does not have a title, 'None' is saved as the title value in the JSON data. Data is appended to the specified file in JSON format, with each title on a new line.\nThe function should output with:\n    str: The file path where the scraped title is saved.\nYou should write self-contained code starting with:\n```\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n```",
        "gt": "import requests\nimport json\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, file_name: str = \"Output.txt\") -> str:\n    response = requests.get(url, timeout=5)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    title = soup.title.string if soup.title else None\n    data = {\"title\": title}\n    json_data = json.dumps(data)\n    with open(file_name, \"a\", encoding=\"utf-8\") as f:\n        f.write(json_data + \"\\n\")\n    return file_name",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nimport requests\nimport json\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"\")\n    def test_scrape_title_page_1(self, mock_file):\n        \"\"\"Test that the title is scraped from a web page and saved to a file\"\"\"\n        mock_response = requests.Response()\n        mock_response.status_code = 200\n        mock_response._content = b\"<title>Test Page 1</title>\"\n        with patch(\"requests.get\", return_value=mock_response):\n            file_path = task_func(\"http://example.com\")\n            self.assertEqual(file_path, \"Output.txt\")\n            mock_file().write.assert_called_once_with(\n                json.dumps({\"title\": \"Test Page 1\"}) + \"\\n\"\n            )\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"\")\n    def test_scrape_title_page_2(self, mock_file):\n        \"\"\"Test that the title is scraped from a web page and saved to a file\"\"\"\n        mock_response = requests.Response()\n        mock_response.status_code = 200\n        mock_response._content = b\"<title>Test Page 2</title>\"\n        with patch(\"requests.get\", return_value=mock_response):\n            file_path = task_func(\"http://example.com\", \"AnotherOutput.txt\")\n            self.assertEqual(file_path, \"AnotherOutput.txt\")\n            mock_file().write.assert_called_once_with(\n                json.dumps({\"title\": \"Test Page 2\"}) + \"\\n\"\n            )\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"\")\n    def test_invalid_url(self, mock_file):\n        \"\"\"Test that an exception is raised when the URL is invalid\"\"\"\n        with self.assertRaises(requests.RequestException):\n            task_func(\"http://invalid-url\")\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"\")\n    def test_page_without_title(self, mock_file):\n        \"\"\"Test that 'None' is saved as the title when the web page does not have a title\"\"\"\n        mock_response = requests.Response()\n        mock_response.status_code = 200\n        mock_response._content = b\"<html><head></head><body></body></html>\"\n        with patch(\"requests.get\", return_value=mock_response):\n            file_path = task_func(\"http://example.com\")\n            self.assertEqual(file_path, \"Output.txt\")\n            mock_file().write.assert_called_once_with(\n                json.dumps({\"title\": None}) + \"\\n\"\n            )\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"\")\n    def test_very_long_title(self, mock_file):\n        \"\"\"Test that a very long title is saved correctly\"\"\"\n        long_title = \"A\" * 1024  # A very long title of 1024 characters\n        mock_response = requests.Response()\n        mock_response.status_code = 200\n        mock_response._content = f\"<title>{long_title}</title>\".encode()\n        with patch(\"requests.get\", return_value=mock_response):\n            file_path = task_func(\"http://example.com\")\n            self.assertEqual(file_path, \"Output.txt\")\n            mock_file().write.assert_called_once_with(\n                json.dumps({\"title\": long_title}) + \"\\n\"\n            )\n    @patch(\n        \"builtins.open\",\n        new_callable=mock_open,\n        read_data=json.dumps({\"title\": \"Existing Title\"}) + \"\\n\",\n    )\n    def test_append_to_existing_file(self, mock_file):\n        \"\"\"Test that data is appended to an existing file\"\"\"\n        mock_response = requests.Response()\n        mock_response.status_code = 200\n        mock_response._content = b\"<title>New Title</title>\"\n        with patch(\"requests.get\", return_value=mock_response):\n            file_path = task_func(\"http://example.com\")\n            self.assertEqual(file_path, \"Output.txt\")\n            mock_file().write.assert_called_with(\n                json.dumps({\"title\": \"New Title\"}) + \"\\n\"\n            )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function reads a JSON file where each key is a unique identifier, and the corresponding value is a base64 encoded string. After decoding, it applies Unicode normalization form C (NFC) to each decoded string to ensure the canonical composition of characters. The function returns a dictionary where the keys are preserved, and the values are the normalized, decoded strings. Decoding is performed using the UTF-8 encoding scheme. >>> task_func('example.json') {'key1': 'Hello World', 'key2': 'Python Code Refiner'} Given a file 'empty.json' with the content: {} >>> task_func('empty.json') {}\nThe function should output with:\n    dict: A dictionary where each key is mapped to a normalized, decoded string from the base64 encoded value in the input file.\nYou should write self-contained code starting with:\n```\nimport json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n```",
        "gt": "import json\nimport base64\nimport unicodedata\ndef task_func(json_file: str) -> dict:\n    ENCODING = 'utf-8'\n    \n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    decoded_data = {k: unicodedata.normalize('NFC', base64.b64decode(v).decode(ENCODING)) for k, v in data.items()}\n\n    return decoded_data",
        "test": "import unittest\nfrom unittest.mock import mock_open, patch\nimport json\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Initialize test data and expected results\n        self.mock_data = '{\"key1\": \"SGVsbG8gV29ybGQ=\", \"key2\": \"UHl0aG9uIENvZGUgUmVmaW5lcg==\"}'\n        self.expected_output = {'key1': 'Hello World', 'key2': 'Python Code Refiner'}\n    def test_decode_base64(self):\n        # Test decoding base64 encoded strings from a mock JSON file\n        with patch('builtins.open', mock_open(read_data=self.mock_data)):\n            result = task_func('dummy_file.json')\n            self.assertEqual(result, self.expected_output)\n    def test_empty_json(self):\n        # Test handling of an empty JSON file\n        with patch('builtins.open', mock_open(read_data='{}')):\n            result = task_func('dummy_file.json')\n            self.assertEqual(result, {})\n    def test_non_json_content(self):\n        # Test error handling for non-JSON content\n        with patch('builtins.open', mock_open(read_data='Not a JSON')):\n            with self.assertRaises(json.JSONDecodeError):\n                task_func('dummy_file.json')\n    def test_file_not_found(self):\n        # Test error handling for a non-existent file\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent_file.json')\n    def test_invalid_base64(self):\n        # Test error handling for invalid base64 encoding\n        with patch('builtins.open', mock_open(read_data='{\"key1\": \"Invalid base64\"}')):\n            with self.assertRaises(ValueError):\n                task_func('dummy_file.json')\n    def test_unicode_normalization(self):\n        # Properly encode a Unicode string '\u00e8' to base64\n        unicode_string = '\u00e8'\n        encoded_unicode_string = base64.b64encode(unicode_string.encode('utf-8')).decode('ascii')\n        mock_data_with_unicode = f'{{\"key1\": \"{encoded_unicode_string}\"}}'  # Encoded mock data\n        expected_normalized_output = {'key1': '\u00e8'}  # Expected result after normalization\n        with patch('builtins.open', mock_open(read_data=mock_data_with_unicode)):\n            result = task_func('dummy_file_unicode.json')\n            self.assertEqual(result, expected_normalized_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a specified letter, calculates the lengths of these words, and returns returns a histogram plot of the word lengths.\nThe function should output with:\n    Axes: A histogram plot of word lengths for words starting with the specified letter.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n```",
        "gt": "import pandas as pd\nimport time\ndef task_func(df, letter):\n    start_time = time.time()\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n\n    # Check if filtered_df is empty to handle scenario with no words starting with specified letter\n    if filtered_df.empty:\n        print(f\"No words start with the letter '{letter}'.\")\n        return None  # Return None to indicate no data for plotting\n\n    # Proceed with plotting only if data is available\n    ax = word_lengths.hist(bins=range(1, int(word_lengths.max()) + 2), alpha=0.7, edgecolor='black')\n    ax.set_title(f\"Histogram of Word Lengths starting with '{letter}'\")\n    ax.set_xlabel(\"Word Length\")\n    ax.set_ylabel(\"Frequency\")\n\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Initialize testing dataframe.\"\"\"\n        self.df = {'Word': ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'avocado']}\n    @patch('matplotlib.pyplot.hist')\n    def test_filter_by_letter(self, mock_hist):\n        \"\"\"Test filtering functionality by a specific letter.\"\"\"\n        task_func(self.df, 'a')\n        filtered_words = ['apple', 'avocado']\n        self.assertTrue(all(word in self.df['Word'] for word in filtered_words))\n    @patch('matplotlib.pyplot.hist')\n    def test_return_type(self, mock_hist):\n        \"\"\"Test the return type is a matplotlib Axes.\"\"\"\n        ax = task_func(self.df, 'a')\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_histogram_plot_calls(self):\n        \"\"\"Test if histogram plot is generated with correct parameters.\"\"\"\n        with patch('pandas.Series.hist') as mock_hist:\n            task_func(self.df, 'd')\n            mock_hist.assert_called_once()\n    def test_word_length_calculation(self):\n        \"\"\"Test if word lengths are calculated correctly for words starting with 'a'.\"\"\"\n        ax = task_func(self.df, 'a')\n        expected_lengths = [5, 7]  # Lengths of 'apple' and 'avocado'\n        filtered_words = [word for word in self.df['Word'] if word.startswith('a')]\n        actual_lengths = [len(word) for word in filtered_words]\n        # Test if actual lengths match expected lengths\n        self.assertEqual(expected_lengths, actual_lengths, \"The word lengths do not match expected results.\")\n    @patch('matplotlib.pyplot.hist')\n    def test_nonexistent_letter(self, mock_hist):\n        \"\"\"Test filtering by a letter not present returns None.\"\"\"\n        ax = task_func(self.df, 'z')\n        self.assertIsNone(ax, \"Expected None when no words start with the specified letter.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Alternates elements from two numeric lists, calculates the absolute difference of each element from a predefined threshold, and returns the element closest to this threshold.\nNote that: Notes: If l1 and l2 are of different lengths, elements from the longer list without a corresponding pair in the shorter list will not be paired with 'None'. Only existing numeric elements are considered. The threshold is fixed at 0.5. Adjustments to the threshold require changes to the THRESHOLD constant.\nThe function should output with:\n    float: The element from the combined list that is closest to the threshold of 0.5.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2,THRESHOLD = 0.5):\n```",
        "gt": "import numpy as np\nfrom itertools import zip_longest\ndef task_func(l1, l2,THRESHOLD = 0.5):\n    combined = [val for pair in zip_longest(l1, l2) for val in pair if val is not None]\n    differences = np.abs(np.array(combined) - THRESHOLD)\n    closest_index = np.argmin(differences)\n    return combined[closest_index]",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with two lists of equal length where one element exactly matches the threshold.\n        l1 = [0, 0.5, 2, 3, 4]\n        l2 = [10, 11, 12, 13, 14]\n        self.assertEqual(task_func(l1, l2), 0.5)\n    def test_case_2(self):\n        # Test with the first list longer than the second, where the closest value is below the threshold.\n        l1 = [0, 0.4, 0.6, 3, 4, 5]\n        l2 = [10, 11, 12]\n        self.assertEqual(task_func(l1, l2), 0.4)\n        \n    def test_case_3(self):\n        # Test with the second list longer than the first, where the closest value is just above the threshold.\n        l1 = [0, 0.51]\n        l2 = [10, 11, 12, 13]\n        self.assertEqual(task_func(l1, l2), 0.51)\n        \n    def test_case_4(self):\n        # Test where one list is empty and the function must choose the closest value from a single non-empty list.\n        l1 = []\n        l2 = [10, 11, 12, 13]\n        self.assertEqual(task_func(l1, l2), 10)\n        \n    def test_case_5(self):\n        # Test with negative and positive numbers where the closest value to the threshold is zero.\n        l1 = [-10, -5, 0, 5, 10]\n        l2 = [-1, 0, 1]\n        self.assertEqual(task_func(l1, l2), 0)\n    def test_empty_lists(self):\n        # Test with both lists empty to check function's behavior in absence of any elements.\n        with self.assertRaises(ValueError):\n            task_func([], [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the median of all elements in a nested list 'L'.\nThe function should output with:\n    median (float): The median.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\ndef task_func(L):\n```",
        "gt": "import numpy as np\nimport math\ndef task_func(L):\n    # Recursive function to flatten the list\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened = flatten(L)\n    \n    if not flattened:\n        raise ValueError(\"List is empty\")\n    \n    # Using numpy to sort the list\n    sorted_flattened = np.sort(flattened)\n    n = len(sorted_flattened)\n    \n    # Calculating the median index using math.ceil\n    if n % 2 == 0:\n        median_index1 = math.ceil(n / 2) - 1\n        median_index2 = median_index1 + 1\n        median = (sorted_flattened[median_index1] + sorted_flattened[median_index2]) / 2.0\n    else:\n        median_index = math.ceil(n / 2) - 1\n        median = sorted_flattened[median_index]\n    \n    return median",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \n    def test_median_odd_elements(self):\n        result = task_func([[1, 2, 3], [4, 5, 6], [7]])\n        self.assertEqual(result, 4.0)\n    def test_median_even_elements(self):\n        result = task_func([[1, 2, 3], [4, 5, 6]])\n        self.assertEqual(result, 3.5)\n        \n    def test_median_single_element(self):\n        result = task_func([[5]])\n        self.assertEqual(result, 5.0)\n        \n    def test_median_deep_nesting(self):\n        result = task_func([1, [2, [3, 4, [5, 6], 7], 8], 9])\n        self.assertEqual(result, 5.0)\n        \n    def test_median_empty_list(self):\n        with self.assertRaises(ValueError):\n            task_func([])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate random scores for a given list of students, sort these scores in ascending order, and return both the scores and a bar plot of these scores. use np.random.randint(0, 100) to generate the scores of the students\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Student' and 'Score', sorted by 'Score'.\n    Axes: A matplotlib Axes object containing the bar plot of scores.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(students=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"], seed=42):\n    np.random.seed(seed)\n    scores_data = [(student, np.random.randint(0, 100)) for student in students]\n    df = pd.DataFrame(scores_data, columns=[\"Student\", \"Score\"])\n    df.sort_values(\"Score\", inplace=True)\n\n    ax = df.plot(x='Student', y='Score', kind='bar', legend=False)\n    ax.set_ylabel(\"Score\")\n\n    return df, ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.students = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\n    def test_random_reproducibility(self):\n        df1, _ = task_func(self.students, 42)\n        df2, _ = task_func(self.students, 42)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_dataframe_columns(self):\n        df, _ = task_func(self.students)\n        self.assertListEqual(list(df.columns), [\"Student\", \"Score\"])\n    def test_scores_within_range(self):\n        df, _ = task_func(self.students)\n        self.assertTrue(df[\"Score\"].between(0, 100).all())\n    def test_plot_labels(self):\n        _, ax = task_func(self.students)\n        self.assertEqual(ax.get_ylabel(), \"Score\")\n        self.assertEqual(ax.get_xlabel(), \"Student\")\n    def test_different_seeds_produce_different_scores(self):\n        df1, _ = task_func(self.students, 42)\n        df2, _ = task_func(self.students, 43)\n        self.assertFalse(df1.equals(df2))\n    \n    def test_dataframe_value(self):\n        df, _ = task_func(self.students)                \n        df_list = df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['Charlie,14', 'Alice,51', 'Eve,60', 'David,71', 'Bob,92']\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(df_list))\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression. The function first validates the input list, creates a DataFrame, separates independent and dependent variables, adds a constant to the model, and fits a linear regression using statsmodels. - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\nThe function should output with:\n    df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    results (statsmodels.RegressionResults): Results of the linear regression.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n\n    np.random.seed(random_seed)\n\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n\n    model = sm.OLS(y, X)\n    results = model.fit()\n\n    return df, results",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing dataframe creation, model accuracy, and parameters with various numeric data types\n        test_data = [\n            ([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 42, 1.0),  # Positive values\n            ([[-1, -2, -3, -4, -5], [-6, -7, -8, -9, -10]], 42, 1.0),  # Negative values\n            (\n                [[100, 200, 300, 400, 500], [600, 700, 800, 900, 1000]],\n                42,\n                1.0,\n            ),  # Large values\n        ]\n        for array, random_seed, expected_r2 in test_data:\n            with self.subTest(array=array):\n                df, results = task_func(array, random_seed=random_seed)\n                expected_df = pd.DataFrame(\n                    array, columns=[\"A\", \"B\", \"C\", \"D\", \"Response\"]\n                )\n                self.assertTrue(df.equals(expected_df))\n                self.assertAlmostEqual(results.rsquared, expected_r2, places=2)\n                for param in results.params:\n                    self.assertNotEqual(param, 0)\n    def test_case_2(self):\n        # Testing with more rows in the 2D list to ensure model scalability and consistency\n        random_seed = 42\n        array = [\n            [1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n        ]\n        df, results = task_func(array, random_seed=random_seed)\n        expected_df = pd.DataFrame(array, columns=[\"A\", \"B\", \"C\", \"D\", \"Response\"])\n        self.assertTrue(df.equals(expected_df))\n        self.assertAlmostEqual(results.rsquared, 1.0, places=2)\n        for param in results.params:\n            self.assertNotEqual(param, 0)\n    def test_case_3(self):\n        # Testing input validation for incorrect number of columns in a row\n        array = [[1, 2, 3, 4], [5, 6, 7, 8]]  # Missing dependent variable\n        with self.assertRaises(ValueError):\n            task_func(array)\n    def test_case_4(self):\n        # Testing handling of non-numeric values to ensure type safety\n        array = [[\"a\", \"b\", \"c\", \"d\", \"e\"]]  # All elements as strings\n        with self.assertRaises(ValueError):\n            df, results = task_func(array)\n            # This assumes the function is modified to catch and raise ValueError for non-numeric inputs\n    def test_case_5(self):\n        # Testing reproducibility by using the same random_seed\n        array = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n        random_seed = 123\n        df1, results1 = task_func(array, random_seed=random_seed)\n        df2, results2 = task_func(array, random_seed=random_seed)\n        self.assertTrue(df1.equals(df2))\n        self.assertEqual(results1.params.tolist(), results2.params.tolist())\n    def test_case_6(self):\n        # Testing with an empty array to check function's handling of no input data\n        array = []\n        with self.assertRaises(ValueError):\n            task_func(array)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function processes a CSV file containing numeric data representing a population. It randomly selects 30 individuals from this population without replacement to form a sample. The function calculates the mean and standard deviation of this sample. The means delta degree is 1. It also generates a histogram of the sample data and overlays a normal distribution curve on this histogram. In this example, 'population_data.csv' is a CSV file where each line contains a numeric value. The function reads this file, samples 30 values, computes their mean and standard deviation, and plots a histogram with a normal distribution curve.\nNote that: Notes: The function uses numpy for random sampling and statistical calculations. The matplotlib library is used to plot the histogram and the normal distribution curve. The function includes exception handling for file input/output errors, ensuring that any issues with reading the CSV file are properly communicated. The function plots a histogram of the sample using matplotlib, with the number of bins determined automatically ('auto').\nThe function should output with:\n    Tuple (float, float, matplotlib.axes._axes.Axes): The function returns a tuple containing\n    three elements:\n    Sample mean (float): The mean of the sample.\n    Sample standard deviation (float): The standard deviation of the sample, calculated with a\n    degrees of freedom (ddof) of 1.\n    Matplotlib subplot (matplotlib.axes._axes.Axes): An object representing the\n    generated histogram plot with the normal distribution curve.\nYou should write self-contained code starting with:\n```\nimport csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n```",
        "gt": "import csv\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            reader = csv.reader(file)\n            population = [int(row[0]) for row in reader]\n    except IOError as exc:\n        raise IOError(\n            \"Error reading the file. Please check the file path and permissions.\"\n        ) from exc\n\n    sample = np.random.choice(population, 30, replace=False)\n    mean = np.mean(sample)\n    std_dev = np.std(sample, ddof=1)\n\n    plt.hist(sample, bins=\"auto\", density=True, alpha=0.7, rwidth=0.85)\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std_dev)\n    plt.plot(x, p, \"k\", linewidth=2)\n    plt.xlabel(\"Sample Values\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Sample Histogram with Normal Distribution Overlay\")\n    ax = plt.gca()\n\n    return mean, std_dev, ax",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def setUp(self):\n        \"\"\"Set up the test environment.\"\"\"\n        matplotlib.use(\"Agg\")\n    def test_valid_csv_file(self):\n        \"\"\"Test with a valid CSV file.\"\"\"\n        mock_data = \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\"\n        with patch(\"builtins.open\", mock_open(read_data=mock_data)):\n            mean, std_dev, ax = task_func(\"dummy_path\")\n            self.assertIsNotNone(mean)\n            self.assertIsNotNone(std_dev)\n    def test_empty_csv_file(self):\n        \"\"\"Test with an empty CSV file.\"\"\"\n        mock_data = \"\"\n        with patch(\"builtins.open\", mock_open(read_data=mock_data)), self.assertRaises(\n            ValueError\n        ):\n            task_func(\"dummy_path\")\n    def test_non_existent_file(self):\n        \"\"\"Test with a non-existent file path.\"\"\"\n        with self.assertRaises(IOError):\n            task_func(\"non_existent_path.csv\")\n    def test_csv_with_non_numeric_data(self):\n        \"\"\"Test with a CSV file containing non-numeric data.\"\"\"\n        mock_data = \"a\\nb\\nc\\nd\\ne\"\n        with patch(\"builtins.open\", mock_open(read_data=mock_data)), self.assertRaises(\n            ValueError\n        ):\n            task_func(\"dummy_path\")\n    def test_small_population_size(self):\n        \"\"\"Test with a small population size.\"\"\"\n        mock_data = \"1\\n2\\n3\\n4\\n5\"\n        with patch(\"builtins.open\", mock_open(read_data=mock_data)), self.assertRaises(\n            ValueError\n        ):\n            task_func(\"dummy_path\")\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Zips all files (not including subdirectories) located in the specified directory and returns the path to the created zip file.\nNote that: Notes: The zip name is always 'files.zip'\nThe function should raise the exception for: FileNotFoundError: if the specified directory does not exist\nThe function should output with:\n    str: The path to the generated zip file. Returns None if the directory does not contain any files.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport zipfile\ndef task_func(directory):\n```",
        "gt": "import os\nimport glob\nimport zipfile\ndef task_func(directory):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = [f for f in glob.glob(os.path.join(directory, '*')) if os.path.isfile(f)]\n    if not files:\n        return None\n    zip_file_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_file_path, 'w') as zipf:\n        for file in files:\n            zipf.write(file, os.path.basename(file))\n    \n    return zip_file_path",
        "test": "import unittest\nimport os\nimport tempfile\nimport zipfile\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        \"\"\"Setup a temporary directory before each test.\"\"\"\n        self.test_dir = tempfile.mkdtemp()\n    \n    def tearDown(self):\n        \"\"\"Clean up the temporary directory after each test.\"\"\"\n        for root, dirs, files in os.walk(self.test_dir, topdown=False):\n            for name in files:\n                os.remove(os.path.join(root, name))\n            for name in dirs:\n                os.rmdir(os.path.join(root, name))\n        os.rmdir(self.test_dir)\n    \n    def test_single_file_zip(self):\n        \"\"\"Test zipping a directory with one file.\"\"\"\n        with open(os.path.join(self.test_dir, \"testfile1.txt\"), \"w\") as f:\n            f.write(\"This is a test file.\")\n        zip_path = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(zip_path))\n    \n    def test_multiple_files_zip(self):\n        \"\"\"Test zipping a directory with multiple files.\"\"\"\n        for i in range(5):\n            with open(os.path.join(self.test_dir, f\"testfile{i}.txt\"), \"w\") as f:\n                f.write(f\"This is test file {i}.\")\n        zip_path = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(zip_path))\n    \n    def test_empty_directory(self):\n        \"\"\"Test zipping an empty directory should return None.\"\"\"\n        zip_path = task_func(self.test_dir)\n        self.assertIsNone(zip_path)\n    \n    def test_non_existent_directory(self):\n        \"\"\"Test behavior when the specified directory does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"/non/existent/directory\")\n    \n    def test_exclusion_of_subdirectories(self):\n        \"\"\"Ensure that subdirectories within the specified directory are not included in the zip.\"\"\"\n        os.makedirs(os.path.join(self.test_dir, \"subdir\"))\n        with open(os.path.join(self.test_dir, \"testfile.txt\"), \"w\") as f:\n            f.write(\"This is a test file.\")\n        with open(os.path.join(self.test_dir, \"subdir\", \"nestedfile.txt\"), \"w\") as f:\n            f.write(\"This is a nested file.\")\n        zip_path = task_func(self.test_dir)\n        with zipfile.ZipFile(zip_path, 'r') as zipf:\n            self.assertEqual(len(zipf.namelist()), 1)  # Only testfile.txt should be included\n    def test_file_integrity_in_zip(self):\n        \"\"\"Check that files zipped are intact and readable.\"\"\"\n        filename = \"testfile.txt\"\n        content = \"This is a test file.\"\n        with open(os.path.join(self.test_dir, filename), \"w\") as f:\n            f.write(content)\n        zip_path = task_func(self.test_dir)\n        with zipfile.ZipFile(zip_path, 'r') as zipf:\n            with zipf.open(filename) as file:\n                self.assertEqual(file.read().decode(), content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Trains a random forest model on data from a CSV file, using one column as the target variable (y) and the rest as features (X), and visualizes the feature importances in a bar plot. This function also handles missing values by dropping rows with any NaN values. >>> file_path = 'arena.csv' >>> create_dummy_file(file_path) >>> ax, importances = task_func(file_path, 'Index') # This will train a random forest model predicting 'Index' from 'Score1', 'Score2', and 'Score3', then plot and return the importances of 'Score1', 'Score2', and 'Score3' as features (X). >>> os.remove(file_path)\nThe function should raise the exception for: FileNotFoundError: Raised if the specified file_path does not lead to a valid file. ValueError: Raised if the specified target_column is not found in the CSV file's columns, or if the input data contains NaN, infinity or a value too large for dtype('float32').\nThe function should output with:\n    matplotlib.axes.Axes: Axes object displaying the bar plot of feature importances.\n    numpy.ndarray: Array containing the feature importances derived from the random forest model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n```",
        "gt": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(file_path='arena.csv', target_column='Index', seed=42):\n    \n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n    \n    df = pd.read_csv(file_path)\n    \n    if target_column not in df.columns:\n        raise ValueError(f\"The specified target column '{target_column}' does not exist in the CSV file.\")\n    \n    # Drop rows with any NaN values\n    df_cleaned = df.dropna()\n\n    X = df_cleaned.drop(target_column, axis=1)\n    y = df_cleaned[target_column]\n    \n    # Option to scale features if needed\n    # scaler = StandardScaler()\n    # X_scaled = scaler.fit_transform(X)\n    \n    clf = RandomForestClassifier(random_state=seed)\n    clf.fit(X, y)\n    importances = clf.feature_importances_\n    \n    fig, ax = plt.subplots()\n    sns.barplot(x=X.columns, y=importances, ax=ax)\n    ax.set_title('Feature Importances')\n    \n    return ax, importances",
        "test": "import unittest\nimport pandas as pd\nimport os\nimport numpy as np\nfrom numpy.testing import assert_array_almost_equal\ndef create_dummy_file(file_path):\n    data = {\n        'Index': [1, 2, 3],\n        'Score1': [10, 15, 20],\n        'Score2': [20, 25, 30],\n        'Score3': [30, 35, 40]\n    }\n    df = pd.DataFrame(data)\n    df.to_csv(file_path, index=False)\nclass TestCases(unittest.TestCase):    \n    def setUp(self):\n        # Create a dummy CSV for testing\n        data = {\n            'Index': [1, 2, 3],\n            'Score1': [10, 15, 20],\n            'Score2': [20, 25, 30],\n            'Score3': [30, 35, 40]\n        }\n        df = pd.DataFrame(data)\n        df.to_csv('dummy_arena.csv', index=False)\n        \n        # Create a more complex dummy CSV for advanced testing\n        np.random.seed(42)  # For reproducibility\n        complex_data = {\n            'Index': np.arange(1, 11),\n            'Feature1': np.random.randint(-10, 50, 10),\n            'Feature2': np.random.normal(0, 5, 10),\n            'Feature3': np.random.uniform(25, 75, 10),\n            'Feature4': np.random.lognormal(0, 1, 10),\n            'Feature5': np.linspace(10, 100, 10),\n            'Outcome': np.random.choice([0, 1], 10)  # Binary outcome for classification\n        }\n        complex_df = pd.DataFrame(complex_data)\n        # Introduce some missing values\n        complex_df.loc[4:6, 'Feature2'] = np.nan\n        complex_df.loc[2:3, 'Feature4'] = np.nan\n        complex_df.to_csv('complex_dummy_arena.csv', index=False)\n    def tearDown(self):\n        os.remove('dummy_arena.csv')\n        os.remove('complex_dummy_arena.csv')\n    def test_feature_importances(self):\n        # Test the function for normal functionality\n        ax, importances = task_func('dummy_arena.csv', 'Index')\n        self.assertEqual(len(importances), 3)  # Expecting 3 features\n        self.assertTrue(np.all(importances >= 0))  # Importances should be non-negative\n        expect = np.array([0.35294118, 0.36470588, 0.28235294])\n        assert_array_almost_equal(importances, expect, decimal=6)\n        \n    def test_file_not_found(self):\n        # Test FileNotFoundError\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent.csv', 'Index')\n    def test_invalid_target_column(self):\n        # Test ValueError for invalid target column\n        with self.assertRaises(ValueError):\n            task_func('dummy_arena.csv', 'NonexistentColumn')\n            \n    \n    def test_feature_importances1(self):\n        # Test the function for normal functionality\n        ax, importances = task_func('complex_dummy_arena.csv', 'Index')\n        print(importances)\n        expect = np.array([0.16335979, 0.22973545, 0.15900794, 0.18597884, 0.19796296, 0.06395503])\n        assert_array_almost_equal(importances, expect, decimal=6)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Loads a DLL file specified by the given filepath and moves all DLL files in the same directory to another specified directory. This function demonstrates file operations including DLL loading, file path manipulation, and file moving using ctypes, os, shutil, and glob modules.\nThe function should output with:\n    str: The name of the loaded DLL file.\nYou should write self-contained code starting with:\n```\nimport ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n```",
        "gt": "import ctypes\nimport os\nimport shutil\nimport glob\ndef task_func(filepath, destination_dir):\n    lib = ctypes.CDLL(filepath)\n\n    dll_dir = os.path.dirname(filepath)\n    dll_files = glob.glob(os.path.join(dll_dir, '*.dll'))\n\n    for dll_file in dll_files:\n        shutil.move(dll_file, destination_dir)\n\n    return lib._name",
        "test": "import unittest\nimport tempfile\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for DLL files\n        self.dll_dir = tempfile.mkdtemp()\n        self.destination_dir = tempfile.mkdtemp()\n        # Create a sample DLL file in the temporary directory\n        self.sample_dll = os.path.join(self.dll_dir, 'sample.dll')\n        with open(self.sample_dll, 'w') as file:\n            file.write('')\n    @patch('ctypes.CDLL', autospec=True)\n    def test_return_type(self, mock_cdll):\n        self.assertIsInstance(task_func(self.sample_dll, self.destination_dir), str)\n        \n    @patch('ctypes.CDLL', autospec=True)\n    def test_dll_file_movement(self, mock_cdll):\n        \"\"\"Test if DLL files are correctly moved to the destination directory.\"\"\"\n        task_func(self.sample_dll, self.destination_dir)\n        \n        # Check that the DLL file has been moved to the destination directory\n        self.assertFalse(os.path.exists(self.sample_dll), \"The DLL file should not exist in the source directory after moving.\")\n        self.assertTrue(os.path.exists(os.path.join(self.destination_dir, 'sample.dll')), \"The DLL file should exist in the destination directory after moving.\")\n    def test_invalid_file_path(self):\n        with self.assertRaises(OSError):\n            task_func('invalid_path.dll', self.destination_dir)\n    def test_invalid_destination_dir(self):\n        with self.assertRaises(OSError):\n            task_func(self.sample_dll, 'invalid_destination')\n    @patch('ctypes.CDLL')\n    def test_file_movement_with_mock_cdll(self, mock_cdll):\n        # Setup the mock CDLL instance\n        mock_cdll_instance = MagicMock()\n        mock_cdll.return_value = mock_cdll_instance\n        # Mock a function 'example_function' within the DLL\n        example_function_mock = MagicMock(return_value=42)  # Assume it returns an integer\n        mock_cdll_instance.example_function = example_function_mock\n        # Call the function under test\n        task_func(self.sample_dll, self.destination_dir)\n        # Verify the DLL was \"loaded\"\n        mock_cdll.assert_called_once_with(self.sample_dll)\n    @patch('ctypes.CDLL', autospec=True)\n    def test_no_dll_in_source(self, cdll):\n        # Remove the DLL file and run the function\n        os.remove(self.sample_dll)\n        task_func(self.sample_dll, self.destination_dir)\n        # Check that no new files are in the destination directory\n        self.assertEqual(len(os.listdir(self.destination_dir)), 0)\n    def tearDown(self):\n        # Clean up temporary directories\n        shutil.rmtree(self.dll_dir)\n        shutil.rmtree(self.destination_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\nThe function should output with:\n    tuple:\n    list: The optimized parameters of the quadratic function (a, b, c).\n    matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef task_func(X, Y):\n```",
        "gt": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\ndef task_func(X, Y):\n\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n\n    popt, pcov = curve_fit(func, X, Y)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n\n    return list(popt), ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.random_seed = 42\n        np.random.seed(self.random_seed)\n        self.test_data = [\n            (\n                np.linspace(-10, 10, 100),\n                3 * np.linspace(-10, 10, 100) ** 2\n                + 2 * np.linspace(-10, 10, 100)\n                + 1\n                + np.random.normal(0, 20, 100),\n            ),\n            (\n                np.linspace(-5, 5, 100),\n                -2 * np.linspace(-5, 5, 100) ** 2\n                + 4 * np.linspace(-5, 5, 100)\n                - 3\n                + np.random.normal(0, 10, 100),\n            ),\n            (\n                np.linspace(-100, 100, 100),\n                0.5 * np.linspace(-100, 100, 100) ** 2\n                + 1 * np.linspace(-100, 100, 100)\n                + 10\n                + np.random.normal(0, 50, 100),\n            ),\n            (\n                np.linspace(-1, 1, 100),\n                10 * np.linspace(-1, 1, 100) ** 2\n                + 5 * np.linspace(-1, 1, 100)\n                + 2\n                + np.random.normal(0, 1, 100),\n            ),\n        ]\n    def assertDataInPlot(self, X, Y, ax):\n        xdata, ydata = ax.collections[0].get_offsets().T  # Access scatter plot data\n        self.assertTrue(np.array_equal(X, xdata))\n        self.assertTrue(np.array_equal(Y, ydata))\n    def test_case_1(self):\n        # Test fitting a basic quadratic function with expected params near 3, 2.\n        X, Y = self.test_data[0]\n        params, ax = task_func(X, Y)\n        self.assertTrue(len(params) == 3)\n        self.assertDataInPlot(X, Y, ax)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertAlmostEqual(params[0], 3, places=0)\n        self.assertAlmostEqual(params[1], 2, places=0)\n    def test_case_2(self):\n        # Test fitting a basic quadratic function with expected params near -2, 4.\n        X, Y = self.test_data[1]\n        params, ax = task_func(X, Y)\n        self.assertTrue(len(params) == 3)\n        self.assertDataInPlot(X, Y, ax)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertAlmostEqual(params[0], -2, places=0)\n        self.assertAlmostEqual(params[1], 4, places=0)\n    def test_case_3(self):\n        # Test fitting a wide parabola with parameters (0.5, 1).\n        X, Y = self.test_data[2]\n        params, ax = task_func(X, Y)\n        self.assertTrue(len(params) == 3)\n        self.assertDataInPlot(X, Y, ax)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertAlmostEqual(params[0], 0.5, places=0)\n        self.assertAlmostEqual(params[1], 1, places=0)\n    def test_case_4(self):\n        # Test fitting a steep parabola with high coefficients (10, 5).\n        X, Y = self.test_data[3]\n        params, ax = task_func(X, Y)\n        self.assertTrue(len(params) == 3)\n        self.assertDataInPlot(X, Y, ax)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertAlmostEqual(params[0], 10, places=0)\n        self.assertAlmostEqual(params[1], 5, places=0)\n    def test_case_5(self):\n        # Test handling non-numeric data - convertable to int\n        string_int_list = [\"1\", \"2\", \"3\"]\n        int_list = [1, 2, 3]\n        with self.assertRaises(TypeError):\n            task_func(string_int_list, int_list)\n        with self.assertRaises(TypeError):\n            task_func(int_list, string_int_list)\n    def test_case_6(self):\n        # Test handling non-numeric data\n        for X, Y in itertools.product([[\"a\", \"b\", \"c\"], [], np.array([])], repeat=2):\n            with self.assertRaises(ValueError):\n                task_func(X, Y)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace all acronyms in a DataFrame with their full words according to a provided dictionary.\nThe function should output with:\n    pd.DataFrame: A DataFrame where all acronyms in string cells have been replaced with their full words.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\n# Function to replace acronyms in DataFrame\ndef task_func(data, mapping):\n```",
        "gt": "import pandas as pd\nimport re\n# Function to replace acronyms in DataFrame\ndef task_func(data, mapping):\n    df = pd.DataFrame(data)\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    \n    def replace_match(match):\n        return mapping.get(match.group(0), match.group(0))\n\n    df = df.applymap(lambda x: pattern.sub(replace_match, x) if isinstance(x, str) else x)\n\n    return df",
        "test": "import unittest\n# Unit tests for the task_func function\nclass TestCases(unittest.TestCase):\n    def test_acronyms_single_column(self):\n        data = {'text': ['NASA rocks', 'Visit the USA']}\n        mapping = {'NASA': 'National Aeronautics and Space Administration', 'USA': 'United States of America'}\n        expected = pd.DataFrame({'text': ['National Aeronautics and Space Administration rocks', 'Visit the United States of America']})\n        result = task_func(data, mapping)\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_acronyms_multiple_columns(self):\n        data = {'col1': ['NASA exploration'], 'col2': ['Made in USA']}\n        mapping = {'NASA': 'National Aeronautics and Space Administration', 'USA': 'United States of America'}\n        expected = pd.DataFrame({'col1': ['National Aeronautics and Space Administration exploration'], 'col2': ['Made in United States of America']})\n        result = task_func(data, mapping)\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_no_acronyms(self):\n        data = {'text': ['A sunny day', 'A rainy night']}\n        mapping = {'NASA': 'National Aeronautics and Space Administration'}\n        expected = pd.DataFrame({'text': ['A sunny day', 'A rainy night']})\n        result = task_func(data, mapping)\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_non_string_types(self):\n        data = {'text': ['NASA mission', 2020, None]}\n        mapping = {'NASA': 'National Aeronautics and Space Administration'}\n        expected = pd.DataFrame({'text': ['National Aeronautics and Space Administration mission', 2020, None]})\n        result = task_func(data, mapping)\n        pd.testing.assert_frame_equal(result, expected)\n    \n    def test_empty_dataframe(self):\n        data = {'text': []}\n        mapping = {'NASA': 'National Aeronautics and Space Administration'}\n        expected = pd.DataFrame({'text': []})\n        result = task_func(data, mapping)\n        pd.testing.assert_frame_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a weather report for specified cities at a given UTC datetime.\nThe function should raise the exception for: ValueError: If utc_datetime is not a datetime object or if any of the other parameters are not in the expected format.\nThe function should output with:\n    pandas.DataFrame: A DataFrame containing the weather report. Columns include:\n    'City': The name of the city.\n    'Local Time': The local time of the weather report for the city, formatted as 'YYYY-MM-DD HH:MM:SS ZZZ' (ZZZ is the timezone abbreviation).\n    'Weather Condition': The weather condition in the city at the given local time.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n```",
        "gt": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    set_seed(seed)\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object with tzinfo set to UTC.\")\n\n    report_data = []\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"Timezone for {city} not provided in timezones parameter.\")\n        \n        city_tz = pytz.timezone(timezones[city])\n        city_time = utc_datetime.astimezone(city_tz)\n        weather = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        report_data.append([city, city_time.strftime('%Y-%m-%d %H:%M:%S %Z'), weather])\n\n    report_df = pd.DataFrame(report_data, columns=['City', 'Local Time', 'Weather Condition'])\n\n    return report_df",
        "test": "import unittest\nfrom datetime import datetime\nimport pytz\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.seed = 42\n        self.utc_time = datetime(2023, 6, 15, 12, tzinfo=pytz.UTC)\n    def test_valid_input(self):\n        \"\"\"Test with default parameters and check DataFrame structure.\"\"\"\n        report = task_func(self.utc_time, seed=self.seed)\n        \n        df_list = report.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        \n        with open('df_contents.txt', 'w') as file:\n            file.write(str(df_list))\n        \n        \n        expect_report = ['New York,2023-06-15 08:00:00 EDT,Sunny', 'London,2023-06-15 13:00:00 BST,Sunny', 'Beijing,2023-06-15 20:00:00 CST,Rainy', 'Tokyo,2023-06-15 21:00:00 JST,Cloudy', 'Sydney,2023-06-15 22:00:00 AEST,Cloudy']\n        \n        self.assertEqual(df_list, expect_report, \"DataFrame contents should match the expected output\")\n        \n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertEqual(len(report), 5)  # 5 cities in default list\n        for column in ['City', 'Local Time', 'Weather Condition']:\n            self.assertIn(column, report.columns)\n    def test_invalid_datetime_type(self):\n        \"\"\"Test error handling when utc_datetime is not a datetime object.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(\"2023-06-15 12:00:00\")\n    def test_missing_timezone_for_custom_city(self):\n        \"\"\"Test error handling when a timezone is missing for a custom city.\"\"\"\n        custom_cities = ['New York', 'London', 'Paris']\n        custom_timezones = {\n            'New York': 'America/New_York',\n            'London': 'Europe/London'\n        }\n        with self.assertRaises(ValueError):\n            task_func(self.utc_time, cities=custom_cities, timezones=custom_timezones, seed=self.seed)\n    def test_custom_cities_and_timezones(self):\n        \"\"\"Test functionality with custom cities and their respective timezones.\"\"\"\n        custom_cities = ['New York', 'London']\n        custom_timezones = {\n            'New York': 'America/New_York',\n            'London': 'Europe/London'\n        }\n        report = task_func(self.utc_time, cities=custom_cities, timezones=custom_timezones, seed=self.seed)\n        self.assertEqual(set(report['City']), set(custom_cities))\n    def test_reproducibility_with_seed(self):\n        \"\"\"Test that seeding the random number generator produces reproducible outcomes.\"\"\"\n        report1 = task_func(self.utc_time, seed=self.seed)\n        report2 = task_func(self.utc_time, seed=self.seed)\n        pd.testing.assert_frame_equal(report1, report2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Modify a list by adding the element '12', then concatenate a number of CSV files from a directory into a single DataFrame. The number of files concatenated is determined by the sum of the numbers in the list.\nThe function should raise the exception for: TypeError: If 'my_list' is not a list. FileNotFoundError: If no files are found in the specified directory.\nThe function should output with:\n    DataFrame: A pandas DataFrame concatenating data from the selected CSV files.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n```",
        "gt": "import pandas as pd\nimport os\nimport glob\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list.\")\n\n    my_list.append(12)\n    num_files = sum(my_list)\n\n    files = glob.glob(os.path.join(file_dir, '*' + file_ext))[:num_files]\n    if not files:\n        raise FileNotFoundError(f\"No files with extension '{file_ext}' found in directory '{file_dir}'.\")\n\n    data_frames = [pd.read_csv(file) for file in files]\n    concatenated_df = pd.concat(data_frames, ignore_index=True)\n\n    return concatenated_df",
        "test": "import unittest\nimport pandas as pd\nimport os\ndef create_dummy_csv():\n    test_dir = './data_files/'\n    os.makedirs(test_dir, exist_ok=True)\n    for i in range(3):\n        df = pd.DataFrame({'A': range(3), 'B': range(3, 6)})\n        df.to_csv(f'{test_dir}file_{i}.csv', index=False)\ndef tearDown_dummy():\n    # Clean up the test directory and its contents\n    test_dir = './data_files/'\n    for file in os.listdir(test_dir):\n        os.remove(os.path.join(test_dir, file))\n    os.rmdir(test_dir)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup for creating sample CSV files in a test directory\n        self.test_dir = './test_data_files/'\n        os.makedirs(self.test_dir, exist_ok=True)\n        for i in range(3):\n            df = pd.DataFrame({'A': range(3), 'B': range(3, 6)})\n            df.to_csv(f'{self.test_dir}file_{i}.csv', index=False)\n    def tearDown(self):\n        # Clean up the test directory and its contents\n        for file in os.listdir(self.test_dir):\n            os.remove(os.path.join(self.test_dir, file))\n        os.rmdir(self.test_dir)\n    def test_return_type(self):\n        my_list = [1, 2, 3]\n        df = task_func(my_list, file_dir=self.test_dir)\n        df_list = df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['0,3', '1,4', '2,5', '0,3', '1,4', '2,5', '0,3', '1,4', '2,5']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n        self.assertIsInstance(df, pd.DataFrame)\n    def test_list_modification(self):\n        my_list = [1, 2, 3]\n        task_func(my_list, file_dir=self.test_dir)\n        self.assertIn(12, my_list)\n    def test_invalid_input(self):\n        with self.assertRaises(TypeError):\n            task_func(\"not a list\", file_dir=self.test_dir)\n    def test_file_not_found(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func([1, 2, 3], file_dir='./non_existent_dir/')\n    def test_correct_file_count(self):\n        my_list = [1]\n        df = task_func(my_list, file_dir=self.test_dir)\n        # Expecting to concatenate 1 + 12 = 13 files, but only 3 are available\n        self.assertEqual(len(df), 9)  # 3 rows per file",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Train a linear regression model on a dataset and predict the value of a particular attribute. This function reads a CSV file to create a pandas DataFrame, separates the data into training and testing sets, and performs linear regression. It returns the predicted values for the testing set as well as the trained model.\nNote that: The function assumes that the CSV file is correctly formatted and that the specified attribute exists.\nThe function should output with:\n    tuple: A tuple containing:\n    model (LinearRegression): The trained linear regression model.\n    predictions (ndarray): An array of predicted values for the test set.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n```",
        "gt": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\ndef task_func(csv_file_path, attribute, test_size=0.2, random_state=42):\n    df = pd.read_csv(csv_file_path)\n    X = df.drop(columns=[attribute])\n    y = df[attribute]\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state\n    )\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    predictions = model.predict(X_test)\n    return model, predictions",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport tempfile\nimport os\nfrom sklearn.linear_model import LinearRegression\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary CSV file to simulate test environments\n        self.temp_file = tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.csv')\n        self.csv_file_path = self.temp_file.name\n        self.temp_file.close()  # Close the file immediately after creation\n    def tearDown(self):\n        # Remove the temporary file after the test\n        os.unlink(self.csv_file_path)\n    def create_csv(self, data, header=True):\n        # Utility to create CSV content\n        df = pd.DataFrame(data)\n        df.to_csv(self.csv_file_path, index=False, header=header)\n    def test_valid_data(self):\n        # Valid CSV and attribute\n        data = {'feature1': [1, 2, 3], 'feature2': [4, 5, 6], 'target': [7, 8, 9]}\n        self.create_csv(data)\n        model, predictions = task_func(self.csv_file_path, \"target\")\n        self.assertIsInstance(model, LinearRegression)\n        self.assertIsInstance(predictions, np.ndarray)\n        self.assertEqual(len(predictions), 1)  # 20% of 3 is 0.6, rounds to 1\n    def test_different_test_size(self):\n        # Changing the test size\n        data = {'feature1': range(10), 'feature2': range(10, 20), 'target': range(20, 30)}\n        self.create_csv(data)\n        model, predictions = task_func(self.csv_file_path, \"target\", test_size=0.3)\n        self.assertEqual(len(predictions), 3)  # 30% of 10 is 3\n    def test_invalid_attribute(self):\n        # Attribute not present in the CSV\n        data = {'feature1': [1, 2], 'feature2': [3, 4]}\n        self.create_csv(data)\n        with self.assertRaises(KeyError):\n            task_func(self.csv_file_path, \"nonexistent_target\")\n    def test_csv_with_missing_values(self):\n        # CSV containing missing values in features\n        data = {'feature1': [1, np.nan, 3], 'feature2': [4, 5, 6], 'target': [7, 8, 9]}\n        self.create_csv(data)\n        with self.assertRaises(ValueError):\n            task_func(self.csv_file_path, \"target\")\n    def test_predicting_non_numerical_data(self):\n        # Non-numerical data in target\n        data = {'feature1': [1, 2, 3], 'feature2': [4, 5, 6], 'target': ['a', 'b', 'c']}\n        self.create_csv(data)\n        with self.assertRaises(ValueError):\n            task_func(self.csv_file_path, \"target\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize two columns ('col1' and 'col2') in the DataFrame, find the biggest differences between the individual elements of the standardized columns, and return the indices of the N largest differences. >>> df = pd.DataFrame({ ...     'a': [1, 2, 3, 4], ...     'b': [1, 2, 3, 5] ... }) >>> indices = task_func(df, 'a', 'b') >>> print(indices) [2, 3, 0, 1]\nThe function should raise the exception for: ValueError: If specified columns are not in the provided DataFrame.\nThe function should output with:\n    list[int]: The indices of the N largest differences.\nYou should write self-contained code starting with:\n```\nimport heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n```",
        "gt": "import heapq\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, col1, col2, N=10):\n    # Ensure provided columns exist in the dataframe\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Columns {col1} or {col2} not found in the DataFrame.\")\n\n\n    scaler = StandardScaler()\n    df[[col1, col2]] = scaler.fit_transform(df[[col1, col2]])\n\n    l1 = df[col1].values\n    l2 = df[col2].values\n\n    largest_diff_indices = heapq.nlargest(N, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n\n    return largest_diff_indices",
        "test": "import unittest\nfrom faker import Faker\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        fake = Faker()\n        self.df1 = pd.DataFrame({\n            'col1': [fake.random_int(min=10, max=100) for _ in range(10)],\n            'col2': [fake.random_int(min=10, max=100) for _ in range(10)]\n        })\n        self.df2 = pd.DataFrame({\n            'col1': [fake.random_int(min=-100, max=-10) for _ in range(10)],\n            'col2': [fake.random_int(min=10, max=100) for _ in range(10)]\n        })\n        self.df3 = pd.DataFrame({\n            'col1': [fake.random_int(min=-100, max=100) for _ in range(10)],\n            'col2': [fake.random_int(min=-100, max=100) for _ in range(10)]\n        })\n        self.df4 = pd.DataFrame({\n            'col1': [fake.random_int(min=0, max=10) for _ in range(10)],\n            'col2': [fake.random_int(min=90, max=100) for _ in range(10)]\n        })\n        self.df5 = pd.DataFrame({\n            'col1': [fake.random_int(min=10, max=20) for _ in range(10)],\n            'col2': [fake.random_int(min=10, max=20) for _ in range(10)]\n        })\n    \n    def test_wrong_columns(self):\n        # test with wrong columns\n        data = {\n            'col1': [1, 2, 3, 4, 5],\n            'col2': [2, 3, 4, 5, 6]\n        }\n        df = pd.DataFrame(data)\n        self.assertRaises(Exception, task_func, df, 'a', 'col2')\n        self.assertRaises(Exception, task_func, df, 'col1', 'a')\n        self.assertRaises(Exception, task_func, df, 'a', 'b')\n    # Original test cases\n    def test_case_1(self):\n        result = task_func(self.df1, 'col1', 'col2')\n        self.assertTrue(isinstance(result, list))\n        self.assertEqual(len(result), 10)\n        \n    def test_case_2(self):\n        result = task_func(self.df2, 'col1', 'col2', 5)\n        self.assertTrue(isinstance(result, list))\n        self.assertEqual(len(result), 5)\n        \n    def test_case_3(self):\n        result = task_func(self.df3, 'col1', 'col2', 7)\n        self.assertTrue(isinstance(result, list))\n        self.assertEqual(len(result), 7)\n        \n    def test_case_4(self):\n        result = task_func(self.df4, 'col1', 'col2', 8)\n        self.assertTrue(isinstance(result, list))\n        self.assertEqual(len(result), 8)\n        \n    def test_case_5(self):\n        result = task_func(self.df5, 'col1', 'col2', 6)\n        self.assertTrue(isinstance(result, list))\n        self.assertEqual(len(result), 6)\nclass CorrectedDeterministicTestCases(unittest.TestCase):\n    # Corrected deterministic test cases\n    def test_deterministic_case_1(self):\n        df = pd.DataFrame({\n            'col1': [1, 2, 3, 4, 5],\n            'col2': [5, 4, 3, 2, 1]\n        })\n        expected_result = [0, 4, 1, 3, 2]\n        result = task_func(df, 'col1', 'col2')\n        self.assertListEqual(sorted(result), sorted(expected_result))\n        \n    def test_deterministic_case_2(self):\n        df = pd.DataFrame({\n            'col1': [10, 20, 30, 40, 50],\n            'col2': [10, 20, 30, 40, 50]\n        })\n        expected_result = [0, 1, 2, 3, 4]\n        result = task_func(df, 'col1', 'col2')\n        self.assertListEqual(sorted(result), sorted(expected_result))\n        \n    def test_deterministic_case_3(self):\n        df = pd.DataFrame({\n            'col1': [1, 1, 1, 1, 1],\n            'col2': [2, 2, 2, 2, 2]\n        })\n        expected_result = [0, 1, 2, 3, 4]\n        result = task_func(df, 'col1', 'col2')\n        self.assertListEqual(sorted(result), sorted(expected_result))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a numeric array of random integers, calculate the mean and standard deviation, and draw a histogram of the distribution.\nNote that: The random integers are generated between 1 and 100. The title of the histogram is \"Histogram of Random Values\". The x-axis is labeled \"Val\" and the y-axis is labeled \"Freq\". The mean is plotted as a red dashed line, and the standard deviation is plotted as purple dashed lines.\nThe function should output with:\n    Tuple: A tuple containing the array, mean, standard deviation, and the histogram plot (Axes).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n    array = np.random.randint(1, 500, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins='auto')\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    return array, mean, std, ax",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        np.random.seed(0)\n        array, mean, std, ax = task_func()\n        self.assertEqual(array.size, ARRAY_SIZE)\n        self.assertEqual(mean, 250.7154)\n        self.assertEqual(std, 142.85617453522966)\n        self.assertEqual(ax.get_title(), 'Histogram of Random Values')\n    def test_case_2(self):\n        array, mean, std, ax = task_func()\n        self.assertEqual(ax.get_xlabel(), 'Val')\n        self.assertEqual(ax.get_ylabel(), 'Freq')\n    def test_case_3(self):\n        np.random.seed(42)\n        array, mean, std, ax = task_func()\n        self.assertEqual(array[0], 103)\n        self.assertEqual(array[-1], 474)\n        self.assertEqual(mean, 250.171)\n        self.assertEqual(std, 144.01374920124815)\n        \n    def test_case_4(self):\n        np.random.seed(142)\n        array, mean, std, ax = task_func()\n        self.assertEqual(array[0], 278)\n        self.assertEqual(array[-1], 113)\n        self.assertEqual(mean, 251.1245)\n        self.assertEqual(std, 144.49066405740547)\n    def test_case_5(self):\n        np.random.seed(250)\n        array, mean, std, ax = task_func()\n        self.assertEqual(array[0], 367)\n        self.assertEqual(array[-1], 190)\n        self.assertEqual(mean, 249.037)\n        self.assertEqual(std, 144.32681882103546)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts a URL from a string and sends it to a REST API via a POST request. The URL is included in the JSON payload, and an authorization token is used in the headers for API access. If multiple URL is in myString, then use the first one\nThe function should output with:\n    dict: The response from the API, which varies based on the API's implementation.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nimport requests\ndef task_func(myString, token):\n```",
        "gt": "import re\nimport json\nimport requests\ndef task_func(myString, token):\n    url = re.search(r'(https?://\\S+)', myString).group()\n    headers = {'Authorization': 'Bearer ' + token}\n    data = {'url': url}\n    response = requests.post('https://api.example.com/urls', headers=headers, data=json.dumps(data))\n    return response.json()",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom requests.exceptions import ConnectionError\nclass MockResponse:\n    def __init__(self, json_data, status_code):\n        self.json_data = json_data\n        self.status_code = status_code\n    def json(self):\n        return self.json_data\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Mocking the response from the API\n        self.mock_response = MockResponse({'message': 'URL received'}, 200)\n        self.mock_error_response = MockResponse({'error': 'Bad Request'}, 400)\n    @patch('requests.post')\n    def test_case_1(self, mock_post):\n        # Testing with a valid URL and token\n        mock_post.return_value = self.mock_response\n        result = task_func('Please check: https://www.google.com', 'test_token')\n        self.assertEqual(result, {'message': 'URL received'})\n    @patch('requests.post')\n    def test_case_2(self, mock_post):\n        # Testing with a different valid URL and token\n        mock_post.return_value = self.mock_response\n        result = task_func('Visit: https://www.example.com', 'test_token_2')\n        self.assertEqual(result, {'message': 'URL received'})\n    @patch('requests.post')\n    def test_case_3(self, mock_post):\n        # Testing with a string without a URL\n        with self.assertRaises(AttributeError):\n            task_func('This is just a string without a URL.', 'test_token_3')\n    @patch('requests.post')\n    def test_case_4(self, mock_post):\n        # Testing with an empty string\n        with self.assertRaises(AttributeError):\n            task_func('', 'test_token_4')\n    @patch('requests.post')\n    def test_case_5(self, mock_post):\n        # Testing with a string containing multiple URLs but only the first one should be extracted\n        mock_post.return_value = self.mock_response\n        result = task_func('Check these: https://www.google.com and https://www.example.com', 'test_token_5')\n        # Verify that the correct URL is sent to the API\n        mock_post.assert_called_with('https://api.example.com/urls', headers={'Authorization': 'Bearer test_token_5'}, data=json.dumps({'url': 'https://www.google.com'}))\n        self.assertEqual(result, {'message': 'URL received'})\n    @patch('requests.post')\n    def test_case_6(self, mock_post):\n        # Testing response to API failure with non-200 status\n        mock_post.return_value = self.mock_error_response\n        result = task_func('Visit: https://www.fail-example.com', 'test_token_6')\n        self.assertEqual(result, {'error': 'Bad Request'})\n    @patch('requests.post')\n    def test_case_7(self, mock_post):\n        # Simulate a network error and ensure it raises a ConnectionError\n        mock_post.side_effect = ConnectionError\n        with self.assertRaises(ConnectionError):\n            task_func('https://www.google.com', 'test_token_7')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Encrypt a password using Salt and SHA-256, then encode the result in base64.\nThe function should output with:\n    str: The encrypted password in base64 format.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n```",
        "gt": "import hashlib\nimport os\nimport base64\ndef task_func(password: str, salt_length: int = 8) -> str:\n    # Generate a random salt\n    salt = os.urandom(salt_length)\n    # Use the salt and the password to create a SHA-256 hash\n    hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)\n    # Combine the salt and the hash\n    salted_hash = salt + hash\n    # Encode the salted hash in base64\n    encrypted_password = base64.b64encode(salted_hash)\n\n    return encrypted_password.decode('utf-8')",
        "test": "import unittest\nimport binascii\nclass TestCases(unittest.TestCase):\n    \n    def test_valid_encryption_format(self):\n        encrypted = task_func(\"test_password\")\n        try:\n            base64.b64decode(encrypted)\n            valid = True\n        except binascii.Error:\n            valid = False\n        self.assertTrue(valid)\n    def test_varying_password_lengths(self):\n        for length in [1, 5, 10, 50, 100]:\n            password = \"a\" * length\n            encrypted = task_func(password)\n            self.assertTrue(isinstance(encrypted, str) and len(encrypted) > 0)\n    \n    def test_salt_length_effect(self):\n        for salt_length in [1, 4, 8, 16]:\n            encrypted = task_func(\"test_password\", salt_length=salt_length)\n            self.assertTrue(isinstance(encrypted, str) and len(encrypted) > 0)\n    \n    def test_special_characters_in_password(self):\n        encrypted = task_func(\"!@#$%^&*()\")\n        self.assertTrue(isinstance(encrypted, str) and len(encrypted) > 0)\n    \n    def test_empty_password(self):\n        encrypted = task_func(\"\")\n        self.assertTrue(isinstance(encrypted, str) and len(encrypted) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Merge all sublists from a list of lists into a list and return a count of the elements.\nThe function should output with:\n    collections.Counter: Counter object with the counts of the elements in the merged list.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n```",
        "gt": "from collections import Counter\nfrom itertools import chain\ndef task_func(list_of_lists):\n    merged_list = list(chain.from_iterable(list_of_lists))\n    return Counter(merged_list)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        self.assertEqual(task_func(list_of_lists), Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}))\n    def test_case_2(self):\n        list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2]]\n        self.assertEqual(task_func(list_of_lists), Counter({1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}))\n    def test_case_3(self):\n        list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        self.assertEqual(task_func(list_of_lists), Counter({1: 3, 2: 3, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2}))\n    def test_case_4(self):\n        list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3]]\n        self.assertEqual(task_func(list_of_lists), Counter({1: 4, 2: 4, 3: 3, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2}))\n    def test_case_5(self):\n        list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        self.assertEqual(task_func(list_of_lists), Counter({1: 5, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3}))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts all URLs from the provided string, analyzes each URL to extract the domain, and uses the IP API to get the geolocation data for each domain.\nThe function should output with:\n    dict: A dictionary mapping domains to their geolocation data as returned by the IP API. Each entry contains fields like 'status', 'country', 'region', 'city', etc. If an API request fails, the corresponding value will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n```",
        "gt": "import re\nimport urllib.parse\nimport requests\nimport json\ndef task_func(myString, API_KEY):\n    urls = re.findall(r'(https?://[^\\s,]+)', myString)\n    geo_data = {}\n\n    for url in urls:\n        domain = urllib.parse.urlparse(url).netloc\n        response = requests.get(f\"http://ip-api.com/json/{domain}?access_key={API_KEY}\")\n        geo_data[domain] = json.loads(response.text)\n\n    return geo_data",
        "test": "import unittest\nfrom unittest.mock import patch\nimport json\nclass MockResponse:\n    def __init__(self, json_data, status_code):\n        self.json_data = json_data\n        self.status_code = status_code\n        self.text = json.dumps(json_data)\n    def json(self):\n        return self.json_data\ndef mocked_requests_get(*args, **kwargs):\n    if 'google.com' in args[0]:\n        return MockResponse({\n            'status': 'success',\n            'country': 'United States',\n            'countryCode': 'US',\n            'region': 'CA',\n            'regionName': 'California',\n            'city': 'Mountain View',\n            'zip': '94043',\n            'lat': '37.4192',\n            'lon': '-122.0574',\n            'timezone': 'America/Los_Angeles',\n            'isp': 'Google LLC',\n            'org': 'Google LLC',\n            'as': 'AS15169 Google LLC',\n            'query': '172.217.12.142'\n        }, 200)\n    elif 'python.org' in args[0]:\n        return MockResponse({\n            'status': 'success',\n            'country': 'United States',\n            'countryCode': 'US',\n            'region': 'OR',\n            'regionName': 'Oregon',\n            'city': 'Boardman',\n            'zip': '97818',\n            'lat': '45.8696',\n            'lon': '-119.688',\n            'timezone': 'America/Los_Angeles',\n            'isp': 'Amazon.com, Inc.',\n            'org': 'Amazon Data Services NoVa',\n            'as': 'AS16509 Amazon.com, Inc.',\n            'query': '151.101.193.223'\n        }, 200)\n    else:\n        raise Exception(\"API failure\")\nclass TestCases(unittest.TestCase):\n    @patch('requests.get', side_effect=mocked_requests_get)\n    def test_single_valid_url(self, mock_get):\n        result = task_func(\"http://www.google.com\", \"TEST_API_KEY\")\n        self.assertEqual(result['www.google.com']['city'], 'Mountain View')\n    @patch('requests.get', side_effect=mocked_requests_get)\n    def test_multiple_valid_urls(self, mock_get):\n        result = task_func(\"http://www.google.com, https://www.python.org\", \"TEST_API_KEY\")\n        self.assertIn('www.python.org', result)\n        self.assertEqual(result['www.python.org']['regionName'], 'Oregon')\n    @patch('requests.get', side_effect=mocked_requests_get)\n    def test_no_urls(self, mock_get):\n        result = task_func(\"This is a test without URLs.\", \"TEST_API_KEY\")\n        self.assertEqual(result, {})\n    @patch('requests.get', side_effect=mocked_requests_get)\n    def test_invalid_url_scheme(self, mock_get):\n        result = task_func(\"This is not a link: abc://test.link\", \"TEST_API_KEY\")\n        self.assertEqual(result, {})\n    @patch('requests.get', side_effect=mocked_requests_get)\n    def test_repeated_urls(self, mock_get):\n        result = task_func(\"http://www.google.com, http://www.google.com\", \"TEST_API_KEY\")\n        self.assertEqual(len(result), 1)  # Should only query once\n    @patch('requests.get', side_effect=mocked_requests_get)\n    def test_api_failure_handling(self, mock_get):\n        with self.assertRaises(Exception):\n            result = task_func(\"http://nonexistent.domain.com\", \"TEST_API_KEY\")\n            self.assertIsNone(result.get('nonexistent.domain.com'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame with random numeric values between 1 and 100, inclusive, and replace all occurrences of values less than 10 with -1.\nThe function should output with:\n    DataFrame: The modified Pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(data_size=1000, column_names=['A', 'B', 'C', 'D', 'E'], seed=0):\n    np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1  # Correctly replace values less than 10 with -1\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        df = task_func(seed=42)\n        self.assertEqual(df.shape, (1000, 5))\n        # Check that there are no values < 10 except -1\n        condition = ((df >= 10) | (df == -1)).all().all()\n        self.assertTrue(condition, \"DataFrame contains values less than 10 that were not replaced with -1\")\n    def test_custom_data_size_and_columns(self):\n        df = task_func(data_size=10, column_names=['X', 'Y'], seed=55)\n        self.assertEqual(df.shape, (10, 2))\n        # Check that there are no values < 10 except -1\n        condition = ((df >= 10) | (df == -1)).all().all()\n        self.assertTrue(condition, \"DataFrame contains values less than 10 that were not replaced with -1\")\n    def test_correct_replacement_of_values(self):\n        df = task_func(data_size=100, seed=0)\n        self.assertTrue(((df >= 10) | (df == -1)).all().all(), \"Not all values less than 10 were replaced with -1\")\n    \n    def test_correct_dataframe_dimensions(self):\n        rows, columns = 50, 3\n        df = task_func(data_size=rows, column_names=['P', 'Q', 'R'], seed=1)\n        self.assertEqual(df.shape, (rows, columns), \"DataFrame dimensions are incorrect\")\n    \n    def test_with_minimum_data_size(self):\n        df = task_func(data_size=1, column_names=['Single'], seed=2)\n        self.assertEqual(df.shape, (1, 1), \"DataFrame does not handle minimum data size correctly\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert the encoding of a CSV file from one encoding to another and return a list of dictionaries along with the converted CSV data as a string.\nNote that: The default filename to use if not specified is 'sample.csv'. The default delimiter is ','.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list of dictionaries. Each dictionary represents a row in the CSV file.\n    str: The converted CSV data as a string.\nYou should write self-contained code starting with:\n```\nimport csv\nimport io\ndef task_func(filename, from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n```",
        "gt": "import csv\nimport io\ndef task_func(filename, from_encoding='cp1251', to_encoding='utf8', delimiter=','):\n    with io.open(filename, 'r', encoding=from_encoding) as file:\n        content = file.read()\n\n    content = content.encode(from_encoding).decode(to_encoding)\n    file_like = io.StringIO(content)\n\n    reader = csv.DictReader(file_like, delimiter=delimiter)\n    data = list(reader)\n\n    output = io.StringIO()\n    # Check if fieldnames are present, else set a default\n    fieldnames = reader.fieldnames if reader.fieldnames else ['Column']\n    writer = csv.DictWriter(output, fieldnames=fieldnames, delimiter=delimiter)\n    writer.writeheader()\n    writer.writerows(data)\n    converted_csv = output.getvalue().replace('\\r\\n', '\\n')  # Normalize newlines\n\n    return data, converted_csv",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nimport csv\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Example CSV data\n        self.csv_data = \"Name,Age\\nAlice,30\\nBob,25\\n\"\n    @patch('os.path.exists', return_value=True)\n    @patch('io.open')\n    def test_case_1(self, mock_open, mock_exists):\n        # Set up mock_open to provide the file content\n        mock_file_handle = mock_open.return_value.__enter__.return_value\n        mock_file_handle.read.return_value = \"Name,Age\\nAlice,30\\nBob,25\\n\"\n        # Run the function\n        data, converted_csv = task_func('sample_1.csv', 'utf8', 'utf8', ',')\n        # Check the output data\n        expected_data = [{'Name': 'Alice', 'Age': '30'}, {'Name': 'Bob', 'Age': '25'}]\n        self.assertEqual(data, expected_data)\n        self.assertIn(\"Alice\", converted_csv)\n        self.assertIn(\"Bob\", converted_csv)\n        # Assert that the file was opened with the correct parameters\n        mock_open.assert_called_once_with('sample_1.csv', 'r', encoding='utf8')\n        # Since we're working with CSV data, ensure the data is properly formatted\n        # Ensure that the DictReader received the correct file handle and data\n        mock_file_handle.read.assert_called_once()\n    @patch('os.path.exists', return_value=True)\n    @patch('io.open')\n    def test_different_encoding(self, mock_open, mock_exists):\n        # Simulate reading file with different encoding\n        mock_open.return_value.__enter__.return_value.read.return_value = self.csv_data.encode('utf-8').decode('cp1251')\n        # Run the function with the encoding details\n        data, converted_csv = task_func('sample_1.csv', 'cp1251', 'utf8', ',')\n        # Check that the conversion was handled properly\n        self.assertIn(\"Alice\", converted_csv)\n        self.assertIn(\"Bob\", converted_csv)\n    @patch('io.open', new_callable=mock_open, read_data=\"Name,Age\\nAlice,30\\nBob,25\\n\")\n    def test_empty_file(self, mock_open):\n        mock_open.return_value.__enter__.return_value.read.return_value = \"\"\n        data, converted_csv = task_func('empty.csv', 'utf8', 'utf8', ',')\n        self.assertEqual(data, [])\n        self.assertEqual(converted_csv.strip(), \"Column\")  # Default column name in header\n    @patch('os.path.exists', return_value=True)\n    @patch('io.open')\n    def test_invalid_csv_format(self, mock_open, mock_exists):\n        # Simulate invalid CSV data\n        mock_open.return_value.__enter__.return_value.read.return_value = \"Name Age\\nAlice 30\\nBob 25\"\n        # Run the function\n        data, converted_csv = task_func('invalid.csv', 'utf8', 'utf8', ' ')\n        # Validate that data was parsed considering space as a delimiter\n        self.assertTrue(all('Name' in entry and 'Age' in entry for entry in data))\n    @patch('io.open', new_callable=mock_open, read_data=\"Name,Age\\n\")\n    def test_csv_with_only_headers(self, mock_open):\n        data, converted_csv = task_func('headers_only.csv', 'utf8', 'utf8', ',')\n        self.assertEqual(data, [])\n        self.assertIn(\"Name,Age\\n\", converted_csv)  # Test with normalized newline",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts title, date, and author information from a webpage and writes the data to a CSV file. The function iterates through each 'div' element with a class 'container', extracting the text of 'h1', and 'span' elements with classes 'date' and 'author', respectively. Default values ('No Title', 'No Date', or 'No Author') are used if an element is not found. The extracted data is stored in a list of tuples. The list of tuples is then converted into a Pandas DataFrame and saved to a CSV file at the specified file path. The DataFrame's columns are labeled as 'Title', 'Date', and 'Author'. The function returns the list of tuples.\nThe function should raise the exception for: RuntimeError: If the URL is incorrect or the server is down, the error message might be \"Error fetching URL: HTTP Error 404: Not Found\" or \"Error fetching URL: ConnectionError\". The function begins by making an HTTP request to the specified URL. It sets a timeout of 5 seconds to avoid prolonged waiting in case of unresponsive webpages. If the request encounters any exceptions such as connection errors, timeouts, or HTTP errors, a 'requests.RequestException' is raised. The function raises a '' with a message that includes the details of the exception. For example,, depending on the specific issue encountered.\nThe function should output with:\n    list: A list of tuples containing the (title, date, author) extracted from the webpage. Default placeholders\n    are used for missing information.\nYou should write self-contained code starting with:\n```\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n```",
        "gt": "import requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\ndef task_func(url: str, csv_file_path: str) -> list:\n\n\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching URL: {e}\")\n\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    data = []\n    for div in soup.find_all(\"div\", class_=\"container\"):\n        title = div.find(\"h1\").text.strip() if div.find(\"h1\") else \"No Title\"\n        date = (\n            div.find(\"span\", class_=\"date\").text.strip()\n            if div.find(\"span\", class_=\"date\")\n            else \"No Date\"\n        )\n        author = (\n            div.find(\"span\", class_=\"author\").text.strip()\n            if div.find(\"span\", class_=\"author\")\n            else \"No Author\"\n        )\n        data.append((title, date, author))\n\n    df = pd.DataFrame(data, columns=[\"Title\", \"Date\", \"Author\"])\n    df.to_csv(csv_file_path, index=False)\n\n    return data",
        "test": "import unittest\nfrom unittest.mock import patch\nimport os\nimport shutil\n# Mock HTML content\ntest_data_1_html = \"\"\"\n<html>\n    <div class=\"container\">\n        <h1>Title1</h1>\n        <span class=\"date\">Date1</span>\n        <span class=\"author\">Author1</span>\n    </div>\n    <div class=\"container\">\n        <h1>Title2</h1>\n        <span class=\"date\">Date2</span>\n        <span class=\"author\">Author2</span>\n    </div>\n</html>\n\"\"\"\ntest_data_2_html = \"\"\"\n<html>\n    <div class=\"container\">\n        <h1>TitleA</h1>\n        <span class=\"date\">DateA</span>\n        <span class=\"author\">AuthorA</span>\n    </div>\n</html>\n\"\"\"\nclass MockResponse:\n    \"\"\"Mock class for requests.Response\"\"\"\n    def __init__(self, text, status_code):\n        self.text = text\n        self.status_code = status_code\n    def raise_for_status(self):\n        if self.status_code != 200:\n            raise Exception(\"HTTP Error\")\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the task_func function\"\"\"\n    def setUp(self):\n        \"\"\"Set up any necessary resources before any tests are run.\"\"\"\n        os.makedirs(\"mnt/data\", exist_ok=True)  # Create the directory for test files\n    @patch(\"requests.get\")\n    def test_html_parsing_multiple_entries(self, mock_get):\n        \"\"\"Test parsing of HTML with multiple data entries.\"\"\"\n        mock_get.return_value = MockResponse(test_data_1_html, 200)\n        url = \"https://example.com/test_data_1.html\"\n        csv_file_path = \"mnt/data/output_1.csv\"\n        expected_output = [\n            (\"Title1\", \"Date1\", \"Author1\"),\n            (\"Title2\", \"Date2\", \"Author2\"),\n        ]\n        self.assertEqual(task_func(url, csv_file_path), expected_output)\n    @patch(\"requests.get\")\n    def test_html_parsing_single_entry(self, mock_get):\n        \"\"\"Test parsing of HTML with a single data entry.\"\"\"\n        mock_get.return_value = MockResponse(test_data_2_html, 200)\n        url = \"https://example.com/test_data_2.html\"\n        csv_file_path = \"mnt/data/output_2.csv\"\n        expected_output = [(\"TitleA\", \"DateA\", \"AuthorA\")]\n        self.assertEqual(task_func(url, csv_file_path), expected_output)\n    @patch(\"requests.get\")\n    def test_html_parsing_with_same_data_as_first(self, mock_get):\n        \"\"\"Test parsing of HTML similar to first test case.\"\"\"\n        mock_get.return_value = MockResponse(test_data_1_html, 200)\n        url = \"https://example.com/test_data_1.html\"\n        csv_file_path = \"mnt/data/output_3.csv\"\n        expected_output = [\n            (\"Title1\", \"Date1\", \"Author1\"),\n            (\"Title2\", \"Date2\", \"Author2\"),\n        ]\n        self.assertEqual(task_func(url, csv_file_path), expected_output)\n    @patch(\"requests.get\")\n    def test_html_parsing_with_same_data_as_second(self, mock_get):\n        \"\"\"Test parsing of HTML similar to second test case.\"\"\"\n        mock_get.return_value = MockResponse(test_data_2_html, 200)\n        url = \"https://example.com/test_data_2.html\"\n        csv_file_path = \"mnt/data/output_4.csv\"\n        expected_output = [(\"TitleA\", \"DateA\", \"AuthorA\")]\n        self.assertEqual(task_func(url, csv_file_path), expected_output)\n    @patch(\"requests.get\")\n    def test_html_parsing_with_nonexistent_url(self, mock_get):\n        \"\"\"Test handling of HTTP error when URL does not exist.\"\"\"\n        mock_get.return_value = MockResponse(\"\", 404)  # Simulating a 404 error\n        url = \"https://example.com/non_existent.html\"  # Non-existent URL\n        csv_file_path = \"mnt/data/output_5.csv\"\n        with self.assertRaises(Exception):\n            task_func(url, csv_file_path)  # Should raise HTTP Error\n    @patch(\"requests.get\")\n    def test_task_func_request_exception(self, mock_get):\n        \"\"\"Test task_func raises an exception when there is a request error.\"\"\"\n        mock_get.side_effect = requests.RequestException(\"Error fetching URL\")\n        url = \"https://example.com/non_existent.html\"\n        csv_file_path = \"mnt/data/output_error.csv\"\n        with self.assertRaises(Exception) as context:\n            task_func(url, csv_file_path)\n        self.assertIn(\"Error fetching URL\", str(context.exception))\n    def tearDown(self):\n        \"\"\"Clean up shared resources after all tests in the class have completed.\"\"\"\n        # Cleanup the test directories\n        dirs_to_remove = [\"mnt/data\", \"mnt\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a hex string to bytes, salts it with a random value of specified size, and computes its SHA256 hash. The function generates a random salt of the given size, appends it to the byte representation of the hex string, and then computes the SHA256 hash of the salted data. The salt and hash are returned as a tuple.\nThe function should output with:\n    tuple: A tuple containing the base64-encoded salt and the SHA256 hash.\nYou should write self-contained code starting with:\n```\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n```",
        "gt": "import base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    salt = os.urandom(salt_size)\n    data = binascii.unhexlify(hex_str.replace('\\\\x', ''))\n    salted_data = salt + data\n    hash_value = hashlib.sha256(salted_data).hexdigest()\n\n    return (base64.b64encode(salt).decode('utf-8'), hash_value)",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.salt_size = 16  # Define salt_size here to use in all tests\n    def test_return_type(self):\n        \"\"\"Test that the function returns a tuple.\"\"\"\n        result = task_func(\"F3BE8080\", self.salt_size)\n        self.assertIsInstance(result, tuple)\n    def test_salt_and_hash_length(self):\n        \"\"\"Test the length of the salt and hash.\"\"\"\n        salt, hash_value = task_func(\"F3BE8080\", self.salt_size)\n        self.assertEqual(len(salt), 24)  # Base64 encoded 16-byte salt\n        self.assertEqual(len(hash_value), 64)  # Length of SHA256 hash\n    def test_hash_changes_with_input(self):\n        \"\"\"Test that different inputs produce different hashes.\"\"\"\n        _, hash1 = task_func(\"F3BE8080\", self.salt_size)\n        _, hash2 = task_func(\"F4BE8080\", self.salt_size)\n        self.assertNotEqual(hash1, hash2)\n    def test_various_hex_formats(self):\n        \"\"\"Test the function with various hex string formats.\"\"\"\n        _, hash1 = task_func(\"F3BE8080\", self.salt_size)\n        _, hash2 = task_func(\"f3be8080\", self.salt_size)  # Lowercase\n        _, hash3 = task_func(\"\\\\xF3\\\\xBE\\\\x80\\\\x80\", self.salt_size)  # With escape sequences\n        self.assertNotEqual(hash1, hash2)\n        self.assertNotEqual(hash1, hash3)\n    @patch('os.urandom', return_value=b'\\x00' * 16)\n    def test_salt_generation(self, mock_urandom):\n        \"\"\"Test that the salt is generated using os.urandom with the correct size.\"\"\"\n        salt, _ = task_func(\"F3BE8080\", self.salt_size)\n        mock_urandom.assert_called_once_with(self.salt_size)\n        expected_salt = base64.b64encode(b'\\x00' * self.salt_size).decode('utf-8')\n        self.assertEqual(salt, expected_salt)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the maximum Euclidean distance between all possible pairs of points formed by combining elements from two input arrays. Each point is formed by combining one element from the first array and one element from the second array. The function then calculates the Euclidean distance between each pair of points and returns the maximum distance found.\nThe function should raise the exception for: ValueError: If the input arrays have different lengths.\nThe function should output with:\n    max_distance (float): The maximum Euclidean distance between any two points formed by combining\n    elements from array1 and array2. If the arrays are empty, the function\n    returns 0.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n```",
        "gt": "import numpy as np\nfrom itertools import combinations\ndef task_func(array1, array2):\n    if len(array1) != len(array2):\n        raise ValueError(\"The input arrays must have the same length.\")\n    \n    if len(array1) == 0:\n        return 0\n    \n    max_distance = 0\n    for comb in combinations(zip(array1, array2), 2):\n        distance = np.linalg.norm(np.array(comb[0]) - np.array(comb[1]))\n        if distance > max_distance:\n            max_distance = distance\n\n    return max_distance",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_non_empty_arrays(self):\n        # Test with non-empty arrays containing positive values\n        # Expected result is the maximum Euclidean distance between any two points\n        array1 = np.array([1, 2, 3])\n        array2 = np.array([4, 5, 6])\n        result = task_func(array1, array2)\n        self.assertAlmostEqual(result, 2.8284271247461903, places=6)\n    def test_empty_arrays(self):\n        # Test with empty arrays\n        # Expected result is 0 since there are no points to calculate the distance between\n        array1 = np.array([])\n        array2 = np.array([])\n        result = task_func(array1, array2)\n        self.assertEqual(result, 0)\n    def test_single_element_arrays(self):\n        # Test with arrays that each contain a single element\n        # Expected result is 0 since there is only one point\n        array1 = np.array([1])\n        array2 = np.array([2])\n        result = task_func(array1, array2)\n        self.assertEqual(result, 0)\n    def test_negative_values(self):\n        # Test with non-empty arrays containing negative values\n        # Expected result is the maximum Euclidean distance between any two points\n        array1 = np.array([-1, -2, -3])\n        array2 = np.array([-4, -5, -6])\n        result = task_func(array1, array2)\n        self.assertAlmostEqual(result, 2.8284271247461903, places=6)\n    def test_mixed_values(self):\n        # Test with non-empty arrays containing a mix of positive and negative values\n        # Expected result is the maximum Euclidean distance between any two points\n        array1 = np.array([1, -2, 3])\n        array2 = np.array([-4, 5, -6])\n        result = task_func(array1, array2)\n        self.assertAlmostEqual(result, 12.083045973594572, places=6)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform Principal Component Analysis (PCA) on the DataFrame and record the first two main components.\nThe function should output with:\n    df_pca (DataFrame): The DataFrame with the first two principal components named 'PC1' and 'PC2' as columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(df):\n    pca = PCA(n_components=2)\n    df_pca = pca.fit_transform(df)\n    \n    df_pca = pd.DataFrame(df_pca, columns=['PC1', 'PC2'])\n    \n    return df_pca",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame([[0, 0], [0, 0]], columns = ['x', 'y'])\n        df_pca = task_func(df)\n        self.assertTrue('PC1' in df_pca.columns)\n        self.assertTrue('PC2' in df_pca.columns)\n        self.assertEqual(df_pca.shape, (2, 2))\n        self.assertEqual(df_pca['PC1'].iloc[0], 0)\n        self.assertEqual(df_pca['PC2'].iloc[0], 0)\n        self.assertEqual(df_pca['PC1'].iloc[1], 0)\n        self.assertEqual(df_pca['PC2'].iloc[1], 0)\n    def test_case_2(self):\n        df = pd.DataFrame([[1, 1], [1, 1]], columns = ['x', 'y'])\n        df_pca = task_func(df)\n        self.assertTrue('PC1' in df_pca.columns)\n        self.assertTrue('PC2' in df_pca.columns)\n        self.assertEqual(df_pca.shape, (2, 2))\n        self.assertEqual(df_pca['PC1'].iloc[0], 0)\n        self.assertEqual(df_pca['PC2'].iloc[0], 0)\n        self.assertEqual(df_pca['PC1'].iloc[1], 0)\n        self.assertEqual(df_pca['PC2'].iloc[1], 0)\n    def test_case_3(self):\n        df = pd.DataFrame([[1, 0], [0, 1]], columns = ['x', 'y'])\n        df_pca = task_func(df)\n        self.assertTrue('PC1' in df_pca.columns)\n        self.assertTrue('PC2' in df_pca.columns)\n        self.assertEqual(df_pca.shape, (2, 2))\n        pca_new = PCA(n_components=2)\n        df_pca_new = pca_new.fit_transform(df)\n        self.assertEqual(df_pca['PC1'].iloc[0], df_pca_new[0, 0])\n        self.assertEqual(df_pca['PC2'].iloc[0], df_pca_new[0, 1])\n        self.assertEqual(df_pca['PC1'].iloc[1], df_pca_new[1, 0])\n        self.assertEqual(df_pca['PC2'].iloc[1], df_pca_new[1, 1])\n    def test_case_4(self):\n        df = pd.DataFrame([[4, 3, 2, 1], [1, 2, 3, 4]], columns = ['x', 'y', 'z', 'w'])\n        df_pca = task_func(df)\n        self.assertTrue('PC1' in df_pca.columns)\n        self.assertTrue('PC2' in df_pca.columns)\n        self.assertEqual(df_pca.shape, (2, 2))\n        pca_new = PCA(n_components=2)\n        df_pca_new = pca_new.fit_transform(df)\n        self.assertEqual(df_pca['PC1'].iloc[0], df_pca_new[0, 0])\n    def test_case_5(self):\n        df = pd.DataFrame([[1, 2, 3, 4], [4, 3, 2, 1]], columns = ['x', 'y', 'z', 'w'])\n        df_pca = task_func(df)\n        self.assertTrue('PC1' in df_pca.columns)\n        self.assertTrue('PC2' in df_pca.columns)\n        self.assertEqual(df_pca.shape, (2, 2))\n        pca_new = PCA(n_components=2)\n        df_pca_new = pca_new.fit_transform(df)\n        self.assertEqual(df_pca['PC1'].iloc[0], df_pca_new[0, 0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform K-Means clustering on the given DataFrame using the sklearn KMeans algorithm. The function expects a DataFrame with numerical values, as KMeans cannot handle categorical data. It applies standard KMeans clustering from the sklearn library to form clusters. The number of clusters is configurable via the 'n_clusters' parameter, defaulting to 3. The Number of times the k-means algorithm is run with different centroid seeds (n_init) is set to 10. The function returns an array of cluster labels corresponding to each data point in the input as well as the fitted KMeans model. >>> data = pd.DataFrame({ ...     'a': [1, 20, 2, 22, 100], ...     'b': [1, 20, 2, 22, 100] ... }) >>> labels, model = task_func(data, seed=213) >>> print(labels) [2 0 2 0 1] >>> print(model) KMeans(n_clusters=3, n_init=10, random_state=213)\nThe function should raise the exception for: ValueError: If the DataFrame contains non numeric entries.\nThe function should output with:\n    numpy.ndarray: An array of integers (cluster labels) corresponding to the input data. Each label is an integer\n    representing the cluster to which a row of data has been assigned.\n    sklearn.cluster.KMeans: The fitted KMeans Model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=3, seed=None):\n    if not data.apply(lambda s: pd.to_numeric(s, errors='coerce').notnull().all()).all():\n        raise ValueError(\"DataFrame should only contain numeric values.\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=seed, n_init=10)\n    kmeans.fit(data)\n\n    return kmeans.labels_, kmeans",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_nonnumeric(self):\n        data = pd.DataFrame({\n            'a': [1, 2, 3],\n            'b': ['a', 2, 4]\n        })\n        self.assertRaises(Exception, task_func, data)\n    def test_case_1(self):\n        np.random.seed(12)\n        data = pd.DataFrame(np.random.randint(0, 20, size=(20, 4)), columns=list('ABCD'))\n        labels, kmeans = task_func(data, n_clusters=4, seed=1)\n        unique_labels = np.unique(labels)\n        assert all(label in range(4) for label in unique_labels)\n        self.assertTrue(isinstance(labels, np.ndarray))\n        self.assertIsInstance(kmeans, KMeans)\n        np.testing.assert_equal(labels, [3, 0, 3, 1, 2, 1, 2, 0, 2, 1, 1, 3, 3, 1, 0, 0, 0, 0, 1, 3])\n    def test_case_2(self):\n        data = pd.DataFrame(np.zeros((100, 4)), columns=list('ABCD'))\n        labels, kmeans = task_func(data, n_clusters=3, seed=12)\n        self.assertIsInstance(kmeans, KMeans)\n        assert len(np.unique(labels)) == 1\n        self.assertTrue(isinstance(labels, np.ndarray))\n        self.assertCountEqual(labels, np.zeros(100))\n    def test_case_3(self):\n        data = pd.DataFrame({'A': range(100), 'B': range(100), 'C': range(100)})\n        labels, kmeans = task_func(data, seed=42)\n        self.assertIsInstance(kmeans, KMeans)\n        expected = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n       2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        np.testing.assert_equal(labels, expected)\n        self.assertTrue(isinstance(labels, np.ndarray))\n    def test_case_4(self):\n        np.random.seed(5)\n        data = pd.DataFrame(np.random.rand(100, 20))\n        labels, kmeans = task_func(data, n_clusters=12, seed=12)\n        self.assertIsInstance(kmeans, KMeans)\n        expected = [ 4,  5,  5,  9, 10,  1,  0,  3,  4,  7,  7,  2, 11, 11,  3,  0,  4,\n                    2,  3,  2,  2, 10, 10,  8,  5,  9, 11,  5,  0,  8, 11,  5,  7,  0,\n                    8, 11,  7, 11,  6,  1,  1,  7,  0,  9,  3,  7,  8,  0,  4,  1,  7,\n                    2, 10,  3, 11,  9,  1,  1,  7,  4,  5,  7,  6,  9,  8,  6,  5,  9,  0,\n                    11 , 1 , 1,  4,  2,  1,  0,  7,  5,  1,  9,  6,  7, 10, 10,  4,  4,  9,\n                    1,  9,  5,  6,  3, 10,  7, 11,  8,  1,  8,  6, 11]\n        np.testing.assert_equal(labels, expected)\n        self.assertTrue(isinstance(labels, np.ndarray))\n    def test_case_5(self):\n        data = pd.DataFrame([])\n        self.assertRaises(Exception, task_func, data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw and return a heat map with temperature data from a pandas DataFrame.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks 'Date', 'Time', or 'Temperature' columns.\nThe function should output with:\n    Axes: Seaborn heatmap object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Date', 'Time', 'Temperature']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'Date', 'Time', and 'Temperature' columns.\")\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df['Month'] = df['Date'].dt.month\n    df['Day'] = df['Date'].dt.day\n\n    df_pivot = df.pivot(index=\"Month\", columns=\"Day\", values=\"Temperature\")\n    ax = sns.heatmap(df_pivot)\n    ax.set_title('Temperature Heatmap')\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n        self.df = pd.DataFrame({\n            'Date': pd.date_range(start='1/1/2021', end='12/31/2021'),\n            'Time': ['12:00'] * 365,\n            'Temperature': np.random.randint(-10, 35, size=365)\n        })\n    def test_return_value(self):\n        ax = task_func(self.df)\n        heatmap_data = ax.collections[0].get_array()\n        heatmap_data[np.isnan(heatmap_data)] = 0\n        heatmap_data = heatmap_data.flatten().tolist()\n        expect = [28.0, 18.0, 4.0, 32.0, -3.0, 10.0, 28.0, 8.0, 12.0, 0.0, 0.0, 13.0, 25.0, 29.0, 13.0, -8.0, 11.0, -9.0, 13.0, 33.0, 19.0, 27.0, -9.0, 10.0, 22.0, 1.0, 11.0, 33.0, 14.0, 16.0, 31.0, 17.0, 5.0, 4.0, 33.0, -8.0, 26.0, -4.0, 10.0, -2.0, 28.0, 7.0, -7.0, 14.0, 3.0, -2.0, 15.0, -9.0, 9.0, 17.0, -4.0, 33.0, -3.0, 24.0, 3.0, 6.0, 25.0, 29.0, -7.0, 0.0, 0.0, 0.0, -9.0, -5.0, 31.0, -7.0, 18.0, 7.0, 15.0, 33.0, 23.0, -1.0, 25.0, 3.0, 20.0, 4.0, -3.0, 3.0, 12.0, 29.0, 10.0, 5.0, 34.0, 7.0, 13.0, 15.0, 14.0, 34.0, 30.0, 18.0, 4.0, 34.0, -10.0, 14.0, -4.0, -2.0, 13.0, -10.0, 33.0, -3.0, 13.0, 0.0, 6.0, -3.0, 24.0, 24.0, 22.0, -6.0, 31.0, 28.0, 30.0, 17.0, -4.0, -2.0, -3.0, 1.0, 23.0, 22.0, 12.0, 13.0, 26.0, 24.0, 33.0, 0.0, 29.0, 11.0, 16.0, 24.0, -10.0, 24.0, 26.0, 3.0, -8.0, -10.0, -6.0, 15.0, 3.0, 28.0, 16.0, -2.0, 4.0, 4.0, 15.0, 31.0, 2.0, 21.0, 28.0, 21.0, -7.0, 19.0, 26.0, 12.0, 28.0, 34.0, 4.0, 32.0, 18.0, 25.0, 2.0, 21.0, -4.0, 11.0, 17.0, -9.0, 31.0, 34.0, -5.0, 17.0, 17.0, 33.0, 33.0, 9.0, 19.0, 0.0, 17.0, 14.0, 28.0, 22.0, -10.0, 16.0, 2.0, 30.0, -8.0, 28.0, -5.0, 0.0, -3.0, 16.0, -2.0, 26.0, 22.0, 31.0, 33.0, 13.0, 4.0, 21.0, 21.0, 13.0, 30.0, 1.0, 28.0, -9.0, -8.0, 26.0, 6.0, -9.0, -9.0, 17.0, 12.0, 26.0, 21.0, 22.0, -10.0, 8.0, -9.0, 33.0, 15.0, 21.0, -5.0, 21.0, -7.0, 0.0, 6.0, 27.0, 13.0, -6.0, 23.0, -5.0, 11.0, 0.0, 5.0, 22.0, -2.0, -5.0, 5.0, 18.0, -8.0, 9.0, 25.0, 8.0, 15.0, -8.0, 8.0, 9.0, 21.0, -4.0, 30.0, 22.0, 29.0, 28.0, 7.0, 29.0, -10.0, 0.0, 17.0, 14.0, 12.0, 20.0, 19.0, 31.0, 24.0, -4.0, 5.0, 15.0, -9.0, -10.0, 1.0, -6.0, 26.0, 21.0, -2.0, 30.0, 24.0, 8.0, 5.0, -8.0, 9.0, 13.0, 0.0, 22.0, 13.0, 0.0, -3.0, 25.0, 27.0, 29.0, 9.0, 24.0, 14.0, 24.0, 14.0, 18.0, 7.0, 7.0, -9.0, 24.0, 5.0, 30.0, 25.0, 22.0, -7.0, 22.0, 3.0, 10.0, 9.0, -3.0, -4.0, -8.0, 6.0, 22.0, 1.0, 11.0, 11.0, 19.0, 27.0, 27.0, 34.0, -3.0, 16.0, 16.0, 23.0, 10.0, 19.0, 22.0, 17.0, 22.0, -6.0, 8.0, -7.0, 24.0, 6.0, 33.0, 17.0, 19.0, 18.0, -5.0, 24.0, 30.0, 26.0, 13.0, 0.0, 18.0, 20.0, 24.0, 22.0, 10.0, 21.0, 12.0, 22.0, -8.0, 7.0, 14.0, 31.0, 20.0, -8.0, 29.0, 13.0, 21.0, 11.0, 12.0, -9.0, 16.0, 31.0, -9.0, 15.0, 6.0, 29.0, 22.0, -2.0, 32.0, 28.0, 18.0]\n        self.assertListEqual(heatmap_data, expect, \"DataFrame contents should match the expected output\")\n    \n    def test_return_type1(self):\n        ax = task_func(self.df)\n        self.assertIsInstance(ax, plt.Axes)\n    \n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [5, 6]}))\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'Date': [], 'Time': [], 'Temperature': []}))\n    def test_plot_title(self):\n        ax = task_func(self.df)\n        self.assertTrue('Temperature Heatmap' in ax.get_title())\n    def test_date_conversion(self):\n        df_with_string_dates = self.df.copy()\n        df_with_string_dates['Date'] = df_with_string_dates['Date'].dt.strftime('%Y-%m-%d')\n        ax = task_func(df_with_string_dates)\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a dictionary of animals as keys and letters as values, count the frequency of each letter in the animals.\nNote that: Remove key in the dictionary if it is not an animal from ANIMAL constant\nThe function should output with:\n    dict: A dictionary with letters as keys and their frequencies as values, sorted in descending order by frequency. Format: {letter: frequency}.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom operator import itemgetter\nimport itertools\n#CONSTANT\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n```",
        "gt": "from collections import Counter\nfrom operator import itemgetter\nimport itertools\n#CONSTANT\nANIMAL = ['cat', 'camel', 'cow', 'dog', 'elephant', 'fox', 'giraffe', 'hippo', 'iguana', 'jaguar']\ndef task_func(animal_dict):\n    animal_dict_copy = {}\n    for i in animal_dict:\n        if i in ANIMAL:\n            animal_dict_copy[i] = animal_dict[i]\n    letters = list(itertools.chain.from_iterable(animal_dict_copy.keys()))\n    count_dict = dict(Counter(letters))\n    \n    sorted_dict = dict(sorted(count_dict.items(), key=itemgetter(1), reverse=True))\n    \n    return sorted_dict",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input: A dictionary with multiple animal names and their initial letters.\n        animal_dict = {'cat': 'c', 'dog': 'd', 'elephant': 'e', 'fox': 'f'}\n        expected_output = dict(Counter('catdogelephantfox'))\n        self.assertDictEqual(task_func(animal_dict), expected_output)\n    def test_case_2(self):\n        # Input: An empty dictionary.\n        animal_dict = {}\n        expected_output = {}\n        self.assertDictEqual(task_func(animal_dict), expected_output)\n    def test_case_3(self):\n        # Input: A dictionary with one animal name and its initial letter.\n        animal_dict = {'cat': 'c'}\n        expected_output = {'c': 1, 'a': 1, 't': 1}\n        self.assertDictEqual(task_func(animal_dict), expected_output)\n    def test_case_4(self):\n        # Input: A dictionary with animal names having repetitive initial letters.\n        animal_dict = {'cat': 'c', 'camel': 'c', 'cow': 'c'}\n        expected_output = dict(Counter('catcamelcow'))\n        self.assertDictEqual(task_func(animal_dict), expected_output)\n    def test_case_5(self):\n        # Input: A dictionary with non-animal words and their initial letters.\n        animal_dict = {'hello': 'h', 'world': 'w'}\n        expected_output = {}\n        self.assertDictEqual(task_func(animal_dict), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with random survey data based on given categories, news sites, and Likert scale responses. The function writes the generated data to a CSV file and then reads it into a Pandas DataFrame. >>> df = task_func(8, ['test', 'fun'], likert_scale=['true', 'false'], news_sites=['cat', 'dog'], random_seed=12) >>> print(df) Site Category  Response  Value 0  dog      fun     False      2 1  cat      fun      True      1 2  dog      fun     False      2 3  dog     test      True      1 4  cat      fun     False      2 5  cat      fun      True      1 6  cat     test      True      1 7  dog      fun      True      1\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns ['Site', 'Category', 'Response', 'Value'].\n    The 'Value' column assigns a numerical value to the Likert scale response (starting from 1).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n```",
        "gt": "import pandas as pd\nimport random\nimport csv\ndef task_func(n, \n           categories=['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'],\n           news_sites=['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'],\n           likert_scale=['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'],\n           file_path='news_survey_data.csv',\n           random_seed=None):\n    survey_data = []\n\n    random.seed(random_seed)\n    \n    for _ in range(n):\n        site = random.choice(news_sites)\n        category = random.choice(categories)\n        response = random.choice(likert_scale)\n        value = likert_scale.index(response) + 1  # Assign a numerical value to the response\n        survey_data.append({'Site': site, 'Category': category, 'Response': response, 'Value': value})\n    \n    with open(file_path, 'w', newline='') as csvfile:\n        fieldnames = ['Site', 'Category', 'Response', 'Value']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(survey_data)\n        \n    df = pd.read_csv(file_path)\n    \n    return df",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setting up a temporary directory to save CSV files during tests\n        self.temp_dir = \"temp_test_dir\"\n        os.makedirs(self.temp_dir, exist_ok=True)\n        \n    def test_rng(self):\n        'test rng reproducability'\n        df1 = task_func(300, file_path=os.path.join(self.temp_dir, \"test1.csv\"), random_seed=42)\n        df1_from_csv = pd.read_csv(os.path.join(self.temp_dir, \"test1.csv\"))\n        df2 = task_func(300, file_path=os.path.join(self.temp_dir, \"test2.csv\"), random_seed=42)\n        df2_from_csv = pd.read_csv(os.path.join(self.temp_dir, \"test2.csv\"))\n        self.assertTrue(pd.testing.assert_frame_equal(df1, df2) is None)\n        self.assertTrue(pd.testing.assert_frame_equal(df1_from_csv, df1) is None)\n        self.assertTrue(pd.testing.assert_frame_equal(df2_from_csv, df2) is None)\n    def test_case_1(self):\n        # Test with default values for categories, news_sites, and likert_scale\n        n = 100\n        df = task_func(n, file_path=os.path.join(self.temp_dir, \"test1.csv\"), random_seed=1)\n        df_from_csv = pd.read_csv(os.path.join(self.temp_dir, \"test1.csv\"))\n        self.assertTrue(pd.testing.assert_frame_equal(df_from_csv, df) is None)\n        self.assertEqual(len(df), n)\n        self.assertTrue(set(df['Site'].unique()).issubset(set(['New York Times', 'USA Today', 'Apple News', 'CNN', 'BBC'])))\n        self.assertTrue(set(df['Category'].unique()).issubset(set(['Sports', 'Technology', 'Business', 'Politics', 'Entertainment'])))\n        self.assertTrue(set(df['Response'].unique()).issubset(set(['Strongly Disagree', 'Disagree', 'Neither Agree nor Disagree', 'Agree', 'Strongly Agree'])))\n        self.assertTrue(set(df['Value'].unique()).issubset(set(range(1, 6))))\n    def test_case_2(self):\n        # Test with custom values for categories and default values for others\n        n = 500\n        categories = ['Science', 'Math']\n        df = task_func(n, categories=categories, file_path=os.path.join(self.temp_dir, \"test2.csv\"), random_seed=12)\n        df_from_csv = pd.read_csv(os.path.join(self.temp_dir, \"test2.csv\"))\n        self.assertTrue(pd.testing.assert_frame_equal(df_from_csv, df) is None)\n        self.assertEqual(len(df), n)\n        self.assertTrue(set(df['Category'].unique()).issubset(set(categories)))\n    def test_case_3(self):\n        # Test with custom values for news_sites and default values for others\n        n = 775\n        news_sites = ['ABC', 'NBC']\n        df = task_func(n, news_sites=news_sites, file_path=os.path.join(self.temp_dir, \"test3.csv\"), random_seed=11)\n        df_from_csv = pd.read_csv(os.path.join(self.temp_dir, \"test3.csv\"))\n        self.assertTrue(pd.testing.assert_frame_equal(df_from_csv, df) is None)\n        self.assertEqual(len(df), n)\n        self.assertTrue(set(df['Site'].unique()).issubset(set(news_sites)))\n    def test_case_4(self):\n        # Test with custom values for likert_scale and default values for others\n        n = 20\n        likert_scale = ['Yes', 'No']\n        df = task_func(n, likert_scale=likert_scale, file_path=os.path.join(self.temp_dir, \"test4.csv\"), random_seed=18)\n        df_from_csv = pd.read_csv(os.path.join(self.temp_dir, \"test4.csv\"))\n        self.assertTrue(pd.testing.assert_frame_equal(df_from_csv, df) is None)\n        self.assertEqual(len(df), n)\n        self.assertTrue(set(df['Response'].unique()).issubset(set(likert_scale)))\n        self.assertTrue(set(df['Value'].unique()).issubset(set(range(1, 3))))\n    def test_case_5(self):\n        # Test for empty df\n        n = 0\n        df = task_func(n, file_path=os.path.join(self.temp_dir, \"test5.csv\"))\n        self.assertEqual(len(df), n)\n    def tearDown(self):\n        # Cleanup temporary directory after tests\n        for file in os.listdir(self.temp_dir):\n            os.remove(os.path.join(self.temp_dir, file))\n        os.rmdir(self.temp_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Backup all '.log' files in a specified directory to a tar.gz file and delete the original files after backup. The backup file is named 'logs_backup.tar.gz' and placed in the specified backup directory.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist.\nThe function should output with:\n    str: The path to the backup file if logs are found, otherwise returns a message 'No logs found to backup'.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n```",
        "gt": "import os\nimport glob\nimport subprocess\ndef task_func(directory, backup_dir='/path/to/backup'):\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        return \"No logs found to backup\"\n\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    subprocess.call(['tar', '-czvf', backup_file] + log_files)\n\n    for file in log_files:\n        os.remove(file)\n\n    return backup_file",
        "test": "import unittest\nimport tempfile\nimport os\nimport subprocess\nimport glob\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.mkdtemp()\n        self.temp_backup_dir = tempfile.mkdtemp()\n        \n        # Create some log files and some non-log files\n        for i in range(5):\n            with open(os.path.join(self.temp_dir, f\"file_{i}.log\"), \"w\") as f:\n                f.write(f\"Mock log content for file_{i}\")\n            with open(os.path.join(self.temp_dir, f\"file_{i}.txt\"), \"w\") as f:\n                f.write(f\"Mock content for file_{i}.txt\")\n    def tearDown(self):\n        shutil.rmtree(self.temp_dir)\n        shutil.rmtree(self.temp_backup_dir)\n    def test_backup_creation_and_log_file_deletion(self):\n        # Test the creation of the backup file and deletion of original log files.\n        backup_path = task_func(self.temp_dir, self.temp_backup_dir)\n        self.assertTrue(os.path.exists(backup_path))\n        self.assertEqual(backup_path, os.path.join(self.temp_backup_dir, 'logs_backup.tar.gz'))\n        self.assertFalse(any(file.endswith('.log') for file in os.listdir(self.temp_dir)))\n    def test_no_log_files_to_backup(self):\n        # Test behavior when no log files are present in the directory.\n        empty_dir = tempfile.mkdtemp()\n        result = task_func(empty_dir, self.temp_backup_dir)\n        self.assertEqual(result, \"No logs found to backup\")\n        shutil.rmtree(empty_dir)\n    def test_non_log_files_remain(self):\n        # Ensure that non-log files are not deleted or included in the backup.\n        backup_path = task_func(self.temp_dir, self.temp_backup_dir)\n        self.assertEqual(len(glob.glob(os.path.join(self.temp_dir, '*.txt'))), 5)  # Check only non-log files remain\n    def test_handle_non_existing_directory(self):\n        # Verify that a FileNotFoundError is raised for a non-existing source directory.\n        with self.assertRaises(FileNotFoundError):\n            task_func('/non/existing/directory', self.temp_backup_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scan a directory for log files and count the occurrences of each IP address in all files. The function utilizes a regular expression pattern to identify IP addresses in the log files.\nThe function should output with:\n    dict: A dictionary with IP addresses as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n```",
        "gt": "import re\nimport os\nfrom collections import Counter\ndef task_func(folder_path: str) -> dict:\n    IP_REGEX = re.compile('\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}')\n    counter = Counter()\n    for filename in os.listdir(folder_path):\n        if filename.endswith('.log'):\n            with open(os.path.join(folder_path, filename)) as file:\n                content = file.read()\n                ips = re.findall(IP_REGEX, content)\n                counter.update(ips)\n    return dict(counter)",
        "test": "import unittest\nimport tempfile\nimport doctest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_data_dir = tempfile.mkdtemp()\n        self.log_text_1 = \"Request from 102.168.0.1\\nRequest from 118.128.1.11\\nRequest from 175.193.115.67\"\n        self.log_text_2 = \"Request from 189.56.7.1\\nRequest from 128.45.234.88\\nRequest from 985.123.1.1\"\n        self.log_text_3 = \"Request from localhost\\nRequest from remote\"\n        self.log_text_4 = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec odio. Sed non posuere.\"\n        self.log_text_5 = \"Request from 181.94.113.34\\nMemory usage: 50\"\n    def test_case_1(self):\n        \"\"\"Tests with 5 log files containing various IP addresses.\"\"\"\n        with open(os.path.join(self.test_data_dir, \"file1.log\"), 'w') as file:\n            file.write(self.log_text_1)\n        with open(os.path.join(self.test_data_dir, \"file2.log\"), 'w') as file:\n            file.write(self.log_text_2)\n        with open(os.path.join(self.test_data_dir, \"file3.log\"), 'w') as file:\n            file.write(self.log_text_3)\n        with open(os.path.join(self.test_data_dir, \"file4.log\"), 'w') as file:\n            file.write(self.log_text_4)\n        with open(os.path.join(self.test_data_dir, \"file5.log\"), 'w') as file:\n            file.write(self.log_text_5)\n        result = task_func(self.test_data_dir)\n        expected = {\n            '189.56.7.1': 1, \n            '128.45.234.88': 1, \n            '985.123.1.1': 1, \n            '102.168.0.1': 1, \n            '118.128.1.11': 1, \n            '175.193.115.67': 1, \n            '181.94.113.34': 1\n        }\n        self.assertDictEqual(result, expected)\n    \n    def test_case_2(self):\n        \"\"\"Tests with an empty directory.\"\"\"\n        empty_dir = os.path.join(self.test_data_dir, \"empty_dir\")\n        os.makedirs(empty_dir, exist_ok=True)\n        result = task_func(empty_dir)\n        self.assertDictEqual(result, {})\n    \n    def test_case_3(self):\n        \"\"\"Tests with a directory containing only non-log files.\"\"\"\n        non_log_dir = os.path.join(self.test_data_dir, \"non_log_dir\")\n        os.makedirs(non_log_dir, exist_ok=True)\n        with open(os.path.join(non_log_dir, \"file.txt\"), 'w') as file:\n            file.write(\"192.168.0.1\\n192.168.0.2\")\n        result = task_func(non_log_dir)\n        self.assertDictEqual(result, {})\n    \n    def test_case_4(self):\n        \"\"\"Tests with log files not containing any IP addresses.\"\"\"\n        no_ip_dir = os.path.join(self.test_data_dir, \"no_ip_dir\")\n        os.makedirs(no_ip_dir, exist_ok=True)\n        with open(os.path.join(no_ip_dir, \"file.log\"), 'w') as file:\n            file.write(\"This is a log file without any IP addresses.\")\n        result = task_func(no_ip_dir)\n        self.assertDictEqual(result, {})\n    \n    def test_case_5(self):\n        \"\"\"Tests with log files containing IP addresses and other numbers.\"\"\"\n        mix_num_dir = os.path.join(self.test_data_dir, \"mix_num_dir\")\n        os.makedirs(mix_num_dir, exist_ok=True)\n        with open(os.path.join(mix_num_dir, \"file.log\"), 'w') as file:\n            file.write(\"192.168.0.1\\n255.255.255.255\\n10.0.0.1\\n12345\")\n        result = task_func(mix_num_dir)\n        expected = {\n            '192.168.0.1': 1,\n            '10.0.0.1': 1,\n            '255.255.255.255': 1,\n        }\n        self.assertDictEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a time series with a given seasonality from the start UTC time to the end UTC time with a given step, and plot the time series with the seasonality.\nThe function should output with:\n    matplotlib.pyplot.Axes: A plot of the generated 'Time Series with Seasonality',\n    with 'Timestamp' on x-axis and 'Value' on y-axis.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n```",
        "gt": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, amplitude, period, seed=0):\n    np.random.seed(seed)\n\n    if period <= 0 or step < 1:\n        raise ValueError(\"Invalid input values\")\n\n    COLUMNS = [\"Timestamp\", \"Value\"]\n\n    timestamps = np.arange(start_time, end_time, step)\n    df = pd.DataFrame(columns=COLUMNS)\n\n    if amplitude == 0:\n        values = [0] * len(timestamps)\n    else:\n        values = np.random.normal(size=len(timestamps))\n\n    data = []\n    for i, ts in enumerate(timestamps):\n        dt = datetime.utcfromtimestamp(ts / 1000).strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n        value = values[i] + amplitude * np.sin(2 * np.pi * ts / period)\n        data.append([dt, value])\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    ax = df.plot(x=\"Timestamp\", y=\"Value\", title=\"Time Series with Seasonality\")\n    ax.set_ylabel(\"Value\")\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic properties\n        test_cases = [\n            (0, 10000, 100, 1, 1000),\n            (0, 100000, 1000, 2, 5000),\n            (0, 10000, 100, 0.5, 1000),\n            (0, 10000, 100, 1, 500),\n            (0, 10000, 500, 1, 1000),\n        ]\n        for start_time, end_time, step, amplitude, period in test_cases:\n            with self.subTest(\n                start_time=start_time,\n                end_time=end_time,\n                step=step,\n                amplitude=amplitude,\n                period=period,\n            ):\n                ax = task_func(start_time, end_time, step, amplitude, period)\n                self.assertIsInstance(ax, plt.Axes)\n                self.assertEqual(ax.get_title(), \"Time Series with Seasonality\")\n                self.assertEqual(ax.get_xlabel(), \"Timestamp\")\n                self.assertEqual(ax.get_ylabel(), \"Value\")\n    def test_case_2(self):\n        # Test large step\n        # Plot should still behave as expected even when step > (end_time - start_time)\n        ax = task_func(0, 10000, 200000, 1, 1000)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Time Series with Seasonality\")\n        self.assertEqual(ax.get_xlabel(), \"Timestamp\")\n        self.assertEqual(ax.get_ylabel(), \"Value\")\n    def test_case_3(self):\n        # Test handling invalid input types - period\n        with self.assertRaises(ValueError):\n            task_func(0, 10000, 100, 1, 0)\n        with self.assertRaises(ValueError):\n            task_func(0, 10000, 100, 1, -1)\n    def test_case_4(self):\n        # Test handling invalid input types - step\n        with self.assertRaises(ValueError):\n            task_func(0, 10000, -100, 1, 1000)\n        with self.assertRaises(ValueError):\n            task_func(0, 10000, 0, 1, 1000)\n    def test_case_5(self):\n        # Test plot data integrity\n        ax = task_func(0, 10000, 100, 1, 1000)\n        xy_data = ax.get_lines()[0].get_xydata()\n        expected_length = (10000 - 0) // 100\n        self.assertEqual(len(xy_data), expected_length)\n    def test_case_6(self):\n        # Test random seed\n        ax1 = task_func(0, 10000, 100, 1, 1000, seed=42)\n        xy_data1 = ax1.get_lines()[0].get_xydata()\n        ax2 = task_func(0, 10000, 100, 1, 1000, seed=42)\n        xy_data2 = ax2.get_lines()[0].get_xydata()\n        ax3 = task_func(0, 10000, 100, 1, 1000, seed=43)\n        xy_data3 = ax3.get_lines()[0].get_xydata()\n        self.assertTrue(\n            np.array_equal(xy_data1, xy_data2),\n            \"Results should be the same with the same seed\",\n        )\n        self.assertFalse(\n            np.array_equal(xy_data1, xy_data3),\n            \"Results should be different with different seeds\",\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a list of hexadecimal string keys, this function selects one at random, converts it into a floating-point number, and then computes its MD5 hash. An optional seed parameter allows for deterministic random choices for testing purposes.\nThe function should raise the exception for: ValueError: If contains invalid hexadecimal strings.\nThe function should output with:\n    str: The MD5 hash of the floating-point number derived from the randomly selected hexadecimal string.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n```",
        "gt": "import hashlib\nimport random\nimport struct\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_keys=KEYS, seed=42):\n\n    random.seed(seed)\n    hex_key = random.choice(hex_keys)\n\n    try:\n        float_num = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    except ValueError as e:\n        raise ValueError(\"Invalid hexadecimal string in hex_keys.\") from e\n\n    hashed_float = hashlib.md5(str(float_num).encode()).hexdigest()\n    return hashed_float",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_normal_functionality(self):\n        \"\"\"Test the function with default parameters.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, str)\n    def test_custom_keys_list(self):\n        \"\"\"Test the function with a custom list of hexadecimal keys.\"\"\"\n        custom_keys = ['1A2FC614', '1B0FC614', '1C9FC614']\n        result = task_func(hex_keys=custom_keys)\n        self.assertIsInstance(result, str)\n    def test_empty_key_list(self):\n        \"\"\"Test the function with an empty list to check for error handling.\"\"\"\n        with self.assertRaises(IndexError):\n            task_func(hex_keys=[])\n    def test_invalid_hexadecimal(self):\n        \"\"\"Test the function with an invalid hexadecimal string.\"\"\"\n        invalid_keys = ['ZZZ', '4A0FC614']\n        with self.assertRaises(ValueError):\n            task_func(hex_keys=invalid_keys)\n    def test_consistent_output_with_same_seed(self):\n        \"\"\"Test that the same seed returns the same result.\"\"\"\n        result1 = task_func(seed=99)\n        result2 = task_func(seed=99)\n        self.assertEqual(result1, result2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform a chi-square test of independence of variables in a contingency table. This function takes a DataFrame containing categorical data and two column names, then constructs a contingency table from the two categorical columns and performs a chi-square test of independence. It returns the p-value of the test, which indicates the probability of observing the data if the null hypothesis (independence of the variables) is true. >>> np.random.seed(42) >>> data = pd.DataFrame({ ...     'a': np.random.choice(['A', 'B'], size=100), ...     'b': np.random.choice(['X', 'Y'], size=100) ... }) >>> task_func(data, 'a', 'b') 1.0\nThe function should raise the exception for: ValueError: If 'data' is empty, if 'col1' or 'col2' are not in 'data', if one or both of the columns do not have multiple categories, or if some categories have less than 5 observations (violating the chi-square test assumptions). TypeError: If one or both of the columns contain non-categorical data.\nThe function should output with:\n    float: The p-value of the chi-square test of independence.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ndef task_func(data, col1, col2):\n    # Check if DataFrame is empty\n    if data.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n\n    # Check if specified columns exist\n    if col1 not in data or col2 not in data:\n        raise ValueError(f\"One or both of the columns '{col1}' and '{col2}' do not exist in the DataFrame.\")\n\n    # Check for non-categorical data (numerical values)\n    if np.issubdtype(data[col1].dtype, np.number) or np.issubdtype(data[col2].dtype, np.number):\n        raise TypeError(\"One or both of the columns contain non-categorical data. The chi-square test requires categorical data.\")\n\n    # Check for single category (no variability)\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories. The chi-square test requires variability in data.\")\n\n    # Check for small counts in numerous categories\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if (contingency_table < 5).any().any():\n        raise ValueError(\"Some categories have less than 5 observations. This violates the assumptions of the chi-square test.\")\n\n    # Perform the chi-square test\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    return p",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        np.random.seed(12)\n        data = pd.DataFrame({\n            'Var1': np.random.choice(['A', 'B'], size=100),\n            'Var2': np.random.choice(['X', 'Y'], size=100)\n        })\n        p_value = task_func(data, 'Var1', 'Var2')\n        self.assertAlmostEqual(p_value, 0.5, delta=0.1)\n    def test_case_2(self):\n        data = pd.DataFrame({\n            'Var1': ['A'] * 50 + ['B'] * 50,\n            'Var2': ['X'] * 25 + ['Y'] * 25 + ['X'] * 25 + ['Y'] * 25\n        })\n        p_value = task_func(data, 'Var1', 'Var2')\n        self.assertAlmostEqual(p_value, 1, delta=0.1)\n    def test_case_5(self):\n        data = pd.DataFrame({\n            'Var1': np.random.choice(['A', 'B', 'C', 'D'], size=200),\n            'Var2': np.random.choice(['W', 'X', 'Y', 'Z'], size=200)\n        })\n        p_value = task_func(data, 'Var1', 'Var2')\n        self.assertTrue(0 <= p_value <= 1)\n    def test_edge_case_empty_dataframe(self):\n        data = pd.DataFrame(columns=['Var1', 'Var2'])\n        with self.assertRaises(ValueError):\n            task_func(data, 'Var1', 'Var2')\n    def test_edge_case_non_categorical(self):\n        data = pd.DataFrame({\n            'Var1': np.random.rand(100),\n            'Var2': np.random.rand(100)\n        })\n        with self.assertRaises(TypeError):\n            task_func(data, 'Var1', 'Var2')\n    def test_edge_case_single_category(self):\n        data = pd.DataFrame({\n            'Var1': ['A'] * 100,\n            'Var2': ['X'] * 100\n        })\n        with self.assertRaises(ValueError):\n            task_func(data, 'Var1', 'Var2')\n    def test_edge_case_large_categories_small_counts(self):\n        categories = [f\"Cat_{i}\" for i in range(1, 11)]\n        data = pd.DataFrame({\n            'Var1': np.random.choice(categories, size=20),\n            'Var2': np.random.choice(categories, size=20)\n        })\n        with self.assertRaises(ValueError):\n            task_func(data, 'Var1', 'Var2')\n    def test_col_not_in_df(self):\n        data = pd.DataFrame({\n            'Var1': ['A'] * 100,\n            'Var2': ['X'] * 100\n        })\n        with self.assertRaises(ValueError):\n            task_func(data, 'a', 'Var2')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads a CSV file and counts the most common words in the file. This function opens the specified CSV file using the provided delimiter, reads its contents, and counts the frequency of each word. It returns a list of tuples, each containing a word and its frequency, sorted by frequency in descending order.\nNote that: The function assumes that each cell in the CSV contains a single word.\nThe function should output with:\n    list of tuple: A list of tuples where each tuple contains a word and its count,\n    sorted by count in descending order.\nYou should write self-contained code starting with:\n```\nimport csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n```",
        "gt": "import csv\nfrom collections import Counter\nimport operator\ndef task_func(csv_file, csv_delimiter):\n    words = []\n\n    with open(csv_file, 'r') as f:\n        reader = csv.reader(f, delimiter=csv_delimiter)\n        for row in reader:\n            words.extend(row)\n\n    word_counter = Counter(words)\n    most_common_words = sorted(word_counter.items(), key=operator.itemgetter(1), reverse=True)\n\n    return most_common_words",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\" Test that the function returns a list. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1,word2,word1\")):\n            result = task_func('dummy_path.csv', ',')\n        self.assertIsInstance(result, list)\n    def test_tuple_structure(self):\n        \"\"\" Test that each element in the list is a tuple with two elements. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1,word2,word1\")):\n            result = task_func('dummy_path.csv', ',')\n        for item in result:\n            self.assertIsInstance(item, tuple)\n            self.assertEqual(len(item), 2)\n    def test_word_count(self):\n        \"\"\" Test if the function correctly counts the occurrences of words. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1\\nword2\\nword1\")):\n            result = task_func('dummy_path.csv', ',')\n        self.assertIn(('word1', 2), result)\n        self.assertIn(('word2', 1), result)\n    def test_empty_file(self):\n        \"\"\" Test the function's behavior with an empty CSV file. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"\")):\n            result = task_func('dummy_path.csv', ',')\n        self.assertEqual(len(result), 0)\n    def test_no_repeated_words(self):\n        \"\"\" Test the function's behavior with no repeated words. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1,word2,word3\")):\n            result = task_func('dummy_path.csv', ',')\n        expected_counts = {('word1', 1), ('word2', 1), ('word3', 1)}\n        self.assertTrue(all(pair in expected_counts for pair in result))\n    def test_custom_delimiter(self):\n        \"\"\" Test the function's behavior with a custom delimiter. \"\"\"\n        with patch('builtins.open', mock_open(read_data=\"word1;word2;word1\")):\n            result = task_func('dummy_path.csv', ';')\n        self.assertIn(('word1', 2), result)\n        self.assertIn(('word2', 1), result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function generates a CSV file response from a Django HttpRequest. It constructs a CSV file using the provided header and CSV data, and sends it back as a Django FileResponse. This function is particularly useful in scenarios where you need to provide a downloadable CSV file in response to a user request on a Django web application.\nThe function should output with:\n    FileResponse: A Django FileResponse object containing the CSV data as an attachment.\nYou should write self-contained code starting with:\n```\nimport csv\nimport io\nfrom django.http import HttpRequest, FileResponse\ndef task_func(request, header, csv_data):\n```",
        "gt": "import csv\nimport io\nfrom django.http import HttpRequest, FileResponse\ndef task_func(request, header, csv_data):\n    csv_io = io.StringIO()\n    writer = csv.writer(csv_io)\n    writer.writerow(header)\n    writer.writerows(csv_data)\n    csv_io.seek(0)\n\n    response = FileResponse(csv_io, as_attachment=True, filename='data.csv')\n    response['Content-Type'] = 'text/csv'\n\n    return response",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom django.http import HttpRequest, FileResponse\nfrom django.conf import settings\nif not settings.configured:\n    settings.configure()\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Prepare test data\n        self.request = HttpRequest()\n        self.header = ['id', 'name', 'email']\n        self.csv_data = [['1', 'John Doe', 'john@example.com'], ['2', 'Jane Doe', 'jane@example.com']]\n    @patch('csv.writer')\n    @patch('io.StringIO')\n    def test_response_type(self, mock_string_io, mock_csv_writer):\n        # Test if the response is of type FileResponse\n        response = task_func(self.request, self.header, self.csv_data)\n        self.assertIsInstance(response, FileResponse)\n    @patch('csv.writer')\n    @patch('io.StringIO')\n    def test_response_status_code(self, mock_string_io, mock_csv_writer):\n        # Test if the response has status code 200\n        response = task_func(self.request, self.header, self.csv_data)\n        self.assertEqual(response.status_code, 200)\n    @patch('csv.writer')\n    @patch('io.StringIO')\n    def test_content_type(self, mock_string_io, mock_csv_writer):\n        # Test if the Content-Type header is set to 'text/csv'\n        response = task_func(self.request, self.header, self.csv_data)\n        self.assertEqual(response['Content-Type'], 'text/csv')\n    @patch('csv.writer')\n    @patch('io.StringIO')\n    def test_attachment_filename(self, mock_string_io, mock_csv_writer):\n        # Test if the Content-Disposition is set correctly for file download\n        response = task_func(self.request, self.header, self.csv_data)\n        self.assertIn('attachment; filename=\"data.csv\"', response['Content-Disposition'])\n    @patch('csv.writer')\n    @patch('io.StringIO')\n    def test_csv_file_content(self, mock_string_io, mock_csv_writer):\n        # Test if csv.writer methods are called to write the header and rows correctly\n        response = task_func(self.request, self.header, self.csv_data)\n        mock_csv_writer.return_value.writerow.assert_called_with(self.header)\n        mock_csv_writer.return_value.writerows.assert_called_with(self.csv_data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate Z-scores for numeric columns in a DataFrame and draw a histogram for each column. - Missing values are replaced by the column's average. - The histograms are plotted with 10 bins.\nThe function should output with:\n    tuple:\n    1. pandas.DataFrame: A DataFrame with computed z-scores.\n    2. list: A list of Axes objects representing the histograms of the numeric columns.\nYou should write self-contained code starting with:\n```\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "from scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    # Fill missing values with column's average\n    df = df.fillna(df.mean(axis=0))\n    # Compute Z-scores\n    df = df.apply(zscore)\n    # Plot histograms for each numeric column\n    axes = df.hist(grid=False, bins=10, layout=(1, df.shape[1]))\n    plt.tight_layout()\n    return df, axes",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame(\n            {\n                \"col1\": [1, 7, 3],\n                \"col2\": [4, 5, 7],\n                \"col3\": [None, None, None],\n            }\n        )\n        zscores, plots = task_func(df)\n        self.assertAlmostEqual(zscores.mean().mean(), 0.0, places=6)\n        self.assertEqual(len(plots[0]), 3)\n    def test_case_2(self):\n        df = pd.DataFrame(\n            {\n                \"col1\": [None, None, 3],\n                \"col2\": [None, 5, 7],\n                \"col3\": [8, 6, 4],\n            }\n        )\n        zscores, plots = task_func(df)\n        self.assertAlmostEqual(zscores.mean().mean(), 0.0, places=6)\n        self.assertEqual(len(plots[0]), 3)\n    def test_case_3(self):\n        df = pd.DataFrame(\n            {\n                \"col1\": [None, 17, 11, None],\n                \"col2\": [0, 4, 15, 27],\n                \"col3\": [7, 9, 3, 8],\n            }\n        )\n        # Expected solutions\n        expected_df = df.copy()\n        expected_df = expected_df.fillna(expected_df.mean(axis=0))\n        expected_df = expected_df.apply(zscore)\n        # Function execution\n        zscores, plots = task_func(df)\n        self.assertAlmostEqual(zscores.mean().mean(), 0.0, places=6)\n        self.assertEqual(len(plots[0]), 3)\n        pd.testing.assert_frame_equal(zscores, expected_df)\n    def test_case_4(self):\n        df = pd.DataFrame(\n            {\n                \"col1\": [1, 7, 3, None],\n                \"col2\": [4, 5, 7, 2],\n            }\n        )\n        zscores, plots = task_func(df)\n        self.assertAlmostEqual(zscores.mean().mean(), 0.0, places=6)\n        self.assertEqual(len(plots[0]), 2)\n    def test_case_5(self):\n        df = pd.DataFrame(\n            {\n                \"col1\": [1, 2, 3, 4, 5],\n                \"col2\": [None, None, None, None, None],\n            }\n        )\n        zscores, plots = task_func(df)\n        self.assertAlmostEqual(zscores.mean().mean(), 0.0, places=6)\n        self.assertEqual(len(plots[0]), 2)\n    def test_case_6(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [np.nan, np.nan, np.nan],\n                \"B\": [np.nan, np.nan, np.nan],\n                \"C\": [np.nan, np.nan, np.nan],\n            }\n        )\n        zscores, plots = task_func(df)\n        self.assertTrue(zscores.isnull().all().all())\n        self.assertEqual(len(plots[0]), 3)\n    def test_case_7(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 2.5, 3, 4.5, 5],\n                \"B\": [5, 4.5, np.nan, 2, 1.5],\n                \"C\": [2.5, 3, 4, 5.5, 6],\n            }\n        )\n        zscores, plots = task_func(df)\n        self.assertAlmostEqual(zscores.mean().mean(), 0.0, places=6)\n        self.assertEqual(len(plots[0]), 3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a base64-encoded JSON string, stores the data in a CSV file, and returns the path of the file.\nThe function should output with:\n    file_path (str): The path of the file.\nYou should write self-contained code starting with:\n```\nimport json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n```",
        "gt": "import json\nimport csv\nimport os\nimport base64\ndef task_func(raw_string, filename, output_dir):\n    # Decode the string and load the data\n    decoded_string = base64.b64decode(raw_string).decode('utf-8')\n    data = json.loads(decoded_string)\n\n    # Prepare the output directory\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Prepare the file path\n    file_path = os.path.join(output_dir, f'{filename}.csv')\n\n    # Save the data to the file\n    with open(file_path, 'w', newline='') as f:\n        writer = csv.writer(f)\n        for key, value in data.items():\n            writer.writerow([key, value])\n\n    return file_path",
        "test": "import unittest\nimport shutil\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        if os.path.exists('./output'):\n            shutil.rmtree('./output')\n    \n    def test_case_1(self):\n        raw_string = 'eyJrZXkiOiAiVmFsdWUifQ=='\n        filename = 'data'\n        output_dir = './output'\n        expected = './output/data.csv'\n        self.assertEqual(task_func(raw_string, filename, output_dir), expected)\n        with open(expected, 'r') as f:\n            self.assertEqual(f.read(), 'key,Value\\n')\n        os.remove(expected)\n    \n    def test_case_2(self):\n        string_before = \"\"\"{\"key\": \"hello\"}\"\"\"\n        raw_string = base64.b64encode(string_before.encode('utf-8')).decode('utf-8')\n        filename = 'data'\n        output_dir = './output'\n        expected = './output/data.csv'\n        self.assertEqual(task_func(raw_string, filename, output_dir), expected)\n        with open(expected, 'r') as f:\n            self.assertEqual(f.read(), 'key,hello\\n')\n        os.remove(expected)\n    def test_case_3(self):\n        string_before = \"\"\"{\"key\": \"hello\", \"key2\": \"world\"}\"\"\"\n        raw_string = base64.b64encode(string_before.encode('utf-8')).decode('utf-8')\n        filename = 'data'\n        output_dir = './output'\n        expected = './output/data.csv'\n        self.assertEqual(task_func(raw_string, filename, output_dir), expected)\n        with open(expected, 'r') as f:\n            self.assertEqual(f.read(), 'key,hello\\nkey2,world\\n')\n        os.remove(expected)\n    def test_case_4(self):\n        string_before = \"\"\"{\"key\": \"hello\", \"key2\": \"world\", \"key3\": \"!\"}\"\"\"\n        raw_string = base64.b64encode(string_before.encode('utf-8')).decode('utf-8')\n        filename = 'data'\n        output_dir = './output'\n        expected = './output/data.csv'\n        self.assertEqual(task_func(raw_string, filename, output_dir), expected)\n        with open(expected, 'r') as f:\n            self.assertEqual(f.read(), 'key,hello\\nkey2,world\\nkey3,!\\n')\n        os.remove(expected)\n    def test_case_5(self):\n        string_before = \"\"\"{\"key\": \"hello\", \"key2\": \"world\", \"key3\": \"!\", \"key4\": \"test\"}\"\"\"\n        raw_string = base64.b64encode(string_before.encode('utf-8')).decode('utf-8')\n        filename = 'data'\n        output_dir = './output'\n        expected = './output/data.csv'\n        self.assertEqual(task_func(raw_string, filename, output_dir), expected)\n        with open(expected, 'r') as f:\n            self.assertEqual(f.read(), 'key,hello\\nkey2,world\\nkey3,!\\nkey4,test\\n')\n        os.remove(expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a spiral on the polar diagram 'ax' with the specified number of turns 'num_turns'. The spiral starts at the center and expands outward with each turn. The radial ticks on the plot are positioned at intervals corresponding to the number of turns multiplied by 45 degrees.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified Axes object with the spiral plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\ndef task_func(ax, num_turns):\n```",
        "gt": "import numpy as np\nimport math\ndef task_func(ax, num_turns):\n\n    r = np.linspace(0, num_turns * 2 * math.pi, 1000)\n    theta = r\n\n    ax.plot(theta, r)\n    ax.set_rlabel_position(num_turns * 45)\n\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots(subplot_kw={'polar': True})\n    def test_positive_turns(self):\n        \"\"\" Test the function with positive number of turns \"\"\"\n        num_turns = 3\n        ax_modified = task_func(self.ax, num_turns)\n        self.assertEqual(len(ax_modified.lines), 1)  # Checking if a spiral is plotted\n        self.assertEqual(ax_modified.get_rlabel_position(), num_turns * 45)  # Radial label position\n    def test_zero_turns(self):\n        \"\"\" Test the function with zero turns \"\"\"\n        ax_modified = task_func(self.ax, 0)\n        self.assertEqual(len(ax_modified.lines), 1)  # A line should still be plotted\n    def test_negative_turns(self):\n        \"\"\" Test the function with negative number of turns \"\"\"\n        ax_modified = task_func(self.ax, -3)\n        self.assertEqual(len(ax_modified.lines), 1)  # A line should still be plotted\n    def test_large_number_of_turns(self):\n        \"\"\" Test the function with a large number of turns \"\"\"\n        ax_modified = task_func(self.ax, 100)\n        self.assertEqual(len(ax_modified.lines), 1)  # A line should still be plotted\n    def test_fractional_turns(self):\n        \"\"\" Test the function with fractional number of turns \"\"\"\n        ax_modified = task_func(self.ax, 2.5)\n        self.assertEqual(len(ax_modified.lines), 1)  # A line should still be plotted",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a Pandas DataFrame with random numeric values, standardize it with the standard scaler from sklearn.\nThe function should output with:\n    df_standardized (DataFrame): The standardized DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Standardize data\n    scaler = StandardScaler()\n    df_standardized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n    return df_standardized",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n        df_standardized = task_func(df)\n        self.assertAlmostEqual(df_standardized['a'].mean(), 0)\n        self.assertAlmostEqual(df_standardized['a'].std(), 1.224744871391589)\n    def test_case_2(self):\n        df = pd.DataFrame({'a': [1, 1, 1], 'b': [1, 1, 1]})\n        df_standardized = task_func(df)\n        self.assertAlmostEqual(df_standardized['a'].mean(), 0)\n        self.assertAlmostEqual(df_standardized['a'].std(), 0)\n    def test_case_3(self):\n        df = pd.DataFrame({'a': [1, 0, -1], 'b': [0, 1, 0]})\n        df_standardized = task_func(df)\n        print(df_standardized)\n        self.assertAlmostEqual(df_standardized['a'].mean(), 0)\n        self.assertAlmostEqual(df_standardized['a'].std(), 1.224744871391589)\n    def test_case_4(self):\n        df = pd.DataFrame({'z': [1, 2, 3], 'y': [4, 5, 6]})\n        df_standardized = task_func(df)\n        self.assertAlmostEqual(df_standardized['z'].mean(), 0)\n        self.assertAlmostEqual(df_standardized['z'].std(), 1.224744871391589)\n    def test_case_5(self):\n        df = pd.DataFrame({'z': [1, 2, 3], 'y': [4, 5, 6]})\n        df_standardized = task_func(df)\n        self.assertAlmostEqual(df_standardized['y'].mean(), 0)\n        self.assertAlmostEqual(df_standardized['y'].std(), 1.224744871391589)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots a histogram for a specified column of a pandas DataFrame and overlays it with a fitted normal distribution curve.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The matplotlib Axes object with the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(df, column, bins=30, density=True, alpha=0.6, color=\"g\", seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    data = df[column]\n    mu, std = norm.fit(data)\n\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=bins, density=density, alpha=alpha, color=color)\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, \"k\", linewidth=2)\n\n    title = f\"Normal Fit for '{column}'\"\n    ax.set_title(title)\n    ax.set_ylabel(\"Density\")\n    ax.set_xlabel(column)\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n    def test_data_correctness(self):\n        \"\"\"Tests if the normal distribution parameters accurately represent the data's distribution.\"\"\"\n        mean, std_dev = 0, 1\n        df = pd.DataFrame({\"F\": np.random.normal(mean, std_dev, 5000)})\n        ax = task_func(df, \"F\")\n        line = ax.lines[\n            0\n        ]  # Assuming the normal distribution line is the first line object in the plot\n        x_data = line.get_xdata()\n        y_data = line.get_ydata()\n        # The peak of the normal distribution curve should be at the mean\n        estimated_mean = x_data[np.argmax(y_data)]\n        self.assertAlmostEqual(\n            estimated_mean,\n            mean,\n            places=1,\n            msg=\"The calculated mean does not match the expected mean.\",\n        )\n    def test_bins_parameter(self):\n        \"\"\"Verifies that changing the number of bins affects the plot.\"\"\"\n        df = pd.DataFrame({\"B\": np.random.normal(0, 1, 100)})\n        ax_default_bins = task_func(df, \"B\")\n        ax_more_bins = task_func(df, \"B\", bins=50)\n        self.assertNotEqual(\n            ax_default_bins.patches,\n            ax_more_bins.patches,\n            \"Different 'bins' parameters should result in different histograms.\",\n        )\n    def test_alpha_parameter(self):\n        \"\"\"Checks if the alpha parameter correctly sets the transparency.\"\"\"\n        df = pd.DataFrame({\"C\": np.random.normal(0, 1, 100)})\n        ax = task_func(df, \"C\", alpha=0.1)\n        self.assertLess(\n            ax.patches[0].get_alpha(),\n            0.5,\n            \"The alpha parameter should control the transparency of histogram bars.\",\n        )\n    def test_density_parameter(self):\n        \"\"\"Ensures the density parameter properly normalizes the histogram.\"\"\"\n        df = pd.DataFrame({\"D\": np.random.normal(0, 1, 100)})\n        ax = task_func(df, \"D\", density=False)\n        total_bar_area = sum((p.get_width() * p.get_height() for p in ax.patches))\n        self.assertNotEqual(\n            total_bar_area,\n            1,\n            \"With 'density=False', the histogram should not be normalized to form a probability density.\",\n        )\n    def test_color_parameter(self):\n        \"\"\"Validates that the histogram bars use the specified color.\"\"\"\n        df = pd.DataFrame({\"E\": np.random.normal(0, 1, 100)})\n        ax = task_func(\n            df, \"E\", color=\"blue\", alpha=0.6\n        )  # Match alpha value with the function's default or specified value\n        for patch in ax.patches:\n            self.assertEqual(\n                patch.get_facecolor(),\n                colors.to_rgba(\"blue\", alpha=0.6),\n                \"The bars should match the specified color.\",\n            )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a 2D numeric array (matrix) of a given dimension with random integers between 1 and 100, and a flat list of all elements in the matrix.\nThe function should output with:\n    tuple: A tuple containing:\n    A 2D numpy array of the given dimension with random integers between 1 and 100.\n    A flat list of all elements in the matrix.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n```",
        "gt": "import numpy as np\nimport itertools\ndef task_func(dimension, seed=42):\n    np.random.seed(seed)  # Ensure reproducible results\n    \n    if dimension <= 0:\n        raise ValueError(\"The dimension must be a positive integer\")\n    \n    matrix = np.random.randint(1, 101, size=(dimension, dimension))\n    flat_list = matrix.flatten().tolist()\n    \n    combinations = list(itertools.combinations(flat_list, 2))\n    \n    return matrix, flat_list",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_positive_dimension(self):\n        \"\"\"\n        Test Case 1: Test with a positive dimension\n        Input: 3 (a positive integer)\n        Expected Output: A 3x3 matrix and a flat list of 9 elements, with all elements between 1 and 100.\n        \"\"\"\n        dimension = 3\n        matrix, flat_list = task_func(dimension)\n        self.assertEqual(matrix.shape, (dimension, dimension))\n        self.assertEqual(len(flat_list), dimension ** 2)\n        self.assertEqual(flat_list , [52, 93, 15, 72, 61, 21, 83, 87, 75])\n        \n    def test_dimension_one(self):\n        \"\"\"\n        Test Case 2: Test with the smallest positive dimension\n        Input: 1 (smallest positive integer for dimension)\n        Expected Output: A 1x1 matrix and a flat list of 1 element, with the element between 1 and 100.\n        \"\"\"\n        dimension = 1\n        matrix, flat_list = task_func(dimension)\n        self.assertEqual(matrix.shape, (dimension, dimension))\n        self.assertEqual(len(flat_list), dimension ** 2)\n        self.assertEqual(flat_list , [52])\n    def test_large_dimension(self):\n        \"\"\"\n        Test Case 3: Test with a large dimension\n        Input: 10 (a large positive integer)\n        Expected Output: A 10x10 matrix and a flat list of 100 elements, with all elements between 1 and 100.\n        \"\"\"\n        dimension = 10\n        matrix, flat_list = task_func(dimension, 1)\n        self.assertEqual(matrix.shape, (dimension, dimension))\n        self.assertEqual(len(flat_list), dimension ** 2)\n        self.assertEqual(flat_list[:10] , [38, 13, 73, 10, 76, 6, 80, 65, 17, 2])\n    def test_zero_dimension(self):\n        \"\"\"\n        Test Case 4: Test with a dimension of zero (invalid input)\n        Input: 0 (zero is an invalid input for dimension)\n        Expected Output: ValueError\n        \"\"\"\n        dimension = 0\n        with self.assertRaises(ValueError):\n            task_func(dimension)\n    def test_negative_dimension(self):\n        \"\"\"\n        Test Case 5: Test with a negative dimension (invalid input)\n        Input: -3 (a negative integer, invalid input for dimension)\n        Expected Output: ValueError\n        \"\"\"\n        dimension = -3\n        with self.assertRaises(ValueError):\n            task_func(dimension)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the number of words in multiple dictionary files (.txt) in a specific directory, export the counts to a CSV file, and then return the total number of words.\nNote that: Header for the csv output file is \"Word\", \"Count\" Return 0 if the input invalid or error raised\nThe function should output with:\n    int: total number of words in .txt files\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport os\nimport csv\n# Constants\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory):\n```",
        "gt": "from collections import Counter\nimport os\nimport csv\n# Constants\nFILE_DIR = './yourdictfiles/'\ndef task_func(output_file, test_directory):\n    total_words = 0\n    try:\n        word_counts = Counter()\n        for file_name in os.listdir(test_directory):\n            if not file_name.endswith('.txt'):\n                continue\n            with open(os.path.join(test_directory, file_name), 'r') as file:\n                words = file.read().split()\n                word_counts.update(words)\n\n        with open(output_file, 'w') as file:\n            writer = csv.writer(file)\n            writer.writerow(['Word', 'Count'])\n            writer.writerows(word_counts.items())\n        \n        for word in word_counts:\n            total_words += word_counts[word]\n    except Exception as e:\n        print(e)\n    return total_words",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nfrom collections import Counter\nfrom faker import Faker\nimport shutil\n# Blackbox test cases\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_directory = './testdir_f270'\n        os.makedirs(self.test_directory, exist_ok=True)\n        \n        self.output_file = 'test_output.csv'\n        self.list_files = []\n    # Function to create fake dictionary files\n    def create_fake_dict_files(self, directory, num_files, num_words):\n        fake = Faker()\n        for _ in range(num_files):\n            file_name = fake.file_name(extension='txt')\n            self.list_files.append(os.path.join(directory, file_name))\n            with open(os.path.join(directory, file_name), 'w') as file:\n                words = [fake.word() for _ in range(num_words)]\n                file.write(' '.join(words))\n    \n    #remove fake files\n    def remove_files(self):\n        for fn in self.list_files:\n            if os.path.exists(fn):\n               os.remove(fn)\n        self.list_files = []\n    def tearDown(self):\n        # Remove the test_output.json file after each test\n        if os.path.exists('test_output.csv'):\n            os.remove('test_output.csv')\n        if os.path.exists(self.test_directory):\n            shutil.rmtree(self.test_directory)\n    def test_no_files_in_directory(self):\n        # Test case where there are no txt files in the directory\n        self.create_fake_dict_files(self.test_directory, 0, 0)\n        result = task_func(self.output_file, self.test_directory)\n        self.assertEqual(result, 0)\n        self.remove_files()\n    \n    def test_single_file_multiple_words(self):\n        # Test case with a single file containing multiple words\n        self.create_fake_dict_files(self.test_directory, 1, 50)\n        result = task_func(self.output_file, self.test_directory)\n        self.assertEqual(50,result)\n        self.remove_files()\n    def test_multiple_files_multiple_words(self):\n        # Test case with multiple files each containing multiple words\n        self.create_fake_dict_files(self.test_directory, 5, 20)\n        result = task_func(self.output_file, self.test_directory)\n        self.remove_files()\n        self.assertEqual(100,result)\n    def test_directory_does_not_exist(self):\n        # Test case where the specified directory does not exist\n        result = task_func(self.output_file, self.test_directory)\n        self.assertEqual(0,result)\n    def test_empty_files_in_directory(self):\n        # Test case with empty txt files in the directory\n        self.create_fake_dict_files(self.test_directory, 3, 0)\n        result = task_func(self.output_file, self.test_directory)\n        self.remove_files()\n        self.assertEqual(0,result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the k smallest numbers in a randomly generated list using heapq.\nThe function should output with:\n    tuple: A tuple containing two lists:\n    list[int]: The randomly generated list of integers with the specified length.\n    list[int]: The k smallest numbers found using heapq.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n```",
        "gt": "import heapq\nimport random\ndef task_func(k, list_length = 5, min_value = 0, max_value = 100):\n\n    numbers = [random.randint(min_value, max_value) for _ in range(list_length)]\n    heapq.heapify(numbers)\n    smallest_numbers = heapq.nsmallest(k, numbers)\n   \n    return numbers, smallest_numbers",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    \n    def test_empty_list(self):\n        random.seed(0)\n        rand_list, least_k = task_func(0, 0)\n        self.assertEqual(rand_list, [])\n        self.assertEqual(least_k, [])\n    def test_k_larger_than_list_length(self):\n        random.seed(0)\n        rand_list, least_k = task_func(5, 10)\n        self.assertEqual(len(rand_list), 10)\n        self.assertEqual(len(least_k), 5)\n    def test_sorted_list(self):\n        random.seed(0)\n        rand_list, least_k = task_func(100, 3)\n        self.assertEqual(least_k, sorted(rand_list)[:3])\n    def test_least_k_sorted(self):\n        random.seed(0)\n        rand_list, least_k = task_func(100, 5, 100, 100)\n        self.assertEqual(least_k, sorted(least_k)[:5])\n    \n    def test_least_k_sorted_first(self):\n        random.seed(0)\n        rand_list, least_k = task_func(100, 5)\n        self.assertEqual(least_k[0], sorted(least_k)[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random dataset of floating point numbers, truncate each value to 3 decimal places and normalize the data using standard scaling (mean = 0, std = 1).\nNote that: The function use \"Normalized Value\" for the column name in the DataFrame that being returned.\nThe function should raise the exception for: If max_value is less than min_value, a ValueError is raised.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nN_DATA_POINTS = 5000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n```",
        "gt": "import pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nN_DATA_POINTS = 5000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n    if max_value < min_value:\n        raise ValueError()\n\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    scaler = StandardScaler()\n    normalized_data = scaler.fit_transform(data_df[['Value']])\n\n    return pd.DataFrame(normalized_data, columns=['Normalized Value'])",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        random.seed(0)\n        df = task_func()\n        self.assertIsInstance(df, pd.DataFrame, \"Return type should be a DataFrame.\")\n        self.assertEqual(len(df), 5000, \"Default number of data points should be 5000.\")\n        self.assertAlmostEqual(df['Normalized Value'].mean(), 0, delta=0.1, msg=\"Mean should be close to 0.\")\n        self.assertAlmostEqual(df['Normalized Value'].std(), 1, delta=0.1, msg=\"Standard deviation should be close to 1.\")\n    def test_custom_parameters(self):\n        random.seed(0)\n        df = task_func(1000, 1.0, 5.0)\n        self.assertEqual(len(df), 1000, \"Number of data points should match the specified value.\")\n        self.assertTrue(df['Normalized Value'].min() >= -3, \"Normalized values should be within a reasonable range.\")\n        self.assertTrue(df['Normalized Value'].max() <= 3, \"Normalized values should be within a reasonable range.\")\n    def test_edge_case_empty(self):\n        random.seed(0)\n        with self.assertRaises(ValueError):\n            task_func(0)\n    def test_negative_data_points(self):\n        random.seed(0)\n        with self.assertRaises(ValueError):\n            task_func(-100)\n    def test_invalid_range(self):\n        random.seed(0)\n        with self.assertRaises(ValueError):\n            task_func(1000, 5.0, 1.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a list of category labels to create a histogram that visualizes their distribution. This histogram compares the distribution of a predefined set of categories (A, B, C, D, E) with any additional categories found in the input list.\nNote that: Notes: The function evaluates the distribution of predefined categories ('A', 'B', 'C', 'D', 'E') and checks for uniformity. If the distribution is not uniform, a warning message of \"The distribution of predefined categories is not uniform.\" is printed. Categories in the data_list that are not among the predefined categories are identified and included in the histogram. The ax.bar call in the function creates a bar plot on the axes object. It uses the following parameters: * all_categories: The categories to be displayed on the x-axis, including both predefined and extra categories. * category_counts.reindex(all_categories, fill_value=0): The counts of each category, where categories not found in the data_list are assigned a count of 0. * width=0.8: Sets the width of the bars in the bar plot. * align=\"center\": Aligns the bars with the center of the x-ticks.\nThe function should raise the exception for: ValueError: If the input data_list is empty, the function raises a ValueError with the message \"The data list is empty.\" In this case, no histogram is generated and the function terminates.\nThe function should output with:\n    Axes object (matplotlib.axes._axes.Axes): The histogram displaying the distribution of categories.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCATEGORIES = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ndef task_func(data_list):\n\n    if not data_list:\n        raise ValueError(\"The data list is empty.\")\n\n    data_series = pd.Series(data_list)\n    category_counts = data_series.value_counts()\n\n    # Prepare data for predefined categories\n    predefined_counts = category_counts.reindex(CATEGORIES, fill_value=0)\n\n    # Check for uniformity in predefined categories\n    if not all(x == predefined_counts.iloc[0] for x in predefined_counts):\n        print(\"The distribution of predefined categories is not uniform.\")\n\n    # Handling extra categories not in predefined list\n    extra_categories = category_counts.drop(CATEGORIES, errors=\"ignore\").index.tolist()\n    all_categories = CATEGORIES + extra_categories\n\n    _, ax = plt.subplots()\n    ax.bar(\n        all_categories,\n        category_counts.reindex(all_categories, fill_value=0),\n        width=0.8,\n        align=\"center\",\n    )\n    ax.set_xticks(all_categories)\n\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport io\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function.\"\"\"\n    def test_empty_list(self):\n        \"\"\"\n        Test the function with an empty list. Expects ValueError.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            task_func([])\n    def test_uniform_distribution(self):\n        \"\"\"\n        Test the function with a uniform distribution of predefined categories.\n        Expects no printed warning about non-uniform distribution.\n        \"\"\"\n        data = [\"A\", \"B\", \"C\", \"D\", \"E\"] * 2\n        with patch(\"sys.stdout\", new=io.StringIO()) as fake_output:\n            task_func(data)\n        self.assertNotIn(\n            \"The distribution of predefined categories is not uniform.\",\n            fake_output.getvalue(),\n        )\n    def test_non_uniform_distribution(self):\n        \"\"\"\n        Test the function with a non-uniform distribution of predefined categories.\n        Expects a printed warning about non-uniform distribution.\n        \"\"\"\n        data = [\"A\", \"A\", \"B\", \"C\", \"D\", \"E\"]\n        with patch(\"sys.stdout\", new=io.StringIO()) as fake_output:\n            task_func(data)\n        self.assertIn(\n            \"The distribution of predefined categories is not uniform.\",\n            fake_output.getvalue(),\n        )\n    def test_extra_categories(self):\n        \"\"\"\n        Test the function with extra categories not in the predefined list.\n        Expects extra categories to be included in the histogram.\n        \"\"\"\n        data = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n        ax = task_func(data)\n        self.assertIn(\"F\", [tick.get_text() for tick in ax.get_xticklabels()])\n        self.assertIn(\"G\", [tick.get_text() for tick in ax.get_xticklabels()])\n    def test_no_extra_categories(self):\n        \"\"\"\n        Test the function with no extra categories.\n        Expects only predefined categories to be included in the histogram.\n        \"\"\"\n        data = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n        ax = task_func(data)\n        for extra_cat in [\"F\", \"G\"]:\n            self.assertNotIn(\n                extra_cat, [tick.get_text() for tick in ax.get_xticklabels()]\n            )\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Identify duplicate points in a DataFrame, perform KMeans clustering on the unique points, and record the clusters.\nThe function should output with:\n    tuple: A tuple containing:\n    Counter: A Counter object with the count of duplicate points.\n    pd.DataFrame: A DataFrame with an additional column 'cluster' representing cluster assignments for unique points.\n    Axes: A scatter plot of the clustered data.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n```",
        "gt": "from collections import Counter\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=None, n_init=10):\n    # Identify duplicates\n    duplicates = df[df.duplicated(subset=[\"x\", \"y\"], keep=False)]\n    duplicates_counter = Counter(map(tuple, duplicates[[\"x\", \"y\"]].values))\n\n    # Remove duplicates and perform KMeans clustering on unique points\n    unique_df = df.drop_duplicates(subset=[\"x\", \"y\"]).copy()\n\n    # Adjust n_clusters if unique data points are fewer than desired clusters\n    n_clusters = min(n_clusters, len(unique_df))\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    unique_df[\"cluster\"] = kmeans.fit_predict(unique_df[[\"x\", \"y\"]])\n\n    # Plot clustered data\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(unique_df[\"x\"], unique_df[\"y\"], c=unique_df[\"cluster\"])\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_title(\"KMeans Clusters\")\n\n    return duplicates_counter, unique_df, ax",
        "test": "import unittest\nimport pandas as pd\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic functionality with duplicates\n        df = pd.DataFrame({\"x\": [1, 2, 2, 2, 3, 4], \"y\": [1, 1, 1, 1, 3, 3]})\n        duplicates, df_clustered, ax = task_func(df, random_state=42)\n        self.assertEqual(duplicates, Counter({(2, 1): 3}))\n        self.assertIn(\"cluster\", df_clustered.columns)\n        self.assertEqual(ax.get_title(), \"KMeans Clusters\")\n        self.assertFalse(df_clustered[\"cluster\"].isna().any())\n    def test_case_2(self):\n        # Test functionality without duplicates\n        df = pd.DataFrame({\"x\": [1, 2, 3, 4, 5, 6], \"y\": [1, 2, 3, 4, 5, 6]})\n        duplicates, df_clustered, ax = task_func(df, random_state=42)\n        self.assertEqual(duplicates, Counter())\n        self.assertIn(\"cluster\", df_clustered.columns)\n        self.assertEqual(ax.get_title(), \"KMeans Clusters\")\n    def test_case_3(self):\n        # Test functionality with all points being duplicates\n        df = pd.DataFrame({\"x\": [1, 1, 1, 1, 1, 1], \"y\": [1, 1, 1, 1, 1, 1]})\n        duplicates, df_clustered, ax = task_func(df, random_state=42)\n        self.assertEqual(duplicates, Counter({(1, 1): 6}))\n        self.assertIn(\"cluster\", df_clustered.columns)\n        self.assertEqual(ax.get_title(), \"KMeans Clusters\")\n    def test_case_4(self):\n        # Test with specified number of clusters\n        df = pd.DataFrame({\"x\": [1, 2, 3, 40, 50, 60], \"y\": [1, 2, 3, 40, 50, 60]})\n        duplicates, df_clustered, ax = task_func(df, n_clusters=2, random_state=42)\n        self.assertEqual(duplicates, Counter())\n        self.assertIn(\"cluster\", df_clustered.columns)\n        self.assertEqual(ax.get_title(), \"KMeans Clusters\")\n    def test_case_5(self):\n        # Test functionality with multiple duplicates\n        df = pd.DataFrame(\n            {\"x\": [1, 2, 3, 4, 5, 5, 5, 5], \"y\": [1, 2, 3, 4, 5, 5, 5, 5]}\n        )\n        duplicates, df_clustered, ax = task_func(df, random_state=42)\n        self.assertEqual(duplicates, Counter({(5, 5): 4}))\n        self.assertIn(\"cluster\", df_clustered.columns)\n        self.assertEqual(ax.get_title(), \"KMeans Clusters\")\n        self.assertFalse(df_clustered[\"cluster\"].isna().any())\n    def test_case_6(self):\n        # Test with a mix of unique points and duplicates\n        df = pd.DataFrame(\n            {\"x\": [1, 2, 3, 3, 3, 4, 5, 6], \"y\": [1, 2, 3, 3, 3, 4, 5, 6]}\n        )\n        duplicates, df_clustered, ax = task_func(df, random_state=42)\n        self.assertEqual(duplicates, Counter({(3, 3): 3}))\n        self.assertIn(\"cluster\", df_clustered.columns)\n        self.assertEqual(ax.get_title(), \"KMeans Clusters\")\n        self.assertFalse(df_clustered[\"cluster\"].isna().any())\n    def test_case_7(self):\n        # Easily separable data\n        df = pd.DataFrame(\n            {\n                \"x\": [1, 2, 3, 10, 11, 12, 20, 21, 22],\n                \"y\": [1, 2, 3, 10, 11, 12, 20, 21, 22],\n            }\n        )\n        # We expect 3 clusters because of the natural separation in data\n        duplicates, df_clustered, _ = task_func(df, n_clusters=3, random_state=42)\n        self.assertEqual(duplicates, Counter())\n        # Check that all points in a specific region belong to the same cluster\n        cluster_1 = df_clustered[df_clustered[\"x\"] <= 3][\"cluster\"].nunique()\n        cluster_2 = df_clustered[(df_clustered[\"x\"] > 3) & (df_clustered[\"x\"] <= 12)][\n            \"cluster\"\n        ].nunique()\n        cluster_3 = df_clustered[df_clustered[\"x\"] > 12][\"cluster\"].nunique()\n        self.assertEqual(\n            cluster_1, 1\n        )  # All points in this region should belong to the same cluster\n        self.assertEqual(\n            cluster_2, 1\n        )  # All points in this region should belong to the same cluster\n        self.assertEqual(\n            cluster_3, 1\n        )  # All points in this region should belong to the same cluster\n    def test_case_8(self):\n        # Test effects of random state on clustering outcome\n        df = pd.DataFrame(\n            {\"x\": [10, 20, 20, 40, 50, 60], \"y\": [10, 20, 20, 40, 50, 60]}\n        )\n        _, df_clustered_1, _ = task_func(df, n_clusters=2, random_state=42)\n        _, df_clustered_2, _ = task_func(df, n_clusters=2, random_state=42)\n        # Clusters should be the same for the same random state\n        self.assertTrue((df_clustered_1[\"cluster\"] == df_clustered_2[\"cluster\"]).all())\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Visualize the uppermost K n-grams in a given text string.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nfrom textblob import TextBlob\nfrom matplotlib import pyplot as plt\ndef task_func(text, n, top_k):\n    blob = TextBlob(text.lower())\n    words_freq = Counter([' '.join(list(span)) for span in blob.ngrams(n=n)])  # Get n-grams and count frequency\n    words_freq_filtered = words_freq.most_common(top_k)  # Get top k n-grams\n    top_df = pd.DataFrame(words_freq_filtered, columns=['n-gram', 'Frequency'])\n    plt.figure()\n\n    return sns.barplot(x='n-gram', y='Frequency', data=top_df)",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport doctest\nclass TestCases(unittest.TestCase):\n    def tearDown(self) -> None:\n        plt.close('all')\n    def test_case_1(self):\n        # Test with a simple text, bigram (n=2) and top 2 n-grams\n        ax = task_func('This is a sample text for testing.', 2, 2)\n        ngrams = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertNotIn('sample text', ngrams)\n        self.assertIn('is a', ngrams)\n    def test_case_2(self):\n        # Test with a longer text, trigram (n=3) and top 3 n-grams\n        text = 'The sun shines bright in the clear blue sky. The sky is blue and beautiful.'\n        ax = task_func(text, 3, 3)\n        ngrams = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertNotIn('the clear blue', ngrams)\n        self.assertNotIn('sky the sky', ngrams)\n        self.assertIn('the sun shines', ngrams)\n    def test_case_3(self):\n        # Test with no repeating n-grams, unigram (n=1) and top 3 n-grams\n        text = 'Each word is unique.'\n        ax = task_func(text, 1, 3)\n        ngrams = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertEqual(len(ngrams), 3)  # Only 4 unique words bu top 3 n-grams\n    def test_case_4(self):\n        # Test with a repeated word, bigram (n=2) and top 1 n-grams\n        text = 'Repeat repeat repeat again.'\n        ax = task_func(text, 2, 1)\n        ngrams = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertIn('repeat repeat', ngrams)\n    def test_case_5(self):\n        # Test with punctuation in text, bigram (n=2) and top 3 n-grams\n        text = 'Hello, world! How are you, world?'\n        ax = task_func(text, 2, 3)\n        ngrams = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertIn('hello world', ngrams)\n        self.assertNotIn('you world', ngrams)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Pre-processes a DataFrame by replacing values according to a dictionary mapping, standardizing specified features, and optionally drawing a histogram of the target variable.\nThe function should raise the exception for: The function will raise ValueError if the FEATURES and TARGET columns not in the input DataFrame. The function will raise ValueError if the input df is not a DataFrame.\nThe function should output with:\n    DataFrame: The preprocessed DataFrame with standardized features and values replaced as per dict_mapping.\n    Axes: The histogram of the target variable if plot_histogram is True, otherwise None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n# Constants\nFEATURES = ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']\nTARGET = 'target'\ndef task_func(df, dict_mapping, plot_histogram=False):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n\n    # Check if all required columns are present in the DataFrame\n    required_columns = FEATURES + [TARGET]\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        raise ValueError(f\"Missing columns in DataFrame: {missing_columns}\")\n\n    # Replace values using dictionary mapping\n    df = df.replace(dict_mapping)\n    \n    # Standardize the features\n    scaler = StandardScaler()\n    df[FEATURES] = scaler.fit_transform(df[FEATURES])\n    \n    # Plot histogram of the target variable if requested\n    if plot_histogram:\n        ax = df[TARGET].plot.hist(bins=50)\n        return df, ax\n    else:\n        return df, None",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_value_replacement(self):\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3],\n            'feature2': [4, 5, 6],\n            'feature3': [7, 8, 9],\n            'feature4': [10, 11, 12],\n            'feature5': [13, 14, 15],\n            'target': [0, 1, 1]\n        })\n        dict_mapping = {1: 11, 0: 22}\n        result_df, _ = task_func(df, dict_mapping)\n        self.assertTrue(11 in result_df.values)\n        self.assertTrue(22 in result_df.values)\n    def test_feature_standardization(self):\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3],\n            'feature2': [4, 5, 6],\n            'feature3': [7, 8, 9],\n            'feature4': [10, 11, 12],\n            'feature5': [13, 14, 15],\n            'target': [0, 1, 1]\n        })\n        result_df, _ = task_func(df, {})\n        for feature in ['feature1', 'feature2', 'feature3', 'feature4', 'feature5']:\n            self.assertAlmostEqual(result_df[feature].mean(), 0, places=1)\n            self.assertAlmostEqual(int(result_df[feature].std()), 1, places=1)\n    def test_no_histogram_plotting(self):\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3],\n            'feature2': [4, 5, 6],\n            'feature3': [7, 8, 9],\n            'feature4': [10, 11, 12],\n            'feature5': [13, 14, 15],\n            'target': [0, 1, 1]\n        })\n        result, _ = task_func(df, {}, plot_histogram=False)\n        self.assertIsInstance(result, pd.DataFrame)\n    def test_missing_features_handling(self):\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3],\n            'target': [0, 1, 1]\n        })\n        with self.assertRaises(ValueError):\n            task_func(df, {})\n    def test_histogram_plotting(self):\n        df = pd.DataFrame({\n            'feature1': [1, 2, 3],\n            'feature2': [4, 5, 6],\n            'feature3': [7, 8, 9],\n            'feature4': [10, 11, 12],\n            'feature5': [13, 14, 15],\n            'target': [0, 1, 1]\n        })\n        result_df, ax = task_func(df, {}, plot_histogram=True)\n        self.assertTrue(hasattr(ax, 'hist'))\n        self.assertIsInstance(ax, plt.Axes)\n        plt.close()\n    \n    def test_non_df(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\", {})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a diagram of a sine wave and cosine wave with a given frequency and return the plot.\nThe function should raise the exception for: ValueError: If the frequency is negative. ValueError: If the sample size is non-positive.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object containing the plot.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\ndef task_func(frequency, sample_size=10000):\n    if frequency < 0:\n        raise ValueError(\"Frequency cannot be negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size cannot be negative or zero\")\n\n    x = np.linspace(0, 2 * math.pi, sample_size)\n    y_sin = np.sin(frequency * x)\n    y_cos = np.cos(frequency * x)\n\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.plot(x, y_sin, label='sin')\n    ax.plot(x, y_cos, label='cos')\n    ax.legend()\n    return fig, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        fig, ax = task_func(1, 2500)\n        self.assertEqual(len(ax.lines), 2)  # Should have two lines (sin and cos)\n        self.assertTrue(all(label in [line.get_label() for line in ax.lines] for label in ['sin', 'cos']))\n    def test_case_2(self):\n        fig, ax = task_func(0)\n        # At frequency 0, sin wave should be a line at y=0 and cos wave should be a line at y=1\n        y_data_sin = ax.lines[0].get_ydata()\n        y_data_cos = ax.lines[1].get_ydata()\n        self.assertTrue(np.all(y_data_sin == 0))\n        self.assertTrue(np.all(y_data_cos == 1))\n    def test_case_3(self):\n        with self.assertRaises(ValueError):\n            fig, ax = task_func(-1)\n        with self.assertRaises(ValueError):\n            fig, ax = task_func(5, -1)\n    def test_case_4(self):\n        fig, ax = task_func(10, 5000)\n        # Check if the data is correctly oscillating for high frequency\n        y_data_sin = ax.lines[0].get_ydata()\n        y_data_cos = ax.lines[1].get_ydata()\n        self.assertTrue(np.any(y_data_sin >= 0) and np.any(y_data_sin <= 0))  # Sin wave oscillates\n        self.assertTrue(np.any(y_data_cos >= 0) and np.any(y_data_cos <= 0))  # Cos wave oscillates\n    def test_case_5(self):\n        fig, ax = task_func(1)\n        self.assertIsNotNone(ax.get_legend())  # Check if legend is present",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze a dictionary of student data to return a dataframe sorted by name and age in ascending order, the average score per student as a pandas Series, and the most common age as an integer.\nThe function should raise the exception for: ValueError: If the dictionary does not have the required keys.\nThe function should output with:\n    pd.DataFrame, pd.Series, int or None:\n    A dataframe sorted by 'Name' and 'Age' in ascending order.\n    A series representing average scores indexed by student names.\n    An integer representing the most common age or None if no data is available.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nfrom collections import Counter\ndef task_func(data):\n\n    if not all(key in data for key in ['Name', 'Age', 'Score']):\n        raise ValueError(\"The dictionary must have the keys 'Name', 'Age', 'Score'\")\n\n    # Creating a dataframe and sorting it\n    df = pd.DataFrame(data).sort_values(['Name', 'Age'])\n\n    # Calculating average scores\n    avg_scores = df.groupby('Name')['Score'].mean()\n\n    # Getting the most common age\n    age_counts = Counter(df['Age'])\n    most_common_age = age_counts.most_common(1)[0][0] if age_counts else None\n\n    return df, avg_scores, most_common_age",
        "test": "import unittest\nimport pandas as pd\nimport os\nclass TestCases(unittest.TestCase):\n    def test_wrong_keys(self):\n        # Testing with incorrect dictionary keys\n        data = {\n            'Names': ['Tom', 'Nick'],\n            'Ages': [20, 21],\n            'Scores': [85, 79]\n        }\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_correct_processing(self):\n        # Testing with correctly formatted data\n        data = {\n            'Name': ['Tom', 'Nick', 'Tom', 'John'],\n            'Age': [20, 21, 20, 19],\n            'Score': [85, 79, 88, 92]\n        }\n        df, avg_scores, common_age = task_func(data)\n        self.assertEqual(df.iloc[0]['Name'], 'John')\n        self.assertAlmostEqual(avg_scores['Tom'], 86.5)\n        self.assertEqual(common_age, 20)\n    def test_empty_data(self):\n        # Testing with empty lists\n        data = {'Name': [], 'Age': [], 'Score': []}\n        df, avg_scores, common_age = task_func(data)\n        self.assertTrue(df.empty)\n        self.assertTrue(avg_scores.empty)\n        self.assertIsNone(common_age)\n    def test_all_same_age(self):\n        # Testing with all students having the same age\n        data = {\n            'Name': ['Alice', 'Bob', 'Cindy'],\n            'Age': [25, 25, 25],\n            'Score': [88, 92, 85]\n        }\n        df, avg_scores, common_age = task_func(data)\n        self.assertEqual(common_age, 25)\n    def test_no_common_age(self):\n        # Testing with no common age, each student has a unique age\n        data = {\n            'Name': ['Alice', 'Bob', 'Cindy'],\n            'Age': [24, 25, 26],\n            'Score': [88, 92, 85]\n        }\n        df, avg_scores, common_age = task_func(data)\n        self.assertEqual(common_age, 24)  # Assuming the first element is taken if all are equally common\n    def test_duplicate_names_different_ages(self):\n        # Testing with duplicate names but different ages\n        data = {\n            'Name': ['Tom', 'Tom', 'Nick'],\n            'Age': [20, 21, 21],\n            'Score': [85, 88, 79]\n        }\n        df, avg_scores, common_age = task_func(data)\n        self.assertEqual(len(df[df['Name'] == 'Tom']), 2)\n        self.assertNotEqual(df.iloc[0]['Age'], df.iloc[1]['Age'])\n        self.assertTrue(df[df['Name'] == 'Tom'].Age.isin([20, 21]).all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts matches from a JSON file based on a predefined regular pattern. The default regular expression pattern is designed to extract any content between parentheses as a single match and any individual character outside the parentheses as a separate match.\nThe function should output with:\n    dict: A dictionary with the JSON file name as the key and a list of matches as values.\n    The format is: {filename: [match1, match2, ...]}.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n```",
        "gt": "import re\nimport json\nimport os\ndef task_func(file_path: str, regex_pattern=r'\\(.+?\\)|\\w') -> dict:\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n        text = ' '.join(data.values())\n        matches = re.findall(regex_pattern, text)\n\n    match_dict = {os.path.basename(file_path): matches}\n    return match_dict",
        "test": "import unittest\nimport shutil\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        sample_data = {\n            \"data1.json\": {\n                \"text1\": \"This is a (sample) text with some (matches) and characters.\",\n                \"text2\": \"Another (example) with multiple matches.\"\n            },\n            \"data2.json\": {\n                \"text1\": \"(Hello) world!\",\n                \"text2\": \"No matches here.\"\n            },\n            \"data3.json\": {\n                \"text1\": \"Testing (with) another (file).\",\n                \"text2\": \"Just some (random) text.\"\n            },\n            \"data4.json\": {\n                \"text1\": \"(A) quick brown (fox) jumps.\",\n                \"text2\": \"Over the lazy (dog).\"\n            },\n            \"data5.json\": {\n                \"text1\": \"Yet (another) test file.\",\n                \"text2\": \"With (various) matches.\"\n            }\n        }\n        # Directory to save the test data\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_data_dir = f\"{self.base_tmp_dir}/test/\"\n        # Create the directory if it doesn't exist\n        if not os.path.exists(self.test_data_dir):\n            os.makedirs(self.test_data_dir)\n        # Saving the test data as JSON files\n        for filename, content in sample_data.items():\n            with open(os.path.join(self.test_data_dir, filename), \"w\") as file:\n                json.dump(content, file)\n    def tearDown(self):\n        # Remove the test data directory\n        shutil.rmtree(self.test_data_dir)\n    def test_case_1(self):\n        matches = task_func(os.path.join(self.test_data_dir, \"data1.json\"))\n        expected = {\n            \"data1.json\": [\n                'T', 'h', 'i', 's', 'i', 's', 'a', '(sample)', 't', 'e', 'x', 't', 'w', 'i', 't', \n                'h', 's', 'o', 'm', 'e', '(matches)', 'a', 'n', 'd', 'c', 'h', 'a', 'r', 'a', 'c', \n                't', 'e', 'r', 's', 'A', 'n', 'o', 't', 'h', 'e', 'r', '(example)', 'w', 'i', 't',\n                'h', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'e', 'm', 'a', 't', 'c', 'h', 'e', 's'\n            ]\n        }\n        self.assertEqual(matches, expected)\n    def test_case_2(self):\n        matches = task_func(os.path.join(self.test_data_dir, \"data2.json\"))\n        expected = {\n            \"data2.json\": [\n                '(Hello)', 'w', 'o', 'r', 'l', 'd', 'N', 'o', 'm', 'a', 't', 'c', 'h', \n                'e', 's', 'h', 'e', 'r', 'e'\n            ]\n        }\n        self.assertEqual(matches, expected)\n    def test_case_3(self):\n        matches = task_func(os.path.join(self.test_data_dir, \"data3.json\"))\n        expected = {\n            \"data3.json\": [\n                'T', 'e', 's', 't', 'i', 'n', 'g', '(with)', 'a', 'n', 'o', 't', 'h', 'e', 'r', '(file)', 'J',\n                'u', 's', 't', 's', 'o', 'm', 'e', '(random)', 't', 'e', 'x', 't'    \n            ]\n        }\n        self.assertEqual(matches, expected)\n    def test_case_4(self):\n        matches = task_func(os.path.join(self.test_data_dir, \"data4.json\"))\n        expected = {\n            \"data4.json\": [\n                '(A)', 'q', 'u', 'i', 'c', 'k', 'b', 'r', 'o', 'w', 'n', '(fox)', 'j', 'u', 'm', 'p',\n                's', 'O', 'v', 'e', 'r', 't', 'h', 'e', 'l', 'a', 'z', 'y', '(dog)'\n            ]\n        }\n        self.assertEqual(matches, expected)\n    def test_case_5(self):\n        matches = task_func(os.path.join(self.test_data_dir, \"data5.json\"))\n        expected = {\n            \"data5.json\": [\n                'Y', 'e', 't', '(another)', 't', 'e', 's', 't', 'f', 'i', 'l', 'e', 'W', 'i', 't', \n                'h', '(various)', 'm', 'a', 't', 'c', 'h', 'e', 's'   \n            ]\n        }\n        self.assertEqual(matches, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes the groups in a DataFrame by plotting a scatter plot of the ordinals against the values for each group.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks required columns.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the scatter plot.\n    The Axes object will have a title 'Scatterplot of Values for Each Group Over Time',\n    x-axis labeled as 'Date (ordinal)', and y-axis labeled as 'Value'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\ndef task_func(df, groups=['A', 'B', 'C', 'D', 'E']):\n\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'group', 'date', and 'value' columns.\")\n\n    color_cycle = cycle('bgrcmk')\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    for group in groups:\n        group_df = df[df['group'] == group].copy()\n        group_df['date'] = group_df['date'].apply(lambda x: x.toordinal())\n        ax.scatter(group_df['date'], group_df['value'], color=next(color_cycle))\n\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n    ax.set_title('Scatterplot of Values for Each Group Over Time')\n\n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({\n            \"group\": [\"A\", \"A\", \"A\", \"B\", \"B\"],\n            \"date\": pd.to_datetime([\"2022-01-02\", \"2022-01-13\", \"2022-02-01\", \"2022-02-23\", \"2022-03-05\"]),\n            \"value\": [10, 20, 16, 31, 56],\n        })\n    def test_return_type(self):\n        ax = task_func(self.df)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_invalid_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'a': [1, 2], 'b': [3, 4]}))\n    def test_custom_groups(self):\n        custom_groups = ['A', 'B']\n        ax = task_func(self.df, groups=custom_groups)\n        # Check if only the custom groups are plotted\n        plotted_groups = set(self.df[self.df['group'].isin(custom_groups)]['group'].unique())\n        self.assertEqual(len(plotted_groups), len(custom_groups))\n    def test_plot_labels(self):\n        ax = task_func(self.df)\n        self.assertEqual(ax.get_xlabel(), 'Date (ordinal)')\n        self.assertEqual(ax.get_ylabel(), 'Value')\n        self.assertEqual(ax.get_title(), 'Scatterplot of Values for Each Group Over Time')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes the distribution of values in a NumPy array to determine if it is uniform and generates a histogram representing this distribution.\nNote that: The bin is set to `np.arange(len(unique) + 1) - 0.5` to align each bin with its corresponding unique value.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    uniform_distribution (bool): A boolean value indicating whether the distribution is uniform.\n    Returns True if every unique value in the array appears the same number of times,\n    indicating a uniform distribution.\n    Returns False otherwise.\n    ax (matplotlib.axes.Axes): An Axes object displaying the histogram of the array's value distribution.\n    The histogram's bins correspond to the unique values in the array.\n    The frequency of each unique value is represented by the height of the corresponding bin.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(arr):\n    unique, counts = np.unique(arr, return_counts=True)\n    uniform_distribution = len(set(counts)) == 1\n\n    _, ax = plt.subplots()\n    ax.hist(arr, bins=np.arange(len(unique) + 1) - 0.5, rwidth=0.8, align=\"mid\")\n    ax.set_xticks(range(len(unique)))\n    ax.set_xticklabels(unique)\n\n    return uniform_distribution, ax",
        "test": "import numpy as np\nimport unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_uniform_distribution(self):\n        \"\"\"Test uniform distribution.\"\"\"\n        arr = np.array([\"A\", \"A\", \"B\", \"B\"])\n        uniform, _ = task_func(arr)\n        self.assertTrue(uniform)\n    def test_non_uniform_distribution(self):\n        \"\"\"Test non-uniform distribution.\"\"\"\n        arr = np.array([\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\", \"D\", \"E\", \"E\"])\n        uniform, _ = task_func(arr)\n        self.assertFalse(uniform)\n    def test_single_value(self):\n        \"\"\"Test single value.\"\"\"\n        arr = np.array([\"A\", \"A\", \"A\", \"A\"])\n        uniform, _ = task_func(arr)\n        self.assertTrue(uniform)\n    def test_multiple_equal_values(self):\n        \"\"\"Test multiple equal values.\"\"\"\n        arr = np.array([\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\"])\n        uniform, _ = task_func(arr)\n        self.assertTrue(uniform)\n    def test_varying_values(self):\n        \"\"\"Test varying values.\"\"\"\n        arr = np.array([\"A\", \"B\", \"B\", \"C\", \"C\", \"C\", \"D\", \"D\", \"D\", \"D\"])\n        uniform, _ = task_func(arr)\n        self.assertFalse(uniform)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the interquartile range of all elements in a nested list 'L'.\nThe function should output with:\n    iqr_value (float): The interquartile range.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n```",
        "gt": "import numpy as np\nfrom scipy.stats import iqr\ndef task_func(L):\n    flattened = np.array(L).flatten()\n    iqr_value = iqr(flattened)\n    \n    return iqr_value",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        result = task_func([[1,2,3],[4,5,6]])\n        expected = 2.5\n        self.assertAlmostEqual(result, expected, places=2)\n    def test_2(self):\n        result = task_func([[1,1,1],[2,2,2]])\n        expected = 1.0\n        self.assertAlmostEqual(result, expected, places=2)\n    def test_3(self):\n        result = task_func([[1,5,3]])\n        expected = 2.0\n        self.assertAlmostEqual(result, expected, places=2)\n    \n    def test_4(self):\n        result = task_func([[1],[2],[3],[4],[5]])\n        expected = 2.0\n        self.assertAlmostEqual(result, expected, places=2)\n    \n    def test_5(self):\n        result = task_func([[1,-2,3],[-4,5,6]])\n        expected = 5.75\n        self.assertAlmostEqual(result, expected, places=2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function takes in a list of product names and generates random sales data for each product over a period of 12 months. It then calculates the average sales for each product and returns the results as a pandas DataFrame with columns: 'Product', 'Month 1', 'Month 2', ..., 'Month 12', 'Average Sales'..\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns: 'Product', 'Month 1', 'Month 2', ..., 'Month 12', 'Average Sales'.\nYou should write self-contained code starting with:\n```\nfrom random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n```",
        "gt": "from random import randint\nfrom statistics import mean\nimport pandas as pd\ndef task_func(products_list):\n    sales_data = []\n\n    for product in products_list:\n        sales = [randint(100, 500) for _ in range(12)]\n        avg_sales = mean(sales)\n        sales.append(avg_sales)\n        sales_data.append([product] + sales)\n\n    sales_df = pd.DataFrame(sales_data, columns=['Product'] + [f'Month {i+1}' for i in range(12)] + ['Average Sales'])\n\n    return sales_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a single product\n        products = [\"Apples\"]\n        sales_data = task_func(products)\n        \n        # Checking if returned DataFrame has the correct structure\n        expected_columns = ['Product'] + [f'Month {i+1}' for i in range(12)] + ['Average Sales']\n        self.assertEqual(list(sales_data.columns), expected_columns)\n        \n        # Checking the correctness of average sales\n        avg_sales = sales_data['Average Sales'].iloc[0]\n        self.assertAlmostEqual(avg_sales, sales_data.iloc[0, 1:13].mean(), places=2)\n        \n        # Checking if sales values are within the expected range\n        self.assertTrue((sales_data.iloc[0, 1:13] >= 100).all() and (sales_data.iloc[0, 1:13] <= 500).all())\n    def test_case_2(self):\n        # Test with multiple products\n        products = [\"Apples\", \"Bananas\", \"Grapes\"]\n        sales_data = task_func(products)\n        self.assertEqual(len(sales_data), 3)\n    def test_case_3(self):\n        # Test with no products\n        products = []\n        sales_data = task_func(products)\n        self.assertEqual(len(sales_data), 0)\n    def test_case_4(self):\n        # Test with a long product name\n        products = [\"A\" * 100]\n        sales_data = task_func(products)\n        self.assertEqual(sales_data['Product'].iloc[0], \"A\" * 100)\n    def test_case_5(self):\n        # Test with products having special characters\n        products = [\"@pples\", \"!Bananas\", \"#Grapes\"]\n        sales_data = task_func(products)\n        self.assertTrue(all(item in sales_data['Product'].tolist() for item in products))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a dataset comprising both normal data and artificially introduced outliers, and plot a histogram of the combined data. The function detects outliers in the dataset using the Interquartile Range (IQR) method, but it only considers the normally distributed portion of the data for outlier detection. The outliers detected and the artificially introduced outliers might not always coincide.\nNote that: The artificially introduced outliers are not necessarily the same as the outliers detected by the IQR method. The IQR method is applied only to the normally distributed data, and thus some of the artificially introduced outliers may not be detected, and some normal data points may be falsely identified as outliers.\nThe function should output with:\n    data (numpy array): The combined dataset, including both normally distributed data and\n    the artificially introduced outliers.\n    outliers_detected (numpy array): The outliers detected using the IQR method. This\n    detection is based solely on the normally distributed portion of the data.\n    ax (matplotlib.axes._axes.Axes): The Axes object for the histogram\n    plot of the combined dataset.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nNUM_SAMPLES = 100\nNUM_OUTLIERS = 5\ndef task_func(num_samples=NUM_SAMPLES, num_outliers=NUM_OUTLIERS):\n    normal_data = np.random.normal(size=num_samples)\n    outliers = np.random.uniform(low=-10, high=10, size=num_outliers)\n    data = np.concatenate([normal_data, outliers]) if num_samples > 0 else outliers\n\n    # Identify outliers using IQR (only if there is normal data)\n    outliers_detected = np.array([])\n    if num_samples > 0:\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        outliers_detected = data[(data < lower_bound) | (data > upper_bound)]\n\n    # Plot histogram\n    _, ax = plt.subplots()\n    ax.hist(data, bins=30)\n\n    return data, outliers_detected, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_default_values(self):\n        \"\"\"Test the function with default values.\"\"\"\n        np.random.seed(0)\n        data, _, _ = task_func()\n        self.assertEqual(len(data), 105)\n    def test_custom_values(self):\n        \"\"\"Test the function with custom values.\"\"\"\n        np.random.seed(1)\n        data, outliers_detected, _ = task_func(num_samples=50, num_outliers=10)\n        self.assertEqual(len(data), 60)\n        # Replicate the IQR calculation for testing\n        normal_data = data[:50]  # Assuming the first 50 are normal data\n        q75, q25 = np.percentile(normal_data, [75, 25])\n        iqr = q75 - q25\n        lower_bound = q25 - (iqr * 1.5)\n        upper_bound = q75 + (iqr * 1.5)\n        expected_outliers_count = len(\n            [o for o in data if o < lower_bound or o > upper_bound]\n        )\n        self.assertEqual(len(outliers_detected), expected_outliers_count)\n    def test_no_outliers(self):\n        \"\"\"Test the function with no outliers.\"\"\"\n        np.random.seed(2)\n        data, outliers_detected, ax = task_func(num_samples=100, num_outliers=0)\n        self.assertEqual(len(data), 100)\n        # Adjust the expectation to consider possible false positives\n        self.assertTrue(len(outliers_detected) <= 1)  # Allow for up to 1 false positive\n    def test_only_outliers(self):\n        \"\"\"Test the function with only outliers.\"\"\"\n        np.random.seed(3)\n        data, outliers_detected, _ = task_func(num_samples=0, num_outliers=100)\n        self.assertEqual(len(data), 100)\n        # Since no normal data is generated, IQR is not applied, and no outliers are detected.\n        self.assertEqual(len(outliers_detected), 0)\n    def test_negative_values(self):\n        \"\"\"Test the function with negative values.\"\"\"\n        np.random.seed(4)\n        with self.assertRaises(ValueError):\n            task_func(num_samples=-10, num_outliers=-5)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates an HMAC (Hash-based Message Authentication Code) signature for a given message using a secret key. The function uses SHA-256 as the hash function to create the HMAC signature. Generate an HMAC for a different message with the same key. >>> len(task_func('mysecretkey', 'Goodbye, world!')) == 64 True\nThe function should output with:\n    str: The HMAC signature of the message, returned as a hexadecimal string.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport hmac\ndef task_func(secret, message):\n```",
        "gt": "import hashlib\nimport hmac\ndef task_func(secret, message):\n    return hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_hmac_signature_length(self):\n        signature = task_func('secretkey', 'Hello, world!')\n        self.assertEqual(len(signature), 64)\n    def test_hmac_signature_different_messages(self):\n        sig1 = task_func('secretkey', 'Hello, world!')\n        sig2 = task_func('secretkey', 'Goodbye, world!')\n        self.assertNotEqual(sig1, sig2)\n    def test_hmac_signature_same_message_different_keys(self):\n        sig1 = task_func('key1', 'Hello, world!')\n        sig2 = task_func('key2', 'Hello, world!')\n        self.assertNotEqual(sig1, sig2)\n    def test_hmac_signature_empty_message(self):\n        signature = task_func('secretkey', '')\n        self.assertEqual(len(signature), 64)\n    def test_hmac_signature_empty_key(self):\n        signature = task_func('', 'Hello, world!')\n        self.assertEqual(len(signature), 64)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Transforms categorical data into a numerical format suitable for machine learning algorithms using sklearn's LabelEncoder. This function generates a DataFrame that pairs original categorical values with their numerical encodings.\nThe function should output with:\n    DataFrame: A DataFrame with columns 'Category' and 'Encoded', where 'Category' is the original data and 'Encoded'\n    is the numerical representation.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(data):\n    le = LabelEncoder()\n    encoded = le.fit_transform(data)\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded})\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing basic functionality\n        result = task_func(['A', 'B', 'C', 'A', 'D', 'E', 'B', 'C'])\n        expected = pd.DataFrame({'Category': ['A', 'B', 'C', 'A', 'D', 'E', 'B', 'C'],\n                                 'Encoded': [0, 1, 2, 0, 3, 4, 1, 2]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_2(self):\n        # Testing with a single unique category\n        result = task_func(['A', 'A', 'A'])\n        expected = pd.DataFrame({'Category': ['A', 'A', 'A'],\n                                 'Encoded': [0, 0, 0]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_3(self):\n        # Testing with an empty list\n        result = task_func([])\n        expected = pd.DataFrame({'Category': [],\n                                 'Encoded': []})\n        pd.testing.assert_frame_equal(result, expected, check_dtype=False)\n    def test_case_4(self):\n        # Testing with multiple unique categories but in a different order\n        result = task_func(['E', 'D', 'C', 'B', 'A'])\n        expected = pd.DataFrame({'Category': ['E', 'D', 'C', 'B', 'A'],\n                                 'Encoded': [4, 3, 2, 1, 0]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_5(self):\n        # Testing with a list containing a single different category\n        result = task_func(['Z'])\n        expected = pd.DataFrame({'Category': ['Z'],\n                                 'Encoded': [0]})\n        pd.testing.assert_frame_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Initialize a Flask application with Flask-Mail.\nNote that: The details of the email server are retrieved from environment variables. If the variables do not exist, use defaults.\nThe function should output with:\n    tuple: A tuple containing the Flask-Mail instance and the app's mail configurations.\nYou should write self-contained code starting with:\n```\nimport os\nfrom flask_mail import Mail\ndef task_func(app):\n```",
        "gt": "import os\nfrom flask_mail import Mail\ndef task_func(app):\n\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False) == 'True'\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    \n    mail = Mail(app)\n    \n    return mail, {\n        'MAIL_SERVER': app.config['MAIL_SERVER'],\n        'MAIL_PORT': app.config['MAIL_PORT'],\n        'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],\n        'MAIL_USERNAME': app.config['MAIL_USERNAME'],\n        'MAIL_PASSWORD': app.config['MAIL_PASSWORD']\n    }",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom flask import Flask\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.app = Flask(\"test\")\n    def test_case_1(self):\n        mail_instance, configs = task_func(self.app)\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"localhost\")\n        self.assertEqual(int(configs[\"MAIL_PORT\"]), 25)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertIsNone(configs[\"MAIL_USERNAME\"])\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])\n    @patch.dict('os.environ', {'MAIL_SERVER': 'test_server', 'MAIL_PORT': '2525', 'MAIL_USE_TLS': 'True', 'MAIL_USERNAME': 'test', 'MAIL_PASSWORD': 'password'})\n    def test_case_2(self):\n        mail_instance, configs = task_func(self.app)\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"test_server\")\n        self.assertEqual(int(configs[\"MAIL_PORT\"]), 2525)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], True)\n        self.assertEqual(configs[\"MAIL_USERNAME\"], \"test\")\n        self.assertEqual(configs[\"MAIL_PASSWORD\"], \"password\")\n    @patch.dict('os.environ', {'MAIL_SERVER': 'another_server'})\n    def test_case_3(self):\n        mail_instance, configs = task_func(self.app)\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"another_server\")\n        self.assertEqual(int(configs[\"MAIL_PORT\"]), 25)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertIsNone(configs[\"MAIL_USERNAME\"])\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])\n    @patch.dict('os.environ', {'MAIL_PORT': '3030', 'MAIL_USE_TLS': 'False'})\n    def test_case_4(self):\n        mail_instance, configs = task_func(self.app)\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"localhost\")\n        self.assertEqual(int(configs[\"MAIL_PORT\"]), 3030)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertIsNone(configs[\"MAIL_USERNAME\"])\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])\n    @patch.dict('os.environ', {'MAIL_USERNAME': 'username'})\n    def test_case_5(self):\n        mail_instance, configs = task_func(self.app)\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"localhost\")\n        self.assertEqual(int(configs[\"MAIL_PORT\"]), 25)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertEqual(configs[\"MAIL_USERNAME\"], \"username\")\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function reads the specified CSV file, counts the frequency of each word, and returns the most common word along with its frequency.\nNote that: The function specifically reads from the given file path. This example uses +SKIP because it relies on external file content.\nThe function should output with:\n    tuple: The most common word and its frequency, or None if the file doesn't exist or is empty.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n```",
        "gt": "import os\nimport csv\nfrom collections import Counter\ndef task_func(file_path):\n    if not os.path.isfile(file_path):\n        return None\n\n    word_counter = Counter()\n\n    with open(file_path, 'r') as f:\n        csv_reader = csv.reader(f, delimiter=',', skipinitialspace=True)\n        for row in csv_reader:\n            for word in row:\n                word_counter[word.strip()] += 1\n\n    if not word_counter:\n        return None\n\n    most_common_word, frequency = word_counter.most_common(1)[0]\n    return most_common_word, frequency",
        "test": "import unittest\n# Constants\nBASE_PATH = 'task_func_data'\nFILE_NAME = os.path.join(BASE_PATH, 'Output.txt')\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Create the directory for test files.\"\"\"\n        os.makedirs(BASE_PATH, exist_ok=True)\n    def tearDown(self):\n        \"\"\"Remove all created test files and the directory after all tests.\"\"\"\n        for filename in os.listdir(BASE_PATH):\n            os.remove(os.path.join(BASE_PATH, filename))\n        os.rmdir(BASE_PATH)\n    def create_and_fill_file(self, filename, contents):\n        \"\"\"Helper method to create and populate a file with given contents.\"\"\"\n        full_path = os.path.join(BASE_PATH, filename)\n        with open(full_path, 'w', newline='') as file:\n            writer = csv.writer(file)\n            for content in contents:\n                writer.writerow([content])\n        return full_path\n    def test_1(self):\n        file_path = self.create_and_fill_file('Output.txt', ['banana']*5)\n        result = task_func(file_path)\n        self.assertEqual(result, ('banana', 5))\n    def test_2(self):\n        file_path = self.create_and_fill_file('AnotherOutput.txt', ['cat']*5)\n        result = task_func(file_path)\n        self.assertEqual(result, ('cat', 5))\n    def test_3(self):\n        file_path = self.create_and_fill_file('YetAnotherOutput.txt', ['moon']*5)\n        result = task_func(file_path)\n        self.assertEqual(result, ('moon', 5))\n    def test_4(self):\n        file_path = self.create_and_fill_file('Nonexistent.txt', [])\n        result = task_func(file_path)\n        self.assertIsNone(result)\n    def test_5(self):\n        file_path = self.create_and_fill_file('EmptyFile.txt', [])\n        result = task_func(file_path)\n        self.assertIsNone(result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a histogram of the frequency of the top 30 unique random 3-letter strings. The function creates random strings, each consisting of 3 letters from the lowercase English alphabet. It then plots a histogram showing the frequencies of the top 30 most common strings among the generated set.\nThe function should raise the exception for: ValueError: If `n_rows` is less than or equal to 0.\nThe function should output with:\n    ax (matplotlib.axes.Axes): A Matplotlib Axes object containing the histogram.\n    Each bar represents one of the top 30 most frequent 3-letter strings.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport pandas as pd\ndef task_func(n_rows=1000):\n```",
        "gt": "import random\nimport string\nimport pandas as pd\ndef task_func(n_rows=1000):\n    # Check if n_rows is positive\n    if n_rows <= 0:\n        raise ValueError(\"Number of rows must be greater than 0\")\n\n    # Generate random strings\n    data = [\"\".join(random.choices(string.ascii_lowercase, k=3)) for _ in range(n_rows)]\n    df = pd.DataFrame(data, columns=[\"String\"])\n\n    # Aggregate and plot the data\n    frequency = df[\"String\"].value_counts()\n    ax = frequency.head(30).plot(\n        kind=\"bar\"\n    )  # Limit to the top 30 frequencies for readability\n    ax.set_title(\"Top 30 Frequencies of Random 3-Letter Strings\")\n    ax.set_xlabel(\"String\")\n    ax.set_ylabel(\"Frequency\")\n\n    return ax",
        "test": "import unittest\nimport random\nfrom matplotlib.axes import Axes\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def test_return_type(self):\n        \"\"\"Test if the function returns a Matplotlib Axes object.\"\"\"\n        random.seed(0)\n        result = task_func(100)\n        self.assertIsInstance(result, Axes)\n    def test_default_parameter(self):\n        \"\"\"Test the function with the default parameter.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, Axes)\n    def test_zero_rows(self):\n        \"\"\"Test the function with zero rows.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(0)\n    def test_negative_rows(self):\n        \"\"\"Test the function with a negative number of rows.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(-1)\n    def test_large_number_of_rows(self):\n        \"\"\"Test the function with a large number of rows.\"\"\"\n        random.seed(2)\n        result = task_func(10000)\n        self.assertIsInstance(result, Axes)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalize numeric columns in a DataFrame and draw a box plot for each column. Missing values are replaced by column's average.\nThe function should output with:\n    DataFrame: A pandas DataFrame after normalization.\n    Axes: A matplotlib Axes displaying a box plot for each column.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "from sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    df = df.fillna(df.mean(axis=0))\n    scaler = MinMaxScaler()\n    df[df.columns] = scaler.fit_transform(df[df.columns])\n    plt.figure(figsize=(10, 5))\n    df.boxplot(grid=False, vert=False, fontsize=15)\n    return df, plt.gca()",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame(\n            [[1, 2, 3], [4, 5, 6], [7.0, np.nan, 9.0]], columns=[\"c1\", \"c2\", \"c3\"]\n        )\n        normalized_df, ax = task_func(df)\n        self.assertTrue(np.allclose(normalized_df[\"c1\"].tolist(), [0.0, 0.5, 1.0]))\n        self.assertTrue(np.allclose(normalized_df[\"c2\"].tolist(), [0.0, 1.0, 0.5]))\n        self.assertTrue(np.allclose(normalized_df[\"c3\"].tolist(), [0.0, 0.5, 1.0]))\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=[\"c1\", \"c2\", \"c3\"])\n        normalized_df, ax = task_func(df)\n        self.assertTrue(np.allclose(normalized_df[\"c1\"].tolist(), [0.0, 0.5, 1.0]))\n        self.assertTrue(np.allclose(normalized_df[\"c2\"].tolist(), [0.0, 0.5, 1.0]))\n        self.assertTrue(np.allclose(normalized_df[\"c3\"].tolist(), [0.0, 0.5, 1.0]))\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_3(self):\n        df = pd.DataFrame(\n            [[1, 2, 3, 4, 5], [None, None, None, None, None]],\n            columns=[\"c1\", \"c2\", \"c3\", \"c4\", \"c5\"],\n        )\n        normalized_df, ax = task_func(df)\n        for col in df.columns:\n            self.assertTrue(normalized_df[col].max() <= 1.0)\n            self.assertTrue(normalized_df[col].min() >= 0.0)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_4(self):\n        df = pd.DataFrame(\n            [[11, 2, 13, 7], [1, 5, 6, 16], [15, 3, 14, 9], [8, 10, 4, 12]],\n            columns=[\"c1\", \"c2\", \"c3\", \"c4\"],\n        )\n        normalized_df, ax = task_func(df)\n        for col in df.columns:\n            self.assertTrue(normalized_df[col].max() <= 1.0)\n            self.assertTrue(normalized_df[col].min() >= 0.0)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_5(self):\n        df = pd.DataFrame(\n            [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], columns=[\"c1\", \"c2\"]\n        )\n        normalized_df, ax = task_func(df)\n        for col in df.columns:\n            self.assertTrue(np.isclose(normalized_df[col].max(), 1.0, atol=1e-5))\n            self.assertTrue(normalized_df[col].min() >= 0.0)\n        self.assertListEqual(\n            normalized_df.loc[:, \"c1\"].tolist(), [0.0, 0.25, 0.5, 0.75, 1.0]\n        )\n        self.assertListEqual(\n            normalized_df.loc[:, \"c2\"].tolist(), [0.0, 0.25, 0.5, 0.75, 1.0]\n        )\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Visualize the distribution of goals and penalties for a number of teams and return the data as a DataFrame with colomns 'Team', 'Goals' and 'Penalties'.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with the goals and penalties for the teams.\n    Axes: A seaborn pairplot visualization of goals and penalties distribution for the teams.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(goals, penalties):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(goals, penalties):\n    # Constants\n    TEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\n\n    data = []\n    for team in TEAMS:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        data.append([team, team_goals, team_penalties])\n\n    df = pd.DataFrame(data, columns=['Team', 'Goals', 'Penalties'])\n\n    plot = sns.pairplot(df, hue='Team')\n\n    return df, plot",
        "test": "import unittest\nfrom unittest.mock import patch\n# Unit tests for the function task_func\nclass TestCases(unittest.TestCase):\n    @patch('matplotlib.pyplot.show')\n    def test_visualization_output(self, mock_show):\n        goals = {'Team A': 3, 'Team B': 2, 'Team C': 0}\n        penalties = {'Team A': 1, 'Team B': 0, 'Team C': 2}\n        df, _ = task_func(goals, penalties)\n        self.assertEqual(list(df.columns), ['Team', 'Goals', 'Penalties'])\n        self.assertEqual(df['Goals'].sum(), 5)\n        self.assertEqual(df['Penalties'].sum(), 3)\n    def test_empty_input(self):\n        goals = {}\n        penalties = {}\n        df, _ = task_func(goals, penalties)\n        # The dataframe should have the teams but with 0 goals and penalties.\n        expected_data = {\n            'Team': ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\n            'Goals': [0, 0, 0, 0, 0],\n            'Penalties': [0, 0, 0, 0, 0]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_plot_type(self):\n        goals = {'Team A': 1}\n        penalties = {'Team A': 1}\n        _, plot = task_func(goals, penalties)\n        self.assertIsInstance(plot, sns.axisgrid.PairGrid)\n    def test_invalid_keys(self):\n        goals = {'Team Z': 1}\n        penalties = {'Team Z': 1}\n        df, _ = task_func(goals, penalties)\n        self.assertFalse('Team Z' in df['Team'].values)\n    @patch('matplotlib.pyplot.show')\n    def test_data_integrity(self, mock_show):\n        goals = {'Team A': 3, 'Team B': 2, 'Team C': 1}\n        penalties = {'Team A': 1, 'Team B': 2, 'Team C': 3}\n        df, _ = task_func(goals, penalties)\n        expected_data = {\n            'Team': ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\n            'Goals': [3, 2, 1, 0, 0],\n            'Penalties': [1, 2, 3, 0, 0]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        pd.testing.assert_frame_equal(df, expected_df, check_like=True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Add a new key \"a\" with the value 1 to the input dictionary, calculate the frequency of its values, and save the updated dictionary along with its frequency distribution to a JSON file. The dictionary is saved under the key 'data' and the frequency distribution under the key 'freq'.\nThe function should output with:\n    str: The path of the JSON file.\nYou should write self-contained code starting with:\n```\nimport collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n```",
        "gt": "import collections\nimport json\nimport os\ndef task_func(data, json_file_name='data.json'):\n    # Add new key 'a' with value 1\n    data['a'] = 1\n\n    # Calculate the frequency of values in `data`\n    freq = collections.Counter(data.values())\n\n    # Save the updated `data` and the `freq` into a JSON file\n    json_data = {'data': data, 'freq': dict(freq)}\n    json_file_path = os.path.join(os.getcwd(), json_file_name)\n    with open(json_file_path, 'w') as json_file:\n        json.dump(json_data, json_file)\n\n    return json_file_path",
        "test": "import unittest\nimport tempfile\nimport doctest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.json_file = tempfile.NamedTemporaryFile(delete=False)\n    def tearDown(self):\n        os.unlink(self.json_file.name)\n    def test_case_1(self):\n        data = {'key1': 'value1', 'key2': 'value2', 'key3': 'value1'}\n        result_path = task_func(data, self.json_file.name)\n        self.assertTrue(os.path.exists(result_path), \"JSON file doesn't exist.\")\n        with open(result_path, 'r') as f:\n            json_data = json.load(f)\n            self.assertEqual(json_data['data']['a'], 1)\n            self.assertEqual(json_data['freq']['value1'], 2)\n    \n    def test_case_2(self):\n        data = {}\n        result_path = task_func(data, self.json_file.name)\n        self.assertTrue(os.path.exists(result_path), \"JSON file doesn't exist.\")\n        with open(result_path, 'r') as f:\n            json_data = json.load(f)\n            self.assertEqual(json_data['data']['a'], 1)\n            self.assertEqual(json_data['freq']['1'], 1)\n    \n    def test_case_3(self):\n        data = {'x': 'y', 'z': 'y'}\n        result_path = task_func(data, self.json_file.name)\n        self.assertTrue(os.path.exists(result_path), \"JSON file doesn't exist.\")\n        with open(result_path, 'r') as f:\n            json_data = json.load(f)\n            self.assertEqual(json_data['data']['a'], 1)\n            self.assertEqual(json_data['freq']['y'], 2)\n            \n    def test_case_4(self):\n        data = {'e': 'b', 'c': 'd'}\n        result_path = task_func(data, self.json_file.name)\n        self.assertTrue(os.path.exists(result_path), \"JSON file doesn't exist.\")\n        with open(result_path, 'r') as f:\n            json_data = json.load(f)\n            self.assertEqual(json_data['data']['a'], 1)\n            self.assertEqual(json_data['freq']['b'], 1)\n            \n    def test_case_5(self):\n        data = {'apple': 'fruit', 'carrot': 'vegetable'}\n        result_path = task_func(data, self.json_file.name)\n        self.assertTrue(os.path.exists(result_path), \"JSON file doesn't exist.\")\n        with open(result_path, 'r') as f:\n            json_data = json.load(f)\n            self.assertEqual(json_data['data']['a'], 1)\n            self.assertEqual(json_data['freq']['fruit'], 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Validates that a given file path does not contain invalid characters for file paths then splits it into path components using a specified delimiter.\nNote that: Notes: Backslashes ('\\\\') are internally converted to forward slashes ('/') before processing. This function treats '<', '>', ':', '\"', '|', '?', '*' as invalid characters in paths.\nThe function should raise the exception for: ValueError: If the path contains invalid characters.\nThe function should output with:\n    list: A list of the path components if the path is valid;\n    otherwise, an empty list if the path contains invalid characters.\nYou should write self-contained code starting with:\n```\nimport pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n```",
        "gt": "import pathlib\nimport os\ndef task_func(path: str, delimiter: str = os.path.sep) -> list:\n\n    if not path:\n        return []\n\n    path = path.replace(\"\\\\\", \"/\")\n\n    path_obj = pathlib.Path(path)\n\n    invalid_chars = set('<>:\"|?*')\n    if any(\n        set(str(component)).intersection(invalid_chars) for component in path_obj.parts\n    ):\n        return []\n\n    return [\n        component\n        for component in path_obj.parts\n        if component and component != delimiter\n    ]",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing a standard UNIX-like path with '/' delimiter\n        self.assertEqual(\n            task_func(\"Docs/src/Scripts/temp\", \"/\"),\n            [\"Docs\", \"src\", \"Scripts\", \"temp\"],\n        )\n    def test_case_2(self):\n        # Testing a standard Windows-like path with '\\' delimiter\n        self.assertEqual(\n            task_func(\"Docs\\\\src\\\\Scripts\\\\temp\", \"\\\\\"),\n            [\"Docs\", \"src\", \"Scripts\", \"temp\"],\n        )\n    def test_case_3(self):\n        # Testing an empty path string\n        self.assertEqual(task_func(\"\", \"/\"), [])\n    def test_case_4(self):\n        # Testing a path with invalid characters\n        self.assertEqual(task_func(\"Docs/src/Scripts|temp\", \"/\"), [])\n    def test_case_5(self):\n        # Testing a path with a different delimiter\n        self.assertEqual(task_func(\"Docs|src|Scripts|temp\", \"|\"), [])\n    def test_case_6(self):\n        # Handle leading and trailing delimiters\n        self.assertEqual(task_func(\"/Docs/src/Scripts/\", \"/\"), [\"Docs\", \"src\", \"Scripts\"])\n    def test_case_7(self):\n        # Test mixed delimiters given expected conversion\n        self.assertEqual(\n            task_func(\"Docs/src\\\\Scripts/temp\", \"\\\\\"), [\"Docs\", \"src\", \"Scripts\", \"temp\"]\n        )\n        self.assertEqual(\n            task_func(\"Docs/src\\\\Scripts/temp\", \"/\"), [\"Docs\", \"src\", \"Scripts\", \"temp\"]\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate n random strings of a specified length, count the frequency of each character across all strings, and return the result as a dictionary. Constants: - VALID_CHARACTERS: A string containing all valid characters (ASCII letters and digits) that can be used in the random strings.\nThe function should output with:\n    dict: A dictionary containing character counts with characters as keys and their frequencies as values.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport collections\n# Constants\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n```",
        "gt": "import random\nimport string\nimport collections\n# Constants\nVALID_CHARACTERS = string.ascii_letters + string.digits\ndef task_func(n_strings, string_length):\n    strings = [''.join(random.choice(VALID_CHARACTERS) for _ in range(string_length)) for _ in range(n_strings)]\n    character_counts = collections.Counter(''.join(strings))\n    return dict(character_counts)",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_single_string_single_character(self):\n        # Test when n_strings=1 and string_length=1 (minimal input)\n        result = task_func(1, 1)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(sum(result.values()), 1)\n    def test_multiple_strings_single_character(self):\n        # Test when n_strings > 1 and string_length=1\n        result = task_func(5, 1)\n        self.assertTrue(len(result) <= 5)\n        self.assertEqual(sum(result.values()), 5)\n    def test_single_string_multiple_characters(self):\n        # Test when n_strings=1 and string_length > 1\n        result = task_func(1, 5)\n        self.assertTrue(len(result) <= 5)\n        self.assertEqual(sum(result.values()), 5)\n    def test_multiple_strings_multiple_characters(self):\n        # Test when n_strings > 1 and string_length > 1\n        result = task_func(5, 5)\n        self.assertTrue(len(result) <= 25)\n        self.assertEqual(sum(result.values()), 25)\n    def test_valid_characters(self):\n        # Test whether the function only uses valid characters as defined in VALID_CHARACTERS\n        result = task_func(100, 10)\n        all_characters = ''.join(result.keys())\n        self.assertTrue(all(char in VALID_CHARACTERS for char in all_characters))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a CSV file with 100 lines. Each line contains a name and an age (randomly generated between 20 and 50). Half of the names are randomly selected from a list of Latin names (default: ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz']), the other half from a list of English names (default: ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones']). All names are encoded using the specified encoding. If empty name arrays are passed, a csv with headers but no entries is generated. Args: - csv_file (str, optional): Name of the CSV file to be created. Defaults to 'names.csv'. - latin_names (list, optional): List of Latin names. Defaults to ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz']. - names (list, optional): List of English names. Defaults to ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones']. - encoding (str, optional): The encoding used for writing the names. Defaults to 'latin-1' - rng_seed (int, optional): The seed for the rng. Defaults to None. >>> file_name = task_func(csv_file='test.csv', names=['simon', 'alex'], rng_seed=1) >>> with open(file_name, 'r', newline='', encoding='latin-1') as csvfile: ...     reader = csv.reader(csvfile) ...     rows = list(reader) ...     print(rows) [['Name', 'Age'], ['M\u00e9ndez', '38'], ['simon', '28'], ['Sopet\u00f3n', '35'], ['alex', '35'], ['P\u00e9rez', '45'], ['simon', '23'], ['P\u00e9rez', '20'], ['alex', '33'], ['Mu\u00f1oz', '44'], ['simon', '42'], ['P\u00e9rez', '28'], ['simon', '38'], ['Sopet\u00f3n', '48'], ['alex', '20'], ['Sopet\u00f3n', '20'], ['simon', '50'], ['P\u00e9rez', '41'], ['simon', '33'], ['Sopet\u00f3n', '36'], ['simon', '44'], ['P\u00e9rez', '50'], ['alex', '37'], ['M\u00e9ndez', '31'], ['simon', '41'], ['M\u00e9ndez', '44'], ['alex', '50'], ['G\u00f3mez', '49'], ['simon', '33'], ['Mu\u00f1oz', '49'], ['simon', '25'], ['G\u00f3mez', '23'], ['alex', '48'], ['Mu\u00f1oz', '49'], ['alex', '36'], ['M\u00e9ndez', '29'], ['alex', '38'], ['P\u00e9rez', '47'], ['alex', '38'], ['Sopet\u00f3n', '35'], ['simon', '43'], ['P\u00e9rez', '33'], ['simon', '31'], ['Mu\u00f1oz', '48'], ['alex', '22'], ['P\u00e9rez', '41'], ['simon', '44'], ['M\u00e9ndez', '36'], ['alex', '31'], ['P\u00e9rez', '43'], ['simon', '35'], ['Sopet\u00f3n', '29'], ['alex', '40'], ['M\u00e9ndez', '25'], ['simon', '20'], ['M\u00e9ndez', '37'], ['simon', '32'], ['Mu\u00f1oz', '31'], ['alex', '34'], ['G\u00f3mez', '41'], ['simon', '32'], ['Mu\u00f1oz', '45'], ['simon', '36'], ['Mu\u00f1oz', '26'], ['alex', '50'], ['Sopet\u00f3n', '35'], ['alex', '38'], ['Mu\u00f1oz', '26'], ['alex', '35'], ['G\u00f3mez', '33'], ['alex', '20'], ['Mu\u00f1oz', '37'], ['alex', '34'], ['Mu\u00f1oz', '20'], ['simon', '40'], ['M\u00e9ndez', '37'], ['simon', '47'], ['Sopet\u00f3n', '45'], ['alex', '21'], ['Sopet\u00f3n', '22'], ['simon', '34'], ['Sopet\u00f3n', '44'], ['alex', '27'], ['G\u00f3mez', '23'], ['simon', '31'], ['G\u00f3mez', '22'], ['simon', '25'], ['G\u00f3mez', '36'], ['simon', '41'], ['G\u00f3mez', '40'], ['alex', '34'], ['G\u00f3mez', '35'], ['alex', '23'], ['Sopet\u00f3n', '29'], ['alex', '30'], ['P\u00e9rez', '45'], ['simon', '28'], ['Sopet\u00f3n', '28'], ['simon', '50'], ['Mu\u00f1oz', '33'], ['simon', '27']]\nThe function should raise the exception for: TypeError: If csv_file is not a string. TypeError: If latin_names is not an array. TypeError: If names is not an array.\nThe function should output with:\n    str: The CSV file name.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\ndef task_func(csv_file='names.csv', \n          latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n          names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n          encoding='latin-1', rng_seed=None):\n```",
        "gt": "import csv\nimport random\ndef task_func(csv_file='names.csv', \n          latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n          names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'],\n          encoding='latin-1', rng_seed=None):\n\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file should be a string.\")\n    \n    if not isinstance(names, list):\n        raise TypeError(\"names should be a list.\")\n    \n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names should be a list.\")\n\n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        fieldnames = ['Name', 'Age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n\n        for _ in range(50):\n            if latin_names:\n                writer.writerow({'Name': random.choice(latin_names), 'Age': random.randint(20, 50)})\n            if names:\n                writer.writerow({'Name': random.choice(names), 'Age': random.randint(20, 50)})\n\n    return csv_file",
        "test": "import unittest\nimport os\nimport csv\nfrom faker import Faker\nfrom pathlib import Path\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        'default params'\n        latin_names = ['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz']\n        names = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones']\n        file_name = task_func(rng_seed=1)\n        self.assertEqual(file_name, 'names.csv')\n        self.assertTrue(os.path.isfile(file_name))\n        with open(file_name, 'r', newline='', encoding='latin-1') as csvfile:\n            reader = csv.reader(csvfile)\n            rows = list(reader)\n            self.assertEqual(len(rows), 101)\n            self.assertEqual(rows[0], ['Name', 'Age'])\n            csv_names = [row[0] for row in rows[1:]]\n            for name in csv_names:\n                self.assertIn(name, latin_names+names)\n            ages = [int(row[1]) for row in rows[1:]]\n            for age in ages:\n                self.assertTrue(20 <= age <= 50)\n        # remove file\n        Path(file_name).unlink()\n    def test_rng(self):\n        'test rng reproducability'\n        file_name1 = task_func(csv_file='test1.csv', rng_seed=12)\n        file_name2 = task_func(csv_file='test2.csv', rng_seed=12)\n        self.assertEqual(file_name1, 'test1.csv')\n        self.assertEqual(file_name2, 'test2.csv')\n        self.assertTrue(os.path.isfile(file_name1))\n        self.assertTrue(os.path.isfile(file_name2))\n        with open(file_name1, 'r', newline='', encoding='latin-1') as file1:\n            with open(file_name2, 'r', newline='', encoding='latin-1') as file2:\n                reader1 = csv.reader(file1)\n                rows1 = list(reader1)\n                reader2 = csv.reader(file2)\n                rows2 = list(reader2)\n                self.assertEqual(rows1, rows2)\n        # remove files\n        Path(file_name1).unlink()\n        Path(file_name2).unlink()\n    def test_case_2(self):\n        'different encoding'\n        custom_file = 'custom_names.csv'\n        latin_names = ['M\u00e9ndez']\n        names = ['Simon']\n        file_name = task_func(csv_file=custom_file, names=names, encoding='utf-8',\n                          latin_names=latin_names, rng_seed=1)\n        self.assertEqual(file_name, custom_file)\n        self.assertTrue(os.path.isfile(custom_file))\n        with open(file_name, 'r', newline='', encoding='utf-8') as csvfile:\n            reader = csv.reader(csvfile)\n            rows = list(reader)\n            self.assertEqual(len(rows), 101)\n            self.assertEqual(rows[0], ['Name', 'Age'])\n            csv_names = [row[0] for row in rows[1:]]\n            for name in csv_names:\n                self.assertIn(name, latin_names+names)\n            ages = [int(row[1]) for row in rows[1:]]\n            for age in ages:\n                self.assertTrue(20 <= age <= 50)\n        # remove file\n        Path(file_name).unlink()\n    def test_case_3(self):\n        latin_names = [Faker().first_name() for _ in range(5)]\n        names = [Faker().first_name() for _ in range(5)]\n        file_name = task_func(latin_names=latin_names, names=names, rng_seed=1)\n        self.assertEqual(file_name, file_name)\n        self.assertTrue(os.path.isfile(file_name))\n        with open(file_name, 'r', newline='', encoding='latin-1') as csvfile:\n            reader = csv.reader(csvfile)\n            rows = list(reader)\n            self.assertEqual(len(rows), 101)\n            self.assertEqual(rows[0], ['Name', 'Age'])\n            csv_names = [row[0] for row in rows[1:]]\n            for name in csv_names:\n                self.assertIn(name, latin_names+names)\n            ages = [int(row[1]) for row in rows[1:]]\n            for age in ages:\n                self.assertTrue(20 <= age <= 50)\n        # remove file\n        Path(file_name).unlink()\n    def test_case_4(self):\n        'emtpy name lists'\n        file_name = task_func(latin_names=[], names=[], rng_seed=1)\n        self.assertEqual(file_name, file_name)\n        self.assertTrue(os.path.isfile(file_name))\n        with open(file_name, 'r', newline='', encoding='latin-1') as csvfile:\n            reader = csv.reader(csvfile)\n            rows = list(reader)\n            self.assertEqual(len(rows), 1)\n            self.assertEqual(rows[0], ['Name', 'Age'])\n        # remove file\n        Path(file_name).unlink()\n    def test_case_5(self):\n        'edge cases'\n        self.assertRaises(Exception, task_func, {'csv_file': 1, 'rng_seed': 12})\n        self.assertRaises(Exception, task_func, {'latin_names': 'test', 'rng_seed': 12})\n        self.assertRaises(Exception, task_func, {'names': 24, 'rng_seed': 12})\n        # remove file if generated\n        if os.path.isfile('names.csv'):\n            Path('names.csv').unlink()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of a matrix \"P\" and a 3D tensor \"T\" with numpy and then apply PCA to reduce the dimensionality of the result. The resulting 2D data is then visualized.\nNote that: This function only accepts numpy matrices/arrays.\nThe function should output with:\n    pca_result (numpy.ndarray): The result of PCA of shape (N, 2), where N is the number of rows in matrix P.\n    ax (matplotlib.axes.Axes): Plot of 'PCA Result Visualization', with 'Principal Component 1' on the x-axis\n    and 'Principal Component 2' on the y-axis.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n```",
        "gt": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(P, T, tensor_shape=(3, 3, 3)):\n    if not (isinstance(P, np.ndarray) and isinstance(T, np.ndarray)):\n        raise TypeError(\"Expected inputs to be numpy arrays\")\n\n    if not T.shape == tensor_shape:\n        raise ValueError(\"Provided tensor does not match the specified tensor_shape.\")\n\n    result = np.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)\n\n    # Reshape the result for PCA\n    result = result.reshape(result.shape[0], -1)\n    pca = PCA(n_components=2)\n    pca_result = pca.fit_transform(result)\n\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    ax.set_title(\"PCA Result Visualization\")\n    ax.set_xlabel(\"Principal Component 1\")\n    ax.set_ylabel(\"Principal Component 2\")\n\n    return pca_result, ax",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        # Set up common matrices and tensors for testing\n        self.TENSOR_SHAPE = (3, 3, 3)\n        self.P = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1]])\n        self.T = np.random.rand(*self.TENSOR_SHAPE)\n        self.T_zeros = np.zeros(self.TENSOR_SHAPE)\n        self.T_ones = np.ones(self.TENSOR_SHAPE)\n    def test_case_1(self):\n        # Test results and plot correctness\n        pca_result, ax = task_func(self.P, self.T)\n        self._common_assertions(pca_result, ax)\n    def test_case_2(self):\n        # Function should fail when input types are invalid\n        with self.assertRaises(Exception):\n            task_func(\"not a numpy array\", self.T, self.TENSOR_SHAPE)\n        with self.assertRaises(Exception):\n            task_func(self.P, \"not a numpy array\", self.TENSOR_SHAPE)\n        with self.assertRaises(Exception):\n            task_func([], [], self.TENSOR_SHAPE)\n    def test_case_3(self):\n        # Function should fail when input shapes are invalid\n        T_incorrect_shape = np.random.rand(2, 2, 2)\n        with self.assertRaises(Exception):\n            task_func(self.P, T_incorrect_shape, self.TENSOR_SHAPE)\n        with self.assertRaises(Exception):\n            task_func(np.array([]), np.array([]), self.TENSOR_SHAPE)\n    def test_case_4(self):\n        # Test custom shapes\n        P = np.random.rand(5, 4)\n        T = np.random.rand(5, 4, 4)\n        pca_result, ax = task_func(P, T, tensor_shape=T.shape)\n        self._common_assertions(pca_result, ax)\n    def test_case_5(self):\n        # Test with zeros\n        pca_result, ax = task_func(self.P, self.T_zeros)\n        self._common_assertions(pca_result, ax)\n    def test_case_6(self):\n        # Adjusting the matrix and tensor to have a slight variation\n        P = np.array([[1.01, 0.01, 0.01], [0.01, 1.01, 0.01], [0.01, 0.01, 1.01]])\n        T = np.ones(self.TENSOR_SHAPE) + 0.01 * np.random.rand(*self.TENSOR_SHAPE)\n        pca_result, ax = task_func(P, T)\n        # Assert that the PCA results don't produce NaN values and that there's a reduction in dimensionality\n        self.assertFalse(np.isnan(pca_result).any())\n        self.assertEqual(pca_result.shape[1], 2)\n        # Also check common assertions\n        self._common_assertions(pca_result, ax)\n    def _common_assertions(self, pca_result, ax):\n        # Common assertions for shape and plot labels\n        self.assertEqual(pca_result.shape[1], 2)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"PCA Result Visualization\")\n        self.assertEqual(ax.get_xlabel(), \"Principal Component 1\")\n        self.assertEqual(ax.get_ylabel(), \"Principal Component 2\")\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a table displaying the system's CPU usage, memory usage, and disk usage.\nThe function should output with:\n    A string representation of a table with the columns of 'Item' and 'Value',\n    and the following system information:\n    CPU Usage (%)\n    Memory Usage (%)\n    Disk Usage (%)\nYou should write self-contained code starting with:\n```\nfrom texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n```",
        "gt": "from texttable import Texttable\nimport os\nimport psutil\ndef task_func():\n    cpu_usage = psutil.cpu_percent(interval=1)\n    memory_info = psutil.virtual_memory()\n    disk_usage = psutil.disk_usage(os.sep)\n\n    table = Texttable()\n    table.add_rows([\n        ['Item', 'Value'],\n        ['CPU Usage (%)', cpu_usage],\n        ['Memory Usage (%)', memory_info.percent],\n        ['Disk Usage (%)', disk_usage.percent]\n    ])\n    return table.draw()",
        "test": "import unittest\nimport re  # Import the regular expressions library\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.result = task_func()\n    def test_return_type(self):\n        \"\"\"Test that the function returns a string.\"\"\"\n        self.assertIsInstance(self.result, str)\n    def test_table_headers(self):\n        \"\"\"Test the presence of correct headers in the table.\"\"\"\n        for header in ['CPU Usage (%)', 'Memory Usage (%)', 'Disk Usage (%)']:\n            with self.subTest(header=header):\n                self.assertIn(header, self.result)\n    def test_proper_values(self):\n        \"\"\"Test that the table's values are not empty or zero.\"\"\"\n        # Extract numeric values using a regular expression\n        values = re.findall(r'\\|\\s*[\\d.]+\\s*\\|', self.result)\n        # Convert extracted strings to float and test they are greater than 0\n        for value_str in values:\n            value = float(value_str.strip('| ').strip())\n            with self.subTest(value=value):\n                self.assertTrue(0 <= value <= 100)\n    def test_value_ranges(self):\n        \"\"\"Test that CPU and memory usage percentages are within 0-100%.\"\"\"\n        values = re.findall(r'\\|\\s*[\\d.]+\\s*\\|', self.result)\n        for value_str in values:\n            value = float(value_str.strip('| ').strip())\n            with self.subTest(value=value):\n                self.assertTrue(0 <= value <= 100)\n    def test_table_structure(self):\n        \"\"\"Test that the table's structure is as expected.\"\"\"\n        # Split the table into rows based on the unique row separator pattern\n        parts = self.result.split('+------------------+--------+')\n        # Filter out empty parts that might occur due to the split operation\n        non_empty_parts = [part for part in parts if part.strip()]\n        # Expect 4 non-empty parts: 1 header row + 3 data rows\n        self.assertTrue(1 <= len(non_empty_parts) <= 3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Visualizes the scores of students over multiple tests using a line plot. The function takes in a list of dictionaries. Each dictionary contains the name of a student (key) and their score (value). It combines these dictionaries into a pandas DataFrame and plots a line graph of student scores over tests, where the x-axis represents the test number and the y-axis represents the score. Each student's scores are plotted as separate lines. Missing scores are handled by not plotting those specific data points, allowing for discontinuous lines where data is missing.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_list):\n    df = pd.DataFrame(data_list)\n    fig, ax = plt.subplots()\n    for column in df:\n        ax.plot(df[column], label=column)\n    ax.set_title(\"Student Scores over Tests\")\n    ax.set_xlabel(\"Test Number\")\n    ax.set_ylabel(\"Score\")\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = [\n            {\"John\": 5, \"Jane\": 10, \"Joe\": 7},\n            {\"John\": 6, \"Jane\": 8, \"Joe\": 10},\n            {\"John\": 5, \"Jane\": 9, \"Joe\": 8},\n            {\"John\": 7, \"Jane\": 10, \"Joe\": 9},\n        ]\n        self.validate_plot(data)\n    def test_case_2(self):\n        data = [{\"John\": 3}, {\"John\": 4}, {\"John\": 5}, {\"John\": 6}]\n        self.validate_plot(data)\n    def test_case_3(self):\n        data = [\n            {\"John\": 3, \"Jane\": 2},\n            {\"John\": 4, \"Jane\": 3},\n            {\"John\": 5, \"Jane\": 4},\n            {\"John\": 6, \"Jane\": 5},\n        ]\n        self.validate_plot(data)\n    def test_case_4(self):\n        data = [\n            {\"John\": 10, \"Jane\": 20, \"Joe\": 15, \"Jack\": 25},\n            {\"John\": 12, \"Jane\": 18, \"Joe\": 14, \"Jack\": 24},\n            {\"John\": 11, \"Jane\": 19, \"Joe\": 13, \"Jack\": 23},\n            {\"John\": 13, \"Jane\": 21, \"Joe\": 16, \"Jack\": 22},\n        ]\n        self.validate_plot(data)\n    def test_case_5(self):\n        data = [\n            {\"John\": 7, \"Jane\": 8},\n            {\"John\": 8, \"Jane\": 7},\n            {\"John\": 7, \"Jane\": 8},\n            {\"John\": 8, \"Jane\": 7},\n        ]\n        self.validate_plot(data)\n    def test_case_6(self):\n        data = []\n        self.validate_plot(data)\n    def test_case_7(self):\n        # Floats\n        data = [{\"John\": 5.5, \"Jane\": 10.1}, {\"John\": 6.75, \"Jane\": 8.25}]\n        self.validate_plot(data)\n    def test_case_8(self):\n        # Missing scores\n        data = [{\"John\": 5, \"Jane\": 10}, {\"Jane\": 8, \"Joe\": 7}, {\"John\": 6}]\n        self.validate_plot(data)\n    def validate_plot(self, data):\n        ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        df = pd.DataFrame(data)\n        for idx, column in enumerate(df):\n            plotted_data_y = ax.lines[idx].get_ydata()\n            expected_data_y = df[column].values.astype(float)\n            # Handle float comparisons\n            np.testing.assert_allclose(\n                plotted_data_y, expected_data_y, rtol=1e-5, atol=1e-8, equal_nan=True\n            )\n            plotted_data_x = ax.lines[idx].get_xdata().astype(int)\n            expected_data_x = np.arange(len(df[column].values))\n            self.assertTrue(\n                np.array_equal(plotted_data_x, expected_data_x),\n                msg=f\"X-data Mismatch for {column}. Plotted: {plotted_data_x}, Expected: {expected_data_x}\",\n            )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the k largest numbers in a random-generated list using heapq.\nThe function should output with:\n    tuple: A tuple containing two lists:\n    list[int]: The randomly generated list of integers with the specified length.\n    list[int]: The k largest numbers found using heapq.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport random\ndef task_func(list_length:5, k:int):\n```",
        "gt": "import heapq\nimport random\ndef task_func(list_length:5, k:int):\n\n    \n    numbers = [random.randint(0, 100) for _ in range(list_length)]\n    heapq.heapify(numbers)\n    largest_numbers = heapq.nlargest(k, numbers)\n   \n    return numbers, largest_numbers",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_empty_list(self):\n        random.seed(0)\n        rand_list, top_k = task_func(0, 3)\n        self.assertEqual(rand_list, [])\n        self.assertEqual(top_k, [])\n    def test_k_larger_than_list_length(self):\n        random.seed(0)\n        rand_list, top_k = task_func(5, 10)\n        self.assertEqual(len(rand_list), 5)\n        self.assertEqual(len(top_k), 5)\n    def test_sorted_list(self):\n        random.seed(0)\n        rand_list, top_k = task_func(100, 3)\n        self.assertEqual(top_k, sorted(rand_list, reverse=True)[:3])\n    def test_top_k_sorted(self):\n        random.seed(0)\n        rand_list, top_k = task_func(100, 5)\n        self.assertEqual(top_k, sorted(top_k, reverse=True)[:5])\n    \n    def test_top_k_sorted_first(self):\n        random.seed(0)\n        rand_list, top_k = task_func(100, 5)\n        self.assertEqual(top_k[0], sorted(top_k, reverse=True)[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts files with specific extensions (.txt, .docx, .xlsx, .csv) from a source directory to CSV files and saves them in a target directory.\nNote that: Notes: Each file's text content is captured and stored in a CSV with a single 'Text' column and no row indices. This function will overwrite existing files in the target directory if they have the same names as the converted files.\nThe function should raise the exception for: FileNotFoundError: If the source directory does not exist.\nThe function should output with:\n    int: The number of files successfully converted to CSV.\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\ndef task_func(source_directory: str, target_directory: str) -> int:\n```",
        "gt": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\ndef task_func(source_directory: str, target_directory: str) -> int:\n    converted_files = 0\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"source_directory must exist.\")\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory, exist_ok=True)\n\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            extension = Path(file).suffix\n            if extension in extensions:\n                filepath = os.path.join(root, file)\n                target_filepath = os.path.join(\n                    target_directory, Path(file).stem + \".csv\"\n                )\n                if extension == \".csv\":\n                    df = pd.read_csv(filepath)\n                elif extension == \".xlsx\":\n                    df = pd.read_excel(filepath, engine=\"openpyxl\")\n                elif extension == \".docx\":\n                    doc = docx.Document(filepath)\n                    data = [p.text for p in doc.paragraphs]\n                    df = pd.DataFrame({\"Text\": data})\n                elif extension == \".txt\":\n                    with open(filepath, \"r\") as f:\n                        data = f.readlines()\n                    df = pd.DataFrame({\"Text\": data})\n\n                df.to_csv(target_filepath, index=False)\n                converted_files += 1\n\n    return converted_files",
        "test": "import unittest\nimport os\nimport docx\nimport pandas as pd\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_source_dir = tempfile.TemporaryDirectory()\n        self.temp_target_dir = tempfile.TemporaryDirectory()\n        self.source_dir = self.temp_source_dir.name\n        self.target_dir = self.temp_target_dir.name\n        self.test_texts = [\"Hello, world!\"] * 10\n        self.test_df = pd.DataFrame(\n            {\"A\": list(range(10)), \"B\": [str(_) for _ in range(10)]}\n        )\n    def tearDown(self):\n        self.temp_source_dir.cleanup()\n        self.temp_target_dir.cleanup()\n    def create_test_data(self, extension):\n        filename = \"sample\" + extension\n        path = os.path.join(self.source_dir, filename)\n        if extension == \".txt\":\n            with open(path, \"w\") as f:\n                for text in self.test_texts:\n                    f.write(text + \"\\n\")\n        elif extension == \".docx\":\n            doc = docx.Document()\n            for text in self.test_texts:\n                doc.add_paragraph(text)\n            doc.save(path)\n        elif extension == \".csv\":\n            self.test_df.to_csv(path, index=False)\n        elif extension == \".xlsx\":\n            self.test_df.to_excel(path, index=False)\n    def test_case_1(self):\n        # Test txt\n        self.create_test_data(\".txt\")\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 1)\n        converted_path = os.path.join(self.target_dir, \"sample.csv\")\n        self.assertTrue(os.path.exists(converted_path))\n    def test_case_2(self):\n        # Test docx\n        self.create_test_data(\".docx\")\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 1)\n        self.assertTrue(os.path.exists(os.path.join(self.target_dir, \"sample.csv\")))\n    def test_case_3(self):\n        # Test xlsx\n        self.create_test_data(\".xlsx\")\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 1)\n        self.assertTrue(os.path.exists(os.path.join(self.target_dir, \"sample.csv\")))\n    def test_case_4(self):\n        # Test csv\n        self.create_test_data(\".csv\")\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 1)\n        self.assertTrue(os.path.exists(os.path.join(self.target_dir, \"sample.csv\")))\n    def test_case_5(self):\n        # Ensure function handles directories without convertible files\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 0)\n    def test_case_6(self):\n        # Test with a source directory that does not exist\n        non_existent_dir = \"/path/does/not/exist\"\n        with self.assertRaises(FileNotFoundError):\n            task_func(non_existent_dir, self.target_dir)\n    def test_case_7(self):\n        # Ensure function does not convert unsupported file types\n        unsupported_path = os.path.join(self.source_dir, \"unsupported.pdf\")\n        open(unsupported_path, \"a\").close()\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 0)\n    def test_case_8(self):\n        # Create multiple files of supported types and verify they all get converted\n        for ext in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n            self.create_test_data(ext)\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 4)\n    def test_case_9(self):\n        # Ensure function can handle files in subdirectories of the source directory\n        sub_dir = os.path.join(self.source_dir, \"subdir\")\n        os.makedirs(sub_dir)\n        txt_path = os.path.join(sub_dir, \"sample.txt\")\n        with open(txt_path, \"w\") as f:\n            f.write(\"Hello, nested world!\")\n        num_converted = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(num_converted, 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Use a linear regression model to predict the \"value\" of \"feature\" in the given dataframe and return the coefficients and intercept.\nThe function should output with:\n    result (dict): A dictionary with the coefficients and the intercept of the fitted linear regression model.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
        "gt": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    X = np.array(df['feature']).reshape(-1,1)  # Explicitly converting to numpy array and reshaping\n    y = np.array(df['value']).reshape(-1,1)    # Explicitly converting to numpy array and reshaping\n\n    model = LinearRegression().fit(X, y)\n\n    return {'coefficients': model.coef_.tolist(), 'intercept': model.intercept_.tolist()}",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame({'feature': np.random.rand(100), 'value': np.random.rand(100)})\n        coefficients = task_func(df)\n        self.assertEqual(len(coefficients['coefficients']), 1)\n        self.assertEqual(len(coefficients['coefficients'][0]), 1)\n        self.assertEqual(len(coefficients['intercept']), 1)\n    def test_case_2(self):\n        df = pd.DataFrame({'feature': [1, 2, 3, 4, 5], 'value': [1, 2, 3, 4, 5]})\n        coefficients = task_func(df)\n        self.assertEqual(len(coefficients['coefficients']), 1)\n        self.assertEqual(len(coefficients['coefficients'][0]), 1)\n        self.assertEqual(len(coefficients['intercept']), 1)\n        self.assertAlmostEqual(coefficients['coefficients'][0][0], 1.0)\n        self.assertAlmostEqual(coefficients['intercept'][0], 0.0)\n    def test_case_3(self):\n        df = pd.DataFrame({'feature': [1, 2, 3, 4, 5], 'value': [2, 4, 6, 8, 10]})\n        coefficients = task_func(df)\n        self.assertEqual(len(coefficients['coefficients']), 1)\n        self.assertEqual(len(coefficients['coefficients'][0]), 1)\n        self.assertEqual(len(coefficients['intercept']), 1)\n        self.assertAlmostEqual(coefficients['coefficients'][0][0], 2.0)\n        self.assertAlmostEqual(coefficients['intercept'][0], 0.0)\n    def test_case_4(self):\n        df = pd.DataFrame({'feature': [0, 0, 0, 0, 0], 'value': [1, 2, 3, 4, 5]})\n        coefficients = task_func(df)\n        self.assertEqual(len(coefficients['coefficients']), 1)\n        self.assertEqual(len(coefficients['coefficients'][0]), 1)\n        self.assertEqual(len(coefficients['intercept']), 1)\n        self.assertAlmostEqual(coefficients['coefficients'][0][0], 0.0)\n        self.assertAlmostEqual(coefficients['intercept'][0], 3.0)\n    def test_case_5(self):\n        df = pd.DataFrame({'feature': [1, 2, 3, 4, 5], 'value': [0, 0, 0, 0, 0]})\n        coefficients = task_func(df)\n        self.assertEqual(len(coefficients['coefficients']), 1)\n        self.assertEqual(len(coefficients['coefficients'][0]), 1)\n        self.assertEqual(len(coefficients['intercept']), 1)\n        self.assertAlmostEqual(coefficients['coefficients'][0][0], 0.0)\n        self.assertAlmostEqual(coefficients['intercept'][0], 0.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts all URLs from a string and retrieves the domain and the expiration date of the SSL certificate for each HTTPS URL. Only HTTPS URLs are processed; HTTP URLs are ignored. The function handles SSL errors by ignoring any HTTPS URLs where the SSL certificate cannot be retrieved due to such errors, and these domains are not included in the returned dictionary.\nThe function should output with:\n    dict: A dictionary with domains as keys and SSL certificate expiry dates in UTC format as values.\n    The dictionary includes only those HTTPS URLs for which the SSL certificate was successfully retrieved.\n    Domains with SSL errors are excluded.\nYou should write self-contained code starting with:\n```\nimport re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n```",
        "gt": "import re\nimport urllib.parse\nimport ssl\nimport socket\ndef task_func(myString):\n    urls = re.findall(r'https://[^\\s,]+', myString)\n    ssl_expiry_dates = {}\n\n    for url in urls:\n        try:\n            domain = urllib.parse.urlparse(url).netloc\n            context = ssl.create_default_context()\n            with socket.create_connection((domain, 443)) as sock:\n                with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                    ssl_expiry_dates[domain] = ssock.getpeercert()['notAfter']\n        except ssl.SSLError:\n            continue  # Ignore SSL errors or log them if necessary\n\n    return ssl_expiry_dates",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport unittest\nimport re\nimport urllib.parse\nimport ssl\nimport socket\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.patcher1 = patch('socket.create_connection')\n        self.patcher2 = patch('ssl.create_default_context')\n        \n        self.mock_create_connection = self.patcher1.start()\n        self.mock_create_default_context = self.patcher2.start()\n        \n        self.mock_socket = MagicMock()\n        self.mock_ssl_context = MagicMock()\n        self.mock_ssl_socket = MagicMock()\n        \n        self.mock_create_connection.return_value.__enter__.return_value = self.mock_socket\n        self.mock_create_default_context.return_value = self.mock_ssl_context\n        self.mock_ssl_context.wrap_socket.return_value.__enter__.return_value = self.mock_ssl_socket\n    def tearDown(self):\n        self.patcher1.stop()\n        self.patcher2.stop()\n        \n    def test_basic_https_functionality(self):\n        \"\"\"Test extracting SSL expiry from properly formatted HTTPS URLs.\"\"\"\n        self.mock_ssl_socket.getpeercert.return_value = {'notAfter': '2023-06-15 12:00:00'}\n        input_str = \"https://www.google.com, https://www.python.org\"\n        result = task_func(input_str)\n        expected = {'www.google.com': '2023-06-15 12:00:00', 'www.python.org': '2023-06-15 12:00:00'}\n        self.assertEqual(result, expected)\n    def test_urls_with_ports_and_queries(self):\n        \"\"\"Test HTTPS URLs that include port numbers and query strings.\"\"\"\n        self.mock_ssl_socket.getpeercert.return_value = {'notAfter': '2023-06-15 12:00:00'}\n        input_str = \"https://www.example.com:8080/page?query=test, https://api.example.org/data?info=value\"\n        result = task_func(input_str)\n        expected = {'www.example.com:8080': '2023-06-15 12:00:00', 'api.example.org': '2023-06-15 12:00:00'}\n        self.assertEqual(result, expected)\n    def test_no_urls(self):\n        \"\"\"Test input with no URLs resulting in an empty dictionary.\"\"\"\n        result = task_func(\"No links here!\")\n        self.assertEqual(result, {})\n    def test_mixed_url_schemes(self):\n        \"\"\"Test input with mixed HTTP and HTTPS URLs; only HTTPS URLs are processed.\"\"\"\n        # Configure the mock to return SSL certificate details only for HTTPS URLs\n        self.mock_ssl_socket.getpeercert.return_value = {'notAfter': '2023-06-15 12:00:00'}\n        input_str = \"http://www.google.com, https://www.python.org\"\n        result = task_func(input_str)\n        expected = {'www.python.org': '2023-06-15 12:00:00'}\n        self.assertEqual(result, expected)\n    def test_invalid_ssl_certificate(self):\n        \"\"\"Test handling of an SSL error like an expired certificate, expecting the domain to be skipped.\"\"\"\n        self.mock_ssl_socket.getpeercert.side_effect = ssl.SSLError(\"Certificate has expired\")\n        input_str = \"https://expired.example.com\"\n        result = task_func(input_str)\n        self.assertNotIn('expired.example.com', result)\n    def test_https_with_ssl_errors(self):\n        \"\"\"Test multiple HTTPS URLs where one has SSL errors, expecting only the valid SSL data to be returned.\"\"\"\n        self.mock_ssl_socket.getpeercert.side_effect = [ssl.SSLError(\"Certificate has expired\"), {'notAfter': '2023-07-20 12:00:00'}]\n        input_str = \"https://badssl.com, https://goodssl.com\"\n        result = task_func(input_str)\n        expected = {'goodssl.com': '2023-07-20 12:00:00'}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean of numerical values in each position across tuples in a list. Non-numeric values are ignored, and means are computed only from available data. That means that missing data in some of the tuples is simply ignored. A DataFrame with one columns named 'Mean Value' which contains the mean values for all tuple positions. The index is according to this scheme: 'Position i' where i is the current position. If an empty list is passed, then an empty DataFrame is returned. >>> data = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)] >>> df = task_func() >>> print(df) Mean Value Position 0         NaN Position 1         3.0 Position 2         4.3\nThe function should output with:\n    DataFrame: A pandas DataFrame with the mean values of the numerical data at each position.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n\n    # Unzip the data, filling missing values with NaN so they don't affect the mean calculation\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n\n    # Calculate the mean of numerical values, skipping the first column assuming it's non-numerical\n    # Filter out non-numeric values from the column before calculating the mean\n    mean_values = []\n    for column in unzipped_data[:]:\n        numeric_values = [val for val in column if isinstance(val, (int, float))]\n        if numeric_values:\n            mean_values.append(np.nanmean(numeric_values))\n        else:\n            mean_values.append(np.nan)\n\n    # Create a DataFrame with the results\n    df = pd.DataFrame(mean_values, columns=['Mean Value'], \n                      index=['Position {}'.format(i) for i in range(len(mean_values))])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_default_data(self):\n        df = task_func()\n        self.assertTrue(np.isnan(df.loc['Position 0', 'Mean Value']))\n        self.assertTrue(df.loc['Position 1', 'Mean Value'] == 3.0)\n        self.assertTrue(df.loc['Position 2', 'Mean Value'] == 4.3)\n    def test_custom_data(self):\n        custom_data = [('x', 10, 20.5), ('y', 20, 40.6), ('z', 30, 60.7)]\n        df = task_func(custom_data)\n        self.assertTrue(df.loc['Position 1', 'Mean Value'] == 20.0)\n        self.assertTrue(df.loc['Position 2', 'Mean Value'] == 40.6)\n    def test_incomplete_data(self):\n        incomplete_data = [('a', 1), ('b', 2, 3.2), ('c',), ('d', 4, 5.4), ('e', 5, 6.5)]\n        df = task_func(incomplete_data)\n        self.assertTrue(df.loc['Position 1', 'Mean Value'] == 3.0)\n        self.assertTrue(np.isclose(df.loc['Position 2', 'Mean Value'], 5.0333333))  # corrected expected value\n    def test_empty_data(self):\n        df = task_func([])\n        self.assertTrue(df.empty)\n    def test_non_numeric_data(self):\n        non_numeric = [('a', 'x', 'y'), ('b', 'y', 'z'), ('c', 'z', 'x')]\n        df = task_func(non_numeric)\n        self.assertTrue(df.isna().values.all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all subsets of a given size from a tuple and calculate the mean, median, and mode of the sums of the subsets. Args: - elements (tuple): A tuple of numbers from which subsets will be generated. - subset_size (int): The size of the subsets to be generated.\nThe function should output with:\n    dict: A dictionary with the mean, median, and mode of the sums of the subsets.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport statistics\n# Refined function after importing required libraries\ndef task_func(elements, subset_size):\n```",
        "gt": "import itertools\nimport statistics\n# Refined function after importing required libraries\ndef task_func(elements, subset_size):\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations]\n    return {\n        'mean': statistics.mean(sums),\n        'median': statistics.median(sums),\n        'mode': statistics.mode(sums)\n    }",
        "test": "import unittest\nfrom faker import Faker\nimport itertools\nimport statistics\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Basic test case\n        elements = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        subset_size = 2\n        result = task_func(elements, subset_size)\n        self.assertEqual(result, {'mean': 11, 'median': 11, 'mode': 11})\n        \n    def test_case_2(self):\n        # Testing with a tuple containing repeated elements\n        elements = (1, 2, 2, 3, 4)\n        subset_size = 2\n        result = task_func(elements, subset_size)\n        self.assertEqual(result, {'mean': 4.8, 'median': 5.0, 'mode': 5})\n        \n    def test_case_3(self):\n        # Testing with a larger subset size\n        elements = (1, 2, 3, 4, 5)\n        subset_size = 4\n        result = task_func(elements, subset_size)\n        self.assertEqual(result, {'mean': 12, 'median': 12, 'mode': 10})\n        \n    def test_case_4(self):\n        # Testing with negative numbers in the tuple\n        elements = (-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5)\n        subset_size = 3\n        result = task_func(elements, subset_size)\n        self.assertEqual(result, {'mean': 0.0, 'median': 0.0, 'mode': 0})\n        \n    def test_case_5(self):\n        # Using the Faker library to generate a random test case\n        fake = Faker()\n        elements = tuple(fake.random_elements(elements=range(1, 101), length=10, unique=True))\n        subset_size = fake.random_int(min=2, max=5)\n        combinations = list(itertools.combinations(elements, subset_size))\n        sums = [sum(combination) for combination in combinations]\n        expected_result = {\n            'mean': statistics.mean(sums),\n            'median': statistics.median(sums),\n            'mode': statistics.mode(sums)\n        }\n        result = task_func(elements, subset_size)\n        self.assertEqual(result, expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Add a specific path to sys.path and create a directory in that path if it does not exist. >>> task_func() \"/path/to/whatever\"\nNote that: The function uses a constant PATH_TO_APPEND which defaults to '/path/to/whatever'.\nThe function should output with:\n    path_to_append (str): The path that was appended and where the directory was created.\nYou should write self-contained code starting with:\n```\nimport sys\nfrom pathlib import Path\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n```",
        "gt": "import sys\nfrom pathlib import Path\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\ndef task_func(path_to_append=PATH_TO_APPEND):\n    # Creating the directory if it does not exist\n    Path(path_to_append).mkdir(parents=True, exist_ok=True)\n    \n    # Adding the directory to sys.path\n    sys.path.append(path_to_append)\n    \n    return path_to_append",
        "test": "import tempfile\nimport unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Creating a temporary directory\n        self.temp_dir = tempfile.TemporaryDirectory()\n        # Removing the appended path from sys.path for each test case\n        if self.temp_dir.name + '/test/path' in sys.path:\n            sys.path.remove(self.temp_dir.name + '/test/path')\n        if self.temp_dir.name + '/another/test/path' in sys.path:\n            sys.path.remove(self.temp_dir.name + '/another/test/path')\n    def tearDown(self):\n        # Cleaning up the temporary directory\n        self.temp_dir.cleanup()\n    def test_1(self):\n        # Testing with the default path\n        result = task_func(self.temp_dir.name + '/path/to/whatever')\n        self.assertEqual(result, self.temp_dir.name + '/path/to/whatever')\n        self.assertTrue(self.temp_dir.name + '/path/to/whatever' in sys.path)\n        self.assertTrue(Path(self.temp_dir.name + '/path/to/whatever').exists())\n    def test_2(self):\n        # Testing with a custom path\n        result = task_func(self.temp_dir.name + '/test/path')\n        self.assertEqual(result, self.temp_dir.name + '/test/path')\n        self.assertTrue(self.temp_dir.name + '/test/path' in sys.path)\n        self.assertTrue(Path(self.temp_dir.name + '/test/path').exists())\n    def test_3(self):\n        # Testing if the directory is actually created\n        task_func(self.temp_dir.name + '/another/test/path')\n        self.assertTrue(Path(self.temp_dir.name + '/another/test/path').exists())\n    def test_4(self):\n        # Testing if the path is appended to sys.path\n        task_func(self.temp_dir.name + '/test/path')\n        self.assertTrue(self.temp_dir.name + '/test/path' in sys.path)\n    def test_5(self):\n        # Testing if the function returns the correct path\n        result = task_func(self.temp_dir.name + '/test/path')\n        self.assertEqual(result, self.temp_dir.name + '/test/path')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads data from a CSV file and generates a bar plot based on grouped mean values. The DataFrame is grouped by the column named 'col1_name', and the mean for each group is calculated for the column 'col2_name'. A bar plot is created using matplotlib. Each bar in the plot represents a group, and its height corresponds to the mean value of 'col2_name' for that group. The plot is then configured with a title and axis labels: - The title is set as \"Mean of [col2_name] Grouped by [col1_name]\". This format dynamically inserts the names of the columns being analyzed into the title. - The xlabel (label for the x-axis) is set to the name of the column used for grouping (col1_name). - The ylabel (label for the y-axis) is set as \"Mean of [col2_name]\", indicating that the y-axis represents the mean values of the specified column.\nNote that: Ensure that the CSV file exists at the specified path and has the required columns. The function does not handle missing data. Ensure that the CSV file has clean and complete data for accurate results. The bar plot is customizable using matplotlib's functionality after the function returns the Axes object.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the generated bar plot.\n    This object can be used to further customize the plot, like adding labels or changing styles.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(csv_file_path, col1_name=\"column1\", col2_name=\"column2\"):\n    df = pd.read_csv(csv_file_path)\n    groupby_data = df.groupby(col1_name)[col2_name].mean()\n\n    _, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(groupby_data.index, groupby_data.values)\n    ax.set_title(f\"Mean of {col2_name} Grouped by {col1_name}\")\n    ax.set_xlabel(col1_name)\n    ax.set_ylabel(f\"Mean of {col2_name}\")\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nfrom unittest.mock import patch\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function.\"\"\"\n    def setUp(self):\n        # Define mock data\n        self.data = {\n            \"sample_data\": pd.DataFrame(\n                {\"column1\": [\"A\", \"A\", \"B\", \"B\"], \"column2\": [1, 2, 3, 4]}\n            ),\n            \"different_data\": pd.DataFrame(\n                {\"column1\": [\"C\", \"C\", \"D\", \"D\"], \"column2\": [5, 6, 7, 8]}\n            ),\n            \"missing_values\": pd.DataFrame(\n                {\"column1\": [\"A\", \"A\", \"B\", \"B\"], \"column2\": [1, None, 3, None]}\n            ),\n            \"different_columns\": pd.DataFrame(\n                {\"col1\": [\"E\", \"E\", \"F\", \"F\"], \"col2\": [9, 10, 11, 12]}\n            ),\n            \"single_group_data\": pd.DataFrame(\n                {\"column1\": [\"A\", \"A\", \"A\"], \"column2\": [1, 2, 3]}\n            ),\n            \"non_numeric_data\": pd.DataFrame(\n                {\"column1\": [\"A\", \"B\", \"C\"], \"column2\": [\"x\", \"y\", \"z\"]}\n            ),\n        }\n    @patch(\"pandas.read_csv\")\n    def test_bar_plot(self, mock_read_csv):\n        \"\"\"Test standard bar plot generation with sample data.\"\"\"\n        mock_read_csv.return_value = self.data[\"sample_data\"]\n        ax = task_func(\"any_path.csv\", \"column1\", \"column2\")\n        self.check_plot(ax, \"sample_data\", \"column1\", \"column2\")\n    @patch(\"pandas.read_csv\")\n    def test_different_data(self, mock_read_csv):\n        \"\"\"Test bar plot with different data set.\"\"\"\n        mock_read_csv.return_value = self.data[\"different_data\"]\n        ax = task_func(\"any_path.csv\", \"column1\", \"column2\")\n        self.check_plot(ax, \"different_data\", \"column1\", \"column2\")\n    @patch(\"pandas.read_csv\")\n    def test_missing_values(self, mock_read_csv):\n        \"\"\"Test bar plot with missing values in data.\"\"\"\n        mock_read_csv.return_value = self.data[\"missing_values\"]\n        ax = task_func(\"any_path.csv\", \"column1\", \"column2\")\n        self.check_plot(ax, \"missing_values\", \"column1\", \"column2\")\n    @patch(\"pandas.read_csv\")\n    def test_different_column_names(self, mock_read_csv):\n        \"\"\"Test bar plot with different column names.\"\"\"\n        mock_read_csv.return_value = self.data[\"different_columns\"]\n        ax = task_func(\"any_path.csv\", \"col1\", \"col2\")\n        self.check_plot(ax, \"different_columns\", \"col1\", \"col2\")\n    @patch(\"pandas.read_csv\")\n    def test_single_group_data(self, mock_read_csv):\n        \"\"\"Test bar plot with data containing only a single group.\"\"\"\n        mock_read_csv.return_value = self.data[\"single_group_data\"]\n        ax = task_func(\"any_path.csv\", \"column1\", \"column2\")\n        self.check_plot(ax, \"single_group_data\", \"column1\", \"column2\")\n    @patch(\"pandas.read_csv\")\n    def test_non_numeric_aggregation_column(self, mock_read_csv):\n        \"\"\"Test bar plot with non-numeric data in the aggregation column.\"\"\"\n        mock_read_csv.return_value = self.data[\"non_numeric_data\"]\n        with self.assertRaises(TypeError):\n            task_func(\"any_path.csv\", \"column1\", \"column2\")\n    def check_plot(self, ax, data_key, col1, col2):\n        \"\"\"Check the generated bar plot.\"\"\"\n        # Use the correct DataFrame for expected calculations\n        df = self.data[data_key]\n        # Common assertions for checking plot\n        expected_title = f\"Mean of {col2} Grouped by {col1}\"\n        self.assertEqual(ax.get_title(), expected_title)\n        self.assertEqual(ax.get_xlabel(), col1)\n        self.assertEqual(ax.get_ylabel(), f\"Mean of {col2}\")\n        # Check the bars in the plot\n        bars = ax.patches\n        bar_heights = [bar.get_height() for bar in bars]\n        expected_means = df.groupby(col1)[col2].mean().values\n        self.assertListEqual(bar_heights, list(expected_means))\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalizes a given dataset using MinMax scaling and calculates the average of each row. This average is then added as a new column 'Average' to the resulting DataFrame. The function also visualizes these averages in a plot.\nThe function should output with:\n    DataFrame: A pandas DataFrame where data is normalized, with an additional column 'Average' representing the\n    mean of each row.\n    Axes: A matplotlib Axes object showing a bar subplot of the average values across the dataset.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    COLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n\n    df = pd.DataFrame(normalized_data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n\n    fig, ax = plt.subplots()\n    df['Average'].plot(ax=ax)\n\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = np.array([[1, 2, 3, 4, 4, 3, 7, 1], [6, 2, 3, 4, 3, 4, 4, 1]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (2, 9))\n        self.assertTrue('Average' in df.columns)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 1)\n        self.assertListEqual(list(lines[0].get_ydata()), list(df['Average']))\n    def test_case_2(self):\n        data = np.array([[5, 5, 5, 5, 5, 5, 5, 5]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (1, 9))\n        self.assertTrue('Average' in df.columns)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 1)\n        self.assertListEqual(list(lines[0].get_ydata()), list(df['Average']))\n    def test_case_3(self):\n        data = np.array([[0, 0, 0, 0, 0, 0, 0, 0], [10, 10, 10, 10, 10, 10, 10, 10]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (2, 9))\n        self.assertTrue('Average' in df.columns)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 1)\n        self.assertListEqual(list(lines[0].get_ydata()), list(df['Average']))\n    def test_case_4(self):\n        data = np.array([[1, 2, 3, 4, 5, 6, 7, 8]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (1, 9))\n        self.assertTrue('Average' in df.columns)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 1)\n        self.assertListEqual(list(lines[0].get_ydata()), list(df['Average']))\n    def test_case_5(self):\n        data = np.array([[8, 7, 6, 5, 4, 3, 2, 1]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (1, 9))\n        self.assertTrue('Average' in df.columns)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 1)\n        self.assertListEqual(list(lines[0].get_ydata()), list(df['Average']))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Combine two lists by alternating their elements, even if they are of different lengths. Elements from the longer list without a counterpart in the shorter one will be included on their own. Then, create a random sample of size K from the combined list, and calculate the frequency of each element in the sample.\nThe function should output with:\n    collections.Counter: An object that counts the frequency of each element in the sample.\nYou should write self-contained code starting with:\n```\nimport collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n```",
        "gt": "import collections\nfrom itertools import zip_longest\nfrom random import choices\ndef task_func(l1, l2, K=10):\n    combined = [val for pair in zip_longest(l1, l2) for val in pair if val is not None]\n    sample = choices(combined, k=K)\n    freq = collections.Counter(sample)\n    return freq",
        "test": "import unittest\nimport collections\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n    # Set a consistent random seed for predictable outcomes in all tests.\n        random.seed(42)\n    def test_case_1(self):\n        # Verify that combining two equal-length lists produces a correctly sized sample.\n        l1 = list(range(10))\n        l2 = list(range(10, 20))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n    def test_case_2(self):\n        # Test combining two short, equal-length lists to ensure correct sample size.\n        l1 = list(range(5))\n        l2 = list(range(10, 15))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n    def test_case_3(self):\n        # Check correct sampling from two equal-length lists starting from different ranges.\n        l1 = list(range(20, 30))\n        l2 = list(range(30, 40))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n    def test_case_4(self):\n        # Ensure that combining two long, equal-length lists correctly manages the sample size.\n        l1 = list(range(50))\n        l2 = list(range(50, 100))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n    def test_case_5(self):\n        # Confirm that an empty first list results in sampling exclusively from the second list.\n        l1 = []\n        l2 = list(range(10, 20))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n    def test_case_with_non_integers(self):\n        # Check sampling behavior with lists of non-integer floating-point numbers.\n        l1 = [0.1, 0.2, 0.3]\n        l2 = [0.4, 0.5, 0.6]\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n        most_common = freq.most_common(1)[0][0]\n        self.assertIn(most_common, [0.1, 0.2, 0.3, 0.4, 0.5, 0.6])\n    def test_imbalanced_lists(self):\n        # Test sampling from two lists where one is significantly longer to ensure fair representation.\n        l1 = [1, 2, 3]\n        l2 = list(range(4, 104))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n        self.assertTrue(any(item in freq for item in l1))\n    def test_empty_first_list(self):\n        # Verify behavior and sampling correctness when the first list is empty.\n        l1 = []\n        l2 = list(range(10, 20))\n        freq = task_func(l1, l2)\n        self.assertIsInstance(freq, collections.Counter)\n        self.assertEqual(sum(freq.values()), 10)\n        self.assertTrue(all(item in l2 for item in freq.elements()))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compares the contents of two gzip files and returns a string describing the differences between them. It reads the contents of each file, then uses difflib to compute and return the differences. Only differences are returned, with an empty string indicating no differences. Assuming 'file1.gz' and 'file1.gz' are identical, >>> task_func('file1.gz', 'file1.gz') ''\nThe function should output with:\n    str: A string describing the differences between the two files' contents.\nYou should write self-contained code starting with:\n```\nimport difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n```",
        "gt": "import difflib\nimport gzip\ndef task_func(file_path1, file_path2):\n    with gzip.open(file_path1, 'rt') as file1, gzip.open(file_path2, 'rt') as file2:\n        file1_content = file1.readlines()\n        file2_content = file2.readlines()\n        diff = difflib.ndiff(file1_content, file2_content)\n        diff = [line for line in diff if line.startswith('+ ') or line.startswith('- ')]\n\n    return ''.join(diff)",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test environment by creating test gzip files with known content.\"\"\"\n        with gzip.open('file1.gz', 'wt') as f:\n            f.write(\"This is a test file.\\n\")\n        with gzip.open('file2.gz', 'wt') as f:\n            f.write(\"This is a different test file.\\n\")\n    def tearDown(self):\n        \"\"\"Clean up by removing the test gzip files.\"\"\"\n        os.remove('file1.gz')\n        os.remove('file2.gz')\n    def test_identical_files(self):\n        \"\"\"Test that the function returns an empty string for identical files.\"\"\"\n        self.assertEqual(task_func('file1.gz', 'file1.gz'), '')\n    def test_different_files(self):\n        \"\"\"Test that the function identifies differences between two files.\"\"\"\n        result = task_func('file1.gz', 'file2.gz')\n        self.assertTrue(\"different\" in result)\n    def test_first_file_not_exist(self):\n        \"\"\"Test that the function raises FileNotFoundError if the first file does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent1.gz', 'file2.gz')\n    def test_second_file_not_exist(self):\n        \"\"\"Test that the function raises FileNotFoundError if the second file does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('file1.gz', 'nonexistent2.gz')\n    def test_both_files_not_exist(self):\n        \"\"\"Test that the function raises FileNotFoundError if both files do not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent1.gz', 'nonexistent2.gz')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of a particular letter in a given list of letters with logging. Logs are written to a file named 'task_func.log' with encoding 'utf-8' and logging level DEBUG. The log file is created by the function or overwritten if already exists. For each function call the following is logged with the respective logging level: - info: f\"Function called with list: {letter_list} and element: {element}\" - error: if the element is not in the letter list - info: f\"Frequency of '{element}' is {element_frequency}\" After the last info has been logged, the logging is shutdown, such that all files are released. >>> task_func(['x', 'y', 'z'], 'y', log_path='./') 1 >>> with open('task_func.log') as log: ...     print(log.read()) INFO:Function called with list: ['x', 'y', 'z'] and element: y INFO:Frequency of 'y' is 1 <BLANKLINE> >>> try: ...     task_func(['x', 'y', 'z'], 'a', log_path='./') ... except: ...     with open('task_func.log') as log: ...        print(log.read()) INFO:Function called with list: ['x', 'y', 'z'] and element: a ERROR:The element is not in the letter list. <BLANKLINE>\nThe function should raise the exception for: ValueError: If element is not in letter_list.\nThe function should output with:\n    int: The frequency of the letter.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport logging\ndef task_func(letter_list, element, log_path):\n```",
        "gt": "from collections import Counter\nimport logging\ndef task_func(letter_list, element, log_path):\n    formatter = logging.Formatter('%(levelname)s:%(message)s')\n    handler = logging.FileHandler(log_path+'/task_func.log', mode='w')\n    logger = logging.getLogger()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    logger.setLevel(logging.DEBUG)\n    logger.info(f\"Function called with list: {letter_list} and element: {element}\")\n\n    if element not in letter_list:\n        logger.error(\"The element is not in the letter list.\")\n        logger.handlers[0].close\n        logger.removeHandler(logger.handlers[0])\n        logging.shutdown()\n\n        raise ValueError(\"The element is not in the letter list.\")\n        \n    letter_frequencies = Counter(letter_list)\n    element_frequency = letter_frequencies[element]\n    \n    logger.info(f\"Frequency of '{element}' is {element_frequency}\")\n    logger.handlers[0].close\n    logger.removeHandler(logger.handlers[0])\n    logging.shutdown()\n\n    return element_frequency",
        "test": "import unittest\nimport os, shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_folder = tempfile.mkdtemp()\n    def test_case_1(self):\n        result = task_func(['a', 'b', 'a', 'c', 'a'], 'a', self.temp_folder)\n        self.assertEqual(result, 3)\n        with open(self.temp_folder+'/task_func.log') as log:\n            self.assertTrue(\"INFO:Function called with list: ['a', 'b', 'a', 'c', 'a'] and element: a\" in log.readline())\n            self.assertTrue(\"INFO:Frequency of 'a' is 3\" in log.readline())\n    def test_case_2(self):\n        result = task_func(['x', 'y', 'z'], 'y', self.temp_folder)\n        self.assertEqual(result, 1)\n        with open(self.temp_folder+'/task_func.log') as log:\n            self.assertTrue(\"INFO:Function called with list: ['x', 'y', 'z'] and element: y\" in log.readline())\n            self.assertTrue(\"INFO:Frequency of 'y' is 1\" in log.readline())\n    def test_case_3(self):\n        result = task_func(['m', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v'], 'r', self.temp_folder)\n        self.assertEqual(result, 1)\n        with open(self.temp_folder+'/task_func.log') as log:\n            self.assertTrue(\"INFO:Function called with list: ['m', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v'] and element: r\" in log.readline())\n            self.assertTrue(\"INFO:Frequency of 'r' is 1\" in log.readline())\n    def test_case_4(self):\n        result = task_func(['z', 'z', 'z', 'z'], 'z', self.temp_folder)\n        self.assertEqual(result, 4)\n        with open(self.temp_folder+'/task_func.log') as log:\n            self.assertTrue(\"INFO:Function called with list: ['z', 'z', 'z', 'z'] and element: z\" in log.readline())\n            self.assertTrue(\"INFO:Frequency of 'z' is 4\" in log.readline())\n    def test_case_5(self):\n        with self.assertRaises(ValueError):\n            task_func(['a', 'b', 'c'], 'z', self.temp_folder)\n        with open(self.temp_folder+'/task_func.log') as log:\n            self.assertTrue(\"INFO:Function called with list: ['a', 'b', 'c'] and element: z\" in log.readline())\n            self.assertTrue(\"ERROR:The element is not in the letter list.\" in log.readline())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Arrange files in a directory by their extensions. Create a new directory for each extension and move the files to the corresponding directories.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n```",
        "gt": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    for filename in os.listdir(directory):\n        match = re.search(r'\\.(.*?)$', filename)\n        if match:\n            ext_dir = os.path.join(directory, match.group(1))\n            if not os.path.exists(ext_dir):\n                os.mkdir(ext_dir)\n            shutil.move(os.path.join(directory, filename), ext_dir)",
        "test": "import unittest\nimport os\nimport shutil\nimport doctest\nimport tempfile\n# Define the TestCases class containing the blackbox test cases\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup function to create a test directory before each test case\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_directory = f\"{self.base_tmp_dir}/test\"\n        if os.path.exists(self.test_directory):\n            shutil.rmtree(self.test_directory)\n        os.mkdir(self.test_directory)\n    def tearDown(self):\n        # Teardown function to remove the test directory after each test case\n        shutil.rmtree(self.test_directory)\n    def create_sample_files(self, file_list):\n        # Helper function to create sample files for test cases\n        for file in file_list:\n            with open(os.path.join(self.test_directory, file), \"w\") as f:\n                f.write(f\"Content of {file}\")\n    def test_case_1(self):\n        # Test case 1: Organizing files with standard extensions\n        files = [\"file1.txt\", \"image1.jpg\", \"document1.pdf\"]\n        self.create_sample_files(files)\n        \n        task_func(self.test_directory)\n        \n        expected_directories = [\"txt\", \"jpg\", \"pdf\"]\n        actual_directories = os.listdir(self.test_directory)\n        \n        for dir_name in expected_directories:\n            self.assertIn(dir_name, actual_directories)\n    def test_case_2(self):\n        # Test case 2: Organizing files with no extensions\n        files = [\"file1\", \"document2\"]\n        self.create_sample_files(files)\n        \n        task_func(self.test_directory)\n        \n        # Expected behavior: files without extensions remain in the main directory\n        for file_name in files:\n            self.assertIn(file_name, os.listdir(self.test_directory))\n    def test_case_3(self):\n        # Test case 3: Organizing files with uncommon or made-up extensions\n        files = [\"data.xyz\", \"notes.abc123\"]\n        self.create_sample_files(files)\n        \n        task_func(self.test_directory)\n        \n        expected_directories = [\"xyz\", \"abc123\"]\n        actual_directories = os.listdir(self.test_directory)\n        \n        for dir_name in expected_directories:\n            self.assertIn(dir_name, actual_directories)\n    def test_case_4(self):\n        # Test case 4: Checking the behavior when the directory is empty\n        task_func(self.test_directory)\n        \n        # Expected behavior: directory remains empty\n        self.assertEqual(len(os.listdir(self.test_directory)), 0)\n    def test_case_5(self):\n        # Test case 5: Checking the behavior when some sub-directories already exist\n        os.mkdir(os.path.join(self.test_directory, \"txt\"))\n        files = [\"file1.txt\", \"file2.txt\"]\n        self.create_sample_files(files)\n        \n        task_func(self.test_directory)\n        \n        # Expected behavior: files are moved to the existing \"txt\" sub-directory\n        txt_files = os.listdir(os.path.join(self.test_directory, \"txt\"))\n        for file_name in files:\n            self.assertIn(file_name, txt_files)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze the uniformity of a distribution represented by a dictionary of categories and their counts, and create a description to introduce this distribution.\nNote that: If 'data_dict' is empty, the function returns None and a message \"The distribution is uniform.\" indicating that an empty distribution is considered uniform by default. If 'data_dict' is not empty, it calculates the average count of the categories. The distribution is considered uniform if the absolute difference between each count and the average count is less than or equal to 1e-5. If any count's absolute difference with the average count is more than 1e-5, the distribution is considered not uniform. The function then creates a histogram of the counts using matplotlib, with the number of bins being the lesser of 10 or the number of unique counts. The histogram's x-ticks are labeled with the category names.\nThe function should output with:\n    tuple: A tuple containing:\n    matplotlib.axes._axes.Axes: The axes object of the histogram.\n    str: A message indicating whether the distribution is uniform (\"The distribution is uniform.\")\n    or not (\"The distribution is not uniform.\").\nYou should write self-contained code starting with:\n```\nimport collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n```",
        "gt": "import collections\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    if not data_dict:\n        return None, \"The distribution is uniform.\"\n\n    data_counter = collections.Counter(data_dict)\n    counts = list(data_counter.values())\n    avg_count = sum(counts) / len(counts)\n    uniform = all(abs(count - avg_count) <= 1e-5 for count in counts)\n    message = (\n        \"The distribution is uniform.\"\n        if uniform\n        else \"The distribution is not uniform.\"\n    )\n\n    _, ax = plt.subplots()\n    ax.hist(\n        counts,\n        bins=np.linspace(min(counts), max(counts), min(10, len(counts))),\n        rwidth=0.8,\n    )\n    ax.set_xticks(np.arange(len(data_dict)) + 1)\n    ax.set_xticklabels(list(data_dict.keys()))\n    return ax, message",
        "test": "import numpy as np\nimport matplotlib.pyplot as plt\nimport unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for task_func.\"\"\"\n    def test_uniform_distribution(self):\n        \"\"\"Test whether the function correctly identifies a uniform distribution.\"\"\"\n        data = {\"A\": 5, \"B\": 5, \"C\": 5}\n        _, message = task_func(data)\n        self.assertEqual(message, \"The distribution is uniform.\")\n    def test_non_uniform_distribution(self):\n        \"\"\"Test whether the function correctly identifies a non-uniform distribution.\"\"\"\n        data = {\"A\": 3, \"B\": 2, \"C\": 4}\n        _, message = task_func(data)\n        self.assertEqual(message, \"The distribution is not uniform.\")\n    def test_empty_dictionary(self):\n        \"\"\"Test the function with an empty dictionary.\"\"\"\n        data = {}\n        _, message = task_func(data)\n        self.assertEqual(message, \"The distribution is uniform.\")\n    def test_single_category(self):\n        \"\"\"Test the function with a single category.\"\"\"\n        data = {\"A\": 1}\n        _, message = task_func(data)\n        self.assertEqual(message, \"The distribution is uniform.\")\n    def test_large_distribution(self):\n        \"\"\"Test the function with a large number of categories.\"\"\"\n        data = {chr(i): i for i in range(65, 91)}  # A to Z with ascending counts\n        _, message = task_func(data)\n        self.assertEqual(message, \"The distribution is not uniform.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Moves all files that match a particular pattern from one directory to another. Functionality: - Moves files from 'source_directory' to 'destination_directory' based on a filename pattern 'file_pattern'.\nThe function should output with:\n    Returns a list of filenames that were moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n```",
        "gt": "import os\nimport shutil\nimport fnmatch\ndef task_func(source_directory, destination_directory, file_pattern):\n    moved_files = []\n    for path, dirs, files in os.walk(source_directory):\n        for filename in fnmatch.filter(files, file_pattern):\n            shutil.move(os.path.join(path, filename), os.path.join(destination_directory, filename))\n            moved_files.append(filename)\n    return moved_files",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock, call\nimport shutil\nimport os\nimport fnmatch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.source_directory = \"/fake/source_directory\"\n        self.destination_directory = \"/fake/destination_directory\"\n        self.files = ['file1.txt', 'file2.txt', 'image.jpg', 'data.log', 'report.TXT', 'config file.cfg']\n    @patch('os.walk')\n    @patch('shutil.move')\n    def test_no_files_to_move(self, mock_move, mock_walk):\n        mock_walk.return_value = [(self.source_directory, [], ['image.jpg', 'data.log', 'config file.cfg'])]\n        result = task_func(self.source_directory, self.destination_directory, '*.txt')\n        self.assertEqual(result, [])\n        mock_move.assert_not_called()\n    @patch('os.walk')\n    @patch('shutil.move')\n    def test_non_existing_source_directory(self, mock_move, mock_walk):\n        mock_walk.side_effect = FileNotFoundError\n        with self.assertRaises(FileNotFoundError):\n            task_func('/non/existing/directory', self.destination_directory, '*.txt')\n    @patch('os.walk')\n    @patch('shutil.move')\n    def test_case_sensitivity(self, mock_move, mock_walk):\n        # Setting up os.walk to simulate case sensitivity in file matching\n        mock_walk.return_value = [\n            (self.source_directory, [], ['file1.txt', 'file2.TXT', 'report.TXT'])\n        ]\n        # Execute the function\n        task_func(self.source_directory, self.destination_directory, '*.TXT')\n        expected_calls = [\n            call(os.path.join(self.source_directory, 'file2.TXT'), os.path.join(self.destination_directory, 'file2.TXT')),\n            call(os.path.join(self.source_directory, 'report.TXT'), os.path.join(self.destination_directory, 'report.TXT'))\n        ]\n        mock_move.assert_has_calls(expected_calls, any_order=True)\n    @patch('os.walk')\n    @patch('shutil.move')\n    def test_special_characters_in_filenames(self, mock_move, mock_walk):\n        mock_walk.return_value = [(self.source_directory, [], ['config file.cfg'])]\n        task_func(self.source_directory, self.destination_directory, '*.cfg')\n        expected_call = call(os.path.join(self.source_directory, 'config file.cfg'), os.path.join(self.destination_directory, 'config file.cfg'))\n        mock_move.assert_has_calls([expected_call], any_order=True)\n    @patch('os.listdir')\n    @patch('shutil.move')\n    @patch('os.path.exists')\n    def test_no_matching_files(self, mock_exists, mock_move, mock_listdir):\n        # Setup mocks to simulate no matching files\n        mock_listdir.return_value = ['file3.jpg']\n        mock_exists.return_value = True\n        # Call the function\n        moved_files = task_func(self.source_directory, self.destination_directory, '*.txt')\n        # Assertions\n        mock_move.assert_not_called()\n        self.assertEqual(moved_files, [], \"No TXT files should be moved\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a CSV file into a Pandas DataFrame, replace all occurrences of the string '\\n' with the string '<br>' in the specified column, and encode the specified column as a categorical variable using LabelEncoder from sklearn.\nThe function should output with:\n    pd.DataFrame: The updated and encoded Pandas DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(file_path: str, column_name: str) -> pd.DataFrame:\n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(file_path)\n    \n    # Replace occurrences of '\\n' with '<br>'\n    df[column_name] = df[column_name].replace({'\\n': '<br>'}, regex=True)\n    \n    # Initialize LabelEncoder and fit_transform the specified column\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    \n    return df",
        "test": "import os\nimport unittest\nimport pandas as pd\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # create folder for test data\n        os.makedirs('test_data', exist_ok=True)\n        data = {\n            'Category': ['Fruit\\n', 'Vegetable\\n', 'Meat\\n', 'Dairy\\n'],\n            'Price': [1.2, 2.3, 3.4, 4.5]\n        }\n        pd.DataFrame(data).to_csv('test_data/test_case_1.csv', index=False)\n        \n        data = {\n            'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n            'Age': [25, 30, 35, 40, 45],\n            'Language': ['Python\\nJava', 'C++\\nJavaScript', 'Ruby\\nC#', 'PHP\\nSwift', 'Kotlin\\nR']\n        }\n        pd.DataFrame(data).to_csv('test_data/test_case_2.csv', index=False)\n        \n        data = {\n            'Item': ['Item1', 'Item2', 'Item3', 'Item4', 'Item5']\n        }\n        pd.DataFrame(data).to_csv('test_data/test_case_3.csv', index=False)\n        \n        data = {\n            'Language': ['Python\\nJava', 'C++\\nJavaScript', 'Ruby\\nC#', 'PHP\\nSwift', 'Kotlin\\nR'],\n            'Country': ['USA', 'UK', 'China', 'Japan', 'Australia']\n        }\n        pd.DataFrame(data).to_csv('test_data/test_case_4.csv', index=False)\n    \n    def tearDown(self):\n        shutil.rmtree('test_data')\n        \n    def test_case_1(self):\n        # Input 1: A simple CSV file with a 'Category' column containing '\\n' characters\n        # Expected: The '\\n' should be replaced with '<br>' and the column should be encoded\n        df = task_func('test_data/test_case_1.csv', 'Category')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIn('Category', df.columns)\n        self.assertNotIn('\\n', df['Category'].astype(str))\n        self.assertTrue(df['Category'].dtype.name == 'int64')\n        \n    def test_case_2(self):\n        # Input 2: A CSV file with different columns\n        # Expected: Only the specified column should be affected\n        df = task_func('test_data/test_case_2.csv', 'Name')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIn('Name', df.columns)\n        self.assertNotIn('\\n', df['Name'].astype(str))\n        self.assertTrue(df['Name'].dtype.name == 'int64')\n        self.assertTrue(df['Age'].dtype.name == 'int64')\n        \n    def test_case_3(self):\n        # Input 3: A CSV file with a column that doesn't contain '\\n'\n        # Expected: The column should still be encoded\n        df = task_func('test_data/test_case_3.csv', 'Item')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIn('Item', df.columns)\n        self.assertTrue(df['Item'].dtype.name == 'int64')\n    \n    def test_case_4(self):\n        # Input 4: A CSV file with multiple columns, affecting only one\n        # Expected: Only the specified column should be encoded\n        df = task_func('test_data/test_case_4.csv', 'Language')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIn('Language', df.columns)\n        self.assertNotIn('\\n', df['Language'].astype(str))\n        self.assertTrue(df['Language'].dtype.name == 'int64')\n        self.assertTrue(df['Country'].dtype.name == 'object')\n        \n    def test_case_5(self):\n        # Input 5: A CSV file with no columns matching the specified column\n        # Expected: An exception should be raised\n        with self.assertRaises(Exception):\n            df = task_func('test_data/test_case_5.csv', 'NonExistentColumn')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Receive a message from a client socket and send it as an email via an SMTP server.\nNote that: Requires a working internet connection and access to an SMTP server. The function asks for the sender's email, recipient's email, and sender's email password for authentication.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n```",
        "gt": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\ndef task_func(client_socket):\n    request = client_socket.recv(BUFFER_SIZE).decode(\"utf-8\")\n    print(f\"Received: {request}\")\n\n    email = EmailMessage()\n    email[\"From\"] = getpass.getpass(\"Email: \")\n    email[\"To\"] = getpass.getpass(\"Recipient: \")\n    email[\"Subject\"] = \"Message from socket client\"\n    email.set_content(request)\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:\n        smtp.starttls()\n        smtp.login(email[\"From\"], getpass.getpass(\"Password: \"))\n        smtp.send_message(email)\n\n    response = \"Message sent.\"\n    client_socket.send(response.encode(\"utf-8\"))\n    client_socket.close()",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport smtplib\nfrom email.message import EmailMessage\nimport getpass\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    @patch(\"socket.socket\")\n    @patch(\"smtplib.SMTP\")\n    @patch(\"getpass.getpass\")\n    def test_successful_email_send(self, mock_getpass, mock_smtp, mock_socket):\n        \"\"\"\n        Test if the email is successfully sent with valid inputs.\n        \"\"\"\n        # Mock behaviors\n        mock_socket.return_value.recv.return_value = b\"Test message\"\n        mock_getpass.side_effect = [\n            \"sender@example.com\",\n            \"recipient@example.com\",\n            \"password\",\n        ]\n        # Call the function\n        task_func(mock_socket())\n        # Assertions\n        mock_smtp.assert_called_with(\"smtp.gmail.com\", 587)\n    @patch(\"socket.socket\")\n    @patch(\"smtplib.SMTP\")\n    @patch(\"getpass.getpass\")\n    def test_email_with_empty_message(self, mock_getpass, mock_smtp, mock_socket):\n        \"\"\"\n        Test behavior when an empty message is received.\n        \"\"\"\n        # Mock the recv method to return an empty byte string\n        mock_socket.return_value.recv.return_value = b\"\"\n        mock_getpass.side_effect = [\n            \"sender@example.com\",\n            \"recipient@example.com\",\n            \"password\",\n        ]\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        client_socket = MagicMock()\n        # Simulate the recv and decode behavior by setting the return value of the decode method\n        client_socket.recv.return_value.decode.return_value = \"\"\n        task_func(client_socket)\n        mock_smtp_instance.send_message.assert_not_called()\n    @patch(\"socket.socket\")\n    @patch(\"smtplib.SMTP\")\n    @patch(\"getpass.getpass\")\n    def test_smtp_server_connection_error(self, mock_getpass, mock_smtp, mock_socket):\n        \"\"\"\n        Test behavior when there is a network error (e.g., SMTP server unreachable).\n        \"\"\"\n        # Setup mock for recv to return a valid bytes object\n        client_socket = MagicMock()\n        client_socket.recv.return_value = b\"Test message\"\n        mock_getpass.side_effect = [\n            \"sender@example.com\",\n            \"recipient@example.com\",\n            \"password\",\n        ]\n        mock_smtp.side_effect = smtplib.SMTPConnectError(\n            421, \"Failed to connect to the server\"\n        )\n        # Expecting an SMTPConnectError\n        with self.assertRaises(smtplib.SMTPConnectError):\n            task_func(client_socket)\n    @patch(\"socket.socket\")\n    @patch(\"smtplib.SMTP\")\n    @patch(\"getpass.getpass\")\n    def test_socket_closes_after_operation(self, mock_getpass, mock_smtp, mock_socket):\n        \"\"\"\n        Test if the socket is properly closed after the operation.\n        \"\"\"\n        # Setup mock for recv to return a valid bytes object\n        client_socket = MagicMock()\n        client_socket.recv.return_value = b\"Test message\"\n        mock_getpass.side_effect = [\n            \"sender@example.com\",\n            \"recipient@example.com\",\n            \"password\",\n        ]\n        task_func(client_socket)\n        # Assert that the socket's close method was called\n        client_socket.close.assert_called_once()\n    @patch(\"socket.socket\")\n    @patch(\"smtplib.SMTP\")\n    @patch(\"getpass.getpass\")\n    def test_successful_email_dispatch(self, mock_getpass, mock_smtp, mock_socket):\n        \"\"\"\n        Test if the email is successfully composed and sent with valid inputs.\n        \"\"\"\n        client_socket = MagicMock()\n        client_socket.recv.return_value = b\"Hello, this is a test message.\"\n        mock_getpass.side_effect = [\n            \"sender@example.com\",\n            \"recipient@example.com\",\n            \"password\",\n        ]\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        task_func(client_socket)\n        # Assert that the SMTP instance was created\n        mock_smtp.assert_called_with(\"smtp.gmail.com\", 587)\n        success_response = \"Message sent.\"\n        client_socket.send.assert_called_with(success_response.encode(\"utf-8\"))\n        client_socket.close.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the Voronoi diagram for a number of points in 2D and plot it.\nNote that: this function will raise errors when input is invalid, for example wrong type or shape. Jittering is applied prior to plotting.\nThe function should output with:\n    tuple (vor, ax): A tuple containing:\n    vor (Voronoi): A Voronoi object representing the Voronoi diagram of the points.\n    ax (Axes): The axes of the plotted Voronoi diagram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n```",
        "gt": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\ndef task_func(points, seed=0):\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Expected Numpy array\")\n    if len(points) < 3:\n        raise ValueError(\"Voronoi diagram needs at least 3 points\")\n    if points.shape[-1] != 2:\n        raise ValueError(\"Expected array of 2D points\")\n\n    np.random.seed(seed)\n\n    # Add a slight random jitter to the points\n    jittered_points = points + np.random.normal(0, 1e-10, points.shape)\n\n    vor = Voronoi(jittered_points)\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n\n    return vor, ax",
        "test": "import unittest\nimport numpy as np\nfrom scipy.spatial import Voronoi\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.points = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n    def test_case_1(self):\n        # Standard tests\n        vor, ax = task_func(self.points)\n        self._run_test(self.points, vor, ax)\n    def test_case_2(self):\n        # Test random seed\n        vor, _ = task_func(self.points, seed=0)\n        vor1, _ = task_func(self.points, seed=0)\n        vor2, _ = task_func(self.points, seed=1)\n        self.assertTrue((vor.ridge_points == vor1.ridge_points).all())\n        self.assertFalse((vor1.ridge_points == vor2.ridge_points).all())\n    def test_case_3(self):\n        # Test with points that are extremely close to each other\n        points = np.array([[0, 0], [0, 1e-12], [1, 0]])\n        vor, ax = task_func(points)\n        self._run_test(points, vor, ax)\n    def test_case_4(self):\n        # Test with fewer than three points, which is the minimum to form a Voronoi diagram.\n        points = np.array([[0, 0], [1, 1]])\n        with self.assertRaises(Exception):\n            task_func(points)\n    def test_case_5(self):\n        # Test with invalid input shapes, such as one-dimensional array.\n        points = np.array([1, 2, 3])\n        with self.assertRaises(Exception):\n            task_func(points)\n    def test_case_6(self):\n        # Test with invalid input types\n        with self.assertRaises(Exception):\n            task_func(\"Not valid points\")\n    def _run_test(self, points, vor, ax):\n        # Check the point_region attribute of Voronoi object\n        self.assertIsInstance(vor, Voronoi)\n        self.assertEqual(len(vor.point_region), len(points))\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.get_children()) > 0, \"The plot should have elements.\")\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Updates a given dictionary by adding 10 random elements based on the 'keys' parameter, with values as random integers from 1 to 100. It saves the JSON representation of the updated dictionary to a file and the counts of each key to a separate text file.\nNote that: This function modifies the input dictionary in place. The filename of the json is 'updated_dictionary.json' The filename of the txt file is 'key_frequencies.txt'\nThe function should raise the exception for: ValueError: If 'keys' does not contain exactly 10 unique elements.\nThe function should output with:\n    tuple: The dictionary, path to the JSON file, and path to the text file.\nYou should write self-contained code starting with:\n```\nimport json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n```",
        "gt": "import json\nfrom collections import Counter\nimport random\ndef task_func(my_dict, keys):\n    if len(set(keys)) != 10:\n        raise ValueError(\"keys parameter must contain exactly 10 unique elements\")\n\n    for key in keys:\n        my_dict[key] = random.randint(1, 100)\n\n    json_filename = \"updated_dictionary.json\"\n    txt_filename = \"key_frequencies.txt\"\n\n    with open(json_filename, 'w') as json_file:\n        json.dump(my_dict, json_file, indent=4)\n\n    key_counts = Counter(my_dict.keys())\n    with open(txt_filename, 'w') as txt_file:\n        for key, count in key_counts.items():\n            txt_file.write(f\"{key}: {count}\\n\")\n\n    return my_dict, json_filename, txt_filename",
        "test": "import unittest\nfrom unittest.mock import patch\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    def tearDown(self):\n        json_filename = \"updated_dictionary.json\"\n        txt_filename = \"key_frequencies.txt\"\n        if os.path.exists(json_filename):\n            os.remove(json_filename)\n        if os.path.exists(txt_filename):\n            os.remove(txt_filename)\n        \n    def test_return_type(self):\n        \"\"\"Test that the function returns the correct tuple types.\"\"\"\n        result, json_path, txt_path = task_func({}, self.keys)\n        self.assertIsInstance(result, dict)\n        self.assertIsInstance(json_path, str)\n        self.assertIsInstance(txt_path, str)\n    def test_new_keys_added(self):\n        \"\"\"Test that new keys are added to the dictionary.\"\"\"\n        result, _, _ = task_func({}, self.keys)\n        for key in self.keys:\n            self.assertIn(key, result)\n    def test_original_keys_preserved(self):\n        \"\"\"Test that original keys in the dictionary are preserved.\"\"\"\n        original_dict = {'x': 200, 'y': 300}\n        result, _, _ = task_func(original_dict.copy(), self.keys)\n        self.assertIn('x', result)\n        self.assertIn('y', result)\n    def test_values_within_range(self):\n        \"\"\"Test that all values are within the specified range 1-100.\"\"\"\n        result, _, _ = task_func({}, self.keys)\n        for value in result.values():\n            self.assertTrue(1 <= value <= 100)\n    def test_dictionary_length_update(self):\n        \"\"\"Test that the dictionary length is correctly updated.\"\"\"\n        original_dict = {'x': 200, 'y': 300}\n        expected_length = len(original_dict) + len(self.keys)\n        result, _, _ = task_func(original_dict.copy(), self.keys)\n        self.assertEqual(len(result), expected_length)\n    def test_files_created(self):\n        \"\"\"Test that JSON and TXT files are created.\"\"\"\n        _, json_path, txt_path = task_func({}, self.keys)\n        self.assertTrue(os.path.exists(json_path))\n        self.assertTrue(os.path.exists(txt_path))\n    def test_value_error_raised_for_invalid_keys(self):\n        \"\"\"Test that a ValueError is raised if 'keys' does not contain exactly 10 unique elements.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func({}, ['a', 'b'])  # Not enough keys\n    @patch('random.randint', return_value=50)\n    def test_mock_random(self, mock_randint):\n        \"\"\"Test the function with a mock of the random.randint function.\"\"\"\n        result, _, _ = task_func({}, self.keys)\n        mock_randint.assert_called()\n        for key in self.keys:\n            self.assertEqual(result[key], 50)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compute the SHA256 hash of a given input string and return its hexadecimal representation. Optionally, verify the computed hash against a provided hash.\nThe function should raise the exception for: TypeError: If the input is not a string or verify_hash is not a string or None.\nThe function should output with:\n    str: A hexadecimal string representing the SHA256 hash of the input string.\n    bool: True if verify_hash is provided and matches the computed hash, otherwise None.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n```",
        "gt": "import binascii\nimport hashlib\ndef task_func(input_string, verify_hash=None):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    if verify_hash is not None and not isinstance(verify_hash, str):\n        raise TypeError(\"verify_hash must be a string or None\")\n\n    hashed_bytes = hashlib.sha256(input_string.encode()).digest()\n    hex_encoded_hash = binascii.hexlify(hashed_bytes).decode()\n\n    if verify_hash is not None:\n        return hex_encoded_hash == verify_hash\n\n    return hex_encoded_hash",
        "test": "import unittest\nimport binascii\nimport hashlib\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for task_func.\"\"\"\n    def test_string_with_numbers(self):\n        \"\"\"Test that the function returns the correct hash for a string with numbers.\"\"\"\n        self.assertEqual(\n            task_func(\"4a4b4c\"),\n            \"1a3db6ced8854274567d707b509f7486a9244be0cab89217713fce9bf09f522e\",\n        )\n    def test_string_with_space(self):\n        \"\"\"Test that the function returns the correct hash for a string with space.\"\"\"\n        self.assertEqual(\n            task_func(\"Open AI\"),\n            \"dd7503942d7be003d6faaa93d9951126fde3bdd4f3484404927e79585682878a\",\n        )\n    def test_empty_string(self):\n        \"\"\"Test that the function returns the correct hash for an empty string.\"\"\"\n        self.assertEqual(\n            task_func(\"\"),\n            \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n        )\n    def test_string_numbers(self):\n        \"\"\"Test that the function returns the correct hash for a string numbers.\"\"\"\n        self.assertEqual(\n            task_func(\"123456\"),\n            \"8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\",\n        )\n    def test_long_string(self):\n        \"\"\"Test that the function returns the correct hash for a long string.\"\"\"\n        self.assertEqual(\n            task_func(\"abcdefghijklmnopqrstuvwxyz\"),\n            \"71c480df93d6ae2f1efad1447c66c9525e316218cf51fc8d9ed832f2daf18b73\",\n        )\n    def test_verify_hash_correct(self):\n        \"\"\"Test that the function returns True when verify_hash is correct.\"\"\"\n        self.assertTrue(\n            task_func(\n                \"Hello, World!\",\n                \"dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f\",\n            )\n        )\n    def test_verify_hash_incorrect(self):\n        \"\"\"Test that the function returns False when verify_hash is incorrect.\"\"\"\n        self.assertFalse(task_func(\"Hello, World!\", \"incorrect_hash\"))\n    def test_verify_hash_none(self):\n        \"\"\"Test that the function returns None when verify_hash is None.\"\"\"\n        self.assertEqual(\n            task_func(\"Hello, World!\"),\n            \"dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f\",\n        )\n    def test_input_string_not_string(self):\n        \"\"\"Test that the function raises an error when the input is not a string.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func(123)\n    def test_verify_hash_not_string_or_none(self):\n        \"\"\"Test that the function raises an error when verify_hash is not a string or None.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func(\"Hello, World!\", 123)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Adds an item \"12\" to a list 'my_list', simulates sales data for different categories with an optional seed for reproducibility, and returns the data along with a bar plot. The sales data is a DataFrame with random sales figures for predefined categories. The categories are 'Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'.\nThe function should raise the exception for: TypeError: If 'my_list' is not a list.\nThe function should output with:\n    tuple: A tuple containing a pandas DataFrame of simulated sales data and the corresponding matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(my_list, seed=42):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(my_list, seed=42):\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    my_list.append(12)\n    categories = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n    sales_data = []\n    for category in categories:\n        sales = my_list[np.random.randint(0, len(my_list))] * np.random.randint(100, 1000)\n        sales_data.append([category, sales])\n\n    sales_df = pd.DataFrame(sales_data, columns=['Category', 'Sales'])\n\n    ax = sales_df.plot(kind='bar', x='Category', y='Sales', legend=False)\n    ax.set_title('Category-wise Sales Data')\n    ax.set_ylabel('Sales')\n\n    return sales_df, ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_reproducibility_with_seed(self):\n        seed_value = 42\n        data1, _ = task_func([1, 2, 3], seed=seed_value)\n        data2, _ = task_func([1, 2, 3], seed=seed_value)\n        pd.testing.assert_frame_equal(data1, data2)\n    def test_output_types(self):\n        my_list = [1, 2, 3]\n        data, ax = task_func(my_list, 42)\n        df_list = data.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertIsInstance(ax, plt.Axes)\n        expect = ['Electronics,1605', 'Fashion,370', 'Home & Kitchen,513', 'Automotive,120', 'Sports,663']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    def test_invalid_input_type(self):\n        with self.assertRaises(TypeError):\n            task_func(\"not a list\")\n    def test_plot_title(self):\n        my_list = [1, 2, 3]\n        _, ax = task_func(my_list)\n        self.assertEqual(ax.get_title(), 'Category-wise Sales Data')\n    def test_sales_data_length(self):\n        my_list = [1, 2, 3]\n        data, _ = task_func(my_list)\n        self.assertEqual(len(data), 5)  # 5 categories",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Python dictionary with a specified number of keys and values.\nNote that: Keys are randomly selected from a predefined list of letters, and values are consecutive integers starting from 1. Due to the randomness in key selection, the actual keys in the dictionary may vary in each execution.\nThe function should output with:\n    dict: A Python dictionary with keys as strings and values as lists of integers.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n```",
        "gt": "import collections\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndef task_func(n_keys, n_values):\n\n    keys = [random.choice(LETTERS) for _ in range(n_keys)]\n    values = list(range(1, n_values + 1))\n    return dict(collections.OrderedDict((k, values) for k in keys))",
        "test": "import unittest\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\nclass TestCases(unittest.TestCase):\n    def test_basic_functionality(self):\n        random.seed(0)\n        result = task_func(3, 5)\n        self.assertLessEqual(len(result), 3)\n        for key in result:\n            self.assertIn(key, LETTERS)\n            self.assertEqual(result[key], [1, 2, 3, 4, 5])\n    def test_no_keys(self):\n        random.seed(0)\n        result = task_func(0, 5)\n        self.assertEqual(result, {})\n    def test_no_values(self):\n        random.seed(0)\n        result = task_func(3, 0)\n        for key in result:\n            self.assertEqual(result[key], [])\n    def test_large_input(self):\n        random.seed(0)\n        result = task_func(10, 1000)\n        for key in result:\n            self.assertIn(key, LETTERS)\n            self.assertEqual(len(result[key]), 1000)\n    def test_max_keys(self):\n        random.seed(0)\n        result = task_func(len(LETTERS), 5)\n        for key in result:\n            self.assertIn(key, LETTERS)\n            self.assertEqual(result[key], [1, 2, 3, 4, 5])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Get a list of files in a directory and send that list by e-mail to a specific recipient using a provided SendGrid API key.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist. HTTPError: If an HTTP error occurs during the sending process. Exception: For any other exceptions that may occur during the execution.\nThe function should output with:\n    bool: True if the email was sent successfully. Specifically, a successful send is indicated by an HTTP status code in the 2xx range, which denotes success. False is returned if the directory does not exist.\nYou should write self-contained code starting with:\n```\nimport os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n```",
        "gt": "import os\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail\nfrom python_http_client.exceptions import HTTPError\ndef task_func(dir, api_key, recipient_email):\n    try:\n        file_list = os.listdir(dir)\n    except:\n        raise FileNotFoundError(f\"Directory '{dir}' does not exist.\")\n\n    file_list_str = ', '.join(file_list)\n\n    message = Mail(\n        from_email='from_email@example.com',\n        to_emails=recipient_email,\n        subject=f'Directory Listing for {dir}',\n        plain_text_content=file_list_str)\n\n    try:\n        sg = SendGridAPIClient(api_key)\n        response = sg.send(message)\n        # Assuming success codes are in the 2xx range\n        return 200 <= response.status_code < 300\n    except HTTPError as e:\n        print(f\"HTTP error occurred: {e}\")\n        raise\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        raise",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock, Mock\nimport os\nfrom python_http_client.exceptions import HTTPError\nclass TestCases(unittest.TestCase):\n    @patch('os.path.exists')\n    @patch('sendgrid.SendGridAPIClient.send')\n    @patch('os.listdir')\n    def test_successful_email_send(self, mock_listdir, mock_send, mock_exists):\n        \"\"\"Test successful email sending with a valid directory.\"\"\"\n        mock_listdir.return_value = ['file1.gz', 'file2.gz']\n        mock_exists.return_value = True\n        mock_send.return_value = MagicMock(status_code=202)\n        \n        api_key = 'test_api_key'\n        recipient_email = 'test@example.com'\n        result = task_func('./valid_directory', api_key, recipient_email)\n        self.assertTrue(result)\n    def test_invalid_directory(self):\n        \"\"\"Test the handling of an invalid directory.\"\"\"\n        api_key = 'test_api_key'\n        recipient_email = 'test@example.com'\n        with self.assertRaises(FileNotFoundError):\n            task_func('/nonexistent_directory', api_key, recipient_email)\n        \n    @patch('os.path.exists')\n    @patch('os.listdir')\n    @patch('sendgrid.SendGridAPIClient.send')\n    def test_failed_email_send(self, mock_send, mock_listdir, mock_exists):\n        \"\"\"Test handling of a failed email send by ensuring HTTPError is raised.\"\"\"\n        mock_listdir.return_value = ['file1.gz', 'file2.gz']\n        mock_response = Mock(status_code=400, body='Bad Request')\n        mock_exists.return_value = True\n        mock_send.side_effect = HTTPError(mock_response, 'Failed to send')\n        api_key = 'test_api_key'\n        recipient_email = 'test@example.com'\n        with self.assertRaises(HTTPError):\n            task_func('./valid_directory', api_key, recipient_email)\n    @patch('os.path.exists')\n    @patch('sendgrid.SendGridAPIClient.send')\n    @patch('os.listdir')\n    def test_empty_directory(self, mock_listdir, mock_send, mock_exists):\n        \"\"\"Test sending an email with an empty directory.\"\"\"\n        mock_listdir.return_value = []\n        mock_send.return_value = MagicMock(status_code=202)\n        mock_exists.return_value = True\n        api_key = 'test_api_key'\n        recipient_email = 'test@example.com'\n        result = task_func('./empty_directory', api_key, recipient_email)\n        self.assertTrue(result)\n    @patch('os.path.exists')\n    @patch('sendgrid.SendGridAPIClient.send')\n    @patch('os.listdir')\n    def test_generic_exception_handling(self, mock_listdir, mock_send, mock_exists):\n        \"\"\"Test handling of generic exceptions during email sending.\"\"\"\n        mock_listdir.return_value = ['file1.gz', 'file2.gz']\n        mock_send.side_effect = Exception('Generic error')\n        mock_exists.return_value = True\n        api_key = 'test_api_key'\n        recipient_email = 'test@example.com'\n        with self.assertRaises(Exception):\n            task_func('./valid_directory', api_key, recipient_email)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Attempts to compile a existing C++ file specified by 'filepath'. The output of the compilation process is logged, indicating whether the compilation was successful or not. This function is useful for automating the compilation of C++ code and tracking compilation results. The log should indicate whether the compilation was successful or if an error occurred.\nThe function should raise the exception for: subprocess.CalledProcessError: If the compilation process fails. FileNotFoundError: If the compiler is not found or the specified file does not exist.\nThe function should output with:\n    None: This function does not return anything but logs the outcome of the compilation process.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport logging\ndef task_func(filepath):\n```",
        "gt": "import subprocess\nimport logging\ndef task_func(filepath):\n    # Configure logging\n    logging.basicConfig(level=logging.INFO)\n\n    # Try to compile the C++ file\n    try:\n        subprocess.check_call(['g++', filepath, '-o', filepath.split('.')[0]])\n        logging.info('Successfully compiled %s', filepath)\n    except subprocess.CalledProcessError as e:\n        logging.error('Failed to compile %s: %s', filepath, e)\n\n    except FileNotFoundError as e:\n        logging.error('Compiler not found or file does not exist: %s', e)",
        "test": "import os\nimport unittest\nimport logging\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup an empty test file\n        self.empty_file = './empty_file.cpp'\n        with open(self.empty_file, 'w') as f:\n            f.write(\"\")\n    @patch('subprocess.check_call')\n    def test_successful_compilation(self, mock_check_call):\n        task_func('example.cpp')\n        mock_check_call.assert_called_with(['g++', 'example.cpp', '-o', 'example'])\n    @patch('subprocess.check_call', side_effect=subprocess.CalledProcessError(1, ['g++']))\n    def test_compilation_failure(self, mock_check_call):\n        task_func('example.cpp')\n        mock_check_call.assert_called_with(['g++', 'example.cpp', '-o', 'example'])\n    \n    @patch('logging.error')\n    @patch('subprocess.check_call', side_effect=FileNotFoundError)\n    def test_compiler_not_found(self, mock_check_call, mock_logging_error):\n        task_func('example.cpp')\n        mock_logging_error.assert_called()\n    @patch('logging.error')\n    def test_empty_file(self, mock_logging_error):\n        task_func(self.empty_file)\n        mock_logging_error.assert_called()\n    @patch('logging.error')\n    @patch('subprocess.check_call', side_effect=FileNotFoundError())\n    def test_logging_output(self, mock_check_call, mock_logging):\n        task_func('example.cpp')\n        mock_logging.assert_called()\n    def tearDown(self):\n        # Clean up created files\n        os.remove(self.empty_file)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Computes the MinMax-normalized cumulative sum for each numeric column in the given DataFrame.\nThe function should raise the exception for: TypeError: If the DataFrame contains non-numeric data types. ValueError: If the DataFrame is empty or contains NaN values.\nThe function should output with:\n    pd.DataFrame: A DataFrame where each column contains the normalized cumulative sum of the\n    respective column in the input DataFrame, retaining the original column names.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n```",
        "gt": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    if df.select_dtypes(include=np.number).shape[1] != df.shape[1]:\n        raise TypeError(\"Input DataFrame contains non-numeric data types.\")\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"Input DataFrame is empty or contains NaN values.\")\n\n    df_cumsum = df.cumsum()\n    scaler = MinMaxScaler()\n    df_norm_cumsum = pd.DataFrame(scaler.fit_transform(df_cumsum), columns=df.columns)\n\n    return df_norm_cumsum",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def check_cumsum_and_scaling(self, input_df, expected_output):\n        output = task_func(input_df)\n        pd.testing.assert_frame_equal(\n            output, expected_output, check_dtype=False, atol=1e-5\n        )\n    def test_incremental_values(self):\n        before = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [3, 2, 1]})\n        after = pd.DataFrame({\"A\": [0.0, 0.4, 1.0], \"B\": [0.0, 0.66666667, 1.0]})\n        self.check_cumsum_and_scaling(before, after)\n        self.assertEqual(set(before.columns), set(after.columns))\n    def test_negative_numbers(self):\n        before = pd.DataFrame({\"A\": [-1, -2, -3], \"B\": [-3, -2, -1]})\n        after = pd.DataFrame({\"A\": [1.0, 0.6, 0.0], \"B\": [1.0, 0.33333333, 0.0]})\n        self.check_cumsum_and_scaling(before, after)\n        self.assertEqual(set(before.columns), set(after.columns))\n    def test_all_zeros(self):\n        before = pd.DataFrame({\"A\": [0, 0, 0], \"B\": [0, 0, 0]})\n        after = pd.DataFrame({\"A\": [0.0, 0.0, 0.0], \"B\": [0.0, 0.0, 0.0]})\n        self.check_cumsum_and_scaling(before, after)\n        self.assertEqual(set(before.columns), set(after.columns))\n    def test_same_numbers(self):\n        before = pd.DataFrame({\"A\": [5, 5, 5], \"B\": [2, 2, 2]})\n        after = pd.DataFrame({\"A\": [0.0, 0.5, 1.0], \"B\": [0.0, 0.5, 1.0]})\n        self.check_cumsum_and_scaling(before, after)\n        self.assertEqual(set(before.columns), set(after.columns))\n    def test_non_numeric_data_raises(self):\n        with self.assertRaises(TypeError):\n            task_func(pd.DataFrame({\"A\": [\"one\", \"two\", \"three\"], \"B\": [1, 2, 3]}))\n    def test_nan_values_raise(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({\"A\": [1, np.nan, 3], \"B\": [3, 2, 1]}))\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scale all values with the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d\" with MinMaxScaler. >>> data = [{'x': -1, 'y': 0, 'z': 5}, {'x': 3, 'y': -15, 'z': 0}, {'x': 0, 'y': 1, 'z': -7}] >>> print(task_func(data)) x       y         z 0  0.00  0.9375  1.000000 1  1.00  0.0000  0.583333 2  0.25  1.0000  0.000000\nThe function should output with:\n    DataFrame: A pandas DataFrame with scaled values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n# Updated function to handle empty input list\ndef task_func(d):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n# Updated function to handle empty input list\ndef task_func(d):\n    if not d:  # Check if the input list is empty\n        return pd.DataFrame(columns=['x', 'y', 'z'])  # Return an empty DataFrame with specified columns\n    \n    df = pd.DataFrame(d)\n    scaler = MinMaxScaler()\n    scaled_df = pd.DataFrame(scaler.fit_transform(df[['x', 'y', 'z']]), columns=['x', 'y', 'z'])\n\n    return scaled_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        data = [{'x': 1, 'y': 10, 'z': 5}, {'x': 3, 'y': 15, 'z': 6}, {'x': 2, 'y': 1, 'z': 7}]\n        result = task_func(data)\n        expected_df = pd.DataFrame({'x': [0.0, 1.0, 0.5], 'y': [0.642857, 1.0, 0.0], 'z': [0.0, 0.5, 1.0]})\n        pd.testing.assert_frame_equal(result, expected_df)\n    \n    def test_case_2(self):\n        data = [{'x': -1, 'y': 0, 'z': 5}, {'x': 3, 'y': -15, 'z': 0}, {'x': 0, 'y': 1, 'z': -7}]\n        result = task_func(data)\n        expected_df = pd.DataFrame({'x': [0.0, 1.0, 0.25], 'y': [0.9375, 0.0, 1.0], 'z': [1.0, 0.583333, 0.0]})\n        pd.testing.assert_frame_equal(result, expected_df)\n        \n    def test_case_3(self):\n        data = []\n        result = task_func(data)\n        expected_df = pd.DataFrame(columns=['x', 'y', 'z'])\n        pd.testing.assert_frame_equal(result, expected_df)\n    \n    def test_case_4(self):\n        data = [{'x': 1}, {'y': 2}, {'z': 3}]\n        result = task_func(data)\n        expected_df = pd.DataFrame({'x': [0.0, None, None], 'y': [None, 0.0, None], 'z': [None, None, 0.0]})\n        pd.testing.assert_frame_equal(result, expected_df)\n       \n    def test_case_5(self):\n        data = [{'x': 1, 'y': 2}, {'x': 3, 'z': 4}]\n        result = task_func(data)\n        expected_df = pd.DataFrame({'x': [0.0, 1.0], 'y': [0.0, None], 'z': [None, 0.0]})\n        pd.testing.assert_frame_equal(result, expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random set of floating-point numbers within a specified range, truncate each value to 3 decimal places, and divide the data into train and test sets based on a given test size.\nNote that: The function use \"Value\" for the column name in the DataFrames (train set, test set) that being returned.\nThe function should output with:\n    tuple: A tuple with two pandas DataFrames (train set, test set).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n```",
        "gt": "import pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\ndef task_func(n_data_points=10000, min_value=0.0, max_value=10.0, test_size=0.2):\n\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    train_data, test_data = train_test_split(data_df, test_size=test_size)\n\n    return train_data, test_data",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        random.seed(0)\n        train_data, test_data = task_func()\n        self.assertEqual(len(train_data), 8000)  # 80% of 10000\n        self.assertEqual(len(test_data), 2000)  # 20% of 10000\n    def test_custom_parameters(self):\n        random.seed(0)\n        train_data, test_data = task_func(n_data_points=500, min_value=1.0, max_value=5.0, test_size=0.3)\n        self.assertEqual(len(train_data), 350)  # 70% of 500\n        self.assertEqual(len(test_data), 150)  # 30% of 500\n        self.assertTrue(train_data['Value'].between(1.0, 5.0).all())\n        self.assertTrue(test_data['Value'].between(1.0, 5.0).all())\n    def test_train_test_size_ratio(self):\n        random.seed(0)\n        n_data_points = 1000\n        test_size = 0.25\n        train_data, test_data = task_func(n_data_points=n_data_points, test_size=test_size)\n        expected_train_size = int(n_data_points * (1 - test_size))\n        expected_test_size = n_data_points - expected_train_size\n        self.assertEqual(len(train_data), expected_train_size)\n        self.assertEqual(len(test_data), expected_test_size)\n    def test_value_range(self):\n        random.seed(0)\n        min_value = 2.0\n        max_value = 3.0\n        train_data, _ = task_func(min_value=min_value, max_value=max_value)\n        self.assertTrue(train_data['Value'].between(min_value, max_value).all())\n    def test_value_precision(self):\n        random.seed(0)\n        train_data, _ = task_func()\n        all_three_decimal = all(train_data['Value'].apply(lambda x: len(str(x).split('.')[1]) == 3))\n        self.assertFalse(all_three_decimal)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compare two CSV files and create a difference report. This function compares two CSV files line by line and provides a detailed report of the differences. It represents each difference with a line number, a status indicator, and the content of that line.\nThe function should raise the exception for: FileNotFoundError: If either of the files cannot be found. ValueError: If either of the files is empty. Exception: For other IO related errors.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the differences. The DataFrame contains the following columns:\n    'Line Number': The line number in the file where the difference occurs.\n    'Status': A character indicating the type of difference:\n    ' ': No change (line is the same in both files).\n    '-': Line present in the first file but not in the second.\n    '+': Line present in the second file but not in the first.\n    'Content': The actual text content of the line from either file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n```",
        "gt": "import pandas as pd\nimport csv\nfrom difflib import ndiff\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n\n    def csv_to_list(file_path, delimiter=',', quotechar='\"'):\n        with open(file_path, 'r', newline='') as file:\n            reader = csv.reader(file, delimiter=delimiter, quotechar=quotechar)\n            content = [tuple(row) for row in reader]\n            if not content:  # This checks if the list is empty after iterating over the reader\n                raise ValueError(f\"The file '{file_path}' is empty.\")\n            return content\n\n    \n    try:\n        csv_content1 = csv_to_list(file_path1, delimiter, quotechar)\n        csv_content2 = csv_to_list(file_path2, delimiter, quotechar)\n        diff = ndiff(csv_content1, csv_content2)\n\n        headers = ['Line Number', 'Status', 'Content']\n        data = []\n\n        for i, line in enumerate(diff):\n            status, content = line[0], line[2:].strip()\n            data.append([i + 1, status, content])\n\n        df = pd.DataFrame(data, columns=headers)\n        return df\n    except FileNotFoundError as e:\n        raise FileNotFoundError(f\"File not found: {e}\")\n    except ValueError as e:\n    # Reraise ValueError to signal an empty file directly.\n        raise ValueError(f\"Error processing files: {e}\")\n    except Exception as e:\n        raise Exception(f\"Error processing files: {e}\")",
        "test": "import unittest\nimport pandas as pd\nimport os\nimport csv\ndef create_dummy_test_files():\n    # Data for files with default delimiter (',')\n    data1 = [[\"name\", \"age\"], [\"Alice\", \"30\"], [\"Bob\", \"25\"]]\n    data2 = [[\"name\", \"age\"], [\"Alice\", \"31\"], [\"Bob\", \"25\"]]\n    # File paths for custom delimiter files\n    test_file1 = 'file1.csv'\n    test_file2 = 'file2.csv'\n    # Create files with default delimiter (',')\n    with open(test_file1, 'w', newline='') as f1, open(test_file2, 'w', newline='') as f2:\n        writer1 = csv.writer(f1)\n        writer2 = csv.writer(f2)\n        writer1.writerows(data1)\n        writer2.writerows(data2)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup test CSV files\n        self.test_file1 = 'test1.csv'\n        self.test_file2 = 'test2.csv'\n        self.test_file3 = 'test3.csv'\n        self.test_file4 = 'test4.csv'\n        self.create_test_files()\n        self.create_empty_test_files()\n    def create_test_files(self):\n        # Data for files with default delimiter (',')\n        data1 = [[\"name\", \"age\"], [\"Alice\", \"30\"], [\"Bob\", \"25\"]]\n        data2 = [[\"name\", \"age\"], [\"Alice\", \"31\"], [\"Bob\", \"25\"]]\n        # Data for files with custom delimiter (';')\n        data3 = [[\"name;age\"], [\"Alice;30\"], [\"Bob;25\"]]\n        data4 = [[\"name;age\"], [\"Alice;31\"], [\"Bob;25\"]]\n        # File paths for custom delimiter files\n        self.test_file3 = 'test3.csv'\n        self.test_file4 = 'test4.csv'\n        # Create files with default delimiter (',')\n        with open(self.test_file1, 'w', newline='') as f1, open(self.test_file2, 'w', newline='') as f2:\n            writer1 = csv.writer(f1)\n            writer2 = csv.writer(f2)\n            writer1.writerows(data1)\n            writer2.writerows(data2)\n        # Create files with custom delimiter (';')\n        # Note: For data3 and data4, we directly write strings to preserve the custom delimiter\n        with open(self.test_file3, 'w', newline='') as f3, open(self.test_file4, 'w', newline='') as f4:\n            f3.writelines('\\n'.join([','.join(row) for row in data3]))\n            f4.writelines('\\n'.join([','.join(row) for row in data4]))\n    def test_difference_report(self):\n        df = task_func(self.test_file1, self.test_file2)\n        df_list = df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = [\"1, ,('name', 'age')\", \"2,-,('Alice', '30')\", \"3,+,('Alice', '31')\", \"4, ,('Bob', '25')\"]\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue(len(df) >= 1)\n        self.assertEqual(df_list, expect,)\n    def test_file_not_found(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent1.csv', 'nonexistent2.csv')\n    def test_custom_delimiter(self):\n        df = task_func(self.test_file3, self.test_file4, delimiter=';')\n        self.assertIsInstance(df, pd.DataFrame)\n    def test_invalid_file_path(self):\n        with self.assertRaises(Exception):\n            task_func(123, 456)\n            \n    @classmethod\n    def create_empty_test_files(cls):\n        cls.empty_file1 = 'empty1.csv'\n        cls.empty_file2 = 'empty2.csv'\n        open(cls.empty_file1, 'w').close()  # Creates an empty file\n        open(cls.empty_file2, 'w').close()  \n    def test_empty_files(self):\n        # Assuming the setup creates two empty files 'empty1.csv' and 'empty2.csv'\n        with self.assertRaises(ValueError, msg=\"Expected ValueError for empty files\"):\n            task_func(self.empty_file1, self.empty_file2)\n    def tearDown(self):\n        os.remove(self.test_file1)\n        os.remove(self.test_file2)\n        os.remove(self.test_file3)\n        os.remove(self.test_file4)\n        os.remove(self.empty_file1)\n        os.remove(self.empty_file2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the frequency of continuous words in a text string. The function splits the text into words, converts them to lowercase, removes punctuation marks and common stopwords (provided as a constant), and then calculates the frequency of each word.\nThe function should output with:\n    dict: A dictionary with words as keys and their frequencies as values.\nYou should write self-contained code starting with:\n```\nimport nltk\nimport re\nfrom collections import Counter\n# Constants\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n```",
        "gt": "import nltk\nimport re\nfrom collections import Counter\n# Constants\nSTOPWORDS = nltk.corpus.stopwords.words('english')\ndef task_func(text):\n    words = re.split(r'\\W+', text.lower())\n    words = [word for word in words if word not in STOPWORDS and word != '']\n    word_freq = dict(Counter(words))\n\n    return word_freq",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Basic test\n        text = 'This is a sample text. This text is for testing.'\n        expected_output = {'sample': 1, 'text': 2, 'testing': 1}\n        self.assertEqual(task_func(text), expected_output)\n    def test_case_2(self):\n        # Test with stopwords\n        text = 'The quick brown fox jumped over the lazy dog.'\n        expected_output = {'quick': 1, 'brown': 1, 'fox': 1, 'jumped': 1, 'lazy': 1, 'dog': 1}\n        self.assertEqual(task_func(text), expected_output)\n    def test_case_3(self):\n        # Test with punctuation\n        text = 'Hello, world! How are you today?'\n        expected_output = {'hello': 1, 'world': 1, 'today': 1}\n        self.assertEqual(task_func(text), expected_output)\n    def test_case_4(self):\n        # Test with empty string\n        text = ''\n        expected_output = {}\n        self.assertEqual(task_func(text), expected_output)\n    def test_case_5(self):\n        # Test with numeric values and special characters\n        text = 'Python3 is better than Python2. I love Python3.5!'\n        expected_output = {'python3': 2, 'better': 1, 'python2': 1, 'love': 1, '5': 1}\n        self.assertEqual(task_func(text), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Apply KMeans clustering to a 2D numeric array and find the indices of the data points in each cluster. >>> data = np.array([[1, 1], [2, 2]]) >>> cluster = task_func(data, 2) >>> cluster_list = list(cluster.values()) >>> cluster_list.sort(key=lambda x: x[0]) >>> print(cluster_list) [array([0]), array([1])]\nThe function should output with:\n    dict: A dictionary where keys are cluster labels and values are lists of indices for data points in the cluster.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n```",
        "gt": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters):\n    kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    labels = kmeans.labels_\n    clusters = {i: np.where(labels == i)[0] for i in range(n_clusters)}\n    return clusters",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = np.array([[1, 1], [1.1, 1.1], [5, 5], [5.1, 5.1]])\n        result = task_func(data, 2)\n        self.assertEqual(len(result), 2)\n        self.assertTrue(isinstance(result[0], np.ndarray))\n        self.assertTrue(isinstance(result[1], np.ndarray))\n        result_list = [x.tolist() for x in result.values()]\n        self.assertCountEqual(result_list, [[0, 1], [2, 3]])\n    def test_case_2(self):\n        data = np.array([[1, 2], [1, 3],[1, 4], [1, 5], [200, 1], [200, 2], [200, 3], [3000, 1], [3000, 3]])\n        result = task_func(data, 3)\n        self.assertEqual(len(result), 3)\n        self.assertTrue(isinstance(result[0], np.ndarray))\n        self.assertTrue(isinstance(result[1], np.ndarray))\n        result_list = [x.tolist() for x in result.values()]\n        self.assertCountEqual(result_list, [[0, 1, 2, 3], [4, 5, 6], [7, 8]])\n    def test_case_3(self):\n        data = np.array([[1, 2]])\n        result = task_func(data, 1)\n        self.assertEqual(len(result), 1)\n        self.assertTrue(isinstance(result[0], np.ndarray))\n        self.assertCountEqual(list(result.values()), [0])\n    def test_case_4(self):\n        '''wrong input'''\n        self.assertRaises(Exception, task_func, [])\n        self.assertRaises(Exception, task_func, 2)\n        self.assertRaises(Exception, task_func, [['asv', 1]])\n        self.assertRaises(Exception, task_func, {})\n    def test_case_5(self):\n        data = np.array([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])\n        result = task_func(data, 5)\n        self.assertEqual(len(result), 5)\n        for i in range(5):\n            self.assertTrue(isinstance(result[i], np.ndarray))\n        result_list = [x.tolist() for x in result.values()]\n        self.assertCountEqual(result_list, [[0], [1], [2], [3], [4]])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find all unique combinations of 3 numbers from a list that add up to a certain element. If the number_list is empty, or there is no combination that adds up to the element, an empty dataframe is returned. >>> result = task_func([-1, 1, 0, -2, 2, 3], 0) >>> print(result) Combinations 0  (-1, -2, 3) 1   (-1, 1, 0) 2   (0, -2, 2) >>> result = task_func([], 0) >>> print(result) Empty DataFrame Columns: [Combinations] Index: []\nThe function should output with:\n    Pandas DataFrame: A pandas Dataframe with the column 'Combinations',\n    where each row contains a tuple containing a unique combination of 3 numbers that add up to the element.\nYou should write self-contained code starting with:\n```\nfrom itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n```",
        "gt": "from itertools import combinations\nimport pandas as pd\ndef task_func(number_list, element):\n    combinations_list = list(combinations(number_list, 3))\n    valid_combinations = [comb for comb in combinations_list if sum(comb) == element]\n    \n    # Return only unique combinations\n    return pd.DataFrame({'Combinations': list(set(valid_combinations))})",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func([1, 2, 3, 4, 5, 6], 6)\n        expected = pd.DataFrame(\n            {'Combinations': {0: (1, 2, 3)}}\n        )\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_2(self):\n        result = task_func(list(range(1, 51)) + [50], 50)\n        expected = pd.DataFrame(\n                {'Combinations': {0: (1, 12, 37),\n                1: (1, 13, 36),\n                2: (12, 16, 22),\n                3: (3, 22, 25),\n                4: (2, 14, 34),\n                5: (3, 23, 24),\n                6: (5, 12, 33),\n                7: (5, 13, 32),\n                8: (9, 10, 31),\n                9: (1, 11, 38),\n                10: (3, 20, 27),\n                11: (3, 21, 26),\n                12: (6, 19, 25),\n                13: (5, 11, 34),\n                14: (9, 16, 25),\n                15: (2, 5, 43),\n                16: (7, 20, 23),\n                17: (1, 2, 47),\n                18: (7, 21, 22),\n                19: (6, 10, 34),\n                20: (6, 17, 27),\n                21: (6, 18, 26),\n                22: (11, 13, 26),\n                23: (2, 3, 45),\n                24: (2, 4, 44),\n                25: (7, 19, 24),\n                26: (6, 8, 36),\n                27: (10, 18, 22),\n                28: (4, 13, 33),\n                29: (6, 16, 28),\n                30: (4, 21, 25),\n                31: (3, 10, 37),\n                32: (11, 19, 20),\n                33: (10, 16, 24),\n                34: (1, 22, 27),\n                35: (4, 11, 35),\n                36: (4, 12, 34),\n                37: (7, 10, 33),\n                38: (12, 18, 20),\n                39: (4, 19, 27),\n                40: (3, 8, 39),\n                41: (3, 9, 38),\n                42: (6, 7, 37),\n                43: (1, 21, 28),\n                44: (4, 10, 36),\n                45: (5, 14, 31),\n                46: (7, 8, 35),\n                47: (7, 9, 34),\n                48: (15, 16, 19),\n                49: (3, 7, 40),\n                50: (2, 22, 26),\n                51: (9, 18, 23),\n                52: (2, 23, 25),\n                53: (5, 21, 24),\n                54: (9, 19, 22),\n                55: (1, 19, 30),\n                56: (8, 15, 27),\n                57: (1, 20, 29),\n                58: (8, 16, 26),\n                59: (4, 9, 37),\n                60: (5, 19, 26),\n                61: (9, 17, 24),\n                62: (8, 13, 29),\n                63: (2, 13, 35),\n                64: (8, 14, 28),\n                65: (1, 10, 39),\n                66: (4, 7, 39),\n                67: (12, 14, 24),\n                68: (8, 12, 30),\n                69: (2, 12, 36),\n                70: (10, 19, 21),\n                71: (1, 8, 41),\n                72: (1, 9, 40),\n                73: (4, 22, 24),\n                74: (2, 10, 38),\n                75: (3, 19, 28),\n                76: (2, 11, 37),\n                77: (5, 9, 36),\n                78: (10, 17, 23),\n                79: (2, 18, 30),\n                80: (1, 7, 42),\n                81: (4, 20, 26),\n                82: (14, 17, 19),\n                83: (3, 17, 30),\n                84: (3, 18, 29),\n                85: (5, 7, 38),\n                86: (4, 18, 28),\n                87: (7, 17, 26),\n                88: (13, 18, 19),\n                89: (3, 15, 32),\n                90: (14, 16, 20),\n                91: (3, 16, 31),\n                92: (6, 14, 30),\n                93: (5, 6, 39),\n                94: (5, 22, 23),\n                95: (11, 17, 22),\n                96: (7, 15, 28),\n                97: (7, 16, 27),\n                98: (6, 12, 32),\n                99: (6, 13, 31),\n                100: (5, 20, 25),\n                101: (3, 6, 41),\n                102: (11, 15, 24),\n                103: (11, 16, 23),\n                104: (10, 13, 27),\n                105: (4, 8, 38),\n                106: (12, 15, 23),\n                107: (4, 16, 30),\n                108: (3, 5, 42),\n                109: (2, 20, 28),\n                110: (2, 21, 27),\n                111: (1, 17, 32),\n                112: (4, 6, 40),\n                113: (1, 18, 31),\n                114: (12, 13, 25),\n                115: (4, 14, 32),\n                116: (3, 4, 43),\n                117: (3, 11, 36),\n                118: (5, 10, 35),\n                119: (2, 19, 29),\n                120: (9, 15, 26),\n                121: (5, 18, 27),\n                122: (1, 15, 34),\n                123: (1, 16, 33),\n                124: (5, 8, 37),\n                125: (9, 13, 28),\n                126: (5, 16, 29),\n                127: (9, 14, 27),\n                128: (8, 10, 32),\n                129: (8, 11, 31),\n                130: (7, 18, 25),\n                131: (6, 15, 29),\n                132: (9, 11, 30),\n                133: (9, 12, 29),\n                134: (11, 18, 21),\n                135: (2, 8, 40),\n                136: (8, 9, 33),\n                137: (2, 9, 39),\n                138: (10, 15, 25),\n                139: (1, 5, 44),\n                140: (1, 6, 43),\n                141: (6, 21, 23),\n                142: (13, 17, 20),\n                143: (14, 15, 21),\n                144: (2, 6, 42),\n                145: (2, 7, 41),\n                146: (10, 14, 26),\n                147: (1, 3, 46),\n                148: (1, 4, 45),\n                149: (13, 15, 22),\n                150: (4, 17, 29),\n                151: (6, 20, 24),\n                152: (13, 16, 21),\n                153: (3, 13, 34),\n                154: (3, 14, 33),\n                155: (10, 12, 28),\n                156: (4, 15, 31),\n                157: (7, 13, 30),\n                158: (7, 14, 29),\n                159: (13, 14, 23),\n                160: (3, 12, 35),\n                161: (6, 11, 33),\n                162: (11, 14, 25),\n                163: (1, 24, 25),\n                164: (8, 20, 22),\n                165: (7, 12, 31),\n                166: (10, 11, 29),\n                167: (6, 9, 35),\n                168: (5, 17, 28),\n                169: (11, 12, 27),\n                170: (1, 23, 26),\n                171: (8, 19, 23),\n                172: (7, 11, 32),\n                173: (15, 17, 18),\n                174: (4, 5, 41),\n                175: (5, 15, 30),\n                176: (9, 20, 21),\n                177: (8, 17, 25),\n                178: (2, 17, 31),\n                179: (8, 18, 24),\n                180: (1, 14, 35),\n                181: (12, 17, 21),\n                182: (2, 15, 33),\n                183: (2, 16, 32)}}\n                  )\n        pd.testing.assert_frame_equal(result, expected)\n    def test_case_4(self):\n        random_list = [i for i in range(1, 51)] + [50]\n        result = task_func(random_list, 50)\n        expected = pd.DataFrame(\n{'Combinations': {0: (1, 12, 37),\n  1: (1, 13, 36),\n  2: (12, 16, 22),\n  3: (3, 22, 25),\n  4: (2, 14, 34),\n  5: (3, 23, 24),\n  6: (5, 12, 33),\n  7: (5, 13, 32),\n  8: (9, 10, 31),\n  9: (1, 11, 38),\n  10: (3, 20, 27),\n  11: (3, 21, 26),\n  12: (6, 19, 25),\n  13: (5, 11, 34),\n  14: (9, 16, 25),\n  15: (2, 5, 43),\n  16: (7, 20, 23),\n  17: (1, 2, 47),\n  18: (7, 21, 22),\n  19: (6, 10, 34),\n  20: (6, 17, 27),\n  21: (6, 18, 26),\n  22: (11, 13, 26),\n  23: (2, 3, 45),\n  24: (2, 4, 44),\n  25: (7, 19, 24),\n  26: (6, 8, 36),\n  27: (10, 18, 22),\n  28: (4, 13, 33),\n  29: (6, 16, 28),\n  30: (4, 21, 25),\n  31: (3, 10, 37),\n  32: (11, 19, 20),\n  33: (10, 16, 24),\n  34: (1, 22, 27),\n  35: (4, 11, 35),\n  36: (4, 12, 34),\n  37: (7, 10, 33),\n  38: (12, 18, 20),\n  39: (4, 19, 27),\n  40: (3, 8, 39),\n  41: (3, 9, 38),\n  42: (6, 7, 37),\n  43: (1, 21, 28),\n  44: (4, 10, 36),\n  45: (5, 14, 31),\n  46: (7, 8, 35),\n  47: (7, 9, 34),\n  48: (15, 16, 19),\n  49: (3, 7, 40),\n  50: (2, 22, 26),\n  51: (9, 18, 23),\n  52: (2, 23, 25),\n  53: (5, 21, 24),\n  54: (9, 19, 22),\n  55: (1, 19, 30),\n  56: (8, 15, 27),\n  57: (1, 20, 29),\n  58: (8, 16, 26),\n  59: (4, 9, 37),\n  60: (5, 19, 26),\n  61: (9, 17, 24),\n  62: (8, 13, 29),\n  63: (2, 13, 35),\n  64: (8, 14, 28),\n  65: (1, 10, 39),\n  66: (4, 7, 39),\n  67: (12, 14, 24),\n  68: (8, 12, 30),\n  69: (2, 12, 36),\n  70: (10, 19, 21),\n  71: (1, 8, 41),\n  72: (1, 9, 40),\n  73: (4, 22, 24),\n  74: (2, 10, 38),\n  75: (3, 19, 28),\n  76: (2, 11, 37),\n  77: (5, 9, 36),\n  78: (10, 17, 23),\n  79: (2, 18, 30),\n  80: (1, 7, 42),\n  81: (4, 20, 26),\n  82: (14, 17, 19),\n  83: (3, 17, 30),\n  84: (3, 18, 29),\n  85: (5, 7, 38),\n  86: (4, 18, 28),\n  87: (7, 17, 26),\n  88: (13, 18, 19),\n  89: (3, 15, 32),\n  90: (14, 16, 20),\n  91: (3, 16, 31),\n  92: (6, 14, 30),\n  93: (5, 6, 39),\n  94: (5, 22, 23),\n  95: (11, 17, 22),\n  96: (7, 15, 28),\n  97: (7, 16, 27),\n  98: (6, 12, 32),\n  99: (6, 13, 31),\n  100: (5, 20, 25),\n  101: (3, 6, 41),\n  102: (11, 15, 24),\n  103: (11, 16, 23),\n  104: (10, 13, 27),\n  105: (4, 8, 38),\n  106: (12, 15, 23),\n  107: (4, 16, 30),\n  108: (3, 5, 42),\n  109: (2, 20, 28),\n  110: (2, 21, 27),\n  111: (1, 17, 32),\n  112: (4, 6, 40),\n  113: (1, 18, 31),\n  114: (12, 13, 25),\n  115: (4, 14, 32),\n  116: (3, 4, 43),\n  117: (3, 11, 36),\n  118: (5, 10, 35),\n  119: (2, 19, 29),\n  120: (9, 15, 26),\n  121: (5, 18, 27),\n  122: (1, 15, 34),\n  123: (1, 16, 33),\n  124: (5, 8, 37),\n  125: (9, 13, 28),\n  126: (5, 16, 29),\n  127: (9, 14, 27),\n  128: (8, 10, 32),\n  129: (8, 11, 31),\n  130: (7, 18, 25),\n  131: (6, 15, 29),\n  132: (9, 11, 30),\n  133: (9, 12, 29),\n  134: (11, 18, 21),\n  135: (2, 8, 40),\n  136: (8, 9, 33),\n  137: (2, 9, 39),\n  138: (10, 15, 25),\n  139: (1, 5, 44),\n  140: (1, 6, 43),\n  141: (6, 21, 23),\n  142: (13, 17, 20),\n  143: (14, 15, 21),\n  144: (2, 6, 42),\n  145: (2, 7, 41),\n  146: (10, 14, 26),\n  147: (1, 3, 46),\n  148: (1, 4, 45),\n  149: (13, 15, 22),\n  150: (4, 17, 29),\n  151: (6, 20, 24),\n  152: (13, 16, 21),\n  153: (3, 13, 34),\n  154: (3, 14, 33),\n  155: (10, 12, 28),\n  156: (4, 15, 31),\n  157: (7, 13, 30),\n  158: (7, 14, 29),\n  159: (13, 14, 23),\n  160: (3, 12, 35),\n  161: (6, 11, 33),\n  162: (11, 14, 25),\n  163: (1, 24, 25),\n  164: (8, 20, 22),\n  165: (7, 12, 31),\n  166: (10, 11, 29),\n  167: (6, 9, 35),\n  168: (5, 17, 28),\n  169: (11, 12, 27),\n  170: (1, 23, 26),\n  171: (8, 19, 23),\n  172: (7, 11, 32),\n  173: (15, 17, 18),\n  174: (4, 5, 41),\n  175: (5, 15, 30),\n  176: (9, 20, 21),\n  177: (8, 17, 25),\n  178: (2, 17, 31),\n  179: (8, 18, 24),\n  180: (1, 14, 35),\n  181: (12, 17, 21),\n  182: (2, 15, 33),\n  183: (2, 16, 32)}}\n        )\n        self.assertEqual(result.size, expected.size)\n        for comb in result['Combinations']:\n            self.assertEqual(comb[0]+comb[1]+comb[2], 50)\n    def test_edge_case_2(self):\n        # Test with a list of length less than 3\n        result = task_func([1, 2, 3], 3)\n        self.assertTrue(result.empty)\n    def test_edge_case_3(self):\n        # Test with negative numbers in the list\n        result = task_func([-1, -2, 1, 2, 3, 0], 0)\n        expected = pd.DataFrame(\n            {'Combinations': {0: (-1, -2, 3), 1: (-1, 1, 0), 2: (-2, 2, 0)}}       \n        )\n        self.assertEqual(result.size, expected.size)\n        for comb in result['Combinations']:\n            self.assertEqual(comb[0]+comb[1]+comb[2], 0)\n    def test_edge_case_4(self):\n        # Test with repeated numbers in the list\n        result = task_func([1, 1, 1, 1, 1, 3], 3)\n        expected = pd.DataFrame(\n            {'Combinations': {0: (1, 1, 1)}}\n        )\n        self.assertEqual(result.size, expected.size)\n        for comb in result['Combinations']:\n            self.assertEqual(comb[0]+comb[1]+comb[2], 3)\n    def test_edge_case_5(self):\n        # Test with both positive and negative numbers with no valid combinations\n        result = task_func([-5, -4, -3, 5, 6, 7, 0], 0)\n        expected = pd.DataFrame(\n            {'Combinations': {0: (-4, -3, 7), 1: (-5, 5, 0)}}\n        )\n        self.assertEqual(result.size, expected.size)\n        for comb in result['Combinations']:\n            self.assertEqual(comb[0]+comb[1]+comb[2], 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a date string from one time zone to another and return the time difference in seconds to the current time in the destination time zone.\nThe function should output with:\n    int: The time difference in seconds.\nYou should write self-contained code starting with:\n```\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, from_tz, to_tz):\n```",
        "gt": "import pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, from_tz, to_tz):\n    # Get timezone objects for the source and destination timezones\n    from_tz_obj = pytz.timezone(from_tz)\n    to_tz_obj = pytz.timezone(to_tz)\n\n    # Parse the given date string and localize it to the source timezone\n    given_date_naive = parse(date_str)\n    given_date = from_tz_obj.localize(given_date_naive)\n\n    # Convert the given date to the destination timezone\n    given_date_in_to_tz = given_date.astimezone(to_tz_obj)\n\n    # Get the current time in the destination timezone\n    current_date_in_to_tz = datetime.now(pytz.utc).astimezone(to_tz_obj)\n\n    # Calculate the time difference in seconds\n    time_difference = current_date_in_to_tz - given_date_in_to_tz\n\n    return int(time_difference.total_seconds())",
        "test": "import unittest\nfrom datetime import datetime, timedelta\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test conversion from UTC to America/Chicago with a date in the past\n        result = task_func('2022-01-01 11:59:59', 'UTC', 'America/Chicago')\n        self.assertIsInstance(result, int)\n        self.assertGreater(result, 0)\n    def test_case_2(self):\n        # Test conversion from America/New_York to Asia/Kolkata with a date in the past\n        result = task_func('2022-01-01 11:59:59', 'America/New_York', 'Asia/Kolkata')\n        self.assertIsInstance(result, int)\n        self.assertGreater(result, 0)\n    def test_known_time_zone_offset_difference(self):\n        \"\"\"Test the function with time zones having a known, static offset.\"\"\"\n        known_date_utc = '2023-01-01 12:00:00'\n        utc_zone = 'UTC'\n        target_zone = 'Etc/GMT+2'\n        try:\n            result = task_func(known_date_utc, utc_zone, target_zone)\n            self.assertTrue(isinstance(result, int), \"Result should be an integer representing seconds.\")\n        except Exception as e:\n            self.fail(f\"task_func raised an exception with known static offset time zones: {e}\")\n    def test_case_4(self):\n        # Test conversion with a future date from UTC to America/Chicago\n        future_date = (datetime.utcnow() + timedelta(days=10)).strftime('%Y-%m-%d %H:%M:%S')\n        result = task_func(future_date, 'UTC', 'America/Chicago')\n        self.assertIsInstance(result, int)\n        self.assertLess(result, 0)\n    def test_case_5(self):\n        # Test conversion from Asia/Kolkata to America/Los_Angeles with a date in the past\n        result = task_func('2022-01-01 11:59:59', 'Asia/Kolkata', 'America/Los_Angeles')\n        self.assertIsInstance(result, int)\n        self.assertGreater(result, 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create n random files in a directory with json content with the key 'number' and a random integer value between 1 and 100, and then reset the cursor to the beginning of each file.\nThe function should output with:\n    directory (str): The directory in which the files were generated.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\nimport json\ndef task_func(directory, n):\n```",
        "gt": "import os\nimport random\nimport json\ndef task_func(directory, n):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n):\n        filename = str(i) + \".json\"\n        filepath = os.path.join(directory, filename)\n\n        with open(filepath, 'w') as file:\n            json.dump({'number': random.randint(1, 100)}, file)\n            file.seek(0)\n\n    return directory",
        "test": "import unittest\nimport shutil\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        shutil.rmtree('./source', ignore_errors=True)\n        shutil.rmtree('./src', ignore_errors=True)\n        shutil.rmtree('./s', ignore_errors=True)\n    def test_case_1(self):\n        random.seed(0)\n        directory = task_func('./source', 10)\n        self.assertTrue(os.path.exists(directory))\n        read_data = []\n        for file in sorted(os.listdir(directory)):\n            with open(os.path.join(directory, file), 'r') as f:\n                read_data.append(json.load(f))\n        self.assertEqual(read_data, [{'number': 50}, {'number': 98}, {'number': 54}, {'number': 6}, {'number': 34}, {'number': 66}, {'number': 63}, {'number': 52}, {'number': 39}, {'number': 62}])\n        shutil.rmtree(directory)\n    def test_case_2(self):\n        random.seed(1)\n        directory = task_func('./src', 1)\n        self.assertTrue(os.path.exists(directory))\n        read_data = []\n        for file in os.listdir(directory):\n            with open(os.path.join(directory, file), 'r') as f:\n                read_data.append(json.load(f))\n        self.assertEqual(read_data, [{'number': 18}])\n        shutil.rmtree(directory)\n    def test_case_3(self):\n        directory = task_func('./s', 100)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 100)\n        shutil.rmtree(directory)\n    def test_case_4(self):\n        directory = task_func('./s', 0)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 0)\n        shutil.rmtree(directory)\n    def test_case_5(self):\n        random.seed(2)\n        directory = task_func('./source', 1)\n        self.assertTrue(os.path.exists(directory))\n        read_data = []\n        for file in os.listdir(directory):\n            with open(os.path.join(directory, file), 'r') as f:\n                read_data.append(json.load(f))\n        self.assertEqual(read_data, [{'number': 8}])\n        shutil.rmtree(directory)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate statistical measurements (mean and standard deviation) of the values associated with each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\nThe function should raise the exception for: ValueError: If the input data is empty. TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\nThe function should output with:\n    tuple:\n    dict: A dictionary with keys and their corresponding mean and standard deviation.\n    list: A list of matplotlib Axes objects for each key's visualization.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n\n    return result, axes",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        data = [{\"cat\": 1, \"dog\": 3}, {\"cat\": 2, \"dog\": 5}, {\"cat\": 3, \"dog\": 7}]\n        stats, axes = task_func(data)\n        self.assertAlmostEqual(stats[\"cat\"][\"mean\"], 2.0)\n        self.assertAlmostEqual(stats[\"cat\"][\"std\"], 0.816496580927726)\n        self.assertAlmostEqual(stats[\"dog\"][\"mean\"], 5.0)\n        self.assertAlmostEqual(stats[\"dog\"][\"std\"], 1.632993161855452)\n        \n        self.assertEqual(axes[0].get_title(), \"Statistics of cat\")\n        self.assertEqual(axes[1].get_title(), \"Statistics of dog\")\n        for ax, key in zip(axes, stats):\n            heights = [rect.get_height() for rect in ax.patches]\n            self.assertListEqual(heights, list(stats[key].values()))\n    def test_case_2(self):\n        # Test other keys (animals)\n        data = [{\"bird\": 5, \"fish\": 10}, {\"bird\": 6, \"fish\": 8}, {\"bird\": 7, \"fish\": 9}]\n        stats, axes = task_func(data)\n        self.assertAlmostEqual(stats[\"bird\"][\"mean\"], 6.0)\n        self.assertAlmostEqual(stats[\"bird\"][\"std\"], 0.816496580927726)\n        self.assertAlmostEqual(stats[\"fish\"][\"mean\"], 9.0)\n        self.assertAlmostEqual(stats[\"fish\"][\"std\"], 0.816496580927726)\n        self.assertEqual(axes[0].get_title(), \"Statistics of bird\")\n        self.assertEqual(axes[1].get_title(), \"Statistics of fish\")\n        for ax, key in zip(axes, stats):\n            heights = [rect.get_height() for rect in ax.patches]\n            self.assertListEqual(heights, list(stats[key].values()))\n    def test_case_3(self):\n        # Test handling negatives\n        data = [{\"cat\": -1, \"dog\": -3}, {\"cat\": -2, \"dog\": -5}, {\"cat\": -3, \"dog\": -7}]\n        stats, axes = task_func(data)\n        self.assertAlmostEqual(stats[\"cat\"][\"mean\"], -2.0)\n        self.assertAlmostEqual(stats[\"cat\"][\"std\"], 0.816496580927726)\n        self.assertAlmostEqual(stats[\"dog\"][\"mean\"], -5.0)\n        self.assertAlmostEqual(stats[\"dog\"][\"std\"], 1.632993161855452)\n        \n        self.assertEqual(axes[0].get_title(), \"Statistics of cat\")\n        self.assertEqual(axes[1].get_title(), \"Statistics of dog\")\n        for ax, key in zip(axes, stats):\n            heights = [rect.get_height() for rect in ax.patches]\n            self.assertListEqual(heights, list(stats[key].values()))\n    def test_case_4(self):\n        # Test single input\n        data = [{\"cat\": 1}]\n        stats, axes = task_func(data)\n        self.assertEqual(stats, {\"cat\": {\"mean\": 1.0, \"std\": 0.0}})\n        self.assertEqual(axes[0].get_title(), \"Statistics of cat\")\n        for ax, key in zip(axes, stats):\n            heights = [rect.get_height() for rect in ax.patches]\n            self.assertListEqual(heights, list(stats[key].values()))\n    def test_case_5(self):\n        # Test handling zero\n        data = [{\"cat\": 0, \"dog\": 0}, {\"cat\": 0, \"dog\": 0}, {\"cat\": 0, \"dog\": 0}]\n        stats, axes = task_func(data)\n        self.assertEqual(\n            stats, {\"cat\": {\"mean\": 0.0, \"std\": 0.0}, \"dog\": {\"mean\": 0.0, \"std\": 0.0}}\n        )\n        self.assertEqual(axes[0].get_title(), \"Statistics of cat\")\n        self.assertEqual(axes[1].get_title(), \"Statistics of dog\")\n        for ax, key in zip(axes, stats):\n            heights = [rect.get_height() for rect in ax.patches]\n            self.assertListEqual(heights, list(stats[key].values()))\n    def test_case_6(self):\n        # Test correct handling of empty input\n        with self.assertRaises(ValueError):\n            task_func([])\n    def test_case_7(self):\n        # Test correct handling of incorrect input types\n        with self.assertRaises(TypeError):\n            task_func(\"not a list\")\n        with self.assertRaises(TypeError):\n            task_func([123])\n        with self.assertRaises(TypeError):\n            task_func([{\"cat\": \"not numeric\"}])\n    def test_case_8(self):\n        # Test with a mix of positive and negative integers\n        data = [\n            {\"apple\": -2, \"banana\": 4},\n            {\"apple\": -4, \"banana\": 6},\n            {\"apple\": -6, \"banana\": 8},\n        ]\n        stats, _ = task_func(data)\n        self.assertAlmostEqual(stats[\"apple\"][\"mean\"], -4.0)\n        self.assertAlmostEqual(stats[\"apple\"][\"std\"], 1.632993161855452)\n        self.assertAlmostEqual(stats[\"banana\"][\"mean\"], 6.0)\n        self.assertAlmostEqual(stats[\"banana\"][\"std\"], 1.632993161855452)\n    def test_case_9(self):\n        # Test with floating point numbers\n        data = [{\"x\": 0.5, \"y\": 1.5}, {\"x\": 2.5, \"y\": 3.5}, {\"x\": 4.5, \"y\": 5.5}]\n        stats, _ = task_func(data)\n        self.assertAlmostEqual(stats[\"x\"][\"mean\"], 2.5)\n        self.assertAlmostEqual(stats[\"x\"][\"std\"], 1.632993161855452)\n        self.assertAlmostEqual(stats[\"y\"][\"mean\"], 3.5)\n        self.assertAlmostEqual(stats[\"y\"][\"std\"], 1.632993161855452)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Parse a log file to extract log entries into a DataFrame. This function reads a log file line by line. The log file is assumed to follow this format for each entry: YYYY-MM-DD HH:MM:SS.ssssss - LEVEL - Message The function matches each line against a predefined regular expression to extract timestamp, log level, and message, ignoring lines where there is no match. It then aggregates the matched and extracted data into a pandas DataFrame with columns: 'Timestamp', 'Level', and 'Message'. If the logs are empty or there is no extracted data, this function returns an otherwise empty DataFrame containing the same expected columns.\nThe function should raise the exception for: FileNotFoundError: If the specified log file does not exist.\nThe function should output with:\n    pd.DataFrame: A DataFrame with columns 'Timestamp', 'Level', and 'Message'.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n```",
        "gt": "import os\nimport pandas as pd\nimport re\ndef task_func(file_path: str) -> pd.DataFrame:\n    LOG_REGEX = r\"(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}) - (\\w+) - (.+)$\"\n\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n\n    logs = []\n    with open(file_path, \"r\") as f:\n        for line in f:\n            match = re.match(LOG_REGEX, line)\n            if match:\n                timestamp, level, message = match.groups()\n                logs.append([timestamp, level, message])\n\n    df = pd.DataFrame(logs, columns=[\"Timestamp\", \"Level\", \"Message\"])\n\n    if df.empty:\n        df = pd.DataFrame(columns=[\"Timestamp\", \"Level\", \"Message\"])\n\n    return df",
        "test": "import unittest\nimport tempfile\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n    def tearDown(self):\n        self.temp_dir.cleanup()\n    def _create_temp_log_file(self, file_name: str, content: str):\n        \"\"\"Helper function to create a temporary log file.\"\"\"\n        path = os.path.join(self.temp_dir.name, file_name)\n        with open(path, \"w\") as f:\n            f.write(content)\n        return path\n    def test_case_1(self):\n        # Test log file with mixed levels\n        content = (\n            \"2023-01-01 12:00:00.000000 - INFO - Application started\\n\"\n            \"2023-01-01 12:01:00.000000 - ERROR - Failed to connect to database\\n\"\n        )\n        log_file_path = self._create_temp_log_file(\"log1.txt\", content)\n        df = task_func(log_file_path)\n        self.assertEqual(len(df), 2)\n        self.assertEqual(df.iloc[0][\"Level\"], \"INFO\")\n        self.assertEqual(df.iloc[1][\"Level\"], \"ERROR\")\n    def test_case_2(self):\n        # Test case for an empty log file\n        log_file_path = self._create_temp_log_file(\"log2.txt\", \"\")\n        df = task_func(log_file_path)\n        self.assertTrue(df.empty)\n    def test_case_3(self):\n        # Log file with lines that do not match the expected format\n        content = \"This is not a valid log entry\\n2023-01-02 13:00:00.000000 - WARNING - Low disk space\\n\"\n        log_file_path = self._create_temp_log_file(\"log3.txt\", content)\n        df = task_func(log_file_path)\n        self.assertEqual(len(df), 1)\n        self.assertEqual(df.iloc[0][\"Level\"], \"WARNING\")\n    def test_caes_4(self):\n        # Test case to ensure FileNotFoundError is raised when log file does not exist\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"/path/to/nonexistent/file.txt\")\n    def test_case_5(self):\n        # Log file with some entries having minor formatting issues\n        content = (\n            \"2023-01-03 14:00:00.000000 - DEBUG - Debugging info included\\n\"\n            \"2023-01-03 Not a valid entry\\n\"\n            \"WARNING - This log entry is missing its timestamp\\n\"\n            \"2023-01-04 15:00:00.000000 - INFO - System update completed\\n\"\n            \"Some random text not conforming to the log format\\n\"\n            \"2023-01-04 16:00:00.000000 - ERROR - Error in processing\\n\"\n        )\n        log_file_path = self._create_temp_log_file(\"log5.txt\", content)\n        df = task_func(log_file_path)\n        self.assertEqual(len(df), 3)\n        self.assertEqual(df.iloc[0][\"Level\"], \"DEBUG\")\n        self.assertEqual(df.iloc[1][\"Level\"], \"INFO\")\n        self.assertEqual(df.iloc[2][\"Level\"], \"ERROR\")\n    def test_case_6(self):\n        # Log file with multi-line entries\n        content = (\n            \"2023-02-01 10:00:00.000000 - INFO - Application start successful\\n\"\n            \"2023-02-01 10:05:00.000000 - ERROR - Exception occurred:\\n\"\n            \"Traceback (most recent call last):\\n\"\n            '  File \"<stdin>\", line 1, in <module>\\n'\n            \"ZeroDivisionError: division by zero\\n\"\n            \"2023-02-01 10:10:00.000000 - INFO - Recovery attempt initiated\\n\"\n        )\n        log_file_path = self._create_temp_log_file(\"log6.txt\", content)\n        df = task_func(log_file_path)\n        self.assertEqual(len(df), 3)\n        self.assertEqual(df.iloc[0][\"Level\"], \"INFO\")\n        self.assertEqual(df.iloc[1][\"Level\"], \"ERROR\")\n        self.assertEqual(df.iloc[2][\"Level\"], \"INFO\")\n        self.assertTrue(\"Exception occurred:\" in df.iloc[1][\"Message\"])\n        self.assertFalse(\n            \"Traceback\" in df.iloc[1][\"Message\"]\n            or \"ZeroDivisionError\" in df.iloc[1][\"Message\"]\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function takes a list of tuples containing elements and their respective counts and weights. It normalizes the counts using z-score normalization and the weights using min-max scaling. Finally, it returns a pandas DataFrame with the items, normalized counts, and normalized weights.\nThe function should output with:\n    DataFrame: A pandas DataFrame with three columns: 'Item', 'Normalized Count', and 'Normalized Weight'.\n    Each row corresponds to an entry from the input data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data):\n    # Extracting items, counts, and weights from the input data\n    items, counts, weights = zip(*data)\n    \n    # Normalizing the counts and weights\n    counts_normalized = zscore(counts)\n    scaler = MinMaxScaler()\n    weights_normalized = scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten()\n\n    # Creating a DataFrame with the normalized data\n    report_df = pd.DataFrame({\n        'Item': items,\n        'Normalized Count': counts_normalized,\n        'Normalized Weight': weights_normalized\n    })\n\n    return report_df",
        "test": "import unittest\nimport sys\nsys.path.append('/mnt/data/testing')\nimport pandas as pd\nimport numpy as np\nfrom faker import Faker\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # This method will be used to set up any variables or conditions that are common across all test cases.\n        self.tolerance = 1e-3  # Tolerance level for comparing floating point numbers\n    def test_case_1(self):\n        # Testing with basic input.\n        data = [('A', 100, 0.5), ('B', 200, 0.6), ('C', 150, 0.7)]\n        result = task_func(data)\n        expected_items = ['A', 'B', 'C']\n        # Check if all items are present and in the correct order\n        self.assertEqual(list(result['Item']), expected_items)\n        # Check if normalization is within the expected range (0-1 for min-max, mean=0 for z-score)\n        self.assertTrue(result['Normalized Weight'].min() >= 0)\n        self.assertTrue(result['Normalized Weight'].max() <= 1)\n        self.assertTrue(abs(result['Normalized Count'].mean()) <= self.tolerance)\n    def test_case_2(self):\n        # Testing with negative counts and weights.\n        data = [('A', -100, -0.5), ('B', -200, -0.1), ('C', -150, -0.2)]\n        result = task_func(data)\n        \n        # Even with negative inputs, normalization should stay within the expected range\n        self.assertTrue(result['Normalized Weight'].min() >= 0)\n        self.assertTrue(result['Normalized Weight'].max() <= 1)\n        self.assertTrue(abs(result['Normalized Count'].mean()) <= self.tolerance)\n    def test_case_3(self):\n        # Testing with identical counts and weights.\n        data = [('A', 100, 0.5), ('B', 100, 0.5), ('C', 100, 0.5)]\n        result = task_func(data)\n        \n        # If all counts and weights are identical, normalization should result in equality and nan for z score\n        self.assertTrue(all(result['Normalized Weight'] == 0.0))\n        self.assertTrue(all(result['Normalized Count'].isna()))\n    def test_case_4(self):\n        # Testing with large numbers.\n        data = [('A', 1000000, 0.5), ('B', 2000000, 0.6), ('C', 1500000, 0.7)]\n        result = task_func(data)\n        # Even with large numbers, the properties of normalized data should hold\n        self.assertTrue(result['Normalized Weight'].min() >= 0)\n        self.assertTrue(result['Normalized Weight'].max() <= 1)\n        self.assertTrue(abs(result['Normalized Count'].mean()) <= self.tolerance)\n    def test_case_5(self):\n        # Testing with a single data point.\n        data = [('A', 100, 0.5)]\n        result = task_func(data)\n        # With a single data point, the normalized values should default to certain values\n        self.assertEqual(result['Normalized Weight'][0], 0.0)\n        self.assertTrue(result['Normalized Count'].isna()[0])\n    def test_return_value(self):\n        # test actual return values\n        data = [('A', 10, 0.5), ('B', -1234, 12.6), ('C', 999,3, 0.7)]\n        result = task_func(data)\n        expected = pd.DataFrame({\n            'Item': {0: 'A', 1: 'B', 2: 'C'},\n            'Normalized Count': {0: 0.09303876818248032,\n            1: -1.2686109685117022,\n            2: 1.175572200329222},\n            'Normalized Weight': {0: 0.0, 1: 1.0, 2: 0.2066115702479339}\n        })\n        pd.testing.assert_frame_equal(result, expected, check_dtype=False)\n    def test_large_data_amount(self):\n        fake = Faker()\n        num = 1000\n        name = [fake.first_name() for _ in range(num)]\n        count = [fake.random_int() for _ in range(num)]\n        weight = [fake.random_number(digits=2)/80 for _ in range(num)]\n        data = list(zip(name, count, weight))\n        result = task_func(data)\n        items, counts, weights = zip(*data)\n        \n        # Normalizing the counts and weights\n        counts_normalized = zscore(counts)\n        scaler = MinMaxScaler()\n        weights_normalized = scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten()\n        # Creating a DataFrame with the normalized data\n        expected = pd.DataFrame({\n            'Item': items,\n            'Normalized Count': counts_normalized,\n            'Normalized Weight': weights_normalized\n        })\n        pd.testing.assert_frame_equal(result, expected, check_dtype=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the total number of brackets (i.e., '(', ')', '{', '}', '[', ']') in a pandas DataFrame. >>> df = pd.DataFrame({'Test': ['(a)', 'b', '[[[[))c']}) >>> task_func(df) 8\nNote that: The function uses a specific pattern '[(){}[\\]]' to identify brackets.\nThe function should raise the exception for: TypeError: If input is not a DataFrame\nThe function should output with:\n    int: The total number of brackets.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n```",
        "gt": "import re\nimport pandas as pd\ndef task_func(df: pd.DataFrame) -> int:\n\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"df should be a DataFrame.\")\n\n    # Constants\n    BRACKETS_PATTERN = '[(){}[\\]]'\n\n    return df.applymap(\n        lambda x: len(re.findall(BRACKETS_PATTERN, str(x)))\n        ).sum().sum()",
        "test": "import unittest\nimport pandas as pd\nfrom faker import Faker\nfake = Faker()\nclass TestCases(unittest.TestCase):\n    def test_wrong_input(self):\n        # test with non dataframe input\n        self.assertRaises(Exception, task_func, 1)\n        self.assertRaises(Exception, task_func, ['a'])\n        self.assertRaises(Exception, task_func, {'a': 1})\n        self.assertRaises(Exception, task_func, 'asdf')\n    def test_case_1(self):\n        # Test with DataFrame containing no brackets\n        df = pd.DataFrame({\n            'A': [fake.word() for _ in range(5)],\n            'B': [fake.word() for _ in range(5)]\n        })\n        result = task_func(df)\n        self.assertEqual(result, 0)\n    def test_case_2(self):\n        # Test with DataFrame containing a few brackets\n        df = pd.DataFrame({\n            'A': ['(a)', 'b', 'c', '{d}', 'e'],\n            'B': ['f', '[g]', 'h', 'i', 'j']\n        })\n        result = task_func(df)\n        self.assertEqual(result, 6)\n    def test_case_3(self):\n        # Test with DataFrame where every entry contains a bracket\n        df = pd.DataFrame({\n            'A': ['(a)', '{b}', '[c]', '(d)', '[e]'],\n            'B': ['{f}', '(g)', '[h]', '{i}', '(j)']\n        })\n        result = task_func(df)\n        self.assertEqual(result, 20)\n    def test_case_4(self):\n        # Test with DataFrame containing mixed characters and brackets\n        df = pd.DataFrame({\n            'A': ['(a1)', '{b2}', 'c3', 'd4', '[e5]'],\n            'B': ['f6', 'g7', '[h8]', 'i9', 'j0']\n        })\n        result = task_func(df)\n        self.assertEqual(result, 8)\n    def test_case_5(self):\n        # Test with DataFrame containing numbers, letters, and brackets\n        df = pd.DataFrame({\n            'A': ['(123]', '{{456}', '789', '0ab', '[cde]'],\n            'B': ['fgh', 'ijk', '[)lmn]', 'opq', 'rst']\n        })\n        result = task_func(df)\n        self.assertEqual(result, 10)\n    def test_empty(self):\n        # test with empty df\n        df = pd.DataFrame()\n        result = task_func(df)\n        self.assertEqual(result, 0)\n    def test_only(self):\n        # test df with only parenthesis as entries\n        df = pd.DataFrame({\n            'test': ['[[()]', '{}{{{{{{))))}}', '[]'],\n            'asdf': ['{]', '()))', '))}}]]']\n        })\n        result = task_func(df)\n        self.assertEqual(result, 33)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a CSV file containing simulated data for 100 people, including name, age, height, and weight. It also calculates and appends the average age, height, and weight at the end of the file.\nThe function should output with:\n    str: The path of the created CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n```",
        "gt": "import os\nimport csv\nimport random\nfrom statistics import mean\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\ndef task_func(filename):\n\n    filepath = os.path.join(os.getcwd(), filename)\n    with open(filepath, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n\n        data = [\n            ['Person_' + str(i), random.randint(20, 50), random.randint(150, 200), random.randint(50, 100)] \n            for i in range(1, PEOPLE_COUNT+1)\n        ]\n        writer.writerows(data)\n\n        averages = ['Average', mean([row[1] for row in data]), \n                    mean([row[2] for row in data]), mean([row[3] for row in data])]\n        writer.writerow(averages)\n\n    return filepath",
        "test": "import unittest\nimport os\nimport csv\nfrom statistics import mean\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        \"\"\"Remove the generated CSV file after each test.\"\"\"\n        os.remove(self.filename)\n    def test_file_creation(self):\n        \"\"\"Test if the file is created successfully.\"\"\"\n        random.seed(0)\n        self.filename = 'test_file_creation.csv'\n        path = task_func(self.filename)\n        self.assertTrue(os.path.exists(path))\n    def test_file_content_rows(self):\n        \"\"\"Test if the file contains the correct number of rows.\"\"\"\n        random.seed(0)\n        self.filename = 'test_file_content_rows.csv'\n        path = task_func(self.filename)\n        with open(path, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            self.assertEqual(len(rows), 102)  # 100 people + 1 header + 1 averages\n    def test_averages_calculation(self):\n        \"\"\"Test if the averages are calculated correctly.\"\"\"\n        random.seed(0)\n        self.filename = 'test_averages_calculation.csv'\n        path = task_func(self.filename)\n        with open(path, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            ages, heights, weights = zip(*[(float(row[1]), float(row[2]), float(row[3])) for row in rows[1:-1]])\n            expected_averages = [mean(ages), mean(heights), mean(weights)]\n            actual_averages = [float(rows[-1][1]), float(rows[-1][2]), float(rows[-1][3])]\n            self.assertEqual(actual_averages, expected_averages)\n    def test_header(self):\n        \"\"\"Test if the file contains the correct header.\"\"\"\n        random.seed(0)\n        self.filename = 'test_header.csv'\n        path = task_func(self.filename)\n        with open(path, 'r') as file:\n            reader = csv.reader(file)\n            header = next(reader)\n            self.assertEqual(header, ['Name', 'Age', 'Height', 'Weight'])\n    def test_average_row_label(self):\n        \"\"\"Test if the average row is labeled correctly.\"\"\"\n        random.seed(0)\n        self.filename = 'test_average_row_label.csv'\n        path = task_func(self.filename)\n        with open(path, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            self.assertEqual(rows[-1][0], 'Average')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract data from a text and create a Pandas DataFrame. The text contains several lines, each formatted as 'Name: John Doe, Email: john.doe@example.com, Age: 30, Country: USA'. Plot the age distribution using seaborn. The data is extracted using the regular expression pattern: \"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\" and the resulting DataFrame has columns: ['Name', 'Email', 'Age', 'Country']\nThe function should output with:\n    DataFrame: A pandas DataFrame with extracted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n```",
        "gt": "import pandas as pd\nimport regex as re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nCOLUMN_NAMES = [\"Name\", \"Email\", \"Age\", \"Country\"]\ndef task_func(text):\n    pattern = r\"Name: (.*?), Email: (.*?), Age: (.*?), Country: (.*?)($|\\n)\"\n    matches = re.findall(pattern, text)\n    data = []\n    for match in matches:\n        data.append(match[:-1])\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df[\"Age\"] = df[\"Age\"].astype(int)\n    sns.histplot(data=df, x=\"Age\")\n    plt.show()\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        input_text = \"Name: John Doe, Email: john.doe@example.com, Age: 30, Country: USA\\nName: Jane Doe, Email: jane.doe@example.com, Age: 25, Country: UK\"\n        df = task_func(input_text)\n        self.assertEqual(df.shape, (2, 4))\n        self.assertListEqual(list(df.columns), [\"Name\", \"Email\", \"Age\", \"Country\"])\n        self.assertListEqual(\n            df.iloc[0].tolist(), [\"John Doe\", \"john.doe@example.com\", 30, \"USA\"]\n        )\n        self.assertListEqual(\n            df.iloc[1].tolist(), [\"Jane Doe\", \"jane.doe@example.com\", 25, \"UK\"]\n        )\n    def test_case_2(self):\n        input_text = (\n            \"Name: Alex Smith, Email: alex.smith@example.com, Age: 35, Country: Canada\"\n        )\n        df = task_func(input_text)\n        self.assertEqual(df.shape, (1, 4))\n        self.assertListEqual(\n            df.iloc[0].tolist(), [\"Alex Smith\", \"alex.smith@example.com\", 35, \"Canada\"]\n        )\n    def test_case_3(self):\n        input_text = \"\"\n        df = task_func(input_text)\n        self.assertTrue(df.empty)\n    def test_case_4(self):\n        input_text = (\n            \"Name: Alex Smith, Email: alex.smith@example.com, Age: 35, Country: Canada\"\n        )\n        df = task_func(input_text)\n        self.assertEqual(df.shape, (1, 4))\n        self.assertListEqual(\n            df.iloc[0].tolist(), [\"Alex Smith\", \"alex.smith@example.com\", 35, \"Canada\"]\n        )\n    def test_case_5(self):\n        input_text = \"\"\"Name: Alex Smith, Email: alex.smith@example.com, Age: 35, Country: Canada\n        Name: Bob Miller, Email: bob.miller@example.com, Age: 25, Country: USA\n        Name: Anna Karin, Email: anna.karin@example.com, Age: 47, Country: Finland\n        \"\"\"\n        df = task_func(input_text)\n        self.assertEqual(df.shape, (3, 4))\n        self.assertListEqual(list(df.columns), [\"Name\", \"Email\", \"Age\", \"Country\"])\n        self.assertListEqual(\n            df.iloc[0].tolist(), [\"Alex Smith\", \"alex.smith@example.com\", 35, \"Canada\"]\n        )\n        self.assertListEqual(\n            df.iloc[1].tolist(), [\"Bob Miller\", \"bob.miller@example.com\", 25, \"USA\"]\n        )\n        self.assertListEqual(\n            df.iloc[2].tolist(), [\"Anna Karin\", \"anna.karin@example.com\", 47, \"Finland\"]\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Writes a list of OrderedDicts to an Excel file. Each OrderedDict in the list represents a row in the Excel sheet, and each key in the OrderedDict corresponds to a column defined in the FIELDS constant comprising column names 'ID', 'Name', and 'Age'. Create an Excel file with no data. >>> empty_data = [] >>> path = task_func(empty_data, 'empty_data.xls') >>> os.path.exists(path) and 'empty_data.xls' in path True\nThe function should output with:\n    str: The absolute path of the created Excel file.\nYou should write self-contained code starting with:\n```\nimport xlwt\nimport os\n# Constants\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n```",
        "gt": "import xlwt\nimport os\n# Constants\nFIELDS = ['ID', 'Name', 'Age']\ndef task_func(values, filename):\n    book = xlwt.Workbook()\n    sheet1 = book.add_sheet(\"persons\")\n\n    # Write header\n    for col_index, col in enumerate(FIELDS):\n        sheet1.write(0, col_index, col)\n\n    # Write data rows\n    for row_index, row_values in enumerate(values, 1):\n        for col_index, col in enumerate(FIELDS):\n            value = row_values.get(col, \"\")\n            sheet1.write(row_index, col_index, value)\n\n    book.save(filename)\n\n    return os.path.abspath(filename)",
        "test": "import unittest\nimport os\nimport tempfile\nfrom collections import OrderedDict\n# Assume task_func is imported or defined elsewhere\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to store test files\n        self.test_dir = tempfile.TemporaryDirectory()\n    def tearDown(self):\n        # Cleanup the temporary directory after tests\n        self.test_dir.cleanup()\n    def test_ordered_dict_to_excel(self):\n        values = [OrderedDict([('ID', 1), ('Name', 'John Doe'), ('Age', 30)]),\n                  OrderedDict([('ID', 2), ('Name', 'Jane Doe'), ('Age', 28)])]\n        filename = os.path.join(self.test_dir.name, 'test_data.xls')\n        result_path = task_func(values, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_empty_data_to_excel(self):\n        values = []\n        filename = os.path.join(self.test_dir.name, 'empty_data.xls')\n        result_path = task_func(values, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_incomplete_data_to_excel(self):\n        values = [OrderedDict([('ID', 1), ('Name', 'John Doe')])]\n        filename = os.path.join(self.test_dir.name, 'incomplete_data.xls')\n        result_path = task_func(values, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_mismatched_fields(self):\n        values = [OrderedDict([('ID', 1), ('Name', 'John Doe'), ('Gender', 'Male')])]\n        filename = os.path.join(self.test_dir.name, 'mismatched_fields.xls')\n        result_path = task_func(values, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_multiple_rows(self):\n        values = [OrderedDict([('ID', i), ('Name', f'Name {i}'), ('Age', 20+i)]) for i in range(5)]\n        filename = os.path.join(self.test_dir.name, 'multiple_rows.xls')\n        result_path = task_func(values, filename)\n        self.assertTrue(os.path.isfile(result_path))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random string of a given length, with each character being either a parenthesis (from the set \"(){}[]\") or a lowercase English character. For function uses a optional random_seed when sampling characters. >>> string = task_func(34, random_seed=42) >>> print(string) hbrpoigf)cbfnobm(o{rak)vrjnvgfygww >>> string = task_func(23, random_seed=1) >>> print(string) ieqh]{[yng]by)a{rogubbb\nNote that: The function uses the internal string constant BRACKETS for definition of the bracket set.\nThe function should output with:\n    str: The generated string.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\ndef task_func(length, random_seed=None):\n```",
        "gt": "import string\nimport random\ndef task_func(length, random_seed=None):\n    random.seed(random_seed)\n    # Constants\n    BRACKETS = \"(){}[]\"\n    return ''.join(random.choice(string.ascii_lowercase + BRACKETS) for _ in range(length))",
        "test": "import unittest\nimport string\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.BRACKETS = \"(){}[]\"\n        return \n    def test_rng(self):\n        # rng reproducability\n        res1 = task_func(100, random_seed=42)\n        res2 = task_func(100, random_seed=42)\n        self.assertEqual(res1, res2)\n    def test_case_1(self):\n        # Testing with length = 5\n        result = task_func(5, random_seed=1)\n        self.assertEqual(len(result), 5)\n        for char in result:\n            self.assertIn(char, string.ascii_lowercase + self.BRACKETS)\n    def test_case_2(self):\n        # Testing with length = 0 (edge case)\n        result = task_func(0, random_seed=2)\n        self.assertEqual(len(result), 0)\n    def test_case_3(self):\n        # Testing with length = 10\n        result = task_func(10, random_seed=3)\n        self.assertEqual(len(result), 10)\n        for char in result:\n            self.assertIn(char, string.ascii_lowercase + self.BRACKETS)\n    def test_case_4(self):\n        # Testing with length = 1 (edge case)\n        result = task_func(1, random_seed=34)\n        self.assertEqual(len(result), 1)\n        self.assertIn(result, string.ascii_lowercase + self.BRACKETS)\n    def test_case_5(self):\n        # Testing with length = 50\n        result = task_func(50, random_seed=777)\n        self.assertEqual(len(result), 50)\n        for char in result:\n            self.assertIn(char, string.ascii_lowercase + self.BRACKETS)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots a histogram of normalized data from an input 2D numpy array alongside the probability density function (PDF) of a standard normal distribution.\nNote that: Takes in a 2D numpy array as input. Calculates the sum of elements in each row of the array. Normalizes these row sums to have a mean of 0 and a standard deviation of 1. Normalization is achieved by first calculating the mean and standard deviation of the row sums. Each row sum is then transformed by subtracting the mean and dividing by the standard deviation. If the standard deviation is 0 (indicating all row sums are equal), normalization results in an array of zeros with the same shape. Plots a histogram of the normalized data. Uses 30 bins for the histogram. The histogram is density-based, meaning it represents the probability density rather than raw frequencies. The bars of the histogram are semi-transparent (60% opacity) and green in color. Overlays the PDF of a standard normal distribution on the histogram for comparison. The PDF curve is plotted in red with a line width of 2. The range of the PDF curve is set to cover 99% of a standard normal distribution. Sets the title of the plot to \"Histogram of Normalized Data with Standard Normal PDF\".\nThe function should output with:\n    A tuple containing:\n    A matplotlib Axes object with the histogram of the normalized data and the overlaid standard normal PDF.\n    The normalized data as a 1D numpy array.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(arr: np.ndarray) -> (plt.Axes, np.ndarray):\n    # Calculating row sums\n    row_sums = arr.sum(axis=1)\n\n    # Normalizing the data\n    mean = np.mean(row_sums)\n    std_dev = np.std(row_sums)\n    normalized_data = (\n        (row_sums - mean) / std_dev if std_dev != 0 else np.zeros_like(row_sums)\n    )\n\n    # Plotting the histogram\n    _, ax = plt.subplots()\n    ax.hist(normalized_data, bins=30, density=True, alpha=0.6, color=\"g\")\n\n    # Plotting the PDF of a standard normal distribution\n    x = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)\n    ax.plot(x, norm.pdf(x), \"r-\", lw=2)\n    ax.set_title(\"Histogram of Normalized Data with Standard Normal PDF\")\n\n    return ax, normalized_data",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for `task_func`.\"\"\"\n    def test_histogram_and_pdf(self):\n        \"\"\"Test that the histogram and PDF are plotted.\"\"\"\n        arr = np.array([[i + j for i in range(3)] for j in range(5)])\n        ax, _ = task_func(arr)\n        self.assertEqual(\n            ax.get_title(),\n            \"Histogram of Normalized Data with Standard Normal PDF\",\n        )\n        self.assertEqual(len(ax.lines), 1)\n        self.assertEqual(len(ax.patches), 30)\n    def test_normalized_data(self):\n        \"\"\"Test that the normalized data is correct.\"\"\"\n        arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        _, normalized_data = task_func(arr)\n        expected_data = [-1.22474487, 0.0, 1.22474487]\n        for i in range(len(expected_data)):\n            self.assertTrue(np.isclose(normalized_data[i], expected_data[i]))\n    def test_empty_array(self):\n        \"\"\"Test empty array.\"\"\"\n        arr = np.array([[], [], []])\n        _, normalized_data = task_func(arr)\n        for value in normalized_data:\n            self.assertTrue(np.isclose(value, 0))\n    def test_single_value_array(self):\n        \"\"\"Test single value array.\"\"\"\n        arr = np.array([[5], [5], [5]])\n        _, normalized_data = task_func(arr)\n        for value in normalized_data:\n            self.assertTrue(np.isclose(value, 0))\n    def test_large_values(self):\n        \"\"\"Test large values.\"\"\"\n        arr = np.array([[1e6, 2e6, 3e6], [4e6, 5e6, 6e6], [7e6, 8e6, 9e6]])\n        _, normalized_data = task_func(arr)\n        expected_data = [-1.22474487, 0.0, 1.22474487]\n        for i in range(len(expected_data)):\n            self.assertTrue(np.isclose(normalized_data[i], expected_data[i]))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "You are given a list of elements. Each element is a list with the same length as COLUMNS, representing one row a dataframe df to create. Visualize the distribution of different values in a column \"col3\" of a pandas DataFrame df, grouped by \"col1\" and \"col2,\" using a heatmap.\nThe function should output with:\n    tuple:\n    pandas.DataFrame: The DataFrame of the analyzed data.\n    plt.Axes: The heatmap visualization.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    analyzed_df = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].nunique().reset_index()\n    analyzed_df = analyzed_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n    ax = sns.heatmap(analyzed_df, annot=True)\n    plt.show()\n    return analyzed_df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        data = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]\n        df = pd.DataFrame(data, columns=COLUMNS)\n        analyzed_df, ax = task_func(df)\n        expected_data = [[1, 1, 2], [1, 2, 1], [2, 1, 3], [2, 2, 1]]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        expected_df = expected_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n        # Assertions\n        self.assertTrue(isinstance(analyzed_df, pd.DataFrame))\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_2(self):\n        data = [\n            [1, 1, 2],\n            [1, 1, 3],\n            [1, 2, 4],\n            [1, 1, 5],\n            [1, 3, 7]\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [1, 1, 3],\n            [1, 2, 1],\n            [1, 3, 1]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        expected_df = expected_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n        # Assertions\n        self.assertTrue(isinstance(analyzed_df, pd.DataFrame))\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_3(self):\n        data = [\n            [1, 1, 1],\n            [1, 2, 3],\n            [2, 1, 4],\n            [2, 2, 5]\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [1, 1, 1],\n            [1, 2, 1],\n            [2, 1, 1],\n            [2, 2, 1]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        expected_df = expected_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n        # Assertions\n        self.assertTrue(isinstance(analyzed_df, pd.DataFrame))\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_4(self):\n        data = [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [1, 1, 1],\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        expected_df = expected_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n        # Assertions\n        self.assertTrue(isinstance(analyzed_df, pd.DataFrame))\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_5(self):\n        data = [\n            [0, 0, 0],\n            [0, 1, 0],\n            [1, 0, 0],\n            [1, 1, 0],\n            [0, 0, 1],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1],\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [0, 0, 2],\n            [0, 1, 2],\n            [1, 0, 2],\n            [1, 1, 2]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        expected_df = expected_df.pivot(index=COLUMNS[0], columns=COLUMNS[1], values=COLUMNS[2])\n        # Assertions\n        self.assertTrue(isinstance(analyzed_df, pd.DataFrame))\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertTrue(isinstance(ax, plt.Axes))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a list of random strings, each of a specified length, and counts the frequency of each character across all strings. The function then returns the characters and their frequencies sorted by frequency in descending order. The random strings are composed of ASCII lowercase characters.\nThe function should output with:\n    list of tuple: A list of tuples where each tuple contains a character and its count,\n    sorted by count in descending order.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n```",
        "gt": "import random\nimport string\nfrom collections import Counter\ndef task_func(num_strings, string_length):\n    strings = [''.join(random.choices(string.ascii_lowercase, k=string_length)) for _ in range(num_strings)]\n    characters = ''.join(strings)\n    character_counter = Counter(characters)\n    most_common_characters = character_counter.most_common()\n\n    return most_common_characters",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # This method will be run before each test.\n        random.seed(0)  # Set a seed for reproducibility in all tests\n    def test_return_type(self):\n        \"\"\" Test that the function returns a list. \"\"\"\n        result = task_func(100, 5)\n        self.assertIsInstance(result, list)\n    def test_list_length(self):\n        \"\"\" Test that the length of the list is not greater than the number of unique characters. \"\"\"\n        result = task_func(100, 5)\n        self.assertLessEqual(len(result), 26)  # 26 letters in the ASCII lowercase alphabet\n    def test_tuple_structure(self):\n        \"\"\" Test that each element in the list is a tuple with two elements. \"\"\"\n        result = task_func(100, 5)\n        for item in result:\n            self.assertIsInstance(item, tuple)\n            self.assertEqual(len(item), 2)\n    def test_deterministic_output(self):\n        \"\"\" Test the function with a predefined seed for reproducibility. \"\"\"\n        result = task_func(100, 5)\n        self.assertTrue(all(isinstance(pair, tuple) and len(pair) == 2 for pair in result))\n        self.assertGreater(len(result), 0)  # Ensure the result is not empty\n    def test_specific_character_count(self):\n        \"\"\" Test if a specific character count is as expected based on the seed. \"\"\"\n        result = task_func(100, 5)\n        specific_char = 'a'  # Example character to check\n        specific_count = next((count for char, count in result if char == specific_char), 0)\n        self.assertGreater(specific_count, 0)  # Check if the count for the specific character is greater than 0\n    def test_zero_strings(self):\n        \"\"\" Test the function returns an empty list when no strings are generated. \"\"\"\n        result = task_func(0, 5)\n        self.assertEqual(result, [])\n    def test_zero_length(self):\n        \"\"\" Test the function with string_length of zero returns empty strings but counts them. \"\"\"\n        result = task_func(100, 0)\n        self.assertEqual(result, [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reverse the order of words separated by. \"\" in all strings of a numpy array.\nThe function should output with:\n    numpy.ndarray: The numpy array with the strings reversed.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport datetime\ndef task_func(arr):\n```",
        "gt": "import numpy as np\nimport datetime\ndef task_func(arr):\n    vectorized_reverse = np.vectorize(lambda s: '.'.join(s.split('.')[::-1]))\n    \n    now = datetime.datetime.now()\n    \n    return vectorized_reverse(arr)",
        "test": "import numpy as np\nimport unittest\nimport re\nclass TestCases(unittest.TestCase):\n    \"\"\"\n    Define test cases for the task_func function.\n    \"\"\"\n    \n    def test_case_1(self):\n        # Test description: \n        # Test reversing of words separated by '.' for a typical input.\n        arr = np.array(['apple.orange', 'red.green.yellow'])\n        result = task_func(arr)\n        expected = np.array(['orange.apple', 'yellow.green.red'])\n        np.testing.assert_array_equal(result, expected)\n    def test_case_2(self):\n        # Test description: \n        # Test reversing of words separated by '.' for another typical input.\n        arr = np.array(['hello.world', 'this.is.a.test'])\n        result = task_func(arr)\n        expected = np.array(['world.hello', 'test.a.is.this'])\n        np.testing.assert_array_equal(result, expected)\n    def test_case_3(self):\n        # Test description: \n        # Test input where words are not separated by '.', so they should remain unchanged.\n        arr = np.array(['hello', 'world'])\n        result = task_func(arr)\n        expected = np.array(['hello', 'world'])\n        np.testing.assert_array_equal(result, expected)\n    def test_case_4(self):\n        # Test description: \n        # Test input with empty strings. The result should also be empty strings.\n        arr = np.array(['', ''])\n        result = task_func(arr)\n        expected = np.array(['', ''])\n        np.testing.assert_array_equal(result, expected)\n    def test_case_5(self):\n        # Test description: \n        # Test reversing of words with a mix of uppercase and lowercase letters.\n        arr = np.array(['OpenAI.GPT', 'GPT-4.is.amazing'])\n        result = task_func(arr)\n        expected = np.array(['GPT.OpenAI', 'amazing.is.GPT-4'])\n        np.testing.assert_array_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert JSON strings to an Excel file, including handling empty JSON arrays. This function takes a JSON string and converts it into an Excel file with the specified filename. If the JSON string represents an empty array, the function creates an Excel file with no data rows.\nThe function should raise the exception for: ValueError: If `json_str` is not valid JSON. TypeError: If `json_str` is not a string, bytes, or bytearray. Exception: For other general errors related to file writing.\nThe function should output with:\n    str: The absolute path of the created Excel file.\nYou should write self-contained code starting with:\n```\nimport xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n```",
        "gt": "import xlwt\nimport os\nimport pandas as pd\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be a string, bytes, or bytearray\")\n    \n    try:\n        data = pd.read_json(json_str)\n        \n        # Initialize Excel workbook and sheet\n        book = xlwt.Workbook()\n        sheet = book.add_sheet(sheet_name)\n        \n        # Check if DataFrame is empty and proceed accordingly\n        if not data.empty:\n            for col_index, col in enumerate(data.columns):\n                sheet.write(0, col_index, col)\n            for row_index, row in data.iterrows():\n                for col_index, col in enumerate(data.columns):\n                    sheet.write(row_index + 1, col_index, row[col])\n        book.save(filename)\n        return os.path.abspath(filename)\n    except ValueError as e:\n        raise ValueError(f\"Invalid JSON string: {e}\")\n    except Exception as e:\n        raise Exception(f\"Error in file writing: {e}\")",
        "test": "import unittest\nimport pandas as pd\nimport os\nclass TestCases(unittest.TestCase):\n    def test_valid_json(self):\n        json_str = '[{\"Name\": \"John\", \"Age\": 30}, {\"Name\": \"Jane\", \"Age\": 28}]'\n        file_path = task_func(json_str, 'test_valid.xls')\n        self.assertTrue(os.path.exists(file_path))\n        os.remove(file_path)\n    def test_invalid_json(self):\n        with self.assertRaises(ValueError):\n            task_func('{\"Name\": \"John\", \"Age\": 30,}', 'test_invalid.xls')\n    def test_empty_json(self):\n        file_path = task_func('[]', 'test_empty.xls')\n        self.assertTrue(os.path.exists(file_path))\n        \n        # Verify the Excel file has no data rows\n        df = pd.read_excel(file_path)\n        self.assertTrue(df.empty)\n        os.remove(file_path)\n    def test_non_string_json(self):\n        with self.assertRaises(TypeError):\n            task_func(12345, 'test_non_string.xls')\n    def test_custom_sheet_name(self):\n        json_str = '[{\"Name\": \"John\", \"Age\": 30}]'\n        file_path = task_func(json_str, 'test_custom_sheet.xls', sheet_name=\"Data\")\n        self.assertTrue(os.path.exists(file_path))\n        os.remove(file_path)\n    \n    def test_file_content(self):\n        json_str = '[{\"Name\": \"Alice\", \"Age\": 30}, {\"Name\": \"Bob\", \"Age\": 25}]'\n        file_path = task_func(json_str, 'test_content.xls')\n        self.assertTrue(os.path.exists(file_path))\n        # Read the created Excel file and compare its contents\n        df = pd.read_excel(file_path)\n        expected_df = pd.read_json(json_str)\n        pd.testing.assert_frame_equal(df, expected_df)\n        os.remove(file_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plot a list of data with different colors. If there are more data series than the predefined colors, the function cycles through the colors. In case of even more series than colors + labels, 'black' is used.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom itertools import zip_longest\n# Constants\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n```",
        "gt": "import matplotlib.pyplot as plt\nfrom itertools import zip_longest\n# Constants\nCOLORS = ['red', 'green', 'blue', 'yellow', 'purple']\ndef task_func(data, labels):\n    fig, ax = plt.subplots()\n    for series, label, color in zip_longest(data, labels, COLORS, fillvalue='black'):\n        ax.plot(series, label=label, color=color)\n        \n    ax.legend()\n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        data = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]]\n        labels = ['Series 1', 'Series 2', 'Series 3']\n        ax = task_func(data, labels)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(lines[0].get_color(), 'red')\n        self.assertEqual(lines[1].get_color(), 'green')\n        self.assertEqual(lines[2].get_color(), 'blue')\n    def test_case_2(self):\n        data = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n        labels = ['A', 'B', 'C', 'D']\n        ax = task_func(data, labels)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(lines[3].get_color(), 'yellow')\n    def test_case_3(self):\n        data = [[1, 2], [3, 4]]\n        labels = ['X', 'Y']\n        ax = task_func(data, labels)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(lines[0].get_color(), 'red')\n        self.assertEqual(lines[1].get_color(), 'green')\n    def test_case_4(self):\n        data = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]]\n        labels = ['Series 1', 'Series 2', 'Series 3', 'Series 4', 'Series 5', 'Series 6']\n        ax = task_func(data, labels)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(lines[5].get_color(), 'black')\n        \n    def test_case_5(self):\n        data = [[1, 2, 3], [4, 5, 6]]\n        labels = []\n        ax = task_func(data, labels)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(lines[0].get_color(), 'red')\n        self.assertEqual(lines[1].get_color(), 'green')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts articles whose titles contain specific case-insensitive keywords (\"like\" or \"what\") from a DataFrame and analyzes the frequency of each word in the content of these articles, excluding punctuation.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or does not contain the necessary columns 'Title' and 'Content'.\nThe function should output with:\n    dict: A dictionary with keys as words and values as their corresponding frequency, excluding any punctuation marks.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n```",
        "gt": "import re\nimport nltk\nfrom string import punctuation\ndef task_func(df):\n    # Ensure the DataFrame contains the required columns\n    if \"Title\" not in df.columns or \"Content\" not in df.columns:\n        raise ValueError(\"DataFrame must include 'Title' and 'Content' columns.\")\n    pattern = re.compile(r'(like|what)', re.IGNORECASE)\n    interesting_articles = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n\n    word_freq = {}\n    if interesting_articles.empty:\n        return word_freq\n\n    for content in interesting_articles['Content']:\n        tokens = nltk.word_tokenize(content)\n        for token in tokens:\n            if token not in punctuation:\n                if token not in word_freq:\n                    word_freq[token] = 1\n                else:\n                    word_freq[token] += 1\n\n    return word_freq",
        "test": "import unittest\nimport pandas as pd\nimport nltk\nnltk.download('punkt')  # Ensure the NLTK tokenizer is available\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Prepare environment and variables for tests.\"\"\"\n        self.data = {\n            'Title': [\n                'What is Data Science?',\n                'The Future of Data Science',\n                'How to learn Python',\n                'Why is Python like that?',\n            ],\n            'Content': [\n                'Data Science is about data analysis. Like what you see?',\n                'Data Science has a bright future.',\n                'Learning Python is essential for data science.',\n                'Python is popular among developers. What do you think?',\n            ]\n        }\n        self.df = pd.DataFrame(self.data)\n    def test_word_frequencies(self):\n        \"\"\"Test if the function correctly computes word frequencies from articles containing 'like' or 'what'.\"\"\"\n        expected_freq = {\n            'Data': 1, 'Science': 1, 'is': 2, 'about': 1, 'data': 1, 'analysis': 1,\n            'Like': 1, 'what': 1, 'you': 2, 'see': 1, 'Python': 1, 'popular': 1,\n            'among': 1, 'developers': 1, 'What': 1, 'do': 1, 'think': 1\n        }\n        result = task_func(self.df)\n        self.assertEqual(result, expected_freq, \"The word frequencies do not match the expected output.\")\n    def test_no_matching_articles(self):\n        \"\"\"Test the function with a DataFrame that has no titles containing 'like' or 'what'.\"\"\"\n        data = {\n            'Title': [\n                'Understanding AI',\n                'Introduction to Machine Learning'\n            ],\n            'Content': [\n                'AI is a broad field.',\n                'Machine learning is a subset of AI.'\n            ]\n        }\n        df_no_matches = pd.DataFrame(data)\n        result = task_func(df_no_matches)\n        self.assertEqual(result, {}, \"Expected no word frequencies for DataFrame without matching titles.\")\n    def test_empty_dataframe(self):\n        \"\"\"Test the function with an empty DataFrame.\"\"\"\n        df_empty = pd.DataFrame(columns=['Title', 'Content'])\n        result = task_func(df_empty)\n        self.assertEqual(result, {}, \"Expected no word frequencies for an empty DataFrame.\")\n    def test_case_sensitive_handling(self):\n        \"\"\"Test the function's handling of case sensitivity in finding keywords.\"\"\"\n        data = {\n            'Title': [\n                'What is new in technology',\n                'Like new advancements'\n            ],\n            'Content': [\n                'Technological growth is exponential.',\n                'These advancements are like no other.'\n            ]\n        }\n        df_case = pd.DataFrame(data)\n        result = task_func(df_case)\n        expected_freq = {'Technological': 1, 'growth': 1, 'is': 1, 'exponential': 1,\n                         'These': 1, 'advancements': 1, 'are': 1, 'like': 1, 'no': 1, 'other': 1}\n        self.assertEqual(result, expected_freq, \"Case sensitivity handling is faulty.\")\n    def test_invalid_columns(self):\n        \"\"\"Test the function with a DataFrame lacking required columns.\"\"\"\n        df_invalid = pd.DataFrame({'Headline': ['What is happening'], 'Body': ['Something interesting']})\n        with self.assertRaises(ValueError):\n            task_func(df_invalid)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate sales data for five products from a given epoch time up to the current time. This function checks input validity, then for each day between the date of the given epoch time to the date of the current time, generates random sales data for each of the 5 products.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing sales data with columns 'Product' (string), 'Date' (datetime),\n    and 'Sales' (integer). Sales quantity is randomly sampled from range [10, 50].\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n```",
        "gt": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    random.seed(random_seed)\n\n    products = list(set(products))\n    if len(products) != 5:\n        raise ValueError(\"Products must contain 5 unique items\")\n\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    end_date = datetime.now()\n    if start_date >= end_date:\n        raise ValueError(\"Start time must be before current system time\")\n\n    date_range = pd.date_range(start_date, end_date, freq=\"D\")\n    sales_data = []\n    for date in date_range:\n        for product in products:\n            sales = random.randint(10, 50)\n            sales_data.append([product, date, sales])\n\n    df = pd.DataFrame(sales_data, columns=[\"Product\", \"Date\", \"Sales\"])\n    return df",
        "test": "import unittest\nfrom datetime import datetime, timedelta\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        sales_data = task_func(1631289600000, random_seed=42)\n        self.assertListEqual(list(sales_data.columns), [\"Product\", \"Date\", \"Sales\"])\n        self.assertEqual(\n            sales_data[\"Date\"].iloc[0], datetime.fromtimestamp(1631289600000 / 1000.0)\n        )\n        self.assertListEqual(\n            sorted(list(sales_data[\"Product\"].unique())),\n            [\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n        )\n    def test_case_2(self):\n        # Test 3 days ago\n        three_days_ago = (datetime.now() - timedelta(days=3)).timestamp() * 1000\n        sales_data = task_func(three_days_ago, random_seed=42)\n        self.assertListEqual(list(sales_data.columns), [\"Product\", \"Date\", \"Sales\"])\n        self.assertEqual(\n            sales_data[\"Date\"].iloc[0], datetime.fromtimestamp(three_days_ago / 1000.0)\n        )\n        self.assertListEqual(\n            sorted(list(sales_data[\"Product\"].unique())),\n            [\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n        )\n    def test_case_3(self):\n        # Test 1 month ago\n        one_month_ago = (datetime.now() - timedelta(days=30)).timestamp() * 1000\n        sales_data = task_func(one_month_ago, random_seed=42)\n        self.assertListEqual(list(sales_data.columns), [\"Product\", \"Date\", \"Sales\"])\n        self.assertEqual(\n            sales_data[\"Date\"].iloc[0], datetime.fromtimestamp(one_month_ago / 1000.0)\n        )\n        self.assertListEqual(\n            sorted(list(sales_data[\"Product\"].unique())),\n            [\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n        )\n    def test_case_4(self):\n        # Test custom products\n        custom_products = [\"apple\", \"banana\", \"carrot\", \"durian\", \"eggplant\"]\n        sales_data = task_func(1577836800000, random_seed=42, products=custom_products)\n        self.assertListEqual(list(sales_data.columns), [\"Product\", \"Date\", \"Sales\"])\n        self.assertEqual(\n            sales_data[\"Date\"].iloc[0], datetime.fromtimestamp(1577836800000 / 1000.0)\n        )\n        self.assertListEqual(\n            sorted(list(sales_data[\"Product\"].unique())), custom_products\n        )\n    def test_case_5(self):\n        # Test handling invalid time - future\n        with self.assertRaises(ValueError):\n            task_func(int((datetime.now() + timedelta(days=1)).timestamp() * 1000))\n    def test_case_6(self):\n        # Test handling invalid products - 4 unique items\n        with self.assertRaises(ValueError):\n            task_func(1631289600000, products=[\"this\", \"is\", \"too\", \"short\"])\n    def test_case_7(self):\n        # Test handling invalid products - 5 items but with duplicates\n        with self.assertRaises(ValueError):\n            task_func(1631289600000, products=[\"a\", \"a\", \"b\", \"c\", \"d\"])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Responds to a client's request by sending a JSON-formatted message containing the current server time and a greeting.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport json\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\ndef task_func(client_socket):\n```",
        "gt": "from datetime import datetime\nimport json\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\ndef task_func(client_socket):\n    response_data = {\"message\": \"Hello\", \"time\": str(datetime.now())}\n    response = json.dumps(response_data) + \"\\n\"\n    client_socket.send(response.encode(\"utf-8\"))\n    client_socket.close()",
        "test": "import unittest\nimport socket\nimport threading\nSERVER_ADDRESS = \"localhost\"\nBUFFER_SIZE = 1024\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def setUp(self):\n        \"\"\"Set up a server socket for testing.\"\"\"\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind((SERVER_ADDRESS, 0))  # Bind to a free port\n        self.server_socket.listen(1)\n        self.port = self.server_socket.getsockname()[1]\n    def tearDown(self):\n        \"\"\"Close the server socket after each test.\"\"\"\n        self.server_socket.close()\n    def client_thread_function(self, responses, request_message):\n        \"\"\"Function to simulate a client sending a request and receiving a response.\"\"\"\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:\n            client_socket.connect((SERVER_ADDRESS, self.port))\n            client_socket.send(request_message + b\"\\n\")  # Append end-of-message marker\n            response = client_socket.recv(BUFFER_SIZE).decode()\n            responses.append(response)\n    def test_response_contains_greeting(self):\n        \"\"\"Test if the response from the server contains a greeting.\"\"\"\n        responses = []\n        client_thread = threading.Thread(\n            target=self.client_thread_function, args=(responses, b\"Test request\")\n        )\n        client_thread.start()\n        client_socket, _ = self.server_socket.accept()\n        task_func(client_socket)\n        client_thread.join()\n        # Ensure that responses is not empty before accessing it\n        self.assertTrue(responses)  # Check that responses is not empty\n        self.assertIn(\"Hello\", responses[0])\n    def test_handle_large_request(self):\n        \"\"\"\n        Test how the function handles a request larger than the buffer size.\n        \"\"\"\n        responses = []\n        client_thread = threading.Thread(\n            target=self.client_thread_function,\n            args=(responses, b\"a\" * (BUFFER_SIZE + 1)),\n        )\n        client_thread.start()\n        client_socket, _ = self.server_socket.accept()\n        task_func(client_socket)\n        client_thread.join()\n        # Expecting a normal response despite a large request\n        self.assertIn(\"Hello\", responses[0])\n    def test_response_format(self):\n        \"\"\"\n        Test if the response format from the server is correct.\n        \"\"\"\n        responses = []\n        client_thread = threading.Thread(\n            target=self.client_thread_function, args=(responses, b\"Format request\")\n        )\n        client_thread.start()\n        client_socket, _ = self.server_socket.accept()\n        task_func(client_socket)\n        client_thread.join()\n        response_data = json.loads(responses[0])\n        self.assertIn(\"time\", response_data)\n    def test_handle_special_characters_request(self):\n        \"\"\"\n        Test how the function handles a request with special characters.\n        \"\"\"\n        special_request = b\"!@#$%^&*()_+\"\n        responses = []\n        client_thread = threading.Thread(\n            target=self.client_thread_function, args=(responses, special_request)\n        )\n        client_thread.start()\n        client_socket, _ = self.server_socket.accept()\n        task_func(client_socket)\n        client_thread.join()\n        # Expecting a normal response despite a request with special characters\n        self.assertIn(\"Hello\", responses[0])\n    def test_handle_json_request(self):\n        \"\"\"\n        Test how the function handles a JSON-formatted request.\n        \"\"\"\n        json_request = {\"request\": \"time\"}\n        json_request_encoded = json.dumps(json_request).encode(\"utf-8\")\n        responses = []\n        client_thread = threading.Thread(\n            target=self.client_thread_function, args=(responses, json_request_encoded)\n        )\n        client_thread.start()\n        client_socket, _ = self.server_socket.accept()\n        task_func(client_socket)\n        client_thread.join()\n        # Expecting a normal response despite the JSON request\n        self.assertIn(\"Hello\", responses[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform a paired t-test for the number of words in two strings, only if the strings produce the same number of words.\nThe function should output with:\n    t_statistic (float): The t-statistic, or NaN if tests cannot be performed due to unequal lengths.\n    p_value (float): The p-value, or NaN if tests cannot be performed due to unequal lengths.\nYou should write self-contained code starting with:\n```\nimport re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n```",
        "gt": "import re\nimport numpy as np\nfrom scipy.stats import ttest_rel\ndef task_func(text1, text2):\n    word_counts1 = np.array([len(word) for word in re.split(r'\\W+', text1) if word])\n    word_counts2 = np.array([len(word) for word in re.split(r'\\W+', text2) if word])\n\n    if len(word_counts1) != len(word_counts2):\n        return (np.nan, np.nan)\n\n    t_statistic, p_value = ttest_rel(word_counts1, word_counts2)\n    return t_statistic, p_value",
        "test": "import unittest\nimport re\nimport numpy as np\nfrom scipy.stats import ttest_rel\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        t_stat, p_val = task_func(\"Hello, world!\", \"Hi, universe!\")\n        self.assertTrue(isinstance(t_stat, float))\n        self.assertTrue(isinstance(p_val, float))\n    def test_2(self):\n        t_stat, p_val = task_func(\"Short text.\", \"This is a slightly longer text.\")\n        self.assertTrue(isinstance(t_stat, float))\n        self.assertTrue(isinstance(p_val, float))\n    def test_3(self):\n        t_stat, p_val = task_func(\"A, B, C, D, E.\", \"F, G, H, I, J.\")\n        self.assertTrue(isinstance(t_stat, float))\n        self.assertTrue(isinstance(p_val, float))\n        \n    def test_4(self):\n        t_stat, p_val = task_func(\"\", \"\")\n        self.assertTrue(np.isnan(t_stat))\n        self.assertTrue(np.isnan(p_val))\n    def test_5(self):\n        t_stat, p_val = task_func(\"Testing with similar lengths.\", \"Testing with similar lengths.\")\n        self.assertTrue(np.isnan(t_stat))  # Since the lengths are the same, t-statistic should be NaN\n        self.assertTrue(np.isnan(p_val))\n    def test_unequal_lengths(self):\n        t_stat, p_val = task_func(\"Short text.\", \"This is a slightly longer text.\")\n        self.assertTrue(np.isnan(t_stat))\n        self.assertTrue(np.isnan(p_val))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame with specified number of rows. Each row contains a randomly selected category from the provided categories list and a random integer between 1 and 100. The function also generates a bar chart visualizing the counts of each category in the DataFrame and returns both the DataFrame and the bar chart.\nThe function should raise the exception for: ValueError: If num_rows is less than 1.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n```",
        "gt": "import pandas as pd\nimport random\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n\n    random.seed(random_seed)\n\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n\n    return df, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with default parameters\n        df, ax = task_func()\n        self.assertEqual(len(df), 100)\n        self.assertTrue(\n            set(df[\"Category\"].unique()).issubset(set([\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        )\n        self.assertTrue(df[\"Value\"].min() >= 1)\n        self.assertTrue(df[\"Value\"].max() <= 100)\n        self.assertEqual(ax.get_title(), \"Category Counts\")\n    def test_case_2(self):\n        # Test num_rows\n        for num_rows in [10, 50, 100]:\n            df, _ = task_func(num_rows=num_rows)\n            self.assertEqual(len(df), num_rows)\n    def test_case_3(self):\n        # Test edge case - 0 rows\n        with self.assertRaises(Exception):\n            task_func(num_rows=0)\n    def test_case_4(self):\n        # Test edge case - invalid num_rows\n        with self.assertRaises(Exception):\n            task_func(num_rows=-1)\n    def test_case_5(self):\n        # Test categories\n        df, _ = task_func(categories=[\"x\", \"y\", \"z\"])\n        self.assertTrue(set(df[\"Category\"].unique()).issubset(set([\"x\", \"y\", \"z\"])))\n    def test_case_6(self):\n        # Test edge case - single category\n        df, _ = task_func(categories=[\"unique\"])\n        self.assertTrue(\n            set([\"unique\"]).issubset(df[\"Category\"].unique()),\n            \"Should work with a single category\",\n        )\n    def test_case_7(self):\n        # Test edge case - empty categories\n        with self.assertRaises(Exception):\n            task_func(categories=[])\n    def test_case_8(self):\n        # Test random seed\n        df1, _ = task_func(random_seed=123)\n        df2, _ = task_func(random_seed=123)\n        df3, _ = task_func(random_seed=124)\n        self.assertTrue(\n            df1.equals(df2), \"DataFrames should be identical with the same seed\"\n        )\n        self.assertFalse(\n            df1.equals(df3), \"DataFrames should differ with different seeds\"\n        )\n    def test_case_9(self):\n        # Test visualization\n        categories = [\"x\", \"y\", \"z\"]\n        _, ax = task_func(num_rows=100, categories=categories, random_seed=42)\n        ax_categories = [tick.get_text() for tick in ax.get_xticklabels()]\n        self.assertListEqual(\n            sorted(categories),\n            sorted(ax_categories),\n            \"X-axis categories should match input categories\",\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Merge two dataframes based on the 'id' column, perform a chi-square independence test on the merged dataframe, and draw a heatmap of the contingency table created from the features in column1, column2.\nThe function should output with:\n    tuple: A tuple containing:\n    p (float): The p-value of the Chi-Squared test.\n    heatmap (matplotlib.pyplot.Axes): Seaborn heatmap of the contingency table.\nYou should write self-contained code starting with:\n```\nimport seaborn as sns\nfrom scipy.stats import chi2_contingency\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n```",
        "gt": "import seaborn as sns\nfrom scipy.stats import chi2_contingency\ndef task_func(df1, df2, column1=\"feature1\", column2=\"feature2\"):\n    df = pd.merge(df1, df2, on=\"id\")\n    contingency_table = pd.crosstab(df[column1], df[column2])\n    heatmap = sns.heatmap(contingency_table)\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    return p, heatmap",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing basic functionality with simple data\n        df1 = pd.DataFrame({\"id\": [1, 2, 3], \"feature1\": [\"A\", \"B\", \"A\"]})\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"feature2\": [\"X\", \"Y\", \"X\"]})\n        p_value, heatmap = task_func(df1, df2)\n        # P-value should be between 0 and 1 inclusive\n        self.assertTrue(0.0 <= p_value <= 1.0)\n        self.assertEqual(len(heatmap.get_yticklabels()), 2)  # A and B\n        self.assertEqual(len(heatmap.get_xticklabels()), 2)  # X and Y\n    def test_case_2(self):\n        # Testing with distinct feature values across both dataframes\n        df1 = pd.DataFrame({\"id\": [1, 2, 3], \"feature1\": [\"C\", \"D\", \"C\"]})\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"feature2\": [\"W\", \"W\", \"Z\"]})\n        p_value, heatmap = task_func(df1, df2)\n        self.assertTrue(0.0 <= p_value <= 1.0)\n        self.assertEqual(len(heatmap.get_yticklabels()), 2)  # C and D\n        self.assertEqual(len(heatmap.get_xticklabels()), 2)  # W and Z\n    def test_case_3(self):\n        # Test custom feature column names\n        df1 = pd.DataFrame({\"id\": [1, 2, 3], \"foo\": [\"A\", \"B\", \"A\"]})\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"bar\": [\"X\", \"Y\", \"X\"]})\n        p_value, heatmap = task_func(df1, df2, column1=\"foo\", column2=\"bar\")\n        self.assertTrue(0.0 <= p_value <= 1.0)\n        self.assertEqual(len(heatmap.get_yticklabels()), 2)\n        self.assertEqual(len(heatmap.get_xticklabels()), 2)\n    def test_case_4(self):\n        # Testing a scenario where the p-value is expected to be close to 0\n        # This is because there's a strong association between feature1 and feature2\n        df1 = pd.DataFrame(\n            {\"id\": list(range(1, 21)), \"feature1\": [\"A\"] * 10 + [\"B\"] * 10}\n        )\n        df2 = pd.DataFrame(\n            {\"id\": list(range(1, 21)), \"feature2\": [\"X\"] * 10 + [\"Y\"] * 10}\n        )\n        p_value, _ = task_func(df1, df2)\n        self.assertTrue(0.0 <= p_value < 0.01)  # Expected p-value to be close to 0\n    def test_case_5(self):\n        # Test error handling - should fail when there is no 'id' column\n        df1 = pd.DataFrame({\"foo\": [1, 2], \"bar\": [3, 4]})\n        df2 = pd.DataFrame({\"foo\": [1, 2], \"bar\": [3, 4]})\n        with self.assertRaises(KeyError):\n            task_func(df1, df2)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a list of functions and draws a bar chart showing the number of arguments for each function. The function names are listed along the x-axis, and the number of arguments are represented as bars. This method showcases the integration of function introspection, data frame creation, and data visualization.\nThe function should raise the exception for: ValueError: if the input contains lambda function\nThe function should output with:\n    pandas.DataFrame: Returns a DataFrame containing the function names and their respective number of arguments.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n```",
        "gt": "import inspect\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(f_list):\n    func_info = []\n    for f in f_list:\n        if f.__name__ == \"<lambda>\":\n            raise ValueError(\"The function should not be a lambda function.\")\n        spec = inspect.getfullargspec(f)\n        func_info.append([f.__name__, len(spec.args)])\n\n    df = pd.DataFrame(func_info, columns=['Function Name', 'Number of Arguments'])\n    df.set_index('Function Name', inplace=True)\n    df.plot(kind='bar')  # Uncomment to visualize the bar chart\n    plt.show()  # Uncomment to display the plot\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport inspect\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def test_single_function(self):\n        def sample_function(x): pass\n        df = task_func([sample_function])\n        self.assertEqual(df.loc['sample_function', 'Number of Arguments'], 1)\n    def test_multiple_functions(self):\n        def f(x): pass\n        def g(x, y): pass\n        df = task_func([f, g])\n        self.assertEqual(df.loc['f', 'Number of Arguments'], 1)\n        self.assertEqual(df.loc['g', 'Number of Arguments'], 2)\n    def test_no_arguments_function(self):\n        def no_arg_func(): pass\n        df = task_func([no_arg_func])\n        self.assertEqual(df.loc['no_arg_func', 'Number of Arguments'], 0)\n    def test_lambda_functions(self):\n        lambda_func = lambda x, y: x + y\n        with self.assertRaises(ValueError):\n            df = task_func([lambda_func])\n    \n    def test_function_with_defaults(self):\n        def func_with_defaults(x, y=2): pass\n        df = task_func([func_with_defaults])\n        self.assertEqual(df.loc['func_with_defaults', 'Number of Arguments'], 2)\n    @patch('matplotlib.pyplot.show')\n    def test_plot_called(self, mock_show):\n        def sample_function(x): pass\n        task_func([sample_function])\n        mock_show.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Appends randomly generated sales data for specified fruits over a given range of days to a DataFrame, and returns a seaborn boxplot of the sales.\nThe function should raise the exception for: TypeError: If 'df' is not a pandas DataFrame. ValueError: If 'df' is not empty or  If 'sales_lower_bound' is not less than 'sales_upper_bound'.\nThe function should output with:\n    Tuple[pd.DataFrame, sns.axisgrid.FacetGrid]: Updated DataFrame with sales data and a seaborn boxplot of the sales.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport itertools\nfrom datetime import datetime, timedelta\nimport seaborn as sns\ndef task_func(df, fruits=None, days=None, seed=None, sales_lower_bound=1, sales_upper_bound=50):\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame\")\n    if not df.empty:\n        raise ValueError(\"Input DataFrame must be empty\")\n    if sales_lower_bound >= sales_upper_bound:\n        raise ValueError(\"sales_lower_bound must be less than sales_upper_bound\")\n\n    if fruits is None:\n        fruits = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry']\n    if days is None:\n        # Set days to range from January 1, 2024, to January 7, 2024\n        days = [datetime(2024, 1, 1) + timedelta(days=x) for x in range(7)]\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    data = list(itertools.product(fruits, days))\n    sales_data = pd.DataFrame(data, columns=['Fruit', 'Day'])\n    sales_data['Sales'] = np.random.randint(sales_lower_bound, sales_upper_bound, size=len(data))\n\n    result_df = pd.concat([df, sales_data])\n    plot = sns.boxplot(x='Fruit', y='Sales', data=result_df)\n\n    return result_df, plot",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Define the default date range for comparison in tests\n        self.default_days = [datetime(2024, 1, 1) + timedelta(days=x) for x in range(7)]\n    def test_default_days_range(self):\n        \"\"\"Test the default days range is correctly applied.\"\"\"\n        initial_df = pd.DataFrame()\n        report_df, _ = task_func(initial_df, seed=42)\n        unique_days = sorted(report_df['Day'].dt.date.unique())\n        expected_days = [day.date() for day in self.default_days]\n        self.assertEqual(len(unique_days), len(expected_days), \"The number of unique days should match the default range.\")\n        for day in unique_days:\n            self.assertIn(day, expected_days, \"Each unique day should be within the default range.\")\n    def test_custom_days_range(self):\n        \"\"\"Test functionality with a custom days range.\"\"\"\n        initial_df = pd.DataFrame()\n        custom_days = [datetime(2024, 1, 10), datetime(2024, 1, 11)]\n        report_df, _ = task_func(initial_df, days=custom_days, seed=42)\n        unique_days = sorted(report_df['Day'].dt.date.unique())\n        expected_custom_days = [day.date() for day in custom_days]\n        self.assertEqual(len(unique_days), len(expected_custom_days), \"The number of unique days should match the custom range.\")\n        for day in unique_days:\n            self.assertIn(day, expected_custom_days, \"Each unique day should be within the custom range.\")\n    def test_sales_bounds(self):\n        \"\"\"Test custom sales bounds are respected.\"\"\"\n        initial_df = pd.DataFrame()\n        report_df, _ = task_func(initial_df, seed=42, sales_lower_bound=20, sales_upper_bound=30)\n        sales_values = report_df['Sales'].unique()\n        self.assertTrue(all(20 <= val < 30 for val in sales_values), \"All sales values should be within the specified bounds.\")\n    def test_invalid_sales_bounds(self):\n        \"\"\"Test error handling for invalid sales bounds.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame(), sales_lower_bound=50, sales_upper_bound=10)\n    def test_with_non_dataframe_input(self):\n        \"\"\"Test that providing a non-DataFrame input raises a TypeError.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func(\"not_a_dataframe\")\n    def test_reproducibility_with_seed(self):\n        \"\"\"Test reproducibility of sales data generation with a fixed seed.\"\"\"\n        initial_df = pd.DataFrame()\n        df1, _ = task_func(initial_df, seed=42)\n        df2, _ = task_func(initial_df, seed=42)\n        pd.testing.assert_frame_equal(df1, df2, \"DataFrames generated with the same seed should be identical.\")\n        \n    def test_with_custom_fruits_and_days(self):\n        fruits = ['Mango', 'Pineapple']\n        days = [pd.Timestamp('2023-01-01'), pd.Timestamp('2023-01-02')]\n        initial_df = pd.DataFrame()\n        report_df, plot = task_func(initial_df, fruits=fruits, days=days, sales_lower_bound=1, sales_upper_bound=50, seed=42)\n        self.assertEqual(len(report_df['Fruit'].unique()), len(fruits), \"Number of unique fruits should match the input\")\n        self.assertEqual(len(report_df['Day'].unique()), len(days), \"Number of unique days should match the input\")\n        self.assertTrue(hasattr(plot, 'figure'), \"Plot object should have a 'figure' attribute\")\n        # Convert DataFrame to a list of strings for each row\n        df_list = report_df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        # Check if the converted list matches the expected output \n        expect_output = ['Mango,2023-01-01 00:00:00,39', 'Mango,2023-01-02 00:00:00,29', 'Pineapple,2023-01-01 00:00:00,15', 'Pineapple,2023-01-02 00:00:00,43']\n        self.assertAlmostEqual(df_list, expect_output, \"DataFrame contents should match the expected output\")\n    \n    def test_error_on_non_empty_dataframe(self):\n        \"\"\"Test that a ValueError is raised if the input DataFrame is not empty.\"\"\"\n        # Create a non-empty DataFrame\n        non_empty_df = pd.DataFrame({'A': [1, 2, 3]})\n        \n        # Attempt to call task_func with a non-empty DataFrame and check for ValueError\n        with self.assertRaises(ValueError) as context:\n            task_func(non_empty_df, seed=42)\n        \n        # Optionally, check the error message to ensure it's for the non-empty DataFrame condition\n        self.assertTrue(\"Input DataFrame must be empty\" in str(context.exception), \"Function should raise ValueError for non-empty DataFrame input.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plot values from a list of dictionaries based on specified keys and return the plot as a Matplotlib Axes object. >>> ax = task_func(data, keys=['x', 'y']) >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\nThe function should output with:\n    Matplotlib Axes object: The plot showing the values of specified keys from the input list of dictionaries.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(d, keys=['x', 'y', 'z']):\n    # Convert the list of dictionaries to a DataFrame\n    df = pd.DataFrame(d)\n\n    # Initialize a plot\n    fig, ax = plt.subplots()\n    \n    # Plot the values for the specified keys\n    plotted_keys = []\n    for key in keys:\n        if key in df.columns:\n            ax.plot(df[key], label=key)\n            plotted_keys.append(key)\n    \n    # Add a legend if there are any lines plotted\n    if plotted_keys:\n        ax.legend()\n    \n    # Return the Axes object\n    return ax",
        "test": "import unittest\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    \n    def test_basic_input(self):\n        data = [{'x': 1, 'y': 10, 'z': 5}, {'x': 3, 'y': 15, 'z': 6}, {'x': 2, 'y': 1, 'z': 7}]\n        ax = task_func(data)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(set([text.get_text() for text in ax.legend_.texts]), {'x', 'y', 'z'})\n        self.assertEqual(len(ax.lines), 3)\n    def test_missing_keys_in_data(self):\n        data = [{'x': 1, 'y': 10}, {'y': 15, 'z': 6}, {'x': 2, 'z': 7}]\n        ax = task_func(data)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(set([text.get_text() for text in ax.legend_.texts]), {'x', 'y', 'z'})\n        self.assertEqual(len(ax.lines), 3)\n    def test_custom_keys(self):\n        data = [{'a': 1, 'b': 10}, {'b': 15, 'c': 6}, {'a': 2, 'c': 7}]\n        ax = task_func(data, keys=['a', 'b', 'c'])\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(set([text.get_text() for text in ax.legend_.texts]), {'a', 'b', 'c'})\n        self.assertEqual(len(ax.lines), 3)\n    def test_empty_data_list(self):\n        data = []\n        ax = task_func(data)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(len(ax.lines), 0)\n        self.assertIsNone(ax.legend_)\n    def test_single_key_data(self):\n        data = [{'x': 1}, {'x': 2}, {'x': 3}]\n        ax = task_func(data)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(set([text.get_text() for text in ax.legend_.texts]), {'x'})\n        self.assertEqual(len(ax.lines), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates histograms for each column in the given DataFrame and checks if the value distributions are uniform. It prints a message for each non-uniform distribution.\nThe function should output with:\n    List[plt.Axes]: A list of matplotlib Axes objects, each representing the histogram for a column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict)\n    axes_list = []\n    for column in df.columns:\n        counts = df[column].value_counts()\n        uniform = (\n            len(set(counts)) == 1\n        )  # Check if all counts are the same (uniform distribution)\n\n        if not uniform:\n            print(f\"The distribution of values in column '{column}' is not uniform.\")\n\n        ax = counts.plot(kind=\"bar\")\n        ax.set_title(column)\n        axes_list.append(ax)\n        plt.close()\n\n    return axes_list",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func function.\"\"\"\n    def test_uniform_distribution(self):\n        \"\"\"Test for uniform distribution.\"\"\"\n        data = {\n                \"Category1\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],\n                \"Category2\": [\"X\", \"X\", \"Y\", \"Y\", \"Z\", \"Z\"],\n            }\n        axes = task_func(data)\n        self.assertEqual([ax.get_title() for ax in axes], [\"Category1\", \"Category2\"])\n    def test_non_uniform_distribution(self):\n        \"\"\"Test for non-uniform distribution.\"\"\"\n        data = {\n                \"Category1\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\"],\n                \"Category2\": [\"X\", \"X\", \"Y\", \"Y\", \"Z\", \"Z\", \"Z\"],\n            }\n        axes = task_func(data)\n        self.assertEqual([ax.get_title() for ax in axes], [\"Category1\", \"Category2\"])\n    def test_single_column(self):\n        \"\"\"Test for single column.\"\"\"\n        data = {\n                \"Category1\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],\n            }\n        axes = task_func(data)\n        self.assertEqual([ax.get_title() for ax in axes], [\"Category1\"])\n    def test_multiple_categories(self):\n        \"\"\"Test for multiple categories.\"\"\"\n        data = {\n                \"Category1\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"E\", \"E\"],\n                \"Category2\": [\"X\", \"X\", \"Y\", \"Y\", \"Z\", \"Z\", \"W\", \"W\", \"V\", \"V\"],\n            }\n        axes = task_func(data)\n        self.assertEqual([ax.get_title() for ax in axes], [\"Category1\", \"Category2\"])\n    def test_empty_dataframe(self):\n        \"\"\"Test for empty dataframe.\"\"\"\n        data = {}\n        axes = task_func(data)\n        self.assertEqual(axes, [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame containing a series of dates for a predefined list of employees.\nThe function should output with:\n    DataFrame: A pandas DataFrame with 'Employee' and 'Date' columns, listing the next 10 days for each employee.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nfrom itertools import product\n# Constants\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n```",
        "gt": "from datetime import datetime\nimport pandas as pd\nfrom itertools import product\n# Constants\nEMPLOYEES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\ndef task_func(date_str):\n    start_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    dates = pd.date_range(start_date, periods=10).tolist()\n\n    # Creating a DataFrame from the product of EMPLOYEES and dates\n    df = pd.DataFrame(list(product(EMPLOYEES, dates)), columns=[\"Employee\", \"Date\"])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nfrom datetime import datetime, timedelta\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function.\"\"\"\n    def test_return_type(self):\n        \"\"\"Test if the function returns a Pandas DataFrame.\"\"\"\n        df_test = task_func(\"2023-01-01\")\n        self.assertIsInstance(df_test, pd.DataFrame)\n    def test_correct_columns(self):\n        \"\"\"Test if the DataFrame has the correct columns: 'Employee' and 'Date'.\"\"\"\n        df_test = task_func(\"2023-01-01\")\n        self.assertListEqual(df_test.columns.tolist(), [\"Employee\", \"Date\"])\n    def test_date_range(self):\n        \"\"\"Test if the function generates the correct date range for 10 days.\"\"\"\n        start_date = \"2023-01-01\"\n        df_test = task_func(start_date)\n        end_date = (\n            datetime.strptime(start_date, \"%Y-%m-%d\") + timedelta(days=9)\n        ).date()\n        self.assertTrue(all(df_test[\"Date\"] <= pd.Timestamp(end_date)))\n    def test_number_of_rows(self):\n        \"\"\"Test if the DataFrame has the correct number of rows (10 days * number of employees).\"\"\"\n        df_test = task_func(\"2023-01-01\")\n        expected_rows = 10 * len(EMPLOYEES)  # 10 days for each employee\n        self.assertEqual(len(df_test), expected_rows)\n    def test_leap_year(self):\n        \"\"\"Test if the function correctly handles the date range for a leap year.\"\"\"\n        df_test = task_func(\"2024-02-28\")\n        leap_year_end_date = (\n            datetime.strptime(\"2024-02-28\", \"%Y-%m-%d\") + timedelta(days=9)\n        ).date()\n        self.assertIn(pd.Timestamp(leap_year_end_date), df_test[\"Date\"].values)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create and return a bar chart of the frequency of letters in a DataFrame where the column 'Letters' contains English uppercase letters.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame or lacks the 'Letters' column.\nThe function should output with:\n    Axes: A Matplotlib Axes object representing the bar graph of letter frequency, with the x-axis labeled 'Letters', the y-axis labeled 'Frequency', and the title 'Letter Frequency'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, letters=list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n    if not isinstance(df, pd.DataFrame) or 'Letters' not in df.columns:\n        raise ValueError(\"The input must be a pandas DataFrame with a 'Letters' column.\")\n\n    letter_frequency = df['Letters'].value_counts().reindex(letters, fill_value=0)\n    ax = letter_frequency.plot(kind='bar')\n    ax.set_title('Letter Frequency')\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    plt.show()\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.letters = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n        random.seed(42)\n        self.df = pd.DataFrame({'Letters': random.choices(self.letters, k=100)})\n    def test_return_type(self):\n        ax = task_func(self.df)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_invalid_input_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_invalid_input_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_plot_labels(self):\n        ax = task_func(self.df)\n        self.assertEqual(ax.get_title(), 'Letter Frequency')\n        self.assertEqual(ax.get_xlabel(), 'Letters')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n    def test_bar_chart_values(self):\n        letter_counts = self.df['Letters'].value_counts()\n        ax = task_func(self.df)\n        bars = ax.containers[0]\n        for i, bar in enumerate(bars):\n            expected_height = letter_counts.get(self.letters[i], 0)\n            self.assertEqual(bar.get_height(), expected_height)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate weather data for the specified number of hours, save it in a CSV file with colomns 'Time' and 'Condition' and back up the file to a backup directory.\nThe function should output with:\n    str: The path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
        "gt": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    FILE_PATH = os.path.join(output_dir, 'weather_data.csv')\n    BACKUP_PATH = os.path.join(output_dir, 'backup/')\n    data = [['Time', 'Condition']]\n    for i in range(hours):\n        row = [datetime.now().strftime('%H:%M:%S.%f'), WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS)-1)]]\n        data.append(row)\n\n    with open(FILE_PATH, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n    \n    if not os.path.exists(BACKUP_PATH):\n        os.makedirs(BACKUP_PATH)\n    shutil.copy(FILE_PATH, BACKUP_PATH)\n\n    return FILE_PATH",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nFILE_PATH = os.path.join(OUTPUT_DIR, 'weather_data.csv')\nBACKUP_PATH = os.path.join(OUTPUT_DIR, 'backup/')\nclass TestCases(unittest.TestCase):\n    expected_file_path = FILE_PATH\n    backup_file_path = BACKUP_PATH\n    def setUp(self):\n        \"\"\"Set up the environment for testing.\"\"\"\n        # Ensure the backup directory exists\n        os.makedirs(self.backup_file_path, exist_ok=True)\n        # Create an empty weather_data.csv or set it up as required\n        with open(self.expected_file_path, 'w') as f:\n            f.write(\"Time,Condition\\n\")  # Example: Write a header or initial content\n    def tearDown(self):\n        \"\"\"Clean up any files created during the tests.\"\"\"\n        # Check and remove the expected file if it exists\n        if os.path.exists(FILE_PATH):\n            os.remove(FILE_PATH)\n        # Check if the backup directory exists and remove it\n        if os.path.exists(BACKUP_PATH):\n            shutil.rmtree(BACKUP_PATH)\n    @patch('os.getcwd', return_value=OUTPUT_DIR)\n    @patch('os.path.exists', return_value=True)\n    def test_task_func_checks_backup_directory_exists(self, mock_exists, mock_getcwd):\n        \"\"\"Test checking for the existence of the backup directory.\"\"\"\n        task_func(1)\n        # Normalize paths to ensure consistency, especially regarding trailing slashes\n        expected_call_path = os.path.normpath(os.path.dirname(self.backup_file_path))\n        actual_call_path = os.path.normpath(mock_exists.call_args[0][0])\n        self.assertEqual(expected_call_path, actual_call_path,\n                         f\"Expected {expected_call_path}, got {actual_call_path}\")\n    @patch('os.getcwd', return_value=OUTPUT_DIR)\n    @patch('shutil.copy')\n    def test_task_func_copies_to_backup_directory(self, mock_copy, mock_getcwd):\n        \"\"\"Test if task_func copies the weather_data.csv file to the backup directory.\"\"\"\n        task_func(1)\n        # Extract directory part of the path to which the file was copied\n        actual_backup_dir = os.path.normpath(os.path.dirname(mock_copy.call_args[0][1]))\n        expected_backup_dir = os.path.normpath(os.path.dirname(self.backup_file_path))\n        self.assertEqual(expected_backup_dir, actual_backup_dir,\n                         \"The backup directory path does not match the expected directory path.\")\n    @patch('shutil.copy')\n    @patch('os.makedirs')\n    @patch('os.path.exists', return_value=True)\n    @patch('builtins.open', new_callable=mock_open, read_data=\"Time,Condition\\n\")\n    @patch('os.getcwd', return_value=OUTPUT_DIR)\n    def test_task_func_writes_correct_header(self, mock_getcwd, mock_file_open, mock_exists, mock_makedirs, mock_copy):\n        \"\"\"Ensure task_func writes the correct header to weather_data.csv.\"\"\"\n        task_func(1)\n        header_components = [\"Time\", \"Condition\"]\n        header_written = any(\n            all(component in call_args.args[0] for component in header_components)\n            for call_args in mock_file_open().write.call_args_list\n        )\n        self.assertTrue(header_written, \"The expected header components were not written to the file.\")\n    def test_backup_file_creation(self):\n        \"\"\"Test that the CSV file is correctly copied to the backup directory.\"\"\"\n        with patch('shutil.copy') as mock_copy:\n            task_func(1)\n            mock_copy.assert_called_once_with(FILE_PATH, BACKUP_PATH)\n    @patch('csv.writer')\n    def test_csv_writing(self, mock_csv_writer):\n        \"\"\"Test if CSV writer is called with correct parameters.\"\"\"\n        task_func(1)\n        mock_csv_writer.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save the list of dictionaries provided in the 'result' parameter to a CSV file (without index) and a JSON file.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n```",
        "gt": "import json\nimport pandas as pd\ndef task_func(result, csv_file_path=\"test.csv\", json_file_path=\"test.json\"):\n    # Save to CSV\n    df = pd.DataFrame(result)\n    df.to_csv(csv_file_path, index=False)\n\n    # Save to JSON\n    with open(json_file_path, 'w') as f:\n        json.dump(result, f, indent=4)\n\n    return None",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.f_1 = os.path.join(self.test_dir, \"csv_1.csv\")\n        self.f_2 = os.path.join(self.test_dir, \"csv_2.csv\")\n        self.f_3 = os.path.join(self.test_dir, \"csv_3.csv\")\n        self.f_4 = os.path.join(self.test_dir, \"csv_4.csv\")\n        self.f_5 = os.path.join(self.test_dir, \"csv_5.csv\")\n        self.j_1 = os.path.join(self.test_dir, \"json_1.json\")\n        self.j_2 = os.path.join(self.test_dir, \"json_2.json\")\n        self.j_3 = os.path.join(self.test_dir, \"json_3.json\")\n        self.j_4 = os.path.join(self.test_dir, \"json_4.json\")\n        self.j_5 = os.path.join(self.test_dir, \"json_5.json\")\n    def tearDown(self):\n        import shutil\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Test with a list of dictionaries with string keys and integer values\n        result = [\n            {\"hi\": 7, \"bye\": 4, \"from_user\": 0}\n        ]\n        task_func(result, self.f_1, self.j_1)\n        self.assertTrue(os.path.exists(self.f_1))\n        self.assertTrue(os.path.exists(self.j_1))\n        with open(self.j_1, 'r') as f:\n            loaded_json = json.load(f)\n        # Adjusting the expected result for JSON's string keys\n        expected_result = [{\"hi\": 7, \"bye\": 4, \"from_user\": 0}]\n        self.assertEqual(loaded_json, expected_result)\n    def test_case_2(self):\n        # Test with a list of dictionaries with integer keys and values\n        result = [{1: 2, 3: 4, 5: 6}]\n        task_func(result, self.f_2, self.j_2)\n        self.assertTrue(os.path.exists(self.f_2))\n        self.assertTrue(os.path.exists(self.j_2))\n        with open(self.j_2, 'r') as f:\n            loaded_json = json.load(f)\n        # Adjusting the expected result for JSON's string keys\n        expected_result = [{\"1\": 2, \"3\": 4, \"5\": 6}]\n        self.assertEqual(loaded_json, expected_result)\n    def test_case_3(self):\n        # Test with an empty list\n        result = []\n        task_func(result, self.f_3, self.j_3)\n        self.assertTrue(os.path.exists(self.f_3))\n        self.assertTrue(os.path.exists(self.j_3))\n        with open(self.j_3, 'r') as f:\n            loaded_json = json.load(f)\n        # Adjusting the expected result for JSON's string keys\n        expected_result = []\n        self.assertEqual(loaded_json, expected_result)\n    def test_case_4(self):\n        # Test with a list of dictionaries with string keys and integer values\n        result = [\n            {\"hi\": 7, \"bye\": 4, \"from_user\": 3}\n        ]\n        task_func(result, self.f_4, self.j_4)\n        self.assertTrue(os.path.exists(self.f_4))\n        self.assertTrue(os.path.exists(self.j_4))\n        with open(self.j_4, 'r') as f:\n            loaded_json = json.load(f)\n        # Adjusting the expected result for JSON's string keys\n        expected_result = [{\"hi\": 7, \"bye\": 4, \"from_user\": 3}]\n        self.assertEqual(loaded_json, expected_result)\n    def test_case_5(self):\n        # Test with a list of dictionaries with string keys and integer values\n        result = [\n            {\"hi\": 7, \"bye\": 4, \"from_user\": 11}\n        ]\n        task_func(result, self.f_5, self.j_5)\n        self.assertTrue(os.path.exists(self.f_5))\n        df = pd.read_csv(self.f_5)\n        self.assertEqual(df.loc[0, \"hi\"], 7)\n        self.assertEqual(df.loc[0, \"bye\"], 4)\n        self.assertEqual(df.loc[0, \"from_user\"], 11)\n        self.assertTrue(os.path.exists(self.j_5))\n        with open(self.j_5, 'r') as f:\n            loaded_json = json.load(f)\n        # Adjusting the expected result for JSON's string keys\n        expected_result = [{\"hi\": 7, \"bye\": 4, \"from_user\": 11}]\n        self.assertEqual(loaded_json, expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find and run all .bat files in a given directory, returning their file names and exit codes.\nThe function should output with:\n    list of tuples: A list where each tuple contains the file name and its exit code.\n    The exit code is None if the file could not be executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n```",
        "gt": "import subprocess\nimport os\nimport sys\nimport glob\ndef task_func(directory_path):\n\n    results = []\n    file_paths = glob.glob(os.path.join(directory_path, '*.bat'))\n\n    for file_path in file_paths:\n        try:\n            process = subprocess.Popen(file_path, shell=True)\n            exit_code = process.wait()\n            results.append((os.path.basename(file_path), exit_code))\n        except Exception as e:\n            print(f\"Failed to execute the file: {file_path}. Error: {e}\", file=sys.stderr)\n            results.append((os.path.basename(file_path), None))\n\n    return results",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport os\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.Popen')\n    @patch('glob.glob')\n    def test_no_bat_files(self, mock_glob, mock_popen):\n        mock_glob.return_value = []\n        result = task_func(\"path/to/directory\")\n        self.assertEqual(result, [])\n    @patch('subprocess.Popen')\n    @patch('glob.glob')\n    def test_single_bat_file_success(self, mock_glob, mock_popen):\n        mock_glob.return_value = ['file1.bat']\n        mock_process = MagicMock()\n        mock_process.wait.return_value = 0\n        mock_popen.return_value = mock_process\n        result = task_func(\"path/to/directory\")\n        self.assertEqual(result, [(\"file1.bat\", 0)])\n    @patch('subprocess.Popen')\n    @patch('glob.glob')\n    def test_single_bat_file_failure(self, mock_glob, mock_popen):\n        mock_glob.return_value = ['file1.bat']\n        mock_process = MagicMock()\n        mock_process.wait.return_value = 1\n        mock_popen.return_value = mock_process\n        result = task_func(\"path/to/directory\")\n        self.assertEqual(result, [(\"file1.bat\", 1)])\n    @patch('subprocess.Popen')\n    @patch('glob.glob')\n    def test_multiple_bat_files_mixed_results(self, mock_glob, mock_popen):\n        mock_glob.return_value = ['file1.bat', 'file2.bat', 'file3.bat']\n        mock_process1 = MagicMock()\n        mock_process1.wait.return_value = 0\n        mock_process2 = MagicMock()\n        mock_process2.wait.return_value = 1\n        mock_process3 = MagicMock()\n        mock_process3.wait.side_effect = Exception(\"Mocked exception\")\n        mock_popen.side_effect = [mock_process1, mock_process2, mock_process3]\n        result = task_func(\"path/to/directory\")\n        self.assertEqual(result, [(\"file1.bat\", 0), (\"file2.bat\", 1), (\"file3.bat\", None)])\n    @patch('subprocess.Popen')\n    @patch('glob.glob')\n    def test_exception_handling(self, mock_glob, mock_popen):\n        mock_glob.return_value = ['file1.bat']\n        mock_popen.side_effect = Exception(\"Mocked exception\")\n        result = task_func(\"path/to/directory\")\n        self.assertEqual(result, [(\"file1.bat\", None)])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scale the 'Age' and 'Income' columns between 0 and 1 for each group by 'id' in the provided pandas DataFrame. Additionally, create a histogram of the 'Income' column after scaling and return both the scaled DataFrame and the histogram data.\nThe function should output with:\n    tuple: A tuple containing the scaled DataFrame and the histogram data for the 'income' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    #Scaling the 'age' and 'income' columns\n    df_grouped = df.groupby('id').apply(\n        lambda x: pd.DataFrame(\n            scaler.fit_transform(x[['age', 'income']]), \n            columns=['age', 'income'], \n            index=x.index\n        )\n    )\n\n    # Creating a histogram of the 'income' column\n    hist, bins = np.histogram(df_grouped['income'], bins=10)\n\n    return df_grouped, (hist, bins)",
        "test": "import unittest\nimport pandas as pd\nfrom faker import Faker\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setting up Faker for test data generation\n        self.fake = Faker()\n    def generate_test_dataframe(self, num_rows):\n        # Generating a test DataFrame with 'id', 'age', and 'income' columns\n        data = {\n            'id': [self.fake.random_int(min=1, max=5) for _ in range(num_rows)],\n            'age': [self.fake.random_int(min=18, max=80) for _ in range(num_rows)],\n            'income': [self.fake.random_int(min=20000, max=100000) for _ in range(num_rows)]\n        }\n        return pd.DataFrame(data)\n    def test_empty_dataframe(self):\n        df = pd.DataFrame()\n        with self.assertRaises(Exception):\n            scaled_df, income_hist = task_func(df)\n    def test_single_group_dataframe(self):\n        df = self.generate_test_dataframe(1)\n        scaled_df, income_hist = task_func(df)\n        self.assertEqual(len(scaled_df), 1)  # Only one row, hence one row in scaled DataFrame\n        self.assertEqual(len(income_hist[0]), 10)  # Histogram should have 10 bins by default\n    def test_multiple_groups_dataframe(self):\n        df = self.generate_test_dataframe(100)\n        scaled_df, income_hist = task_func(df)\n        self.assertEqual(len(scaled_df), 100)  # Should have the same number of rows as input DataFrame\n        self.assertEqual(len(income_hist[0]), 10)  # Checking histogram bin count\n    def test_scaled_values_range(self):\n        df = self.generate_test_dataframe(50)\n        scaled_df, _ = task_func(df)\n        self.assertEqual(len(scaled_df[(0.0 > scaled_df['age']) & (scaled_df['age'] > 1.0)]), 0)  # Age should be scaled between 0 and 1\n        self.assertEqual(len(scaled_df[(0.0 > scaled_df['income']) & (scaled_df['income'] > 1.0)]), 0)  # Age should be scaled between 0 and 1\n        \n    def test_histogram_data_integrity(self):\n        df = self.generate_test_dataframe(50)\n        _, income_hist = task_func(df)\n        self.assertTrue(np.all(income_hist[0] >= 0))  # Histogram counts should be non-negative\n        self.assertTrue(np.all(np.diff(income_hist[1]) > 0))  # Histogram bins should be in ascending order",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates an MxN matrix from a list L, normalizes it based on the sound pressure level (SPL) of a specified audio file, and generates a spectrogram from the matrix. SPL = 20 * log10(sqrt(mean(data^2))) where 'data' is the audio data read from the file. The spectrogram is displayed with a logarithmic scale for frequency and a linear scale for time, with the SPL used to adjust the amplitude displayed in the spectrogram.\nNote that: Notes: The spectrogram is generated based on the amplitude of the normalized matrix, with the sound pressure level (SPL) calculated from the audio file. The SPL is calculated using the formula:\nThe function should raise the exception for: FileNotFoundError: If the specified audio file does not exist.\nThe function should output with:\n    numpy.ndarray: The normalized MxN matrix.\n    matplotlib.figure.Figure: The figure object for the generated spectrogram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n```",
        "gt": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\ndef task_func(L, M, N, audio_file):\n    # Ensure the audio file exists\n    if not os.path.isfile(audio_file):\n        raise FileNotFoundError(f\"{audio_file} does not exist.\")\n\n    # Read the audio file\n    data, samplerate = sf.read(audio_file)\n    # Calculate the sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(data ** 2)))\n\n    # Generate the matrix\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize the matrix to match the SPL\n    matrix = matrix / np.max(matrix) * spl\n\n    # Generate the spectrogram\n    D = librosa.amplitude_to_db(np.abs(librosa.stft(matrix)), ref=np.max)\n    fig = librosa.display.specshow(D, sr=samplerate, x_axis='time', y_axis='log')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('Spectrogram')\n\n    return matrix, plt.gcf()  # Return both the matrix and the figure object for the plot",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('os.path.isfile', return_value=False)\n    def test_nonexistent_audio_file(self, mock_isfile):\n        \"\"\"Test if the function raises FileNotFoundError for a non-existent audio file.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5, 'nonexistent_audio.wav')\n    @patch('os.path.isfile', return_value=True)\n    @patch('soundfile.read', return_value=(np.array([0.1]), 44100))\n    def test_empty_list_input(self, mock_read, mock_isfile):\n        \"\"\"Test handling of an empty list which should raise an error during reshaping.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([], 2, 5, 'audio.wav')\n    @patch('os.path.isfile', return_value=True)\n    @patch('soundfile.read', return_value=(np.array([0.1, 0.2, 0.3]), 44100))\n    # Mock plotting functions\n    @patch('matplotlib.pyplot.colorbar', MagicMock())\n    @patch('librosa.display.specshow', return_value=MagicMock())\n    def test_successful_matrix_creation(self, mock_specshow, mock_read, mock_isfile):\n        \"\"\"Test successful matrix creation without executing the plotting.\"\"\"\n        matrix, fig = task_func([i for i in range(100)], 10, 10, 'audio.wav')\n        self.assertIsInstance(matrix, np.ndarray)\n        self.assertEqual(matrix.shape, (10, 10))\n        # Ensure that the plotting functions are called, validating the function's complete execution path\n        mock_specshow.assert_called()\n    @patch('os.path.isfile', return_value=True)\n    @patch('soundfile.read', return_value=(np.array([0.1, 0.2, 0.3]), 44100))\n    # Mock plotting functions\n    @patch('matplotlib.pyplot.colorbar', MagicMock())\n    @patch('librosa.display.specshow', return_value=MagicMock())\n    def test_docstring_examples(self, mock_specshow, mock_read, mock_isfile):\n        \"\"\"Test the examples provided in the function's docstring.\"\"\"\n        matrix, fig = task_func([i for i in range(100)], 10, 10, 'audio.wav')\n        self.assertIsInstance(matrix, np.ndarray)\n        self.assertEqual(matrix.shape, (10, 10))\n    \n    @patch('os.path.isfile', return_value=True)\n    @patch('soundfile.read', return_value=(np.array([0.1, 0.2, 0.3]), 44100))\n    @patch('matplotlib.pyplot.colorbar', MagicMock())\n    @patch('librosa.display.specshow', return_value=MagicMock())\n    def test_spl_calculation(self, mock_specshow, mock_read, mock_isfile):\n        \"\"\"Test the sound pressure level (SPL) calculation.\"\"\"\n        matrix, fig = task_func([i for i in range(100)], 10, 10, 'audio.wav')\n        self.assertAlmostEquals(matrix.max(), -0.0)\n        self.assertAlmostEquals(matrix.min(), -13.309932190414244)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract all names from a string that is not enclosed by square brackets and send the names in an email.\nNote that: The message in the email is formatted in \"Subject: Extracted Names\\n\\n\" with the extracted name \"\\nJosie Smith\\nMugsy Dog Smith\".\nThe function should output with:\n    list: A list of extracted names.\nYou should write self-contained code starting with:\n```\nimport re\nimport smtplib\n# Constants\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n```",
        "gt": "import re\nimport smtplib\n# Constants\nTEXT = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\nRECEPIENT_ADDRESS = \"names@gmail.com\"\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(text=TEXT, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, recepient_address=RECEPIENT_ADDRESS, smtp=None):\n\n    names = re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', text)\n    # Remove trailing spaces from each name and filter out empty strings\n    names = [name.strip() for name in names if name != \"\"]\n    \n    message = 'Subject: Extracted Names\\n\\n' + '\\n'.join(names)\n    if smtp:\n        server = smtp(smtp_server, smtp_port)\n    else:\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        \n    server.starttls()\n    server.login(email_address, email_password)\n    server.sendmail(email_address, recepient_address, message)\n    server.quit()\n    return names",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport smtplib\nclass TestCases(unittest.TestCase):\n    @patch('smtplib.SMTP')\n    def test_f225(self, mock_smtp):\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        \n        # Call the function\n        result = task_func()\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert the return value\n        self.assertEqual(result, ['Josie Smith', 'Mugsy Dog Smith'])\n    @patch('smtplib.SMTP')\n    def test_f225_subject(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        \n        # Call the function\n        result = task_func()\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert that starttls, login, sendmail, and quit were called on the SMTP instance\n        mock_smtp_instance.login.assert_called_once_with('your.email@gmail.com', 'your.password')\n        mock_smtp_instance.sendmail.assert_called_once_with('your.email@gmail.com', 'names@gmail.com', 'Subject: Extracted Names\\n\\nJosie Smith\\nMugsy Dog Smith')\n        \n        # Assert the return value\n        self.assertEqual(result, ['Josie Smith', 'Mugsy Dog Smith'])\n    \n    @patch('smtplib.SMTP')\n    def test_no_names(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        # Custom input text with no names\n        custom_text = \"[No names enclosed by square brackets]\"\n        \n        # Call the function with custom input\n        result = task_func(text=custom_text)\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert that starttls, login, sendmail, and quit were called on the SMTP instance\n        mock_smtp_instance.login.assert_called_once_with('your.email@gmail.com', 'your.password')\n        mock_smtp_instance.sendmail.assert_called_once_with('your.email@gmail.com', 'names@gmail.com', 'Subject: Extracted Names\\n\\n')\n        # Assert the return value\n        self.assertEqual(result, [])\n    @patch('smtplib.SMTP')\n    def test_recepient(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        # Custom input text with no names\n        custom_text = \"[No names enclosed by square brackets]\"\n        \n        # Call the function with custom input\n        result = task_func(text=custom_text, recepient_address='change@gmail.com')\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert that starttls, login, sendmail, and quit were called on the SMTP instance\n        mock_smtp_instance.login.assert_called_once_with('your.email@gmail.com', 'your.password')\n        mock_smtp_instance.sendmail.assert_called_once_with('your.email@gmail.com', 'change@gmail.com', 'Subject: Extracted Names\\n\\n')\n        # Assert the return value\n        self.assertEqual(result, [])\n    @patch('smtplib.SMTP')\n    def test_login(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        # Custom input text with no names\n        custom_text = \"[No names enclosed by square brackets]\"\n        \n        # Call the function with custom input\n        result = task_func(text=custom_text, email_address=\"your.email.change@gmail.com\", email_password=\"your.password.change\")\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert that starttls, login, sendmail, and quit were called on the SMTP instance\n        mock_smtp_instance.login.assert_called_once_with('your.email.change@gmail.com', 'your.password.change')\n        # Assert the return value\n        self.assertEqual(result, [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw and return a correlation matrix heatmap for a DataFrame containing numerical columns. The title of the heatmap is set to 'Correlation Matrix'.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The matplotlib Axes object representing the heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(data):\n    df = pd.DataFrame(data)\n    correlation_matrix = df.corr()\n    ax = sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n    ax.set_title('Correlation Matrix')\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        data = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n        ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.title.get_text(), 'Correlation Matrix')\n        \n    def test_case_2(self):\n        data = {'a': [1, 2, 3], 'b': [-4, -5, -6], 'c': [-7, -8, -9]}\n        ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.title.get_text(), 'Correlation Matrix')\n        \n    def test_case_3(self):\n        data = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [-7, -8, -9]}\n        ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.title.get_text(), 'Correlation Matrix')\n        \n    def test_case_4(self):\n        data = {'a': [1, 1, 1], 'b': [2, 2, 2], 'c': [3, 3, 3]}\n        ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.title.get_text(), 'Correlation Matrix')\n        \n    def test_case_5(self):\n        data = {'a': [1, 2, None], 'b': [4, None, 6], 'c': [None, 8, 9]}\n        ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.title.get_text(), 'Correlation Matrix')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a Flask application with a specified templates folder. It defines a route at the root ('/') which handles POST requests, logs the information request data as a JSON, and renders an 'index.html' template using the data provided in POST requests.\nThe function should output with:\n    flask.app.Flask: A Flask application instance configured with a root route that handles POST requests.\n    The route logs incoming request data as JSON and serves the 'index.html' template with the provided data.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask, render_template, request\nimport json\nimport logging\nlogging.basicConfig(filename=\"out.log\", level=logging.INFO)\ndef task_func(template_folder):\n```",
        "gt": "from flask import Flask, render_template, request\nimport json\nimport logging\nlogging.basicConfig(filename=\"out.log\", level=logging.INFO)\ndef task_func(template_folder):\n\n    app = Flask(__name__, template_folder=template_folder)\n\n    @app.route('/', methods=['POST'])\n    def handle_post():\n        data = request.get_json()\n        logging.info(json.dumps(data))\n        return render_template('index.html', data=data)\n\n    return app",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom flask import Flask, request\nimport logging\nimport os\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.template_folder = tempfile.mkdtemp()\n        self.index_html_path = os.path.join(self.template_folder, 'index.html')\n        with open(self.index_html_path, 'w') as f:\n            f.write('<html><body>{{ data }}</body></html>')\n                    \n    def tearDown(self):\n        os.remove(self.index_html_path)\n        os.rmdir(self.template_folder)\n    def test_app_creation(self):\n        \"\"\"Test if the function properly creates an app with given parameters.\"\"\"\n        app = task_func(self.template_folder)\n        app.config['TESTING'] = True\n        self.assertIsInstance(app, Flask, \"The function should return a Flask app instance.\")\n        self.assertEqual(app.template_folder, self.template_folder, \"The template folder should be set correctly.\")\n    def test_app_instance(self):\n        \"\"\"Test if the function returns a Flask app instance.\"\"\"\n        app = task_func(self.template_folder)\n        app.config['TESTING'] = True\n        self.assertIsInstance(app, Flask)\n    def test_template_folder_configuration(self):\n        \"\"\"Test if the template folder is correctly configured.\"\"\"\n        app = task_func(self.template_folder)\n        app.config['TESTING'] = True\n        self.assertEqual(app.template_folder, self.template_folder, \"The template folder should be set correctly.\")\n    def test_logging_info_called_with_correct_arguments(self):\n            \"\"\"Test if logging.info is called with the correct JSON data.\"\"\"\n            template_folder = 'path_to_templates'\n            app = task_func(self.template_folder)\n            app.config['TESTING'] = True\n            test_data = {\"test\": \"data\"}\n            with app.test_client() as client:\n                with patch('logging.info') as mock_logging_info:\n                    client.post('/', json=test_data)\n                    mock_logging_info.assert_called_once_with(json.dumps(test_data))\n    @patch('logging.info')\n    def test_logging_request_data(self, mock_logging):\n        \"\"\"Test if logging correctly logs POST request data.\"\"\"\n        app = task_func(self.template_folder)\n        app.config['TESTING'] = True\n        test_data = {\"test\": \"data\"}\n        client =app.test_client()\n        client.post('/', json=test_data)\n        # Ensure that logging.info was called with the JSON-dumped test data\n        mock_logging.assert_called_once_with(json.dumps(test_data))\n    @patch('flask.Flask.url_for')\n    def test_home_route(self, mock_url_for):\n        \"\"\"Test if the '/' route is defined correctly.\"\"\"\n        app = task_func(self.template_folder)\n        app.config['TESTING'] = True\n        with app.test_request_context('/'):\n            mock_url_for.return_value = '/'\n            self.assertEqual(request.path, mock_url_for('home'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Loads data from an SQLite database into a Pandas DataFrame and performs a string replacement operation on a specified column. Specifically, replaces all occurrences of the newline character '\\n' with the HTML line break tag '<br>'.\nThe function should output with:\n    pd.DataFrame: The modified DataFrame with replaced strings in the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nimport sqlite3\ndef task_func(db_path: str, table_name: str, column_name: str) -> pd.DataFrame:\n    try:\n        conn = sqlite3.connect(db_path)\n        df = pd.read_sql_query(f\"SELECT * FROM {table_name}\", conn)\n        df[column_name] = df[column_name].replace({'\\n': '<br>'}, regex=True)\n    finally:\n        conn.close()\n    return df",
        "test": "def create_mock_db(db_path: str, table_name: str, column_name: str):\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    cursor.execute(f\"CREATE TABLE {table_name} ({column_name} TEXT)\")\n    cursor.executemany(f\"INSERT INTO {table_name} ({column_name}) VALUES (?)\", [(\"Hello\\nWorld\",), (\"Good\\nMorning\",), (\"Welcome\\nBack\",)])\n    conn.commit()\n    conn.close()\nimport unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.db1_path = 'test_db1.db'\n        self.db2_path = 'test_db2.db'\n        self.table_name1 = 'TestData1'\n        self.table_name2 = 'TestData2'\n        self.column_name1 = 'TextColumn1'\n        self.column_name2 = 'TextColumn2'\n        create_mock_db(self.db1_path, self.table_name1, self.column_name1)\n        create_mock_db(self.db2_path, self.table_name2, self.column_name2)\n    def tearDown(self):\n        os.remove(self.db1_path)\n        os.remove(self.db2_path)\n        if os.path.exists('nonexistent.db'):\n            os.remove('nonexistent.db')\n    \n    def test_valid_input(self):\n        df1 = task_func(self.db1_path, self.table_name1, self.column_name1)\n        self.assertIn('<br>', df1[self.column_name1].iloc[0])\n    def test_different_table_and_column(self):\n        df2 = task_func(self.db2_path, self.table_name2, self.column_name2)\n        self.assertIn('<br>', df2[self.column_name2].iloc[1])\n    def test_invalid_db_path(self):\n        # Adjusting for the fact that a non-existent database doesn't cause sqlite3.OperationalError when using pandas\n        try:\n            task_func('nonexistent.db', self.table_name1, self.column_name1)\n            self.fail(\"Expected an exception due to nonexistent database path\")\n        except Exception as e:\n            self.assertIsInstance(e, (sqlite3.OperationalError, pd.errors.DatabaseError))\n    def test_invalid_table_name(self):\n        with self.assertRaises(pd.errors.DatabaseError):\n            task_func(self.db1_path, 'NonexistentTable', self.column_name1)\n    def test_invalid_column_name(self):\n        # This checks for a KeyError since pandas will raise this if the column does not exist\n        with self.assertRaises(KeyError):\n            task_func(self.db1_path, self.table_name1, 'NonexistentColumn')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Shuffle the substrings within each string in a given list. This function takes a list of comma-separated strings and splits each into substrings. It extracts substrings based on commas, removing leading and trailing whitespaces from each. Then, it shuffles these processed substrings within each string, and returns a pandas DataFrame with two columns: \"Original String\" and \"Shuffled String\".\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Original String' and 'Shuffled String'.\nYou should write self-contained code starting with:\n```\nimport re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n```",
        "gt": "import re\nimport random\nimport pandas as pd\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    shuffled_strings = []\n    for s in data_list:\n        substrings = re.split(\"\\s*,\\s*\", s)\n        random.shuffle(substrings)\n        shuffled_s = \", \".join(substrings)\n        shuffled_strings.append(shuffled_s)\n\n    df[\"Shuffled String\"] = shuffled_strings\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        input_data = [\"lamp, bag, mirror\", \"table, chair\"]\n        output_df = task_func(input_data)\n        self.assertEqual(output_df[\"Original String\"].iloc[0], \"lamp, bag, mirror\")\n        self.assertEqual(output_df[\"Original String\"].iloc[1], \"table, chair\")\n        self.assertEqual(len(output_df[\"Shuffled String\"].iloc[0].split(\", \")), 3)\n        self.assertEqual(len(output_df[\"Shuffled String\"].iloc[1].split(\", \")), 2)\n    def test_case_2(self):\n        # Test single character substrings\n        input_data = [\"A, B, C, D\", \"E, F, G\"]\n        output_df = task_func(input_data)\n        self.assertEqual(output_df[\"Original String\"].iloc[0], \"A, B, C, D\")\n        self.assertEqual(output_df[\"Original String\"].iloc[1], \"E, F, G\")\n        self.assertEqual(len(output_df[\"Shuffled String\"].iloc[0].split(\", \")), 4)\n        self.assertEqual(len(output_df[\"Shuffled String\"].iloc[1].split(\", \")), 3)\n    def test_case_3(self):\n        # Test single-item list\n        input_data = [\"word1, word2\"]\n        output_df = task_func(input_data)\n        self.assertEqual(output_df[\"Original String\"].iloc[0], \"word1, word2\")\n        self.assertEqual(len(output_df[\"Shuffled String\"].iloc[0].split(\", \")), 2)\n    def test_case_4(self):\n        # Tests shuffling with an empty string\n        input_data = [\"\"]\n        output_df = task_func(input_data)\n        self.assertEqual(output_df[\"Original String\"].iloc[0], \"\")\n        self.assertEqual(output_df[\"Shuffled String\"].iloc[0], \"\")\n    def test_case_5(self):\n        # Test shuffling single substring (no shuffling)\n        input_data = [\"single\"]\n        output_df = task_func(input_data)\n        self.assertEqual(output_df[\"Original String\"].iloc[0], \"single\")\n        self.assertEqual(output_df[\"Shuffled String\"].iloc[0], \"single\")\n    def test_case_6(self):\n        # Testing the effect of a specific random seed to ensure reproducibility\n        input_data = [\"a, b, c, d\"]\n        output_df1 = task_func(input_data, seed=42)\n        output_df2 = task_func(input_data, seed=42)\n        self.assertEqual(\n            output_df1[\"Shuffled String\"].iloc[0], output_df2[\"Shuffled String\"].iloc[0]\n        )\n    def test_case_7(self):\n        # Tests shuffling with varying spaces around commas\n        input_data = [\"one,two, three\"]\n        corrected_expected_shuffled = \"two, one, three\"\n        output_df = task_func(input_data, seed=42)\n        self.assertEqual(output_df[\"Original String\"].iloc[0], \"one,two, three\")\n        self.assertEqual(\n            output_df[\"Shuffled String\"].iloc[0], corrected_expected_shuffled\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function takes two strings, removes any ASCII punctuation using regular expressions, and returns the cleaned strings as a tuple. It targets punctuation characters defined in `string.punctuation`, which includes the following characters: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' >>> cleaned_text1, cleaned_text2 = task_func(\"test (with parenthesis []!!)\", \"And, other; stuff ^_`\") >>> print(cleaned_text1, cleaned_text2) test with parenthesis  And other stuff\nNote that: This function may not remove non-ASCII or uncommon punctuation symbols.\nThe function should output with:\n    tuple: A tuple containing the cleaned texts (text1, text2) with punctuation removed.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\ndef task_func(text1, text2):\n```",
        "gt": "import re\nimport string\ndef task_func(text1, text2):\n    # Constants\n    PUNCTUATION = string.punctuation\n\n    cleaned_texts = []\n\n    # Remove punctuation from each text string\n    for text in [text1, text2]:\n        cleaned_text = re.sub('['+re.escape(PUNCTUATION)+']', '', text)\n        cleaned_texts.append(cleaned_text)\n\n    return tuple(cleaned_texts)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_with_common_punctuation(self):\n        input_text1 = \"Hello, world!\"\n        input_text2 = \"How's it going?\"\n        expected_output = (\"Hello world\", \"Hows it going\")\n        self.assertEqual(task_func(input_text1, input_text2), expected_output)\n    def test_with_uncommon_punctuation(self):\n        input_text1 = \"Weird\u00abtext\u00bbwith\u2030symbols\"\n        input_text2 = \"More\u00bbsymbols\u00abhere\u2020too\"\n        expected_output = (input_text1, input_text2)  # Unchanged since uncommon punctuations are not removed\n        self.assertEqual(task_func(input_text1, input_text2), expected_output)\n    def test_with_numeric_characters(self):\n        input_text1 = \"Text with numbers 12345\"\n        input_text2 = \"67890, numbers continue.\"\n        expected_output = (\"Text with numbers 12345\", \"67890 numbers continue\")\n        self.assertEqual(task_func(input_text1, input_text2), expected_output)\n    def test_empty_strings(self):\n        input_text1 = \"\"\n        input_text2 = \"\"\n        expected_output = (\"\", \"\")\n        self.assertEqual(task_func(input_text1, input_text2), expected_output)\n    def test_no_punctuation(self):\n        input_text1 = \"Just a normal sentence\"\n        input_text2 = \"Another normal sentence\"\n        expected_output = (\"Just a normal sentence\", \"Another normal sentence\")\n        self.assertEqual(task_func(input_text1, input_text2), expected_output)\n    def test_all_symbols(self):\n        input_text1 = '''!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\"'''\n        input_text2 = \"test\"\n        expected_output = (\"\", \"test\")\n        self.assertEqual(task_func(input_text1, input_text2), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Test the normality of a particular numeric column from a DataFrame with Shapiro-Wilk test, including an artificial step to explicitly use np.\nThe function should output with:\n    bool: True if the column passes the normality test, False otherwise.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(df, column, alpha):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\ndef task_func(df, column, alpha):\n    # Artificial step to use np.mean for demonstration\n    mean_value = np.mean(df[column])\n\n    # Adjusting DataFrame for demonstration, this step is artificial\n    df[column] = df[column] - mean_value\n\n    if column not in df.columns:\n        raise ValueError('Column does not exist in DataFrame')\n\n    _, p = stats.shapiro(df[column])\n    return p > alpha",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n    def test_case_1(self):\n        df = pd.DataFrame({'Value': np.random.normal(0, 1, 1000)})\n        self.assertTrue(task_func(df, 'Value', 0.05))\n    def test_case_2(self):\n        df = pd.DataFrame({'Value': np.random.uniform(0, 1, 1000)})\n        self.assertFalse(task_func(df, 'Value', 0.05))\n    def test_case_3(self):\n        df = pd.DataFrame({'Value': np.random.exponential(1, 1000)})\n        self.assertFalse(task_func(df, 'Value', 0.05))\n    def test_case_4(self):\n        df = pd.DataFrame({'Value': np.random.lognormal(0, 1, 1000)})\n        self.assertFalse(task_func(df, 'Value', 0.05))\n    def test_case_5(self):\n        df = pd.DataFrame({'Value': np.random.chisquare(1, 1000)})\n        self.assertFalse(task_func(df, 'Value', 0.05))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a sales report for a list of products in different categories. The report includes the quantity sold and revenue generated for each product.\nNote that: The column names uses are 'Product', 'Category', 'Quantity Sold', and 'Revenue'. The quantity sold is random number from 1 to 100 The revenue is the number of quantity sold times with the random number from 10 to 100\nThe function should output with:\n    DataFrame: A pandas DataFrame with sales data for the products.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(product_list, categories):\n```",
        "gt": "import pandas as pd\nimport random\ndef task_func(product_list, categories):\n\n    report_data = []\n\n    for product in product_list:\n        category = categories[random.randint(0, len(categories)-1)]\n        quantity_sold = random.randint(1, 100)\n        revenue = quantity_sold * random.randint(10, 100)\n        report_data.append([product, category, quantity_sold, revenue])\n\n    report_df = pd.DataFrame(report_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue'])\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    \n    categories = ['Electronics', 'Fashion', 'Home', 'Beauty', 'Sports']\n    products = ['Product ' + str(i) for i in range(1, 101)]\n    \n    def test_case_1(self):\n        random.seed(0)\n        report = task_func(self.products[:5], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 5)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_2(self):\n        random.seed(0)\n        report = task_func(self.products[5:10], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 5)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_3(self):\n        random.seed(0)\n        report = task_func([self.products[10]], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 1)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_4(self):\n        random.seed(0)\n        report = task_func(self.products[10:20], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 10)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_5(self):\n        random.seed(0)\n        report = task_func(self.products[20:40], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 20)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a CSV file into a pandas DataFrame and replace the NaN values in numeric columns with the mean of the corresponding column. The resulting DataFrame is returned. If an empty csv is passed, an empty DataFrame is returned.\nThe function should raise the exception for: FileNotFoundError: If csv_file does not exist.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with the processed data.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n```",
        "gt": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(data_dir: str, csv_file: str) -> pd.DataFrame:\n    file_path = os.path.join(data_dir, csv_file)\n    try:\n        df = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        return pd.DataFrame()\n\n    for column in df.columns:\n        if np.issubdtype(df[column].dtype, np.number):  # checking for numeric columns\n            df[column].fillna(df[column].mean(), inplace=True)\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nimport tempfile\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.folder_path = 'task_func_data'\n    def setUp(self):\n        # Create a temporary directory for test data\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove the temporary directory after the test\n        shutil.rmtree(self.test_dir)\n    def create_csv(self, filename, data):\n        # Helper method to create a CSV file\n        filepath = os.path.join(self.test_dir, filename)\n        data.to_csv(filepath, index=False)\n        return filename\n    def test_empty_csv(self):\n        # Test with an empty CSV file\n        filename = self.create_csv('empty.csv', pd.DataFrame())\n        result = task_func(self.test_dir, filename)\n        self.assertTrue(result.empty)\n    def test_numeric_columns_nan_replacement(self):\n        data = pd.DataFrame({\n            'Age': [25, np.nan, 30],\n            'Salary': [50000, 60000, np.nan]\n        })\n        filename = self.create_csv('data.csv', data)\n        expected = pd.DataFrame({\n            'Age': [25.0, 27.5, 30.0],  # Ensure all ages are floats\n            'Salary': [50000.0, 60000.0, 55000.0]  # Ensure all salaries are floats\n        })\n        result = task_func(self.test_dir, filename)\n        pd.testing.assert_frame_equal(result, expected)\n    def test_mixed_columns(self):\n        data = pd.DataFrame({\n            'Name': ['Alice', 'Bob', 'Charlie'],\n            'Score': [np.nan, 88, 92]\n        })\n        filename = self.create_csv('mixed.csv', data)\n        expected = pd.DataFrame({\n            'Name': ['Alice', 'Bob', 'Charlie'],\n            'Score': [90.0, 88.0, 92.0]  # Ensure all scores are floats\n        })\n        result = task_func(self.test_dir, filename)\n        pd.testing.assert_frame_equal(result, expected)\n    def test_all_nan_column(self):\n        # Test with a column that is entirely NaN\n        data = pd.DataFrame({\n            'Empty': [np.nan, np.nan, np.nan]\n        })\n        filename = self.create_csv('all_nan.csv', data)\n        result = task_func(self.test_dir, filename)\n        self.assertTrue(result['Empty'].isnull().all())\n    def test_no_numeric_data(self):\n        # Test a CSV file with no numeric data\n        data = pd.DataFrame({\n            'City': ['New York', 'Los Angeles', 'Chicago']\n        })\n        filename = self.create_csv('cities.csv', data)\n        result = task_func(self.test_dir, filename)\n        pd.testing.assert_frame_equal(result, data)\n    def test_file_not_found(self):\n        # Test the FileNotFoundError\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.test_dir, \"non_existent.csv\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform linear regression analysis with specified characteristics and targets. The function should merge two dataframes based on the 'id' column, perform linear regression using columns specified in features to predict the target, and plot the residuals.\nThe function should output with:\n    dict: A dictionary containing:\n    'coefficients': Regression coefficients (list).\n    'intercept': Regression intercept (float).\n    'residuals_plot': A matplotlib Axes object representing the residuals plot, with the title 'Residuals Plot', x-axis label 'Predicted Values', and y-axis label 'Residuals'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n```",
        "gt": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\ndef task_func(df1, df2, features=[\"feature1\", \"feature2\", \"feature3\"], target=\"target\"):\n    df = pd.merge(df1, df2, on=\"id\")\n    X = df[features]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    y_pred = model.predict(X)\n    residuals = y - y_pred\n    fig, ax = plt.subplots()\n    ax.scatter(y_pred, residuals)  # scatter plot of residuals\n    ax.axhline(y=0, color=\"r\", linestyle=\"-\")  # horizontal line at y=0\n    ax.set_xlabel(\"Predicted Values\")\n    ax.set_ylabel(\"Residuals\")\n    ax.set_title(\"Residuals Plot\")\n    return {\n        \"coefficients\": list(model.coef_),\n        \"intercept\": model.intercept_,\n        \"residuals_plot\": ax,\n    }",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nclass TestCases(unittest.TestCase):\n    # Setting up sample data for some test cases\n    def setUp(self):\n        self.df1_sample = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1, 2, 3],\n                \"feature2\": [1, 2, 3],\n                \"feature3\": [1, 2, 3],\n            }\n        )\n        self.df2_sample = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [6, 15, 24]})\n    def tearDown(self):\n        plt.close(\"all\")\n    # Test if the function returns the correct coefficients and intercept\n    def test_case_1(self):\n        result = task_func(self.df1_sample, self.df2_sample)\n        for coef_actual, coef_expected in zip(result[\"coefficients\"], [3.0, 3.0, 3.0]):\n            self.assertAlmostEqual(coef_actual, coef_expected, places=7)\n        self.assertAlmostEqual(result[\"intercept\"], -3.0, places=7)\n    # Test if the function returns the residuals plot\n    def test_case_2(self):\n        result = task_func(self.df1_sample, self.df2_sample)\n        self.assertTrue(isinstance(result[\"residuals_plot\"], plt.Axes))\n    # Test if the residuals plot contains the right number of data points\n    def test_case_3(self):\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [2, 4, 6],\n                \"feature2\": [2, 4, 6],\n                \"feature3\": [2, 4, 6],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [12, 30, 48]})\n        result = task_func(df1, df2)\n        self.assertEqual(len(result[\"residuals_plot\"].collections), 1)\n    # Test if the intercept of the model is correct\n    def test_case_4(self):\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1, 2, 3],\n                \"feature2\": [4, 5, 6],\n                \"feature3\": [7, 8, 9],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [10, 11, 12]})\n        result = task_func(df1, df2)\n        self.assertAlmostEqual(result[\"intercept\"], 6.0, places=7)\n    # Test the coefficients and intercept for a different set of data\n    def test_case_5(self):\n        result = task_func(self.df1_sample, self.df2_sample)\n        for coef_actual, coef_expected in zip(result[\"coefficients\"], [3.0, 3.0, 3.0]):\n            self.assertAlmostEqual(coef_actual, coef_expected, places=7)\n        self.assertAlmostEqual(result[\"intercept\"], -3.0, places=7)\n    # Test the coefficients and intercept against sklearn's LinearRegression for verification\n    def test_case_6(self):\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                \"feature1\": list(range(10)),\n                \"feature2\": list(range(10, 20)),\n                \"feature3\": list(range(20, 30)),\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"target\": list(range(30, 40))}\n        )\n        result = task_func(df1, df2)\n        model = LinearRegression().fit(\n            df1[[\"feature1\", \"feature2\", \"feature3\"]], df2[\"target\"]\n        )\n        expected_coefficients = model.coef_\n        expected_intercept = model.intercept_\n        self.assertListEqual(result[\"coefficients\"], list(expected_coefficients))\n        self.assertEqual(result[\"intercept\"], expected_intercept)\n    # Test the residuals plot's title and grid properties\n    def test_case_7(self):\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1, 2, 3],\n                \"feature2\": [4, 5, 6],\n                \"feature3\": [7, 8, 9],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [10, 11, 12]})\n        result = task_func(df1, df2)\n        self.assertEqual(result[\"residuals_plot\"].get_title(), \"Residuals Plot\")\n        self.assertTrue(result[\"residuals_plot\"].grid)\n        self.assertEqual(len(result[\"residuals_plot\"].lines), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Parses a list of time strings and plots a histogram of the seconds component.\nThe function should raise the exception for: ValueError: If any time string in 'time_strings' cannot be parsed according to 'time_format'.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes or None): An Axes object with the histogram plotted if\n    parsing is successful. Returns None if a parsing error occurs.\nYou should write self-contained code starting with:\n```\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n```",
        "gt": "import time\nimport matplotlib.pyplot as plt\ndef task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S.%f\"):\n    try:\n        seconds = [time.strptime(ts, time_format).tm_sec for ts in time_strings]\n        _, ax = plt.subplots()\n        ax.hist(seconds, bins=60, rwidth=0.8)\n        return ax\n    except ValueError as e:\n        print(f\"Error parsing time strings: {e}\")\n        return None",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_histogram_counts(self):\n        \"\"\"Test the counts in the histogram.\"\"\"\n        time_strings = [\n            \"30/03/2009 16:31:32.123\",\n            \"15/04/2010 14:25:46.789\",\n            \"20/12/2011 12:34:56.000\",\n        ]\n        ax = task_func(time_strings)\n        # Extract histogram data\n        n_values = [patch.get_height() for patch in ax.patches]\n        # Check the count of values in each bin\n        self.assertTrue(1 in n_values)\n    def test_histogram_title(self):\n        \"\"\"Test the title of the histogram.\"\"\"\n        time_strings = [\"30/03/2009 16:31:32.123\"]\n        ax = task_func(time_strings)\n        self.assertEqual(ax.get_title(), \"\")\n    def test_histogram_xaxis(self):\n        \"\"\"Test the x-axis label of the histogram.\"\"\"\n        time_strings = [\"30/03/2009 16:31:32.123\"]\n        ax = task_func(time_strings)\n        \n    def test_histogram_yaxis(self):\n        \"\"\"Test the y-axis label of the histogram.\"\"\"\n        time_strings = [\"30/03/2009 16:31:32.123\"]\n        ax = task_func(time_strings)\n        self.assertEqual(ax.get_ylabel(), \"\")\n    def test_large_input(self):\n        \"\"\"Test with a large input.\"\"\"\n        time_strings = [\"30/03/2009 16:31:32.123\"] * 50\n        ax = task_func(time_strings)\n        # Extract histogram data\n        n_values = [patch.get_height() for patch in ax.patches]\n        # Check the count of values in the specific bin corresponding to the seconds value \"32\"\n        self.assertTrue(50 in n_values)\n    def test_invalid_time_format(self):\n        \"\"\"Test with an invalid time format.\"\"\"\n        time_strings = [\"30/03/2009 16:31:32.123\"]\n        ax = task_func(time_strings, time_format=\"%d/%m/%Y %H:%M:%S\")\n        self.assertIsNone(ax)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Download and keep a zip file from a URL, extract its contents to the specified directory, and return the list of extracted files.\nThe function should output with:\n    list: A list of filenames of the extracted files.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n```",
        "gt": "import requests\nimport os\nimport zipfile\ndef task_func(url, destination_directory, headers=None):\n        \n    if headers is None:\n        headers = {\n            'accept': 'application/octet-stream'\n        }\n\n    response = requests.get(url, headers=headers)\n    filename = os.path.basename(url)\n    zip_path = os.path.join(destination_directory, filename)\n\n    with open(zip_path, 'wb') as f:\n        f.write(response.content)\n\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    extracted_files = os.listdir(destination_directory)\n\n    return extracted_files",
        "test": "import unittest\nimport os\nfrom unittest.mock import patch, MagicMock\nimport tempfile\nimport shutil\n# Mock data\nMOCK_URL = \"https://example.com/data.zip\"\nMOCK_DESTINATION_DIR = \"/path/to/destination\"\nMOCK_CONTENT = b\"mocked content\"\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    @patch('zipfile.ZipFile.extract')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    @patch('os.path.basename')\n    @patch('os.path.join')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open)\n    def test_download_and_extract(self, mock_open, mock_join, mock_basename, mock_listdir, mock_zipfile, mock_extract, mock_requests_get):\n        # Mock requests.get response\n        mock_response = MagicMock()\n        mock_response.content = MOCK_CONTENT\n        mock_requests_get.return_value = mock_response\n        # Mock other functions\n        mock_basename.return_value = \"data.zip\"\n        mock_zip_instance = MagicMock()\n        zip_contents = ['file1.txt', 'file2.csv']  # Files in the zip\n        mock_zip_instance.namelist.return_value = zip_contents\n        mock_zipfile.return_value.__enter__.return_value = mock_zip_instance\n        # Call the function\n        extracted_files = task_func(MOCK_URL, MOCK_DESTINATION_DIR)\n        # Assertions\n        mock_requests_get.assert_called_once_with(MOCK_URL, headers={'accept': 'application/octet-stream'})\n        mock_open.assert_called_once_with(os.path.join(MOCK_DESTINATION_DIR, 'data.zip'), 'wb')\n        self.assertEqual(zip_contents, mock_zip_instance.namelist())\n    @patch('requests.get')\n    @patch('zipfile.ZipFile.extract')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    @patch('os.path.basename')\n    @patch('os.path.join')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open)\n    def test_2(self, mock_open, mock_join, mock_basename, mock_listdir, mock_zipfile, mock_extract, mock_requests_get):\n        # Mock requests.get response\n        mock_response = MagicMock()\n        mock_response.content = MOCK_CONTENT\n        mock_requests_get.return_value = mock_response\n        # Mock other functions\n        mock_basename.return_value = \"data.zip\"\n        mock_zip_instance = MagicMock()\n        zip_contents = ['file1.txt', 'file2.csv', 'file3.td']\n        mock_zip_instance.namelist.return_value = zip_contents\n        mock_zipfile.return_value.__enter__.return_value = mock_zip_instance\n        # Call the function\n        extracted_files = task_func(MOCK_URL, MOCK_DESTINATION_DIR)\n        # Assertions\n        mock_requests_get.assert_called_once_with(MOCK_URL, headers={'accept': 'application/octet-stream'})\n        mock_open.assert_called_once_with(os.path.join(MOCK_DESTINATION_DIR, 'data.zip'), 'wb')\n        self.assertEqual(zip_contents, mock_zip_instance.namelist())\n    @patch('requests.get')\n    @patch('zipfile.ZipFile.extract')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    @patch('os.path.basename')\n    @patch('os.path.join')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open)\n    def test_3(self, mock_open, mock_join, mock_basename, mock_listdir, mock_zipfile, mock_extract, mock_requests_get):\n        # Mock requests.get response\n        mock_response = MagicMock()\n        mock_response.content = MOCK_CONTENT\n        mock_requests_get.return_value = mock_response\n        # Mock other functions\n        mock_basename.return_value = \"data.zip\"\n        mock_zip_instance = MagicMock()\n        zip_contents = ['file1.txt']\n        mock_zip_instance.namelist.return_value = zip_contents\n        mock_zipfile.return_value.__enter__.return_value = mock_zip_instance\n        # Call the function\n        extracted_files = task_func(MOCK_URL, MOCK_DESTINATION_DIR)\n        # Assertions\n        mock_requests_get.assert_called_once_with(MOCK_URL, headers={'accept': 'application/octet-stream'})\n        mock_open.assert_called_once_with(os.path.join(MOCK_DESTINATION_DIR, 'data.zip'), 'wb')\n        self.assertEqual(zip_contents, mock_zip_instance.namelist())\n    @patch('requests.get')\n    @patch('zipfile.ZipFile.extract')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    @patch('os.path.basename')\n    @patch('os.path.join')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open)\n    def test_4(self, mock_open, mock_join, mock_basename, mock_listdir, mock_zipfile, mock_extract, mock_requests_get):\n        # Mock requests.get response\n        mock_response = MagicMock()\n        mock_response.content = MOCK_CONTENT\n        mock_requests_get.return_value = mock_response\n        # Mock other functions\n        mock_basename.return_value = \"data_download.zip\"\n        mock_zip_instance = MagicMock()\n        zip_contents = ['file1.txt', 'file2.xlsx']\n        mock_zip_instance.namelist.return_value = zip_contents\n        mock_zipfile.return_value.__enter__.return_value = mock_zip_instance\n        # Call the function\n        extracted_files = task_func(MOCK_URL, MOCK_DESTINATION_DIR)\n        # Assertions\n        mock_requests_get.assert_called_once_with(MOCK_URL, headers={'accept': 'application/octet-stream'})\n        mock_open.assert_called_once_with(os.path.join(MOCK_DESTINATION_DIR, 'data_download.zip'), 'wb')\n        self.assertEqual(zip_contents, mock_zip_instance.namelist())\n    @patch('requests.get')\n    @patch('zipfile.ZipFile.extract')\n    @patch('zipfile.ZipFile')\n    @patch('os.listdir')\n    @patch('os.path.basename')\n    @patch('os.path.join')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open)\n    def test_5(self, mock_open, mock_join, mock_basename, mock_listdir, mock_zipfile, mock_extract, mock_requests_get):\n        # Mock requests.get response\n        mock_response = MagicMock()\n        mock_response.content = MOCK_CONTENT\n        mock_requests_get.return_value = mock_response\n        # Mock other functions\n        mock_basename.return_value = \"data_download.zip\"\n        mock_zip_instance = MagicMock()\n        zip_contents = []\n        mock_zip_instance.namelist.return_value = zip_contents\n        mock_zipfile.return_value.__enter__.return_value = mock_zip_instance\n        # Call the function\n        extracted_files = task_func(MOCK_URL, MOCK_DESTINATION_DIR)\n        # Assertions\n        mock_requests_get.assert_called_once_with(MOCK_URL, headers={'accept': 'application/octet-stream'})\n        mock_open.assert_called_once_with(os.path.join(MOCK_DESTINATION_DIR, 'data_download.zip'), 'wb')\n        self.assertEqual(zip_contents, mock_zip_instance.namelist())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save the list of random strings \"Strings\" in a pickle file and then read it back for validation. If a filename is not provided, a unique filename is generated.\nThe function should output with:\n    loaded_strings (list): The loaded list of strings from the pickle file.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n```",
        "gt": "import pickle\nimport os\nimport random\nimport string\ndef task_func(strings, filename=None):\n\n    if filename is None:\n        # Generate a unique filename using a random string\n        filename = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10)) + \".pkl\"\n\n    with open(filename, 'wb') as file:\n        pickle.dump(strings, file)\n    \n    with open(filename, 'rb') as file:\n        loaded_strings = pickle.load(file)\n\n    os.remove(filename)\n\n    return loaded_strings",
        "test": "import unittest\nimport string\nimport random\n# Import the refined function\nclass TestCases(unittest.TestCase):\n    def test_default_filename(self):\n        # Test with default filename generation\n        strings = [''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10)) for _ in range(10)]\n        loaded_strings = task_func(strings)\n        self.assertEqual(strings, loaded_strings, \"The loaded strings should match the input strings.\")\n    def test_custom_filename(self):\n        # Test with a custom filename\n        strings = [''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(5)) for _ in range(5)]\n        filename = \"custom_filename.pkl\"\n        loaded_strings = task_func(strings, filename)\n        self.assertEqual(strings, loaded_strings, \"The loaded strings should match the input strings.\")\n    def test_empty_list(self):\n        # Test with an empty list of strings\n        strings = []\n        loaded_strings = task_func(strings)\n        self.assertEqual(strings, loaded_strings, \"The loaded strings should match the input strings.\")\n    def test_large_list(self):\n        # Test with a large list of strings\n        strings = [''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(100)) for _ in range(1000)]\n        loaded_strings = task_func(strings)\n        self.assertEqual(strings, loaded_strings, \"The loaded strings should match the input strings.\")\n    def test_special_characters(self):\n        # Test with strings containing special characters\n        strings = [''.join(random.choice(string.ascii_uppercase + string.digits + string.punctuation) for _ in range(15)) for _ in range(15)]\n        loaded_strings = task_func(strings)\n        self.assertEqual(strings, loaded_strings, \"The loaded strings should match the input strings.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Faced with a nested list of menu items, flatten the list and return the most common menu item.\nThe function should output with:\n    str: The most common menu item.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n```",
        "gt": "from collections import Counter\nimport itertools\nimport operator\ndef task_func(list_of_menuitems):\n    flat_list = list(itertools.chain(*list_of_menuitems))\n\n    counter = Counter(flat_list)\n\n    return max(counter.items(), key=operator.itemgetter(1))[0]",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Description: Testing with a list where 'Pizza' appears more frequently than other items.\n        input_data = [['Pizza', 'Burger'], ['Pizza', 'Coke'], ['Pasta', 'Coke']]\n        output = task_func(input_data)\n        self.assertEqual(output, 'Pizza')\n    \n    def test_case_2(self):\n        # Description: Testing with a list where 'Burger' appears more frequently than other items.\n        input_data = [['Burger', 'Burger'], ['Pizza', 'Coke'], ['Pasta', 'Coke']]\n        output = task_func(input_data)\n        self.assertEqual(output, 'Burger')\n    \n    def test_case_3(self):\n        # Description: Testing with a list where 'Pasta' appears more frequently than other items.\n        input_data = [['Pasta', 'Pasta'], ['Pasta', 'Coke'], ['Pizza', 'Coke']]\n        output = task_func(input_data)\n        self.assertEqual(output, 'Pasta')\n    \n    def test_case_4(self):\n        # Description: Testing with a list where 'Sushi' appears more frequently than other items.\n        input_data = [['Sushi'], ['Sushi', 'Coke'], ['Pizza', 'Coke']]\n        output = task_func(input_data)\n        self.assertEqual(output, 'Sushi')\n    \n    def test_case_5(self):\n        # Description: Testing with a list where 'Salad' appears more frequently than other items.\n        input_data = [['Salad'], ['Salad', 'Coke'], ['Pizza', 'Coke'], ['Salad', 'Burger']]\n        output = task_func(input_data)\n        self.assertEqual(output, 'Salad')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate mean, sum, max, min and standard deviation for the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d.\"\nThe function should raise the exception for: ValueError: If input is not a list of dictionaries.\nThe function should output with:\n    dict: A dictionary with keys as 'x', 'y', and 'z' and values as dictionaries of statistics.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(d):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(d):\n    if not isinstance(d, list) or any(not isinstance(item, dict) for item in d):\n        raise ValueError(\"Input must be a list of dictionaries.\")\n    \n    if not d:\n        return {key: None for key in ['x', 'y', 'z']}\n\n    df = pd.DataFrame(d).fillna(0)  # Replace missing values with 0 to allow computations\n    stats = {}\n\n    for key in ['x', 'y', 'z']:\n        if key in df.columns:\n            stats[key] = {\n                'mean': np.mean(df[key]),\n                'sum': np.sum(df[key]),\n                'max': np.max(df[key]),\n                'min': np.min(df[key]),\n                'std': np.std(df[key], ddof=0)  # Population standard deviation\n            }\n        else:\n            stats[key] = None\n\n    return stats",
        "test": "# Test suite\nimport unittest\nclass TestCases(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(task_func([]), {'x': None, 'y': None, 'z': None})\n    def test_valid_input(self):\n        data = [{'x': 1, 'y': 10, 'z': 5}, {'x': 3, 'y': 15, 'z': 6}, {'x': 2, 'y': 1, 'z': 7}]\n        result = task_func(data)\n        self.assertAlmostEqual(result['x']['mean'], 2.0)\n        self.assertAlmostEqual(result['y']['mean'], 8.666666666666666)\n        self.assertAlmostEqual(result['z']['mean'], 6.0)\n    def test_invalid_input_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a list\")\n    def test_partial_keys(self):\n        data = [{'x': 1, 'y': 2}, {'y': 3, 'z': 4}]\n        result = task_func(data)\n        self.assertIsNotNone(result['x'])\n        self.assertIsNotNone(result['y'])\n        self.assertIsNotNone(result['z'])\n    def test_all_keys_missing(self):\n        data = [{'a': 1}, {'b': 2}]\n        self.assertEqual(task_func(data), {'x': None, 'y': None, 'z': None})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a JSON file into a Pandas DataFrame, remove a specific key from each object and write the processed DataFrame back into a JSON file oriented by records.\nThe function should output with:\n    df (DataFrame): A pandas DataFrame representation of the processed JSON data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\ndef task_func(file_path, key):\n```",
        "gt": "import pandas as pd\nimport json\ndef task_func(file_path, key):\n    with open(file_path, 'r') as file:\n        data = json.load(file)\n\n    df = pd.DataFrame(data)\n    df.drop(key, axis=1, inplace=True)\n\n    with open(file_path, 'w') as file:\n        file.write(df.to_json(orient='records'))\n\n    return df",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def base(self, json_path, key, contents):\n        # Create JSON file\n        with open(json_path, 'w') as file:\n            json.dump(contents, file)\n        # Run function\n        df = task_func(json_path, key)\n        # Check key is removed\n        self.assertFalse(key in df.columns)\n        # Check JSON file is updated\n        with open(json_path, 'r') as file:\n            data = json.load(file)\n        self.assertFalse(key in data[0])\n        # Remove JSON file\n        os.remove(json_path)\n    def test_case_1(self):\n        self.base('data.json', 'ele', [{'ele': 1, 'a': 2}, {'ele': 3, 'a': 4}])\n    def test_case_2(self):\n        self.base('data.json', 'ele', [{'ele': 1, 'a': 2}, {'ele': 3, 'a': 4}, {'ele': 5, 'a': 6}])\n    def test_case_3(self):\n        self.base('x.json', 'zzz', [{'zzz': 1, 'a': 2}, {'zzz': 3, 'a': 4}])\n    def test_case_4(self):\n        self.base('g.json', 'ele', [{'ele': 1, 'a': 2}, {'ele': 3, 'a': 4}])\n    def test_case_5(self):\n        self.base('data.json', 'ele', [{'ele': 1, 'a': 2}, {'ele': 3, 'a': 4}])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a dictionary containing all possible two-letter combinations of the lowercase English alphabets. The dictionary values represent the frequency of these two-letter combinations in the given word. If a combination does not appear in the word, its value will be 0.\nThe function should output with:\n    dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in the word.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n```",
        "gt": "from collections import Counter\nimport itertools\nimport string\ndef task_func(word: str) -> dict:\n    ALPHABETS = string.ascii_lowercase\n    # Generate all two-letter combinations of alphabets\n    permutations = [''.join(x) for x in itertools.permutations(ALPHABETS, 2)]\n    combinations = permutations + [x*2 for x in ALPHABETS]\n    \n    # Generate all two-letter combinations in the word\n    word_combinations = [''.join(x) for x in zip(word, word[1:])]\n    # Count the occurrences of each two-letter combination in the word\n    word_counter = Counter(word_combinations)\n\n    # Create the dictionary with the counts\n    return {key: word_counter.get(key, 0) for key in combinations}",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('abcdef')\n        self.assertEqual(result['ab'], 1)\n        self.assertEqual(result['ac'], 0)\n        self.assertEqual(result['bc'], 1)\n        self.assertEqual(result['cb'], 0)\n        self.assertEqual(result['zz'], 0)\n        \n    def test_case_2(self):\n        result = task_func('aabbcc')\n        self.assertEqual(result['aa'], 1)\n        self.assertEqual(result['ab'], 1)\n        self.assertEqual(result['ba'], 0)\n        self.assertEqual(result['bb'], 1)\n        self.assertEqual(result['bc'], 1)\n        \n    def test_case_3(self):\n        result = task_func('fedcba')\n        self.assertEqual(result['fe'], 1)\n        self.assertEqual(result['ef'], 0)\n        self.assertEqual(result['dc'], 1)\n        self.assertEqual(result['ba'], 1)\n        self.assertEqual(result['zz'], 0)\n    def test_case_4(self):\n        result = task_func('cadbfe')\n        self.assertEqual(result['ca'], 1)\n        self.assertEqual(result['ad'], 1)\n        self.assertEqual(result['db'], 1)\n        self.assertEqual(result['fe'], 1)\n        self.assertEqual(result['zz'], 0)\n    def test_case_5(self):\n        result = task_func('')\n        self.assertEqual(result['ab'], 0)\n        self.assertEqual(result['zz'], 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random dataset of floating-point numbers within a specified range, truncate each value to 3 decimal places, and calculate statistical measures (mean, median, mode) of the data.\nThe function should output with:\n    dict: A dictionary with keys 'mean', 'median', 'mode' and their corresponding calculated values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n```",
        "gt": "import pandas as pd\nimport random\nfrom scipy import stats\ndef task_func(n_data_points=5000, min_value=0.0, max_value=10.0):\n\n    data = [round(random.uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    mean = data_df['Value'].mean()\n    median = data_df['Value'].median()\n    mode = stats.mode(data_df['Value'].values)[0][0]\n\n    return {'mean': mean, 'median': median, 'mode': mode}",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        random.seed(0)\n        result = task_func()\n        self.assertIn('mean', result)\n        self.assertIn('median', result)\n        self.assertIn('mode', result)\n    def test_custom_range(self):\n        random.seed(0)\n        result = task_func(1000, 1.0, 5.0)\n        self.assertGreaterEqual(result['mean'], 1.0)\n        self.assertLessEqual(result['mean'], 5.0)\n        self.assertGreaterEqual(result['median'], 1.0)\n        self.assertLessEqual(result['median'], 5.0)\n        self.assertGreaterEqual(result['mode'], 1.0)\n        self.assertLessEqual(result['mode'], 5.0)\n    def test_small_dataset(self):\n        random.seed(0)\n        result = task_func(10, 2.0, 2.0)\n        self.assertEqual(result['mean'], 2.0)\n        self.assertEqual(result['median'], 2.0)\n        self.assertEqual(result['mode'], 2.0)\n    def test_large_dataset(self):\n        random.seed(0)\n        result = task_func(10000, 0.0, 100.0)\n        self.assertTrue(0.0 <= result['mean'] <= 100.0)\n        self.assertTrue(0.0 <= result['median'] <= 100.0)\n        self.assertTrue(0.0 <= result['mode'] <= 100.0)\n    def test_single_value_range(self):\n        random.seed(0)\n        result = task_func(100, 5.0, 5.0)\n        self.assertEqual(result['mean'], 5.0)\n        self.assertEqual(result['median'], 5.0)\n        self.assertEqual(result['mode'], 5.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a ZIP file response for a Django HttpRequest, zipping the specified files. This function is useful for scenarios where multiple file downloads are required in response to a web request. The actual HttpRequest is not utilized within the function but is required for compatibility with Django view structures.\nThe function should output with:\n    FileResponse: A Django FileResponse object containing the ZIP file as an attachment.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\ndef task_func(request, file_paths):\n```",
        "gt": "import zipfile\nimport io\nfrom django.http import FileResponse, HttpRequest\nfrom django.conf import settings\ndef task_func(request, file_paths):\n    zip_io = io.BytesIO()\n\n    with zipfile.ZipFile(zip_io, 'w') as zip_file:\n        for file_path in file_paths:\n            zip_file.writestr(file_path, 'This is the content of {}.'.format(file_path))\n\n    zip_io.seek(0)  # Reset the file pointer to the start of the stream\n    response = FileResponse(zip_io, as_attachment=True, filename='files.zip')\n    response['Content-Type'] = 'application/zip'\n\n    return response",
        "test": "import unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.http import HttpRequest, FileResponse\nif not settings.configured:\n    settings.configure()\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.request = HttpRequest()\n        self.file_paths = ['file1.gz', 'file2.gz']  # Example file paths for testing\n    def test_response_type(self):\n        \"\"\"Ensure the response is an instance of FileResponse.\"\"\"\n        response = task_func(self.request, self.file_paths)\n        self.assertIsInstance(response, FileResponse)\n    def test_response_status_code(self):\n        \"\"\"Response should have a status code of 200.\"\"\"\n        response = task_func(self.request, self.file_paths)\n        self.assertEqual(response.status_code, 200)\n    def test_content_type(self):\n        \"\"\"Content type of the response should be set to 'application/zip'.\"\"\"\n        response = task_func(self.request, self.file_paths)\n        self.assertEqual(response['Content-Type'], 'application/zip')\n    def test_attachment_filename(self):\n        \"\"\"The Content-Disposition should correctly specify the attachment filename.\"\"\"\n        response = task_func(self.request, self.file_paths)\n        self.assertEqual(response['Content-Disposition'], 'attachment; filename=\"files.zip\"')\n    @patch('zipfile.ZipFile')\n    def test_zip_file_content(self, mock_zip_file):\n        \"\"\"Zip file should contain the specified files with correct content.\"\"\"\n        mock_zip = MagicMock()\n        mock_zip_file.return_value.__enter__.return_value = mock_zip\n        task_func(self.request, self.file_paths)\n        mock_zip.writestr.assert_any_call('file1.gz', 'This is the content of file1.gz.')\n        mock_zip.writestr.assert_any_call('file2.gz', 'This is the content of file2.gz.')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mode of all elements in a nested list 'L'.\nThe function should output with:\n    mode (int): The mode.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(L):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\ndef task_func(L):\n    flattened = np.hstack(L)  \n    mode = stats.mode(flattened)[0][0]\n    return mode",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_1(self):\n        result = task_func([[1, 2, 3], [4, 5, 6]])\n        expected = 1\n        self.assertEqual(result, expected)\n    \n    def test_2(self):\n        result = task_func([[1, 2, 3], [4, 5, 6, 6]])\n        expected = 6\n        self.assertEqual(result, expected)\n        \n    def test_3(self):\n        result = task_func([[1, 1, 2, 2], [3, 4, 5]])\n        expected = 1\n        self.assertEqual(result, expected)\n    \n    def test_4(self):\n        result = task_func([[1, 1, 2, 2]])\n        expected = 1\n        self.assertEqual(result, expected)\n    \n    def test_5(self):\n        result = task_func([[-1, -1, -2, -3], [0, 1, 2, 3]])\n        expected = -1\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a list of dictionaries from a JSON file, calculate the results (mean and median for each key) via numpy, convert the input data into a pandas DataFrame with the keys as \"X\" and values as \"Y\" for visualization with a seaborn box plot, then return the results and box plot.\nThe function should output with:\n    results (dict): Dictionary where each key is a unique key from the original input, and each\n    value is a corresponding dict, with keys 'mean' and 'median' and the statistics\n    as values.\n    ax (plt.Axes): The box plot of aggregated 'Values for Each Key' in the input data.\nYou should write self-contained code starting with:\n```\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> plt.Axes:\n```",
        "gt": "import json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file: str) -> plt.Axes:\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    results = {\n        k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()\n    }\n\n    data = pd.DataFrame(data).melt(var_name=\"X\", value_name=\"Y\")\n    ax = sns.boxplot(data=data, x=\"X\", y=\"Y\")\n    ax.set_title(\"Boxplot of Values for Each Key\")\n    return results, ax",
        "test": "import unittest\nimport os\nimport tempfile\nimport matplotlib.pyplot as plt\nimport json\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a temporary directory and write sample JSON data to a temp file\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.sample_data_file = os.path.join(self.temp_dir.name, \"sample_data.json\")\n        self.sample_data = [\n            {\"A\": 10, \"B\": 20, \"C\": 30},\n            {\"A\": 15, \"B\": 25, \"C\": 35},\n            {\"A\": 20, \"B\": 30, \"C\": 40},\n        ]\n        with open(self.sample_data_file, \"w\") as f:\n            json.dump(self.sample_data, f)\n        # Create an invalid JSON file for testing\n        self.invalid_json_file = os.path.join(self.temp_dir.name, \"invalid.json\")\n        with open(self.invalid_json_file, \"w\") as f:\n            f.write(\"invalid content\")\n    def tearDown(self):\n        self.temp_dir.cleanup()\n        plt.close(\"all\")\n    def test_case_1(self):\n        # Test if the function can read the JSON data file and return a plot\n        _, ax = task_func(self.sample_data_file)\n        self.assertIsInstance(ax, plt.Axes, \"The function should return a plot (Axes).\")\n        self.assertTrue(len(ax.get_xticks()) > 0, \"The plot should have x-axis ticks.\")\n        self.assertTrue(len(ax.get_yticks()) > 0, \"The plot should have y-axis ticks.\")\n        self.assertTrue(ax.get_title(), \"Boxplot of Values for Each Key\")\n    def test_case_2(self):\n        # Check result correctness\n        results, _ = task_func(self.sample_data_file)\n        self.assertIn(\"A\", results)\n        self.assertIn(\"B\", results)\n        self.assertIn(\"C\", results)\n        self.assertEqual(results[\"A\"][\"mean\"], 15.0)\n        self.assertEqual(results[\"A\"][\"median\"], 15.0)\n        self.assertEqual(results[\"B\"][\"mean\"], 25.0)\n        self.assertEqual(results[\"B\"][\"median\"], 25.0)\n        self.assertEqual(results[\"C\"][\"mean\"], 35.0)\n        self.assertEqual(results[\"C\"][\"median\"], 35.0)\n    def test_case_3(self):\n        # Test the correctness of the x-axis labels\n        _, ax = task_func(self.sample_data_file)\n        x_labels = [label.get_text() for label in ax.get_xticklabels()]\n        expected_x_labels = [\"A\", \"B\", \"C\"]\n        self.assertListEqual(\n            x_labels, expected_x_labels, \"The x-axis labels are not as expected.\"\n        )\n    def test_case_4(self):\n        # Test the correctness of the y-axis data points\n        _, ax = task_func(self.sample_data_file)\n        # Correctly extract the height of the boxes in the box plot\n        boxes = [\n            box.get_height() for box in ax.containers if hasattr(box, \"get_height\")\n        ]\n        self.assertTrue(\n            all(height > 0 for height in boxes),\n            \"Each box plot should have y-data points.\",\n        )\n    def test_case_5(self):\n        # Test if the function raises an error for non-existent file\n        with self.assertRaises(FileNotFoundError):\n            task_func(os.path.join(self.temp_dir.name, \"non_existent.json\"))\n    def test_case_6(self):\n        # Test if the function raises an error for invalid JSON format\n        with self.assertRaises(json.JSONDecodeError):\n            task_func(os.path.join(self.temp_dir.name, \"invalid.json\"))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function filters rows from the input DataFrame 'df' based on conditions in columns 'B' and 'C', then uses linear regression to predict values in column 'B' using data from column 'A'. Specifically, it selects rows where column 'B' values are greater than 50 and column 'C' values equal 900. A train test split of the remaining data is performed, where the test_size = 0.2 and col_a is used as X value and col_b is used as Y values / target. This data is used to train a LinearRegression model. The test split is used to generate predictions for col_b. These predictions are returned as well as the trained model. If df is empty or empty after the filtering, None is returned. If df does contain non numeric data None is returned. If the specified columns are not contained in df, None is returned. >>> df = pd.DataFrame({'A': [1, 2, 3, 4, 5], ...                    'B': [10, 80, 80, 80, 80], ...                    'C': [900, 900, 900, 900, 900]}) >>> predictions, model = task_func(df, seed=12) >>> print(predictions) [80.] >>> print(model) LinearRegression()\nThe function should output with:\n    ndarray: The predicted values for the filtered rows in column 'B', or None if input is invalid.\n    LinearRegression: The trained linear regression model is returned, if\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, col_a='A', col_b='B', col_c='C', seed=None):\n    # Validating the input dataframe\n    if df.empty or not all(col in df for col in [col_a, col_b, col_c]):\n        return None  # Invalid input scenario\n    \n    try:\n        # Ensuring the columns contain numeric data\n        df[[col_a, col_b, col_c]] = df[[col_a, col_b, col_c]].apply(pd.to_numeric, errors='raise')\n    except ValueError:\n        return None  # Non-numeric data encountered\n\n    # Filtering the data based on the conditions\n    selected = df[(df[col_b] > 50) & (df[col_c] == 900)][[col_a, col_b]]\n\n    if selected.empty:\n        return None\n    \n    # Preparing the data for linear regression\n    X_train, X_test, y_train, _ = train_test_split(selected[col_a].values.reshape(-1, 1),\n                                                   selected[col_b].values,\n                                                   test_size=0.2,\n                                                   random_state=seed)\n\n    # Applying linear regression\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n\n    return predictions, model",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)  # Set a seed for reproducibility\n    def test_normal_case(self):\n        # Test with a normal DataFrame\n        df = pd.DataFrame({'A': np.random.randint(0, 100, 100),\n                           'B': np.random.randint(0, 100, 100),\n                           'C': np.random.choice([900, 800], 100)})\n        predictions, model = task_func(df, seed=12)\n        self.assertIsInstance(model, LinearRegression)\n        np.testing.assert_almost_equal(predictions, np.array([73.84, 73.74, 73.02, 73.32, 72.66]), decimal=2)\n    def test_empty_dataframe(self):\n        # Test with an empty DataFrame\n        df = pd.DataFrame()\n        predictions = task_func(df)\n        self.assertIsNone(predictions)\n    def test_missing_columns(self):\n        # Test with a DataFrame missing one or more columns\n        df = pd.DataFrame({'A': np.random.randint(0, 100, 100),\n                           'C': np.random.choice([900, 800], 100)})\n        predictions = task_func(df)\n        self.assertIsNone(predictions)\n    def test_non_numeric_data(self):\n        # Test with non-numeric data\n        df = pd.DataFrame({'A': ['a', 'b', 'c'],\n                           'B': [1, 2, 3],\n                           'C': [900, 900, 900]})\n        predictions = task_func(df)\n        self.assertIsNone(predictions)\n    def test_no_rows_matching_criteria(self):\n        # Test with no rows matching the criteria\n        df = pd.DataFrame({'A': np.random.randint(0, 100, 100),\n                           'B': np.random.randint(0, 50, 100),  # B values are always < 50\n                           'C': np.random.choice([800, 700], 100)})  # C values are never 900\n        predictions = task_func(df)\n        self.assertIsNone(predictions)\n    def test_large_dataset_performance(self):\n        # Test with a very large DataFrame (performance test)\n        df = pd.DataFrame({'test': np.random.randint(0, 100, 10000),\n                           'hi': np.random.randint(0, 100, 10000),\n                           'hello': np.random.choice([900, 800], 10000)})\n        predictions, model = task_func(df, col_a='test', col_b='hi', col_c='hello')\n        self.assertIsInstance(model, LinearRegression)\n        self.assertIsNotNone(predictions)\n        self.assertEqual(len(predictions), 500)\n    def test_single_value_column(self):\n        # Test with a DataFrame where one column has the same value\n        df = pd.DataFrame({'A': [50] * 100,\n                           'B': np.random.randint(50, 100, 100),\n                           'C': [900] * 100})\n        predictions, model = task_func(df, seed=1)\n        self.assertIsInstance(model, LinearRegression)\n        np.testing.assert_almost_equal(\n            predictions,\n            np.array([73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61, 73.61]),\n            decimal=2\n            )\n    def test_specific_return_values(self):\n        # Test with known data to check specific return values\n        df = pd.DataFrame({'A': [10, 20, 30, 40, 50],\n                           'B': [60, 70, 80, 90, 100],\n                           'C': [900, 900, 900, 900, 900]})\n        predictions, model = task_func(df, seed=100)\n        # Since the data is linear and simple, the model should predict close to the actual values\n        expected_predictions = np.array([70])  # Assuming a perfect model\n        np.testing.assert_almost_equal(predictions, expected_predictions)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Randomly select one of the provided csv_files and select a certain number of records from the file at random. The selected records are returned in a DataFrame. The name of the selected csv_file is also returned. If the csv_file is empty return an empty DataFrame.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    str: The name of the randomly selected file.\n    DataFrame: A pandas DataFrame with the selected rows.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\nimport pandas as pd\ndef task_func(data_dir,\n          csv_files=['file1.csv', 'file2.csv', 'file3.csv'],\n          seed=None):\n```",
        "gt": "import os\nimport random\nimport pandas as pd\ndef task_func(data_dir,\n          csv_files=['file1.csv', 'file2.csv', 'file3.csv'],\n          seed=None):\n\n    random.seed(seed)\n\n    file = csv_files[random.randint(0, len(csv_files) - 1)]\n    file_path = os.path.join(data_dir, file)\n\n    try:\n        df = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        return file, pd.DataFrame()\n\n    selected_rows = df.sample(n=random.randint(1, len(df)), random_state=seed)\n\n    return file, selected_rows",
        "test": "import unittest\nimport pandas as pd\nimport os\nimport tempfile\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory\n        self.test_dir = tempfile.mkdtemp()\n        self.test_files = [\n            'file1.csv', 'file2.csv', 'file3.csv', 'file4.csv', 'file5.csv', 'empty.csv'\n        ]\n        # Sample data for CSV files\n        data = {\n            'file1.csv': pd.DataFrame({'Name': ['Alice', 'Bob'], 'Age': [25, 30]}),\n            'file2.csv': pd.DataFrame({'Name': ['Chris', 'Dana'], 'Age': [35, 40]}),\n            'file3.csv': pd.DataFrame({'Name': ['Eve', 'Frank'], 'Age': [45, 50]}),\n            'file4.csv': pd.DataFrame({'Name': ['Grace', 'Hank'], 'Age': [55, 60]}),\n            'file5.csv': pd.DataFrame({'Name': ['Ivan', 'Julia'], 'Age': [65, 70]}),\n            'empty.csv': pd.DataFrame()\n        }\n        # Create CSV files in the directory\n        for file_name, df in data.items():\n            df.to_csv(os.path.join(self.test_dir, file_name), index=False)\n    def tearDown(self):\n        # Remove the directory after the test\n        shutil.rmtree(self.test_dir)\n    def test_random_selection(self):\n        # Testing random selection and ensuring the file chosen and its data are correct\n        file_name, df = task_func(self.test_dir, seed=42)\n        self.assertTrue(file_name in self.test_files)\n        self.assertFalse(df.empty)\n    def test_specific_file_selection(self):\n        # Test selecting a specific file and checking contents\n        file_name, df = task_func(self.test_dir, ['file1.csv'], seed=42)\n        expected = pd.read_csv(os.path.join(self.test_dir, 'file1.csv'))\n        # Sample from expected and reset index\n        expected_sampled = expected.sample(len(df), random_state=42).reset_index(drop=True)\n        # Reset index of df to ensure indices match\n        df_reset = df.reset_index(drop=True)\n        # Assert frame equality\n        pd.testing.assert_frame_equal(df_reset, expected_sampled)\n    def test_empty_file(self):\n        # Ensure an empty file returns an empty DataFrame\n        file_name, df = task_func(self.test_dir, ['empty.csv'], seed=42)\n        self.assertEqual(file_name, 'empty.csv')\n        self.assertTrue(df.empty)\n    def test_multiple_files(self):\n        # Testing selection from multiple files\n        file_name, df = task_func(self.test_dir, ['file3.csv', 'file4.csv'], seed=24)\n        self.assertIn(file_name, ['file3.csv', 'file4.csv'])\n        self.assertFalse(df.empty)\n    def test_no_file_matches(self):\n        # Testing behavior when no files match the list\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.test_dir, ['nonexistent.csv'], seed=42)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load e-mail data from an SQLite database and convert it into a Pandas DataFrame. Calculate the sum, mean, and variance of the list associated with each e-mail and then record these values. - The function expects the SQLite database to have a table named \"EmailData\" with columns 'email' and 'list'. - The column 'list' contains a string representation of the list. It should be converted before usage. - The function will return a DataFrame with additional columns 'sum', 'mean', and 'var' representing the calculated sum, mean, and variance respectively for each e-mail.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with email data including the calculated sum, mean, and variance.\n    Axes: A matplotlib Axes object representing the plotted bar chart of sum, mean, and variance.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n```",
        "gt": "import pandas as pd\nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ast\ndef task_func(db_file):\n    conn = sqlite3.connect(db_file)\n    df = pd.read_sql_query(\"SELECT * FROM EmailData\", conn)\n    df[\"list\"] = df[\"list\"].map(ast.literal_eval)\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['var'] = df['list'].apply(np.var)\n\n    ax = df[['sum', 'mean', 'var']].plot(kind='bar')\n    plt.show()\n\n    return df, ax",
        "test": "import os\nimport shutil\nfrom pathlib import Path\nimport unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.db_1 = os.path.join(self.test_dir, \"db_1.db\")\n        if not os.path.exists(self.db_1) :\n            Path(self.db_1).touch()\n            conn = sqlite3.connect(self.db_1)\n            c = conn.cursor()\n            c.execute('''CREATE TABLE EmailData (email text, list text)''')\n            df = pd.DataFrame(\n                {\n                    \"email\" : [\"first@example.com\", \"second@example.com\", \"third@example.com\"],\n                    \"list\" : [\"[12, 17, 29, 45, 7, 3]\", \"[1, 1, 3, 73, 21, 19, 12]\", \"[91, 23, 7, 14, 66]\"]\n                }\n            )\n            df.to_sql('EmailData', conn, if_exists='append', index = False)\n        self.db_2 = os.path.join(self.test_dir, \"db_2.db\")\n        if not os.path.exists(self.db_2) :\n            Path(self.db_2).touch()\n            conn = sqlite3.connect(self.db_2)\n            c = conn.cursor()\n            c.execute('''CREATE TABLE EmailData (email text, list text)''')\n            df = pd.DataFrame(\n                {\n                    \"email\" : [\"fourth@example.com\", \"fifth@example.com\", \"seventh@example.com\", \"eight@example.com\"],\n                    \"list\" : [\"[12, 21, 35, 2, 1]\", \"[13, 4, 10, 20]\", \"[82, 23, 7, 14, 66]\", \"[111, 23, 4]\"]\n                }\n            )\n            df.to_sql('EmailData', conn, if_exists='append', index = False)\n    \n        self.db_3 = os.path.join(self.test_dir, \"db_3.db\")\n        if not os.path.exists(self.db_3) :\n            Path(self.db_3).touch()\n            conn = sqlite3.connect(self.db_3)\n            c = conn.cursor()\n            c.execute('''CREATE TABLE EmailData (email text, list text)''')\n            df = pd.DataFrame(\n                {\n                    \"email\" : [\"ninth@example.com\", \"tenth@example.com\"],\n                    \"list\" : [\"[1, 2, 3, 4, 5]\", \"[6, 7, 8, 9, 10]\"]\n                }\n            )\n            df.to_sql('EmailData', conn, if_exists='append', index = False)\n    \n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n    \n    def test_case_1(self):\n        df, ax = task_func(self.db_1)\n        \n        # Test the DataFrame's shape and columns\n        self.assertEqual(df.shape, (3, 5))\n        self.assertListEqual(list(df.columns), ['email', 'list', 'sum', 'mean', 'var'])\n        \n        # Test a few values\n        self.assertEqual(df.loc[0, 'email'], 'first@example.com')\n        self.assertEqual(df.loc[0, 'sum'], 113)\n        self.assertAlmostEqual(df.loc[1, 'mean'], 18.571429, places=6)\n        self.assertAlmostEqual(df.loc[2, 'var'], 1066.160000, places=6)\n        \n        # Test if the plot has the correct data\n        extracted_values = [bar.get_height() for bar in ax.patches] # extract bar height\n        self.assertEqual(len(extracted_values), 3*3)\n    \n    def test_case_2(self):\n        df, ax = task_func(self.db_2)\n        \n        # Test the DataFrame's shape and columns\n        self.assertEqual(df.shape, (4, 5))\n        self.assertListEqual(list(df.columns), ['email', 'list', 'sum', 'mean', 'var'])\n        \n        # Test a few values\n        self.assertEqual(df.loc[0, 'email'], 'fourth@example.com')\n        self.assertEqual(df.loc[0, 'sum'], 71)\n        self.assertAlmostEqual(df.loc[1, 'mean'], 11.75, places=6)\n        self.assertAlmostEqual(df.loc[2, 'var'], 896.240000, places=6)\n        self.assertEqual(df.loc[3, 'sum'], 138)\n        # Test if the plot has the correct data\n        extracted_values = [bar.get_height() for bar in ax.patches] # extract bar height\n        self.assertEqual(len(extracted_values), 4*3)\n    def test_case_3(self):\n        df, ax = task_func(self.db_3)\n        \n        # Test the DataFrame's shape and columns\n        self.assertEqual(df.shape, (2, 5))\n        self.assertListEqual(list(df.columns), ['email', 'list', 'sum', 'mean', 'var'])\n        \n        # Test a few values\n        self.assertEqual(df.loc[0, 'email'], 'ninth@example.com')\n        self.assertEqual(df.loc[0, 'sum'], 15.0)\n        self.assertAlmostEqual(df.loc[1, 'mean'], 8.0, places=6)\n        self.assertAlmostEqual(df.loc[1, 'var'], 2.0, places=6)\n        \n        # Test if the plot has the correct data\n        extracted_values = [bar.get_height() for bar in ax.patches] # extract bar height\n        self.assertEqual(len(extracted_values), 2*3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads data from an Excel spreadsheet, converts it to a CSV file, then calculates the sum of each column in the CSV file.\nNote that: Ensure the Excel file contains only numerical data for accurate sum calculations.\nThe function should raise the exception for: FileNotFoundError: If the Excel file does not exist at the specified path. ValueError: If the specified sheet name is not found in the Excel file.\nThe function should output with:\n    dict: A dictionary with the sum of each column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport logging\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n```",
        "gt": "import pandas as pd\nimport logging\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\ndef task_func(sheet_name, excel_file_location=\"test.xlsx\", csv_file_location=\"test.csv\"):\n    try:\n        logging.info('Reading the Excel file.')\n        # Reading the Excel file\n        df = pd.read_excel(excel_file_location, sheet_name=sheet_name)\n\n        logging.info('Converting to CSV.')\n        # Converting to CSV\n        df.to_csv(csv_file_location, index=False)\n\n        # Calculating the sum of each column\n        column_sum = df.sum(numeric_only=True)\n    except FileNotFoundError:\n        logging.error(f\"Excel file not found at {excel_file_location}\")\n        raise FileNotFoundError(f\"Excel file not found at {excel_file_location}\")\n    except ValueError as e:\n        logging.error(f\"Error in processing Excel file: {e}\")\n        raise ValueError(f\"Error in processing Excel file: {e}\")\n\n    return column_sum.to_dict()",
        "test": "import unittest\nimport pandas as pd\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Creating a dummy Excel file for testing\n        self.test_excel_file = 'dummy_test.xlsx'\n        self.test_csv_file = 'dummy_test.csv'\n        self.test_sheet_name = 'TestSheet'\n        data = {'A': [10, 20, 30], 'B': [40, 50, 60]}\n        df = pd.DataFrame(data)\n        df.to_excel(self.test_excel_file, sheet_name=self.test_sheet_name, index=False)\n    def tearDown(self):\n        os.remove(self.test_excel_file)\n        if os.path.exists(self.test_csv_file):\n            os.remove(self.test_csv_file)\n    def test_normal_functionality(self):\n        result = task_func(self.test_sheet_name, self.test_excel_file, self.test_csv_file)\n        self.assertEqual(result, {'A': 60, 'B': 150})\n    def test_file_not_found(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.test_sheet_name, 'nonexistent.xlsx', self.test_csv_file)\n    def test_sheet_not_found(self):\n        with self.assertRaises(ValueError):\n            task_func('NonexistentSheet', self.test_excel_file, self.test_csv_file)\n    def test_empty_excel_file(self):\n        empty_excel_file = 'empty_test.xlsx'\n        pd.DataFrame().to_excel(empty_excel_file, index=False)\n        with self.assertRaises(ValueError):\n            task_func(self.test_sheet_name, empty_excel_file, self.test_csv_file)\n        os.remove(empty_excel_file)\n    def test_overwrite_existing_csv(self):\n        with open(self.test_csv_file, 'w') as file:\n            file.write('Old Data')\n        task_func(self.test_sheet_name, self.test_excel_file, self.test_csv_file)\n        with open(self.test_csv_file, 'r') as file:\n            self.assertNotIn('Old Data', file.read())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a list of random words of a certain length.\nThe function should raise the exception for: ValueError: If num_words or word_length is negative.\nThe function should output with:\n    words (list): A list of random words.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n```",
        "gt": "import random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(num_words, word_length):\n    # Validate input parameters\n    if num_words < 0 or word_length < 0:\n        raise ValueError(\"num_words and word_length must be non-negative\")\n\n    random.seed(42)\n    words = [''.join(random.choice(LETTERS) for _ in range(word_length)) for _ in range(num_words)]\n    \n    return words",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_positive_scenario(self):\n        \"\"\"\n        Test with positive num_words and word_length.\n        This test case checks if the function correctly generates a list of words where each word has the specified length.\n        It ensures that the length of the returned list and the length of each word in the list are correct.\n        \"\"\"\n        result = task_func(5, 3)\n        self.assertEqual(len(result), 5, \"The length of the returned list is incorrect.\")\n        for word in result:\n            self.assertEqual(len(word), 3, \"The length of a word in the list is incorrect.\")\n    \n    def test_zero_words(self):\n        \"\"\"\n        Test when num_words is 0.\n        This test case checks the function's behavior when no words are requested.\n        The function should return an empty list in this scenario.\n        \"\"\"\n        result = task_func(0, 3)\n        self.assertEqual(result, [], \"The function should return an empty list when num_words is 0.\")\n    \n    def test_zero_length(self):\n        \"\"\"\n        Test when word_length is 0.\n        This test case checks the function's behavior when the requested word length is 0.\n        The function should return a list of empty strings in this scenario.\n        \"\"\"\n        result = task_func(5, 0)\n        self.assertEqual(result, [''] * 5, \"The function should return a list of empty strings when word_length is 0.\")\n    \n    def test_negative_values(self):\n        \"\"\"\n        Test with negative num_words and word_length.\n        This test case checks the function's behavior when negative values are passed as input parameters.\n        The function should raise a ValueError in this scenario.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            task_func(5, -3)\n        with self.assertRaises(ValueError):\n            task_func(-5, -3)\n    \n    def test_non_integer_inputs(self):\n        \"\"\"\n        Test with non-integer num_words and word_length.\n        This test case checks the function's behavior when non-integer values are passed as input parameters.\n        The function should raise a TypeError in this scenario.\n        \"\"\"\n        with self.assertRaises(TypeError, msg=\"The function should raise a TypeError for non-integer values\"):\n            task_func(5.5, 3)\n        \n        with self.assertRaises(TypeError, msg=\"The function should raise a TypeError for non-integer values\"):\n            task_func(5, \"3\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the sum of the squares of numbers from a predefined range (POSSIBLE_NUMBERS) for each list in list_of_lists. The number of elements considered from POSSIBLE_NUMBERS is determined by the length of each list.\nThe function should output with:\n    sums (list): A list of sums of squares.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\n# Constants\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n```",
        "gt": "import numpy as np\nimport math\n# Constants\nPOSSIBLE_NUMBERS = np.arange(1, 11)\ndef task_func(list_of_lists):\n    sums = []\n    for list_ in list_of_lists:\n        sum_ = sum(math.pow(x, 2) for x in POSSIBLE_NUMBERS[:len(list_)])\n        sums.append(sum_)\n\n    return sums",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with empty list\n        result = task_func([])\n        self.assertEqual(result, [])\n    def test_case_2(self):\n        # Testing with empty sublists\n        result = task_func([[], [], []])\n        self.assertEqual(result, [0, 0, 0])\n        \n    def test_case_3(self):\n        # Testing with sublists of different lengths\n        result = task_func([[1], [1, 2], [1, 2, 3]])\n        self.assertEqual(result, [1, 5, 14])\n    def test_case_4(self):\n        # Testing with sublists containing the same element\n        result = task_func([[1, 1, 1], [2, 2, 2, 2]])\n        self.assertEqual(result, [14, 30])\n        \n    def test_case_5(self):\n        # Testing with large sublists\n        result = task_func([[1]*10, [2]*5])\n        self.assertEqual(result, [385, 55])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Moves files with a specified extension from a source directory to a destination directory. This function searches for files in the source directory that match the given extension. If a file with the same name already exists in the destination directory, it is not moved.\nThe function should raise the exception for: FileNotFoundError: if either the source or destination directory does not exist\nThe function should output with:\n    list: A list of the full paths of files that were successfully moved. If a file was not moved\n    because it already exists in the destination directory, it will not be included in this list.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n```",
        "gt": "import os\nimport shutil\nimport glob\ndef task_func(src_dir, dest_dir, ext):\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory '{dest_dir}' does not exist.\")\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory '{src_dir}' does not exist.\")\n\n    files_moved = []\n    files = glob.glob(os.path.join(src_dir, '*.' + ext))\n    for file in files:\n        filename = os.path.basename(file)\n        dest_file_path = os.path.join(dest_dir, filename)\n        if not os.path.exists(dest_file_path):\n            shutil.move(file, dest_dir)\n            files_moved.append(dest_file_path)\n    return files_moved",
        "test": "import unittest\nfrom tempfile import TemporaryDirectory\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create temporary directories for the source and destination folders.\n        self.src_dir = TemporaryDirectory()\n        self.dest_dir = TemporaryDirectory()\n    def tearDown(self):\n        # Clean up temporary directories after each test case.\n        self.src_dir.cleanup()\n        self.dest_dir.cleanup()\n    def test_move_no_files(self):\n        # Test moving files with a specified extension when no such files exist.\n        files_moved = task_func(self.src_dir.name, self.dest_dir.name, 'txt')\n        self.assertEqual(len(files_moved), 0, \"Should return an empty list when no files are moved.\")\n    def test_empty_extension(self):\n        # Test behavior with an empty string as file extension.\n        self.create_temp_file(self.src_dir.name, 'test.txt', 'Hello World')\n        files_moved = task_func(self.src_dir.name, self.dest_dir.name, '')\n        self.assertEqual(len(files_moved), 0, \"Should not move files when the extension is empty.\")\n    def create_temp_file(self, directory, filename, content=\"\"):\n        \"\"\"Helper method to create a temporary file with specified content.\"\"\"\n        path = os.path.join(directory, filename)\n        with open(path, 'w') as f:\n            f.write(content)\n        return path\n    \n    @patch('shutil.move')\n    @patch('glob.glob', return_value=['/fake/source/file1.txt', '/fake/source/file2.txt'])\n    def test_move_specified_extension_files(self, mock_glob, mock_move):\n        # Adjust side_effect to consider both the source and destination directories' existence,\n        # as well as the specific condition for '/fake/source/file1.txt'\n        with patch('os.path.exists') as mock_exists:\n            def side_effect(path):\n                if path in ('/fake/source', '/fake/destination'):\n                    return True  # Both source and destination directories exist\n                elif path == '/fake/destination/file1.txt':\n                    return True  # Simulate that 'file1.txt' exists in the destination directory\n                else:\n                    return False  # Other paths don't exist\n            \n            mock_exists.side_effect = side_effect\n            src_dir = '/fake/source'\n            dest_dir = '/fake/destination'\n            ext = 'txt'\n            moved_files = task_func(src_dir, dest_dir, ext)\n            # Assertions adjusted for corrected logic\n            try:\n                mock_move.assert_called_once_with('/fake/source/file2.txt', dest_dir)\n            except:\n                mock_move.assert_called_once_with('/fake/source/file2.txt', dest_dir+'/file2.txt')\n            self.assertEqual(len(moved_files), 1)  # Expecting only 'file2.txt' to be considered moved\n            self.assertIn('/fake/destination/file2.txt', moved_files)  # Path should reflect the file moved to the destination\n    def test_no_files_moved_with_different_extension(self):\n        # Test that no files are moved if their extensions do not match the specified one.\n        self.create_temp_file(self.src_dir.name, 'test_file.md', \"Markdown content.\")\n        files_moved = task_func(self.src_dir.name, self.dest_dir.name, 'txt')\n        self.assertEqual(len(files_moved), 0, \"Should not move files with different extensions.\")\n    def test_exception_raised_when_dirs_do_not_exist(self):\n        # Test that FileNotFoundError is raised when the destination directory does not exist.\n        self.src_dir.cleanup()  # Forcefully remove the destination directory to simulate the error condition.\n        with self.assertRaises(FileNotFoundError, msg=\"Should raise FileNotFoundError when the source directory does not exist.\"):\n            task_func(self.src_dir.name, self.dest_dir.name, 'txt')\n        self.dest_dir.cleanup()  # Forcefully remove the destination directory to simulate the error condition.\n        with self.assertRaises(FileNotFoundError, msg=\"Should raise FileNotFoundError when the destination directory does not exist.\"):\n            task_func(self.src_dir.name, self.dest_dir.name, 'txt')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a set of samples from a normal distribution with a specified mean and standard deviation. It also visualizes the generated samples by plotting their histogram and the probability density function. Generate 500 samples from a normal distribution with mean 5 and standard deviation 2. >>> len(task_func(5, 2, 500)) 500\nThe function should output with:\n    numpy.ndarray: An array of generated samples from the normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mean, std_dev, n):\n    samples = np.random.normal(mean, std_dev, n)\n\n    plt.figure(figsize=(10, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std_dev)\n    plt.plot(x, p, 'k', linewidth=2)\n\n    title = f'Normal Distribution: Mean = {mean}, Std Dev = {std_dev}'\n    plt.title(title)\n    plt.xlabel('Value')\n    plt.ylabel('Density')\n    plt.show()\n\n    return samples",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_sample_length(self):\n        # Test if the function returns the correct number of samples\n        samples = task_func(0, 1, 1000)\n        self.assertEqual(len(samples), 1000)\n    def test_sample_mean(self):\n        # Test if the mean of the samples is approximately equal to the specified mean\n        samples = task_func(0, 1, 100000)\n        self.assertAlmostEqual(np.mean(samples), 0, places=1)\n    def test_sample_std_dev(self):\n        # Test if the standard deviation of the samples is approximately equal to the specified standard deviation\n        samples = task_func(0, 1, 100000)\n        self.assertAlmostEqual(np.std(samples), 1, places=1)\n    def test_negative_std_dev(self):\n        # Test if a ValueError is raised for negative standard deviations\n        with self.assertRaises(ValueError):\n            task_func(0, -1, 1000)\n    def test_zero_samples(self):\n        # Test if the function can handle a request for zero samples\n        samples = task_func(0, 1, 0)\n        self.assertEqual(len(samples), 0)\n    def test_return_type(self):\n        # Test if the function returns a numpy array\n        samples = task_func(0, 1, 100)\n        self.assertIsInstance(samples, np.ndarray)\n    def test_non_integer_samples(self):\n        # Test if the function raises a TypeError for non-integer n\n        with self.assertRaises(TypeError):\n            task_func(0, 1, '100')\n    def test_non_numeric_mean_or_std(self):\n        # Test if the function raises a TypeError for non-numeric mean or std_dev\n        with self.assertRaises(TypeError):\n            task_func('0', 1, 100)\n        with self.assertRaises(TypeError):\n            task_func(0, '1', 100)\n    def test_very_small_n(self):\n        # Test if the function behaves correctly for very small n\n        samples = task_func(0, 1, 1)\n        self.assertEqual(len(samples), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a DataFrame with combinations of animals and foods in a 'animal:food' format. Handling of Special Cases: - If both 'animals' and 'foods' lists are empty or not provided, the function returns an empty DataFrame. - If either 'animals' or 'foods' list is empty or not provided, the function uses its predefined list for the missing parameter.\nNote that: The function generates all possible combinations of the provided 'animals' and 'foods' using itertools.product. The resulting pairs are shuffled randomly to ensure variety in the DataFrame layout.\nThe function should output with:\n    df (pandas.DataFrame): A DataFrame where each row represents a unique animal from the 'animals'\n    list and each column represents a food item from the 'foods' list. Each cell contains a string in the format 'animal:food'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n```",
        "gt": "import pandas as pd\nimport itertools\nimport numpy as np\ndef task_func(animals=None, foods=None):\n\n    # Default lists if not provided\n    if animals is None:\n        animals = [\n            \"Dog\",\n            \"Cat\",\n            \"Elephant\",\n            \"Tiger\",\n            \"Lion\",\n            \"Zebra\",\n            \"Giraffe\",\n            \"Bear\",\n            \"Monkey\",\n            \"Kangaroo\",\n        ]\n    if foods is None:\n        foods = [\"Meat\", \"Fish\", \"Grass\", \"Fruits\", \"Insects\", \"Seeds\", \"Leaves\"]\n\n    # Handling edge case of empty lists\n    if not animals or not foods:\n        return pd.DataFrame()\n\n    pairs = [f\"{a}:{f}\" for a, f in itertools.product(animals, foods)]\n\n    # Reshape the data and create a DataFrame\n    data = np.array(pairs).reshape(-1, len(foods))\n    df = pd.DataFrame(data, columns=foods)\n\n    return df",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def test_default_input(self):\n        \"\"\"Test with default inputs for animals and foods.\"\"\"\n        random.seed(0)\n        # Scenario: Testing with default inputs for animals and foods\n        result = task_func()\n        # Check the shape of the returned DataFrame\n        self.assertEqual(\n            result.shape,\n            (10, 7),\n            \"The shape of the DataFrame with default inputs is not as expected.\",\n        )\n    def test_custom_input(self):\n        \"\"\"Test with custom inputs for animals and foods.\"\"\"\n        random.seed(1)\n        # Scenario: Testing with custom lists of animals and foods\n        animals = [\"Dog\", \"Cat\", \"Elephant\"]\n        foods = [\"Meat\", \"Fish\", \"Grass\", \"Fruits\"]\n        result = task_func(animals, foods)\n        # Check the shape of the returned DataFrame\n        self.assertEqual(\n            result.shape,\n            (3, 4),\n            \"The shape of the DataFrame with custom inputs is not as expected.\",\n        )\n    def test_empty_input(self):\n        \"\"\"Test with empty lists for animals and foods.\"\"\"\n        random.seed(2)\n        # Scenario: Testing with empty lists for animals and foods\n        animals = []\n        foods = []\n        result = task_func(animals, foods)\n        # Check the shape of the returned DataFrame\n        self.assertEqual(\n            result.shape,\n            (0, 0),\n            \"The shape of the DataFrame with empty inputs is not as expected.\",\n        )\n    def test_single_input(self):\n        \"\"\"Test with a single animal and a single food.\"\"\"\n        random.seed(3)\n        # Scenario: Testing with a single animal and a single food\n        animals = [\"Dog\"]\n        foods = [\"Meat\"]\n        result = task_func(animals, foods)\n        # Check the shape of the returned DataFrame\n        self.assertEqual(\n            result.shape,\n            (1, 1),\n            \"The shape of the DataFrame with a single input is not as expected.\",\n        )\n        # Check if the pairs are correct\n        self.assertIn(\n            \"Dog:Meat\",\n            result.values,\n            \"The expected pair 'Dog:Meat' was not found in the resulting DataFrame.\",\n        )\n    def test_partial_default(self):\n        \"\"\"Test with a custom list of animals and default list of foods.\"\"\"\n        random.seed(4)\n        # Scenario: Testing with a custom list of animals and default list of foods\n        animals = [\"Dog\", \"Cat\", \"Elephant\"]\n        result = task_func(animals)\n        # Check the shape of the returned DataFrame\n        self.assertEqual(\n            result.shape,\n            (3, 7),\n            \"The shape of the DataFrame with partial default inputs is not as expected.\",\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Upload all files from a specific directory to the specified server URL, along with the associated metadata. In addition, the speed limit function pauses for one second after each upload.\nThe function should raise the exception for: The function will raise FileNotFoundError if the directory does not exist. The function will raise TypeError if the url is invalid.\nThe function should output with:\n    list: A list of status codes for the upload responses.\nYou should write self-contained code starting with:\n```\nimport requests\nimport os\nimport json\nimport time\n# Redefining the function in the current context\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n```",
        "gt": "import requests\nimport os\nimport json\nimport time\n# Redefining the function in the current context\nHEADERS = {\n    'accept': 'text/json',\n    'Content-Type': 'application/json'\n}\ndef task_func(url, directory, metadata):\n\n    files = os.listdir(directory)\n    status_codes = []\n\n    for file in files:\n        if os.path.isfile(os.path.join(directory, file)):\n            with open(os.path.join(directory, file), 'rb') as f:\n                files = {'file': f}\n                response = requests.post(url, files=files, headers=HEADERS, data=json.dumps(metadata))\n                status_codes.append(response.status_code)\n                time.sleep(1)\n\n    return status_codes",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport os\nTEST_URL = \"https://www.example.com\"\nTEST_DIRECTORY = \"./test_uploads_task_func\"\nTEST_DIRECTORY_EMPTY = \"./test_uploads_task_func_empty\"\nTEST_METADATA = {'userId': 'abc'}\n# Mocking the requests.post method\ndef mock_requests_post(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, status_code):\n            self.status_code = status_code\n        \n    # Simulate successful upload (status code 200)\n    return MockResponse(200)\n# Mocking the requests.post method fail\ndef mock_requests_post_fail(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, status_code):\n            self.status_code = status_code\n        \n    # Simulate fail upload (status code 404)\n    return MockResponse(400)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a test directory with dummy files\n        os.makedirs(TEST_DIRECTORY, exist_ok=True)\n        for i in range(5):\n            with open(os.path.join(TEST_DIRECTORY, f\"test_file_{i}.txt\"), \"w\") as f:\n                f.write(f\"This is test file {i}\")\n        os.makedirs(TEST_DIRECTORY_EMPTY, exist_ok=True)\n    def tearDown(self):\n        # Remove the test directory and its contents after testing\n        if os.path.exists(TEST_DIRECTORY):\n            for file in os.listdir(TEST_DIRECTORY):\n                os.remove(os.path.join(TEST_DIRECTORY, file))\n            os.rmdir(TEST_DIRECTORY)\n        if os.path.exists(TEST_DIRECTORY_EMPTY):\n            os.rmdir(TEST_DIRECTORY_EMPTY)\n    @patch('requests.post', side_effect=mock_requests_post)\n    def test_upload_success(self, mock_post):\n        # Test successful upload with mock response\n        status_codes = task_func(TEST_URL, TEST_DIRECTORY, TEST_METADATA)\n        self.assertEqual(status_codes, [200, 200, 200, 200, 200])\n    @patch('requests.post', side_effect=mock_requests_post)\n    def test_directory_not_found(self, mock_post):\n        # Test if directory does not exist\n        with self.assertRaises(FileNotFoundError):\n            task_func(TEST_URL, \"non_existing_directory\", TEST_METADATA)\n    @patch('requests.post', side_effect=mock_requests_post)\n    def test_empty_directory(self, mock_post):\n        # Test if directory is empty\n        status_codes = task_func(TEST_URL, TEST_DIRECTORY_EMPTY, TEST_METADATA)\n        self.assertEqual(status_codes, [])\n    def test_invalid_url(self):\n        # Test with invalid URL\n        with self.assertRaises(Exception):\n            task_func(\"invalid_url\", TEST_DIRECTORY, TEST_METADATA)\n    @patch('requests.post', side_effect=mock_requests_post_fail)\n    def test_urls(self, mock_post):\n        status_codes = task_func(TEST_URL, TEST_DIRECTORY, TEST_METADATA)\n        self.assertEqual(status_codes, [400, 400, 400, 400, 400])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate and draw random data in real time for the specified duration.\nThe function should output with:\n    tuple: A tuple containing two lists.\n    The first list contains timestamps (as strings) in the format '%H:%M:%S.%f'.\n    The second list contains the generated random values.\nYou should write self-contained code starting with:\n```\nimport time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n```",
        "gt": "import time\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func(duration):\n    # Constants\n    VALUES_RANGE = (0, 100)\n    PLOT_INTERVAL = 0.1\n\n    plt.ion()\n    x_data = []\n    y_data = []\n\n    end_time = time.time() + duration\n    while time.time() < end_time:\n        x_data.append(datetime.now().strftime('%H:%M:%S.%f'))\n        y_data.append(randint(*VALUES_RANGE))\n\n        plt.clf()\n        plt.plot(x_data, y_data)\n        plt.draw()\n        plt.pause(PLOT_INTERVAL)\n\n    plt.ioff()\n    plt.show()\n\n    return x_data, y_data",
        "test": "### Unit Tests\n# Check and set the backend\nimport unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    @patch('matplotlib.pyplot.pause', return_value=None)\n    def test_data_list_lengths_match(self, mock_pause):\n        \"\"\"\n        Test that the lengths of timestamp and data lists match.\n        \"\"\"\n        x_data, y_data = task_func(1)\n        self.assertEqual(len(x_data), len(y_data))\n    @patch('matplotlib.pyplot.pause', return_value=None)\n    def test_function_runs_without_error(self, mock_pause):\n        \"\"\"\n        Test that the function runs without error.\n        \"\"\"\n        try:\n            task_func(1)\n            function_ran_successfully = True\n        except Exception as e:\n            function_ran_successfully = False\n        self.assertTrue(function_ran_successfully)\n    @patch('matplotlib.pyplot.pause', return_value=None)\n    def test_random_values_within_range(self, mock_pause):\n        \"\"\"\n        Test that the random values are within the specified range.\n        \"\"\"\n        _, y_data = task_func(1)\n        self.assertTrue(all(0 <= y <= 100 for y in y_data))\n    @patch('matplotlib.pyplot.pause', return_value=None)\n    @patch(__name__ + '.randint', return_value=50)\n    def test_random_values_consistency(self, mock_randint, mock_pause):\n        \"\"\"\n        Test that generated values are consistent with the mocked random function.\n        \"\"\"\n        _, y_data = task_func(1)\n        self.assertTrue(all(y == 50 for y in y_data))\n    @patch('matplotlib.pyplot.pause', return_value=None)\n    def test_timestamps_format(self, mock_pause):\n        \"\"\"\n        Test that timestamps are in the expected format.\n        \"\"\"\n        x_data, _ = task_func(1)\n        for timestamp in x_data:\n            datetime.strptime(timestamp, '%H:%M:%S.%f')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plot a sine wave whose frequency is determined by the day of the month from the given date.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object containing the plotted sine wave.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n```",
        "gt": "from datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(date_str):\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    x = np.linspace(0, 2 * np.pi, 1000)\n    frequency = date.day\n    y = np.sin(frequency * x)\n    _, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title(f\"Sine Wave for {date_str} (Frequency: {frequency})\")\n    return ax",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_valid_date(self):\n        \"\"\"\n        Test with a valid date string to ensure the function returns a matplotlib Axes object.\n        \"\"\"\n        result = task_func(\"2023-06-15\")\n        self.assertIsInstance(result, matplotlib.axes.Axes)\n    def test_leap_year_date(self):\n        \"\"\"\n        Test with a date from a leap year to check the function's handling of leap years.\n        \"\"\"\n        result = task_func(\"2024-02-29\")\n        self.assertIsInstance(result, matplotlib.axes.Axes)\n    def test_beginning_of_month(self):\n        \"\"\"\n        Test with a date at the beginning of the month (low-frequency wave).\n        \"\"\"\n        result = task_func(\"2023-01-01\")\n        self.assertIsInstance(result, matplotlib.axes.Axes)\n    def test_end_of_month(self):\n        \"\"\"\n        Test with a date towards the end of the month (high-frequency wave).\n        \"\"\"\n        result = task_func(\"2023-01-31\")\n        self.assertIsInstance(result, matplotlib.axes.Axes)\n    def test_invalid_date_format(self):\n        \"\"\"\n        Test with an invalid date format to check if the function raises a ValueError.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            task_func(\"15-06-2023\")\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a list of random numbers, sort them and record the distribution of the numbers in a histogram using default settings in a deterministic seaborn plot. Return the axes object and the list of random numbers.\nThe function should raise the exception for: ValueError: If range_limit is less than or equal to 1.\nThe function should output with:\n    Tuple[matplotlib.axes._axes.Axes, List[int]]: The axes object with the plot and the list of random numbers.\nYou should write self-contained code starting with:\n```\nimport random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n```",
        "gt": "import random\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndef task_func(length, range_limit=100, seed=0):\n    if range_limit <= 1:\n        raise ValueError(\"range_limit must be greater than 1\")\n\n    random.seed(seed)\n    np.random.seed(seed)\n\n    random_numbers = [random.randint(1, range_limit) for _ in range(length)]\n    random_numbers.sort()\n\n    # Initialize a fresh plot\n    plt.figure()\n    plot = sns.histplot(random_numbers, kde=False)\n\n    return plot.axes, random_numbers",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        _, data = task_func(1000)\n        self.assertEqual(len(data), 1000)\n    def test_case_2(self):\n        with self.assertRaises(ValueError):\n            _, data = task_func(1000, -3, 42)\n        \n    def test_case_3(self):\n        _, data = task_func(20, 75, 77)\n        self.assertEqual(data, [1, 4, 15, 19, 23, 25, 25, 26, 31, 31, 33, 36, 38, 42, 61, 64, 65, 65, 72, 72])\n        self.assertTrue(all(1 <= num <= 75 for num in data))\n    def test_case_4(self):\n        ax, data = task_func(1000, 75)\n        target = np.array([98, 103, 106, 73, 87, 92, 94, 84, 90, 95, 78])\n        self.assertTrue((ax.containers[0].datavalues == target).all()) \n    def test_case_5(self):\n        _, data1 = task_func(1000, seed=42)\n        _, data2 = task_func(1000, seed=42)\n        self.assertEqual(data1, data2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a constant list of fruits in FRUITS, and a dictionary 'fruit_dict' with keys as people's names and values as their favorite fruit names, record the frequency of each fruits' occurence. Return a bar chart of the number of fruits for each fruit type and return the dictionary with fruit names as keys and their counts as values.\nThe function should output with:\n    dict: A dictionary with fruit names as keys and their counts as values.\n    matplotlib.axes.Axes: The axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n```",
        "gt": "import matplotlib.pyplot as plt\nfrom collections import Counter\nFRUITS = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Indian Prune', 'Jackfruit']\ndef task_func(fruit_dict):\n    fruit_list = [item for item in fruit_dict.values() if isinstance(item, str) and item in FRUITS]\n    fruit_counter = Counter(fruit_list)\n    \n    plt.bar(fruit_counter.keys(), fruit_counter.values())\n    return Counter([item for item in fruit_dict.values() if isinstance(item, str)]), plt.gca()",
        "test": "import unittest\nimport matplotlib.axes\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        fruit_dict = {'John': 'Apple', 'Alice': 'Banana', 'Bob': 'Cherry'}\n        count_dict, ax = task_func(fruit_dict)\n        self.assertEqual(count_dict, {'Apple': 1, 'Banana': 1, 'Cherry': 1})\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_2(self):\n        fruit_dict = {'John': 'Apple', 'Alice': 'Banana', 'Bob': 'Apple'}\n        count_dict, ax = task_func(fruit_dict)\n        self.assertEqual(count_dict, {'Apple': 2, 'Banana': 1})\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_3(self):\n        fruit_dict = {}\n        count_dict, ax = task_func(fruit_dict)\n        self.assertEqual(count_dict, {})\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_4(self):\n        fruit_dict = {'John': 'Apple'}\n        count_dict, ax = task_func(fruit_dict)\n        self.assertEqual(count_dict, {'Apple': 1})\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_5(self):\n        fruit_dict = {'John': 123, 'Alice': None, 'Bob': 'Apple'}\n        count_dict, ax = task_func(fruit_dict)\n        self.assertEqual(count_dict, {'Apple': 1})\n        self.assertIsInstance(ax, matplotlib.axes.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a list of pandas Series objects, where each Series is indexed by the elements of a sub-list from `list_of_lists`. Each Series contains unique integers starting from 1 and going up to the length of the respective sub-list. These integers are shuffled randomly to create a unique ordering for each Series.\nNote that: The function uses numpy's random shuffle, which modifies the sequence in-place. Therefore, each call to the function may produce different Series values unless the random seed is set beforehand.\nThe function should output with:\n    series_list (list of pandas.Series): This function returns a list. Each element in this list is a pandas Series object.\n    The Series objects are indexed by the elements of the sub-lists provided in `list_of_lists`. The values in each Series\n    are unique integers that are randomly shuffled.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(list_of_lists):\n    series_list = []\n    for sublist in list_of_lists:\n        values = np.arange(1, len(sublist) + 1)\n        np.random.shuffle(values)\n        s = pd.Series(values, index=sublist)\n        series_list.append(s)\n\n    return series_list",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_basic_functionality(self):\n        \"\"\"Test basic functionality of the function.\"\"\"\n        np.random.seed(0)\n        input_data = [[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"]]\n        result = task_func(input_data)\n        self.assertEqual(len(result), 2)\n        expected_indexes = [[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"]]\n        for i, s in enumerate(result):\n            self.assertIsInstance(s, pd.Series)\n            self.assertListEqual(list(s.index), expected_indexes[i])\n    def test_different_lengths(self):\n        \"\"\"Test with sub-lists of different lengths.\"\"\"\n        np.random.seed(1)\n        input_data = [[\"m\", \"n\"], [\"p\", \"q\", \"r\", \"s\"]]\n        result = task_func(input_data)\n        self.assertEqual(len(result), 2)\n        expected_indexes = [[\"m\", \"n\"], [\"p\", \"q\", \"r\", \"s\"]]\n        for i, s in enumerate(result):\n            self.assertIsInstance(s, pd.Series)\n            self.assertListEqual(list(s.index), expected_indexes[i])\n    def test_single_element_list(self):\n        \"\"\"Test with a single-element sub-list.\"\"\"\n        np.random.seed(2)\n        input_data = [[\"a\"]]\n        result = task_func(input_data)\n        self.assertEqual(len(result), 1)\n        expected_indexes = [[\"a\"]]\n        for i, s in enumerate(result):\n            self.assertIsInstance(s, pd.Series)\n            self.assertListEqual(list(s.index), expected_indexes[i])\n    def test_mixed_lengths(self):\n        \"\"\"Test with sub-lists of different lengths.\"\"\"\n        np.random.seed(3)\n        input_data = [[\"x\", \"y\", \"z\"], [\"a\", \"b\"]]\n        result = task_func(input_data)\n        self.assertEqual(len(result), 2)\n        expected_indexes = [[\"x\", \"y\", \"z\"], [\"a\", \"b\"]]\n        for i, s in enumerate(result):\n            self.assertIsInstance(s, pd.Series)\n            self.assertListEqual(list(s.index), expected_indexes[i])\n    def test_multiple_series(self):\n        \"\"\"Test with multiple sub-lists.\"\"\"\n        np.random.seed(4)\n        input_data = [[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\", \"o\"]]\n        result = task_func(input_data)\n        self.assertEqual(len(result), 3)\n        expected_indexes = [[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\", \"o\"]]\n        for i, s in enumerate(result):\n            self.assertIsInstance(s, pd.Series)\n            self.assertListEqual(list(s.index), expected_indexes[i])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the occurrences of each value in the specified columns in multiple CSV files.\nThe function should output with:\n    dict: A dictionary where keys are column names and values are dictionaries\n    with unique values in the column as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n```",
        "gt": "import collections\nimport pandas as pd\ndef task_func(my_tuple, path_csv_files):\n\n    counter = {column: collections.Counter() for column in my_tuple}\n\n    for csv_file in path_csv_files:\n        df = pd.read_csv(csv_file)\n\n        for column in my_tuple:\n            if column in df:\n                counter[column].update(df[column])\n\n    return counter",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    @patch('pandas.read_csv')\n    def test_read_csv_files(self, mock_read_csv):\n        # Mocking pandas.read_csv to return a DataFrame\n        mock_read_csv.side_effect = lambda x: pd.DataFrame({'Country': ['USA', 'Canada', 'USA'], 'Gender': ['Male', 'Female', 'Male']})\n        # Call the function with mocked data\n        result = task_func(('Country', 'Gender'), ['file1.csv'])\n        # Assertions to verify the function behavior\n        self.assertEqual(result['Country'], {'USA': 2, 'Canada': 1})\n        self.assertEqual(result['Gender'], {'Male': 2, 'Female': 1})\n   \n    @patch('pandas.read_csv')\n    def test_empty_csv_files(self, mock_read_csv):\n        # Mocking pandas.read_csv to return an empty DataFrame\n        mock_read_csv.side_effect = lambda x: pd.DataFrame(columns=['Country', 'Gender'])\n        # Call the function with mocked data\n        result = task_func(('Country', 'Gender'), ['file1.csv'])\n        # Assertions to verify the function behavior\n        self.assertEqual(result['Country'], {})\n        self.assertEqual(result['Gender'], {})\n    @patch('pandas.read_csv')\n    def test_missing_column(self, mock_read_csv):\n        # Mocking pandas.read_csv to return a DataFrame with missing 'Gender' column\n        mock_read_csv.side_effect = lambda x: pd.DataFrame({'Country': ['USA', 'Canada', 'USA']})\n        # Call the function with mocked data\n        result = task_func(('Country', 'Gender'), ['file1.csv', 'file2.csv'])\n        # Assertions to verify the function behavior\n        self.assertEqual(result['Country'], {'USA': 4, 'Canada': 2})\n        self.assertEqual(result['Gender'], {})\n    @patch('pandas.read_csv')\n    def test_no_csv_files(self, mock_read_csv):\n        # Call the function with mocked data\n        result = task_func(('Country', 'Gender'), [])\n        # Assertions to verify the function behavior\n        self.assertEqual(result['Country'], {})\n        self.assertEqual(result['Gender'], {})\n    @patch('pandas.read_csv')\n    def test_invalid_csv_files(self, mock_read_csv):\n        # Mocking pandas.read_csv to raise an exception when reading the CSV files\n        mock_read_csv.side_effect = Exception\n        # Call the function with mocked data\n        with self.assertRaises(Exception):\n            result = task_func(('Country', 'Gender'), ['file3.csv'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a series of random numbers over a specified number of intervals with a delay of 1 second between each interval. It then plots these numbers as a function of elapsed time and returns the Axes object along with the kurtosis value of the generated numbers.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object representing the plot.\n    float: The kurtosis value of the generated numbers.\nYou should write self-contained code starting with:\n```\nimport time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n```",
        "gt": "import time\nimport random\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kurtosis\ndef task_func(intervals=100, seed=0):\n    random.seed(seed)\n    times = []\n    numbers = []\n\n    try:\n        for _ in range(intervals):\n            time.sleep(1)\n            times.append(time.time())\n            numbers.append(random.random())\n    except KeyboardInterrupt:\n        print('Interrupted by user')\n\n    kurtosis_value = kurtosis(numbers, nan_policy='omit')\n    # Initialize a fresh figure\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.plot(times, numbers)\n    return ax, kurtosis_value",
        "test": "import unittest\nimport doctest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    \n    @patch('time.sleep', return_value=None)  # Mocking time.sleep\n    def test_case_1(self, mock_sleep):\n        ax, kurtosis = task_func(5)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines[0].get_xdata()), 5)\n        self.assertEqual(len(lines[0].get_ydata()), 5)\n        self.assertEqual(mock_sleep.call_count, 5)\n    @patch('time.sleep', return_value=None)\n    def test_case_2(self, mock_sleep):\n        ax, kurtosis = task_func(10, 44)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines[0].get_xdata()), 10)\n        self.assertEqual(len(lines[0].get_ydata()), 10)\n        self.assertNotAlmostEqual(kurtosis, -0.34024, places=5)\n    @patch('time.sleep', return_value=None)\n    def test_case_3(self, mock_sleep):\n        ax, kurtosis = task_func()  # Default intervals = 100\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines[0].get_xdata()), 100)\n        self.assertEqual(len(lines[0].get_ydata()), 100)\n        \n    @patch('time.sleep', return_value=None)\n    def test_case_4(self, mock_sleep):\n        ax, kurtosis = task_func(1)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines[0].get_xdata()), 1)\n        self.assertEqual(len(lines[0].get_ydata()), 1)\n    @patch('time.sleep', return_value=None)\n    def test_case_5(self, mock_sleep):\n        ax, kurtosis = task_func(0)\n        self.assertIsInstance(ax, plt.Axes)\n        lines = ax.get_lines()\n        self.assertEqual(len(lines[0].get_xdata()), 0)\n        self.assertEqual(len(lines[0].get_ydata()), 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fit an exponential decay function to the indices in the array where the first column matches the target value.\nThe function should output with:\n    tuple: Containing the optimized parameters of the fitting function (popt) and the matplotlib Axes object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\ndef task_func(array, target_value):\n    def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    indices = np.where(array[:, 0] == target_value)[0]\n    if indices.size < 3:\n        raise ValueError(\"Not enough points to perform the fitting.\")\n\n    x_data = np.arange(len(indices))\n    y_data = indices\n\n    # Provide an initial guess for the parameters\n    initial_guess = [1, 0.1, min(y_data)]\n\n    # Fit the function with an increased maxfev\n    popt, _ = optimize.curve_fit(func, x_data, y_data, p0=initial_guess, maxfev=10000)\n\n    # Plot the fitting function\n    x_fit = np.linspace(min(x_data), max(x_data), 500)\n    plt.figure()\n    plt.plot(x_data, y_data, 'bo', label='Data')\n    plt.plot(x_fit, func(x_fit, *popt), 'r-', label='Fit')\n    plt.legend()\n    plt.show()\n\n    return popt, plt.gca()",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Create a sample numpy array for testing.\"\"\"\n        self.array = np.array([\n            ['332', '1', '2'],\n            ['a', 'bb', 'ccc'],\n            ['332', '33', '2'],\n            ['b', '22', '3'],\n            ['332', '44', '5']  # Adding more rows with '332' to ensure fitting can occur\n        ])\n    def test_return_types(self):\n        \"\"\"Test the return types of the function.\"\"\"\n        coeffs, ax = task_func(self.array, '332')\n        self.assertIsInstance(coeffs, np.ndarray, \"Coefficients should be a numpy array.\")\n        self.assertTrue(hasattr(ax, 'plot'), \"The second return value should be an Axes object.\")\n    def test_target_value_found(self):\n        \"\"\"Test when the target value is found.\"\"\"\n        coeffs, _ = task_func(self.array, '332')\n        self.assertGreater(coeffs.size, 0, \"Should return coefficients when target value is found.\")\n    def test_target_value_not_found(self):\n        \"\"\"Test when the target value is not found.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(self.array, '999')\n    def test_not_enough_points(self):\n        \"\"\"Test with not enough points for fitting.\"\"\"\n        small_array = np.array([['332'], ['a'], ['b']])\n        with self.assertRaises(ValueError):\n            task_func(small_array, '332')\n    def test_functionality(self):\n        \"\"\"Test the overall functionality.\"\"\"\n        coeffs, _ = task_func(self.array, '332')\n        self.assertEqual(coeffs.shape, (3,), \"Should return three coefficients.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Vectorize a string using the Bag-of-Words model. The string is split into words and each word is treated as an attribute. The value of each attribute is the number of occurrences of the word in the string. The function also uses some predefined sentences (SENTENCES constant) for vectorization.\nThe function should output with:\n    np.ndarray: A numpy array with the vectorized string.\nYou should write self-contained code starting with:\n```\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\n# Constants\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n```",
        "gt": "import re\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\n# Constants\nSENTENCES = ['This is a sentence', 'Another sentence here', 'More sentences']\ndef task_func(s: str) -> np.ndarray:\n    s = re.sub(r'\\W+', ' ', s)\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform([s] + SENTENCES)\n    return X.toarray()[0]",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_basic_string(self):\n        s = \"This is a test string.\"\n        result = task_func(s)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertTrue(np.sum(result) > 0)  # At least one word should be counted\n    def test_empty_string(self):\n        s = \"\"\n        result = task_func(s)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertEqual(np.sum(result), 0)  # No words to be counted\n    def test_string_with_special_characters(self):\n        s = \"Hello! How's the test going? Good?\"\n        result = task_func(s)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertTrue(np.sum(result) > 0)\n    def test_string_with_numbers(self):\n        s = \"I have 2 apples and 3 bananas.\"\n        result = task_func(s)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertTrue(np.sum(result) > 0)\n    def test_long_string(self):\n        s = \"This is a really long string with many words that are repeated multiple times. Words like string, words, and times appear more than once.\"\n        result = task_func(s)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertTrue(np.sum(result) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of each alphanumeric character in a given string after removing all non-alphanumeric characters, treating uppercase and lowercase letters as the same.\nThe function should output with:\n    dict: A dictionary with characters as keys (all lowercase) and their frequencies in the input string as values.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\ndef task_func(input_str):\n```",
        "gt": "import re\nfrom collections import Counter\ndef task_func(input_str):\n    cleaned_str = re.sub('[^A-Za-z0-9]+', '', input_str).lower()\n    freq_dict = Counter(cleaned_str)\n    return freq_dict",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_only_letters(self):\n        # Expected output adjusted for lowercase\n        self.assertEqual(task_func(\"Hello, World!\"), {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1})\n    def test_empty_string(self):\n        self.assertEqual(task_func(\"\"), {})\n    def test_repeated_numbers(self):\n        self.assertEqual(task_func(\"12345 12345\"), {'1': 2, '2': 2, '3': 2, '4': 2, '5': 2})\n    def test_mixed_case_letters(self):\n        # Expecting all lowercase after adjustment for case insensitivity\n        self.assertEqual(task_func(\"AAaaBBbbCCcc\"), {'a': 4, 'b': 4, 'c': 4})\n    def test_numbers_only(self):\n        self.assertEqual(task_func(\"111222333444555\"), {'1': 3, '2': 3, '3': 3, '4': 3, '5': 3})\n    def test_uppercase_only(self):\n        # Expecting all lowercase after adjustment for case insensitivity\n        self.assertEqual(task_func(\"AAAABBBBCCCC\"), {'a': 4, 'b': 4, 'c': 4})\n    def test_no_alphanumeric(self):\n        self.assertEqual(task_func(\"!!!@@@###$$$%%%^^^&&&\"), {})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all 2-element subsets of a tuple and count the occurrences of each sum in the subsets.\nThe function should output with:\n    dict: A dictionary with the sums and their counts.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport collections\ndef task_func(elements, subset_size):\n```",
        "gt": "import itertools\nimport collections\ndef task_func(elements, subset_size):\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations]\n    return collections.Counter(sums)",
        "test": "import unittest\nfrom collections import Counter\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a tuple of positive integers and subset_size of 2\n        elements = (1, 2, 3, 4, 5)\n        subset_size = 2\n        expected_result = Counter({3: 1, 4: 1, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1})\n        self.assertEqual(task_func(elements, subset_size), expected_result)\n    def test_case_2(self):\n        # Test with a tuple containing negative, positive and zero integers and subset_size of 3\n        elements = (-3, -2, 0, 2, 3, 5)\n        subset_size = 3\n        expected_result = Counter({0: 3, 5: 3, 2: 2, 3: 2, -5: 1, -3: 1, -2: 1, -1: 1, 4: 1, 1: 1, 6: 1, 7: 1, 8: 1, 10: 1})\n        self.assertEqual(task_func(elements, subset_size), expected_result)\n    def test_case_3(self):\n        # Test with a tuple of positive integers and subset_size of 1\n        elements = (1, 2, 3, 4, 5)\n        subset_size = 1\n        expected_result = Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})\n        self.assertEqual(task_func(elements, subset_size), expected_result)\n    def test_case_4(self):\n        # Test with an empty tuple\n        elements = ()\n        subset_size = 2\n        expected_result = Counter()\n        self.assertEqual(task_func(elements, subset_size), expected_result)\n    def test_case_5(self):\n        # Test with a subset_size greater than tuple length\n        elements = (1, 2, 3)\n        subset_size = 5\n        expected_result = Counter()\n        self.assertEqual(task_func(elements, subset_size), expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a specified (i.e., points_counts) number of random points within a circle of a given radius and plot them using a scatter plot.\nNote that: All settings of the scatter plot are the default version. The aspect ratio of the plot is set to 'equal' to maintain proportions.\nThe function should output with:\n    Axes: The matplotlib Axes object representing the scatter plot.\nYou should write self-contained code starting with:\n```\nimport random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n```",
        "gt": "import random\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(points_count=1000, radius=1):\n\n    points = [(radius * math.sqrt(random.random()) * math.cos(2 * math.pi * random.random()), \n               radius * math.sqrt(random.random()) * math.sin(2 * math.pi * random.random())) \n              for _ in range(points_count)]\n\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*points))\n    ax.set_aspect('equal', adjustable='box')\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport random \nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        random.seed(0)\n        ax = task_func()\n        self.assertEqual(len(ax.collections[0].get_offsets()), 1000, \"Default parameter points count mismatch\")\n        self.assertEqual(ax.get_aspect(), 1.0, \"Aspect ratio mismatch in default parameters test\")\n        plt.close()\n    def test_custom_parameters(self):\n        random.seed(0)\n        ax = task_func(500, 0.5)\n        self.assertEqual(len(ax.collections[0].get_offsets()), 500, \"Custom parameter points count mismatch\")\n        self.assertEqual(ax.get_aspect(), 1.0, \"Aspect ratio mismatch in custom parameters test\")\n        plt.close()\n    def test_radius_accuracy(self):\n        random.seed(0)\n        radius = 2\n        ax = task_func(100, radius)\n        points = ax.collections[0].get_offsets()\n        for point in points[:1]:\n            self.assertTrue(math.sqrt(point[0]**2 + point[1]**2) <= radius, \"Point outside specified radius\")\n        plt.close()\n    def test_plot_title(self):\n        random.seed(0)\n        ax = task_func()\n        ax.set_title(\"Test Plot\")\n        self.assertEqual(ax.get_title(), \"Test Plot\", \"Plot title mismatch\")\n        plt.close()\n    def test_axes_labels(self):\n        random.seed(0)\n        ax = task_func()\n        ax.set_xlabel(\"X Axis\")\n        ax.set_ylabel(\"Y Axis\")\n        self.assertEqual(ax.get_xlabel(), \"X Axis\", \"X-axis label mismatch\")\n        self.assertEqual(ax.get_ylabel(), \"Y Axis\", \"Y-axis label mismatch\")\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plot a scatter graph of tuples and highlight the tuple with the maximum value at index 1.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot for further manipulation and testing, with the title 'Max Tuple Highlighted', x-axis labeled 'x', y-axis labeled 'y', and a legend.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    max_tuple = max(data, key=itemgetter(1))\n    tuples = np.array(data)\n    x = tuples[:,0]\n    y = tuples[:,1]\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, label='Data')\n    ax.scatter(*max_tuple, color='red', label='Max Tuple')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Max Tuple Highlighted')\n    ax.legend()\n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        data = [(10, 20), (30, 50), (60, 25), (80, 65)]\n        ax = task_func(data)\n        \n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Max Tuple Highlighted\")\n        \n        # Check the x and y axis labels\n        self.assertEqual(ax.get_xlabel(), \"x\")\n        self.assertEqual(ax.get_ylabel(), \"y\")\n        \n        # Check the data points\n        x_data, y_data = ax.collections[0].get_offsets().T\n        self.assertTrue(np.array_equal(x_data, [10, 30, 60, 80]))\n        self.assertTrue(np.array_equal(y_data, [20, 50, 25, 65]))\n        \n        # Check the highlighted point (Max Tuple)\n        x_max, y_max = ax.collections[1].get_offsets().T\n        self.assertEqual(x_max, 80)\n        self.assertEqual(y_max, 65)\n        \n    def test_case_2(self):\n        data = [(5, 10), (15, 35), (40, 55), (70, 30)]\n        ax = task_func(data)\n        \n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Max Tuple Highlighted\")\n        \n        # Check the x and y axis labels\n        self.assertEqual(ax.get_xlabel(), \"x\")\n        self.assertEqual(ax.get_ylabel(), \"y\")\n        \n        # Check the data points\n        x_data, y_data = ax.collections[0].get_offsets().T\n        self.assertTrue(np.array_equal(x_data, [5, 15, 40, 70]))\n        self.assertTrue(np.array_equal(y_data, [10, 35, 55, 30]))\n        \n        # Check the highlighted point (Max Tuple)\n        x_max, y_max = ax.collections[1].get_offsets().T\n        self.assertEqual(x_max, 40)\n        self.assertEqual(y_max, 55)\n        \n    def test_case_3(self):\n        data = [(3, 7), (9, 11), (13, 17), (19, 23)]\n        ax = task_func(data)\n        \n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Max Tuple Highlighted\")\n        \n        # Check the x and y axis labels\n        self.assertEqual(ax.get_xlabel(), \"x\")\n        self.assertEqual(ax.get_ylabel(), \"y\")\n        \n        # Check the data points\n        x_data, y_data = ax.collections[0].get_offsets().T\n        self.assertTrue(np.array_equal(x_data, [3, 9, 13, 19]))\n        self.assertTrue(np.array_equal(y_data, [7, 11, 17, 23]))\n        \n        # Check the highlighted point (Max Tuple)\n        x_max, y_max = ax.collections[1].get_offsets().T\n        self.assertEqual(x_max, 19)\n        self.assertEqual(y_max, 23)\n    \n    def test_case_4(self):\n        data = [(2, 3), (4, 5), (6, 7), (8, 9)]\n        ax = task_func(data)\n        \n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Max Tuple Highlighted\")\n        \n        # Check the x and y axis labels\n        self.assertEqual(ax.get_xlabel(), \"x\")\n        self.assertEqual(ax.get_ylabel(), \"y\")\n        \n        # Check the data points\n        x_data, y_data = ax.collections[0].get_offsets().T\n        self.assertTrue(np.array_equal(x_data, [2, 4, 6, 8]))\n        self.assertTrue(np.array_equal(y_data, [3, 5, 7, 9]))\n        \n        # Check the highlighted point (Max Tuple)\n        x_max, y_max = ax.collections[1].get_offsets().T\n        self.assertEqual(x_max, 8)\n        self.assertEqual(y_max, 9)\n        \n    def test_case_5(self):\n        data = [(20, 30), (40, 50), (60, 10), (80, 90)]\n        ax = task_func(data)\n        \n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Max Tuple Highlighted\")\n        \n        # Check the x and y axis labels\n        self.assertEqual(ax.get_xlabel(), \"x\")\n        self.assertEqual(ax.get_ylabel(), \"y\")\n        \n        # Check the data points\n        x_data, y_data = ax.collections[0].get_offsets().T\n        self.assertTrue(np.array_equal(x_data, [20, 40, 60, 80]))\n        self.assertTrue(np.array_equal(y_data, [30, 50, 10, 90]))\n        \n        # Check the highlighted point (Max Tuple)\n        x_max, y_max = ax.collections[1].get_offsets().T\n        self.assertEqual(x_max, 80)\n        self.assertEqual(y_max, 90)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts the text and href attributes of all anchor tags from a given URL's HTML content, and returns this data in a pandas DataFrame along with the time of data extraction.\nNote that: The function requires internet connectivity to fetch HTML content.\nThe function should raise the exception for: ValueError: If the provided URL is invalid or empty. URLError: If there is an issue with network connectivity or the server.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row\n    corresponds to an anchor tag in the HTML, with 'text' and 'href' containing\n    the text and the hyperlink reference of the anchor tag, respectively.\n    'fetch_time' contains the timestamp of when the data was fetched in the format\n    'YYYY-MM-DD HH:MM:SS'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n```",
        "gt": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(url):\n\n    if not url:\n        raise ValueError(\"URL must not be empty.\")\n\n    try:\n        with urllib.request.urlopen(url) as res:\n            html = res.read().decode()\n    except urllib.error.URLError as e:\n        raise urllib.error.URLError(f\"Error fetching URL {url}: {e}\")\n\n    d = pq(html)\n    anchors = [(a.text, a.get('href')) for a in d('a')]\n    fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    df = pd.DataFrame(anchors, columns=['text', 'href'])\n    df['fetch_time'] = fetch_time\n    return df",
        "test": "import unittest\nfrom unittest.mock import patch\nimport urllib.error\nclass TestCases(unittest.TestCase):\n    def test_valid_url(self):\n        \"\"\" Test with a valid URL. \"\"\"\n        url = 'https://en.wikibooks.org/wiki/Main_Page'\n        df = task_func(url)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue(all(x in df.columns for x in ['text', 'href', 'fetch_time']))\n    def test_invalid_url(self):\n        \"\"\" Test with an invalid URL. \"\"\"\n        with self.assertRaises(urllib.error.URLError):\n            task_func('https://www.invalid_example.org')\n    @patch('urllib.request.urlopen', side_effect=urllib.error.URLError('Test Error'))\n    def test_network_error(self, mock_urlopen):\n        \"\"\" Simulate a network error. \"\"\"\n        with self.assertRaises(urllib.error.URLError):\n            task_func('https://en.wikibooks.org/wiki/Main_Page')\n    def test_empty_url(self):\n        \"\"\" Test with an empty URL. \"\"\"\n        with self.assertRaises(ValueError):\n            task_func('')\n    \n    def fetch_and_parse_url(self, url):\n        \"\"\"Dynamically fetch and parse content from URL, mimicking the task_func function.\"\"\"\n        with urllib.request.urlopen(url) as response:\n            html = response.read().decode()\n        d = pq(html)\n        \n        anchors = [(a.text, a.get('href')) for a in d('a')]\n        df = pd.DataFrame(anchors, columns=['text', 'href'])\n        fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        df['fetch_time'] = fetch_time\n        return df\n    def test_dynamic_comparison(self):\n        \"\"\"Compare task_func function output with dynamically fetched content.\"\"\"\n        test_url = 'https://en.wikibooks.org/wiki/Main_Page'\n        expected_df = self.fetch_and_parse_url(test_url)\n        actual_df = task_func(test_url)\n                \n        # Comparing 'text' and 'href' columns\n        pd.testing.assert_frame_equal(actual_df.drop(columns=['fetch_time']), expected_df.drop(columns=['fetch_time']), check_like=True)\n        \n        # Optionally, check that fetch times are close enough (e.g., within a few seconds of each other)\n        actual_times = pd.to_datetime(actual_df['fetch_time'])\n        expected_times = pd.to_datetime(expected_df['fetch_time'])\n        time_difference = (actual_times - expected_times).abs()\n        max_allowed_difference = pd.Timedelta(seconds=10)  # Allow up to 5 seconds difference\n        self.assertTrue(time_difference.lt(max_allowed_difference).all(), \"Fetch times differ too much\")\n        \n    def test_fetch_time_format(self):\n        \"\"\"Verify that the 'fetch_time' column is in the correct format.\"\"\"\n        test_url = 'https://en.wikibooks.org/wiki/Main_Page'\n        df = task_func(test_url)\n        fetch_time_format = '%Y-%m-%d %H:%M:%S'\n        try:\n            # Verify each timestamp in 'fetch_time' column matches the expected format.\n            valid_format = all(datetime.strptime(time, fetch_time_format) for time in df['fetch_time'])\n            self.assertTrue(valid_format, \"All fetch_time values should match the format 'YYYY-MM-DD HH:MM:SS'.\")\n        except ValueError:\n            self.fail(\"The fetch_time column contains values not matching the format 'YYYY-MM-DD HH:MM:SS'.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Add a specific path to sys.path and update a JSON file with the current date and time. This function appends a given path to Python's sys.path and updates a JSON file with the current date and time under the key 'last_updated'.\nThe function should output with:\n    json_data (dict): The updated JSON data. The dictionary will contain a 'last_updated' key with the current datetime as its value.\nYou should write self-contained code starting with:\n```\nimport sys\nimport json\nfrom datetime import datetime\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n```",
        "gt": "import sys\nimport json\nfrom datetime import datetime\n# Constants\nPATH_TO_APPEND = '/path/to/whatever'\nJSON_FILE = '/path/to/json_file.json'\ndef task_func(path_to_append=PATH_TO_APPEND, json_file=JSON_FILE):\n    sys.path.append(path_to_append)\n\n    with open(json_file, 'r+') as file:\n        json_data = json.load(file)\n        json_data['last_updated'] = str(datetime.now())\n        file.seek(0)\n        json.dump(json_data, file, indent=4)\n        file.truncate()\n\n    return json_data",
        "test": "import unittest\nimport json\nimport os\nimport tempfile\nimport sys\nfrom datetime import datetime\n# Update this path if needed to point to an actual temporary directory\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        # Create temporary JSON files for testing in text mode\n        self.test_json_file_1 = tempfile.NamedTemporaryFile(mode='w+', delete=False)\n        self.test_json_file_2 = tempfile.NamedTemporaryFile(mode='w+', delete=False)\n        json.dump({'key': 'value'}, self.test_json_file_1)\n        json.dump({'key': 'value'}, self.test_json_file_2)\n        self.test_json_file_1.close()\n        self.test_json_file_2.close()\n        self.tmp_file = tempfile.mktemp(suffix='.json')\n        with open(self.tmp_file, 'w') as f:\n            json.dump({'initial_key': 'initial_value'}, f)\n    def tearDown(self):\n        # Remove temporary JSON files after testing\n        os.unlink(self.test_json_file_1.name)\n        os.unlink(self.test_json_file_2.name)\n        os.remove(self.tmp_file)\n        \n    def test_path_append(self):\n        # Test if the path is correctly appended to sys.path\n        new_path = '/new/test/path'\n        task_func(path_to_append=new_path, json_file=self.test_json_file_1.name)\n        self.assertIn(new_path, sys.path)\n    def test_json_update_1(self):\n        # Test if the JSON file is correctly updated (test_json_file_1)\n        output = task_func(json_file=self.test_json_file_1.name)\n        self.assertIn('last_updated', output)\n        self.assertIsInstance(datetime.strptime(output['last_updated'], '%Y-%m-%d %H:%M:%S.%f'), datetime)\n    def test_json_update_2(self):\n        # Test if the JSON file is correctly updated (test_json_file_2)\n        output = task_func(json_file=self.test_json_file_2.name)\n        self.assertIn('last_updated', output)\n        self.assertIsInstance(datetime.strptime(output['last_updated'], '%Y-%m-%d %H:%M:%S.%f'), datetime)\n    def test_default_path(self):\n        # Test if the default path is correctly appended when no argument is passed\n        task_func(json_file=self.test_json_file_1.name)\n        self.assertIn('/path/to/whatever', sys.path)\n    def test_default_json(self):\n        # Test if the default JSON file is correctly updated when no argument is passed\n        output = task_func(json_file=self.tmp_file)\n        self.assertIn('last_updated', output)\n        self.assertIsInstance(datetime.strptime(output['last_updated'], '%Y-%m-%d %H:%M:%S.%f'), datetime)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Retrieves user information from the GitHub API for a given username, normalizes all string data to ASCII, and returns a dictionary of the normalized data. This function demonstrates data retrieval from a web API and handling of Unicode data normalization.\nThe function should raise the exception for: requests.exceptions.HTTPError: For any HTTP response indicating an error.\nThe function should output with:\n    dict: A dictionary with the user's data, where all string values are normalized to ASCII.\nYou should write self-contained code starting with:\n```\nimport unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n```",
        "gt": "import unicodedata\nimport requests\nURL = 'https://api.github.com/users/'\ndef task_func(username):\n    response = requests.get(URL + username)\n    try:\n        response.raise_for_status()  # This will raise an HTTPError if the response was an error\n        user_data = response.json()\n    except requests.exceptions.HTTPError as e:\n        # Optionally, log the error or handle it according to your needs\n        error_msg = f\"Failed to fetch user data for '{username}'. HTTP status: {e.response.status_code} - {e.response.reason}.\"\n        raise Exception(error_msg) from e\n\n    normalized_user_data = {}\n    for key, value in user_data.items():\n        if isinstance(value, str):\n            normalized_value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode()\n            normalized_user_data[key] = normalized_value\n        else:\n            normalized_user_data[key] = value\n\n    return normalized_user_data",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport requests\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_return_type(self, mock_get):\n        mock_get.return_value.json.return_value = {'login': 'user', 'name': 'Test User'}\n        result = task_func('user')\n        self.assertIsInstance(result, dict)\n    @patch('requests.get')\n    def test_normalized_string(self, mock_get):\n        mock_get.return_value.json.return_value = {'login': 'user', 'name': 'T\u00e9st \u00dcser'}\n        result = task_func('user')\n        self.assertEqual(result['name'], 'Test User')\n    @patch('requests.get')\n    def test_non_string_values(self, mock_get):\n        mock_get.return_value.json.return_value = {'login': 'user', 'id': 12345}\n        result = task_func('user')\n        self.assertEqual(result['id'], 12345)\n    @patch('requests.get')\n    def test_empty_username(self, mock_get):\n        mock_get.return_value.json.return_value = {}\n        result = task_func('')\n        self.assertEqual(result, {})\n    @patch('requests.get')\n    def test_error_response(self, mock_get):\n        mock_get.return_value.raise_for_status = Mock(side_effect=requests.exceptions.HTTPError(\"404 Not Found\"))\n        with self.assertRaises(Exception) as context:\n            task_func('nonexistentuser')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw the correlation heatmap of the Boston Housing dataset using Seaborn, with an option to save it to a specified file.\nThe function should raise the exception for: ValueError: If an error occurs in generating or saving the plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the heatmap plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    try:\n        # Set font to Arial\n        font = {'sans-serif': 'Arial', 'family': 'sans-serif'}\n        plt.rc('font', **font)\n\n        # boston = load_boston()\n        # boston_df = pd.DataFrame(data=boston.data, columns=boston.feature_names)\n        # corr = boston_df.corr()\n\n        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n        target = raw_df.values[1::2, 2]\n\n        # Step 1: Convert data and target into DataFrame\n        columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']\n        boston_df = pd.DataFrame(data=data, columns=columns)\n\n        # Step 2: Compute correlation matrix\n        corr = boston_df.corr()\n\n\n        sns.set_theme(style=\"white\")  # Optional: for better aesthetics\n        plt.figure(figsize=(10, 8))  # Optional: adjust the size of the heatmap\n        ax = sns.heatmap(corr, annot=True)  # 'annot=True' to display correlation values\n        # if file_path:\n        #     plt.savefig(file_path)\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_basic_functionality(self):\n        ax = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n    def test_heatmap_features(self):\n        ax = task_func()\n        heatmap_data = ax.get_children()[0].get_array().data\n        self.assertEqual(heatmap_data.shape, (169,))  # Assuming Boston dataset has 13 features\n    \n    def test_heatmap_values(self):\n        ax = task_func()\n        heatmap_data = ax.get_children()[0].get_array().data\n        \n        expect = [1.0, -0.20046921966254744, 0.4065834114062594, -0.05589158222224156, 0.4209717113924554, -0.21924670286251308, 0.3527342509013634, -0.37967008695102467, 0.6255051452626024, 0.5827643120325854, 0.2899455792795226, -0.3850639419942239, 0.4556214794479463, -0.20046921966254744, 1.0, -0.5338281863044696, -0.04269671929612169, -0.5166037078279843, 0.31199058737409047, -0.5695373420992109, 0.6644082227621105, -0.3119478260185367, -0.3145633246775997, -0.3916785479362161, 0.1755203173828273, -0.41299457452700283, 0.4065834114062594, -0.5338281863044696, 1.0, 0.06293802748966515, 0.7636514469209139, -0.39167585265684274, 0.6447785113552554, -0.7080269887427675, 0.5951292746038485, 0.7207601799515422, 0.38324755642888936, -0.3569765351041928, 0.603799716476621, -0.05589158222224156, -0.04269671929612169, 0.06293802748966515, 1.0, 0.09120280684249558, 0.09125122504345677, 0.08651777425454328, -0.09917578017472799, -0.00736824088607757, -0.03558651758591146, -0.12151517365806228, 0.048788484955166495, -0.05392929837569424, 0.4209717113924554, -0.5166037078279843, 0.7636514469209139, 0.09120280684249558, 1.0, -0.3021881878495924, 0.7314701037859592, -0.7692301132258282, 0.6114405634855762, 0.6680232004030217, 0.18893267711276884, -0.3800506377924, 0.5908789208808451, -0.21924670286251308, 0.31199058737409047, -0.39167585265684274, 0.09125122504345677, -0.3021881878495924, 1.0, -0.24026493104775065, 0.20524621293005416, -0.20984666776610833, -0.2920478326232189, -0.35550149455908525, 0.1280686350925421, -0.6138082718663955, 0.3527342509013634, -0.5695373420992109, 0.6447785113552554, 0.08651777425454328, 0.7314701037859592, -0.24026493104775065, 1.0, -0.747880540868632, 0.4560224517516137, 0.5064555935507051, 0.2615150116719584, -0.273533976638513, 0.6023385287262395, -0.37967008695102467, 0.6644082227621105, -0.7080269887427675, -0.09917578017472799, -0.7692301132258282, 0.20524621293005416, -0.747880540868632, 1.0, -0.4945879296720758, -0.5344315844084577, -0.23247054240825826, 0.2915116731330399, -0.4969958308636848, 0.6255051452626024, -0.3119478260185367, 0.5951292746038485, -0.00736824088607757, 0.6114405634855762, -0.20984666776610833, 0.4560224517516137, -0.4945879296720758, 1.0, 0.9102281885331865, 0.46474117850306057, -0.44441281557512585, 0.4886763349750666, 0.5827643120325854, -0.3145633246775997, 0.7207601799515422, -0.03558651758591146, 0.6680232004030217, -0.2920478326232189, 0.5064555935507051, -0.5344315844084577, 0.9102281885331865, 1.0, 0.4608530350656702, -0.44180800672281423, 0.5439934120015698, 0.2899455792795226, -0.3916785479362161, 0.38324755642888936, -0.12151517365806228, 0.18893267711276884, -0.35550149455908525, 0.2615150116719584, -0.23247054240825826, 0.46474117850306057, 0.4608530350656702, 1.0, -0.1773833023052333, 0.3740443167146772, -0.3850639419942239, 0.1755203173828273, -0.3569765351041928, 0.048788484955166495, -0.3800506377924, 0.1280686350925421, -0.273533976638513, 0.2915116731330399, -0.44441281557512585, -0.44180800672281423, -0.1773833023052333, 1.0, -0.36608690169159663, 0.4556214794479463, -0.41299457452700283, 0.603799716476621, -0.05392929837569424, 0.5908789208808451, -0.6138082718663955, 0.6023385287262395, -0.4969958308636848, 0.4886763349750666, 0.5439934120015698, 0.3740443167146772, -0.36608690169159663, 1.0]\n        self.assertAlmostEqual(heatmap_data.tolist(), expect, \"DataFrame contents should match the expected output\")\n    def test_plot_appearance(self):\n        ax = task_func()\n        self.assertEqual(ax.get_xlabel(), \"\")\n        self.assertEqual(ax.get_ylabel(), \"\")\n        self.assertEqual(ax.get_title(), \"\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the correlation between two data series and return a scatter plot along with the correlation coefficient.\nThe function should output with:\n    tuple:\n    float: The correlation coefficient.\n    Axes: The scatter plot of the two data series.\nYou should write self-contained code starting with:\n```\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n```",
        "gt": "from scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(data_dict, data_keys):\n    x = data_dict[data_keys[0]]\n    y = data_dict[data_keys[1]]\n    correlation, _ = stats.pearsonr(x, y)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    \n    return correlation, ax",
        "test": "import unittest\nimport numpy as np\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data_dict = {'X': [1, 2, 3, 4, 5], 'Y': [2, 3, 5, 7, 8]}\n        data_keys = ['X', 'Y']\n        correlation, plot = task_func(data_dict, data_keys)\n        self.assertAlmostEqual(correlation, 0.9923, places=4)\n        self.assertTrue(isinstance(plot, plt.Axes))\n        \n    def test_case_2(self):\n        data_dict = {'A': [5, 4, 3, 2, 1], 'B': [1, 2, 3, 4, 5]}\n        data_keys = ['A', 'B']\n        correlation, plot = task_func(data_dict, data_keys)\n        self.assertAlmostEqual(correlation, -1.0, places=4)\n        self.assertTrue(isinstance(plot, plt.Axes))\n        \n    def test_case_3(self):\n        data_dict = {'X': [1, 1, 1, 1, 1], 'Y': [1, 1, 1, 1, 1]}\n        data_keys = ['X', 'Y']\n        correlation, plot = task_func(data_dict, data_keys)\n        self.assertTrue(np.isnan(correlation))\n        self.assertTrue(isinstance(plot, plt.Axes))\n        \n    def test_case_4(self):\n        data_dict = {'X': [1, 2, 3, 4, 5], 'Y': [1, 4, 9, 16, 25]}\n        data_keys = ['X', 'Y']\n        correlation, plot = task_func(data_dict, data_keys)\n        self.assertAlmostEqual(correlation, 0.9811, places=4)\n        self.assertTrue(isinstance(plot, plt.Axes))\n        \n    def test_case_5(self):\n        data_dict = {'X': [1, 3, 5, 7, 9], 'Y': [2, 6, 10, 14, 18]}\n        data_keys = ['X', 'Y']\n        correlation, plot = task_func(data_dict, data_keys)\n        self.assertAlmostEqual(correlation, 1.0, places=4)\n        self.assertTrue(isinstance(plot, plt.Axes))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze the sentiment of a text using the provided SentimentIntensityAnalyzer. The text is first cleaned by: - Removing all non-alphanumeric characters except spaces. - Converting to lowercase. - Removing punctuation.\nThe function should output with:\n    dict: A dictionary with sentiment scores. The dictionary contains four scores:\n    'compound': The overall sentiment score.\n    'neg': Negative sentiment score.\n    'neu': Neutral sentiment score.\n    'pos': Positive sentiment score.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n```",
        "gt": "import re\nimport string\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nPUNCTUATIONS = string.punctuation\ndef task_func(text: str, sia: SentimentIntensityAnalyzer) -> dict:\n    text = ALPHANUMERIC.sub(' ', text).lower()\n    text = text.translate(str.maketrans('', '', PUNCTUATIONS))\n    sentiment_scores = sia.polarity_scores(text)\n    return sentiment_scores",
        "test": "import unittest\n# Mock the SentimentIntensityAnalyzer for our tests\nclass MockedSentimentIntensityAnalyzer:\n    def polarity_scores(self, text):\n        return {'compound': 0.5, 'neg': 0.25, 'neu': 0.25, 'pos': 0.5}\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        sia = MockedSentimentIntensityAnalyzer()\n        result = task_func(\"I love Python!\", sia)\n        expected = {'compound': 0.5, 'neg': 0.25, 'neu': 0.25, 'pos': 0.5}\n        self.assertEqual(result, expected)\n    \n    def test_case_2(self):\n        sia = MockedSentimentIntensityAnalyzer()\n        result = task_func(\"I hate rainy days.\", sia)\n        self.assertEqual(result['neg'], 0.25)\n    \n    def test_case_3(self):\n        sia = MockedSentimentIntensityAnalyzer()\n        result = task_func(\"The weather is neutral today.\", sia)\n        self.assertEqual(result['neu'], 0.25)\n    \n    def test_case_4(self):\n        sia = MockedSentimentIntensityAnalyzer()\n        result = task_func(\"Absolutely fantastic!\", sia)\n        self.assertEqual(result['pos'], 0.5)\n    \n    def test_case_5(self):\n        sia = MockedSentimentIntensityAnalyzer()\n        result = task_func(\"This is a bad idea!\", sia)\n        self.assertEqual(result['neg'], 0.25)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the occurrence of values with the keys \"x,\" \"y\" and \"z\" from a list of dictionaries \"d.\"\nThe function should output with:\n    dict: A dictionary with keys as 'x', 'y', and 'z' and values as Counter objects.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom collections import Counter\ndef task_func(d):\n```",
        "gt": "import pandas as pd\nfrom collections import Counter\ndef task_func(d):\n    df = pd.DataFrame(d)\n    counts = {}\n\n    for key in ['x', 'y', 'z']:\n        if key in df.columns:\n            counts[key] = Counter(df[key].dropna().tolist())\n        else:\n            counts[key] = Counter()\n\n    return counts",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_empty_list(self):\n        self.assertEqual(task_func([]), {'x': Counter(), 'y': Counter(), 'z': Counter()})\n    def test_all_keys_present(self):\n        data = [{'x': 1, 'y': 2, 'z': 3}, {'x': 1, 'y': 3, 'z': 2}]\n        expected = {'x': Counter({1: 2}), 'y': Counter({2: 1, 3: 1}), 'z': Counter({3: 1, 2: 1})}\n        self.assertEqual(task_func(data), expected)\n    def test_missing_keys(self):\n        data = [{'x': 1}, {'y': 2}, {'z': 3}]\n        expected = {'x': Counter({1: 1}), 'y': Counter({2: 1}), 'z': Counter({3: 1})}\n        self.assertEqual(task_func(data), expected)\n    def test_duplicate_values(self):\n        data = [{'x': 1, 'y': 2, 'z': 3}, {'x': 1, 'y': 2, 'z': 3}, {'x': 1, 'y': 2}]\n        expected = {'x': Counter({1: 3}), 'y': Counter({2: 3}), 'z': Counter({3: 2})}\n        self.assertEqual(task_func(data), expected)\n    def test_mixed_data_types(self):\n        data = [{'x': 1, 'y': 'a', 'z': 3.5}, {'x': '1', 'y': 'a', 'z': 3.5}]\n        expected = {'x': Counter({1: 1, '1': 1}), 'y': Counter({'a': 2}), 'z': Counter({3.5: 2})}\n        self.assertEqual(task_func(data), expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This code takes a text input, calculates the lengths of the words, and visualizes the distribution of word lengths using a histogram and a KDE curve (if applicable) on a matplotlib subplot.\nThe function should output with:\n    matplotlib.axes._axes.Axes: An Axes object showing the histogram and optionally the KDE\n    plot of word lengths. This visual representation helps in\n    understanding the distribution of word lengths in the given text.\nYou should write self-contained code starting with:\n```\nimport re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```",
        "gt": "import re\nfrom scipy.stats import gaussian_kde\nfrom scipy import linalg\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    words = re.split(r\"\\W+\", text)\n    word_counts = [len(word) for word in words if word]\n\n    _, ax = plt.subplots()\n\n    if word_counts:  # Check if word_counts is not empty\n        ax.hist(word_counts, bins=30, edgecolor='black', alpha=0.7)\n\n        # Add KDE plot if applicable\n        if len(word_counts) > 1 and np.var(word_counts) != 0:\n            try:\n                kde = gaussian_kde(word_counts)\n                x_range = np.linspace(min(word_counts), max(word_counts), 100)\n                ax.plot(x_range, kde(x_range), color='red')  # KDE line in red\n            except linalg.LinAlgError:\n                # Handle the singular matrix error\n                pass\n\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the task_func function\"\"\"\n    def test_simple_sentence(self):\n        \"\"\"Test a simple sentence\"\"\"\n        ax1 = task_func(\"This is a test\")\n        self.assertIsInstance(ax1, plt.Axes)\n        # The number of bars might differ due to matplotlib's binning strategy\n        unique_word_lengths = {len(word) for word in \"This is a test\".split() if word}\n        self.assertTrue(\n            len(ax1.patches) >= len(unique_word_lengths),\n            \"Incorrect number of bars for a simple sentence\",\n        )\n    def test_empty_string(self):\n        \"\"\"Test an empty string\"\"\"\n        ax2 = task_func(\"\")\n        self.assertIsInstance(ax2, plt.Axes)\n        self.assertEqual(\n            len(ax2.patches), 0, \"There should be no bars for an empty string\"\n        )\n    def test_special_characters(self):\n        \"\"\"Test special characters and numbers\"\"\"\n        ax3 = task_func(\"Hello, world! 1234\")\n        self.assertIsInstance(ax3, plt.Axes)\n        # The number of bars might differ due to matplotlib's binning strategy\n        unique_word_lengths = {\n            len(word) for word in \"Hello, world! 1234\".split() if word\n        }\n        self.assertTrue(\n            len(ax3.patches) >= len(unique_word_lengths),\n            \"Incorrect handling of special characters and numbers\",\n        )\n    def test_repeated_words(self):\n        \"\"\"Test repeated words\"\"\"\n        ax4 = task_func(\"repeat repeat repeat\")\n        self.assertIsInstance(ax4, plt.Axes)\n        # Only one unique word length: 6\n        self.assertTrue(len(ax4.patches) >= 1, \"Incorrect handling of repeated words\")\n    def test_long_text(self):\n        \"\"\"Test a long text\"\"\"\n        text = \"A long text with multiple words of different lengths\"\n        ax5 = task_func(text)\n        self.assertIsInstance(ax5, plt.Axes)\n        # Adjust expectation for number of bars due to matplotlib's binning\n        words = re.split(r\"\\W+\", text)\n        word_counts = pd.Series([len(word) for word in words if word])\n        expected_unique_lengths = len(set(word_counts))\n        self.assertTrue(\n            len(ax5.patches) >= expected_unique_lengths,\n            \"Incorrect plot for a long text\",\n        )\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Move all json files in a source directory to a target directory and rename them by splitting the filename the last time \"-\" occurs and keeping the prefix part of the filename.\nThe function should output with:\n    None\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport shutil\n# Constants\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n```",
        "gt": "import os\nimport re\nimport shutil\n# Constants\nSOURCE_DIR = '/source/dir'\nTARGET_DIR = '/target/dir'\nFILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\ndef task_func():\n    SOURCE_DIR = '/source/dir'\n    TARGET_DIR = '/target/dir'\n    FILE_PATTERN = re.compile(r'^(.*?)-\\d+\\.json$')\n    for filename in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.match(filename)\n        if match is not None:\n            prefix = match.group(1)\n            new_filename = f'{prefix}.json'\n            shutil.move(os.path.join(SOURCE_DIR, filename), os.path.join(TARGET_DIR, new_filename))",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock, call\nimport os\nimport shutil\nsource_dirs = [\"/mnt/data/test_data/source_0\", \"/mnt/data/test_data/source_1\", \"/mnt/data/test_data/source_2\", \"/mnt/data/test_data/source_3\", \"/mnt/data/test_data/source_4\"]\ntarget_dirs = [\"/mnt/data/test_data/target_0\", \"/mnt/data/test_data/target_1\", \"/mnt/data/test_data/target_2\", \"/mnt/data/test_data/target_3\", \"/mnt/data/test_data/target_4\"]\nclass TestCases(unittest.TestCase):\n    @patch('os.listdir')\n    @patch('shutil.move')\n    @patch('os.path.join', side_effect=lambda *args: '/'.join(args))\n    def test_move_json_files(self, mock_join, mock_move, mock_listdir):\n        mock_listdir.return_value = ['data-1.json', 'info-2.json', 'report-3.json']\n        task_func()\n        expected_calls = [\n            call('/source/dir/data-1.json', '/target/dir/data.json'),\n            call('/source/dir/info-2.json', '/target/dir/info.json'),\n            call('/source/dir/report-3.json', '/target/dir/report.json')\n        ]\n        mock_move.assert_has_calls(expected_calls, any_order=True)\n    @patch('os.listdir', MagicMock(return_value=[]))\n    @patch('shutil.move')\n    def test_no_files_to_move(self, mock_move):\n        task_func()\n        mock_move.assert_not_called()\n    @patch('os.listdir', return_value=['wrongfile.txt', 'not-a-json-1.txt', 'badname.json'])\n    @patch('shutil.move')\n    def test_incorrect_file_patterns(self, mock_move, mock_listdir):\n        task_func()\n        mock_move.assert_not_called()\n    @patch('os.listdir', return_value=['complex-pattern-123-1.json', 'simple-2.json'])\n    @patch('shutil.move')\n    @patch('os.path.join', side_effect=lambda *args: '/'.join(args))\n    def test_renaaccuracy(self, mock_join, mock_move, mock_listdir):\n        task_func()\n        expected_calls = [\n            call('/source/dir/complex-pattern-123-1.json', '/target/dir/complex-pattern-123.json'),\n            call('/source/dir/simple-2.json', '/target/dir/simple.json')\n        ]\n        mock_move.assert_has_calls(expected_calls, any_order=True)\n    @patch('os.listdir', return_value=['misleading-name-not-json-file-1', 'another-fake-2.json.data'])\n    @patch('shutil.move')\n    def test_special_cases_handling(self, mock_move, mock_listdir):\n        task_func()\n        mock_move.assert_not_called()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save all words in a text beginning with the \"$\" character in a CSV file, excluding any words that are solely composed of punctuation characters.\nNote that: The header of the csv row is \"Word\"\nThe function should output with:\n    str: The absolute path of the saved CSV file.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n```",
        "gt": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport csv\nimport os\nPUNCTUATION = set(punctuation)\ndef task_func(text, filename):\n    \n\n    punctuation_set = set(punctuation)\n    tokenizer = RegexpTokenizer(r'\\$\\w+')\n    dollar_prefixed_words = tokenizer.tokenize(text)\n    dollar_words = [word for word in dollar_prefixed_words if\n                          not all(char in punctuation_set for char in word[1:])]\n\n    with open(filename, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow([\"Word\"])\n        for word in dollar_words:\n            writer.writerow([word])\n    return os.path.abspath(filename)",
        "test": "import unittest\nimport os\nimport csv\n# Utility function to read the content of a CSV file\ndef read_csv_content(file_path):\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        return list(reader)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.filenames = []\n        for i in range(1,7):\n            self.filenames.append(\"task_func_test_output_\"+str(i)+\".csv\")\n    def tearDown(self):\n        # Clean up the test file\n        for filename in self.filenames:\n            if os.path.exists(filename):\n                os.remove(filename)\n    def test_case_1(self):\n        text = \"$abc def $efg $hij klm $ $abc $abc $hij $hij\"\n        filename = self.filenames[0]\n        result_path = task_func(text, filename)\n        \n        # Check if the returned path is correct\n        self.assertTrue(os.path.exists(result_path))\n        \n        # Check the contents of the CSV file\n        content = read_csv_content(result_path)\n        expected_content = [[\"Word\"], [\"$abc\"], [\"$efg\"], [\"$hij\"], [\"$abc\"], [\"$abc\"], [\"$hij\"], [\"$hij\"]]\n        self.assertEqual(content, expected_content)\n        \n    def test_case_2(self):\n        text = \"$hello world $this is a $test\"\n        filename = self.filenames[1]\n        result_path = task_func(text, filename)\n        \n        # Check if the returned path is correct\n        self.assertTrue(os.path.exists(result_path))\n        \n        # Check the contents of the CSV file\n        content = read_csv_content(result_path)\n        expected_content = [[\"Word\"], [\"$hello\"], [\"$this\"], [\"$test\"]]\n        self.assertEqual(content, expected_content)\n        \n    def test_case_3(self):\n        text = \"There are no dollar words here\"\n        filename = self.filenames[2]\n        result_path = task_func(text, filename)\n        \n        # Check if the returned path is correct\n        self.assertTrue(os.path.exists(result_path))\n        \n        # Check the contents of the CSV file (it should only have the header)\n        content = read_csv_content(result_path)\n        expected_content = [[\"Word\"]]\n        self.assertEqual(content, expected_content)\n    \n    def test_case_4(self):\n        text = \"$word1 $word2 $word3 $word4 $word5\"\n        filename = self.filenames[3]\n        result_path = task_func(text, filename)\n        \n        # Check if the returned path is correct\n        self.assertTrue(os.path.exists(result_path))\n        \n        # Check the contents of the CSV file\n        content = read_csv_content(result_path)\n        expected_content = [[\"Word\"], [\"$word1\"], [\"$word2\"], [\"$word3\"], [\"$word4\"], [\"$word5\"]]\n        self.assertEqual(content, expected_content)\n        \n    def test_case_5(self):\n        text = \"No dollar words but containing special characters @ # % & *\"\n        filename = self.filenames[4]\n        result_path = task_func(text, filename)\n        \n        # Check if the returned path is correct\n        self.assertTrue(os.path.exists(result_path))\n        \n        # Check the contents of the CSV file (it should only have the header)\n        content = read_csv_content(result_path)\n        expected_content = [[\"Word\"]]\n        self.assertEqual(content, expected_content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scales numeric columns of a data dictionary using the StandardScaler. This function scales the numeric columns of a dataframe using the StandardScaler from scikit-learn. Non-numeric columns remain unchanged. If a column contains mixed data types, it tries to convert the entire column to float. If any value in the column cannot be converted to float, the entire column is left unchanged.\nThe function should output with:\n    pd.DataFrame: Dataframe with scaled numeric columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data):\n    dataframe = pd.DataFrame(data)\n    # Initialize the scaler\n    scaler = StandardScaler()\n\n    # Iterate over columns and scale if they are numeric\n    for column in dataframe.columns:\n        if dataframe[column].dtype in [\"float64\", \"int64\"]:\n            dataframe[column] = scaler.fit_transform(\n                dataframe[column].values.reshape(-1, 1)\n            )\n        else:\n            # Attempt to convert the entire column to float and then scale\n            converted_column = dataframe[column].apply(pd.to_numeric, errors=\"coerce\")\n            if (\n                not converted_column.isna().all()\n            ):  # If all values are convertible to float\n                dataframe[column] = scaler.fit_transform(\n                    converted_column.values.reshape(-1, 1)\n                )\n    return dataframe",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        \"\"\"Test the correctness of the scaling applied by the function.\"\"\"\n        # Creating a sample dataframe with three numeric columns\n        data = {\n                \"a\": [10.5, 23.4, 15.6, 78.9],\n                \"b\": [45.6, 67.8, 89.0, 12.3],\n                \"c\": [12.3, 45.6, 78.9, 0.1],\n            }\n        df = pd.DataFrame(\n            data\n        )\n        result = task_func(data)\n        # Checking if the mean of scaled columns is approximately 0 and standard deviation is approximately 1\n        self.assertTrue(np.isclose(result[\"a\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(result[\"b\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(np.std(result[\"a\"]), 1, atol=1e-2))\n        self.assertTrue(np.isclose(np.std(result[\"b\"]), 1, atol=1e-2))\n    def test_case_2(self):\n        \"\"\"Test with an empty DataFrame.\"\"\"\n        # Creating an empty dataframe\n        data = {}\n        df = pd.DataFrame(data)\n        result = task_func(data)\n        # Ensuring the result is also an empty dataframe\n        self.assertTrue(result.empty)\n    def test_case_3(self):\n        \"\"\"Test with a DataFrame that doesn't have any columns to scale.\"\"\"\n        # Creating a dataframe with a single non-numeric column\n        data = {\"c\": [\"foo\", \"bar\"]}\n        df = pd.DataFrame(data)\n        result = task_func(data)\n        # Ensuring the output dataframe is unchanged\n        pd.testing.assert_frame_equal(result, df, check_dtype=False)\n    def test_case_4(self):\n        \"\"\"Test with a DataFrame where all columns are to be scaled.\"\"\"\n        # Creating a dataframe with two numeric columns\n        data = {\"a\": [10.5, 23.4, 15.6, 78.9], \"b\": [45.6, 67.8, 89.0, 12.3]}\n        df = pd.DataFrame(\n            data\n        )\n        result = task_func(data)\n        # Checking if the mean of scaled columns is approximately 0 and standard deviation is approximately 1\n        self.assertTrue(np.isclose(result[\"a\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(result[\"b\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(np.std(result[\"a\"]), 1, atol=1e-2))\n        self.assertTrue(np.isclose(np.std(result[\"b\"]), 1, atol=1e-2))\n    def test_case_5(self):\n        \"\"\"Test with a DataFrame with single rows.\"\"\"\n        # Creating a dataframe with a single row and three columns\n        data = {\"a\": [5.5], \"b\": [8.6], \"c\": [7.7]}\n        df = pd.DataFrame(data)\n        result = task_func(data)\n        self.assertDictEqual(result.to_dict(), {'a': {0: 0.0}, 'b': {0: 0.0}, 'c': {0: 0.0}})\n    def test_case_6(self):\n        \"\"\"Test with a DataFrame with mixed datatypes.\"\"\"\n        # Creating a dataframe with mixed data types (both floats and strings) in columns\n        data = {\n                \"a\": [10.5, 23.4, 15.6, \"78.9\"],\n                \"b\": [45.6, \"67.8\", 89.0, 12.3],\n                \"c\": [12.3, 45.6, 78.9, \"0.1\"],\n            }\n        df = pd.DataFrame(\n            data\n        )\n        result = task_func(data)\n        # Checking if the mean of scaled columns is approximately 0 and standard deviation is approximately 1\n        self.assertTrue(np.isclose(result[\"a\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(result[\"b\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(np.std(result[\"a\"]), 1, atol=1e-2))\n        self.assertTrue(np.isclose(np.std(result[\"b\"]), 1, atol=1e-2))\n    def test_case_7(self):\n        \"\"\"Test with a DataFrame with negative values.\"\"\"\n        # Creating a dataframe with negative values in columns\n        data = {\"a\": [-1, -2, -3, -4], \"b\": [-4, -5, -6, -7], \"c\": [-7, -8, -9, -10]}\n        df = pd.DataFrame(\n            data\n        )\n        result = task_func(data)\n        # Checking if the mean of scaled columns is approximately 0 and standard deviation is approximately 1\n        self.assertTrue(np.isclose(result[\"a\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(result[\"b\"].mean(), 0, atol=1e-7))\n        self.assertTrue(np.isclose(np.std(result[\"a\"]), 1, atol=1e-2))\n        self.assertTrue(np.isclose(np.std(result[\"b\"]), 1, atol=1e-2))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a Unix timestamp to a formatted date and time string in a specified timezone.\nThe function should output with:\n    str: A string representing the date and time in the target timezone, formatted as '%Y-%m-%d %H:%M:%S'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n```",
        "gt": "from datetime import datetime\nimport pytz\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(unix_timestamp, target_timezone):\n    # Convert the Unix timestamp to a UTC datetime object\n    datetime_utc = datetime.utcfromtimestamp(unix_timestamp).replace(tzinfo=pytz.utc)\n\n    # Convert the UTC datetime to the target timezone\n    datetime_in_target_timezone = datetime_utc.astimezone(pytz.timezone(target_timezone))\n\n    # Format the datetime object in the target timezone to the specified string format\n    formatted_datetime = datetime_in_target_timezone.strftime(DATE_FORMAT)\n\n    return formatted_datetime",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func(1347517370, 'America/New_York')\n        self.assertEqual(result, \"2012-09-13 02:22:50\")\n    def test_case_2(self):\n        result = task_func(0, 'UTC')\n        self.assertEqual(result, \"1970-01-01 00:00:00\")\n    def test_case_3(self):\n        result = task_func(1609459200, 'Asia/Tokyo')\n        self.assertEqual(result, \"2021-01-01 09:00:00\")\n    def test_case_4(self):\n        result = task_func(0, 'Asia/Kolkata')\n        self.assertEqual(result, \"1970-01-01 05:30:00\")\n    def test_case_5(self):\n        result = task_func(1672531199, 'Australia/Sydney')\n        self.assertEqual(result, \"2023-01-01 10:59:59\")\n    def test_case_6(self):\n        result = task_func(1609459200, 'America/New_York')\n        self.assertEqual(result, \"2020-12-31 19:00:00\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a text string, removing duplicate consecutive words and stopwords defined by nltk.corpus, generates a square co-occurrence matrix of words, and plots this matrix.\nThe function should output with:\n    tuple:\n    pd.DataFrame: Square co-occurrence matrix of words.\n    matplotlib.axes.Axes: Plot object of the co-occurrence matrix.\nYou should write self-contained code starting with:\n```\n# Importing the required libraries\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n```",
        "gt": "# Importing the required libraries\nimport re\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\ndef task_func(text, n=2):\n    # Pre-processing the text\n    # Remove duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n    stop_words = set(stopwords.words('english'))\n    # Remove stopwords\n    words_filtered = ' '.join([word for word in text.lower().split() if word not in stop_words])\n\n    # If words_filtered is empty after removing stopwords, return an empty DataFrame\n    if not words_filtered.strip():\n        empty_df = pd.DataFrame()\n        fig, ax = plt.subplots()\n        return empty_df, ax\n\n    # Generating co-occurrence matrix and plotting as before\n    vectorizer = CountVectorizer(ngram_range=(n, n))\n    X = vectorizer.fit_transform([words_filtered])  # Ensure input is treated as a single document\n    matrix = (X.T * X).todense()\n    np.fill_diagonal(matrix, 0)\n    feature_names = vectorizer.get_feature_names_out() if hasattr(vectorizer,\n                                                                  'get_feature_names_out') else vectorizer.get_feature_names()\n    matrix_df = pd.DataFrame(matrix, index=feature_names, columns=feature_names)\n\n    fig, ax = plt.subplots()\n    cax = ax.matshow(matrix_df, cmap='hot')\n    fig.colorbar(cax)\n    ax.set_xticks(np.arange(len(matrix_df.columns)))\n    ax.set_yticks(np.arange(len(matrix_df.index)))\n    ax.set_xticklabels(matrix_df.columns, rotation=90)\n    ax.set_yticklabels(matrix_df.index)\n\n    return matrix_df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_simple_text(self):\n        \"\"\"Test with a simple text.\"\"\"\n        text = \"hello world\"\n        matrix, _ = task_func(text)\n        self.assertEqual(matrix.shape, (1, 1), \"Matrix shape should be (1, 1) for unique words 'hello' and 'world'.\")\n    def test_text_with_stopwords(self):\n        \"\"\"Test text with stopwords removed.\"\"\"\n        text = \"this is a\"\n        matrix, _ = task_func(text)\n        self.assertTrue(matrix.empty, \"Matrix should be empty after removing stopwords.\")\n    def test_duplicate_words(self):\n        \"\"\"Test text with duplicate consecutive words.\"\"\"\n        text = \"happy happy joy joy\"\n        matrix, _ = task_func(text)\n        self.assertIn('happy joy', matrix.columns, \"Matrix should contain 'happy joy' after duplicates are removed.\")\n    def test_ngram_range(self):\n        \"\"\"Test with a specific n-gram range.\"\"\"\n        text = \"jump high and run fast\"\n        # Assuming no preprocessing that removes words, we expect 3 unique tri-grams.\n        matrix, _ = task_func(text, n=3)\n        # Expecting a 3x3 matrix since there are 3 unique tri-grams with no overlap in this simple case.\n        self.assertEqual(matrix.shape, (2, 2),\n                         \"Matrix shape should be (3, 3) for a tri-gram analysis without word removal.\")\n    def test_empty_text(self):\n        \"\"\"Test with an empty string.\"\"\"\n        text = \"\"\n        matrix, _ = task_func(text)\n        self.assertTrue(matrix.empty, \"Matrix should be empty for an empty string.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a constant list of cities (CITIES) and a dictionary 'city_dict' of people's names and their favorite cities, this function generates a dictionary of city populations for the cities in the list and plots the population data using a bar chart. The population values are randomly generated integers between 1 and 'max_range' if the city is in the list of cities, otherwise the population value is -1. The random number generator is seeded with the value 'seed' before generating the population values.\nThe function should output with:\n    dict: A dictionary with city names as keys and randomly generated populations as values.\n    matplotlib.axes.Axes: The Axes object of the plot for further manipulation or testing.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCITIES = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney', 'Paris', 'Berlin', 'Moscow', 'Madrid', 'Rome']\ndef task_func(city_dict, max_range=1000000, seed=0):\n    if max_range < 1:\n        raise ValueError(\"max_range must be a positive integer\")\n\n    np.random.seed(seed)\n    city_population = {\n        city: (np.random.randint(1, max_range) if city in CITIES else -1) \n        for _, city in city_dict.items() if isinstance(city, str)\n    }\n\n    # Plotting the bar chart\n    plt.figure()\n    ax = plt.bar(city_population.keys(), city_population.values())\n    plt.xlabel('City')\n    plt.ylabel('Population')\n    plt.title('City Populations')\n\n    return city_population, plt.gca()",
        "test": "import unittest\nfrom matplotlib.axes import Axes\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        \"\"\"Test if the population dictionary has correct structure and values.\"\"\"\n        city_dict = {'John': 'New York', 'Alice': 'London', 'Bob': 'Beijing', 'Charlie': 'Tokyo', 'David': 'Mumbai'}\n        population_dict, _ = task_func(city_dict, 250000, 56)\n        self.assertSetEqual(set(population_dict.keys()), {'New York', 'London', 'Beijing', 'Tokyo', 'Mumbai'})\n        for population in population_dict.values():\n            self.assertTrue(-1 <= population <= 250000)\n    def test_case_2(self):\n        \"\"\"Test if the bar chart plot has the correct attributes.\"\"\"\n        city_dict = {'Summer': 'New York', 'Alice': 'London', 'April': 'Beijing', 'Charlie': 'Tokyo', 'David': 'Sydney'}\n        population_dict, ax = task_func(city_dict, seed=54)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(ax.get_title(), 'City Populations')\n        self.assertEqual(ax.get_xlabel(), 'City')\n        self.assertEqual(ax.get_ylabel(), 'Population')\n        self.assertEqual(population_dict, {'New York': 72816, 'London': 367942, 'Beijing': 869251, 'Tokyo': 323344, 'Sydney': 267288})\n        bars = [rect for rect in ax.get_children() if isinstance(rect, plt.Rectangle) and rect.get_width() > 0]\n        bars = [bar for bar in bars if bar.get_xy()[0] != 0]  # Exclude the non-data bar\n        self.assertEqual(len(bars), 5)\n    def test_case_3(self):\n        \"\"\"Test the function with an empty input dictionary.\"\"\"\n        city_dict = {}\n        population_dict, _ = task_func(city_dict)\n        self.assertSetEqual(set(population_dict.keys()), set({}))\n        self.assertTrue(all(1000000 <= pop <= 10000000 for pop in population_dict.values()))\n    def test_case_4(self):\n        \"\"\"Test the function with a differently structured input dictionary.\"\"\"\n        city_dict = {'Person1': 'City1', 'Person2': 'City2'}\n        population_dict, _ = task_func(city_dict)\n        self.assertEqual(population_dict, {'City1': -1, 'City2': -1})\n    def test_case_5(self):\n        \"\"\"Test if the population values are random with the same input and different seeds.\"\"\"\n        city_dict = {'John': 'New York', 'Alice': 'London'}\n        population_dict1, _ = task_func(city_dict, seed=77)\n        population_dict2, _ = task_func(city_dict, seed=42)\n        self.assertNotEqual(population_dict1, population_dict2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random string of the specified length composed of uppercase and lowercase letters, and then count the occurrence of each character in this string.\nThe function should raise the exception for: ValueError if the length is a negative number\nThe function should output with:\n    dict: A dictionary where each key is a character from the generated string and the value\n    is the count of how many times that character appears in the string.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nimport string\ndef task_func(length=100):\n```",
        "gt": "import collections\nimport random\nimport string\ndef task_func(length=100):\n    if length < 0:\n        raise ValueError\n    random_string = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase, k=length))\n    char_counts = collections.Counter(random_string)\n    return dict(char_counts)",
        "test": "import unittest\nimport string\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Prepare valid characters and set a random seed for reproducibility\n        self.valid_chars = string.ascii_uppercase + string.ascii_lowercase\n        random.seed(42)  # Ensuring reproducibility for tests\n    def test_generated_string_properties(self):\n        # Consolidated test for different lengths to check structure and correctness\n        test_lengths = [10, 50, 100, 150, 5]\n        for length in test_lengths:\n            with self.subTest(length=length):\n                result = task_func(length)\n                self.assertTrue(len(result) <= length, \"Length of result should be <= requested string length\")\n                self.assertEqual(sum(result.values()), length, f\"Total counts should sum to {length}\")\n                self.assertTrue(all(char in self.valid_chars for char in result), \"All characters should be valid letters\")\n    def test_zero_length(self):\n        # Test edge case where length is zero\n        result = task_func(0)\n        self.assertEqual(len(result), 0, \"Result should be empty for zero length\")\n        self.assertEqual(sum(result.values()), 0, \"Sum of counts should be zero for zero length\")\n    def test_negative_length(self):\n        # Test handling of negative length input\n        with self.assertRaises(ValueError, msg=\"Negative length should raise an error\"):\n            task_func(-1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a CSV file at the given path by reading its contents, cleaning the data, performing statistical analysis, and generating a plot, which is saved to the specified path. Sets the title of the plot to \"Data Visualization\". Labels the x-axis as \"Index\" and the y-axis as \"Value\". Saves the generated plot to the file path specified in 'plot_path'.\nThe function should raise the exception for: FileNotFoundError: If the CSV file at 'file_path' does not exist.\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    Mean (float): The average value of the data. Returns NaN if data is empty or non-numeric.\n    Median (float): The middle value of the data when sorted. Returns NaN if data is empty or non-numeric.\n    Plot Path (str): The path where the plot is saved.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n```",
        "gt": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(file_path: str, plot_path: str) -> (float, float, str):\n    # Check if file exists\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File {file_path} does not exist.\")\n\n    # Load data and handle empty file\n    try:\n        data = pd.read_csv(file_path)\n    except pd.errors.EmptyDataError:\n        return np.nan, np.nan, plot_path\n\n    # Convert data to numeric, coerce errors to NaN\n    data = pd.to_numeric(data.squeeze(), errors=\"coerce\")\n\n    # Ensure data is a Pandas Series\n    if not isinstance(data, pd.Series):\n        data = pd.Series(data)\n\n    # Clean data\n    data = data.dropna()\n\n    # Perform analysis\n    if data.empty:\n        mean = median = np.nan\n    else:\n        # Calculate mean and median\n        mean = float(np.mean(data))\n        median = float(np.median(data))\n\n    # Create plot and save it\n    plt.figure(figsize=(10, 6))\n    plt.plot(data)\n    plt.title(\"Data Visualization\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Value\")\n    plt.savefig(plot_path)\n    plt.close()\n\n    return mean, median, plot_path",
        "test": "import unittest\nimport os\nimport numpy as np\nimport pandas as pd\nimport shutil\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        # Create a directory for test files if it doesn't exist\n        self.test_dir = \"mnt/data/task_func_data_test\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        # Create a valid data file\n        self.valid_data_path = os.path.join(self.test_dir, \"valid_data.csv\")\n        pd.DataFrame({\"data\": np.random.rand(100)}).to_csv(\n            self.valid_data_path, index=False\n        )\n        # Create an empty data file\n        self.empty_data_path = os.path.join(self.test_dir, \"empty_data.csv\")\n        with open(self.empty_data_path, \"w\") as f:\n            f.write(\"\")\n        # Create a non-numeric data file\n        self.non_numeric_data_path = os.path.join(self.test_dir, \"non_numeric_data.csv\")\n        pd.DataFrame({\"data\": [\"a\", \"b\", \"c\", \"d\"]}).to_csv(\n            self.non_numeric_data_path, index=False\n        )\n        # Create a large data file\n        self.large_data_path = os.path.join(self.test_dir, \"large_data.csv\")\n        pd.DataFrame({\"data\": np.random.rand(10000)}).to_csv(\n            self.large_data_path, index=False\n        )\n        # Create a data file with NaN values\n        self.nan_data_path = os.path.join(self.test_dir, \"nan_data.csv\")\n        pd.DataFrame({\"data\": [1, np.nan, 2, np.nan, 3]}).to_csv(\n            self.nan_data_path, index=False\n        )\n        # Create a data file with a single value\n        self.single_value_path = os.path.join(self.test_dir, \"single_value.csv\")\n        pd.DataFrame({\"data\": [42]}).to_csv(self.single_value_path, index=False)\n        # Create a data file where all values are NaN\n        self.all_nan_path = os.path.join(self.test_dir, \"all_nan.csv\")\n        pd.DataFrame({\"data\": [np.nan, np.nan, np.nan]}).to_csv(\n            self.all_nan_path, index=False\n        )\n    def test_valid_input(self):\n        \"\"\"Test that the function runs without errors and returns the correct output.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"valid_plot.png\")\n        mean, median, plot_path = task_func(self.valid_data_path, plot_path)\n        self.assertIsInstance(mean, float)\n        self.assertIsInstance(median, float)\n        self.assertTrue(os.path.exists(plot_path))\n    def test_file_not_found(self):\n        \"\"\"Test that the function raises a FileNotFoundError when the specified file does not exist.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"not_found_plot.png\")\n        with self.assertRaises(FileNotFoundError):\n            task_func(os.path.join(self.test_dir, \"non_existent_file.csv\"), plot_path)\n    def test_empty_file(self):\n        \"\"\"Test that the function returns NaN for mean and median when the file is empty.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"empty_plot.png\")\n        mean, median, returned_plot_path = task_func(self.empty_data_path, plot_path)\n        self.assertTrue(np.isnan(mean))\n        self.assertTrue(np.isnan(median))\n        self.assertFalse(\n            os.path.exists(returned_plot_path)\n        )  # Plot should not exist for empty file\n    def test_non_numeric_data(self):\n        \"\"\"Test that the function returns NaN for mean and median when the file contains non-numeric data.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"non_numeric_plot.png\")\n        mean, median, returned_plot_path = task_func(self.non_numeric_data_path, plot_path)\n        self.assertTrue(np.isnan(mean))\n        self.assertTrue(np.isnan(median))\n        self.assertTrue(os.path.exists(returned_plot_path))\n    def test_large_data(self):\n        \"\"\"Test that the function runs without errors and returns the correct output for a large data file.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"large_data_plot.png\")\n        mean, median, returned_plot_path = task_func(self.large_data_path, plot_path)\n        self.assertIsInstance(mean, float)\n        self.assertIsInstance(median, float)\n        self.assertTrue(os.path.exists(returned_plot_path))\n    def test_data_with_nan_values(self):\n        \"\"\"Test that the function returns the correct output for a data file with NaN values.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"nan_data_plot.png\")\n        mean, median, returned_plot_path = task_func(self.nan_data_path, plot_path)\n        self.assertNotEqual(mean, np.nan)\n        self.assertNotEqual(median, np.nan)\n        self.assertTrue(os.path.exists(returned_plot_path))\n    def test_single_value_data(self):\n        \"\"\"Test that the function returns the correct output for a data file with a single value.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"single_value_plot.png\")\n        mean, median, returned_plot_path = task_func(self.single_value_path, plot_path)\n        self.assertEqual(mean, 42)\n        self.assertEqual(median, 42)\n        self.assertTrue(os.path.exists(returned_plot_path))\n    def test_all_nan_data(self):\n        \"\"\"Test that the function returns NaN for mean and median when the file contains all NaN values.\"\"\"\n        plot_path = os.path.join(self.test_dir, \"all_nan_plot.png\")\n        mean, median, returned_plot_path = task_func(self.all_nan_path, plot_path)\n        self.assertTrue(np.isnan(mean))\n        self.assertTrue(np.isnan(median))\n        self.assertTrue(os.path.exists(returned_plot_path))\n    def tearDown(self):\n        # Remove all created files\n        plt.clf()\n        for filename in os.listdir(self.test_dir):\n            file_path = os.path.join(self.test_dir, filename)\n            if os.path.isfile(file_path) or os.path.islink(file_path):\n                os.remove(file_path)\n        # Remove the test directory\n        dirs_to_remove = [\"mnt/data\", \"mnt\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Describe a dataframe and draw a distribution chart for each numeric column after replacing the NaN values with the average of the column.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with statistics. This includes count, mean, standard deviation (std), min, 25%, 50%, 75%, and max values for each numeric column.\n    List[Axes]: A list of matplotlib Axes objects representing the distribution plots for each numeric column.\n    Each plot visualizes the distribution of data in the respective column with 10 bins.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\ndef task_func(df):\n```",
        "gt": "import numpy as np\nimport seaborn as sns\ndef task_func(df):\n    df = df.fillna(df.mean(axis=0))\n    description = df.describe()\n    plots = []\n    for col in df.select_dtypes(include=[np.number]).columns:\n        plot = sns.displot(df[col], bins=10)\n        plots.append(plot.ax)\n    return description, plots",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the f_112 function.\"\"\"\n    def setUp(self):\n        # Generating more complex data for testing\n        self.df1 = pd.DataFrame(\n            {\"A\": [1, 2, 3, 4, 5], \"B\": [6, 7, 8, 9, 10], \"C\": [11, 12, 13, 14, 15]}\n        )\n        self.df2 = pd.DataFrame({\"X\": [1, None, 9, 13], \"Y\": [None, 3, 4, 8]})\n        self.df3 = pd.DataFrame(\n            {\"M\": [7, 13, 21, 11, 22, 8, None, 17], \"N\": [None, 2, 3, 4, 10, 0, 27, 12]}\n        )\n        self.df4 = pd.DataFrame(\n            {\"P\": [None, None, 4], \"Q\": [7, None, 3], \"R\": [2, None, 6]}\n        )\n        self.df5 = pd.DataFrame({\"W\": [1, 2], \"Z\": [2, 1]})\n        self.df6 = pd.DataFrame(\n            {\n                \"A\": [1, 2, 3, 4, 5, 6],\n                \"B\": [None, 8, 9, 10, 11, None],\n                \"C\": [13, None, None, None, None, 18],\n                \"D\": [19, None, 21, None, 23, None],\n            }\n        )\n    def test_case_1(self):\n        description, plots = task_func(self.df1)\n        self.assertFalse(description.isna().any().any())\n        self.assertIsInstance(description, pd.DataFrame)\n        self.assertListEqual(list(description.columns), [\"A\", \"B\", \"C\"])\n        self.assertEqual(len(plots), 3)\n    def test_case_2(self):\n        description, plots = task_func(self.df2)\n        self.assertFalse(description.isna().any().any())\n        self.assertIsInstance(description, pd.DataFrame)\n        self.assertListEqual(list(description.columns), [\"X\", \"Y\"])\n        self.assertEqual(len(plots), 2)\n    def test_case_3(self):\n        description, plots = task_func(self.df3)\n        self.assertFalse(description.isna().any().any())\n        self.assertIsInstance(description, pd.DataFrame)\n        self.assertListEqual(list(description.columns), [\"M\", \"N\"])\n        self.assertEqual(len(plots), 2)\n    def test_case_4(self):\n        description, plots = task_func(self.df4)\n        self.assertFalse(description.isna().any().any())\n        self.assertIsInstance(description, pd.DataFrame)\n        self.assertListEqual(list(description.columns), [\"P\", \"Q\", \"R\"])\n        self.assertEqual(len(plots), 3)\n    def test_case_5(self):\n        description, plots = task_func(self.df5)\n        self.assertFalse(description.isna().any().any())\n        self.assertIsInstance(description, pd.DataFrame)\n        self.assertListEqual(list(description.columns), [\"W\", \"Z\"])\n        self.assertEqual(len(plots), 2)\n    def test_case_6(self):\n        description, plots = task_func(self.df6)\n        self.assertFalse(description.isna().any().any())\n        self.assertIsInstance(description, pd.DataFrame)\n        self.assertListEqual(list(description.columns), [\"A\", \"B\", \"C\", \"D\"])\n        self.assertEqual(len(plots), 4)\n        self.assertEqual(description.loc[\"mean\", \"A\"], 3.5)\n        self.assertEqual(description.loc[\"std\", \"B\"], 1.0)\n        self.assertEqual(description.loc[\"25%\", \"A\"], 2.25)\n        self.assertEqual(description.loc[\"50%\", \"C\"], 15.5)\n        self.assertEqual(description.loc[\"75%\", \"A\"], 4.75)\n        self.assertEqual(description.loc[\"max\", \"D\"], 23.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Protect all double quotes in all JSON files in the specified directory by prepending them with a double backslash. Functionality: - Reads each JSON file in the given directory. - Escapes the double quotes by prepending them with a double backslash. - Writes back the modified content to the respective JSON file.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist.\nThe function should output with:\n    list: A list of the processed JSON files.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n```",
        "gt": "import os\nimport re\nimport json\nimport glob\ndef task_func(directory_path: str) -> list:\n    # Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} not found.\")\n    \n    json_files = glob.glob(directory_path + '/*.json')\n    processed_files = []\n    \n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n        \n        escaped_data = json.dumps(data, ensure_ascii=False)\n        escaped_data = re.sub(r'(?<!\\\\)\"', r'\\\\\\\"', escaped_data)\n        \n        with open(json_file, 'w') as file:\n            file.write(escaped_data)\n        \n        processed_files.append(json_file)\n    \n    return processed_files",
        "test": "import unittest\nimport doctest\nimport shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_directory = f\"{self.base_tmp_dir}/test\"\n        self.mixed_directory = f\"{self.base_tmp_dir}/test/mixed_directory/\"\n        if not os.path.exists(self.test_directory):\n            os.makedirs(self.test_directory)\n        if not os.path.exists(self.mixed_directory):\n            os.makedirs(self.mixed_directory)\n        self.json_data1 = {\n            \"name\": \"John\",\n            \"age\": 30,\n            \"city\": \"New York\"\n        }\n        self.json_data2 = {\n            \"book\": \"Harry Potter\",\n            \"author\": \"J.K. Rowling\",\n            \"quote\": \"\\\"Magic\\\" is everywhere!\"\n        }\n        # Create sample JSON files\n        with open(os.path.join(self.test_directory, \"file1.json\"), \"w\") as file:\n            json.dump(self.json_data1, file)\n        with open(os.path.join(self.test_directory, \"file2.json\"), \"w\") as file:\n            json.dump(self.json_data2, file)\n    def tearDown(self):\n        if os.path.exists(self.test_directory):\n            shutil.rmtree(self.test_directory)\n    def test_case_1(self):\n        # Test with the sample directory created\n        result = task_func(self.test_directory)\n        self.assertEqual(len(result), 2)  # 2 files processed\n        result = [os.path.basename(file) for file in result]\n        self.assertTrue(\"file1.json\" in result)\n        self.assertTrue(\"file2.json\" in result)\n        \n        # Check if the files have been modified correctly\n        with open(os.path.join(self.test_directory, \"file1.json\"), \"r\") as file:\n            content = file.read()\n            self.assertNotIn(' \"', content)  # No unprotected double quotes\n        \n        with open(os.path.join(self.test_directory, \"file2.json\"), \"r\") as file:\n            content = file.read()\n            self.assertNotIn(' \"Magic\"', content)  # Original quote should be escaped\n    \n    def test_case_2(self):\n        # Test with an empty directory (no JSON files)\n        empty_directory = f\"{self.test_directory}/empty_directory/\"\n        if not os.path.exists(empty_directory):\n            os.makedirs(empty_directory)\n        result = task_func(empty_directory)\n        self.assertEqual(result, [])  # No files processed\n    \n    def test_case_3(self):\n        # Test with a non-existing directory\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"/mnt/data/non_existent_directory/\")\n    \n    def test_case_4(self):\n        # Test with a directory containing non-JSON files\n        if not os.path.exists(self.mixed_directory):\n            os.makedirs(self.mixed_directory)\n        with open(self.mixed_directory + \"file.txt\", \"w\") as file:\n            file.write(\"Sample text\")\n        result = task_func(self.mixed_directory)\n        self.assertEqual(result, [])  # No JSON files processed\n    \n    def test_case_5(self):\n        # Test with a directory containing both JSON and non-JSON files\n        with open(self.mixed_directory + \"file3.json\", \"w\") as file:\n            json.dump(self.json_data1, file)\n        result = task_func(self.mixed_directory)\n        self.assertEqual(len(result), 1)  # 1 JSON file processed\n        self.assertTrue(\"file3.json\" in result[0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Initializes a Flask-Mail instance for sending emails using the generated Flask application with the specified app_name.\nNote that: The details of the email server are retrieved from environment variables. If the variables do not exist, use defaults: 'MAIL_SERVER': 'localhost' 'MAIL_PORT': 25 'MAIL_USE_TLS': False (boolean) 'MAIL_USERNAME': None 'MAIL_PASSWORD': None\nThe function should output with:\n    tuple: A tuple containing the Flask-Mail instance and the app's mail configurations.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n```",
        "gt": "from flask import Flask\nimport os\nfrom flask_mail import Mail\ndef task_func(app_name):\n\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False) == 'True'\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    \n    mail = Mail(app)\n    \n    return mail, {\n        'MAIL_SERVER': app.config['MAIL_SERVER'],\n        'MAIL_PORT': app.config['MAIL_PORT'],\n        'MAIL_USE_TLS': app.config['MAIL_USE_TLS'],\n        'MAIL_USERNAME': app.config['MAIL_USERNAME'],\n        'MAIL_PASSWORD': app.config['MAIL_PASSWORD']\n    }",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom flask import Flask\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        mail_instance, configs = task_func(\"test_case\")\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"localhost\")\n        self.assertEqual(configs[\"MAIL_PORT\"], 25)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertIsNone(configs[\"MAIL_USERNAME\"])\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])\n    @patch.dict('os.environ', {'MAIL_SERVER': 'test_server', 'MAIL_PORT': '2525', 'MAIL_USE_TLS': 'True', 'MAIL_USERNAME': 'test', 'MAIL_PASSWORD': 'password'})\n    def test_case_2(self):\n        mail_instance, configs = task_func(\"test_case_2\")\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"test_server\")\n        self.assertEqual(configs[\"MAIL_PORT\"], 2525)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], True)\n        self.assertEqual(configs[\"MAIL_USERNAME\"], \"test\")\n        self.assertEqual(configs[\"MAIL_PASSWORD\"], \"password\")\n        self.assertEqual(mail_instance.__getattribute__(\"app\").name, \"test_case_2\")\n    @patch.dict('os.environ', {'MAIL_SERVER': 'another_server'})\n    def test_case_3(self):\n        mail_instance, configs = task_func(\"test_case\")\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"another_server\")\n        self.assertEqual(configs[\"MAIL_PORT\"], 25)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertIsNone(configs[\"MAIL_USERNAME\"])\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])\n    @patch.dict('os.environ', {'MAIL_PORT': '3030', 'MAIL_USE_TLS': 'False'})\n    def test_case_4(self):\n        mail_instance, configs = task_func(\"test_case\")\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"localhost\")\n        self.assertEqual(configs[\"MAIL_PORT\"], 3030)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertIsNone(configs[\"MAIL_USERNAME\"])\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])\n    @patch.dict('os.environ', {'MAIL_USERNAME': 'username'})\n    def test_case_5(self):\n        mail_instance, configs = task_func(\"test_case\")\n        self.assertEqual(configs[\"MAIL_SERVER\"], \"localhost\")\n        self.assertEqual(configs[\"MAIL_PORT\"], 25)\n        self.assertEqual(configs[\"MAIL_USE_TLS\"], False)\n        self.assertEqual(configs[\"MAIL_USERNAME\"], \"username\")\n        self.assertIsNone(configs[\"MAIL_PASSWORD\"])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the skew of each row in a 2D data matrix and plot the distribution.\nThe function should output with:\n    pandas.DataFrame: A DataFrame containing the skewness of each row. The skweness is stored in a new column which name is 'Skewness'.\n    matplotlib.axes.Axes: The Axes object of the plotted distribution.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\ndef task_func(data_matrix):\n    skewness = skew(data_matrix, axis=1)\n    df = pd.DataFrame(skewness, columns=[\"Skewness\"])\n    plt.figure(figsize=(10, 5))\n    df[\"Skewness\"].plot(kind=\"hist\", title=\"Distribution of Skewness\")\n    return df, plt.gca()",
        "test": "import unittest\nimport os\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n    def test_case_1(self):\n        data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        df, ax = task_func(data)\n        self.verify_output(df, ax, data.shape[0], data)\n    def test_case_2(self):\n        data = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])\n        df, ax = task_func(data)\n        self.verify_output(df, ax, data.shape[0], data)\n    def test_case_3(self):\n        data = np.array([[3, 5, 7, 1000], [200, 5, 7, 1], [1, -9, 14, 700]])\n        df, ax = task_func(data)\n        self.verify_output(df, ax, data.shape[0], data)\n    def test_case_4(self):\n        data = np.array(\n            [\n                [1, 2, 3, 4, 5, 4, 3, 2, 1],\n            ]\n        )\n        df, ax = task_func(data)\n        self.verify_output(df, ax, data.shape[0], data)\n    def test_case_5(self):\n        data = np.array([[1, 1], [1, 1], [1, 1]])\n        df, ax = task_func(data)\n        # Check if DataFrame is returned with correct values\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (3, 1))\n        self.assertIn(\"Skewness\", df.columns)\n        # Check if Axes object is returned for the plot\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Distribution of Skewness\")\n    def verify_output(self, df, ax, expected_rows, data):\n        # Check if DataFrame is returned with correct values\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (expected_rows, 1))\n        self.assertIn(\"Skewness\", df.columns)\n        # Check if Axes object is returned for the plot\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Distribution of Skewness\")\n        # Check skewness values\n        skewness = skew(data, axis=1)\n        self.assertListEqual(df[\"Skewness\"].tolist(), list(skewness))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    \n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ax = task_func(0, 1)\n        self.assertTrue(hasattr(ax, 'lines'), \"The plot should have lines representing the PDF.\")\n        self.assertTrue(hasattr(ax, 'patches'), \"The plot should have bars representing the histogram.\")\n        self.assertEqual(ax.lines[0].get_color(), 'r', \"The PDF line color should be red.\")\n        # Check if the OLS line is plotted\n        self.assertEqual(ax.lines[1].get_color(), 'g', \"The OLS line color should be green.\")\n        \n    def test_case_2(self):\n        ax = task_func(2, 2, 555, 1000, 50)\n        self.assertTrue(hasattr(ax, 'lines'), \"The plot should have lines representing the PDF.\")\n        self.assertTrue(hasattr(ax, 'patches'), \"The plot should have bars representing the histogram.\")\n        self.assertEqual(ax.lines[0].get_color(), 'r', \"The PDF line color should be red.\")\n        # Check if the OLS line is plotted\n        self.assertEqual(ax.lines[1].get_color(), 'g', \"The OLS line color should be green.\")\n        # Check the axis data\n        self.assertAlmostEquals(ax.get_xlim()[0], -5.66, msg=\"The x-axis limits are incorrect.\", places=2)\n        self.assertAlmostEquals(ax.get_xlim()[1], 8.54, msg=\"The x-axis limits are incorrect.\", places=2)\n        \n    def test_case_3(self):\n        ax = task_func(-2, 0.5, 77, 50000)\n        self.assertTrue(hasattr(ax, 'lines'), \"The plot should have lines representing the PDF.\")\n        self.assertTrue(hasattr(ax, 'patches'), \"The plot should have bars representing the histogram.\")\n        self.assertEqual(ax.lines[0].get_color(), 'r', \"The PDF line color should be red.\")\n        # Check the axis data\n        self.assertAlmostEquals(ax.get_ylim()[0], -0.28, msg=\"The y-axis limits are incorrect.\", places=2)\n        self.assertAlmostEquals(ax.get_ylim()[1], 0.84, msg=\"The y-axis limits are incorrect.\", places=2)\n        # Check the histogram data\n        self.assertEqual(len(ax.patches), 30, \"The number of histogram bars is incorrect.\")\n        \n    def test_case_4(self):\n        ax = task_func(5, 3)\n        self.assertTrue(hasattr(ax, 'lines'), \"The plot should have lines representing the PDF.\")\n        self.assertTrue(hasattr(ax, 'patches'), \"The plot should have bars representing the histogram.\")\n        self.assertEqual(ax.lines[0].get_color(), 'r', \"The PDF line color should be red.\")\n        # Test the plot array\n        self.assertEqual(len(ax.lines), 2, \"The plot should have two lines.\")\n        \n    def test_case_5(self):\n        ax = task_func(-5, 1.5)\n        self.assertTrue(hasattr(ax, 'lines'), \"The plot should have lines representing the PDF.\")\n        self.assertTrue(hasattr(ax, 'patches'), \"The plot should have bars representing the histogram.\")\n        self.assertEqual(ax.lines[0].get_color(), 'r', \"The PDF line color should be red.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Download and extract a zip file from a specified URL to a designated directory. Behavior: - If the target directory TARGET_DIR does not exist, it is created. - The zip file is downloaded from the given URL and saved locally as TARGET_ZIP_FILE. - The local zip file TARGET_ZIP_FILE is deleted after extraction. Error Handling: - The function does not explicitly handle errors that may occur during the download or extraction process. Errors such as a failed download, invalid URL, or corrupted zip file will result in an unhandled exception.\nThe function should output with:\n    str: The path of the directory where the contents of the zip file are extracted.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport zipfile\n# Constants\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n```",
        "gt": "import urllib.request\nimport os\nimport zipfile\n# Constants\nTARGET_DIR = \"downloaded_files\"\nTARGET_ZIP_FILE = \"downloaded_files.zip\"\ndef task_func(url):\n\n    os.makedirs(TARGET_DIR, exist_ok=True)\n\n    # context = ssl._create_unverified_context()\n    # urllib.request.urlretrieve(url, TARGET_ZIP_FILE, context=context)\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    if os.path.exists(TARGET_ZIP_FILE):\n        os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        if not os.path.exists(TARGET_DIR):\n            os.makedirs(TARGET_DIR)\n        if os.path.exists(TARGET_DIR):\n            shutil.rmtree(TARGET_DIR)\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"zipfile.ZipFile\")\n    def test_valid_zip_file(self, mock_zipfile, mock_urlretrieve):\n        \"\"\"Test that the function returns the correct directory path.\"\"\"\n        url = \"https://www.sample-videos.com/zip/Sample-Zip-5mb.zip\"\n        mock_zipfile.return_value.__enter__.return_value = MagicMock()\n        result = task_func(url)\n        mock_urlretrieve.assert_called_with(url, TARGET_ZIP_FILE)\n        self.assertEqual(result, TARGET_DIR)\n        self.assertTrue(os.path.exists(TARGET_DIR))\n    @patch(\"urllib.request.urlretrieve\")\n    def test_invalid_url(self, mock_urlretrieve):\n        \"\"\"Test that the function raises an exception when the URL is invalid.\"\"\"\n        mock_urlretrieve.side_effect = Exception\n        url = \"https://invalid.url/invalid.zip\"\n        with self.assertRaises(Exception):\n            task_func(url)\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"zipfile.ZipFile\")\n    def test_non_zip_file(self, mock_zipfile, mock_urlretrieve):\n        \"\"\"Test that the function raises an exception when the URL does not point to a zip file.\"\"\"\n        mock_zipfile.side_effect = zipfile.BadZipFile\n        url = \"https://www.sample-videos.com/img/Sample-jpg-image-5mb.jpg\"\n        with self.assertRaises(zipfile.BadZipFile):\n            task_func(url)\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"zipfile.ZipFile\")\n    def test_cleanup(self, mock_zipfile, mock_urlretrieve):\n        \"\"\"Test that the function deletes the downloaded zip file after extraction.\"\"\"\n        mock_zipfile.return_value.__enter__.return_value = MagicMock()\n        url = \"https://www.sample-videos.com/zip/Sample-Zip-5mb.zip\"\n        task_func(url)\n        self.assertFalse(os.path.exists(TARGET_ZIP_FILE))\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"zipfile.ZipFile\")\n    def test_directory_creation(self, mock_zipfile, mock_urlretrieve):\n        \"\"\"Test that the function creates a directory to store the extracted files.\"\"\"\n        mock_zipfile.return_value.__enter__.return_value = MagicMock()\n        url = \"https://www.sample-videos.com/zip/Sample-Zip-5mb.zip\"\n        task_func(url)\n        self.assertTrue(os.path.exists(TARGET_DIR))\n        self.assertTrue(os.path.isdir(TARGET_DIR))\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"zipfile.ZipFile\")\n    def test_zip_extraction_content(self, mock_zipfile, mock_urlretrieve):\n        \"\"\"Test that the function extracts the contents of the zip file.\"\"\"\n        mock_extractall = MagicMock()\n        mock_zipfile.return_value.__enter__.return_value.extractall = mock_extractall\n        url = \"https://www.sample-videos.com/zip/Sample-Zip-5mb.zip\"\n        task_func(url)\n        mock_extractall.assert_called_once()\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"zipfile.ZipFile\")\n    def test_file_removal(self, mock_zipfile, mock_urlretrieve):\n        \"\"\"Test that the function deletes the downloaded zip file even if extraction fails.\"\"\"\n        mock_zipfile.return_value.__enter__.return_value = MagicMock()\n        url = \"https://www.sample-videos.com/zip/Sample-Zip-5mb.zip\"\n        # Create a dummy file to simulate download\n        open(TARGET_ZIP_FILE, \"a\").close()\n        task_func(url)\n        self.assertFalse(os.path.exists(TARGET_ZIP_FILE))\n    def tearDown(self):\n        if os.path.exists(TARGET_DIR):\n            shutil.rmtree(TARGET_DIR)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze the publication times of a list of articles: 1) Convert 'published_time' to a specified timezone 2) Group articles by 'category' 3) For each category, calculate the count, mean, min, max publication times only considering the hour.\nThe function should raise the exception for: ValueError: If dictionary keys do not match the requirements. TypeError: If articles is not a list of dictionaries. ValueError: If an empty list is passed as articles.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the count, mean, min, max publication hour for each category.\n    The category is the index of the DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n```",
        "gt": "import pandas as pd\nimport pytz\ndef task_func(articles, timezone):\n\n    if not isinstance(articles, list):\n        raise TypeError(\"articles should be a list of dictionaries.\")\n\n    if not all(isinstance(item, dict) for item in articles):\n        raise TypeError(\"articles should be a list of dictionaries.\")\n\n    if len(articles) == 0:\n        raise ValueError(\"input articles list should contain at least one article.\")\n\n    if any(not sorted(dic.keys()) == ['category', 'id', 'published_time', 'title', 'title_url'] for dic in articles):\n        raise ValueError(\n            \"input dictionaries must contain the following keys: 'category', 'id', 'title', 'title_url', 'published_time'\")\n\n    tz = pytz.timezone(timezone)\n    for article in articles:\n        article['published_time'] = pd.to_datetime(article['published_time']).astimezone(tz)\n\n    df = pd.DataFrame(articles)\n    df['published_time'] = df['published_time'].dt.hour\n\n    analysis_df = df.groupby('category')['published_time'].agg(['count', 'mean', 'min', 'max'])\n\n    return analysis_df",
        "test": "import unittest\nimport pandas as pd\nimport pytz\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.articles = [\n            {'title': 'Apple News', 'title_url': 'apple.com/news', 'id': 1, 'category': 'Technology',\n             'published_time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.UTC)},\n            {'title': 'Sports Update', 'title_url': 'sports.com/update', 'id': 2, 'category': 'Sports',\n             'published_time': datetime(2023, 1, 1, 15, 0, tzinfo=pytz.UTC)},\n            {'title': 'Health Today', 'title_url': 'health.com/today', 'id': 3, 'category': 'Health',\n             'published_time': datetime(2023, 1, 1, 8, 0, tzinfo=pytz.UTC)}\n        ]\n    def test_empty_articles_list(self):\n        # Test handling of empty list\n        with self.assertRaises(ValueError):\n            task_func([], 'America/New_York')\n    def test_invalid_article_format(self):\n        # Test handling of improperly formatted articles list\n        with self.assertRaises(ValueError):\n            task_func([{'wrong_key': 'wrong_value'}], 'America/New_York')\n    def test_conversion_and_grouping(self):\n        timezone = 'America/New_York'\n        result_df = task_func(self.articles, timezone)\n        expected_data = {\n            'count': {'Health': 1, 'Sports': 1, 'Technology': 1},\n            'mean': {'Health': 3.0, 'Sports': 10.0, 'Technology': 7.0},\n            'min': {'Health': 3, 'Sports': 10, 'Technology': 7},\n            'max': {'Health': 3, 'Sports': 10, 'Technology': 7}\n        }\n        expected_df = pd.DataFrame(expected_data)\n        # Ensure the data types match, especially for integer columns\n        expected_df = expected_df.astype({\n            'min': 'int32',\n            'max': 'int32',\n            'count': 'int64',\n            'mean': 'float64'\n        })\n        expected_df.index.name = 'category'\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    def test_article_timezone_conversion(self):\n        # Assuming test data has UTC as the base timezone and checking against London timezone\n        result = task_func(self.articles, 'Europe/London')\n        expected_hours = [8.0, 15.0, 12.0]\n        actual_hours = result.reset_index()['mean'].tolist()\n        self.assertEqual(expected_hours, actual_hours)\n    def test_different_timezones_across_categories(self):\n        # Create a set of articles across different categories and timezones\n        articles = [\n            {'title': 'Tech Trends', 'title_url': 'tech.com/trends', 'id': 1, 'category': 'Technology',\n             'published_time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.timezone('UTC'))},\n            {'title': 'World Sports', 'title_url': 'sports.com/world', 'id': 2, 'category': 'Sports',\n             'published_time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.timezone('Asia/Tokyo'))},  # +9 hours from UTC\n            {'title': 'Health News', 'title_url': 'health.com/news', 'id': 3, 'category': 'Health',\n             'published_time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.timezone('America/Los_Angeles'))}\n            # -8 hours from UTC\n        ]\n        timezone = 'America/New_York'  # UTC-5\n        result_df = task_func(articles, timezone)\n        expected_data = {\n            'count': {'Health': 1, 'Sports': 1, 'Technology': 1},\n            'mean': {'Health': 14.0, 'Sports': 21.0, 'Technology': 7.0},\n            # Converting 12:00 from respective timezones to New York time\n            'min': {'Health': 14, 'Sports': 21, 'Technology': 7},\n            'max': {'Health': 14, 'Sports': 21, 'Technology': 7}\n        }\n        expected_df = pd.DataFrame(expected_data)\n        expected_df.index.name = 'category'\n        expected_df = expected_df.astype({\n            'min': 'int32',\n            'max': 'int32',\n            'count': 'int64',\n            'mean': 'float64'\n        })\n        pd.testing.assert_frame_equal(result_df, expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate solar activity based on the date and time, taking into account the solar cycle of 11 years.\nThe function should output with:\n    float: The solar activity between 0 and 1. The value represents the solar activity\n    calculated using a cosine function based on the years since the closest solar cycle year.\nYou should write self-contained code starting with:\n```\nimport pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n```",
        "gt": "import pytz\nimport numpy as np\nfrom dateutil.parser import parse\nimport math\nSOLAR_CYCLE_YEARS = np.array([1986, 1996, 2008, 2019])\ndef task_func(date_str, from_tz, to_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(to_tz)\n    given_date = parse(date_str).replace(tzinfo=from_tz)\n    converted_date = given_date.astimezone(to_tz)\n\n    solar_cycle_year = SOLAR_CYCLE_YEARS[np.argmin(np.abs(SOLAR_CYCLE_YEARS - converted_date.year))]\n    years_since_solar_cycle_year = abs(converted_date.year - solar_cycle_year)\n\n    solar_activity = math.cos(math.pi * years_since_solar_cycle_year / 11)\n\n    return solar_activity",
        "test": "import unittest\nimport math\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input 1: Testing with a date from the first solar cycle year\n        result = task_func('1986-01-01 00:00:00', 'UTC', 'America/New_York')\n        expected = 0.95949\n        self.assertAlmostEqual(result, expected, places=5)\n        \n    def test_case_2(self):\n        # Input 2: Testing with a date from a year halfway between two solar cycle years\n        result = task_func('1991-01-01 00:00:00', 'UTC', 'America/New_York')\n        expected = 0.415415\n        self.assertAlmostEqual(result, expected, places=5)\n    def test_case_3(self):\n        # Input 3: Testing with a date from the third solar cycle year\n        result = task_func('2008-01-01 00:00:00', 'UTC', 'America/New_York')\n        expected = 0.959492\n        self.assertAlmostEqual(result, expected, places=5)\n    def test_case_4(self):\n        # Input 4: Testing with a date from a recent year\n        result = task_func('2023-01-01 00:00:00', 'UTC', 'America/New_York')\n        expected = 0.654860\n        self.assertAlmostEqual(result, expected, places=5)\n    def test_case_5(self):\n        # Input 5: Testing with a date from a year close to a solar cycle year\n        result = task_func('2018-01-01 00:00:00', 'UTC', 'America/New_York')\n        expected = 0.841253\n        self.assertAlmostEqual(result, expected, places=5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compute the differences in seconds with integer values between consecutive datetime strings and plot these differences as a bar chart.\nNote that: The function requires the datetime, numpy, and matplotlib.pyplot modules. The datetime strings in the input list should follow the specific format specified in TIME_FORMAT. The function calculates the time differences between each pair of consecutive datetime strings in the list.\nThe function should output with:\n    matplotlib.axes.Axes: The axes object of the plotted bar chart. This object allows further customization of the plot outside this function.\nYou should write self-contained code starting with:\n```\nimport datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n```",
        "gt": "import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings):\n    # Calculate time differences\n    differences = (\n        np.diff([datetime.datetime.strptime(t, TIME_FORMAT) for t in time_strings])\n        .astype(\"timedelta64[s]\")\n        .astype(int)\n    )\n\n    # Plotting the bar chart\n    _ = plt.bar(range(len(differences)), differences)\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Time Difference (seconds)\")\n    plt.title(\"Time Differences Between Consecutive Timestamps\")\n    return plt.gca()",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_regular_time_strings(self):\n        \"\"\"Test Regular Time Strings with 1-second difference\"\"\"\n        time_strings = [\n            \"30/03/09 16:31:32.123\",\n            \"30/03/09 16:31:33.123\",\n            \"30/03/09 16:31:34.123\",\n        ]\n        ax = task_func(time_strings)\n        bars = ax.patches\n        bar_heights = [bar.get_height() for bar in bars]\n        plt.close()\n        self.assertEqual(bar_heights, [1.0, 1.0])\n    def test_different_time_units(self):\n        \"\"\"Test Time Strings with Different Day, Hour, Minute, and Second Differences\"\"\"\n        time_strings = [\n            \"30/03/09 16:31:32.123\",\n            \"31/03/09 17:32:33.123\",\n            \"01/04/09 18:33:34.123\",\n        ]\n        ax = task_func(time_strings)\n        bars = ax.patches\n        bar_heights = [bar.get_height() for bar in bars]\n        plt.close()\n        expected_diffs = [(86400 + 3600 + 60 + 1), (86400 + 3600 + 60 + 1)]\n        self.assertEqual(bar_heights, expected_diffs)\n    def test_millisecond_difference(self):\n        \"\"\"Test Time Strings with Millisecond Differences\"\"\"\n        time_strings = [\n            \"30/03/09 16:31:32.123\",\n            \"30/03/09 16:31:32.623\",\n            \"30/03/09 16:31:33.123\",\n        ]\n        ax = task_func(time_strings)\n        bars = ax.patches\n        bar_heights = [bar.get_height() for bar in bars]\n        plt.close()\n        self.assertEqual(bar_heights, [0, 0])\n    def test_no_difference(self):\n        \"\"\"Test Time Strings with No Difference\"\"\"\n        time_strings = [\n            \"30/03/09 16:31:32.123\",\n            \"30/03/09 16:31:32.123\",\n            \"30/03/09 16:31:32.123\",\n        ]\n        ax = task_func(time_strings)\n        bars = ax.patches\n        bar_heights = [bar.get_height() for bar in bars]\n        plt.close()\n        self.assertEqual(bar_heights, [0.0, 0.0])\n    def test_large_list(self):\n        \"\"\"Test Large List of Time Strings with Constant 1-second Difference\"\"\"\n        time_strings = [\"30/03/09 16:31:\" + f\"{i:02}.123\" for i in range(30, 40)]\n        ax = task_func(time_strings)\n        bars = ax.patches\n        bar_heights = [bar.get_height() for bar in bars]\n        plt.close()\n        self.assertEqual(bar_heights, [1.0] * 9)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Determine if the given datetime is a weekend.\nNote that: The datetime to be extracted is located in the 'utc_datetime' key in the JSON data.\nThe function should output with:\n    bool: True if the date is a weekend (Saturday or Sunday), False otherwise.\nYou should write self-contained code starting with:\n```\nimport json\nfrom datetime import datetime\ndef task_func(json_data):\n```",
        "gt": "import json\nfrom datetime import datetime\ndef task_func(json_data):\n    try:\n        # Convert JSON string to Python dictionary\n        data = json.loads(json_data)\n\n        # Extract datetime string from dictionary\n        datetime_str = data['utc_datetime']\n\n        # Convert datetime string to datetime object\n        utc_datetime = datetime.strptime(datetime_str, '%Y-%m-%dT%H:%M:%S')\n\n        # Check if the day of the week is Saturday (5) or Sunday (6)\n        return utc_datetime.weekday() >= 5\n    except Exception as e:\n        raise e",
        "test": "import unittest\nfrom datetime import datetime\nimport json\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Create a datetime object for a weekday (Monday)\n        utc_datetime = datetime(2024, 4, 15, 12, 0, 0)  # Monday, April 15, 2024\n        json_data = json.dumps({'utc_datetime': utc_datetime.isoformat()})\n        result = task_func(json_data)\n        self.assertFalse(result)  # Monday is not a weekend)\n    def test_saturday(self):\n        # Create a datetime object for a Saturday\n        utc_datetime = datetime(2024, 4, 13, 12, 0, 0)  # Saturday, April 13, 2024\n        json_data = json.dumps({'utc_datetime': utc_datetime.isoformat()})\n        result = task_func(json_data)\n        self.assertTrue(result)  # Saturday is a weekend day\n    def test_sunday(self):\n        # Create a datetime object for a Sunday\n        utc_datetime = datetime(2024, 4, 14, 12, 0, 0)  # Sunday, April 14, 2024\n        json_data = json.dumps({'utc_datetime': utc_datetime.isoformat()})\n        result = task_func(json_data)\n        self.assertTrue(result)  # Sunday is a weekend day\n    def test_empty_json(self):\n        # Test with empty JSON input\n        json_data = json.dumps({})\n        with self.assertRaises(KeyError):\n            task_func(json_data)\n    def test_no_utc_datetime(self):\n        # Test with JSON input missing 'utc_datetime' key\n        json_data = json.dumps({'date': '2024-04-14T12:00:00'})\n        with self.assertRaises(KeyError):\n            task_func(json_data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert the 'date' column of a DataFrame to ordinal, perform KMeans clustering on 'date' and 'value' columns, and plot the clusters. Required names: x: 'Date (ordinal)' ylabel: 'Value' title: 'KMeans Clustering of Value vs Date'\nThe function should raise the exception for: ValueError: If the DataFrame is empty or lacks required columns.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the scatter plot of the clusters.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=0):\n```",
        "gt": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, n_clusters=3, random_state=0):\n    if df.empty or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"DataFrame must be non-empty and contain 'group', 'date', and 'value' columns.\")\n\n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column must be in datetime format.\")\n\n    df['date'] = df['date'].apply(lambda x: x.toordinal())\n    X = df[['date', 'value']]\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state)\n    kmeans.fit(X)\n    y_kmeans = kmeans.predict(X)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X['date'], X['value'], c=y_kmeans, cmap='viridis')\n    ax.set_title('KMeans Clustering of Value vs Date')\n    ax.set_xlabel('Date (ordinal)')\n    ax.set_ylabel('Value')\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({\n            \"group\": [\"A\", \"A\", \"A\", \"B\", \"B\"],\n            \"date\": pd.to_datetime([\"2022-01-02\", \"2022-01-13\", \"2022-02-01\", \"2022-02-23\", \"2022-03-05\"]),\n            \"value\": [10, 20, 16, 31, 56],\n        })\n    def test_basic_functionality(self):\n        ax = task_func(self.df)\n        self.assertEqual(len(ax.collections), 1)  # Check if scatter plot is created\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_missing_columns(self):\n        incomplete_df = self.df.drop(columns=['date'])\n        with self.assertRaises(ValueError):\n            task_func(incomplete_df)\n    def test_invalid_date_column(self):\n        invalid_df = self.df.copy()\n        invalid_df['date'] = \"not a date\"\n        with self.assertRaises(ValueError):\n            task_func(invalid_df)\n    def test_plot_labels_and_title(self):\n        ax = task_func(self.df)\n        self.assertEqual(ax.get_xlabel(), 'Date (ordinal)')\n        self.assertEqual(ax.get_ylabel(), 'Value')\n        self.assertEqual(ax.get_title(), 'KMeans Clustering of Value vs Date')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function resolves the IP address of the given host and then uses the IP address to fetch geolocation information from the ipinfo.io API. The function is robust against various common errors, such as invalid hostnames, network issues, or problems with the geolocation service.\nThe function should raise the exception for: ValueError: If 'host' is None or an empty string. ConnectionError: If there is a problem connecting to the geolocation service.\nThe function should output with:\n    dict: A dictionary containing the IP address and geolocation information if successful.\nYou should write self-contained code starting with:\n```\nimport socket\nimport requests\ndef task_func(host):\n```",
        "gt": "import socket\nimport requests\ndef task_func(host):\n    if not host:\n        raise ValueError(\"Host must be a non-empty string.\")\n\n    try:\n        # Fetch IP address\n        ip_address = socket.gethostbyname(host)\n\n        # Fetch geolocation\n        response = requests.get(f\"https://ipinfo.io/{ip_address}\")\n        response.raise_for_status()\n        geolocation = response.json()\n\n        return {\n            'ip_address': ip_address,\n            'geolocation': geolocation\n        }\n    except (socket.gaierror, requests.HTTPError) as e:\n        raise ConnectionError(f\"Failed to retrieve information for {host}: {e}\")",
        "test": "import unittest\nimport unittest.mock as mock\nimport socket\nimport requests\nclass TestCases(unittest.TestCase):\n    @mock.patch('socket.gethostbyname')\n    @mock.patch('requests.get')\n    def test_valid_host(self, mock_get, mock_gethostbyname):\n        # Simulates a valid response scenario.\n        mock_gethostbyname.return_value = '8.8.8.8'\n        mock_get.return_value = mock.Mock(status_code=200, json=lambda: {\"city\": \"Mountain View\", \"country\": \"US\"})\n        result = task_func('google.com')\n        self.assertIn('ip_address', result)\n        self.assertIn('geolocation', result)\n        self.assertEqual(result['ip_address'], '8.8.8.8')\n        self.assertEqual(result['geolocation'], {\"city\": \"Mountain View\", \"country\": \"US\"})\n    def test_invalid_host(self):\n        # Checks for handling of empty strings as host.\n        with self.assertRaises(ValueError):\n            task_func('')\n    def test_invalid_host_none(self):\n        # Checks for handling None as host.\n        with self.assertRaises(ValueError):\n            task_func(None)\n    @mock.patch('socket.gethostbyname')\n    def test_connection_error(self, mock_gethostbyname):\n        # Simulates a DNS resolution error.\n        mock_gethostbyname.side_effect = socket.gaierror\n        with self.assertRaises(ConnectionError):\n            task_func('invalidhost.com')\n    @mock.patch('socket.gethostbyname')\n    @mock.patch('requests.get')\n    def test_http_error(self, mock_get, mock_gethostbyname):\n        # Simulates an HTTP error from the geolocation service.\n        mock_gethostbyname.return_value = '8.8.8.8'\n        mock_get.return_value = mock.Mock(status_code=500)\n        mock_get.return_value.raise_for_status.side_effect = requests.HTTPError\n        with self.assertRaises(ConnectionError):\n            task_func('example.com')\n    @mock.patch('socket.gethostbyname')\n    @mock.patch('requests.get')\n    def test_nonexistent_host(self, mock_get, mock_gethostbyname):\n        # Simulates a DNS error for a nonexistent domain.\n        mock_gethostbyname.side_effect = socket.gaierror\n        with self.assertRaises(ConnectionError):\n            task_func('nonexistentdomain.com')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a dictionary of numerical data to create a pandas DataFrame, removes None values, and generates a histogram of the data values using seaborn. The histogram's bins are dynamically calculated based on the range of the data. Specifically, the number of bins is set to the minimum of 11 and half the number of data points, with a minimum of 2 bins. If the DataFrame is empty or the data lacks variability (all values are the same after removing None values), the function does not generate a plot.\nNote that: Calculates the minimum and maximum values in the DataFrame. Dynamically sets the number of bins for the histogram based on the number of data points, with a minimum of 2 and a maximum of 11 bins. Create evenly spaced bin edges between the minimum and maximum values. KDE (Kernel Density Estimate) is turned off. Sets the plot title to the predefined constant `PLOT_TITLE`.\nThe function should output with:\n    DataFrame: A pandas DataFrame created from the input dictionary, excluding None values.\n    Axes or None: A seaborn histogram plot object if the DataFrame contains variable data;\n    None if the DataFrame is empty or if all values are identical.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Constants\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Constants\nPLOT_TITLE = \"Value Distribution\"\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict).dropna()\n\n    if df.empty or df.nunique().min() < 2:\n        return df, None\n\n    min_val, max_val = df.values.min(), df.values.max()\n    num_bins = max(min(11, len(df) // 2), 2)\n    bin_edges = np.linspace(min_val, max_val, num_bins)\n\n    plot = sns.histplot(df.values.flatten(), bins=bin_edges, kde=False)\n    plot.set_title(PLOT_TITLE)\n\n    return df, plot",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for function task_func.\"\"\"\n    def test_dataframe_creation(self):\n        \"\"\"\n        Test if the function correctly creates a DataFrame from the input dictionary.\n        \"\"\"\n        data = {\"a\": [1, 2, 3, 4], \"b\": [5, 6, 7, 8]}\n        df, _ = task_func(data)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (4, 2))\n    def test_distribution_plot(self):\n        \"\"\"\n        Test if the function correctly creates a distribution plot with the correct title and non-empty bars.\n        \"\"\"\n        data = {\"a\": [1, 2, 3, 4], \"b\": [5, 6, 7, 8]}\n        _, plot = task_func(data)\n        self.assertEqual(plot.get_title(), \"Value Distribution\")\n        self.assertTrue(len(plot.patches) > 0)\n    def test_empty_dictionary(self):\n        \"\"\"\n        Test if the function correctly handles an empty dictionary, returning an empty DataFrame and no plot.\n        \"\"\"\n        data = {}\n        df, plot = task_func(data)\n        self.assertEqual(df.shape, (0, 0))\n        self.assertIsNone(plot)\n    def test_number_of_bins(self):\n        \"\"\"\n        Test if the function dynamically calculates the number of bins for the plot based on the data.\n        \"\"\"\n        data = {\"a\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\n        _, plot = task_func(data)\n        self.assertTrue(len(plot.patches) <= 11)\n    def test_dataframe_without_none(self):\n        \"\"\"\n        Test if the function correctly removes rows with None values from the DataFrame.\n        \"\"\"\n        data = {\"a\": [1, 2, None, 4], \"b\": [5, None, 7, 8]}\n        df, _ = task_func(data)\n        self.assertEqual(df.shape, (2, 2))\n        self.assertNotIn(None, df.values.flatten())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a generator object that generates a sequence of tuples. Each tuple contains x, sin(x), and cos(x) values. The function then plots the sine and cosine functions using these values along with the absolute difference between the two functions and returns the plot. Finally, it returns the magnitude of the mean and median of the 1D fft of the absolute difference between the two functions.\nThe function should output with:\n    tuple: A tuple containing two items:\n    generator: A generator object producing tuples in the format (x, sin(x), cos(x), abs(sin(x) - cos(x)).\n    ax: An Axes object representing the plot.\n    float: The abs of the mean of the 1D fft of the absolute difference between sin(x) and cos(x).\n    float: The abs of the median of the 1D fft of the absolute difference between sin(x) and cos(x).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(range_start=-10, range_end=10, step=0.1):\n    if range_start>range_end:\n        raise ValueError(\"range_start cannot be smaller than range_end.\")\n\n    x_values = np.arange(range_start, range_end, step)\n    data = ((x, np.sin(x), np.cos(x), abs(np.sin(x) - np.cos(x))) for x in x_values)\n    fft_values = fft([abs(np.sin(x) - np.cos(x)) for x in x_values])\n    _, ax = plt.subplots()\n    for x, sin_x, cos_x, abs_x in data:\n        ax.scatter(x, sin_x, color='b')\n        ax.scatter(x, cos_x, color='r')\n        ax.scatter(x, abs_x, color='g')\n    \n    # We recreate the generator since it was exhausted in the for loop above\n    data = ((x, np.sin(x), np.cos(x), abs(np.sin(x) - np.cos(x))) for x in x_values)\n    return data, ax, abs(np.mean(fft_values)), abs(np.median(fft_values))",
        "test": "import unittest\nimport types\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data, ax, _, _ = task_func()\n        self.assertIsInstance(data, types.GeneratorType, \"Returned data is not a generator\")\n        x, sin_x, cos_x, _ = next(data)\n        self.assertAlmostEqual(x, -10.0, delta=0.01, msg=\"Unexpected x value in the first tuple\")\n        self.assertAlmostEqual(sin_x, np.sin(-10.0), delta=0.01, msg=\"Unexpected sin(x) value in the first tuple\")\n        self.assertAlmostEqual(cos_x, np.cos(-10.0), delta=0.01, msg=\"Unexpected cos(x) value in the first tuple\")\n    def test_case_2(self):\n        data, ax, mean_fft, median_fft = task_func(23, 43, 0.4)\n        points = list(data)\n        self.assertEqual(len(points), 50, \"Unexpected number of points generated\")\n        self.assertAlmostEqual(points[-1][0], 42.6, delta=0.01, msg=\"Unexpected last x value\")\n        self.assertAlmostEqual(round(mean_fft, 2), 0.31, delta=0.01, msg=\"Unexpected mean of the 1D fft\")\n        self.assertAlmostEqual(round(median_fft, 2), 0.57, delta=0.01, msg=\"Unexpected median of the 1D fft\")\n    def test_case_3(self):\n        data, ax, _, _ = task_func()\n        points = list(data)\n        x_values = [point[0] for point in points]\n        abs_diff_values = [point[3] for point in points]\n        self.assertTrue(all(-10.0 <= x <= 10.0 for x in x_values), \"x values are out of the expected range\")\n        self.assertTrue(all(0.0 <= x <= 1.42 for x in abs_diff_values), \"abs(sin(x) - cos(x)) values are out of the expected range\")\n        # Check the plot data\n        lines = ax.get_children()\n        self.assertEqual(len(lines), 610, \"Unexpected number of lines in the plot\")\n    def test_case_4(self):\n        with self.assertRaises(ValueError):\n            task_func(33, -11, 2)\n    def test_case_5(self):\n        data, _, mean_fft, median_fft = task_func()\n        points = list(data)\n        for x, sin_x, cos_x, _ in points:\n            self.assertAlmostEqual(sin_x, np.sin(x), delta=0.01, msg=f\"sin({x}) value is incorrect\")\n            self.assertAlmostEqual(cos_x, np.cos(x), delta=0.01, msg=f\"cos({x}) value is incorrect\")\n        self.assertAlmostEqual(round(mean_fft, 2), 1.38, delta=0.01, msg=\"Unexpected mean of the 1D fft\")\n        self.assertAlmostEqual(round(median_fft, 2), 0.54, delta=0.01, msg=\"Unexpected median of the 1D fft\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a GeoPandas DataFrame for a list of cities with randomly generated coordinates based on specified ranges.\nThe function should raise the exception for: ValueError: If 'Lon' or 'Lat' keys are missing in the dictionary, or if their values are not tuples.\nThe function should output with:\n    GeoDataFrame: A GeoPandas DataFrame containing 'City' and 'Coordinates' (Point objects).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n```",
        "gt": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    if 'Lon' not in dic or 'Lat' not in dic or not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"Dictionary must contain 'Lon' and 'Lat' keys with tuple values.\")\n\n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n\n    data = {'City': [], 'Coordinates': []}\n    for city in cities:\n        data['City'].append(city)\n        data['Coordinates'].append(Point(np.random.uniform(lon_min, lon_max), np.random.uniform(lat_min, lat_max)))\n\n    gdf = gpd.GeoDataFrame(data, geometry='Coordinates')\n\n    return gdf",
        "test": "import unittest\nimport numpy as np \nclass TestCases(unittest.TestCase):\n    def test_default_parameters(self):\n        np.random.seed(42)\n        gdf = task_func()\n        df_list = gdf.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(df_list))\n        self.assertEqual(len(gdf), 5)  # Default 5 cities\n        self.assertTrue(all(city in gdf['City'].values for city in ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']))\n        expect = ['New York,POINT (-45.1655572149495 81.12857515378491)', 'London,POINT (83.51781905210584 17.758527155466595)', 'Beijing,POINT (-123.83328944072285 -61.92098633948352)', 'Tokyo,POINT (-159.0898996194482 65.91170623948832)', 'Sydney,POINT (36.40140422755516 37.45306400328819)']\n        self.assertEqual(df_list, expect) \n    def test_custom_cities(self):\n        custom_cities = ['Paris', 'Berlin']\n        gdf = task_func(cities=custom_cities)\n        self.assertEqual(len(gdf), 2)\n        self.assertTrue(all(city in gdf['City'].values for city in custom_cities))\n    def test_invalid_dic(self):\n        with self.assertRaises(ValueError):\n            task_func(dic={'Lon': 'invalid', 'Lat': (-90, 90)})\n    def test_coordinate_ranges(self):\n        gdf = task_func(dic={'Lon': (0, 10), 'Lat': (0, 10)})\n        self.assertTrue(all(0 <= coord.x <= 10 and 0 <= coord.y <= 10 for coord in gdf['Coordinates']))\n    def test_return_type(self):\n        gdf = task_func()\n        self.assertIsInstance(gdf, gpd.GeoDataFrame)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Determine the creation time of a file and convert it to a formatted string '% Y-% m-% d% H:% M:% S'.\nThe function should output with:\n    str: The creation time of the file in the format '%Y-%m-%d %H:%M:%S'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n```",
        "gt": "from datetime import datetime\nimport os\nfrom pathlib import Path\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(file_path):\n    if not Path(file_path).exists():\n        raise FileNotFoundError(f\"No such file or directory: '{file_path}'\")\n\n    creation_time = os.path.getctime(file_path)\n    formatted_time = datetime.fromtimestamp(creation_time).strftime(DATE_FORMAT)\n    \n    return formatted_time",
        "test": "import unittest\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\nimport shutil\ndef create_dummy_file(filename):\n    \"\"\"Creates a dummy file and returns its creation time.\"\"\"\n    with open(filename, 'w') as f:\n        f.write(\"This is a dummy file.\")\n    return os.path.getctime(filename)\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        \"\"\"Setup function to create dummy files for testing.\"\"\"\n        self.file1 = \"dummy_f954_1.txt\"\n        self.file2 = \"dummy_f954_2.txt\"\n        self.file3 = \"dummy_f954_3.txt\"\n        self.creation_time1 = create_dummy_file(self.file1)\n        self.creation_time2 = create_dummy_file(self.file2)\n        self.creation_time3 = create_dummy_file(self.file3)\n        self.test_dir = 'testdir_task_func/'\n        os.makedirs(self.test_dir, exist_ok=True)\n    \n    def tearDown(self):\n        \"\"\"Cleanup function to remove dummy files after testing.\"\"\"\n        os.remove(self.file1)\n        os.remove(self.file2)\n        os.remove(self.file3)\n        shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        expected_output = datetime.fromtimestamp(self.creation_time1).strftime('%Y-%m-%d %H:%M:%S')\n        self.assertEqual(task_func(self.file1), expected_output)\n        \n    def test_case_2(self):\n        expected_output = datetime.fromtimestamp(self.creation_time2).strftime('%Y-%m-%d %H:%M:%S')\n        self.assertEqual(task_func(self.file2), expected_output)\n        \n    def test_case_3(self):\n        expected_output = datetime.fromtimestamp(self.creation_time3).strftime('%Y-%m-%d %H:%M:%S')\n        self.assertEqual(task_func(self.file3), expected_output)\n        \n    def test_case_4(self):\n        # Test for non-existing file\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"non_existing_file.txt\")\n    \n    def test_case_5(self):\n        # Test for a directory\n        dir_creation_time = os.path.getctime(self.test_dir)\n        expected_output = datetime.fromtimestamp(dir_creation_time).strftime('%Y-%m-%d %H:%M:%S')\n        self.assertEqual(task_func(self.test_dir), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of each word in a list and return a DataFrame of words and their number.\nThe function should output with:\n    DataFrame: A pandas DataFrame with words and their counts.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport pandas as pd\ndef task_func(myList):\n```",
        "gt": "from collections import Counter\nimport pandas as pd\ndef task_func(myList):\n    words = [w.lower().strip() for w in myList]\n    word_counts = dict(Counter(words))\n    report_df = pd.DataFrame.from_dict(word_counts, orient=\"index\", columns=[\"Count\"])\n\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        input_data = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"banana\"]\n        expected_output = pd.DataFrame(\n            {\"Count\": [2, 3, 1]}, index=[\"apple\", \"banana\", \"cherry\"]\n        )\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_2(self):\n        # Test repeated value\n        input_data = [\"apple\", \"apple\", \"apple\"]\n        expected_output = pd.DataFrame({\"Count\": [3]}, index=[\"apple\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_3(self):\n        # Test empty list\n        input_data = []\n        expected_output = pd.DataFrame(columns=[\"Count\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_4(self):\n        # Test single entry\n        input_data = [\"kiwi\"]\n        expected_output = pd.DataFrame({\"Count\": [1]}, index=[\"kiwi\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_5(self):\n        # Tests the function's ability to handle mixed case words correctly.\n        input_data = [\"Apple\", \"apple\", \"APPLE\"]\n        expected_output = pd.DataFrame({\"Count\": [3]}, index=[\"apple\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_6(self):\n        # Tests the function's ability to handle words with leading/trailing spaces.\n        input_data = [\"banana \", \" banana\", \"  banana\"]\n        expected_output = pd.DataFrame({\"Count\": [3]}, index=[\"banana\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_7(self):\n        # Tests the function's ability to handle words with special characters.\n        input_data = [\"kiwi!\", \"!kiwi\", \"kiwi\"]\n        expected_output = pd.DataFrame(\n            {\"Count\": [1, 1, 1]}, index=[\"kiwi!\", \"!kiwi\", \"kiwi\"]\n        )\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_8(self):\n        # Tests the function's handling of numeric strings as words.\n        input_data = [\"123\", \"456\", \"123\", \"456\", \"789\"]\n        expected_output = pd.DataFrame(\n            {\"Count\": [2, 2, 1]}, index=[\"123\", \"456\", \"789\"]\n        )\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_9(self):\n        # Tests the function's handling of empty strings and strings with only spaces.\n        input_data = [\" \", \"  \", \"\", \"apple\", \"apple \"]\n        expected_output = pd.DataFrame({\"Count\": [3, 2]}, index=[\"\", \"apple\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)\n    def test_case_10(self):\n        # Tests handling of strings that become duplicates after strip() is applied.\n        input_data = [\"banana\", \"banana \", \" banana\", \"banana\"]\n        expected_output = pd.DataFrame({\"Count\": [4]}, index=[\"banana\"])\n        pd.testing.assert_frame_equal(task_func(input_data), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a dictionary where keys are specified letters and values are lists of random integers. Then calculate the mean of these integers for each key and return a dictionary of these means.\nThe function should output with:\n    dict: A dictionary where each key is a letter from the input list and the value is the mean of\n    a randomly generated list of integers (with each list having 1 to 10 integers ranging from 0 to 100).\nYou should write self-contained code starting with:\n```\nimport random\nimport numpy as np\ndef task_func(LETTERS):\n```",
        "gt": "import random\nimport numpy as np\ndef task_func(LETTERS):\n    random_dict = {k: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for k in LETTERS}\n    mean_dict = {k: np.mean(v) for k, v in random_dict.items()}\n    return mean_dict",
        "test": "import unittest\n    \nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Common setup for all tests: explicitly define the list of letters\n        self.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    def test_case_1(self):\n        # Test if the function returns a dictionary\n        mean_dict = task_func(self.letters)\n        self.assertIsInstance(mean_dict, dict)\n    def test_case_2(self):\n        # Test if the dictionary contains all letters of the alphabet\n        mean_dict = task_func(self.letters)\n        self.assertTrue(all(letter in mean_dict for letter in self.letters))\n        \n    def test_case_3(self):\n        # Test if the values in the dictionary are floats (means of lists of integers)\n        mean_dict = task_func(self.letters)\n        self.assertTrue(all(isinstance(val, float) for val in mean_dict.values()))\n    def test_case_4(self):\n        # Test if the mean values are reasonable given the range of random integers (0-100)\n        mean_dict = task_func(self.letters)\n        self.assertTrue(all(0 <= val <= 100 for val in mean_dict.values()))\n    def test_case_5(self):\n        # Test if the dictionary has 26 keys (one for each letter of the alphabet)\n        mean_dict = task_func(self.letters)\n        self.assertEqual(len(mean_dict), 26)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the number of integers and floating-point numbers in a comma-separated string and calculate the sum of their square roots.\nThe function should output with:\n    count (int): The number of integers and floats in the string.\n    sqrt_sum (float): The sum of the square roots of the integers and floats.\nYou should write self-contained code starting with:\n```\nimport re\nimport math\ndef task_func(s):\n```",
        "gt": "import re\nimport math\ndef task_func(s):\n    numbers = re.findall(r'\\b\\d+(?:\\.\\d+)?\\b', s)  # Use non-capturing group for decimals\n    count = len(numbers)\n    sqrt_sum = sum(math.sqrt(float(num)) for num in numbers if num)  # Ensure conversion to float\n    return count, sqrt_sum",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        count, sqrt_sum = task_func('1,2,3.5,abc,4,5.6')\n        self.assertEqual(count, 5)\n        self.assertAlmostEqual(sqrt_sum, sum(math.sqrt(x) for x in [1, 2, 3.5, 4, 5.6]))\n    def test_2(self):\n        count, sqrt_sum = task_func('a,b,c,10,20.5')\n        self.assertEqual(count, 2)\n        self.assertAlmostEqual(sqrt_sum, sum(math.sqrt(x) for x in [10, 20.5]))\n    def test_3(self):\n        count, sqrt_sum = task_func('1.1,2.2,3.3')\n        self.assertEqual(count, 3)\n        self.assertAlmostEqual(sqrt_sum, sum(math.sqrt(x) for x in [1.1, 2.2, 3.3]))\n    def test_4(self):\n        count, sqrt_sum = task_func('')\n        self.assertEqual(count, 0)\n        self.assertEqual(sqrt_sum, 0.0)\n    def test_5(self):\n        count, sqrt_sum = task_func('apple,banana,3.14,15,grape,1001')\n        self.assertEqual(count, 3)\n        self.assertAlmostEqual(sqrt_sum, sum(math.sqrt(x) for x in [3.14, 15, 1001]))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function secures a client socket using SSL/TLS and sends back the SHA256 hash of a file requested by the client.\nNote that: This function assumes that the client requests a file by sending its path. The function does not handle the opening or closing of the client_socket itself. Error handling is basic and might need to be expanded based on specific use cases.\nThe function should output with:\n    str: The SHA256 hash of the requested file. If the requested file does not exist, returns 'File not found'.\n    In case of an exception during processing, an error message is returned.\nYou should write self-contained code starting with:\n```\nimport ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n```",
        "gt": "import ssl\nimport os\nimport hashlib\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n    context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n    secure_socket = None\n    try:\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n        request = secure_socket.recv(buffer_size).decode(\"utf-8\")\n\n        if os.path.exists(request):\n            with open(request, \"rb\") as file:\n                sha256_hash = hashlib.sha256()\n                for byte_block in iter(lambda: file.read(4096), b\"\"):\n                    sha256_hash.update(byte_block)\n                response = sha256_hash.hexdigest()\n        else:\n            response = \"File not found\"\n\n        secure_socket.send(response.encode(\"utf-8\"))\n    except Exception as e:\n        response = f\"Error: {str(e)}\"\n    finally:\n        if secure_socket:\n            secure_socket.close()\n\n    return response",
        "test": "import unittest\nfrom unittest.mock import MagicMock, patch\nimport ssl\nimport os\nimport hashlib\nclass TestCases(unittest.TestCase):\n    \"\"\"Unit tests for task_func.\"\"\"\n    @patch(\"ssl.SSLContext\")\n    @patch(\"socket.socket\")\n    def test_file_found(self, mock_socket, mock_ssl_context):\n        \"\"\"Test that the function returns the correct SHA256 hash when the file exists.\"\"\"\n        # Mocking the certificate and key file paths\n        cert_file = \"path/to/certificate.crt\"\n        key_file = \"path/to/private.key\"\n        # Mocking the SSL context and secure socket\n        mock_context = MagicMock()\n        mock_ssl_context.return_value = mock_context\n        mock_secure_socket = MagicMock()\n        mock_context.wrap_socket.return_value = mock_secure_socket\n        # Mocking the request and response\n        mock_request = \"path/to/requested_file.txt\"\n        mock_secure_socket.recv.return_value = mock_request.encode(\"utf-8\")\n        # Mock file existence and content for hashing\n        with patch(\"os.path.exists\") as mock_exists:\n            mock_exists.return_value = True\n            with patch(\n                \"builtins.open\", unittest.mock.mock_open(read_data=b\"file content\")\n            ) as mock_file:\n                # Call the function\n                result = task_func(mock_socket, cert_file, key_file)\n                # Check if file was opened\n                mock_file.assert_called_with(mock_request, \"rb\")\n                # Create expected hash\n                expected_hash = hashlib.sha256(b\"file content\").hexdigest()\n                # Assertions\n                self.assertEqual(result, expected_hash)\n                mock_context.wrap_socket.assert_called_with(\n                    mock_socket, server_side=True\n                )\n                mock_secure_socket.send.assert_called()\n                mock_secure_socket.close.assert_called()\n    @patch(\"ssl.SSLContext\")\n    @patch(\"socket.socket\")\n    def test_file_not_found(self, mock_socket, mock_ssl_context):\n        \"\"\"Test that the function returns 'File not found' if the requested file does not exist.\"\"\"\n        # Mocking the certificate and key file paths\n        cert_file = \"path/to/certificate.crt\"\n        key_file = \"path/to/private.key\"\n        # Mocking the SSL context and secure socket\n        mock_context = MagicMock()\n        mock_ssl_context.return_value = mock_context\n        mock_secure_socket = MagicMock()\n        mock_context.wrap_socket.return_value = mock_secure_socket\n        # Mocking the request\n        mock_request = \"path/to/nonexistent_file.txt\"\n        mock_secure_socket.recv.return_value = mock_request.encode(\"utf-8\")\n        # Mock file existence\n        with patch(\"os.path.exists\") as mock_exists:\n            mock_exists.return_value = False\n            # Call the function\n            result = task_func(mock_socket, cert_file, key_file)\n            # Assertions\n            self.assertEqual(result, \"File not found\")\n            mock_context.wrap_socket.assert_called_with(mock_socket, server_side=True)\n            mock_secure_socket.send.assert_called_with(\n                \"File not found\".encode(\"utf-8\")\n            )\n            mock_secure_socket.close.assert_called()\n    @patch(\"ssl.SSLContext\")\n    @patch(\"socket.socket\")\n    def test_exception_handling(self, mock_socket, mock_ssl_context):\n        \"\"\"Test that the function handles exceptions properly.\"\"\"\n        # Mocking the certificate and key file paths\n        cert_file = \"path/to/certificate.crt\"\n        key_file = \"path/to/private.key\"\n        # Mocking the SSL context and setting up to raise an exception\n        mock_context = MagicMock()\n        mock_ssl_context.return_value = mock_context\n        mock_secure_socket = MagicMock()\n        mock_context.wrap_socket.return_value = mock_secure_socket\n        # Configuring the secure_socket to raise an exception when recv is called\n        mock_secure_socket.recv.side_effect = Exception(\"Test exception\")\n        # Call the function and verify that it handles the exception\n        result = task_func(mock_socket, cert_file, key_file)\n        # Assertions\n        self.assertTrue(\"Error: Test exception\" in result)\n        mock_context.wrap_socket.assert_called_with(mock_socket, server_side=True)\n        mock_secure_socket.close.assert_called()\n    @patch(\"ssl.SSLContext\")\n    @patch(\"socket.socket\")\n    def test_task_func_empty_file(self, mock_socket, mock_ssl_context):\n        \"\"\"Test that the function returns the correct SHA256 hash for an empty file.\"\"\"\n        # Setup for empty file scenario\n        cert_file = \"path/to/certificate.crt\"\n        key_file = \"path/to/private.key\"\n        # Mocking SSL context and secure socket\n        mock_context = MagicMock()\n        mock_ssl_context.return_value = mock_context\n        mock_secure_socket = MagicMock()\n        mock_context.wrap_socket.return_value = mock_secure_socket\n        # Mocking the request for an empty file\n        mock_request = \"path/to/empty_file.txt\"\n        mock_secure_socket.recv.return_value = mock_request.encode(\"utf-8\")\n        with patch(\"os.path.exists\") as mock_exists, patch(\n            \"builtins.open\", unittest.mock.mock_open(read_data=b\"\")\n        ) as mock_file:  # Note the b'' for empty bytes\n            mock_exists.return_value = True\n            # Call the function\n            result = task_func(mock_socket, cert_file, key_file)\n            # Expected hash for an empty file\n            expected_hash = hashlib.sha256(b\"\").hexdigest()  # Hash of empty bytes\n            # Assertions\n            self.assertEqual(result, expected_hash)\n            mock_file.assert_called_with(mock_request, \"rb\")\n    @patch(\"ssl.SSLContext\")\n    @patch(\"socket.socket\")\n    def test_task_func_large_file(self, mock_socket, mock_ssl_context):\n        \"\"\"Test that the function returns the correct SHA256 hash for a large file.\"\"\"\n        # Setup for large file scenario\n        cert_file = \"path/to/certificate.crt\"\n        key_file = \"path/to/private.key\"\n        # Mocking SSL context and secure socket\n        mock_context = MagicMock()\n        mock_ssl_context.return_value = mock_context\n        mock_secure_socket = MagicMock()\n        mock_context.wrap_socket.return_value = mock_secure_socket\n        # Mocking the request for a large file\n        mock_request = \"path/to/large_file.txt\"\n        mock_secure_socket.recv.return_value = mock_request.encode(\"utf-8\")\n        large_file_content = b\"a\" * 10**6  # 1 MB of data\n        with patch(\"os.path.exists\") as mock_exists, patch(\n            \"builtins.open\", unittest.mock.mock_open(read_data=large_file_content)\n        ) as mock_file:\n            mock_exists.return_value = True\n            # Call the function\n            result = task_func(mock_socket, cert_file, key_file)\n            # Expected hash for the large file\n            expected_hash = hashlib.sha256(large_file_content).hexdigest()\n            # Assertions\n            self.assertEqual(result, expected_hash)\n            mock_file.assert_called_with(mock_request, \"rb\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Hash each non-empty line of a multi-line string using SHA256 and save the hashes to files. The filename is the first 10 characters of the hash, with a '.txt' extension.\nNote that: Notes: If the DIRECTORY does not exist, it is created. Empty lines in the input string are ignored.\nThe function should output with:\n    list[str]: A list of file paths where the hashes of non-empty lines are saved.\nYou should write self-contained code starting with:\n```\nimport os\nimport hashlib\n# Constants\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n```",
        "gt": "import os\nimport hashlib\n# Constants\nDIRECTORY = \"./hashed_files\"\ndef task_func(input_string):\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    file_paths = []\n    lines = input_string.split(\"\\n\")\n    for line in lines:\n        if line:  # Check if line is not empty\n            line_hash = hashlib.sha256(line.encode()).hexdigest()\n            filename = line_hash[:10] + \".txt\"\n            filepath = os.path.join(DIRECTORY, filename)\n            with open(filepath, \"w\", encoding=\"utf-8\") as file:\n                file.write(line_hash)\n            file_paths.append(filepath)\n\n    return file_paths",
        "test": "import unittest\nimport os\nimport hashlib\nimport shutil\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def setUp(self):\n        \"\"\"Set up a temporary directory for test files.\"\"\"\n        self.temp_directory = \"./temp_test_files\"\n        os.makedirs(self.temp_directory, exist_ok=True)\n    def tearDown(self):\n        \"\"\"Clean up by removing the temporary directory after tests.\"\"\"\n        shutil.rmtree(self.temp_directory)\n        dirs_to_remove = [\"hashed_files\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)\n    def test_single_line(self):\n        \"\"\"Test with a single line input.\"\"\"\n        input_string = \"Hello world\"\n        expected = [os.path.join(\"./hashed_files\", \"64ec88ca00.txt\")]\n        result = task_func(input_string)\n        self.assertEqual(result, expected)\n    def test_multi_line(self):\n        \"\"\"Test with a multi-line input.\"\"\"\n        input_string = \"First line\\nSecond line\\nThird line\"\n        expected = [\n            os.path.join(\"./hashed_files\", \"2361df1018.txt\"),\n            os.path.join(\"./hashed_files\", \"c8b588f708.txt\"),\n            os.path.join(\"./hashed_files\", \"3195807ae4.txt\"),\n        ]\n        result = task_func(input_string)\n        self.assertEqual(result, expected)\n    def test_empty_input(self):\n        \"\"\"Test with an empty string.\"\"\"\n        input_string = \"\"\n        expected = []\n        result = task_func(input_string)\n        self.assertEqual(result, expected)\n    def test_input_with_empty_lines(self):\n        \"\"\"Test input string containing empty lines.\"\"\"\n        input_string = \"Line one\\n\\nLine two\\n\"\n        expected = [\n            os.path.join(\"./hashed_files\", \"209f4c0be3.txt\"),\n            os.path.join(\"./hashed_files\", \"1ae5466eb8.txt\"),\n        ]\n        result = task_func(input_string)\n        self.assertEqual(result, expected)\n    def test_no_newline_at_end(self):\n        \"\"\"Test input string without a newline at the end.\"\"\"\n        input_string = \"Line with no newline at end\"\n        expected = [os.path.join(\"./hashed_files\", \"901dd863e9.txt\")]\n        result = task_func(input_string)\n        self.assertEqual(result, expected)\n    def test_directory_creation(self):\n        \"\"\"\n        Test if the function creates the directory if it does not exist.\n        \"\"\"\n        # Assert that the DIRECTORY does not exist before calling the function\n        self.assertFalse(os.path.exists(DIRECTORY))\n        # Call the function with any string\n        task_func(\"Test for directory creation\")\n        # Check if the DIRECTORY has been created\n        self.assertTrue(os.path.exists(DIRECTORY))\n        # Optionally, clean up by removing the created directory after the test\n        if os.path.exists(DIRECTORY):\n            shutil.rmtree(DIRECTORY)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace all elements in DataFrame columns that do not exist in the TARGET_VALUES array with zeros, then perform a Box-Cox transformation on each column (if data is not constant, add 1 to account for zeros) and display the resulting KDE plots.\nThe function should output with:\n    pandas.DataFrame: The transformed DataFrame after Box-Cox transformation.\n    matplotlib.figure.Figure: Figure containing KDE plots of the transformed columns.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nTARGET_VALUES = np.array([1, 3, 4])\ndef task_func(df):\n    # Ensure the DataFrame contains only positive values\n    if (df <= 0).any().any():\n        raise ValueError(\"Input DataFrame should contain only positive values.\")\n\n    df = df.applymap(lambda x: x if x in TARGET_VALUES else 0)\n\n    transformed_df = pd.DataFrame()\n\n    fig, ax = plt.subplots()\n\n    for column in df.columns:\n        # Check if data is constant\n        if df[column].nunique() == 1:\n            transformed_df[column] = df[column]\n        else:\n            transformed_data, _ = stats.boxcox(\n                df[column] + 1\n            )  # Add 1 since the are some null values\n            transformed_df[column] = transformed_data\n\n            # Using matplotlib's kde method to plot the KDE\n            kde = stats.gaussian_kde(transformed_df[column])\n            x_vals = np.linspace(\n                min(transformed_df[column]), max(transformed_df[column]), 1000\n            )\n            ax.plot(x_vals, kde(x_vals), label=column)\n\n    ax.legend()\n    plt.show()\n    return transformed_df, fig",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 2, 3, 4, 3, 2, 2, 1],\n                \"B\": [7, 8, 9, 1, 2, 3, 5, 6],\n                \"C\": [9, 7, 3, 1, 8, 6, 2, 1],\n            }\n        )\n        transformed_df, fig = task_func(df)\n        self.assertEqual(transformed_df.shape, df.shape)\n    def test_case_2(self):\n        df = pd.DataFrame({\"A\": [1, 1, 1], \"B\": [3, 3, 3], \"C\": [4, 4, 4]})\n        transformed_df, fig = task_func(df)\n        self.assertEqual(transformed_df.shape, df.shape)\n        self.assertEqual(len(fig.axes[0].lines), 0)\n        pd.testing.assert_frame_equal(transformed_df, df)\n    def test_case_3(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 7, 5, 4],\n                \"B\": [3, 11, 1, 29],\n                \"C\": [4, 9, 8, 4],\n                \"D\": [16, 12, 20, 8],\n            }\n        )\n        transformed_df, fig = task_func(df)\n        self.assertEqual(transformed_df.shape, df.shape)\n        self.assertEqual(len(fig.axes[0].lines), 3)\n    def test_case_4(self):\n        df = pd.DataFrame(\n            {\n                \"E\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                \"F\": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n            }\n        )\n        transformed_df, fig = task_func(df)\n        self.assertEqual(transformed_df.shape, df.shape)\n        self.assertEqual(len(fig.axes[0].lines), 1)\n    def test_case_5(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [0, 0, 0, 0],\n            }\n        )\n        with self.assertRaises(ValueError):\n            transformed_df, _ = task_func(df)\n    def test_case_6(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 2, 3, -4],\n            }\n        )\n        with self.assertRaises(ValueError):\n            transformed_df, _ = task_func(df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Unzips the provided list of tuples and plots the numerical values for each position.\nThe function should raise the exception for: ValueError: If the data_list is empty.\nThe function should output with:\n    Axes: The plot with the unzipped numerical values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(data_list):\n    unzipped_data = list(itertools.zip_longest(*data_list, fillvalue=np.nan))\n    if len(unzipped_data) == 0:\n        raise ValueError('Empty data_list')\n    \n    fig, ax = plt.subplots()\n    for i, column in enumerate(unzipped_data[1:], start=1):\n        ax.plot(column, label='Position {}'.format(i))\n    ax.legend()\n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data_list = [('a', 1, 2), ('b', 2, 3), ('c', 3, 4), ('d', 4, 5), ('e', 5, 6)]\n        plot = task_func(data_list)\n        self.assertIsInstance(plot, type(plt.gca()))\n    def test_case_2(self):\n        data_list = [('a', 6, 7), ('b', 7, 8), ('c', 8, 9)]\n        plot = task_func(data_list)\n        self.assertIsInstance(plot, type(plt.gca()))\n        # Test the plot data\n        self.assertEqual(len(plot.lines), 2)\n    def test_case_3(self):\n        data_list = []\n        with self.assertRaises(ValueError):  # Expecting a ValueError due to empty data_list\n            task_func(data_list)\n    def test_case_4(self):\n        data_list = [('a', 10, 11), ('b', 11, 12), ('c', 12, 13), ('d', 13, 14)]\n        plot = task_func(data_list)\n        self.assertIsInstance(plot, type(plt.gca()))\n        # Test the plot data array\n        self.assertEqual(len(plot.lines), 2)\n        # Test the plot limits\n        self.assertAlmostEqual(plot.get_xlim()[0], -0.15, places=1)\n        self.assertAlmostEqual(plot.get_xlim()[1], 3.15, places=1)\n    def test_case_5(self):\n        data_list = [('a', np.nan, np.nan), ('b', np.nan, np.nan)]\n        plot = task_func(data_list)\n        self.assertIsInstance(plot, type(plt.gca()))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Identifies and plots outliers in the 'closing_price' column of a given DataFrame using the Z-Score method. Constants: - Z-Score threshold for identifying outliers is customizable via the 'z_threshold' parameter. >>> df2 = pd.DataFrame({ ...     'closing_price': [10, 20, 30, 40, 50, 100] ... }) >>> outliers2, plot2 = task_func(df2, z_threshold=1.5)\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    pandas.DataFrame: A DataFrame containing the outliers in the 'closing_price' column.\n    matplotlib.axes._axes.Axes: The plot object displaying the outliers, if x-axis label 'Index', y-axis label 'Closing Price', and title 'Outliers in Closing Prices'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\ndef task_func(df, z_threshold=2):\n    # Calculate Z-Scores for the 'closing_price' column\n    df['Z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers based on Z-Score threshold\n    outliers = df[np.abs(df['Z_score']) > z_threshold]\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(df['closing_price'], color='blue', label='Normal')\n    ax.plot(outliers['closing_price'], linestyle='none', marker='X', color='red', markersize=12, label='Outlier')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend(loc='best')\n    \n    return outliers, ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        df1 = pd.DataFrame({\n            'closing_price': [100, 101, 102, 103, 104, 150]\n        })\n        outliers1, plot1 = task_func(df1)\n        self.assertEqual(outliers1['closing_price'].tolist(), [150])\n        self.assertEqual(plot1.get_title(), 'Outliers in Closing Prices')\n        self.assertEqual(plot1.get_xlabel(), 'Index')\n        self.assertEqual(plot1.get_ylabel(), 'Closing Price')\n    \n    def test_case_2(self):\n        df2 = pd.DataFrame({\n            'closing_price': [10, 20, 30, 40, 50, 100]\n        })\n        outliers2, plot2 = task_func(df2, z_threshold=1.5)\n        self.assertEqual(outliers2['closing_price'].tolist(), [100])\n        self.assertEqual(outliers2['Z_score'].tolist(), [2.004094170098539])\n        \n    def test_case_3(self):\n        df3 = pd.DataFrame({\n            'closing_price': [112,23,23,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n        })\n        outliers3, plot3 = task_func(df3, z_threshold=3)\n        self.assertEqual(outliers3['closing_price'].tolist(), [112])\n        self.assertEqual(outliers3['Z_score'].tolist(), [4.309576782241563])\n    def test_case_4(self):\n        df3 = pd.DataFrame({\n            'closing_price': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 112]\n        })\n        outliers3, plot3 = task_func(df3, z_threshold=-1)\n        self.assertEqual(outliers3['closing_price'].tolist(), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 112])\n        self.assertEqual(outliers3['Z_score'].tolist(), [-0.46136484230149855, -0.42883270598536727, -0.39630056966923594, -0.36376843335310466, -0.3312362970369733, -0.29870416072084205, -0.2661720244047107, -0.2336398880885794, -0.2011077517724481, -0.16857561545631677, 3.1497022887890767])\n        \n    def test_case_5(self):\n        df3 = pd.DataFrame({\n            'closing_price': []\n        })\n        outliers3, plot3 = task_func(df3, z_threshold=0)\n        self.assertEqual(outliers3['closing_price'].tolist(), [])\n        self.assertEqual(outliers3['Z_score'].tolist(), [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of a matrix 'P' and a 3D tensor 'T', flatten the result, apply KMeans clustering to the flattened data, and visualize it.\nThe function should output with:\n    cluster_result (numpy.ndarray): The result of KMeans clustering.\n    ax (matplotlib.axes.Axes): The visualization of the KMeans clustering, with the title 'KMeans Clustering Visualization'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n```",
        "gt": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n\n    tensor_shape = (3, 3, 3)\n    if not T.shape == tensor_shape:\n        raise ValueError(\"Provided tensor does not match the expected shape.\")\n\n    # Using numpy for tensor product\n    result = np.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)\n    flattened_result = result.reshape(-1, tensor_shape[2])  # Flattening the result\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(flattened_result)\n    fig, ax = plt.subplots()\n    ax.scatter(flattened_result[:, 0], flattened_result[:, 1], c=cluster_result)\n    ax.set_title(\"KMeans Clustering Visualization\")\n    return cluster_result, ax",
        "test": "import unittest\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.random_seed = 0\n        np.random.seed(self.random_seed)\n        self.P = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n        self.T = np.random.rand(3, 3, 3)\n    def test_case_1(self):\n        # Test with easy example\n        P = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n        T = np.array(\n            [\n                [[1, 0, 0], [0, 1, 1], [0, 0, 1]],\n                [[1, 1, 0], [0, 1, 0], [0, 0, 1]],\n                [[1, 0, 1], [0, 1, 0], [1, 0, 1]],\n            ]\n        )\n        cluster_result, _ = task_func(P, T, n_clusters=3)\n        self.assertEqual(len(np.unique(cluster_result)), 3)\n    def test_case_2(self):\n        # Test correct cluster centers (against manual calculated results)\n        n_clusters = 3\n        n_init = 10\n        possible_labels = list(range(n_clusters))\n        result, _ = task_func(self.P, self.T, random_state=self.random_seed, n_init=n_init)\n        manual_results = KMeans(\n            n_clusters=n_clusters, random_state=self.random_seed, n_init=n_init\n        ).fit(\n            np.tensordot(self.P, self.T, axes=[1, 1])\n            .swapaxes(0, 1)\n            .reshape(-1, n_clusters)\n        )\n        self.assertTrue((result == manual_results.labels_).all())\n        self.assertEqual(result.shape, (self.P.shape[0] * n_clusters,))\n        self.assertEqual(\n            manual_results.cluster_centers_.shape, (n_clusters, n_clusters)\n        )\n        self.assertTrue((pred in possible_labels for pred in result))\n    def test_case_3(self):\n        # Test visualizations\n        _, ax = task_func(self.P, self.T)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"KMeans Clustering Visualization\")\n        num_data_points = len(ax.collections[0].get_offsets())\n        self.assertEqual(num_data_points, self.P.shape[0] * 3)\n    def test_case_4(self):\n        # Test changing number of clusters\n        for n_clusters in [1, 3, 5]:\n            cluster_result, _ = task_func(self.P, self.T, n_clusters=n_clusters)\n            unique_clusters = np.unique(cluster_result)\n            self.assertEqual(len(unique_clusters), n_clusters)\n    def test_case_5(self):\n        # Function should fail with incompatible input - n_cluster and n_init\n        for invalid in [-1, 0, \"invalid\"]:\n            with self.assertRaises(Exception):\n                task_func(self.P, self.T, n_clusters=invalid)\n    def test_case_6(self):\n        # Function should fail with incompatible input - shapes\n        with self.assertRaises(ValueError):\n            task_func(np.random.randn(2, 2), self.T)\n        with self.assertRaises(ValueError):\n            task_func(self.P, np.random.randn(2, 2))\n    def test_case_7(self):\n        # Function should fail with incompatible input - random_state\n        with self.assertRaises(ValueError):\n            task_func(self.P, self.T, random_state=\"invalid\")\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes all files within the specified directory, normalizes their filenames to ASCII, calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where each key is the normalized file name and each value is another dictionary with the file's size and MD5 hash. This method is useful for file integrity checks and file organization tasks.\nThe function should output with:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n    containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\nYou should write self-contained code starting with:\n```\nimport os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n```",
        "gt": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\ndef task_func(directory):\n    files_info = {}\n\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n\n    return files_info",
        "test": "import unittest\nimport os\nimport tempfile\nimport hashlib\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a temporary directory with files for testing\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.test_file_path = os.path.join(self.temp_dir.name, \"t\u00e9st.txt\")\n        with open(self.test_file_path, \"w\") as file:\n            file.write(\"Hello World\")\n    def test_return_type(self):\n        result = task_func(self.temp_dir.name)\n        self.assertIsInstance(result, dict)\n    def test_file_presence(self):\n        result = task_func(self.temp_dir.name)\n        self.assertIn(\"test.txt\", result)\n    def test_file_size(self):\n        result = task_func(self.temp_dir.name)\n        self.assertEqual(result[\"test.txt\"][\"Size\"], 11)\n    def test_file_hash(self):\n        # This test could check the MD5 hash of a known file content\n        expected_hash = hashlib.md5(\"Hello World\".encode()).hexdigest()\n        result = task_func(self.temp_dir.name)\n        normalized_file_name = \"test.txt\"\n        self.assertEqual(result[normalized_file_name][\"MD5 Hash\"], expected_hash)\n    def test_normalized_filename(self):\n        # This test could check for filename normalization (ASCII conversion)\n        result = task_func(self.temp_dir.name)\n        expected_name = \"test.txt\"\n        self.assertIn(expected_name, result)\n        self.assertNotIn(\"t\u00e9st.txt\", result)\n    def tearDown(self):\n        self.temp_dir.cleanup()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Removes all special characters, punctuation marks, and spaces from the input string using a regular expression, retaining only alphanumeric characters. Then hashes the cleaned string with SHA256.\nThe function should output with:\n    str: The SHA256 hash of the cleaned string.\nYou should write self-contained code starting with:\n```\nimport re\nimport hashlib\ndef task_func(input_str):\n```",
        "gt": "import re\nimport hashlib\ndef task_func(input_str):\n    cleaned_str = re.sub('[^A-Za-z0-9]+', '', input_str)\n    hashed_str = hashlib.sha256(cleaned_str.encode()).hexdigest()\n\n    return hashed_str",
        "test": "import unittest\nimport hashlib\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Test with special characters and spaces\n        result = task_func('Special $#! characters   spaces 888323')\n        expected = hashlib.sha256('Specialcharactersspaces888323'.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        # Test with a standard phrase\n        result = task_func('Hello World!')\n        expected = hashlib.sha256('HelloWorld'.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        # Test with numeric input\n        result = task_func('1234567890')\n        expected = hashlib.sha256('1234567890'.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        # Test with an empty string\n        result = task_func('')\n        expected = hashlib.sha256(''.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        # Test with a single word\n        result = task_func('A')\n        expected = hashlib.sha256('A'.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_6(self):\n        # Test with only special characters\n        result = task_func('$#!@%')\n        expected = hashlib.sha256(''.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_7(self):\n        # Test with leading and trailing whitespace\n        result = task_func('   leading and trailing spaces   ')\n        expected = hashlib.sha256('leadingandtrailingspaces'.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_8(self):\n        # Test with mixed case and numbers\n        result = task_func('Test123')\n        expected = hashlib.sha256('Test123'.encode()).hexdigest()\n        self.assertEqual(result, expected)\n    def test_case_9(self):\n        # Test with non-ASCII unicode characters\n        result = task_func('Caf\u00e9123')\n        expected = hashlib.sha256('Caf123'.encode()).hexdigest()  # Assumes non-ASCII chars are removed\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform Principal Component Analysis (PCA) on a list of tuples.\nThe function should output with:\n    transformed_data (ndarray): The transformed data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n```",
        "gt": "import numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(tuples_list, n_components):\n    data = np.array(tuples_list)\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    return transformed_data",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        transformed_data = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 2)\n        self.assertEqual(transformed_data.shape, (3, 2))\n    def test_case_2(self):\n        transformed_data = task_func([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)], 2)\n        self.assertEqual(transformed_data.shape, (3, 2))\n        self.assertTrue(np.all(transformed_data == 0))\n    def test_case_3(self):\n        transformed_data = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 3)\n        self.assertEqual(transformed_data.shape, (3, 3))\n    def test_case_4(self):\n        transformed_data = task_func([(0, 1)], 1)\n        self.assertEqual(transformed_data.shape, (1, 1))\n        self.assertTrue(np.all(transformed_data == 0))\n    def test_case_5(self):\n        transformed_data = task_func([(-1, -1, -1), (0, 0, 0), (1, 1, 1)], 1)\n        self.assertEqual(transformed_data.shape, (3, 1))\n        self.assertTrue(transformed_data[1][0] == 0)\n        try:\n            self.assertTrue(transformed_data[0][0] < 0)\n            self.assertTrue(transformed_data[2][0] > 0)\n        except:\n            self.assertTrue(transformed_data[0][0] > 0)\n            self.assertTrue(transformed_data[2][0] < 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate temperature data for the specified number of hours, save it in a CSV file, and plot the data using matplotlib. Data Structure: The function uses a dictionary to manage the generated temperature data with keys: 'Time', 'Temperature', and 'Category'.\nThe function should output with:\n    tuple:\n    str: The path of the generated CSV file.\n    Axes: The plot object for further manipulation or saving.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n```",
        "gt": "from datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nTEMP_CATEGORIES = ['Cold', 'Normal', 'Hot']\nFILE_PATH = 'custom_data.csv'\ndef task_func(hours, file_path=FILE_PATH):\n\n    data = {'Time': [], 'Temperature': [], 'Category': []}\n    for i in range(hours):\n        temp = randint(-10, 40)  # random temperature between -10 and 40\n        data['Time'].append(datetime.now().strftime('%H:%M:%S.%f'))\n        data['Temperature'].append(temp)\n        if temp < 0:\n            data['Category'].append(TEMP_CATEGORIES[0])\n        elif temp > 25:\n            data['Category'].append(TEMP_CATEGORIES[2])\n        else:\n            data['Category'].append(TEMP_CATEGORIES[1])\n\n    df = pd.DataFrame(data)\n    df.to_csv(file_path, index=False)\n    \n    ax = df.plot(x = 'Time', y = 'Temperature', kind = 'line', title=\"Temperature Data Over Time\")\n    plt.show()\n\n    return file_path, ax",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        \"\"\"Clean up any files created during the tests.\"\"\"\n        # Check and remove the expected file if it exists\n        if os.path.exists(FILE_PATH):\n            os.remove(FILE_PATH)\n    def test_case_1(self):\n        # Testing with 1 hour\n        file_path, ax = task_func(1)\n        self.assertEqual(file_path, FILE_PATH)\n        self.assertTrue(os.path.exists(file_path))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 1)\n    def test_case_2(self):\n        # Testing with 24 hours\n        file_path, ax = task_func(24)\n        self.assertEqual(file_path, FILE_PATH)\n        self.assertTrue(os.path.exists(file_path))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 24)\n    def test_case_3(self):\n        # Testing with 120 hours\n        file_path, ax = task_func(120)\n        self.assertEqual(file_path, FILE_PATH)\n        self.assertTrue(os.path.exists(file_path))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 120)\n    def test_case_4(self):\n        # Testing with a custom file path\n        file_path, ax = task_func(24, FILE_PATH)\n        self.assertEqual(file_path, FILE_PATH)\n        self.assertTrue(os.path.exists(FILE_PATH))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 24)\n    def test_case_5(self):\n        # Testing the categories in the generated CSV file\n        file_path, ax = task_func(24, FILE_PATH)\n        df = pd.read_csv(file_path)\n        categories = df['Category'].unique().tolist()\n        for cat in categories:\n            self.assertIn(cat, ['Cold', 'Normal', 'Hot'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create SHA256 hashes for all files in the specified directory, including files in subdirectories, and save these hashes in a JSON file named 'hashes.json' in the given directory.\nThe function should output with:\n    str: The absolute path of the JSON file ('hashes.json') containing the hashes.\nYou should write self-contained code starting with:\n```\nimport os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n```",
        "gt": "import os\nimport hashlib\nimport json\nfrom pathlib import Path\ndef task_func(directory: str) -> str:\n    hash_dict = {}\n    \n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = Path(root) / file\n            with open(file_path, 'rb') as f:\n                bytes = f.read()  # read entire file as bytes\n                readable_hash = hashlib.sha256(bytes).hexdigest()\n                hash_dict[str(file_path)] = readable_hash\n                \n    # Save to JSON file\n    json_file = Path(directory) / 'hashes.json'\n    with open(json_file, 'w') as f:\n        json.dump(hash_dict, f)\n    return str(json_file)",
        "test": "import unittest\nimport os\nimport hashlib\nimport json\nfrom pathlib import Path\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Creating a temporary directory for testing\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Cleaning up the temporary directory\n        for root, dirs, files in os.walk(self.test_dir, topdown=False):\n            for name in files:\n                os.remove(os.path.join(root, name))\n            for name in dirs:\n                os.rmdir(os.path.join(root, name))\n        os.rmdir(self.test_dir)\n    def test_empty_directory(self):\n        # Testing with an empty directory\n        json_file = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(json_file))\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {})\n    def test_single_file(self):\n        # Testing with a directory containing a single file\n        filepath = os.path.join(self.test_dir, 'file1.txt')\n        with open(filepath, 'w') as f:\n            f.write(\"Hello, world!\")\n        json_file = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(json_file))\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n            self.assertIn(filepath, data.keys())\n    def test_multiple_files(self):\n        # Testing with a directory containing multiple files\n        files_content = {'file2.txt': \"Hello again!\", 'file3.txt': \"Goodbye!\"}\n        filepaths = {}\n        for filename, content in files_content.items():\n            filepath = os.path.join(self.test_dir, filename)\n            filepaths[filepath] = content\n            with open(filepath, 'w') as f:\n                f.write(content)\n        json_file = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(json_file))\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n            for filepath in filepaths.keys():\n                self.assertIn(filepath, data.keys())\n    def test_nested_directories(self):\n        # Testing with a directory containing nested subdirectories and files\n        sub_dir = os.path.join(self.test_dir, 'sub_dir')\n        filepath = os.path.join(sub_dir, 'file4.txt')\n        Path(sub_dir).mkdir(parents=True, exist_ok=True)\n        with open(filepath, 'w') as f:\n            f.write(\"Nested file content!\")\n        json_file = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(json_file))\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n            self.assertIn(filepath, data.keys())\n    def test_correct_hash(self):\n        # Testing if the computed hash is correct\n        filepath = os.path.join(self.test_dir, 'file5.txt')\n        with open(filepath, 'w') as f:\n            f.write(\"Check hash!\")\n        json_file = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(json_file))\n        with open(filepath, 'rb') as f:\n            bytes = f.read()\n            expected_hash = hashlib.sha256(bytes).hexdigest()\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data[filepath], expected_hash)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Add a new column with random values to the \"data\" DataFrame.\nThe function should raise the exception for: The function will raise an error if the input data is not pandas DataFrame\nThe function should output with:\n    DataFrame: Updated DataFrame with the new column added.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(data, key, min_value, max_value):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pandas DataFrame.\")\n    \n    random_generated = np.random.randint(min_value, max_value + 1, size=len(data))\n    data[key] = random_generated\n    return data",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\n# Blackbox test cases\nclass TestCases(unittest.TestCase):\n    def test_empty_data(self):\n        np.random.seed(0)\n        data = pd.DataFrame()\n        key = 'new_column'\n        min_value = 0\n        max_value = 10\n        updated_data = task_func(data, key, min_value, max_value)\n        self.assertIsInstance(updated_data, pd.DataFrame)\n        self.assertTrue(key in updated_data.columns)\n        self.assertEqual(len(updated_data), 0)\n    \n    def test_non_empty_data(self):\n        np.random.seed(0)\n        data = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'c']})\n        key = 'random_values'\n        min_value = 0\n        max_value = 10\n        updated_data = task_func(data, key, min_value, max_value)\n        self.assertIsInstance(updated_data, pd.DataFrame)\n        self.assertTrue(key in updated_data.columns)\n        self.assertEqual(len(updated_data), 3)  # Assuming the length of the input data is 3\n        self.assertTrue(all(min_value <= val <= max_value for val in updated_data[key]))\n        \n    def test_negative_values(self):\n        np.random.seed(0)\n        data = pd.DataFrame({'X': ['x1', 'x2'], 'Y': ['y1', 'y2']})\n        key = 'random'\n        min_value = -10\n        max_value = -5\n        updated_data = task_func(data, key, min_value, max_value)\n        self.assertIsInstance(updated_data, pd.DataFrame)\n        self.assertTrue(key in updated_data.columns)\n        self.assertEqual(len(updated_data), 2)\n        self.assertTrue(all(min_value <= val <= max_value for val in updated_data[key]))\n        \n    def test_single_row_data(self):\n        np.random.seed(0)\n        data = pd.DataFrame({'A': [5], 'B': ['abc']})\n        key = 'new_col'\n        min_value = 0\n        max_value = 10\n        updated_data = task_func(data, key, min_value, max_value)\n        self.assertIsInstance(updated_data, pd.DataFrame)\n        self.assertTrue(key in updated_data.columns)\n        self.assertEqual(len(updated_data), 1)\n        self.assertTrue(all(min_value <= val <= max_value for val in updated_data[key]))\n        \n    def test_large_data(self):\n        np.random.seed(0)\n        data = pd.DataFrame({'X': ['x' + str(i) for i in range(1000)], 'Y': ['y' + str(i) for i in range(1000)]})\n        key = 'random_numbers'\n        min_value = 1\n        max_value = 100\n        updated_data = task_func(data, key, min_value, max_value)\n        self.assertIsInstance(updated_data, pd.DataFrame)\n        self.assertTrue(key in updated_data.columns)\n        self.assertEqual(len(updated_data), 1000)\n        self.assertTrue(all(min_value <= val <= max_value for val in updated_data[key]))\n    def test_non_dataframe_input(self):\n        np.random.seed(0)\n        with self.assertRaises(ValueError):\n            data = {'key1': ['value1', 'value2', 'value3'], 'key2': [1, 2, 3]}\n            task_func(data, 'new_key', 0, 10)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame with specified length and random data and then record the data.\nThe function should output with:\n    DataFrame: A pandas DataFrame with random data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n```",
        "gt": "import pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length):\n\n    data = np.random.randint(0,100,size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Testing basic functionality\n        np.random.seed(0)\n        df = task_func(5)\n        self.assertIsInstance(df, pd.DataFrame, \"Output should be a DataFrame.\")\n        self.assertEqual(df.shape, (5, 5), \"DataFrame shape mismatch.\")\n        \n    def test_case_2(self):\n        # Testing custom columns\n        np.random.seed(0)\n        custom_columns = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n        df = task_func(3)\n        self.assertListEqual(list(df.columns), custom_columns, \"Column names mismatch.\")\n        \n    def test_case_3(self):\n        # Testing return plot\n        np.random.seed(0)\n        df = task_func(4)\n        self.assertIsInstance(df, pd.DataFrame, \"Output should be a DataFrame.\")\n        \n    def test_case_4(self):\n        # Testing data range\n        np.random.seed(0)\n        df = task_func(10)\n        self.assertTrue((df.values >= 0).all() and (df.values < 100).all(), \"Data values should be between 0 and 99.\")\n        \n    def test_case_5(self):\n        # Testing default columns\n        np.random.seed(0)\n        df = task_func(7)\n        default_columns = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n        self.assertListEqual(list(df.columns), default_columns, \"Default column names mismatch.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate and plot weather data for a specified date range. This function creates a DataFrame containing simulated daily weather data within the specified date range. It generates random values for temperature, humidity, and wind speed for each day. The function also plots these parameters over the date range and returns both the DataFrame and the plot object. The generated weather data ranges are as follows: - Temperature: Between -10\u00b0C and 40\u00b0C. - Humidity: Between 20% and 100%. - Wind Speed: Between 0 and 20 meters per second.\nThe function should raise the exception for: ValueError: If 'end_date' is before 'start_date', indicating an invalid date range.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns ['Date', 'Temperature', 'Humidity', 'Wind Speed'], containing the generated weather data for each day within the specified range.\n    Axes: A matplotlib Axes object of the plot showing the generated weather data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import timedelta\ndef task_func(start_date, end_date, random_seed=42):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom datetime import timedelta\ndef task_func(start_date, end_date, random_seed=42):\n    if end_date < start_date:\n        raise ValueError(\"End date must be after start date\")\n\n    np.random.seed(random_seed)\n\n    COLUMNS = [\"Date\", \"Temperature\", \"Humidity\", \"Wind Speed\"]\n    data = []\n    date = start_date\n\n    while date <= end_date:\n        temp = np.random.uniform(-10, 40)\n        humidity = np.random.uniform(20, 100)\n        wind_speed = np.random.uniform(0, 20)\n        data.append([date, temp, humidity, wind_speed])\n        date += timedelta(days=1)\n\n    df = pd.DataFrame(data, columns=COLUMNS)\n    ax = df.plot(x='Date', y=['Temperature', 'Humidity', 'Wind Speed'], title=\"Generated Weather Data\")\n\n    return df, ax",
        "test": "import unittest\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def test_random_reproducibility(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 10)\n        df1, _ = task_func(start_date, end_date, random_seed=42)\n        df2, _ = task_func(start_date, end_date, random_seed=42)\n        self.assertTrue(df1.equals(df2), \"DataFrames should be equal for the same random seed\")\n    def test_date_range(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 10)\n        df, _ = task_func(start_date, end_date)\n        expected_days = (end_date - start_date).days + 1\n        self.assertEqual(len(df), expected_days, \"DataFrame should have one row per day in the date range\")\n    def test_random_seed_effect(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 10)\n        df1, _ = task_func(start_date, end_date, random_seed=42)\n        df2, _ = task_func(start_date, end_date, random_seed=43)\n        self.assertFalse(df1.equals(df2), \"DataFrames should be different for different random seeds\")\n    def test_data_value_ranges(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 10)\n        df, _ = task_func(start_date, end_date)\n        self.assertTrue(df['Temperature'].between(-10, 40).all(), \"Temperature values should be within -10 to 40\")\n        self.assertTrue(df['Humidity'].between(20, 100).all(), \"Humidity values should be within 20 to 100\")\n        self.assertTrue(df['Wind Speed'].between(0, 20).all(), \"Wind Speed values should be within 0 to 20\")\n    def test_plot_attributes(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 10)\n        _, ax = task_func(start_date, end_date)\n        lines = [line.get_label() for line in ax.get_lines()]\n        self.assertIn('Temperature', lines, \"Plot should contain a line for Temperature\")\n        self.assertIn('Humidity', lines, \"Plot should contain a line for Humidity\")\n        self.assertIn('Wind Speed', lines, \"Plot should contain a line for Wind Speed\")\n        self.assertEqual(ax.get_xlabel(), 'Date', \"X-axis should be labeled 'Date'\")\n    \n    def test_correct_column_names(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 5)\n        df, _ = task_func(start_date, end_date)\n        expected_columns = ['Date', 'Temperature', 'Humidity', 'Wind Speed']\n        self.assertListEqual(list(df.columns), expected_columns, \"DataFrame should have the correct column names\")\n    def test_non_empty_dataframe(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 5)\n        df, _ = task_func(start_date, end_date)\n        self.assertFalse(df.empty, \"DataFrame should not be empty for a valid date range\")\n    def test_plot_object_type(self):\n        start_date = datetime(2021, 1, 1)\n        end_date = datetime(2021, 1, 5)\n        _, ax = task_func(start_date, end_date)\n        self.assertTrue(str(type(ax)).endswith(\"matplotlib.axes._axes.Axes'>\"), \"The second return value should be a matplotlib Axes object\")\n    def test_negative_date_range(self):\n        start_date = datetime(2021, 1, 10)\n        end_date = datetime(2021, 1, 5)\n        with self.assertRaises(ValueError):\n            task_func(start_date, end_date)\n    def test_single_day_date_range(self):\n        start_date = end_date = datetime(2021, 1, 1)\n        df, _ = task_func(start_date, end_date)\n        self.assertEqual(len(df), 1, \"DataFrame should contain exactly one row for a single day date range\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Return a bar chart of the number of activities performed on each day of the week based on the provided list of activities. If the activities are not datetime objects, raise a TypeError.\nThe function should raise the exception for: TypeError: If the activities are not datetime objects.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object representing the bar chart, with the x-axis labeled 'Day of the Week', the y-axis labeled 'Number of Activities', and the title 'Weekly Activity'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n```",
        "gt": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(activities):\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError('All activities must be datetime objects')\n    activity_counts = defaultdict(int)\n\n    # Count the activities for each day of the week\n    for activity in activities:\n        day = activity.strftime('%A')\n        activity_counts[day] += 1\n\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    counts = [activity_counts[day] for day in days]\n\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n    \n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input: Activities on Monday and Tuesday\n        activities = [datetime(2023, 10, 23), datetime(2023, 10, 24)]\n        ax = task_func(activities)\n        bars = ax.patches\n        # Assert correct title, x and y labels\n        self.assertEqual(ax.get_title(), 'Weekly Activity')\n        self.assertEqual(ax.get_xlabel(), 'Day of the Week')\n        self.assertEqual(ax.get_ylabel(), 'Number of Activities')\n        # Assert correct data points\n        self.assertEqual(bars[0].get_height(), 1)  # Monday\n        self.assertEqual(bars[1].get_height(), 1)  # Tuesday\n        for i in range(2, 7):\n            self.assertEqual(bars[i].get_height(), 0)  # Rest of the days\n    def test_case_2(self):\n        # Input: Activities on multiple days\n        activities = [datetime(2023, 10, 23), datetime(2023, 10, 24), datetime(2023, 10, 24), datetime(2023, 10, 26)]\n        ax = task_func(activities)\n        bars = ax.patches\n        # Assert correct title, x and y labels\n        self.assertEqual(ax.get_title(), 'Weekly Activity')\n        self.assertEqual(ax.get_xlabel(), 'Day of the Week')\n        self.assertEqual(ax.get_ylabel(), 'Number of Activities')\n        # Assert correct data points\n        self.assertEqual(bars[0].get_height(), 1)  # Monday\n        self.assertEqual(bars[1].get_height(), 2)  # Tuesday\n        self.assertEqual(bars[2].get_height(), 0)  # Wednesday\n        self.assertEqual(bars[3].get_height(), 1)  # Thursday\n        for i in range(4, 7):\n            self.assertEqual(bars[i].get_height(), 0)  # Rest of the days\n    def test_case_3(self):\n        # Input: Activities only on Sunday\n        activities = [datetime(2023, 10, 29), datetime(2023, 10, 29)]\n        ax = task_func(activities)\n        bars = ax.patches\n        # Assert correct data points\n        for i in range(0, 6):\n            self.assertEqual(bars[i].get_height(), 0)  # Days before Sunday\n        self.assertEqual(bars[6].get_height(), 2)  # Sunday\n    def test_case_4(self):\n        # Input: No activities\n        activities = []\n        ax = task_func(activities)\n        bars = ax.patches\n        # Assert correct data points\n        for i in range(0, 7):\n            self.assertEqual(bars[i].get_height(), 0)  # All days\n        # Test for non datetime objects\n        with self.assertRaises(TypeError):\n            task_func([1, 2, 3])\n    def test_case_5(self):\n        # Input: Activities on all days\n        activities = [\n            datetime(2023, 10, 23), datetime(2023, 10, 24), datetime(2023, 10, 25),\n            datetime(2023, 10, 26), datetime(2023, 10, 27), datetime(2023, 10, 28),\n            datetime(2023, 10, 29)\n        ]\n        ax = task_func(activities)\n        bars = ax.patches\n        # Assert correct data points\n        for i in range(0, 7):\n            self.assertEqual(bars[i].get_height(), 1)  # All days",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with population data for a list of cities. The population is generated randomly and rounded up to the next thousand.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'City' and 'Population', containing population data for the cities.\nYou should write self-contained code starting with:\n```\nimport math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n```",
        "gt": "import math\nfrom random import randint\nimport pandas as pd\ndef task_func(cities_list):\n    population_data = []\n\n    for city in cities_list:\n        population = math.ceil(randint(1000000, 20000000) / 1000.0) * 1000\n        population_data.append([city, population])\n\n    population_df = pd.DataFrame(population_data, columns=['City', 'Population'])\n\n    return population_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        test_input = ['New York', 'London', 'Beijing']\n        pop_data = task_func(test_input)\n        self.assertIsInstance(pop_data, pd.DataFrame)\n        self.assertEqual(list(pop_data['City']), test_input)\n        self.assertTrue(all(pop_data['Population'] % 1000 == 0))\n    def test_case_2(self):\n        test_input = ['Tokyo', 'Sydney']\n        pop_data = task_func(test_input)\n        self.assertIsInstance(pop_data, pd.DataFrame)\n        self.assertEqual(list(pop_data['City']), test_input)\n        self.assertTrue(all(pop_data['Population'] % 1000 == 0))\n    def test_case_3(self):\n        test_input = ['Beijing']\n        pop_data = task_func(test_input)\n        self.assertIsInstance(pop_data, pd.DataFrame)\n        self.assertEqual(list(pop_data['City']), test_input)\n        self.assertTrue(all(pop_data['Population'] % 1000 == 0))\n    def test_case_4(self):\n        test_input = ['New York', 'London', 'Beijing', 'Tokyo']\n        pop_data = task_func(test_input)\n        self.assertIsInstance(pop_data, pd.DataFrame)\n        self.assertEqual(list(pop_data['City']), test_input)\n        self.assertTrue(all(pop_data['Population'] % 1000 == 0))\n        \n    def test_case_5(self):\n        test_input = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']\n        pop_data = task_func(test_input)\n        self.assertIsInstance(pop_data, pd.DataFrame)\n        self.assertEqual(list(pop_data['City']), test_input)\n        self.assertTrue(all(pop_data['Population'] % 1000 == 0))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Apply PCA with n_components components to a 2D data matrix, calculate the mean value of each component, and then return the cumulative explained variance of the components in a plot. - The function returns a dataframe with columns 'Component 1', 'Component 2', ... etc. - Each row of the dataframe correspond to a row of the original matrix mapped in the PCA space. - The dataframe should also include a column 'Mean' which is the average value of each component value per row - Create a plot of the cumulative explained variance. - the xlabel should be 'Number of Components' and the ylabel 'Cumulative Explained Variance'\nThe function should output with:\n    tuple:\n    pandas.DataFrame: A DataFrame containing the PCA transformed data and the mean of each component.\n    matplotlib.axes._axes.Axes: A plot showing the cumulative explained variance of the components.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data_matrix, n_components=2):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\ndef task_func(data_matrix, n_components=2):\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data_matrix)\n\n    df = pd.DataFrame(\n        transformed_data,\n        columns=[f\"Component {i+1}\" for i in range(transformed_data.shape[1])],\n    )\n    df[\"Mean\"] = df.mean(axis=1)\n\n    fig, ax = plt.subplots()\n    ax.plot(np.cumsum(pca.explained_variance_ratio_))\n    ax.set_xlabel(\"Number of Components\")\n    ax.set_ylabel(\"Cumulative Explained Variance\")\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        data = np.array([[6, 8, 1, 3, 4], [-1, 0, 3, 5, 1]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (2, 3))\n        self.assertTrue(\"Mean\" in df.columns)\n        self.assertEqual(ax.get_xlabel(), \"Number of Components\")\n        self.assertEqual(ax.get_ylabel(), \"Cumulative Explained Variance\")\n    def test_case_2(self):\n        data = np.array([[1, 2], [3, 4], [5, 6]])\n        df, ax = task_func(data)\n        self.assertEqual(df.shape, (3, 3))\n        self.assertTrue(\"Mean\" in df.columns)\n        self.assertEqual(ax.get_xlabel(), \"Number of Components\")\n        self.assertEqual(ax.get_ylabel(), \"Cumulative Explained Variance\")\n    # Additional test cases\n    def test_case_3(self):\n        data = np.array([[1, 2], [3, 4], [5, 6]])\n        df, ax = task_func(data)\n        expected_columns = min(data.shape) + 1\n        self.assertEqual(df.shape[1], expected_columns)\n        self.assertTrue(\"Mean\" in df.columns)\n        self.assertEqual(ax.get_xlabel(), \"Number of Components\")\n        self.assertEqual(ax.get_ylabel(), \"Cumulative Explained Variance\")\n    def test_case_4(self):\n        data = np.array([[1, 2], [3, 4], [5, 6]])\n        df, ax = task_func(data)\n        expected_columns = min(data.shape) + 1\n        self.assertEqual(df.shape[1], expected_columns)\n        self.assertTrue(\"Mean\" in df.columns)\n        self.assertEqual(ax.get_xlabel(), \"Number of Components\")\n        self.assertEqual(ax.get_ylabel(), \"Cumulative Explained Variance\")\n    def test_case_5(self):\n        data = np.array([[1, 2], [3, 4], [5, 6]])\n        df, ax = task_func(data)\n        expected_columns = min(data.shape) + 1\n        self.assertEqual(df.shape[1], expected_columns)\n        self.assertTrue(\"Mean\" in df.columns)\n        self.assertTrue(\"Component 1\" in df.columns)\n        self.assertTrue(\"Component 2\" in df.columns)\n        self.assertEqual(ax.get_xlabel(), \"Number of Components\")\n        self.assertEqual(ax.get_ylabel(), \"Cumulative Explained Variance\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches JSON data from a given URL, decodes the json-formatted data, and compresses it into a gzip file.\nThe function should output with:\n    str: The path to the compressed gzip file containing the JSON data.\nYou should write self-contained code starting with:\n```\nimport json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n```",
        "gt": "import json\nimport urllib.request\nimport urllib.parse\nimport gzip\ndef task_func(url_str, file_path):\n    response = urllib.request.urlopen(url_str)\n    data = response.read().decode()\n    json_data = json.loads(data)\n\n    with gzip.open(file_path, 'wb') as f_out:\n        f_out.write(json.dumps(json_data).encode())\n\n    return file_path",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nimport urllib.error\nclass TestCases(unittest.TestCase):\n    @patch('gzip.open', mock_open())\n    @patch('urllib.request.urlopen')\n    def test_json_compression(self, mock_urlopen):\n        \"\"\"Test that JSON data is correctly fetched and compressed into a gzip file.\"\"\"\n        mock_response = MagicMock()\n        mock_response.read.return_value = b'{\"key\": \"value\"}'\n        mock_urlopen.return_value = mock_response\n        file_path = '/path/to/file.json.gz'\n        \n        with patch('json.dumps', return_value='{\"key\": \"value\"}') as mock_json_dumps:\n            task_func('http://example.com/data.json', file_path)\n            mock_json_dumps.assert_called_once()\n            self.assertTrue(gzip.open.called, \"gzip.open should be called to write data.\")\n    @patch('urllib.request.urlopen')\n    def test_invalid_url_handling(self, mock_urlopen):\n        \"\"\"Test the function's behavior with an invalid URL.\"\"\"\n        mock_urlopen.side_effect = urllib.error.URLError('Invalid URL')\n        file_path = '/path/to/invalid-url.json.gz'\n        \n        with self.assertRaises(urllib.error.URLError):\n            task_func('http://invalid-url.com', file_path)\n    @patch('gzip.open', mock_open())\n    @patch('urllib.request.urlopen')\n    def test_return_type_is_string(self, mock_urlopen):\n        \"\"\"Test that the function returns a string.\"\"\"\n        mock_response = MagicMock()\n        mock_response.read.return_value = b'{\"key\": \"value\"}'\n        mock_urlopen.return_value = mock_response\n        file_path = '/path/to/file.json.gz'\n        \n        result = task_func('http://example.com/data.json', file_path)\n        self.assertTrue(isinstance(result, str), \"The return type should be a string.\")\n    @patch('gzip.open', new_callable=mock_open)\n    @patch('urllib.request.urlopen')\n    def test_gzip_file_opened_with_correct_path(self, mock_urlopen, mock_gzip_open):\n        \"\"\"Test that the gzip file is opened with the correct path.\"\"\"\n        mock_response = MagicMock()\n        mock_response.read.return_value = b'{\"key\": \"value\"}'\n        mock_urlopen.return_value = mock_response\n        file_path = '/path/to/file.json.gz'\n        \n        task_func('http://example.com/data.json', file_path)\n        mock_gzip_open.assert_called_once_with(file_path, 'wb')\n    @patch('urllib.request.urlopen')\n    def test_response_read_called(self, mock_urlopen):\n        \"\"\"Test that the response's read method is called.\"\"\"\n        mock_response = MagicMock()\n        mock_response.read.return_value = b'{\"key\": \"value\"}'\n        mock_urlopen.return_value = mock_response\n        file_path = '/path/to/file.json.gz'\n        \n        with patch('gzip.open', mock_open()):\n            task_func('http://example.com/data.json', file_path)\n            mock_urlopen.return_value.read.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a Pandas DataFrame from a single word, where each row contains a letter from the word and its 1-based position in the alphabet. >>> task_func('zoo') Letter  Position 0      z        26 1      o        15 2      o        15\nThe function should raise the exception for: ValueError: If the input word is not in lowercase or contains non-alphabetic characters.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two columns: 'Letter' and 'Position',\n    where 'Position' is the letter's position in the English alphabet.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport string\ndef task_func(word):\n```",
        "gt": "import pandas as pd\nimport string\ndef task_func(word):\n    if not word:  # Check if the input word is empty and return an empty DataFrame\n        return pd.DataFrame({'Letter': [], 'Position': []})\n    elif not word.isalpha() or not word.islower():\n        raise ValueError(\"Input word must be in lowercase alphabetic characters only.\")\n\n    alphabet = string.ascii_lowercase\n    positions = [alphabet.index(char) + 1 for char in word]\n    df = pd.DataFrame({'Letter': list(word), 'Position': positions})\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_abc(self):\n        \"\"\"Test with the word 'abc'.\"\"\"\n        result = task_func('abc')\n        expected = pd.DataFrame({'Letter': ['a', 'b', 'c'], 'Position': [1, 2, 3]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_xyz(self):\n        \"\"\"Test with the word 'xyz'.\"\"\"\n        result = task_func('xyz')\n        expected = pd.DataFrame({'Letter': ['x', 'y', 'z'], 'Position': [24, 25, 26]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_mixed_case_error(self):\n        \"\"\"Test with a mixed case word, expecting a ValueError.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func('AbC')\n    def test_non_alpha_error(self):\n        \"\"\"Test with a non-alphabetic word, expecting a ValueError.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func('123')\n    def test_empty_string(self):\n        \"\"\"Test with an empty string, expecting an empty DataFrame.\"\"\"\n        result = task_func('')\n        expected = pd.DataFrame({'Letter': [], 'Position': []})\n        pd.testing.assert_frame_equal(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads, extracts, and deletes a ZIP file from a specified URL. The function includes comprehensive error handling to manage issues such as invalid URLs, unreachable servers, corrupted ZIP files, and file I/O errors. In the event of a failure, it provides a descriptive error message.\nThe function should raise the exception for: urllib.error.URLError: If the URL is invalid or the server cannot be reached. In this case, the function returns a string in the format \"URL Error: [error reason]\".\nThe function should output with:\n    str: The path to the directory where the ZIP file's contents have been extracted. Returns an error message in case of failure.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(\n    url: str,\n    save_path: str = \"downloaded_file.zip\",\n    extract_path: str = \"extracted_files\",\n) -> str:\n```",
        "gt": "import urllib.request\nimport zipfile\nimport os\nimport urllib.error\ndef task_func(\n    url: str,\n    save_path: str = \"downloaded_file.zip\",\n    extract_path: str = \"extracted_files\",\n) -> str:\n    try:\n        # Check if save_path already exists, if so, remove it\n        if os.path.exists(save_path):\n            os.remove(save_path)\n\n        # Download the file from the URL\n        urllib.request.urlretrieve(url, save_path)\n\n        # Create the extraction directory if it doesn't exist\n        if not os.path.exists(extract_path):\n            os.makedirs(extract_path)\n\n        # Extract the zip file\n        with zipfile.ZipFile(save_path, \"r\") as zip_ref:\n            zip_ref.extractall(extract_path)\n\n        # Remove the downloaded zip file\n        os.remove(save_path)\n\n        return extract_path\n    except urllib.error.URLError as e:\n        return f\"URL Error: {e.reason}\"",
        "test": "import unittest\nimport os\nimport urllib.error\nimport shutil\nfrom pathlib import Path\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    base_path = \"mnt/data/task_func_data\"\n    def setUp(self):\n        # Ensure the base path is absolute\n        self.base_path = os.path.abspath(self.base_path)\n        # Create base directory for test data\n        if not os.path.exists(self.base_path):\n            os.makedirs(self.base_path)\n    def test_successful_download_and_extraction_sample_1(self):\n        \"\"\"Test Case 1: Successful Download and Extraction of Sample 1\"\"\"\n        url = \"https://getsamplefiles.com/download/zip/sample-1.zip\"\n        save_path = Path(self.base_path) / \"sample_1_download.zip\"\n        extract_path = Path(self.base_path) / \"sample_1_extract\"\n        result_path = task_func(url, save_path, extract_path)\n        self.assertEqual(result_path, extract_path)\n        self.assertTrue(os.path.exists(extract_path))\n        self.assertFalse(os.path.exists(save_path))\n    def test_successful_download_and_extraction_sample_5(self):\n        \"\"\"Test Case 2: Successful Download and Extraction of Sample 5\"\"\"\n        url = \"https://getsamplefiles.com/download/zip/sample-5.zip\"\n        save_path = Path(self.base_path) / \"sample_5_download.zip\"\n        extract_path = Path(self.base_path) / \"sample_5_extract\"\n        result_path = task_func(url, save_path, extract_path)\n        self.assertEqual(result_path, extract_path)\n        self.assertTrue(os.path.exists(extract_path))\n        self.assertFalse(os.path.exists(save_path))\n    def test_invalid_url(self):\n        \"\"\"Test Case 3: Invalid URL\"\"\"\n        url = \"https://invalidurl.com/nonexistent.zip\"\n        save_path = Path(self.base_path) / \"invalid_url.zip\"\n        extract_path = Path(self.base_path) / \"invalid_url_extract\"\n        result = task_func(url, save_path, extract_path)\n        self.assertTrue(result.startswith(\"URL Error:\"))\n    def test_file_already_exists_at_save_path(self):\n        \"\"\"Test Case 4: File Already Exists at Save Path\"\"\"\n        url = \"https://getsamplefiles.com/download/zip/sample-1.zip\"\n        save_path = Path(self.base_path) / \"existing_file.zip\"\n        extract_path = Path(self.base_path) / \"existing_file_extract\"\n        # Create a dummy file at the save path\n        with open(save_path, \"w\") as file:\n            file.write(\"Dummy content\")\n        result_path = task_func(url, save_path, extract_path)\n        self.assertEqual(result_path, extract_path)\n        self.assertFalse(os.path.exists(save_path))\n    def test_extraction_path_already_exists(self):\n        \"\"\"Test Case 5: Extraction Path Already Exists\"\"\"\n        url = \"https://getsamplefiles.com/download/zip/sample-5.zip\"\n        save_path = Path(self.base_path) / \"extract_path_exists.zip\"\n        extract_path = Path(self.base_path) / \"existing_extract_path\"\n        # Create the extraction path directory\n        if not os.path.exists(extract_path):\n            os.makedirs(extract_path)\n        result_path = task_func(url, save_path, extract_path)\n        self.assertEqual(result_path, extract_path)\n    def tearDown(self):\n        # Clean up any files or directories created during the tests\n        shutil.rmtree(self.base_path, ignore_errors=True)\n        # Cleanup the test directories\n        dirs_to_remove = [\"mnt/data\", \"mnt\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Identifies duplicate rows from a CSV file using the csv library, convert duplicated rows into a pandas DataFrame, then plot using matplotlib.\nNote that: Ensure the CSV file is in proper format and has a .csv extension. Other file formats will raise a ValueError.\nThe function should output with:\n    dict: A dictionary with duplicate rows as keys and their counts as values.\n    Axes: A matplotlib Axes object with the bar chart of duplicate rows.\nYou should write self-contained code starting with:\n```\nimport csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n```",
        "gt": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(file_path):\n    # Strip the file_path and then check its extension\n    file_path = file_path.strip()\n    if not file_path.lower().endswith(\".csv\"):\n        raise ValueError(\"Invalid file format. Only .csv files are accepted.\")\n\n    # Read the CSV file\n    with open(file_path, \"r\") as f:\n        reader = csv.reader(f)\n        rows = list(reader)\n\n    # Use Counter to get duplicates\n    duplicates = Counter(tuple(row) for row in rows if rows.count(row) > 1)\n\n    # Plot the duplicates using matplotlib\n    ax = None\n    if duplicates:\n        df = pd.DataFrame(duplicates.values(), duplicates.keys())\n        ax = df.plot(kind=\"bar\", legend=False, title=\"Duplicate Entries\")\n        ax.set_ylabel(\"Count\")\n        plt.tight_layout()\n\n    return duplicates, ax",
        "test": "import unittest\nimport tempfile\nimport os\nimport matplotlib\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.addCleanup(self.temp_dir.cleanup)\n    def tearDown(self):\n        plt.close(\"all\")\n    def create_temp_csv_file(self, content):\n        # Create a temporary CSV file within the temp directory\n        temp_file_path = os.path.join(self.temp_dir.name, \"temp_file.csv\")\n        with open(temp_file_path, \"w\", newline=\"\") as temp_file:\n            temp_file.write(content)\n        return temp_file_path\n    def test_case_1(self):\n        # With duplicates - test results\n        content = \"Name,Age,City\\nAlice,25,New York\\nAlice,25,New York\\nBob,30,London\\nAlice,25,New York\\nBob,30,London\"\n        file_path = self.create_temp_csv_file(content)\n        duplicates, _ = task_func(file_path)\n        self.assertEqual(\n            duplicates,\n            Counter({(\"Alice\", \"25\", \"New York\"): 3, (\"Bob\", \"30\", \"London\"): 2}),\n        )\n    def test_case_2(self):\n        # With duplicates - test plot\n        content = \"Name,Age,City\\nAlice,25,New York\\nAlice,25,New York\\nBob,30,London\\nAlice,25,New York\\nBob,30,London\"\n        file_path = self.create_temp_csv_file(content)\n        _, ax = task_func(file_path)\n        # Test plot\n        self.assertIsNotNone(ax)\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes)\n        self.assertEqual(ax.get_title(), \"Duplicate Entries\")\n        self.assertEqual(ax.get_ylabel(), \"Count\")\n    def test_case_3(self):\n        # Without duplicates\n        content = \"Name,Age,City\\nEve,28,Paris\\nAdam,32,Berlin\"\n        file_path = self.create_temp_csv_file(content)\n        duplicates, ax = task_func(file_path)\n        self.assertEqual(duplicates, Counter())\n        self.assertIsNone(ax)\n    def test_case_4(self):\n        with self.assertRaises(ValueError):\n            task_func(\"sample_data.txt\")\n    def test_case_5(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(os.path.join(self.temp_dir.name, \"non_existent_file.csv\"))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random password with a specified length and number of digits. The function creates a random password consisting of letters and digits. The total length of the password and the number of digits in it are specified by the user. The characters in the password are randomly shuffled to ensure variability.\nThe function should output with:\n    str: A string representing the randomly generated password.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n```",
        "gt": "import random\nimport string\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\ndef task_func(length, num_digits):\n\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n\n    random.shuffle(password)\n\n    return ''.join(password)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_valid_input(self):\n        \"\"\"\n        Test Case 1: Valid Input\n        - Verify that the function returns a password of the correct length.\n        - Verify that the function returns a password with the correct number of digits.\n        - Verify that the function returns a password with the correct number of letters.\n        \"\"\"\n        password = task_func(10, 3)\n        self.assertEqual(len(password), 10, \"Password length should be 10\")\n        self.assertEqual(sum(c.isdigit() for c in password), 3, \"Password should have 3 digits\")\n        self.assertEqual(sum(c.isalpha() for c in password), 7, \"Password should have 7 letters\")\n    def test_length_zero(self):\n        \"\"\"\n        Test Case 2: Length Zero\n        - Verify that the function raises a ValueError when the length is zero.\n        \"\"\"\n        with self.assertRaises(ValueError, msg=\"Should raise ValueError for length 0\"):\n            task_func(0, 3)\n    def test_negative_length(self):\n        \"\"\"\n        Test Case 3: Negative Length\n        - Verify that the function raises a ValueError when the length is negative.\n        \"\"\"\n        with self.assertRaises(ValueError, msg=\"Should raise ValueError for negative length\"):\n            task_func(-5, 3)\n    def test_negative_num_digits(self):\n        \"\"\"\n        Test Case 4: Negative Number of Digits\n        - Verify that the function raises a ValueError when the number of digits is negative.\n        \"\"\"\n        with self.assertRaises(ValueError, msg=\"Should raise ValueError for negative num_digits\"):\n            task_func(10, -3)\n    def test_num_digits_greater_than_length(self):\n        \"\"\"\n        Test Case 5: Number of Digits Greater than Length\n        - Verify that the function raises a ValueError when the number of digits is greater than the length.\n        \"\"\"\n        with self.assertRaises(ValueError, msg=\"Should raise ValueError when num_digits > length\"):\n            task_func(5, 10)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names. Plot the regression line and the scatter plot of the data.\nNote that: The function use \"Linear Regression\" for the plot title. The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    df = df.drop_duplicates(subset='Name')\n\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_correct_data_handling(self):\n        data = pd.DataFrame([\n            {'Name': 'Alice', 'Age': 25, 'Score': 80},\n            {'Name': 'Bob', 'Age': 30, 'Score': 85},\n            {'Name': 'Alice', 'Age': 25, 'Score': 80},\n            {'Name': 'Eve', 'Age': 35, 'Score': 90}\n        ])\n        plt, ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines), 1)  # Only one line for the regression\n        self.assertEqual(len(ax.collections), 1)  # Only one collection for scatter plot\n    def test_linear_regression(self):\n        data = pd.DataFrame([\n            {'Name': 'Alice', 'Age': 20, 'Score': 70},\n            {'Name': 'Bob', 'Age': 25, 'Score': 75},\n            {'Name': 'Eve', 'Age': 30, 'Score': 80}\n        ])\n        plt, ax = task_func(data)\n        line = ax.lines[0]\n        x_data, y_data = line.get_xdata(), line.get_ydata()\n        self.assertTrue((y_data[1] - y_data[0]) / (x_data[1] - x_data[0]) > 0)  # Positive slope\n    def test_plotting_elements(self):\n        data = pd.DataFrame([\n            {'Name': 'Alice', 'Age': 20, 'Score': 70},\n            {'Name': 'Bob', 'Age': 25, 'Score': 75}\n        ])\n        plt, ax= task_func(data)\n        self.assertEqual(ax.get_xlabel(), 'Age')\n        self.assertEqual(ax.get_ylabel(), 'Score')\n        self.assertEqual(ax.get_title(), 'Linear Regression')\n    def test_empty_dataframe(self):\n        data = pd.DataFrame([\n            {'Name': 'Alice', 'Age': 20, 'Score': 70},\n            {'Name': 'Bob', 'Age': 25, 'Score': 75}\n        ])\n        plt, ax = task_func(data)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines), 1)  # No line for regression\n        self.assertGreater(len(ax.collections), 0)\n    def test_missing_columns(self):\n        data = pd.DataFrame([\n            {'Name': 'Alice', 'Age': 20},\n            {'Name': 'Bob', 'Age': 25}\n        ])\n        with self.assertRaises(KeyError):\n            task_func(data)\n    \n    def test_non_df(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function assesses whether the distribution of values in a specified column of a DataFrame is uniform and visualizes this distribution using a histogram. The function handles the following cases: - If the DataFrame is empty, the specified column does not exist in the DataFrame, or if the specified column contains only null values, the function returns a message \"The DataFrame is empty or the specified column has no data.\" In this case, a blank histogram with a title \"Distribution of values in [column_name] (No Data)\" is generated. - If the DataFrame and column are valid, the function calculates if the distribution of values is uniform. It returns a message stating whether the distribution is uniform or not. A histogram is generated to visualize the distribution of values in the specified column. This histogram displays the frequency of each value, with the number of bins set to the number of unique values in the column, an edge color of black, and a transparency alpha value of 0.7. The x-axis is labeled \"Values\", the y-axis is labeled \"Frequency\", and the title of the plot is \"Distribution of values in [column_name]\".\nThe function should output with:\n    str: A message indicating whether the distribution in the column is uniform or not. The message is one of the following:\n    \"The distribution of values is uniform.\"\n    \"The distribution of values is not uniform.\"\n    plt.Axes: An Axes object displaying the histogram of the value distribution in the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame, column_name: str) -> (str, plt.Axes):\n    if df.empty or column_name not in df.columns or df[column_name].isnull().all():\n        message = \"The DataFrame is empty or the specified column has no data.\"\n        _, ax = plt.subplots()\n        ax.set_title(f\"Distribution of values in {column_name} (No Data)\")\n        return message, ax\n\n    unique_values_count = df[column_name].nunique()\n    total_values = len(df[column_name])\n    is_uniform = total_values % unique_values_count == 0 and all(\n        df[column_name].value_counts() == total_values / unique_values_count\n    )\n\n    message = (\n        \"The distribution of values is uniform.\"\n        if is_uniform\n        else \"The distribution of values is not uniform.\"\n    )\n\n    _, ax = plt.subplots()\n    ax.hist(df[column_name], bins=unique_values_count, edgecolor=\"black\", alpha=0.7)\n    ax.set_xticks(range(unique_values_count))\n    ax.set_xlabel(\"Values\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(f\"Distribution of values in {column_name}\")\n\n    return message, ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for `task_func`.\"\"\"\n    def test_uniform_distribution(self):\n        \"\"\"Test the distribution of values in a column with a uniform distribution.\"\"\"\n        df = pd.DataFrame({\"Category\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"]})\n        message, _ = task_func(df, \"Category\")\n        self.assertEqual(message, \"The distribution of values is uniform.\")\n    def test_non_uniform_distribution(self):\n        \"\"\"Test the distribution of values in a column with a non-uniform distribution.\"\"\"\n        df = pd.DataFrame({\"Category\": [\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\"]})\n        message, _ = task_func(df, \"Category\")\n        self.assertEqual(message, \"The distribution of values is not uniform.\")\n    def test_single_value(self):\n        \"\"\"Test the distribution of values in a column with a single value.\"\"\"\n        df = pd.DataFrame({\"Category\": [\"A\", \"A\", \"A\", \"A\", \"A\", \"A\"]})\n        message, _ = task_func(df, \"Category\")\n        self.assertEqual(message, \"The distribution of values is uniform.\")\n    def test_multi_column(self):\n        \"\"\"Test the distribution of values in a column with a multi-column DataFrame.\"\"\"\n        df = pd.DataFrame(\n            {\n                \"Category\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],\n                \"Type\": [\"X\", \"X\", \"Y\", \"Y\", \"Z\", \"Z\"],\n            }\n        )\n        message, _ = task_func(df, \"Type\")\n        self.assertEqual(message, \"The distribution of values is uniform.\")\n    def test_empty_dataframe(self):\n        \"\"\"Test the distribution of values in a column with an empty DataFrame.\"\"\"\n        df = pd.DataFrame({\"Category\": []})\n        message, _ = task_func(df, \"Category\")\n        self.assertEqual(\n            message, \"The DataFrame is empty or the specified column has no data.\"\n        )\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace each character in each element of the Elements list with a random character and format the element into a pattern \"%{0}%\", where {0} is the replaced element. Finally, concatenate all the formatted elements into a single string and search for the regex pattern specified in the parameter pattern. Return the true or false value based on the search result.\nThe function should output with:\n    List[str]: The list of formatted elements with replaced characters.\n    bool: The search result based on the regex pattern.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n```",
        "gt": "import string\nimport random\nimport re\ndef task_func(elements, pattern, seed=100):\n    # Set the seed for reproducibility\n    random.seed(seed)\n    replaced_elements = []\n    \n    for element in elements:\n        replaced = ''.join([random.choice(string.ascii_letters) for _ in element])\n        formatted = '%{}%'.format(replaced)\n        replaced_elements.append(formatted)\n        \n    # Concatenate all the formatted elements into a single string\n    concatenated_elements = ''.join(replaced_elements)\n    # Search for the regex pattern in the concatenated string\n    search_result = re.search(pattern, concatenated_elements)\n    # Return the search result\n    return replaced_elements, bool(search_result)",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Basic test with a given list of elements\n        elements = [\"abc\", \"def\"]\n        replaced_elements, res = task_func(elements, \".*\", 234)\n        self.assertEqual(len(replaced_elements), len(elements))\n        for element in replaced_elements:\n            self.assertTrue(element.startswith(\"%\"))\n            self.assertTrue(element.endswith(\"%\"))\n        # Test the search result\n        self.assertTrue(res)\n    def test_case_2(self):\n        # Test with a single-character list of elements\n        elements = [\"a\"]\n        # Test with a complex pattern\n        pattern = \".*[a-z]{3}.*\"\n        replaced_elements, res = task_func(elements, pattern, 104)\n        self.assertEqual(len(replaced_elements), len(elements))\n        for element in replaced_elements:\n            self.assertTrue(element.startswith(\"%\"))\n            self.assertTrue(element.endswith(\"%\"))\n        # Test the search result\n        self.assertFalse(res)\n    def test_case_3(self):\n        # Test with a longer list of elements\n        elements = [\"abcdefgh\", \"ijklmnop\", \"qrstuvwxyz\"]\n        replaced_elements, res = task_func(elements, \"%+\", 101)\n        self.assertEqual(len(replaced_elements), len(elements))\n        for element in replaced_elements:\n            self.assertTrue(element.startswith(\"%\"))\n            self.assertTrue(element.endswith(\"%\"))\n        # Test the search result\n        self.assertTrue(res)\n    def test_case_4(self):\n        # Test with an empty list of elements\n        elements = []\n        replaced_elements, _ = task_func(elements, \".*\", 123)\n        self.assertEqual(len(replaced_elements), len(elements))\n    def test_case_5(self):\n        # Test with a list containing mixed-case elements\n        elements = [\"AbC\", \"dEfG\", \"HijKL\"]\n        replaced_elements, _ = task_func(elements, \".*\", 456)\n        self.assertEqual(len(replaced_elements), len(elements))\n        for element in replaced_elements:\n            self.assertTrue(element.startswith(\"%\"))\n            self.assertTrue(element.endswith(\"%\"))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a bar chart representing the distribution of specified items across given locations. The function takes a DataFrame with 'Item' and 'Location' columns and plots the count of each item per location. If lists of items and locations are provided, the chart will only include those specified, otherwise it defaults to a predefined list.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame, or if 'Item' or 'Location' columns are missing.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object with the plotted bar chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, items=None, locations=None):\n    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Item', 'Location']):\n        raise ValueError(\"Invalid 'df': must be a DataFrame with 'Item' and 'Location' columns.\")\n\n    items = items or ['apple', 'banana', 'grape', 'orange', 'pineapple']\n    locations = locations or ['store1', 'store2', 'store3', 'store4', 'store5']\n\n    item_count_df = df.groupby(['Location', 'Item']).size().unstack().fillna(0)\n    ax = item_count_df.plot(kind='bar', stacked=True)\n    ax.set_title('Item Distribution by Location')\n    ax.set_ylabel('Count')\n    plt.show()\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef get_bar_values(ax):\n    \"\"\"\n    Extracts the heights of bars from a Matplotlib Axes object.\n    Parameters:\n    ax (Axes): A Matplotlib Axes object containing a bar chart.\n    Returns:\n    List[List[float]]: A list of lists containing the heights of the bars in each group.\n    \"\"\"\n    values = []\n    for container in ax.containers:\n        values.append([bar.get_height() for bar in container])\n    return values\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({\n            'Item': ['apple', 'banana', 'apple', 'orange', 'grape', 'pineapple', 'banana', 'orange'],\n            'Location': ['store1', 'store2', 'store1', 'store3', 'store4', 'store5', 'store3', 'store2']\n        })\n    def test_value(self):\n        ax = task_func(self.df)\n        self.assertIsInstance(ax, plt.Axes)\n        bar_values = get_bar_values(ax)\n            \n        value = [[2.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0]]\n        self.assertEqual(bar_values, value, \"DataFrame contents should match the expected output\")\n        \n    def test_return_type(self):\n        ax = task_func(self.df)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'a': [1, 2], 'b': [3, 4]}))\n    def test_custom_items_and_locations(self):\n        custom_items = ['item1', 'item2']\n        custom_locations = ['loc1', 'loc2']\n        df = pd.DataFrame({'Item': custom_items * 2, 'Location': custom_locations * 2})\n        ax = task_func(df, items=custom_items, locations=custom_locations)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_plot_title_and_labels(self):\n        ax = task_func(self.df)\n        self.assertEqual(ax.get_title(), 'Item Distribution by Location')\n        self.assertEqual(ax.get_ylabel(), 'Count')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots the square root function for values associated with the key 'from_user' from the input list of dictionaries. Annotates the graph with the current date and time. - Round each square root value to 2 decimals. Constants: - PLOT_TITLE: Title of the plot (default is 'Square root plot'). - X_LABEL: Label for the x-axis (default is 'x'). - Y_LABEL: Label for the y-axis (default is 'sqrt(x)'). - TIME_FORMAT: Format for displaying the current date and time (default is '%Y-%m-%d %H:%M:%S').\nThe function should output with:\n    numpy.ndarray: list of square values associated with the key 'from_user' from the input list of dictionaries.\n    matplotlib.axes.Axes: plot of square root values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n# Constants\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n# Constants\nPLOT_TITLE = 'Square root plot'\nX_LABEL = 'x'\nY_LABEL = 'sqrt(x)'\nTIME_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    # Extract the 'from_user' values\n    from_user_values = [d['from_user'] for d in result if 'from_user' in d]\n\n    # Calculate the square roots\n    square_roots = np.round(np.sqrt(from_user_values), 2)\n\n    # Plot the square root function\n    plt.figure()\n    plt.plot(from_user_values, square_roots)\n    plt.title(PLOT_TITLE)\n    plt.xlabel(X_LABEL)\n    plt.ylabel(Y_LABEL)\n\n    # Annotate the plot with the current date and time\n    now = datetime.now()\n    now_str = now.strftime(TIME_FORMAT)\n    plt.annotate(now_str, (0.05, 0.95), xycoords='axes fraction')\n    ax = plt.gca()\n    return square_roots, ax",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        # Input 1: Normal case with 2 dictionaries with 'from_user' keys.\n        data = [\n            {\"key_1\": 7, \"key_2\": 4, \"from_user\": 16},\n            {\"key_1\": 2, \"key_2\": 4, \"from_user\": 9},\n        ]\n        square_roots, ax = task_func(data)\n        self.assertEqual(ax.get_title(), PLOT_TITLE)\n        self.assertEqual(ax.get_xlabel(), X_LABEL)\n        self.assertEqual(ax.get_ylabel(), Y_LABEL)\n        np.testing.assert_array_equal(square_roots, np.array([4.0, 3.0]))\n        annotations = [child for child in ax.get_children() if isinstance(child, matplotlib.text.Annotation)]\n        try:\n            datetime.strptime(annotations[0].get_text(), TIME_FORMAT)\n        except:\n            raise ValueError(f\"The datetime in annotation ({annotations[0]}) does not have the right format ({TIME_FORMAT}).\")\n    def test_case_2(self):\n        # Input 2: List with 1 dictionary without the 'from_user' key.\n        data = [\n            {\n                \"key_1\": 7,\n                \"key_2\": 4\n            }\n        ]\n        square_roots, ax = task_func(data)\n        self.assertEqual(len(square_roots), 0)\n    def test_case_3(self):\n        # Input 3: Empty list.\n        data = []\n        square_roots, ax = task_func(data)\n        self.assertEqual(len(square_roots), 0)\n    def test_case_4(self):\n        # Input 4: Normal case with 5 dictionaries with 'from_user' keys.\n        data = [\n            {\n                \"from_user\": 121,\n                \"unused_key\": 45,\n            },\n            {\n                \"from_user\": 169,\n                \"unused_key\": -1,\n            },\n            {\n                \"from_user\": 225,\n            },\n            {\n                \"from_user\": 9,\n            },\n            {\n                \"from_user\": 49,\n            },\n        ]\n        square_roots, ax = task_func(data)\n        np.testing.assert_array_equal(square_roots, np.array([11.0, 13.0, 15.0, 3.0, 7.0]))\n    def test_case_5(self):\n        # Input 5: List with 1 dictionary with the 'from_user' key.\n        data = [{\"from_user\": 7, \"bye\": 4}]\n        square_roots, ax = task_func(data)\n        np.testing.assert_array_equal(square_roots, np.array([2.65]))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the distribution of the maximum values of each row in the matrix, record the histogram and the estimate of the core density of the distribution, and return the skew, kurtosis, and the histogram plot of the distribution.\nThe function should output with:\n    tuple: The skewness, the kurtosis of the distribution, and the histogram plot (matplotlib Axes object).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    max_values = [max(row) for row in matrix]\n    \n    fig, ax = plt.subplots()\n    ax.hist(max_values, bins=10, density=True, alpha=0.6, color='g')\n    \n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, np.mean(max_values), np.std(max_values))\n    ax.plot(x, p, 'k', linewidth=2)\n\n    skewness = stats.skew(max_values)\n    kurtosis = stats.kurtosis(max_values)\n\n    return skewness, kurtosis, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a small matrix\n        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        skew, kurtosis, ax = task_func(matrix)\n        \n        self.assertEqual(skew, 0.0)\n        self.assertEqual(kurtosis, -1.5)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        # Test with negative values\n        matrix = [[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]\n        skew, kurtosis, ax = task_func(matrix)\n        \n        self.assertEqual(skew, 0.0)\n        self.assertEqual(kurtosis, -1.5)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_3(self):\n        # Test with larger numbers\n        matrix = [[100, 200, 300], [400, 500, 600], [700, 800, 900]]\n        skew, kurtosis, ax = task_func(matrix)\n        \n        self.assertEqual(skew, 0.0)\n        self.assertEqual(kurtosis, -1.5)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_4(self):\n        # Test with identical rows\n        matrix = [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n        skew, kurtosis, ax = task_func(matrix)\n        \n        self.assertFalse(np.isnan(skew))\n        self.assertFalse(np.isnan(kurtosis))\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_5(self):\n        # Test with a single row\n        matrix = [[1, 2, 3]]\n        skew, kurtosis, ax = task_func(matrix)\n        \n        self.assertFalse(np.isnan(skew))  # Skew is defined\n        self.assertFalse(np.isnan(kurtosis))  # Kurtosis is defined\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a given hex string to a float number and then compresses the binary32 float number.\nThe function should output with:\n    bytes: The compressed float number.\nYou should write self-contained code starting with:\n```\nimport struct\nimport zlib\n# Constants\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n```",
        "gt": "import struct\nimport zlib\n# Constants\nKEY = '470FC614'\ndef task_func(hex_string=KEY):\n    binary_float = struct.pack('!f', int(hex_string, 16))\n    compressed_data = zlib.compress(binary_float)\n    return compressed_data",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_default_functionality(self):\n        \"\"\"Test the function with default parameters.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, bytes)\n    def test_valid_custom_hex_string(self):\n        \"\"\"Test the function with a valid custom hexadecimal string.\"\"\"\n        hex_string = '1A2FC614'  # Example hex string\n        result = task_func(hex_string)\n        self.assertIsInstance(result, bytes)\n    def test_invalid_hex_string(self):\n        \"\"\"Test the function with an invalid hexadecimal string.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(hex_string='ZZZZZZZZ')\n    def test_boundary_hex_value(self):\n        \"\"\"Test the function with a large boundary hexadecimal value.\"\"\"\n        boundary_hex = 'FFFFFFFF'  # Maximum float value before overflow in some contexts\n        result = task_func(boundary_hex)\n        self.assertIsInstance(result, bytes)\n    def test_zero_value(self):\n        \"\"\"Test the function with a hex string representing zero.\"\"\"\n        zero_hex = '00000000'\n        result = task_func(zero_hex)\n        self.assertIsInstance(result, bytes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculates net scores for teams ('Team A' to 'Team E') by subtracting penalties from goals and clips scores to stay within -10 to 10. Visualizes results with a bar chart showing each team's adjusted scores 'Team' on the x-axis and score values 'Score' on the y-axis.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Team' and 'Score', representing each team's net score.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n```",
        "gt": "import pandas as pd\nfrom matplotlib import pyplot as plt\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nGOALS_RANGE = (-10, 10)\ndef task_func(goals, penalties):\n\n    scores_data = []\n\n    for team in TEAMS:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        score = team_goals - team_penalties\n        scores_data.append([team, score])\n\n    scores_df = pd.DataFrame(scores_data, columns=['Team', 'Score'])\n    scores_df['Score'] = scores_df['Score'].clip(*GOALS_RANGE)\n\n    #Plotting (commented out for testing)\n    plt.figure(figsize=(10, 6))\n    plt.bar(scores_df['Team'], scores_df['Score'], color='skyblue')\n    plt.xlabel('Team')\n    plt.ylabel('Score')\n    plt.title('Team Scores Distribution')\n    plt.ylim(GOALS_RANGE[0] - 1, GOALS_RANGE[1] + 1)\n    plt.grid(axis='y', linestyle='--')\n    plt.show()\n\n    return scores_df",
        "test": "import unittest\n# Unit Tests\nclass TestCases(unittest.TestCase):\n    def test_no_goals_no_penalties(self):\n        goals, penalties = {}, {}\n        expected = pd.DataFrame({'Team': TEAMS, 'Score': [0] * 5})\n        pd.testing.assert_frame_equal(task_func(goals, penalties), expected)\n    def test_goals_no_penalties(self):\n        goals = {team: index for index, team in enumerate(TEAMS, start=1)}\n        penalties = {}\n        expected = pd.DataFrame({'Team': TEAMS, 'Score': [1, 2, 3, 4, 5]})\n        pd.testing.assert_frame_equal(task_func(goals, penalties), expected)\n    def test_goals_with_penalties(self):\n        goals = {team: 5 for team in TEAMS}\n        penalties = {team: 2 for team in TEAMS}\n        expected = pd.DataFrame({'Team': TEAMS, 'Score': [3] * 5})\n        pd.testing.assert_frame_equal(task_func(goals, penalties), expected)\n    def test_clipping_negative_scores(self):\n        goals = {team: -15 for team in TEAMS}\n        penalties = {team: 0 for team in TEAMS}\n        expected = pd.DataFrame({'Team': TEAMS, 'Score': [-10] * 5})\n        pd.testing.assert_frame_equal(task_func(goals, penalties), expected)\n    def test_clipping_positive_scores(self):\n        goals = {team: 20 for team in TEAMS}\n        penalties = {team: 0 for team in TEAMS}\n        expected = pd.DataFrame({'Team': TEAMS, 'Score': [10] * 5})\n        pd.testing.assert_frame_equal(task_func(goals, penalties), expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate n random points within a circle of radius RADIUS (default value is 5) and return their average distance from the center.\nThe function should output with:\n    float: The average distance from the center of the circle.\nYou should write self-contained code starting with:\n```\nimport math\nimport random\nimport statistics\n# Constants\nRADIUS = 5\ndef task_func(n):\n```",
        "gt": "import math\nimport random\nimport statistics\n# Constants\nRADIUS = 5\ndef task_func(n):\n    distances = []\n\n    for _ in range(n):\n        theta = 2 * math.pi * random.random()\n        r = RADIUS * math.sqrt(random.random())\n        x = r * math.cos(theta)\n        y = r * math.sin(theta)\n        distance = math.sqrt(x**2 + y**2)\n        distances.append(distance)\n\n    return round(statistics.mean(distances), 4)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        avg_distance = task_func(1000)\n        self.assertTrue(3.1 <= avg_distance <= 3.5, f\"Expected average distance to be between 3.1 and 3.5, got {avg_distance}\")\n    def test_2(self):\n        avg_distance = task_func(500)\n        self.assertTrue(3.0 <= avg_distance <= 3.6, f\"Expected average distance to be between 3.2 and 3.5, got {avg_distance}\")\n    def test_3(self):\n        avg_distance = task_func(100)\n        self.assertTrue(2.8 <= avg_distance <= 3.7, f\"Expected average distance to be between 2.8 and 3.7, got {avg_distance}\")\n    def test_4(self):\n        avg_distance = task_func(50)\n        # Allowing a wider range due to higher variance with fewer points\n        self.assertTrue(2.4 <= avg_distance <= 4.1, f\"Expected average distance to be between 2.4 and 4.1, got {avg_distance}\")\n    def test_5(self):\n        avg_distance = task_func(10)\n        # Even wider range for very few points\n        self.assertTrue(1.4 <= avg_distance <= 4.6, f\"Expected average distance to be between 1.4 and 4.6, got {avg_distance}\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Computes the average of each row in a provided 2D array and appends these averages as a new column. Additionally, it plots the averages against their respective row indices.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame which includes the original data and an additional 'Average' column.\n    Axes: A matplotlib Axes object with the plot of row averages.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMN_NAMES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMN_NAMES)\n    df['Average'] = df.mean(axis=1)\n\n    # Creating a new figure and axis for plotting\n    fig, ax = plt.subplots()\n    df['Average'].plot(ax=ax)\n    ax.set_ylabel('Average')  # Setting the Y-axis label to 'Average'\n\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = np.array([[1, 2, 3, 4, 4, 3, 7, 1], [6, 2, 3, 4, 3, 4, 4, 1]])\n        df, ax = task_func(data)\n        # Testing the DataFrame\n        self.assertEqual(df.shape, (2, 9))\n        self.assertIn('Average', df.columns)\n        self.assertAlmostEqual(df['Average'][0], 3.125, places=3)\n        self.assertAlmostEqual(df['Average'][1], 3.375, places=3)\n        # Testing the plot\n        self.assertEqual(ax.get_title(), '')\n        self.assertEqual(ax.get_xlabel(), '')\n        self.assertEqual(ax.get_ylabel(), 'Average')\n        self.assertEqual(len(ax.lines), 1)\n    def test_case_2(self):\n        data = np.array([[1, 1, 1, 1, 1, 1, 1, 1]])\n        df, ax = task_func(data)\n        # Testing the DataFrame\n        self.assertEqual(df.shape, (1, 9))\n        self.assertIn('Average', df.columns)\n        self.assertEqual(df['Average'][0], 1.0)\n        # Testing the plot\n        self.assertEqual(len(ax.lines), 1)\n    def test_case_3(self):\n        data = np.array([[1, 2, 3, 4, 5, 6, 7, 8], [8, 7, 6, 5, 4, 3, 2, 1]])\n        df, ax = task_func(data)\n        # Testing the DataFrame\n        self.assertEqual(df.shape, (2, 9))\n        self.assertIn('Average', df.columns)\n        self.assertEqual(df['Average'][0], 4.5)\n        self.assertEqual(df['Average'][1], 4.5)\n        # Testing the plot\n        self.assertEqual(len(ax.lines), 1)\n    def test_case_4(self):\n        data = np.array([[0, 0, 0, 0, 0, 0, 0, 0], [10, 10, 10, 10, 10, 10, 10, 10]])\n        df, ax = task_func(data)\n        # Testing the DataFrame\n        self.assertEqual(df.shape, (2, 9))\n        self.assertIn('Average', df.columns)\n        self.assertEqual(df['Average'][0], 0.0)\n        self.assertEqual(df['Average'][1], 10.0)\n        # Testing the plot\n        self.assertEqual(len(ax.lines), 1)\n    def test_case_5(self):\n        data = np.array([[5, 5, 5, 5, 5, 5, 5, 5]])\n        df, ax = task_func(data)\n        # Testing the DataFrame\n        self.assertEqual(df.shape, (1, 9))\n        self.assertIn('Average', df.columns)\n        self.assertEqual(df['Average'][0], 5.0)\n        # Testing the plot\n        self.assertEqual(len(ax.lines), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame containing random integer values across a specified number of categories, and visualize these data as a horizontal stacked bar chart.\nNote that: The plot displays categories on the y-axis and their corresponding values on the x-axis, with data segmented by category.\nThe function should output with:\n    tuple: A tuple containing a matplotlib Figure and Axes objects for the generated plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import randint\ndef task_func(num_types=5, integer_range=(0, 100)):\n    LABELS = [f'Type{i + 1}' for i in range(num_types)]\n    data = pd.DataFrame({label: [randint(*integer_range) for _ in range(num_types)] for label in LABELS})\n\n    fig, ax = plt.subplots()\n    data.plot(kind='barh', stacked=True, ax=ax)\n\n    return fig, ax",
        "test": "import unittest\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        fig, ax = task_func()\n        self.assertEqual(len(ax.patches), 25)\n    def test_case_2(self):\n        fig, ax = task_func(3, (0, 50))\n        self.assertEqual(len(ax.patches), 9)\n    def test_case_3(self):\n        fig, ax = task_func(10)\n        self.assertEqual(len(ax.patches), 100)\n    def test_case_4(self):\n        fig, ax = task_func(1, (10, 20))\n        self.assertEqual(len(ax.patches), 1)\n    def test_case_5(self):\n        fig, ax = task_func(2, (5, 15))\n        self.assertEqual(len(ax.patches), 4)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of a matrix 'P' and a 3D tensor 'T' using numpy and visualize the results as a heatmap.\nNote that: This function only accepts numpy matrices/arrays.\nThe function should output with:\n    numpy.ndarray: Resultant product after matrix-tensor multiplication.\n    matplotlib.axes.Axes: Axes object displaying the heatmap of the 2D result.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\ndef task_func(P, T):\n```",
        "gt": "import numpy as np\nimport seaborn as sns\ndef task_func(P, T):\n    if not (isinstance(P, np.ndarray) and isinstance(T, np.ndarray)):\n        raise TypeError(\"Expected inputs to be numpy arrays\")\n\n    result = np.tensordot(P, T, axes=[1, 0])\n    # Sum along the last dimension to get a 2D matrix\n    result_2D = np.sum(result, axis=-1)\n    heatmap = sns.heatmap(result_2D)\n    return result, heatmap",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.test_P = np.array([[6, 2, 7], [1, 1, 8]])\n        self.test_P_zeros = np.zeros((2, 3))\n        self.test_T = np.array(\n            [\n                [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n                [[2, 3, 4], [5, 6, 7], [8, 9, 10]],\n                [[3, 4, 5], [6, 7, 8], [9, 10, 11]],\n            ]\n        )\n    def test_case_1(self):\n        # Test return types\n        product, heatmap = task_func(self.test_P, self.test_T)\n        self.assertIsInstance(product, np.ndarray)\n        self.assertIsInstance(heatmap, plt.Axes)\n    def test_case_2(self):\n        # Test output correctness\n        product, _ = task_func(self.test_P, self.test_T)\n        expected_product = np.tensordot(self.test_P, self.test_T, axes=[1, 0])\n        self.assertTrue(np.allclose(product, expected_product))\n    def test_case_3(self):\n        # Test output correctness with zeros\n        product, _ = task_func(self.test_P_zeros, self.test_T)\n        self.assertTrue(np.all(product == 0))\n    def test_case_4(self):\n        # Test return shape\n        product, _ = task_func(self.test_P, self.test_T)\n        expected_shape = (2, 3, 3)\n        self.assertEqual(product.shape, expected_shape, \"Output shape is incorrect\")\n    def test_case_5(self):\n        # Test handling invalid input types\n        with self.assertRaises(TypeError):\n            task_func([1, 2], [2, 1])\n    def test_case_6(self):\n        # Test handling invalid shape\n        P = np.array([[1, 2], [3, 4]])\n        T = np.random.rand(3, 3, 3)\n        with self.assertRaises(ValueError):\n            task_func(P, T)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw the age distribution of the persons in an SQLite3 table and returns the Axes object of the plot. Raises a ValueError if the loaded data contains negative age values.\nThe function should raise the exception for: ValueError: If the data contains negative age values.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object representing the age distribution plot,\n    with x-axis showing 'age' and a default of bins of 30, and kde set to True.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport seaborn as sns\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n```",
        "gt": "import sqlite3\nimport pandas as pd\nimport seaborn as sns\ndef task_func(db_name=\"test.db\", table_name=\"People\"):\n    conn = sqlite3.connect(db_name)\n    df = pd.read_sql_query(f\"SELECT age from {table_name}\", conn)\n\n    if (df[\"age\"] < 0).any():\n        raise ValueError(\"Data contains negative age values.\")\n\n    ax = sns.histplot(data=df, x=\"age\", bins=30, kde=True)\n    ax.set_xlabel(\"age\")\n    return ax",
        "test": "import unittest\nimport os\nimport sqlite3\nimport matplotlib.pyplot as plt\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup temporary directory\n        self.test_dir = tempfile.TemporaryDirectory()\n        # Create test_alt.db with People table\n        self.alt_db_path = os.path.join(self.test_dir.name, \"test_alt.db\")\n        conn = sqlite3.connect(self.alt_db_path)\n        cursor = conn.cursor()\n        cursor.execute(\"CREATE TABLE People (name TEXT, age INT)\")\n        cursor.executemany(\n            \"INSERT INTO People VALUES (?, ?)\", [(\"Alice\", 25), (\"Bob\", 30)]\n        )\n        conn.commit()\n        conn.close()\n        # Create a standard test.db with Employees table\n        self.default_db_path = os.path.join(self.test_dir.name, \"test.db\")\n        conn = sqlite3.connect(self.default_db_path)\n        cursor = conn.cursor()\n        cursor.execute(\"CREATE TABLE Employees (name TEXT, age INT)\")\n        cursor.executemany(\n            \"INSERT INTO Employees VALUES (?, ?)\", [(\"Charlie\", 35), (\"David\", 40)]\n        )\n        conn.commit()\n        conn.close()\n        # Create standard db with more examples\n        self.multiple_db_path = os.path.join(self.test_dir.name, \"test_multiple.db\")\n        conn = sqlite3.connect(self.multiple_db_path)\n        cursor = conn.cursor()\n        cursor.execute(\"CREATE TABLE MultipleAge (name TEXT, age INT)\")\n        cursor.executemany(\n            \"INSERT INTO MultipleAge VALUES (?, ?)\",\n            [(\"Alice\", 25), (\"Bob\", 30), (\"Charlie\", 35)],\n        )\n        conn.commit()\n        conn.close()\n        # Create a db for testing edge cases - negative age\n        self.negative_age_db_path = os.path.join(\n            self.test_dir.name, \"test_negative_age.db\"\n        )\n        conn = sqlite3.connect(self.negative_age_db_path)\n        cursor = conn.cursor()\n        cursor.execute(\"CREATE TABLE NegativeAge (name TEXT, age INT)\")\n        cursor.executemany(\n            \"INSERT INTO NegativeAge VALUES (?, ?)\", [(\"Eve\", -1), (\"Frank\", 20)]\n        )\n        conn.commit()\n        conn.close()\n        # Create a db for testing edge cases - empty\n        self.empty_db_path = os.path.join(self.test_dir.name, \"test_empty.db\")\n        conn = sqlite3.connect(self.empty_db_path)\n        cursor = conn.cursor()\n        cursor.execute(\"CREATE TABLE EmptyAge (name TEXT, age INT)\")\n        conn.commit()\n        conn.close()\n    def tearDown(self):\n        self.test_dir.cleanup()\n        plt.close(\"all\")\n    def _check_plot(self, ax, contains_data=True):\n        self.assertTrue(isinstance(ax, plt.Axes), \"The plot should be an Axes object.\")\n        self.assertEqual(ax.get_xlabel(), \"age\", \"The x-axis label should be 'age'.\")\n        if contains_data:\n            self.assertTrue(len(ax.lines) > 0, \"The plot should contain a KDE line.\")\n    def test_case_1(self):\n        ax = task_func(db_name=self.default_db_path, table_name=\"Employees\")\n        self._check_plot(ax)\n    def test_case_2(self):\n        ax = task_func(db_name=self.alt_db_path)\n        self._check_plot(ax)\n    def test_case_3(self):\n        ax = task_func(db_name=self.default_db_path, table_name=\"Employees\")\n        self._check_plot(ax)\n    def test_case_4(self):\n        ax = task_func(db_name=self.multiple_db_path, table_name=\"MultipleAge\")\n        self._check_plot(ax)\n    def test_case_5(self):\n        ax = task_func(db_name=self.empty_db_path, table_name=\"EmptyAge\")\n        self._check_plot(ax, False)\n    def test_case_6(self):\n        # Test for non-existent table\n        with self.assertRaises(Exception):\n            task_func(db_name=self.default_db_path, table_name=\"Nonexistent\")\n    def test_case_7(self):\n        # Test for negative age values\n        with self.assertRaises(ValueError):\n            task_func(db_name=self.negative_age_db_path, table_name=\"NegativeAge\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a mathematical function (sine, cosine, or tangent) on a polar diagram 'ax'. The radial ticks are placed at a position corresponding to the index of the function multiplied by 45 degrees.\nThe function should raise the exception for: This function will raise a ValueError if the input ax is not and Axes.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified ax with the plotted function.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport numpy as np\n# Constants\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n```",
        "gt": "import matplotlib\nimport numpy as np\n# Constants\nFUNCTIONS = [np.sin, np.cos, np.tan]\ndef task_func(ax, func_index):\n    print(type(ax))\n    if not isinstance(ax, matplotlib.axes.Axes):\n        raise ValueError(\"The input is not an axes\")\n    x = np.linspace(0, 2 * np.pi, 1000)\n    y = FUNCTIONS[func_index](x)\n\n    ax.plot(x, y)\n    ax.set_rlabel_position(func_index * 45)\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.ax = self.fig.add_subplot(111, polar=True)\n    def test_sine_function(self):\n        ax = task_func(self.ax, 0)\n        self.assertIsNotNone(ax, \"Ax should not be None\")\n        # Verify if the plotted function matches the sine function\n        x = np.linspace(0, 2 * np.pi, 1000)\n        y_expected = np.sin(x)\n        y_actual = ax.lines[0].get_ydata()\n        np.testing.assert_allclose(y_actual, y_expected, atol=1e-5)\n    def test_cosine_function(self):\n        ax = task_func(self.ax, 1)\n        self.assertIsNotNone(ax, \"Ax should not be None\")\n    def test_tangent_function(self):\n        ax = task_func(self.ax, 2)\n        self.assertIsNotNone(ax, \"Ax should not be None\")\n    def test_invalid_index(self):\n        with self.assertRaises(IndexError):\n            task_func(self.ax, 3)\n    def test_rlabel_position(self):\n        ax = task_func(self.ax, 1)\n        self.assertEqual(ax.get_rlabel_position(), 45, \"Rlabel position should be 45 for index 1\")\n    def test_case_non_ax(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_ax\", 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Divide a CSV file into several smaller files and shuffle the lines in each file. This function takes a CSV file path as input, divides it into smaller files using the shell 'split' command, and shuffles the rows in each of the resulting files. The output files are named with a 'split_' prefix.\nThe function should output with:\n    list: The paths to the split files. Returns an empty list if the file does not exist, is not a CSV file, or if an error occurs during processing.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n```",
        "gt": "import subprocess\nimport csv\nimport glob\nimport random\nimport os\ndef task_func(file):\n    # Check if file exists\n    if not os.path.exists(file):\n        print(\"Provided file does not exist.\")\n        return []\n    \n    # Check for CSV file extension\n    if not file.endswith('.csv'):\n        print(\"Provided file is not a CSV.\")\n        return []\n\n    try:\n        subprocess.call(['split', '-n', '5', '-d', file, 'split_'])\n        split_files = glob.glob('split_*')\n\n        for split_file in split_files:\n            with open(split_file, 'r') as f:\n                reader = csv.reader(f)\n                rows = list(reader)\n\n            random.shuffle(rows)\n\n            with open(split_file, 'w') as f:\n                writer = csv.writer(f)\n                writer.writerows(rows)\n\n        return split_files\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return []",
        "test": "import unittest\nimport csv\nimport os\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to hold the files\n        self.test_dir = tempfile.mkdtemp()\n        self.small_csv_path = os.path.join(self.test_dir, \"small.csv\")\n        self.medium_csv_path = os.path.join(self.test_dir, \"medium.csv\")\n        self.large_csv_path = os.path.join(self.test_dir, \"large.csv\")\n        self.non_csv_path = os.path.join(self.test_dir, \"test.txt\")\n        \n        # Create dummy CSV files of different sizes\n        with open(self.small_csv_path, \"w\", newline=\"\") as file:\n            writer = csv.writer(file)\n            for i in range(10):  # Small CSV\n                writer.writerow([f\"row{i}\", f\"value{i}\"])\n        \n        with open(self.medium_csv_path, \"w\", newline=\"\") as file:\n            writer = csv.writer(file)\n            for i in range(100):  # Medium CSV\n                writer.writerow([f\"row{i}\", f\"value{i}\"])\n        \n        with open(self.large_csv_path, \"w\", newline=\"\") as file:\n            writer = csv.writer(file)\n            for i in range(1000):  # Large CSV\n                writer.writerow([f\"row{i}\", f\"value{i}\"])\n        \n        # Create a non-CSV file\n        with open(self.non_csv_path, \"w\") as file:\n            file.write(\"This is a test text file.\")\n    def tearDown(self):\n        # Remove all files created in the directory\n        for filename in os.listdir(self.test_dir):\n            file_path = os.path.join(self.test_dir, filename)\n            os.remove(file_path)  # Remove each file\n    def test_small_csv(self):\n        \"\"\"Test splitting and shuffling a small CSV file.\"\"\"\n        split_files = task_func(self.small_csv_path)\n        self.assertTrue(len(split_files) > 0, \"No files were split.\")\n        self.assertNotEqual(self._read_csv(self.small_csv_path), self._read_csv(split_files[0]), \"Rows are not shuffled.\")\n        for filename in split_files:\n            os.remove(filename)\n    def test_medium_csv(self):\n        \"\"\"Test splitting and shuffling a medium CSV file.\"\"\"\n        split_files = task_func(self.medium_csv_path)\n        self.assertTrue(len(split_files) > 0, \"No files were split.\")\n        self.assertNotEqual(self._read_csv(self.medium_csv_path), self._read_csv(split_files[0]), \"Rows are not shuffled.\")\n        for filename in split_files:\n            os.remove(filename)\n    def test_large_csv(self):\n        \"\"\"Test splitting and shuffling a large CSV file.\"\"\"\n        split_files = task_func(self.large_csv_path)\n        self.assertTrue(len(split_files) > 0, \"No files were split.\")\n        self.assertNotEqual(self._read_csv(self.large_csv_path), self._read_csv(split_files[0]), \"Rows are not shuffled.\")\n        for filename in split_files:\n            os.remove(filename)\n    def test_invalid_file(self):\n        \"\"\"Test behavior with a non-existent file path.\"\"\"\n        split_files = task_func(\"/path/that/does/not/exist.csv\")\n        self.assertEqual(split_files, [], \"Expected an empty list for an invalid file path.\")\n    def test_non_csv_file(self):\n        \"\"\"Test behavior with a non-CSV file.\"\"\"\n        split_files = task_func(self.non_csv_path)\n        self.assertEqual(split_files, [], \"Expected an empty list for a non-CSV file.\")\n    def _read_csv(self, filepath):\n        \"\"\"Helper method to read CSV file and return content.\"\"\"\n        with open(filepath, \"r\") as f:\n            reader = csv.reader(f)\n            return list(reader)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function scrapes a webpage for all hyperlinks and saves them as absolute URLs to a CSV file.\nThe function should output with:\n    int: The number of unique absolute links scraped from the webpage.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n```",
        "gt": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    full_url = urljoin(base_url, url)\n    response = requests.get(full_url)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n\n    # Extract and convert all found links to absolute URLs\n    links = {urljoin(base_url, a[\"href\"]) for a in soup.find_all(\"a\", href=True)}\n\n    with open(csv_file, \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n        writer = csv.writer(csvfile)\n        for link in links:\n            writer.writerow([link])\n\n    return len(links)",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport requests\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"requests.get\")\n    def test_empty_page(self, mock_get):\n        \"\"\"\n        Test the function with an empty webpage (no links).\n        \"\"\"\n        mock_get.return_value = MagicMock(text=\"<html></html>\")\n        result = task_func(\"/empty\")\n        self.assertEqual(result, 0)\n    @patch(\"requests.get\")\n    def test_single_link(self, mock_get):\n        \"\"\"\n        Test the function with a webpage containing a single link.\n        \"\"\"\n        mock_get.return_value = MagicMock(\n            text='<html><a href=\"link1.html\">Link1</a></html>'\n        )\n        result = task_func(\"/single-link\")\n        self.assertEqual(result, 1)\n    @patch(\"requests.get\")\n    def test_multiple_links(self, mock_get):\n        \"\"\"\n        Test the function with a webpage containing multiple distinct links.\n        \"\"\"\n        mock_get.return_value = MagicMock(\n            text='<html><a href=\"link1.html\">Link1</a><a href=\"link2.html\">Link2</a></html>'\n        )\n        result = task_func(\"/multiple-links\")\n        self.assertEqual(result, 2)\n    @patch(\"requests.get\")\n    def test_duplicate_links(self, mock_get):\n        \"\"\"\n        Test the function with a webpage containing duplicate links.\n        \"\"\"\n        mock_get.return_value = MagicMock(\n            text='<html><a href=\"link.html\">Link</a><a href=\"link.html\">Link</a></html>'\n        )\n        result = task_func(\"/duplicate-links\")\n        self.assertEqual(result, 1)\n    @patch(\"requests.get\")\n    def test_external_links(self, mock_get):\n        \"\"\"\n        Test the function with a webpage containing external links.\n        \"\"\"\n        mock_get.return_value = MagicMock(\n            text='<html><a href=\"http://external.com/link\">External Link</a></html>'\n        )\n        result = task_func(\"/external-link\")\n        self.assertEqual(result, 1)\n    def tearDown(self):\n        \"\"\"Remove the database file with retries.\"\"\"\n        if os.path.exists(\"scraped_data.csv\"):\n            os.remove(\"scraped_data.csv\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform a logistic regression on a DataFrame to predict a specific target column.\nThe function should output with:\n    accuracy (float): The accuracy of the logistic regression model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\ndef task_func(data, columns, target_column):\n    df = pd.DataFrame(data, columns=columns)\n    if target_column not in df.columns:\n        raise ValueError('Target column does not exist in DataFrame')\n\n    X = df.drop(columns=target_column)  # Operate directly on the DataFrame\n    y = df[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = LogisticRegression(max_iter=200)\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n\n    return accuracy",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        data = np.array([[1, 4, 0], [2, 5, 1], [3, 6, 0]])\n        columns = ['A', 'B', 'C']\n        self.assertEqual(task_func(data, columns, 'C'), 0.0)\n    def test_case_2(self):\n        data = np.array([[1, 2, 3, -10], [4, 5, 6, -10], [1, 1, 1, 0]])\n        columns = ['A', 'B', 'C', 'D']\n        self.assertEqual(task_func(data, columns, 'C'), 0.0)\n    def test_case_3(self):\n        data = np.array([\n            [60, 45, 1],\n            [40, 55, 1],\n            [30, 71, 1],\n            [20, 82, 1],\n            [10, 95, 1],\n            [59, 40, 0],\n            [39, 60, 1],\n            [29, 70, 1],\n            [19, 80, 1],\n            [9,  89, 1]\n        ])\n        columns = ['A', 'B', 'C']\n        self.assertEqual(task_func(data, columns, 'C'), 1.0)\n    def test_case_4(self):\n        data = np.array([\n            [-10, 2, 3, -10],\n            [-10, 5, 6, 10],\n            [-10, -2, -1, -10],\n            [-10, 1, 0, -10],\n            [-10, 8, 9, 10],\n            [-10, -5, -4, -10]\n        ])\n        columns = ['A', 'B', 'C', 'D']\n        self.assertEqual(task_func(data, columns, 'D'), 1.0)\n    def test_case_5(self):\n        data = np.array([\n            [-10, 2, 3, -10, 1],\n            [-10, 5, 6, 10, 1],\n            [-10, -2, -1, -10, 1],\n            [-10, 1, 0, -10, 1],\n            [-10, 8, 9, 10, 1],\n            [-10, -5, -4, -10, 1]\n        ])\n        columns = ['A', 'B', 'C', 'D', 'E']\n        self.assertEqual(task_func(data, columns, 'D'), 1.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the total number of seconds elapsed from a given date until the current time, including any leap seconds that occurred in this period.\nNote that: This function uses the datetime, numpy, and dateutil.parser modules. The LEAP_SECONDS array should contain years when leap seconds were added.\nThe function should output with:\n    int: The total number of elapsed seconds, including leap seconds, since the given date.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n```",
        "gt": "from datetime import datetime\nimport numpy as np\nfrom dateutil.parser import parse\nLEAP_SECONDS = np.array(\n    [\n        1972,\n        1973,\n        1974,\n        1975,\n        1976,\n        1977,\n        1978,\n        1979,\n        1980,\n        1981,\n        1982,\n        1983,\n        1985,\n        1988,\n        1990,\n        1993,\n        1994,\n        1997,\n        1999,\n        2006,\n        2009,\n        2012,\n        2015,\n        2016,\n        2020,\n    ]\n)\ndef task_func(date_str):\n    given_date = parse(date_str)\n    current_date = datetime.now()\n\n    total_seconds = (current_date - given_date).total_seconds()\n\n    # Count leap seconds that occurred between the two dates\n    leap_seconds = np.sum(LEAP_SECONDS >= given_date.year)\n\n    total_seconds += leap_seconds\n\n    return int(total_seconds)",
        "test": "import unittest\nfrom datetime import datetime, timedelta\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_recent_date(self):\n        \"\"\"\n        Test the function with a recent date.\n        \"\"\"\n        test_date = \"2022-01-01 00:00:00\"\n        expected_result = (datetime.now() - datetime(2022, 1, 1)).total_seconds()\n        expected_result += np.sum(LEAP_SECONDS >= 2022)\n        self.assertEqual(task_func(test_date), int(expected_result))\n    def test_date_before_leap_seconds(self):\n        \"\"\"\n        Test the function with a date before the introduction of leap seconds.\n        \"\"\"\n        test_date = \"1960-01-01 00:00:00\"\n        expected_result = (datetime.now() - datetime(1960, 1, 1)).total_seconds()\n        expected_result += np.sum(LEAP_SECONDS >= 1960)\n        self.assertEqual(task_func(test_date), int(expected_result))\n    def test_date_with_leap_second(self):\n        \"\"\"\n        Test the function with a date in a year when a leap second was added.\n        \"\"\"\n        test_date = \"2016-01-01 00:00:00\"\n        expected_result = (datetime.now() - datetime(2016, 1, 1)).total_seconds()\n        expected_result += np.sum(LEAP_SECONDS >= 2016)\n        self.assertAlmostEqual(task_func(test_date), int(expected_result), delta=1)\n    def test_future_date(self):\n        \"\"\"\n        Test the function with a future date.\n        \"\"\"\n        future_date = datetime.now() + timedelta(days=30)\n        future_date_str = future_date.strftime(\"%Y-%m-%d %H:%M:%S\")\n        result = task_func(future_date_str)\n        expected_result = -30 * 24 * 3600  # Negative seconds for future dates\n        # Allowing a margin of error of 1 second\n        self.assertTrue(abs(result - expected_result) <= 1)\n    def test_current_date(self):\n        \"\"\"\n        Test the function with the current date and time.\n        \"\"\"\n        current_date_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        self.assertTrue(0 <= task_func(current_date_str) <= 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes CSV files in a directory based on a specified pattern and creates new files with altered names while preserving the content, you've laid out a solid foundation with your initial tests.\nThe function should output with:\n    new_files (list): A list of strings, where each string is the filename of a new CSV file created by the function.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n```",
        "gt": "import re\nimport os\nfrom pathlib import Path\nimport csv\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    file_dir = Path(directory)\n    file_pattern = re.compile(pattern)\n    new_files = []\n    \n    for filename in os.listdir(file_dir):\n        match = file_pattern.match(filename)\n        if match is not None:\n            prefix = match.group(1)\n            new_filename = f'{prefix}.csv'\n            with open(file_dir / filename, 'r') as infile, open(file_dir / new_filename, 'w') as outfile:\n                reader = csv.reader(infile)\n                writer = csv.writer(outfile)\n                writer.writerows(reader)\n            new_files.append(new_filename)\n    \n    return new_files",
        "test": "import unittest\nfrom unittest.mock import mock_open, patch\nfrom io import StringIO\nimport csv\nimport shutil\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        # This sets up the test environment\n        self.directory = \"/mnt/data/test_data\"\n        self.mock_csv_rows = [[\"column1\", \"column2\"], [\"value1\", \"value2\"]]\n    def test_file_creation_and_content(self):\n        with patch('os.listdir', return_value=['Shan-1.csv', 'Shannon-2.csv']):\n            # Prepare the CSV content in the way csv.writer would write it\n            mock_csv_data = '\\r\\n'.join([','.join(row) for row in self.mock_csv_rows]) + '\\r\\n'\n            with patch('builtins.open', mock_open(read_data=mock_csv_data)) as mock_file:\n                result_files = task_func(self.directory)\n                expected_files = ['Shan.csv', 'Shannon.csv']\n                self.assertListEqual(result_files, expected_files)\n                for expected_file in expected_files:\n                    expected_path = Path(self.directory) / expected_file\n                    mock_file.assert_any_call(expected_path, \"w\")\n                # Check if the contents were written correctly for each file\n                handle = mock_file()\n                for row in self.mock_csv_rows:\n                    expected_write = ','.join(row) + '\\r\\n'\n                    handle.write.assert_any_call(expected_write)\n        \n    def test_empty_directory(self):\n        with patch('os.listdir', return_value=[]):\n            result_files = task_func(self.directory)\n            self.assertEqual(result_files, [])\n    def test_non_matching_files(self):\n        with patch('os.listdir', return_value=['random.txt', 'test-123.txt']):\n            result_files = task_func(self.directory)\n            self.assertEqual(result_files, [])\n    def test_mixed_file_types(self):\n        with patch('os.listdir', return_value=['Shan-1.csv', 'test.txt', 'Shannon-2.pdf']):\n            mock_csv_data = '\\r\\n'.join([','.join(row) for row in self.mock_csv_rows]) + '\\r\\n'\n            with patch('builtins.open', mock_open(read_data=mock_csv_data)) as mock_file:\n                result_files = task_func(self.directory)\n                expected_files = ['Shan.csv']\n                self.assertEqual(result_files, expected_files)\n                # Adjust the expected path to match the OS-specific format\n                expected_path = Path(self.directory) / 'Shan-1.csv'\n                mock_file.assert_any_call(expected_path, 'r')\n    def test_exception_handling(self):\n        with patch('os.listdir', return_value=['Shan-1.csv']), \\\n             patch('builtins.open', side_effect=IOError(\"File not found\")):\n            with self.assertRaises(IOError):\n                task_func(self.directory)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Split a multi-line string into separate strings, remove special characters, and save each string as a separate text file.\nThe function should output with:\n    file_paths (list): A list of file paths where the text is saved.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n```",
        "gt": "import re\nimport os\nimport string\nimport random\ndef task_func(input_string, directory='./text_files'):\n    lines = input_string.split('\\n')\n    file_paths = []\n    for line in lines:\n        line = re.sub('['+string.punctuation+']', '', line)\n        filename = str(random.randint(10000, 99999)) + '.txt'\n        filepath = os.path.join(directory, filename)\n        file_paths.append(filepath)\n        with open(filepath, 'w') as file:\n            file.write(line)\n    return file_paths",
        "test": "import unittest\nimport os\nimport random\nimport string\n# Importing the refined function\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up the directory where test files will be saved\n        self.test_dir = './test_text_files'\n        os.makedirs(self.test_dir, exist_ok=True)\n    def tearDown(self):\n        # Remove all files in the test directory after each test\n        for file_name in os.listdir(self.test_dir):\n            file_path = os.path.join(self.test_dir, file_name)\n            os.remove(file_path)\n    def test_single_line(self):\n        # Test with a single line string\n        input_string = \"Hello, world!\"\n        output = task_func(input_string, self.test_dir)\n        self.assertEqual(len(output), 1)\n        with open(output[0], 'r') as file:\n            self.assertEqual(file.read(), \"Hello world\")\n    def test_multi_line(self):\n        # Test with a multi-line string\n        input_string = \"Line A\\nLine B\\nLine C\"\n        output = task_func(input_string, self.test_dir)\n        self.assertEqual(len(output), 3)\n        expected_lines = [\"Line A\", \"Line B\", \"Line C\"]\n        for i, file_path in enumerate(output):\n            with open(file_path, 'r') as file:\n                self.assertEqual(file.read(), expected_lines[i])\n    def test_special_characters(self):\n        # Test if special characters are removed\n        input_string = \"Hello!@$\\nWorld!#\"\n        output = task_func(input_string, self.test_dir)\n        self.assertEqual(len(output), 2)\n        expected_lines = [\"Hello\", \"World\"]\n        for i, file_path in enumerate(output):\n            with open(file_path, 'r') as file:\n                self.assertEqual(file.read(), expected_lines[i])\n    def test_empty_string(self):\n        # Test with an empty string\n        input_string = \"\"\n        output = task_func(input_string, self.test_dir)\n        self.assertEqual(len(output), 1)\n        with open(output[0], 'r') as file:\n            self.assertEqual(file.read(), \"\")\n    def test_random_filenames(self):\n        # Test if filenames are random and unique\n        input_string = \"A\\nB\"\n        output1 = task_func(input_string, self.test_dir)\n        output2 = task_func(input_string, self.test_dir)\n        self.assertNotEqual(output1, output2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the one-dimensional discrete N-point Fourier Transform (DFT) for a real or complex sequence (signal) using the Fast Fourier Transform (FFT) algorithm. Plot the original signal and the transformed signal, rounding the transformed signal values to the specified accuracy. The title of the plots will be 'Original Signal' and 'Transformed Signal'.\nThe function should output with:\n    ndarray: A numpy array of transformed signal values (rounded to the specified precision).\n    tuple: A tuple containing the Axes objects for the original signal and transformed signal plots.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft\ndef task_func(signal, precision=2, seed=777):\n    np.random.seed(seed)\n    transformed_signal = fft(signal)\n    transformed_signal_rounded = np.round(transformed_signal, precision).tolist()\n\n    fig, ax = plt.subplots(2, 1)\n    ax[0].plot(signal)\n    ax[0].set_title('Original Signal')\n    ax[1].plot(transformed_signal_rounded)\n    ax[1].set_title('Transformed Signal')\n    plt.tight_layout()  # Adjust layout to avoid overlap\n\n    return np.array(transformed_signal_rounded), ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a constant signal\n        signal = np.array([1.0, 1.0, 1.0, 1.0])\n        transformed_signal, (ax1, ax2) = task_func(signal)\n        \n        # Assert transformed signal\n        self.assertTrue(all(transformed_signal == np.array([4.0, 0.0, 0.0, 0.0])))\n        \n        # Assert plot titles\n        self.assertEqual(ax1.get_title(), 'Original Signal')\n        self.assertEqual(ax2.get_title(), 'Transformed Signal')\n    \n    def test_case_2(self):\n        # Test with a sine wave signal\n        signal = np.sin(np.linspace(0, 2 * np.pi, 100))\n        transformed_signal, (ax1, ax2) = task_func(signal, precision=3)\n        \n        # Assert transformed signal values (checking just the first few)\n        self.assertTrue(np.isclose(transformed_signal[0], 0.0, atol=1e-3))\n        \n        # Assert plot titles\n        self.assertEqual(ax1.get_title(), 'Original Signal')\n        self.assertEqual(ax2.get_title(), 'Transformed Signal')\n    \n    def test_case_3(self):\n        # Test with a random signal\n        signal = np.random.rand(50)\n        transformed_signal, (ax1, ax2) = task_func(signal, precision=4)\n        \n        # Assert plot titles\n        self.assertEqual(ax1.get_title(), 'Original Signal')\n        self.assertEqual(ax2.get_title(), 'Transformed Signal')\n    \n    def test_case_4(self):\n        # Test with a short signal\n        signal = np.array([0., 1., 0., -1.])\n        transformed_signal, (ax1, ax2) = task_func(signal, precision=1)\n        \n        # Assert transformed signal\n        self.assertTrue(all(transformed_signal == np.array([-0.-0.j, 0.-2.j, 0.-0.j, 0.+2.j])))\n        \n        # Assert plot titles\n        self.assertEqual(ax1.get_title(), 'Original Signal')\n        self.assertEqual(ax2.get_title(), 'Transformed Signal')\n    \n    def test_case_5(self):\n        # Test with a complex signal\n        signal = np.array([1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j])\n        transformed_signal, (ax1, ax2) = task_func(signal, precision=2)\n        \n        # Assert plot titles\n        self.assertEqual(ax1.get_title(), 'Original Signal')\n        self.assertEqual(ax2.get_title(), 'Transformed Signal')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts string-formatted weights to floats and plots a scatter plot of weight against height. This function takes a dictionary with two keys: 'Weight_String' and 'Height'. The 'Weight_String' key should contain a list of weight values in string format, while the 'Height' key should have a list of corresponding height values in numerical format. If the input dictionary is not provided, the function uses a default dataset. The function then converts the string-formatted weights into float, and plots a scatter plot to visualize the relationship between weight and height.\nThe function should raise the exception for: ValueError: If any of the values in the 'Weight_String' key are not formatted as strings. This validation ensures that the weight data is in the expected format for conversion to float.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): A scatter plot with weight on the x-axis and height on the y-axis, titled \"Weight vs Height\".\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data=None):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(data=None):\n    if data is None:\n        data = {\n            \"Weight_String\": [\"60.5\", \"65.7\", \"70.2\", \"75.9\", \"80.1\"],\n            \"Height\": [160, 165, 170, 175, 180],\n        }\n\n    df = pd.DataFrame(data)\n\n    # Validate weight values are strings\n    if not all(isinstance(weight, str) for weight in df[\"Weight_String\"]):\n        raise ValueError(\"Weights must be provided as strings.\")\n\n    # Convert string weights to floats\n    df[\"Weight_Float\"] = df[\"Weight_String\"].astype(float)\n\n    # Plotting the scatter plot\n    ax = sns.scatterplot(data=df, x=\"Weight_Float\", y=\"Height\")\n    ax.set_title(\"Weight vs Height\")\n    return ax",
        "test": "import unittest\nimport pandas as pd\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_default_data(self):\n        \"\"\"Test task_func with its default data.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, Axes)\n    def test_custom_data(self):\n        \"\"\"Test task_func with custom data.\"\"\"\n        custom_data = {\n            \"Weight_String\": [\"50.5\", \"55.7\", \"60.2\"],\n            \"Height\": [150, 155, 160],\n        }\n        result = task_func(custom_data)\n        self.assertIsInstance(result, Axes)\n    def test_incorrect_data_type(self):\n        \"\"\"Test task_func with incorrect data types in Weight_String.\"\"\"\n        incorrect_data = {\n            \"Weight_String\": [\n                60.5,\n                65.7,\n                70.2,\n            ],  # Intentionally using floats instead of strings\n            \"Height\": [160, 165, 170],\n        }\n        with self.assertRaises(ValueError):\n            task_func(incorrect_data)\n    def test_empty_data(self):\n        \"\"\"Test task_func with empty data.\"\"\"\n        empty_data = {\"Weight_String\": [], \"Height\": []}\n        result = task_func(empty_data)\n        self.assertIsInstance(result, Axes)\n    def test_mismatched_data_length(self):\n        \"\"\"Test task_func with mismatched lengths of Weight_String and Height.\"\"\"\n        mismatched_data = {\n            \"Weight_String\": [\"60.5\", \"65.7\"],  # Less weights than heights\n            \"Height\": [160, 165, 170],\n        }\n        with self.assertRaises(ValueError):\n            task_func(mismatched_data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a spending report DataFrame for the given number of days. This function takes a number of days as input and populates a pandas DataFrame with fake expenditure data indexed by date. Each day on or after '2023-01-01' has its own row. The DataFrame has five columns: Groceries, Entertainment, Rent, Utilities, and Miscellaneous, with their integer values independently randomly sampled from 0 to 100.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing spending details for specified days,\n    with shape (num_days, 5).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(days, random_seed=0):\n    np.random.seed(random_seed)\n    date_rng = pd.date_range(start=\"2023-01-01\", periods=days, freq=\"D\")\n    df = pd.DataFrame(date_rng, columns=[\"date\"])\n    df.set_index(\"date\", inplace=True)\n    categories = [\"Groceries\", \"Entertainment\", \"Rent\", \"Utilities\", \"Miscellaneous\"]\n    for category in categories:\n        df[category] = np.random.randint(0, 100, size=(days))\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    report_columns = [\n        \"Groceries\",\n        \"Entertainment\",\n        \"Rent\",\n        \"Utilities\",\n        \"Miscellaneous\",\n    ]\n    start_date = pd.to_datetime([\"2023-01-01\"]).day\n    def _test_report_structure(self, report, days):\n        self.assertIsInstance(report, pd.DataFrame)\n        self.assertEqual(report.shape[0], days)\n        self.assertEqual(report.shape[1], len(self.report_columns))\n        self.assertEqual(list(report.columns), self.report_columns)\n    def _test_report_data(self, report):\n        self.assertFalse(report.isnull().values.any())\n        self.assertTrue(pd.api.types.is_datetime64_ns_dtype(report.index))\n        self.assertTrue(report.index.day.map(lambda d: d >= self.start_date).all())\n        for col in report:\n            self.assertTrue((report[col] >= 0).all() and (report[col] <= 100).all())\n    def _test_report(self, report, days):\n        self._test_report_structure(report, days)\n        self._test_report_data(report)\n    def test_case_1(self):\n        # Test basic case with default parameters\n        days = 7\n        report = task_func(days)\n        self._test_report(report, days)\n    def test_case_2(self):\n        # Test handling 0 days\n        days = 0\n        report = task_func(days)\n        self._test_report(report, days)\n    def test_case_3(self):\n        # Test handling larger number of days\n        days = 1000\n        report = task_func(days)\n        self._test_report(report, days)\n    def test_case_4(self):\n        # Test handling invalid inputs\n        with self.assertRaises(ValueError):\n            task_func(-1)\n        with self.assertRaises(ValueError):\n            task_func(None)\n        with self.assertRaises(TypeError):\n            task_func(\"-1\")\n    def test_case_5(self):\n        # Test random seed reproducibility\n        days = 100\n        report1 = task_func(days, random_seed=42)\n        report2 = task_func(days, random_seed=42)\n        self.assertTrue(report1.equals(report2))\n        self._test_report(report1, days)\n        self._test_report(report2, days)\n    def test_case_6(self):\n        # Test random seed variation\n        days = 100\n        report1 = task_func(days, random_seed=24)\n        report2 = task_func(days, random_seed=42)\n        self.assertFalse(report1.equals(report2))\n        self._test_report(report1, days)\n        self._test_report(report2, days)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates RSA public and private keys, encrypts all files in the specified directory using the public key, and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\nNote that: This method directly encrypts file data with RSA, which is not recommended for large files or production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to encrypt the actual data.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n```",
        "gt": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\ndef task_func(directory):\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n\n    return pub_key, zipfile_name",
        "test": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\nimport unittest\nimport tempfile\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a temporary directory\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove the directory after the test\n        shutil.rmtree(self.test_dir)\n        # Remove created zip file\n        if os.path.exists('encrypted_files.zip'):\n            os.remove('encrypted_files.zip')\n    def test_return_type(self):\n        # Creating test files\n        for i in range(2):\n            with open(os.path.join(self.test_dir, f\"file{i}.txt\"), 'w') as f:\n                f.write(\"Sample content\")\n        pub_key, zipfile_name = task_func(self.test_dir)\n        self.assertIsInstance(pub_key, rsa.PublicKey)\n        self.assertIsInstance(zipfile_name, str)\n    def test_zipfile_creation(self):\n        # Creating test files\n        for i in range(2):\n            with open(os.path.join(self.test_dir, f\"file{i}.txt\"), 'w') as f:\n                f.write(\"Sample content\")\n        _, zipfile_name = task_func(self.test_dir)\n        self.assertTrue(os.path.exists(zipfile_name))\n        with zipfile.ZipFile(zipfile_name, 'r') as zipf:\n            self.assertEqual(len(zipf.namelist()), 2)\n    def test_empty_directory(self):\n        # No files created in the setup for this test\n        _, zipfile_name = task_func(self.test_dir)\n        with zipfile.ZipFile(zipfile_name, 'r') as zipf:\n            self.assertEqual(len(zipf.namelist()), 0)\n    def test_file_encryption_contents(self):\n        # Creating a single test file\n        test_file_path = os.path.join(self.test_dir, \"test_file.txt\")\n        with open(test_file_path, 'w') as f:\n            f.write(\"Sample content\")\n        pub_key, zipfile_name = task_func(self.test_dir)\n        with zipfile.ZipFile(zipfile_name, 'r') as zipf:\n            encrypted_content = zipf.read(os.path.basename(test_file_path))\n            # Read the content to ensure it is encrypted and not plain text\n            self.assertNotEqual(b64encode(b\"Sample content\").decode('utf-8'), encrypted_content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load e-mail data from a CSV file, convert it into a Pandas DataFrame, and calculate the sum, mean, and standard deviation of the list associated with each e-mail. Additionally, this function will draw a histogram of the mean values and return both the DataFrame and the histogram plot.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    DataFrame: A pandas DataFrame with columns 'email', 'list', 'sum', 'mean', and 'std'.\n    Axes: A histogram plot of the mean values.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport ast\ndef task_func(csv_file):\n    df = pd.read_csv(csv_file)\n    df['list'] = df['list'].map(ast.literal_eval)\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['std'] = df['list'].apply(np.std)\n    plot = sns.histplot(df['mean'], kde=True)\n    return df, plot",
        "test": "import os\nimport unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = 'data/task_func'\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.f_1 = os.path.join(self.test_dir, \"csv_1.csv\")\n        self.f_2 = os.path.join(self.test_dir, \"csv_2.csv\")\n        self.f_3 = os.path.join(self.test_dir, \"csv_3.csv\")\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"first@example.com\", \"second@example.com\", \"third@example.com\"],\n                \"list\" : [\n                    [11, 12, 34, 21, 9, 3, 32],\n                    [17, 16, 15, 6, 3, 21, 6],\n                    [9, 7, 3, 3, 2, 1, 1, 1]\n                ]\n            }\n        )\n        df.to_csv(self.f_1, index=False)\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"fourth@example.com\", \"fifth@example.com\", \"sixth@example.com\", \"seventh@example.com\"],\n                \"list\" : [\n                    [11, 12, 34, 21, 9, 3, 32],\n                    [8, 4, 2, 13, 2, 1, 1, 1],\n                    [0, 7, 3, 3, 2, 1, 1, 1],\n                    [9, 7, 3, 3, 2, 1, 1, 1]\n                ]\n            }\n        )\n        df.to_csv(self.f_2, index=False)\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"ninth@example.com\", \"tenth@example.com\"],\n                \"list\" : [\n                    [19, 7, 23, 3, 2, 1, 5, 1],\n                    [9, 7, 13, 3, 12, 1, 4, 5]\n                ]\n            }\n        )\n        df.to_csv(self.f_3, index=False)\n        self.f_4 = os.path.join(self.test_dir, \"csv_4.csv\")\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"A@example.com\", \"B@example.com\"],\n                \"list\" : [\n                    [1],\n                    [1, 2],\n                ]\n            }\n        )\n        df.to_csv(self.f_4, index=False)\n        self.f_5 = os.path.join(self.test_dir, \"csv_5.csv\")\n        df = pd.DataFrame(\n            {\n                \"email\" : [\"C@example.com\"],\n                \"list\" : [\n                    [11, 23, 36, 180, 32, 98, 96, 56, 32, 72, 7, 24, 32],\n                ]\n            }\n        )\n        df.to_csv(self.f_5, index=False)\n    def tearDown(self):\n        import shutil\n        try:\n            shutil.rmtree(self.test_dir)\n        except OSError as e:\n            print(e)\n    def test_case_1(self):\n        df, plot = task_func(self.f_1)\n        try:\n            fig = plot.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        self.assertEqual(df.shape[1], 5)\n        self.assertIn('email', df.columns)\n        self.assertIn('list', df.columns)\n        self.assertIn('sum', df.columns)\n        self.assertIn('mean', df.columns)\n        self.assertIn('std', df.columns)\n        self.assertIsInstance(plot, plt.Axes)\n    def test_case_2(self):\n        df, ax = task_func(self.f_2)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        for _, row in df.iterrows():\n            self.assertEqual(row['sum'], sum(row['list']))\n            self.assertAlmostEqual(row['mean'], np.mean(row['list']))\n            self.assertAlmostEqual(row['std'], np.std(row['list']))\n    def test_case_3(self):\n        df, ax = task_func(self.f_3)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        for _, row in df.iterrows():\n            self.assertEqual(row['sum'], sum(row['list']))\n            self.assertAlmostEqual(row['mean'], np.mean(row['list']))\n            self.assertAlmostEqual(row['std'], np.std(row['list']))\n    def test_case_4(self):\n        df, ax = task_func(self.f_4)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        for _, row in df.iterrows():\n            self.assertEqual(row['sum'], sum(row['list']))\n            self.assertAlmostEqual(row['mean'], np.mean(row['list']))\n            self.assertAlmostEqual(row['std'], np.std(row['list']))\n    def test_case_5(self):\n        df, ax = task_func(self.f_5)\n        try:\n            fig = ax.get_figure()\n            plt.close(fig)\n        except:\n            pass\n        for _, row in df.iterrows():\n            self.assertEqual(row['sum'], sum(row['list']))\n            self.assertAlmostEqual(row['mean'], np.mean(row['list']))\n            self.assertAlmostEqual(row['std'], np.std(row['list']))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the n most common letters in a dictionary, x, where the key letters and the values are their frequencies.\nThe function should output with:\n    list: The n most frequent letters.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport collections\ndef task_func(x, n):\n```",
        "gt": "import heapq\nimport collections\ndef task_func(x, n):\n    counter = collections.Counter(x)\n    most_frequent = heapq.nlargest(n, counter.keys(), key=counter.get)\n\n    return most_frequent",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3}, 2), ['c', 'b'])\n    def test_case_2(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3}, 1), ['c'])\n    def test_case_3(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3}, 3), ['c', 'b', 'a'])\n    def test_case_4(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3}, 0), [])\n    def test_case_5(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3}, 4), ['c', 'b', 'a'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a list of lists 'L' into a single list of integers, standardize the integers, and plot the standardized values.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A plot displaying the standardized values.\nYou should write self-contained code starting with:\n```\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n```",
        "gt": "from itertools import chain\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    data = list(chain(*L))\n    data = np.array(data).reshape(-1, 1)\n\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n\n    fig, ax = plt.subplots()\n    ax.plot(standardized_data)\n    plt.close(fig)\n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ax = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 9)\n    def test_case_2(self):\n        ax = task_func([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 9)\n    def test_case_3(self):\n        ax = task_func([[1, -2, 3], [-4, 5, -6], [7, -8, 9]])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 9)\n    def test_case_4(self):\n        ax = task_func([[1, 2, 3, 4, 5]])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 5)\n    def test_case_5(self):\n        ax = task_func([[1, 2], [3, 4, 5, 6], [7]])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 7)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\nThe function should raise the exception for: FileNotFoundError: If the specified directory does not exist. ValueError: If there are no CSV files in the specified directory. pandas.errors.EmptyDataError: If an empty CSV file is encountered.\nThe function should output with:\n    str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n```",
        "gt": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\ndef task_func(data_dir='./data/'):\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n\n    return table.draw()",
        "test": "import unittest\nimport pandas as pd\nimport os\ndef create_dummy_files(data_dir):\n    os.makedirs(data_dir, exist_ok=True)\n    # Creating dummy CSV files with more diverse data\n    dummy_files = ['test1.csv', 'test2.csv']\n    # Create a DataFrame with a range of integers\n    pd.DataFrame({'col1': range(5), 'col2': range(5, 10)}).to_csv(data_dir + dummy_files[0], index=False)\n    # Create a DataFrame with mixed data types and missing values\n    mixed_data = pd.DataFrame({\n        'a': range(10),\n        'b': [float(x) for x in range(10)],\n        'c': list('abcdefghij'),\n        'd': [None if x % 2 == 0 else x for x in range(10)]\n    })\n    mixed_data.to_csv(data_dir + dummy_files[1], index=False)\n    return dummy_files\ndef tear_down_dummy_files(data_dir, dummy_files):\n    # Cleaning up the dummy data directory\n    for file in dummy_files:\n        os.remove(data_dir + file)\n    os.rmdir(data_dir)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setting up a dummy data directory\n        self.test_data_dir = './test_data/'\n        os.makedirs(self.test_data_dir, exist_ok=True)\n        # Creating dummy CSV files with more diverse data\n        self.dummy_files = ['test1.csv', 'test2.csv', 'empty.csv']\n        # Create a DataFrame with a range of integers\n        pd.DataFrame({'col1': range(5), 'col2': range(5, 10)}).to_csv(self.test_data_dir + self.dummy_files[0], index=False)\n        # Create a DataFrame with mixed data types and missing values\n        mixed_data = pd.DataFrame({\n            'a': range(10),\n            'b': [float(x) for x in range(10)],\n            'c': list('abcdefghij'),\n            'd': [None if x % 2 == 0 else x for x in range(10)]\n        })\n        mixed_data.to_csv(self.test_data_dir + self.dummy_files[1], index=False)\n        # Empty DataFrame for the third file\n        pd.DataFrame().to_csv(self.test_data_dir + self.dummy_files[2], index=False)\n    def tearDown(self):\n        for file in self.dummy_files:\n            file_path = os.path.join(self.test_data_dir, file)\n            if os.path.exists(file_path):\n                os.remove(file_path)\n        if os.path.exists(self.test_data_dir):\n            os.rmdir(self.test_data_dir)\n    def test_normal_functionality(self):\n        os.remove(self.test_data_dir + 'empty.csv')\n        table_str = task_func(self.test_data_dir)\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(table_str))\n            \n        expect_str = '''+-----------+------+---------+\n|   File    | Rows | Columns |\n+===========+======+=========+\n| test1.csv | 5    | 2       |\n+-----------+------+---------+\n| test1.csv | 5    | 2       |\n+-----------+------+---------+\n| test2.csv | 10   | 4       |\n+-----------+------+---------+\n| test2.csv | 10   | 4       |\n+-----------+------+---------+'''\n        self.assertEqual(expect_str, table_str)\n        pd.DataFrame().to_csv(self.test_data_dir + 'empty.csv', index=False)\n        \n    def test_directory_not_exist(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('./nonexistent_directory/')\n    def test_no_csv_files(self):\n        with self.assertRaises(ValueError):\n            empty_dir = './empty_test_data/'\n            os.makedirs(empty_dir, exist_ok=True)\n            task_func(empty_dir)\n            os.rmdir(empty_dir)\n    def test_empty_csv_file(self):\n        with self.assertRaises(pd.errors.EmptyDataError):\n            task_func(self.test_data_dir)\n    def test_file_path_in_output(self):\n        # Temporarily remove the empty CSV file\n        os.remove(self.test_data_dir + 'empty.csv')\n        table_str = task_func(self.test_data_dir)\n        for file in self.dummy_files:\n            if file != 'empty.csv':  # Skip the empty file\n                self.assertIn(file, table_str)\n        # Restore the empty CSV file\n        pd.DataFrame().to_csv(self.test_data_dir + 'empty.csv', index=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Assign each employee of a company a unique ID based on their department code, consisting of the department code, followed by a random string of 5 letters.\nThe function should output with:\n    list: A list of unique employee IDs for all departments.\nYou should write self-contained code starting with:\n```\nimport random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n```",
        "gt": "import random\nfrom string import ascii_uppercase\ndef task_func(dict1):\n    employee_ids = []\n    \n    for prefix, num_employees in dict1.items():\n        for _ in range(num_employees):\n            random_str = ''.join(random.choice(ascii_uppercase) for _ in range(5))\n            employee_ids.append(f'{prefix}{random_str}')\n\n    return employee_ids",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        random.seed(0)\n        d = {'EMP$$': 2, 'MAN$$': 2}\n        emp_ids = task_func(d)\n        self.assertEqual(len(emp_ids), 4)\n        self.assertTrue(all(id.startswith('EMP$$') or id.startswith('MAN$$') for id in emp_ids))\n        \n    def test_case_2(self):\n        random.seed(0)\n        d = {'HR$$': 3}\n        emp_ids = task_func(d)\n        self.assertEqual(len(emp_ids), 3)\n        self.assertTrue(all(id.startswith('HR$$') for id in emp_ids))\n        \n    def test_case_3(self):\n        random.seed(0)\n        d = {'DEV$$': 1, 'HR$$': 1, 'EMP$$': 1, 'MAN$$': 1}\n        emp_ids = task_func(d)\n        self.assertEqual(len(emp_ids), 4)\n        \n    def test_case_4(self):\n        random.seed(0)\n        d = {}\n        emp_ids = task_func(d)\n        self.assertEqual(len(emp_ids), 0)\n        \n    def test_case_5(self):\n        random.seed(0)\n        d = {'DEV$$': 5}\n        emp_ids = task_func(d)\n        self.assertEqual(len(emp_ids), 5)\n        self.assertTrue(all(id.startswith('DEV$$') for id in emp_ids))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw normal distributions for multiple 'x' and 'y' arrays with labels. Each pair (x, y) represents a different chemical compound in the 'labels' list.\nThe function should output with:\n    fig: Matplotlib figure object.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\ndef task_func(x, y, labels):\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        mu = np.mean(y[i])\n        sigma = np.std(y[i])\n        pdf = stats.norm.pdf(x[i], mu, sigma)\n        ax.plot(x[i], pdf, label=labels[i])\n    \n    ax.legend()\n    \n    return fig",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        x = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n        y = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n        labels = ['H\u2082O', 'O\u2082', 'CO\u2082']\n        fig = task_func(x, y, labels)\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n    def test_case_2(self):\n        x = [np.array([1,3,5]), np.array([2,4,6])]\n        y = [np.array([2,4,6]), np.array([1,3,5])]\n        labels = ['N\u2082', 'Ar']\n        fig = task_func(x, y, labels)\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n    def test_case_3(self):\n        x = [np.array([10,20,30])]\n        y = [np.array([15,25,35])]\n        labels = ['H\u2082O']\n        fig = task_func(x, y, labels)\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n    def test_case_4(self):\n        x = [np.array([5,15,25]), np.array([10,20,30]), np.array([15,25,35])]\n        y = [np.array([10,20,30]), np.array([15,25,35]), np.array([5,15,25])]\n        labels = ['H\u2082O', 'O\u2082', 'CO\u2082']\n        fig = task_func(x, y, labels)\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n    def test_case_5(self):\n        x = [np.array([2,4,8]), np.array([1,3,7])]\n        y = [np.array([1,3,7]), np.array([2,4,8])]\n        labels = ['N\u2082', 'Ar']\n        fig = task_func(x, y, labels)\n        self.assertIsInstance(fig, matplotlib.figure.Figure)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process a JSON string by: 1. Removing None values. 2. Counting the frequency of each unique value. 3. Replacing all email addresses with the placeholder \"None\".\nThe function should output with:\n    dict: A dictionary containing:\n    \"data\": Processed JSON data.\n    \"value_counts\": A Counter object with the frequency of each unique value.\nYou should write self-contained code starting with:\n```\nimport json\nimport re\nfrom collections import Counter\n# Constants\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n```",
        "gt": "import json\nimport re\nfrom collections import Counter\n# Constants\nREPLACE_NONE = \"None\"\ndef task_func(json_str):\n    data = json.loads(json_str)\n    \n    # Remove None values and replace emails\n    processed_data = {}\n    for key, value in data.items():\n        if value is None:\n            continue\n        if isinstance(value, str) and re.match(r\"[^@]+@[^@]+\\.[^@]+\", value):\n            value = REPLACE_NONE\n        processed_data[key] = value\n\n    # Count frequency of each unique value\n    value_counts = Counter(processed_data.values())\n\n    return {\"data\": processed_data, \"value_counts\": value_counts}",
        "test": "import unittest\nimport json\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_basic(self):\n        json_str = '{\"name\": \"John\", \"age\": null, \"email\": \"john@example.com\"}'\n        result = task_func(json_str)\n        expected = {'data': {'name': 'John', 'email': 'None'}, 'value_counts': Counter({'John': 1, 'None': 1})}\n        self.assertEqual(result, expected)\n    def test_multiple_none(self):\n        json_str = '{\"name\": \"John\", \"age\": null, \"city\": null, \"email\": \"john@example.com\"}'\n        result = task_func(json_str)\n        expected = {'data': {'name': 'John', 'email': 'None'}, 'value_counts': Counter({'John': 1, 'None': 1})}\n        self.assertEqual(result, expected)\n    def test_multiple_emails(self):\n        json_str = '{\"name\": \"John\", \"email1\": \"john1@example.com\", \"email2\": \"john2@example.com\"}'\n        result = task_func(json_str)\n        expected = {'data': {'name': 'John', 'email1': 'None', 'email2': 'None'}, 'value_counts': Counter({'None': 2, 'John': 1})}\n        self.assertEqual(result, expected)\n    def test_no_emails(self):\n        json_str = '{\"name\": \"John\", \"age\": 25, \"city\": \"NY\"}'\n        result = task_func(json_str)\n        expected = {'data': {'name': 'John', 'age': 25, 'city': 'NY'}, 'value_counts': Counter({'John': 1, 25: 1, 'NY': 1})}\n        self.assertEqual(result, expected)\n    def test_different_values(self):\n        json_str = '{\"name\": \"John\", \"age\": 25, \"city\": \"NY\", \"friend\": \"John\"}'\n        result = task_func(json_str)\n        expected = {'data': {'name': 'John', 'age': 25, 'city': 'NY', 'friend': 'John'}, 'value_counts': Counter({'John': 2, 25: 1, 'NY': 1})}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plot the relationship between the first and second numerical columns of an SQLite3 table, after excluding 'id' column.\nThe function should raise the exception for: ValueError: If the table has less than two numerical columns.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Scatterplot with column name labeled on their respective axes.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\ndef task_func(db_name, table_name):\n```",
        "gt": "import sqlite3\nimport pandas as pd\ndef task_func(db_name, table_name):\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_name)\n\n    # Dynamically get the first two numerical columns from the table (excluding 'id')\n    df = pd.read_sql_query(f\"SELECT * from {table_name}\", conn)\n    numerical_columns = df.select_dtypes(include=[\"float64\", \"int64\"]).columns.tolist()\n    if \"id\" in numerical_columns:\n        numerical_columns.remove(\"id\")\n    if len(numerical_columns) < 2:\n        raise ValueError(\"The table must have at least two numerical columns to plot.\")\n\n    # Plot the relationship between the two columns\n    ax = df.plot.scatter(x=numerical_columns[0], y=numerical_columns[1])\n    return ax",
        "test": "import unittest\nimport sqlite3\nimport os\nimport matplotlib.pyplot as plt\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.test_db_path = os.path.join(self.temp_dir.name, \"test.db\")\n        self.another_test_db_path = os.path.join(self.temp_dir.name, \"another_test.db\")\n        self.nonexistent_db_path = os.path.join(self.temp_dir.name, \"nonexistent.db\")\n        # Setup for 'test.db'\n        with sqlite3.connect(self.test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(\n                \"CREATE TABLE People (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, height REAL)\"\n            )\n            self.data = [\n                (\"Alice\", 25, 5.5),\n                (\"Bob\", 30, 6.0),\n                (\"Charlie\", 35, 5.8),\n                (\"David\", 40, 6.2),\n                (\"Eve\", 45, 5.9),\n                (\"Frank\", 50, 5.6),\n            ]\n            cur.executemany(\n                \"INSERT INTO People (name, age, height) VALUES (?, ?, ?)\", self.data\n            )\n        # Setup for 'another_test.db'\n        with sqlite3.connect(self.another_test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(\n                \"CREATE TABLE Animals (id INTEGER PRIMARY KEY, name TEXT, lifespan INTEGER, weight REAL)\"\n            )\n            animal_data = [\n                (\"Dog\", 13, 30.0),\n                (\"Cat\", 15, 4.5),\n                (\"Elephant\", 70, 6000.0),\n                (\"Dolphin\", 20, 150.0),\n            ]\n            cur.executemany(\n                \"INSERT INTO Animals (name, lifespan, weight) VALUES (?, ?, ?)\",\n                animal_data,\n            )\n    def tearDown(self):\n        self.temp_dir.cleanup()\n        plt.close(\"all\")\n    def test_case_1(self):\n        # Test basic functionality\n        ax = task_func(self.test_db_path, \"People\")\n        self.assertEqual(ax.get_xlabel(), \"age\")\n        self.assertEqual(ax.get_ylabel(), \"height\")\n        self.assertEqual(len(ax.collections[0].get_offsets()), 6)\n    def test_case_2(self):\n        # Test handling non-existent table\n        with self.assertRaises(Exception):\n            task_func(self.test_db_path, \"NonExistentTable\")\n    def test_case_3(self):\n        # Test handling non-existent db\n        with self.assertRaises(Exception):\n            task_func(self.nonexistent_db_path, \"People\")\n    def test_case_4(self):\n        # Table with removed numerical column should raise error\n        with sqlite3.connect(self.test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(\n                f\"CREATE TABLE temp AS SELECT id, name, age FROM People WHERE name IN ('Alice', 'Bob')\"\n            )\n            cur.execute(f\"DROP TABLE People\")\n            cur.execute(f\"ALTER TABLE temp RENAME TO People\")\n        with self.assertRaises(Exception):\n            task_func(self.test_db_path, \"People\")\n        # Revert changes\n        with sqlite3.connect(self.test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(f\"CREATE TABLE temp AS SELECT * FROM People\")\n            cur.execute(f\"DROP TABLE People\")\n            cur.execute(\n                f\"CREATE TABLE People (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, height REAL)\"\n            )\n            cur.executemany(\n                f\"INSERT INTO People (name, age, height) VALUES (?, ?, ?)\", self.data\n            )\n    def test_case_5(self):\n        # Test another set of data/db\n        ax = task_func(self.another_test_db_path, \"Animals\")\n        self.assertEqual(ax.get_xlabel(), \"lifespan\")\n        self.assertEqual(ax.get_ylabel(), \"weight\")\n        self.assertEqual(len(ax.collections[0].get_offsets()), 4)\n    def test_case_6(self):\n        # Test handling of a table with only one numerical column\n        with sqlite3.connect(self.test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(\n                \"CREATE TABLE SingleNumCol (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\"\n            )\n        with self.assertRaises(Exception):\n            task_func(self.test_db_path, \"SingleNumCol\")\n    def test_case_7(self):\n        # Test handling of a table with no numerical columns\n        with sqlite3.connect(self.test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(\n                \"CREATE TABLE NoNumCols (id INTEGER PRIMARY KEY, name TEXT, description TEXT)\"\n            )\n        with self.assertRaises(Exception):\n            task_func(self.test_db_path, \"NoNumCols\")\n    def test_case_8(self):\n        # Test a table where 'id' is the only numerical column\n        with sqlite3.connect(self.test_db_path) as conn:\n            cur = conn.cursor()\n            cur.execute(\"CREATE TABLE OnlyIDNum (id INTEGER PRIMARY KEY, name TEXT)\")\n        with self.assertRaises(Exception):\n            task_func(self.test_db_path, \"OnlyIDNum\")\n    def test_case_9(self):\n        # Test plotting when the first two numerical columns are not 'id', 'age', or 'height'\n        with sqlite3.connect(self.another_test_db_path) as conn:\n            cur = conn.cursor()\n            custom_data = [(\"Lion\", 15, 190.5), (\"Tiger\", 20, 220.0)]\n            cur.executemany(\n                \"INSERT INTO Animals (name, lifespan, weight) VALUES (?, ?, ?)\",\n                custom_data,\n            )\n        ax = task_func(self.another_test_db_path, \"Animals\")\n        self.assertEqual(ax.get_xlabel(), \"lifespan\")\n        self.assertEqual(ax.get_ylabel(), \"weight\")\n        self.assertGreaterEqual(len(ax.collections[0].get_offsets()), 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculates and plots both a given function and its cumulative integral over a specified range, using a linearly spaced range of x-values.\nNote that: The plot includes a legend and labels for the x and y axes that include the function's name.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the plots of the function and its integral.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n```",
        "gt": "import numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\ndef task_func(func, x_range=(-2, 2), num_points=1000):\n    X = np.linspace(x_range[0], x_range[1], num_points)\n    y = func(X)\n    y_int = integrate.cumulative_trapezoid(y, X, initial=0)\n\n    fig, ax = plt.subplots()\n    ax.plot(X, y, label=f\"{func.__name__}(x)\")\n    ax.plot(X, y_int, label=f\"Integral of {func.__name__}(x)\")\n    ax.legend()\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        plt.close(\"all\")\n    def helper_assert_plot_attributes(self, func):\n        # Test plot attributes are as expected\n        ax = task_func(func)\n        function_name = func.__name__\n        legend_labels = ax.get_legend_handles_labels()[-1]\n        self.assertIsInstance(ax, Axes)\n        self.assertIn(function_name, legend_labels[0])\n        self.assertIn(function_name, legend_labels[1])\n    def test_case_1(self):\n        # Test basic case in docstring\n        ax = task_func(np.sin)\n        self.helper_assert_plot_attributes(np.sin)\n    def test_case_2(self):\n        # Test other functions - numpy\n        for func in [np.cos, np.exp]:\n            ax = task_func(func)\n            self.helper_assert_plot_attributes(func)\n    def test_case_3(self):\n        # Test other functions - lambda\n        func = lambda x: x ** 2\n        ax = task_func(func)\n        self.helper_assert_plot_attributes(func)\n    def test_case_4(self):\n        # Test custom range and points\n        ax = task_func(np.cos, x_range=(0, np.pi), num_points=500)\n        self.assertEqual(len(ax.lines[0].get_xdata()), 500)\n        self.assertEqual(ax.lines[0].get_xdata()[0], 0)\n        self.assertEqual(ax.lines[0].get_xdata()[-1], np.pi)\n    def test_case_5(self):\n        # Test correct integral calculation\n        # Test integral of x^2 in the range [0,1], should be close to 1/3\n        func = lambda x: x ** 2\n        X = np.linspace(0, 1, 1000)\n        expected_integral = 1 / 3 * X ** 3  # Analytical integral of x^2\n        ax = task_func(func, x_range=(0, 1), num_points=1000)\n        computed_integral = ax.lines[1].get_ydata()[\n            -1\n        ]  # Last value of the computed integral\n        self.assertAlmostEqual(computed_integral, expected_integral[-1], places=4)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform PCA on a DataFrame (excluding non-numeric columns) and draw a scatter plot of the first two main components. The principal columns should be name 'Component 1' and 'Component 2'. Missing values are replaced by column's average.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the first two principal components. The columns should be 'principal component 1' and 'principal component 2'.\n    Axes: A matplotlib Axes object representing the scatter plot. The xlabel should be 'principal component' and the ylabel 'principal component 2'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df: pd.DataFrame):\n    # Select only numeric columns\n    df_numeric = df.select_dtypes(include=[np.number])\n    # Replace missing values\n    df_numeric = df_numeric.fillna(df_numeric.mean(axis=0))\n    # Perform PCA\n    pca = PCA(n_components=2)\n    principalComponents = pca.fit_transform(df_numeric)\n    principalDf = pd.DataFrame(\n        data=principalComponents,\n        columns=[\"Component 1\", \"Component 2\"],\n    )\n\n    # Plot scatter plot\n    ax = sns.scatterplot(data=principalDf, x=\"Component 1\", y=\"Component 2\")\n    plt.show()\n    return principalDf, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df = pd.DataFrame(\n            [[1, 2, 3], [4, 5, 6], [7.0, np.nan, 9.0]], columns=[\"c1\", \"c2\", \"c3\"]\n        )\n        principalDf, ax = task_func(df)\n        self.assertTrue(\"Component 1\" in principalDf.columns)\n        self.assertTrue(\"Component 2\" in principalDf.columns)\n        self.assertEqual(principalDf.shape, (3, 2))\n        self.assertEqual(ax.get_xlabel(), \"Component 1\")\n        self.assertEqual(ax.get_ylabel(), \"Component 2\")\n    def test_case_2(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 2.5, 3, 4.5, 5],\n                \"B\": [5, 4.5, np.nan, 2, 1.5],\n                \"C\": [2.5, 3, 4, 5.5, 6],\n                \"categoral_1\": [\"A\", \"B\", \"B\", \"B\", \"A\"],\n                \"categoral_2\": [\"0\", \"1\", \"1\", \"0\", \"1\"],\n            }\n        )\n        principalDf, ax = task_func(df)\n        self.assertTrue(\"Component 1\" in principalDf.columns)\n        self.assertTrue(\"Component 2\" in principalDf.columns)\n        self.assertEqual(principalDf.shape, (5, 2))\n        self.assertEqual(ax.get_xlabel(), \"Component 1\")\n        self.assertEqual(ax.get_ylabel(), \"Component 2\")\n    def test_case_3(self):\n        df = pd.DataFrame(\n            {\n                \"col1\": [None, 17, 11, None],\n                \"col2\": [0, 4, 15, 27],\n                \"col3\": [7, 9, 3, 8],\n            }\n        )\n        principalDf, ax = task_func(df)\n        self.assertTrue(\"Component 1\" in principalDf.columns)\n        self.assertTrue(\"Component 2\" in principalDf.columns)\n        self.assertEqual(principalDf.shape, (4, 2))\n        self.assertEqual(ax.get_xlabel(), \"Component 1\")\n        self.assertEqual(ax.get_ylabel(), \"Component 2\")\n    def test_case_4(self):\n        df = pd.DataFrame(\n            {\n                \"c1\": [np.nan] * 9 + [10],\n                \"c2\": [np.nan] * 8 + [20, 30],\n                \"c3\": [np.nan] * 7 + [40, 50, 60],\n            }\n        )\n        principalDf, ax = task_func(df)\n        self.assertTrue(\"Component 1\" in principalDf.columns)\n        self.assertTrue(\"Component 2\" in principalDf.columns)\n        self.assertEqual(principalDf.shape, (10, 2))\n        self.assertEqual(ax.get_xlabel(), \"Component 1\")\n        self.assertEqual(ax.get_ylabel(), \"Component 2\")\n    def test_case_5(self):\n        df = pd.DataFrame({\"c1\": [1] * 10, \"c2\": [2] * 10, \"c3\": [3] * 10})\n        principalDf, ax = task_func(df)\n        self.assertTrue(\"Component 1\" in principalDf.columns)\n        self.assertTrue(\"Component 2\" in principalDf.columns)\n        self.assertEqual(principalDf.shape, (10, 2))\n        self.assertEqual(ax.get_xlabel(), \"Component 1\")\n        self.assertEqual(ax.get_ylabel(), \"Component 2\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a generator object that generates a sequence of tuples. Each tuple contains x and e^x values. Plot the exponential function using these values.\nThe function should output with:\n    tuple:\n    A generator object that yields tuples of (x, e^x).\n    The plotted Axes object of the exponential function.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n```",
        "gt": "import numpy as np\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(range_start=0, range_end=10, step=0.1):\n    x_values = np.arange(range_start, range_end, step)\n    data = ((x, math.exp(x)) for x in x_values)\n    _, ax = plt.subplots()\n    for x, exp_x in data:\n        ax.scatter(x, exp_x, color='b')\n    ax.set_title(\"Exponential Function Plot\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"e^x\")\n    data = ((x, math.exp(x)) for x in x_values)\n    return data, ax",
        "test": "import unittest\nimport doctest\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        data, ax = task_func()\n        # Check the first data point\n        first_point = next(data)\n        self.assertEqual(first_point, (0.0, 1.0))\n        # Check plot title and labels\n        self.assertEqual(ax.get_title(), \"Exponential Function Plot\")\n        self.assertEqual(ax.get_xlabel(), \"x\")\n        self.assertEqual(ax.get_ylabel(), \"e^x\")\n        # Check if ax is an instance of Axes\n        self.assertIsInstance(ax, Axes)\n    # For brevity, similar test cases will be written for test_case_2 to test_case_5\n    # These will test various attributes of the plotted data and generator object.\n    def test_case_2(self):\n        data, ax = task_func(11.4, 17.9, 0.2)\n        self.assertIsInstance(ax, Axes)\n        # Check the first data point\n        first_point = next(data)\n        self.assertEqual(first_point, (11.4, math.exp(11.4)))\n    def test_case_3(self):\n        data, ax = task_func(9.6, 15.2, 0.3)\n        self.assertIsInstance(ax, Axes)\n        # Check the last data point\n        for point in data:\n            pass\n        self.assertAlmostEqual(point[0], 15.0, places=2)\n        self.assertAlmostEqual(point[1], math.exp(15.0), places=2)\n        \n    def test_case_4(self):\n        data, ax = task_func()\n        self.assertIsInstance(ax, Axes)\n        # Check the data in the axis object\n        for point in data:\n            ax.scatter(point[0], point[1], color='r')\n        self.assertEqual(len(ax.get_children()), 210)\n        \n    def test_case_5(self):\n        data, ax = task_func(89.0, 100.0, 0.1)\n        self.assertIsInstance(ax, Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a random DataFrame with 100 records. Each record consists of an ID (ranging from 1 to 100), Name (randomly selected from provided lists of Latin and other names), Date of Birth (randomly generated dates between the specified years), and Email (constructed using the name, year of birth, and provided email domain). Improperly encoded Latin characters in names are corrected during the process. >>> df = task_func(start_year=0, end_year=1200, email_domain='test.at', rng_seed=3) >>> print(df) ID      Name        Date of Birth                Email 0     1   Sopet\u00f3n  0952-09-01 00:00:00   sopet\u00f3n952@test.at 1     2     Brown  0875-10-10 00:00:00     brown875@test.at 2     3   Sopet\u00f3n  0605-08-15 00:00:00   sopet\u00f3n605@test.at 3     4     G\u00f3mez  0337-11-23 00:00:00     g\u00f3mez337@test.at 4     5     G\u00f3mez  0641-04-27 00:00:00     g\u00f3mez641@test.at ..  ...       ...                  ...                  ... 95   96     Brown  0044-05-17 00:00:00      brown44@test.at 96   97  Williams  0530-01-21 00:00:00  williams530@test.at 97   98   Johnson  1005-12-15 00:00:00  johnson1005@test.at 98   99    M\u00e9ndez  1134-07-19 00:00:00   m\u00e9ndez1134@test.at 99  100   Johnson  0696-08-22 00:00:00   johnson696@test.at <BLANKLINE> [100 rows x 4 columns]\nThe function should output with:\n    DataFrame: A pandas DataFrame containing the generated user data. The DataFrame has columns:\n    'ID', 'Name', 'Date of Birth', and 'Email'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \n    # Correcting the encoding for Latin names\n    latin_names = [codecs.encode(name, 'utf-8').decode('utf-8') for name in latin_names]\n    \n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n\n    data = []\n    for i in range(1, 101):\n        is_latin = np.random.choice([True, False])\n        name = np.random.choice(latin_names) if is_latin else np.random.choice(other_names)\n        birth_year = np.random.randint(start_year, end_year + 1)\n        dob = datetime.datetime(birth_year, np.random.randint(1, 13), np.random.randint(1, 29))\n        # Creating the email by removing spaces in names, converting to lowercase, and appending details\n        email = re.sub(r'\\s+', '.', name.lower()) + str(birth_year) + '@' + email_domain\n        data.append([i, name, dob, email])\n\n    df = pd.DataFrame(data, columns=['ID', 'Name', 'Date of Birth', 'Email'])\n\n    return df",
        "test": "import unittest\nfrom pandas import DataFrame\nimport datetime\nclass TestCases(unittest.TestCase):\n    def test_dataframe_structure(self):\n        # Testing the correct structure of the returned DataFrame\n        df = task_func(rng_seed=1)\n        self.assertIsInstance(df, DataFrame)\n        self.assertEqual(list(df.columns), ['ID', 'Name', 'Date of Birth', 'Email'])\n        self.assertEqual(len(df), 100)\n    def test_randomness_and_encoding(self):\n        # Testing the randomness of names and proper encoding of Latin names\n        df = task_func(latin_names=['M\u00e9ndez', 'G\u00f3mez'], other_names=['Smith', 'Doe'], rng_seed=1)\n        self.assertTrue(all(name in ['M\u00e9ndez', 'G\u00f3mez', 'Smith', 'Doe'] for name in df['Name']))\n        self.assertTrue(all('@example.com' in email for email in df['Email']))\n    def test_custom_parameters(self):\n        # Testing the function with custom start and end years, and a custom email domain\n        start_year = 1990\n        end_year = 1995\n        email_domain = 'test.com'\n        df = task_func(start_year=start_year, end_year=end_year, email_domain=email_domain, rng_seed=1)\n        self.assertTrue(all(email.endswith('@' + email_domain) for email in df['Email']))\n        self.assertTrue(all(start_year <= dob.year <= end_year for dob in df['Date of Birth']))\n    def test_invalid_year_range(self):\n        # Testing the function's behavior when provided an invalid year range\n        with self.assertRaises(ValueError):\n            task_func(start_year=2005, end_year=2000, rng_seed=1)\n    def test_empty_name_lists(self):\n        # Testing the function's behavior when provided empty name lists\n        with self.assertRaises(ValueError):\n            task_func(latin_names=[], other_names=[], rng_seed=1)\n    def test_rng(self):\n        'test rng reproducability'\n        df1 = task_func(rng_seed=1)\n        df2 = task_func(rng_seed=1)\n        pd.testing.assert_frame_equal(df1, df2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the occurrence of each adjacent pair of letters from left to right in a word and encode the result as an MD5 hash.\nThe function should output with:\n    dict: A dictionary where keys are adjacent letter pairs and values are their counts.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n```",
        "gt": "from collections import Counter\nimport hashlib\ndef task_func(word: str) -> dict:\n    pairs = list(map(''.join, zip(word[:-1], word[1:])))\n    pairs_count = dict(Counter(pairs))\n    # encode the dictionary as a string and return its hash\n    return hashlib.md5(str(pairs_count).encode()).hexdigest()",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with the word 'abracadabra'\n        result = task_func('abracadabra')\n        expected = 'bc9af285d87b312e61ab3661e66b741b'\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        # Test with the word 'hello'\n        result = task_func('hello')\n        expected = 'dd5dec1a853625e2dc48f3d42665c337'\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        # Test with the word 'python'\n        result = task_func('python')\n        expected = '2ef1af06ae4aa496eaa8e963bde5514e'\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        # Test with an empty string\n        result = task_func('')\n        expected = '99914b932bd37a50b983c5e7c90ae93b'\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        # Test with a single character string\n        result = task_func('a')\n        expected = '99914b932bd37a50b983c5e7c90ae93b'\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a plot of random numbers such that indices are on the x-axis and generated numbers are on the y-axis.\nThe function should output with:\n    Returns a tuple containing:\n    A list of generated random numbers.\n    A matplotlib Axes object representing the plot.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n```",
        "gt": "import random\nimport matplotlib.pyplot as plt\ndef task_func(points: int):\n    x = list(range(points))\n    y = [random.random() for _ in range(points)]\n\n    _, ax = plt.subplots()\n    ax.plot(x, y)\n\n    return y, ax",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        random.seed(0)\n        y, _ = task_func(5)\n        # Test correct number of points are generated\n        self.assertEqual(len(y), 5)\n    def test_case_2(self):\n        random.seed(0)\n        y, _ = task_func(5)\n        # Test expected values\n        self.assertTrue(all(0 <= num <= 1 for num in y))\n        self.assertAlmostEqual(\n            y,\n            [\n                0.8444218515250481,\n                0.7579544029403025,\n                0.420571580830845,\n                0.25891675029296335,\n                0.5112747213686085,\n            ],\n        )\n    def test_case_3(self):\n        random.seed(0)\n        # Test incorrect data types\n        with self.assertRaises(TypeError):\n            task_func(\"5\")\n        with self.assertRaises(TypeError):\n            task_func([])\n        with self.assertRaises(TypeError):\n            task_func(None)\n    def test_case_4(self):\n        random.seed(0)\n        # Test handling 1 number\n        y, ax = task_func(1)\n        # Assert that 1 random number is generated\n        self.assertEqual(len(y), 1)\n        # Assert that the plot has the correct x and y data\n        self.assertEqual(list(ax.lines[0].get_xdata()), [0])\n        self.assertEqual(list(ax.lines[0].get_ydata()), y)\n    def test_case_5(self):\n        random.seed(0)\n        # Test handling no random numbers\n        y, ax = task_func(0)\n        self.assertEqual(len(y), 0)\n        # Assert that the plot has no data\n        self.assertEqual(list(ax.lines[0].get_xdata()), [])\n        self.assertEqual(list(ax.lines[0].get_ydata()), [])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Tokenizes a text file using the NLTK library. This function reads each line from the file, breaks it into words or punctuation, and stores the tokens in a list.\nThe function should output with:\n    list: A list of tokens.\nYou should write self-contained code starting with:\n```\nimport os\nfrom nltk import word_tokenize\ndef task_func(file_path='File.txt'):\n```",
        "gt": "import os\nfrom nltk import word_tokenize\ndef task_func(file_path='File.txt'):\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n    \n    tokens = []\n\n    with open(file_path, 'r') as file:\n        for line in file:\n            tokens.extend(word_tokenize(line))\n\n    return tokens",
        "test": "import unittest\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'testdir_task_func'\n        os.makedirs(self.test_dir, exist_ok=True)\n        \n        f = open(self.test_dir+\"/sample1.txt\",\"w\")\n        f.write(\"Hello, world!\")\n        f.close()\n        f = open(self.test_dir+\"/sample2.txt\",\"w\")\n        f.write(\"The quick brown fox jumps over the lazy dog .\")\n        f.close()\n        f = open(self.test_dir+\"/sample3.txt\",\"w\")\n        f.write(\"NLTK is a leading platform for building Python programs to work with human language data.\")\n        f.close()\n        f = open(self.test_dir+\"/sample4.txt\",\"w\")\n        f.write(\"OpenAI is an organization focused on    ensuring that artificial general intelligence benefits all   of humanity    .\")\n        f.close()\n        \n        \n        f = open(self.test_dir+\"/sample5.txt\",\"w\")\n        f.write(\"Python is an interpreted, high-level , general-purpose programming language.\")\n        f.close()\n        \n    def tearDown(self):\n        # Clean up the test directory\n        shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        tokens = task_func(self.test_dir+'/sample1.txt')\n        self.assertEqual(tokens, ['Hello', ',', 'world', '!'])\n    def test_case_2(self):\n        tokens = task_func(self.test_dir+'/sample2.txt')\n        self.assertEqual(tokens, ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog', '.'])\n    def test_case_3(self):\n        tokens = task_func(self.test_dir+'/sample3.txt')\n        self.assertEqual(tokens, ['NLTK', 'is', 'a', 'leading', 'platform', 'for', 'building', 'Python', 'programs', 'to', 'work', 'with', 'human', 'language', 'data', '.'])\n    def test_case_4(self):\n        tokens = task_func(self.test_dir+'/sample4.txt')\n        self.assertEqual(tokens, ['OpenAI', 'is', 'an', 'organization', 'focused', 'on', 'ensuring', 'that', 'artificial', 'general', 'intelligence', 'benefits', 'all', 'of', 'humanity', '.'])\n    def test_case_5(self):\n        tokens = task_func(self.test_dir+'/sample5.txt')\n        self.assertEqual(tokens, ['Python', 'is', 'an', 'interpreted', ',', 'high-level', ',', 'general-purpose', 'programming', 'language', '.'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Clean the specified text by removing URLs, stopwords, and punctuation.\nThe function should output with:\n    str: The cleaned text with URLs, predefined stopwords, and punctuation removed.\nYou should write self-contained code starting with:\n```\nimport re\nfrom string import punctuation\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n```",
        "gt": "import re\nfrom string import punctuation\n# Predefined list of common stopwords\nPREDEFINED_STOPWORDS = {\n    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \n    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \n    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \n    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\", \n    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \n    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \n    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \n    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"more\"\n}\ndef task_func(text):\n    # Constants\n    PUNCTUATION = set(punctuation)\n\n    # Remove URLs\n    text = re.sub('http[s]?://\\S+', '', text)\n\n    # Remove punctuation\n    text = re.sub('[{}]'.format(re.escape(''.join(PUNCTUATION))), '', text)\n\n    # Tokenize the text\n    words = text.split()\n\n    # Remove stopwords\n    cleaned_words = [word for word in words if word.lower() not in PREDEFINED_STOPWORDS]\n\n    return ' '.join(cleaned_words)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        input_text = 'Visit https://www.python.org for more info. I love to eat apples and oranges!'\n        expected_output = 'Visit info love eat apples oranges'\n        result = task_func(input_text)\n        self.assertEqual(result, expected_output)\n    def test_case_2(self):\n        input_text = 'Check out https://www.google.com and also https://www.openai.com'\n        expected_output = 'Check also'\n        result = task_func(input_text)\n        self.assertEqual(result, expected_output)\n    def test_case_3(self):\n        input_text = 'Hello, world! How are you today?'\n        expected_output = 'Hello world How today'\n        result = task_func(input_text)\n        self.assertEqual(result, expected_output)\n    def test_case_4(self):\n        input_text = 'Machine learning AI'\n        expected_output = 'Machine learning AI'\n        result = task_func(input_text)\n        self.assertEqual(result, expected_output)\n    def test_case_5(self):\n        input_text = ''\n        expected_output = ''\n        result = task_func(input_text)\n        self.assertEqual(result, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Combine a list of dictionaries with the same keys (fruit names) into a single dictionary, calculate the total turnover for each fruit, and return a bar chart's axes with colors representing different fruits. The colors are selected from: 'red', 'yellow', 'green', 'blue', 'purple'. The function ensures that sales quantity must not be negative, throwing a ValueError if encountered.\nThe function should output with:\n    total_sales (dict): A dictionary containing the total sales for each fruit.\n    ax (matplotlib.container.BarContainer): A bar chart of total fruit sales, or None if data is empty\nYou should write self-contained code starting with:\n```\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return dict(), None\n\n    all_keys = set().union(*data)\n    for d in data:\n        for k, v in d.items():\n            if v < 0:\n                raise ValueError(\"Sales quantity must not be negative.\")\n\n    combined_dict = dict((k, [d.get(k, 0) for d in data]) for k in all_keys)\n    total_sales = {k: sum(v) for k, v in combined_dict.items()}\n    total_sales = dict(collections.OrderedDict(sorted(total_sales.items())))\n    labels, values = zip(*total_sales.items())\n\n    # Define colors dynamically to handle different numbers of fruit types\n    colors = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\"] * (len(labels) // 5 + 1)\n\n    ax = plt.bar(labels, values, color=colors[: len(labels)])\n    plt.xlabel(\"Fruit\")\n    plt.ylabel(\"Total Sales\")\n    plt.title(\"Total Fruit Sales\")\n\n    return total_sales, ax",
        "test": "import unittest\nimport collections\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case with one fruit\n        data = [{\"apple\": 5}, {\"apple\": 7}, {\"apple\": 3}]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 15}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_2(self):\n        # Test basic case with multiple fruits\n        data = [\n            {\"apple\": 10, \"banana\": 15, \"cherry\": 12, \"date\": 10},\n            {\"apple\": 12, \"banana\": 20, \"cherry\": 14, \"date\": 9},\n            {\"apple\": 15, \"banana\": 18, \"cherry\": 15, \"date\": 8},\n            {\"apple\": 11, \"banana\": 17, \"cherry\": 13, \"date\": 7},\n        ]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 48, \"banana\": 70, \"cherry\": 54, \"date\": 34}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_3(self):\n        # Test basic case with one entry per fruit\n        data = [{\"apple\": 1}, {\"banana\": 2}, {\"cherry\": 3}]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 1, \"banana\": 2, \"cherry\": 3}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_4(self):\n        # Test zero quantities\n        data = [\n            {\"apple\": 0, \"banana\": 0},\n            {\"apple\": 0, \"banana\": 0},\n            {\"apple\": 0, \"banana\": 0},\n        ]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 0, \"banana\": 0}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_5(self):\n        # Test empty data\n        data = []\n        sales, _ = task_func(data)\n        expected_sales = {}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_6(self):\n        # Test missing fruit\n        data = [{\"apple\": 10, \"banana\": 5}, {\"banana\": 15, \"cherry\": 7}, {\"cherry\": 3}]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 10, \"banana\": 20, \"cherry\": 10}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_7(self):\n        # Test negative sales\n        data = [{\"apple\": -10, \"banana\": 15}, {\"apple\": 12, \"banana\": -20}]\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_case_8(self):\n        # Test large values\n        data = [\n            {\"apple\": 1000000, \"banana\": 500000},\n            {\"apple\": 2000000, \"banana\": 1500000},\n        ]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 3000000, \"banana\": 2000000}\n        self.assertDictEqual(sales, expected_sales)\n    def test_case_9(self):\n        # Test visualization\n        data = [{\"apple\": 10, \"banana\": 15}, {\"banana\": 5, \"apple\": 10}]\n        _, plot = task_func(data)\n        self.assertEqual(\n            len(plot.patches), 2\n        )  # Checking if the number of bars in the plot is correct\n    def test_case_10(self):\n        # Test non-string keys\n        data = [{5: 10, \"banana\": 15}, {\"banana\": 5, 5: 10}]\n        with self.assertRaises(TypeError):\n            task_func(data)\n    def test_case_11(self):\n        # Test mixed types in sales\n        data = [{\"apple\": 10.5, \"banana\": 15}, {\"apple\": 12, \"banana\": 20.5}]\n        sales, _ = task_func(data)\n        expected_sales = {\"apple\": 22.5, \"banana\": 35.5}\n        self.assertDictEqual(sales, expected_sales)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scans a specified directory for JSON files and copies them to a backup directory. If the backup directory does not exist, it is created. The function returns a list of paths to the copied files in the backup directory.\nNote that: The function assumes that the source directory exists and contains JSON files.\nThe function should output with:\n    list: Paths to the copied JSON files in the backup directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(directory, backup_directory):\n```",
        "gt": "import os\nimport shutil\ndef task_func(directory, backup_directory):\n    copied_files = []\n\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            src = os.path.join(directory, filename)\n            dst = os.path.join(backup_directory, filename)\n            shutil.copy(src, dst)\n            copied_files.append(dst)\n\n    return copied_files",
        "test": "import unittest\nimport tempfile\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup temporary directories for the test\n        self.directory = tempfile.mkdtemp()\n        self.backup_directory = tempfile.mkdtemp()\n    def tearDown(self):\n        # Only attempt to remove the directories if they still exist\n        if os.path.exists(self.directory):\n            shutil.rmtree(self.directory)\n        if os.path.exists(self.backup_directory):\n            shutil.rmtree(self.backup_directory)\n    def test_backup_directory_creation(self):\n        \"\"\" Test that the backup directory is created if it does not exist. \"\"\"\n        shutil.rmtree(self.backup_directory)  # Ensure the backup directory does not exist\n        task_func(self.directory, self.backup_directory)\n        self.assertTrue(os.path.exists(self.backup_directory))\n    def test_file_copying(self):\n        \"\"\" Test that files are correctly copied to the backup directory. \"\"\"\n        # Create a test JSON file in the source directory\n        test_file = os.path.join(self.directory, 'test1.json')\n        with open(test_file, 'w') as f:\n            f.write('{\"test\": \"data\"}')\n        task_func(self.directory, self.backup_directory)\n        copied_file = os.path.join(self.backup_directory, 'test1.json')\n        self.assertTrue(os.path.exists(copied_file))\n    def test_json_file_selection(self):\n        \"\"\" Test that only JSON files are selected for copying. \"\"\"\n        # Create both JSON and non-JSON files\n        json_file = os.path.join(self.directory, 'test1.json')\n        txt_file = os.path.join(self.directory, 'test2.txt')\n        with open(json_file, 'w') as f:\n            f.write('{\"test\": \"data\"}')\n        with open(txt_file, 'w') as f:\n            f.write(\"some text\")\n        result = task_func(self.directory, self.backup_directory)\n        self.assertEqual(len(result), 1)  # Only one JSON file should be copied\n        self.assertTrue('test1.json' in result[0])\n    def test_handling_nonexistent_directory(self):\n        \"\"\" Test the function's behavior with a non-existent source directory. \"\"\"\n        shutil.rmtree(self.directory)  # Remove the source directory to simulate non-existence\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.directory, self.backup_directory)  # This should raise FileNotFoundError\n    def test_return_type(self):\n        \"\"\" Test that the function returns a list. \"\"\"\n        result = task_func(self.directory, self.backup_directory)\n        self.assertIsInstance(result, list)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a hex string to bytes, salts it with a random value of specified size, and computes its SHA256 hash. The function generates a random salt of the specified size, appends it to the byte representation of the hex string, and then computes the SHA256 hash of the salted data. The salt and hash are returned as a tuple.\nThe function should output with:\n    tuple: A tuple containing the base64-encoded salt and the SHA256 hash.\nYou should write self-contained code starting with:\n```\nimport base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n```",
        "gt": "import base64\nimport binascii\nimport os\nimport hashlib\ndef task_func(hex_str, salt_size):\n    salt = os.urandom(salt_size)\n    data = binascii.unhexlify(hex_str.replace('\\\\x', ''))\n    salted_data = salt + data\n    hash_value = hashlib.sha256(salted_data).hexdigest()\n\n    return (base64.b64encode(salt).decode('utf-8'), hash_value)",
        "test": "import unittest\nfrom unittest.mock import patch\nimport os\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\" Test that the function returns a tuple. \"\"\"\n        result = task_func(\"F3BE8080\", 16)\n        self.assertIsInstance(result, tuple)\n    def test_salt_and_hash_length(self):\n        \"\"\" Test the length of the salt and hash. \"\"\"\n        salt, hash_value = task_func(\"F3BE8080\", 16)\n        self.assertEqual(len(salt), 24)  # Base64 encoded 16-byte salt\n        self.assertEqual(len(hash_value), 64)  # Length of SHA256 hash\n    def test_hash_changes_with_input(self):\n        \"\"\" Test that different inputs produce different hashes. \"\"\"\n        _, hash1 = task_func(\"F3BE8080\", 16)\n        _, hash2 = task_func(\"F4BE8080\", 16)\n        self.assertNotEqual(hash1, hash2)\n    def test_various_hex_formats(self):\n        \"\"\" Test the function with various hex string formats. \"\"\"\n        _, hash1 = task_func(\"F3BE8080\", 16)\n        _, hash2 = task_func(\"f3be8080\", 16)  # Lowercase\n        _, hash3 = task_func(\"\\\\xF3\\\\xBE\\\\x80\\\\x80\", 16)  # With escape sequences\n        self.assertNotEqual(hash1, hash2)\n        self.assertNotEqual(hash1, hash3)\n    @patch('os.urandom', return_value=os.urandom(16))\n    def test_urandom_called_with_salt_size(self, mock_urandom):\n        \"\"\" Test that os.urandom is called with the correct salt size. \"\"\"\n        task_func(\"F3BE8080\", 16)\n        mock_urandom.assert_called_once_with(16)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract an API endpoint from the input string, send a GET request to the endpoint, and return the response data in JSON format.\nThe function should output with:\n    dict: The response data.\nYou should write self-contained code starting with:\n```\nimport re\nimport requests\ndef task_func(input):\n```",
        "gt": "import re\nimport requests\ndef task_func(input):\n\n    endpoint = re.search(r'https?:\\/\\/[^ ]+', input).group()\n\n    response = requests.get(endpoint)\n\n    return response.json()",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_case_1(self, mock_get):\n        # Mock the API response\n        mock_response = Mock()\n        mock_response.json.return_value = {\"key\": \"value\"}\n        mock_get.return_value = mock_response\n        \n        # Test\n        result = task_func('Fetch data from https://api.example.com/data')\n        self.assertEqual(result, {\"key\": \"value\"})\n    @patch('requests.get')\n    def test_case_2(self, mock_get):\n        # Mock the API response\n        mock_response = Mock()\n        mock_response.json.return_value = {\"data\": [1, 2, 3]}\n        mock_get.return_value = mock_response\n        \n        # Test\n        result = task_func('Get numbers from https://api.example.com/numbers')\n        self.assertEqual(result, {\"data\": [1, 2, 3]})\n    @patch('requests.get')\n    def test_case_3(self, mock_get):\n        # Mock the API response\n        mock_response = Mock()\n        mock_response.json.return_value = {}\n        mock_get.return_value = mock_response\n        \n        # Test\n        result = task_func('Fetch empty data from https://api.example.com/empty')\n        self.assertEqual(result, {})\n    @patch('requests.get')\n    def test_case_4(self, mock_get):\n        # Mock the API response\n        mock_response = Mock()\n        mock_response.json.return_value = {\"status\": \"OK\"}\n        mock_get.return_value = mock_response\n        \n        # Test\n        result = task_func('Check status from https://api.example.com/status')\n        self.assertEqual(result, {\"status\": \"OK\"})\n    @patch('requests.get')\n    def test_case_5(self, mock_get):\n        # Mock the API response\n        mock_response = Mock()\n        mock_response.json.return_value = {\"users\": [\"Alice\", \"Bob\", \"Charlie\"]}\n        mock_get.return_value = mock_response\n        \n        # Test\n        result = task_func('List users from https://api.example.com/users')\n        self.assertEqual(result, {\"users\": [\"Alice\", \"Bob\", \"Charlie\"]})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate synthetic data using a simple regression model, fit a linear regression model to the data, and return the predicted values along with the coefficients and intercept of the model.\nThe function should output with:\n    tuple: A tuple containing:\n    predictions (numpy.ndarray): The predicted values of the test set.\n    coefficients (numpy.ndarray): Coefficients of the linear regression model.\n    intercept (float): Intercept of the linear regression model.\n    mse (float): Mean squared error of the model predictions.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n```",
        "gt": "import numpy as np\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(n_samples=100, n_features=10, random_seed=None):\n    # Generate synthetic data\n    X, y = datasets.make_regression(\n        n_samples=n_samples, n_features=n_features, noise=0.1, random_state=random_seed\n    )\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=random_seed\n    )\n\n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Make predictions on the test set\n    predictions = model.predict(X_test)\n    coefficients = model.coef_\n    intercept = model.intercept_\n\n    mse = np.mean((predictions - y_test) ** 2)\n    return predictions, coefficients, intercept, mse",
        "test": "import unittest\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom numpy.testing import assert_array_equal\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def generate_data(self, n_samples, n_features, random_seed=None):\n        # Generate data for testing\n        X, y = datasets.make_regression(\n            n_samples=n_samples,\n            n_features=n_features,\n            noise=0.1,\n            random_state=random_seed,\n        )\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, test_size=0.2, random_state=random_seed\n        )\n        return X_train, X_test, y_train, y_test\n    def test_case_1(self):\n        # Basic test for different inputs\n        random_seed = 1\n        for n_samples, n_features in [\n            [100, 5],\n            [500, 8],\n            [1000, 10],\n            [5000, 15],\n            [10000, 20],\n        ]:\n            predictions, _, _, mse = task_func(n_samples, n_features, random_seed=random_seed)\n            _, _, _, y = self.generate_data(\n                n_samples, n_features, random_seed=random_seed\n            )\n            self.assertEqual(mse, mean_squared_error(y, predictions))\n    def test_case_2(self):\n        # Test default parameters\n        predictions, coefficients, intercept, mse = task_func(random_seed=42)\n        self.assertEqual(\n            predictions.shape[0], 20\n        )  # Default split leaves 20% of 100 samples for testing\n        self.assertEqual(coefficients.shape[0], 10)  # Default number of features\n        self.assertIsInstance(intercept, float)\n        _, _, _, y = self.generate_data(\n                100, 10, 42\n            )\n        self.assertEqual(mse, mean_squared_error(y, predictions))\n    def test_case_3(self):\n        # Test different random seeds for reproducibility\n        _, coefficients_1, intercept_1, mse_1 = task_func(random_seed=1)\n        _, coefficients_2, intercept_2, mse_2 = task_func(random_seed=2)\n        with self.assertRaises(AssertionError):\n            assert_array_equal(coefficients_1, coefficients_2)\n            self.assertEqual(intercept_1, intercept_2)\n            \n    def test_case_4(self):\n        # Test zero and negative samples and features\n        with self.assertRaises(ValueError):\n            task_func(n_samples=0, n_features=10)\n        with self.assertRaises(ValueError):\n            task_func(n_samples=100, n_features=0)\n        with self.assertRaises(ValueError):\n            task_func(n_samples=-100, n_features=10)\n        with self.assertRaises(ValueError):\n            task_func(n_samples=100, n_features=-10)\n    def test_case_5(self):\n        # Test extreme values for parameters\n        predictions, _, _, mse = task_func(n_samples=100000, n_features=100, random_seed=42)\n        self.assertEqual(\n            predictions.shape[0], 20000\n        )  # 20% of 100000 samples for testing\n        self.assertAlmostEqual(mse, 0.010142327812255192, places=4)\n        \n    def test_case_6(self):\n        # Test output shapes\n        predictions, coefficients, _, mse = task_func(\n            n_samples=100, n_features=5, random_seed=42\n        )\n        self.assertEqual(predictions.shape[0], 20)\n        self.assertEqual(coefficients.shape[0], 5)\n    def test_case_7(self):\n        # Test output types\n        predictions, coefficients, intercept, mse = task_func()\n        self.assertIsInstance(predictions, np.ndarray)\n        self.assertIsInstance(coefficients, np.ndarray)\n        self.assertIsInstance(intercept, float)\n        self.assertIsInstance(mse, float)\n        \n    def test_case_8(self):\n        # Test determinism with the same random seed\n        predictions_1, _, _, mse_1 = task_func(random_seed=42)\n        predictions_2, _, _, mse_2 = task_func(random_seed=42)\n        assert_array_equal(predictions_1, predictions_2)\n        self.assertEqual(mse_1, mse_2)\n        \n    def test_case_9(self):\n        # Test without random seed (non-deterministic outcomes)\n        predictions_1, _, _, _ = task_func()\n        predictions_2, _, _, _ = task_func()\n        with self.assertRaises(AssertionError):\n            assert_array_equal(predictions_1, predictions_2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the total number of goals and penalties from a CSV file and update it with the given goals and penalties.\nThe function should output with:\n    count (Counter.collections): A Counter object with total counts of goals and penalties.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom collections import Counter\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n```",
        "gt": "import csv\nimport os\nfrom collections import Counter\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    counts = Counter({'goals': 0, 'penalties': 0})\n\n    if os.path.exists(csv_file_path):\n        with open(csv_file_path, 'r') as file:\n            reader = csv.DictReader(file)\n            for row in reader:\n                counts['goals'] += int(row.get('goals', 0))\n                counts['penalties'] += int(row.get('penalties', 0))\n\n    for team, team_goals in goals.items():\n        counts['goals'] += team_goals\n\n    for team, team_penalties in penalties.items():\n        counts['penalties'] += team_penalties\n\n    return counts",
        "test": "import unittest\nfrom collections import Counter\nimport os\nimport csv\nfrom unittest.mock import mock_open, patch\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        \"\"\"\n        Test Case 1:\n        Test with no existing CSV file and empty dictionaries.\n        Expected result: {'goals': 0, 'penalties': 0}\n        \"\"\"\n        goals = {}\n        penalties = {}\n        result = task_func(goals, penalties)\n        expected_result = Counter({'goals': 0, 'penalties': 0})\n        self.assertEqual(result, expected_result, \"Test Case 1 Failed\")\n    def test_case_2(self):\n        \"\"\"\n        Test Case 2:\n        Test with existing CSV file and non-empty dictionaries.\n        \"\"\"\n        goals = {'Team A': 3, 'Team B': 2}\n        penalties = {'Team A': 1, 'Team C': 2}\n        result = task_func(goals, penalties)\n        expected_result = Counter({'goals': 5, 'penalties': 3})  # Update this based on correct input data\n        self.assertEqual(result, expected_result, \"Test Case 2 Failed\")\n    def test_case_3(self):\n        \"\"\"\n        Test Case 3:\n        Test with existing CSV file and empty dictionaries.\n        \"\"\"\n        goals = {}\n        penalties = {}\n        result = task_func(goals, penalties)\n        expected_result = Counter({'goals': 0, 'penalties': 0})\n        self.assertEqual(result, expected_result, \"Test Case 3 Failed\")\n    def test_case_4(self):\n        \"\"\"\n        Test Case 4:\n        Test with no existing CSV file and non-empty dictionaries.\n        Expected result: {'goals': 5, 'penalties': 3}\n        \"\"\"\n        goals = {'Team A': 2, 'Team B': 3}\n        penalties = {'Team A': 1, 'Team C': 2}\n        result = task_func(goals, penalties)\n        expected_result = {'goals': 5, 'penalties': 3}\n        self.assertEqual(result, expected_result, \"Test Case 4 Failed\")\n    def test_case_5(self):\n        \"\"\"\n        Test Case 5:\n        Test with existing CSV file, non-empty dictionaries, and negative values.\n        \"\"\"\n        goals = {'Team A': -2, 'Team B': 3}\n        penalties = {'Team A': 1, 'Team C': -2}\n        result = task_func(goals, penalties)\n        expected_result = Counter({'goals': 1, 'penalties': -1})\n        self.assertEqual(result, expected_result, \"Test Case 5 Failed\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean, median, min, max, and standard deviation of the \"from_user\" values in \"result\" and add the current date and time in the format YYYY-mm-dd HHL:MM:SS to the summary. The global constant DATE_FORMAT is used to transform the currnet date and time into this format. Data Structures: - Uses numpy arrays for efficient statistical computations.\nThe function should raise the exception for: ValueError: If the \"from_user\" values are not numeric.\nThe function should output with:\n    Series: A pandas Series with the statistical summary, including 'mean', 'median', 'min', 'max', 'std', and 'current_time'.\n    If the input contains no \"from_user\" values all statistical values are set to np.nan\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n# Constants\nDATE_FORMAT = '%Y-%m-%d %H:%M:%S'\ndef task_func(result):\n    from_user_values = np.array([d['from_user'] for d in result if 'from_user' in d])\n    # Handle edge case of empty array\n    if len(from_user_values) == 0:\n        summary = {\n            'mean': np.nan,\n            'median': np.nan,\n            'min': np.nan,\n            'max': np.nan,\n            'std': np.nan,\n            'current_time': datetime.now().strftime(DATE_FORMAT)\n        }\n    \n    elif not np.issubdtype(from_user_values.dtype, np.number):\n         raise ValueError(\"from_user values should be numeric only.\")\n\n\n    else:\n        summary = {\n            'mean': np.mean(from_user_values),\n            'median': np.median(from_user_values),\n            'min': np.min(from_user_values),\n            'max': np.max(from_user_values),\n            'std': np.std(from_user_values),\n            'current_time': datetime.now().strftime(DATE_FORMAT)\n        }\n\n    summary_series = pd.Series(summary)\n    return summary_series",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_non_numeric(self):\n        result = [{'from_user': 'a'}, {'from_user': 1}]\n        self.assertRaises(Exception, task_func, result)\n    def test_case_1(self):\n        result = [{\"hi\": 7, \"bye\": 4, \"from_user\": 0}, {\"from_user\": 0}, {\"from_user\": 1}]\n        summary = task_func(result)\n        current_time = datetime.now().strftime(DATE_FORMAT)[:-3]\n        self.assertEqual(summary['current_time'][:-3], current_time)\n        self.assertAlmostEqual(summary['mean'], 0.333333, places=5)\n        self.assertEqual(summary['median'], 0.0)\n        self.assertEqual(summary['min'], 0.0)\n        self.assertEqual(summary['max'], 1.0)\n        self.assertAlmostEqual(summary['std'], 0.471405, places=5)\n    def test_case_2(self):\n        result = [{\"from_user\": 1}, {\"from_user\": 2}, {\"from_user\": 3}]\n        summary = task_func(result)\n        current_time = datetime.now().strftime(DATE_FORMAT)[:-3]\n        self.assertEqual(summary['current_time'][:-3], current_time)\n        self.assertEqual(summary['mean'], 2.0)\n        self.assertEqual(summary['median'], 2.0)\n        self.assertEqual(summary['min'], 1.0)\n        self.assertEqual(summary['max'], 3.0)\n        self.assertAlmostEqual(summary['std'], 0.816497, places=5)\n    def test_case_3(self):\n        result = [{\"from_user\": 5}]\n        summary = task_func(result)\n        current_time = datetime.now().strftime(DATE_FORMAT)[:-3]\n        self.assertEqual(summary['current_time'][:-3], current_time)\n        self.assertEqual(summary['mean'], 5.0)\n        self.assertEqual(summary['median'], 5.0)\n        self.assertEqual(summary['min'], 5.0)\n        self.assertEqual(summary['max'], 5.0)\n        self.assertEqual(summary['std'], 0.0)\n    def test_case_4(self):\n        result = [{\"hello\": 2}, {\"world\": 3}]\n        summary = task_func(result)\n        current_time = datetime.now().strftime(DATE_FORMAT)[:-3]\n        self.assertEqual(summary['current_time'][:-3], current_time)\n        self.assertTrue(np.isnan(summary['mean']))\n        self.assertTrue(np.isnan(summary['median']))\n        self.assertTrue(np.isnan(summary['min']))\n        self.assertTrue(np.isnan(summary['max']))\n        self.assertTrue(np.isnan(summary['std']))\n    def test_case_5(self):\n        'empty list'\n        result = []\n        summary = task_func(result)\n        current_time = datetime.now().strftime(DATE_FORMAT)[:-3]\n        self.assertEqual(summary['current_time'][:-3], current_time)\n        self.assertTrue(np.isnan(summary['mean']))\n        self.assertTrue(np.isnan(summary['median']))\n        self.assertTrue(np.isnan(summary['min']))\n        self.assertTrue(np.isnan(summary['max']))\n        self.assertTrue(np.isnan(summary['std']))\n    \n    \n    def test_case_6(self):\n        'float'\n        result = [{\"hi\": 7, \"bye\": 4, \"from_user\": 0.3},\n                  {\"from_user\": 0.1},\n                  {\"from_user\": 15.6},\n                  {\"from_user\": -2.3},\n                  {\"from_user\": 12.12},\n                  {\"from_user\": -25.234},\n                  {\"from_user\": 124.2},\n                  ]\n        summary = task_func(result)\n        current_time = datetime.now().strftime(DATE_FORMAT)[:-3]\n        self.assertEqual(summary['current_time'][:-3], current_time)\n        self.assertAlmostEqual(summary['mean'], 17.826571, places=5)\n        self.assertEqual(summary['median'], 0.3)\n        self.assertEqual(summary['min'], -25.234)\n        self.assertEqual(summary['max'], 124.2)\n        self.assertAlmostEqual(summary['std'], 45.092813, places=5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the best-selling product from a given CSV file with sales data. This function parses a CSV file assumed to have a header followed by rows containing two columns: 'product' and 'quantity'. It computes the total sales per product and determines the product with the highest cumulative sales. The CSV file must include at least these two columns, where 'product' is the name of the product as a string and 'quantity' is the number of units sold as an integer. Args: csv_file_path (str): The file path to the CSV file containing sales data.\nThe function should output with:\n    str: The name of the top-selling product based on the total quantity sold.\nYou should write self-contained code starting with:\n```\nimport csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n```",
        "gt": "import csv\nimport collections\nimport operator\ndef task_func(csv_file_path):\n    with open(csv_file_path, 'r') as f:\n        reader = csv.reader(f)\n        next(reader)  # Skip the header row\n        sales_data = collections.defaultdict(int)\n        for row in reader:\n            product, quantity = row[0], int(row[1])\n            sales_data[product] += quantity\n\n    top_selling_product = max(sales_data.items(), key=operator.itemgetter(1))[0]\n\n    return top_selling_product",
        "test": "import os\nimport unittest\nimport csv\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a directory for test files if it does not exist\n        self.test_dir = os.path.join(os.getcwd(), 'test_data')\n        os.makedirs(self.test_dir, exist_ok=True)\n    def tearDown(self):\n        # Remove all files created in the test directory\n        for filename in os.listdir(self.test_dir):\n            file_path = os.path.join(self.test_dir, filename)\n            if os.path.isfile(file_path):\n                os.remove(file_path)\n    def test_case_1(self):\n        # Correct data, expected top-seller is determined correctly\n        self.create_csv('sales1.csv', [['product', 'quantity'], ['Product B', '200'], ['Product A', '100']])\n        result = task_func(os.path.join(self.test_dir, \"sales1.csv\"))\n        self.assertEqual(result, \"Product B\")\n    def test_case_2(self):\n        # Correct data, expected top-seller is determined correctly\n        self.create_csv('sales2.csv', [['product', 'quantity'], ['Product Z', '120'], ['Product Y', '80']])\n        result = task_func(os.path.join(self.test_dir, \"sales2.csv\"))\n        self.assertEqual(result, \"Product Z\")\n    def test_case_3(self):\n        # Correct data, expected top-seller is determined correctly\n        self.create_csv('sales3.csv', [['product', 'quantity'], ['Product M', '500'], ['Product N', '400']])\n        result = task_func(os.path.join(self.test_dir, \"sales3.csv\"))\n        self.assertEqual(result, \"Product M\")\n    def test_case_4(self):\n        # Empty file with header, expect a ValueError or a graceful handle\n        self.create_csv('sales4.csv', [['product', 'quantity']])\n        with self.assertRaises(ValueError):\n            task_func(os.path.join(self.test_dir, \"sales4.csv\"))\n    def test_case_5(self):\n        # Single product data, correct determination\n        self.create_csv('sales5.csv', [['product', 'quantity'], ['Single Product', '999']])\n        result = task_func(os.path.join(self.test_dir, \"sales5.csv\"))\n        self.assertEqual(result, \"Single Product\")\n    def test_case_6(self):\n        # File does not exist, expect FileNotFoundError\n        with self.assertRaises(FileNotFoundError):\n            task_func(os.path.join(self.test_dir, \"nonexistent.csv\"))\n    def test_case_7(self):\n        # Incorrect data types, expect ValueError or graceful handling of conversion failure\n        self.create_csv('sales6.csv', [['product', 'quantity'], ['Product A', 'one hundred']])\n        with self.assertRaises(ValueError):\n            task_func(os.path.join(self.test_dir, \"sales6.csv\"))\n    def create_csv(self, filename, rows):\n        # Helper function to create CSV files with given rows\n        path = os.path.join(self.test_dir, filename)\n        with open(path, 'w', newline='') as file:\n            writer = csv.writer(file)\n            writer.writerows(rows)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a random string of a given length from a predefined list of letters and count the frequency of each letter, returning an ordered dictionary sorted by frequency in descending order.\nThe function should output with:\n    collections.OrderedDict: An ordered dictionary where keys are letters and values are\n    their frequencies in the generated string, sorted in descending order of frequency.\nYou should write self-contained code starting with:\n```\nimport collections\nfrom queue import PriorityQueue\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n```",
        "gt": "import collections\nfrom queue import PriorityQueue\nimport random\n# Constants\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(string_length=100):\n\n    string = ''.join([LETTERS[random.randint(0, len(LETTERS)-1)] for _ in range(string_length)])\n\n    freq = collections.Counter(string)\n\n    pq = PriorityQueue()\n    for letter, count in freq.items():\n        pq.put((-count, letter))\n\n    sorted_freq = collections.OrderedDict()\n    while not pq.empty():\n        count, letter = pq.get()\n        sorted_freq[letter] = -count\n\n    return sorted_freq",
        "test": "import unittest\nimport collections\nclass TestCases(unittest.TestCase):\n    def test_default_length(self):\n        random.seed(0)\n        freq = task_func()\n        self.assertIsInstance(freq, collections.OrderedDict, \"Output should be an OrderedDict\")\n        self.assertEqual(sum(freq.values()), 100, \"Total count of letters should be 100 for default length\")\n        self.assertTrue(all(freq[key] >= freq[key2] for key, key2 in zip(list(freq)[:-1], list(freq)[1:])), \"Frequencies should be sorted in descending order\")\n    def test_specific_length(self):\n        random.seed(0)\n        freq = task_func(50)\n        self.assertIsInstance(freq, collections.OrderedDict, \"Output should be an OrderedDict\")\n        self.assertEqual(sum(freq.values()), 50, \"Total count of letters should be 50 for specific length\")\n        self.assertTrue(all(freq[key] >= freq[key2] for key, key2 in zip(list(freq)[:-1], list(freq)[1:])), \"Frequencies should be sorted in descending order\")\n    def test_minimum_length(self):\n        random.seed(0)\n        freq = task_func(1)\n        self.assertIsInstance(freq, collections.OrderedDict, \"Output should be an OrderedDict\")\n        self.assertEqual(sum(freq.values()), 1, \"Total count of letters should be 1 for minimum length\")\n        self.assertEqual(len(freq), 1, \"Only one letter should be present for minimum length\")\n    def test_large_length(self):\n        random.seed(0)\n        freq = task_func(1000)\n        self.assertIsInstance(freq, collections.OrderedDict, \"Output should be an OrderedDict\")\n        self.assertEqual(sum(freq.values()), 1000, \"Total count of letters should be 1000 for large length\")\n        self.assertTrue(all(freq[key] >= freq[key2] for key, key2 in zip(list(freq)[:-1], list(freq)[1:])), \"Frequencies should be sorted in descending order\")\n    def test_zero_length(self):\n        random.seed(0)\n        freq = task_func(0)\n        self.assertIsInstance(freq, collections.OrderedDict, \"Output should be an OrderedDict\")\n        self.assertEqual(sum(freq.values()), 0, \"Total count of letters should be 0 for zero length\")\n        self.assertEqual(len(freq), 0, \"No letters should be present for zero length\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts words from the input text that begin with the '$' character and saves them to a specified file, excluding any words that are solely composed of punctuation characters. This function is useful for processing texts where '$' is used to denote special terms or entities and saves these terms to a file for further analysis or usage.\nThe function should output with:\n    str: The absolute path to the output file containing the '$' prefixed words.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n```",
        "gt": "from nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\nimport os\ndef task_func(text, output_filename):\n\n    punctuation_set = set(punctuation)\n    tokenizer = RegexpTokenizer(r'\\$\\w+')\n    dollar_prefixed_words = tokenizer.tokenize(text)\n    valid_dollar_words = [word for word in dollar_prefixed_words if\n                          not all(char in punctuation_set for char in word[1:])]\n\n    with open(output_filename, 'w') as file:\n        for word in valid_dollar_words:\n            file.write(word + '\\n')\n\n    return os.path.abspath(output_filename)",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.filenames = []\n        for i in range(1,7):\n            self.filenames.append(\"task_func_test_output_\"+str(i)+\".txt\")\n    def tearDown(self):\n        # Clean up the test file\n        for filename in self.filenames:\n            if os.path.exists(filename):\n                os.remove(filename)\n        \n    def test_case_1(self):\n        # Input 1\n        text = \"$abc def $efg $hij klm $ $abc $abc $hij $hij\"\n        filename = self.filenames[0]\n        expected_words = [\"$abc\", \"$efg\", \"$hij\", \"$abc\", \"$abc\", \"$hij\", \"$hij\"]\n        output_path = task_func(text, filename)\n        with open(output_path, 'r') as file:\n            saved_words = file.read().splitlines()\n        self.assertEqual(saved_words, expected_words)\n        self.assertTrue(os.path.exists(output_path))\n    def test_case_2(self):\n        # Input 2\n        text = \"There are no dollar words here.\"\n        filename = self.filenames[1]\n        expected_words = []\n        output_path = task_func(text, filename)\n        with open(output_path, 'r') as file:\n            saved_words = file.read().splitlines()\n        self.assertEqual(saved_words, expected_words)\n        self.assertTrue(os.path.exists(output_path))\n    def test_case_3(self):\n        # Input 3\n        text = \"$$$$ $$ $$$$ $abc$ $def\"\n        filename = self.filenames[2]\n        expected_words = [\"$abc\", \"$def\"]\n        output_path = task_func(text, filename)\n        with open(output_path, 'r') as file:\n            saved_words = file.read().splitlines()\n        self.assertEqual(saved_words, expected_words)\n        self.assertTrue(os.path.exists(output_path))\n    def test_case_4(self):\n        # Input 4\n        text = \"$hello $world! This is a $test.\"\n        filename = self.filenames[3]\n        expected_words = [\"$hello\", \"$world\", \"$test\"]\n        output_path = task_func(text, filename)\n        with open(output_path, 'r') as file:\n            saved_words = file.read().splitlines()\n        self.assertEqual(saved_words, expected_words)\n        self.assertTrue(os.path.exists(output_path))\n    def test_case_5(self):\n        # Input 5\n        text = \"$\"\n        filename = self.filenames[4]\n        expected_words = []\n        output_path = task_func(text, filename)\n        with open(output_path, 'r') as file:\n            saved_words = file.read().splitlines()\n        self.assertEqual(saved_words, expected_words)\n        self.assertTrue(os.path.exists(output_path))\n    def test_save_dollar_prefixed_words_to_file(self):\n        # Example input text containing various cases\n        input_text = \"$example $valid word $!invalid $$ $1234\"\n        # Temporary output file name for testing\n        filename = self.filenames[5]\n        # Expected result: Only valid $ prefixed words should be saved\n        expected_words = [\"$example\", \"$valid\", \"$1234\"]\n        expected_output = \"\\n\".join(expected_words) + \"\\n\"\n        # Call the function with the test data\n        output_path = task_func(input_text, filename)\n        # Verify the file was created\n        self.assertTrue(os.path.exists(output_path))\n        # Open the file and read its contents\n        with open(filename, 'r') as file:\n            content = file.read()\n        # Check the content against the expected output\n        self.assertEqual(content, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compress all files in the specified source folder and move the compressed files to a destination folder. This operation is executed as a background process using the 'gzip' command.\nThe function should output with:\n    dict: A dictionary containing:\n    'success': A boolean indicating if all files were compressed and moved successfully.\n    'message': A descriptive message about the operation's result.\n    'failed_files': A list of filenames that failed to compress or move.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n```",
        "gt": "import subprocess\nimport os\nimport shutil\nfrom glob import glob\ndef task_func(src_folder, dst_folder):\n    # Check if source and destination folders exist\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    if not os.path.isdir(dst_folder):\n        raise ValueError(f\"Destination folder '{dst_folder}' does not exist.\")\n    \n    processes = []\n    failed_files = []\n\n    # Compress files in a background process\n    for file in glob(os.path.join(src_folder, '*')):\n        process = subprocess.Popen(['gzip', file])\n        processes.append((process, file))\n\n    # Wait for all processes to complete\n    for process, file in processes:\n        retcode = process.wait()\n        if retcode != 0:\n            failed_files.append(os.path.basename(file))\n\n    # Move compressed files to destination folder\n    for file in glob(os.path.join(src_folder, '*.gz')):\n        try:\n            shutil.move(file, dst_folder)\n        except Exception as e:\n            failed_files.append(os.path.basename(file))\n\n    if failed_files:\n        return {'success': False, 'message': 'Some files failed to compress or move.', 'failed_files': failed_files}\n    else:\n        return {'success': True, 'message': 'All files compressed and moved successfully.', 'failed_files': []}",
        "test": "import unittest\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.src_folder_path = f\"{self.base_tmp_dir}/test/source_folder\"\n        self.dst_folder_path = f\"{self.base_tmp_dir}/test/destination_folder\"\n        \n        # Reset the test folders before each test\n        os.makedirs(self.src_folder_path, exist_ok=True)\n        os.makedirs(self.dst_folder_path, exist_ok=True)\n        # Create source and destination folders if they don't exist\n        os.makedirs(self.src_folder_path, exist_ok=True)\n        os.makedirs(self.dst_folder_path, exist_ok=True)\n        # Create some sample files in the source folder\n        self.file_contents = [\"This is file 1.\", \"This is file 2.\", \"This is file 3.\"]\n        file_paths = []\n        for idx, content in enumerate(self.file_contents, 1):\n            file_path = os.path.join(self.src_folder_path, f\"file{idx}.txt\")\n            with open(file_path, \"w\") as file:\n                file.write(content)\n            file_paths.append(file_path)\n    def tearDown(self):\n        # Reset the test folders after each test\n        if os.path.exists(self.base_tmp_dir):\n            shutil.rmtree(self.base_tmp_dir, ignore_errors=True)\n    def test_case_1(self):\n        \"\"\"Test basic functionality.\"\"\"\n        # Create some sample files in the source folder\n        for idx, content in enumerate(self.file_contents, 1):\n            file_path = os.path.join(self.src_folder_path, f\"file{idx}.txt\")\n            with open(file_path, \"w\") as file:\n                file.write(content)\n        \n        result = task_func(self.src_folder_path, self.dst_folder_path)\n        self.assertTrue(result['success'])\n        self.assertEqual(result['message'], 'All files compressed and moved successfully.')\n        self.assertEqual(result['failed_files'], [])\n        for idx in range(1, 4):\n            self.assertTrue(os.path.exists(os.path.join(self.dst_folder_path, f\"file{idx}.txt.gz\")))\n    def test_case_2(self):\n        \"\"\"Test non-existent source folder.\"\"\"\n        with self.assertRaises(ValueError) as context:\n            task_func(\"/non/existent/path\", self.dst_folder_path)\n        self.assertEqual(str(context.exception), \"Source folder '/non/existent/path' does not exist.\")\n    def test_case_3(self):\n        \"\"\"Test non-existent destination folder.\"\"\"\n        with self.assertRaises(ValueError) as context:\n            task_func(self.src_folder_path, \"/non/existent/path\")\n        self.assertEqual(str(context.exception), \"Destination folder '/non/existent/path' does not exist.\")\n    def test_case_4(self):\n        \"\"\"Test empty source folder.\"\"\"\n        result = task_func(self.src_folder_path, self.dst_folder_path)\n        self.assertTrue(result['success'])\n        self.assertEqual(result['message'], 'All files compressed and moved successfully.')\n        self.assertEqual(result['failed_files'], [])\n    \n    def test_case_5(self):\n        \"\"\"Test with destination folder having some files.\"\"\"\n        # Create some files in the destination folder\n        with open(os.path.join(self.dst_folder_path, \"existing_file.txt\"), \"w\") as file:\n            file.write(\"This is an existing file.\")\n        with open(os.path.join(self.dst_folder_path, \"existing_file.txt.gz\"), \"w\") as file:\n            file.write(\"This is an existing compressed file.\")\n        \n        # Create some sample files in the source folder\n        for idx, content in enumerate(self.file_contents, 1):\n            file_path = os.path.join(self.src_folder_path, f\"file{idx}.txt\")\n            with open(file_path, \"w\") as file:\n                file.write(content)\n        \n        result = task_func(self.src_folder_path, self.dst_folder_path)\n        self.assertTrue(result['success'])\n        self.assertEqual(result['message'], 'All files compressed and moved successfully.')\n        self.assertEqual(result['failed_files'], [])\n        for idx in range(1, 4):\n            self.assertTrue(os.path.exists(os.path.join(self.dst_folder_path, f\"file{idx}.txt.gz\")))\n        self.assertTrue(os.path.exists(os.path.join(self.dst_folder_path, \"existing_file.txt\")))\n        self.assertTrue(os.path.exists(os.path.join(self.dst_folder_path, \"existing_file.txt.gz\")))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Finds all words in a text, that are seperated by whitespace, beginning with the \"$\" character and computes their number of occurences. >>> text = \"$hello this i$s a $test $test $test\" >>> task_func(text) Word  Frequency 0  $hello          1 1   $test          3\nNote that: The function ignores words that are entirely made up of punctuation, even if they start with a '$'.\nThe function should raise the exception for: ValueError: if text is not a string\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns: \"Word\" and \"Frequency\".\n    \"Word\" contains the '$' prefixed words, and \"Frequency\" contains their occurrences.\nYou should write self-contained code starting with:\n```\nimport nltk\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n```",
        "gt": "import nltk\nfrom string import punctuation\nimport pandas as pd\ndef task_func(text):\n    if not isinstance(text, str):\n        raise ValueError(\"The input should be a string.\")\n\n    tk = nltk.WhitespaceTokenizer()\n    words = tk.tokenize(text)    \n    dollar_words = [word for word in words if word.startswith('$') and not all(c in set(punctuation) for c in word)]\n    freq = nltk.FreqDist(dollar_words)\n    df = pd.DataFrame(list(freq.items()), columns=[\"Word\", \"Frequency\"])\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        text = \"$abc def $efg $hij klm $ $abc $abc $hij $hij\"\n        result = task_func(text)\n        expected_words = [\"$abc\", \"$efg\", \"$hij\"]\n        expected_freqs = [3, 1, 3]\n        self.assertListEqual(result[\"Word\"].tolist(), expected_words)\n        self.assertListEqual(result[\"Frequency\"].tolist(), expected_freqs)\n    def test_case_2(self):\n        text = \"This is a test without dollar words.\"\n        result = task_func(text)\n        self.assertEqual(len(result), 0)\n    def test_case_3(self):\n        text = \"$test1 $test2 $test1 $test3\"\n        result = task_func(text)\n        expected_words = [\"$test1\", \"$test2\", \"$test3\"]\n        expected_freqs = [2, 1, 1]\n        self.assertListEqual(result[\"Word\"].tolist(), expected_words)\n        self.assertListEqual(result[\"Frequency\"].tolist(), expected_freqs)\n    def test_case_4(self):\n        text = \"$! $$ $a $a $a\"\n        result = task_func(text)\n        expected_words = [\"$a\"]\n        expected_freqs = [3]\n        self.assertListEqual(result[\"Word\"].tolist(), expected_words)\n        self.assertListEqual(result[\"Frequency\"].tolist(), expected_freqs)\n    def test_case_5(self):\n        text = \"$word1 word2 $word2 $word1 $word3 $word1\"\n        result = task_func(text)\n        expected_words = [\"$word1\", \"$word2\", \"$word3\"]\n        expected_freqs = [3, 1, 1]\n        self.assertListEqual(result[\"Word\"].tolist(), expected_words)\n        self.assertListEqual(result[\"Frequency\"].tolist(), expected_freqs)\n    def test_case_6(self):\n        '''empty input string'''\n        text = \"\"\n        result = task_func(text)\n        expected_words = []\n        expected_freqs = []\n        self.assertListEqual(result[\"Word\"].tolist(), expected_words)\n        self.assertListEqual(result[\"Frequency\"].tolist(), expected_freqs)\n    \n    def test_case_7(self):\n        '''check for correct return type'''\n        text = \"$test 123 abcd.aef\"\n        result = task_func(text)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue('Word' in result.columns)\n        self.assertTrue('Frequency' in result.columns)\n    def test_case_8(self):\n        '''word with $ in the middle'''\n        text = \"asdfj;alskdfj;$kjhkjhdf\"\n        result = task_func(text)\n        expected_words = []\n        expected_freqs = []\n        self.assertListEqual(result[\"Word\"].tolist(), expected_words)\n        self.assertListEqual(result[\"Frequency\"].tolist(), expected_freqs)\n    def test_case_9(self):\n        '''non string input'''\n        input = 24\n        self.assertRaises(Exception, task_func, input)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Retrieves the names of the repositories of a specified GitHub user, sorted in ascending order by their creation date. The function queries the GitHub API for all repositories of a given user, parses the response to extract the names and creation dates, and returns the repository names sorted by the date they were created.\nThe function should output with:\n    list of str: A list of repository names, sorted by their creation dates from oldest to newest.\nYou should write self-contained code starting with:\n```\nimport collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n```",
        "gt": "import collections\nimport json\nimport requests\ndef task_func(user, API_URL = 'https://api.github.com/users/'):\n    response = requests.get(API_URL + user + '/repos')\n    data = json.loads(response.text)\n    repos = {repo['name']: repo['created_at'] for repo in data}\n    sorted_repos = collections.OrderedDict(sorted(repos.items(), key=lambda x: x[1]))\n    return list(sorted_repos.keys())",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport json\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.mock_response_with_multiple_repos = json.dumps([\n        {\"name\": \"Repo1\", \"created_at\": \"2021-01-01T00:00:00Z\"},\n        {\"name\": \"Repo2\", \"created_at\": \"2021-01-02T00:00:00Z\"}\n    ])\n        self.mock_response_with_single_repo = json.dumps([\n        {\"name\": \"SingleRepo\", \"created_at\": \"2021-01-01T00:00:00Z\"}\n    ])\n        self.mock_response_with_no_repos = json.dumps([])\n    @patch('requests.get')\n    def test_case_1(self, mock_get):\n        # Test if the function returns a list\n        mock_get.return_value = Mock(status_code=200, text=self.mock_response_with_multiple_repos)\n        result = task_func('octocat')\n        self.assertIsInstance(result, list, \"The returned value should be a list.\")\n    @patch('requests.get')\n    def test_case_2(self, mock_get):\n        # Test for a user with multiple repositories\n        mock_get.return_value = Mock(status_code=200, text=self.mock_response_with_multiple_repos)\n        result = task_func('octocat')\n        self.assertTrue(len(result) > 1, \"The user 'octocat' should have more than one repository.\")\n    @patch('requests.get')\n    def test_case_3(self, mock_get):\n        # Test for a user with no repositories\n        mock_get.return_value = Mock(status_code=200, text=self.mock_response_with_no_repos)\n        result = task_func('dummyuserwithnorepos')\n        self.assertEqual(len(result), 0, \"The user 'dummyuserwithnorepos' should have zero repositories.\")\n    @patch('requests.get')\n    def test_case_4(self, mock_get):\n        # Test for a non-existent user\n        mock_get.return_value = Mock(status_code=404, text=self.mock_response_with_no_repos)\n        result = task_func('nonexistentuserxyz')\n        self.assertEqual(len(result), 0, \"A non-existent user should have zero repositories.\")\n    @patch('requests.get')\n    def test_case_5(self, mock_get):\n        # Test for a user with a single repository\n        mock_get.return_value = Mock(status_code=200, text=self.mock_response_with_single_repo)\n        result = task_func('userwithonerepo')\n        self.assertEqual(len(result), 1, \"The user 'userwithonerepo' should have one repository.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads an RGB image, applies K-means clustering to segment the image into 'n_clusters' regions, and saves each region as a separate image. The function returns numpy arrays of the original and segmented images.\nNote that: This function assumes the input image is in RGB format. The segmented image array will have the same shape as the original image but with pixel colors replaced by their corresponding cluster centroid colors, effectively segmenting the image into regions based on color similarity. Clustering with a single cluster is allowed and will return the original image as both the original and segmented images, since all pixels will be assigned to the same cluster.\nThe function should raise the exception for: FileNotFoundError: If the image file does not exist at the specified path. ValueError: If 'n_clusters' is not a positive integer.\nThe function should output with:\n    tuple: A tuple containing two numpy arrays. The first array represents the original RGB image,\n    and the second array represents the segmented image, with each pixel's color replaced by\n    the centroid of the cluster it belongs to.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n```",
        "gt": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"n_clusters must be a positive integer.\")\n\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"No image found at {image_path}\")\n\n    # Image processing\n    img = cv2.imread(image_path)\n    if img is None:\n        raise ValueError(\"Failed to read the image file.\")\n    if n_clusters == 1:\n        # Return the original image without modification if n_clusters is 1\n        return img, img.copy()\n    \n    pixels = img.reshape(-1, 3)\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixels)\n    segmented_image = kmeans.cluster_centers_[kmeans.labels_]\n    segmented_image = segmented_image.reshape(img.shape).astype('uint8')\n\n    # Save each cluster as a separate image, if more than one cluster\n    if n_clusters > 1:\n        for i in range(n_clusters):\n            mask = kmeans.labels_.reshape(img.shape[:2]) == i\n            cluster_img = np.where(np.stack([mask]*3, axis=-1), segmented_image, np.array([255, 255, 255], dtype=np.uint8))\n            cv2.imwrite(f'cluster_{i+1}.jpg', cluster_img)\n\n    return np.array(img), np.array(segmented_image)",
        "test": "import unittest\nimport numpy as np\nfrom PIL import Image, ImageDraw\ndef create_dummy_image(image_path='test_image.jpg', size=(10, 10)):\n    \"\"\"\n    Creates a dummy color image for testing.\n    The image size is 10x10 pixels.\n    \"\"\"\n    img = Image.new('RGB', size, color='white')\n    draw = ImageDraw.Draw(img)\n    # Draw small shapes\n    draw.point((2, 2), fill='red')       # Red point\n    draw.point((5, 5), fill='green')     # Green point\n    draw.point((8, 8), fill='blue')      # Blue point\n    img.save(image_path)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        create_dummy_image()\n    def tearDown(self):\n        os.remove('test_image.jpg')\n        for i in range(1, 4):\n            if os.path.exists(f'cluster_{i}.jpg'):\n                os.remove(f'cluster_{i}.jpg')\n    def test_normal_functionality(self):\n        original_img, segmented_img = task_func('test_image.jpg', 3)\n        self.assertIsInstance(original_img, np.ndarray)\n        self.assertIsInstance(segmented_img, np.ndarray)\n        # Check shapes of the images\n        self.assertEqual(original_img.shape, (10, 10, 3))\n        self.assertEqual(segmented_img.shape, (10, 10, 3))\n        \n        original_img_list = original_img.tolist()\n        segmented_img_list = segmented_img.tolist()\n        expect_orignal =[[[253, 252, 255], [243, 246, 251], [248, 254, 255], [240, 252, 254], [244, 255, 255], [242, 254, 254], [246, 255, 255], [250, 255, 255], [255, 255, 255], [255, 254, 255]], [[250, 249, 255], [251, 254, 255], [245, 252, 255], [246, 255, 255], [243, 255, 255], [242, 254, 254], [243, 251, 250], [244, 249, 248], [255, 255, 255], [255, 254, 255]], [[253, 253, 255], [237, 240, 245], [90, 95, 98], [243, 252, 255], [238, 250, 250], [242, 254, 254], [248, 255, 255], [250, 255, 253], [255, 255, 254], [255, 255, 254]], [[253, 253, 255], [248, 251, 255], [238, 243, 246], [241, 248, 251], [246, 255, 255], [246, 255, 255], [250, 255, 254], [246, 249, 247], [255, 255, 254], [255, 255, 254]], [[246, 246, 252], [251, 254, 255], [250, 255, 255], [248, 255, 255], [239, 249, 249], [236, 244, 243], [248, 253, 251], [255, 255, 254], [255, 255, 254], [255, 254, 254]], [[252, 252, 255], [251, 254, 255], [248, 253, 255], [242, 250, 250], [245, 253, 252], [88, 96, 95], [239, 242, 240], [255, 255, 254], [255, 255, 254], [255, 254, 254]], [[246, 247, 251], [246, 249, 253], [248, 253, 255], [249, 254, 255], [250, 255, 255], [247, 253, 252], [255, 255, 254], [255, 253, 249], [255, 255, 252], [255, 254, 252]], [[253, 254, 255], [253, 254, 255], [249, 253, 254], [250, 255, 255], [246, 252, 251], [253, 255, 254], [249, 248, 244], [255, 255, 252], [255, 254, 252], [255, 254, 252]], [[253, 254, 255], [253, 254, 255], [251, 255, 255], [251, 255, 255], [251, 255, 255], [255, 255, 254], [255, 255, 252], [255, 255, 252], [42, 29, 27], [254, 239, 237]], [[253, 254, 255], [253, 255, 255], [251, 255, 255], [251, 255, 255], [253, 255, 254], [255, 255, 254], [255, 255, 252], [255, 255, 252], [255, 246, 244], [255, 253, 252]]]\n        self.assertTrue(np.array_equal(original_img_list, expect_orignal), \"The arrays should be equal\")\n        \n        segment_expect =[[[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [89, 95, 96], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [89, 95, 96], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [42, 29, 27], [249, 252, 252]], [[249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252], [249, 252, 252]]]\n        self.assertTrue(np.array_equal(segmented_img_list, segment_expect), \"The arrays should not be equal\")\n        \n        with open('df_contents.txt', 'w') as file:\n            file.write(str(segmented_img_list))\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('non_existent.jpg')\n    def test_invalid_n_clusters(self):\n        with self.assertRaises(ValueError):\n            task_func('test_image.jpg', -1)\n    def test_n_clusters_as_non_integer(self):\n        with self.assertRaises(ValueError):\n            task_func('test_image.jpg', 'three')\n    def test_single_cluster_returns_original_image(self):\n        \"\"\"\n        Test that attempting to segment an image into a single cluster returns the original image itself.\n        \"\"\"\n        original_img, segmented_img = task_func('test_image.jpg', 1)\n        self.assertIsInstance(original_img, np.ndarray)\n        self.assertIsInstance(segmented_img, np.ndarray)\n        \n        # Check if the original and segmented images are the same\n        np.testing.assert_array_equal(original_img, segmented_img, \"The original and segmented images should be identical when n_clusters is set to 1.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\nThe function should output with:\n    data (dict): A dictionary representation of the modified YAML data.\nYou should write self-contained code starting with:\n```\nimport math\nimport yaml\ndef task_func(yaml_path, key):\n```",
        "gt": "import math\nimport yaml\ndef task_func(yaml_path, key):\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n\n    if key in data:\n        data[key] = math.cos(data[key])\n\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n\n    return data",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def base(self, yaml_path, key, contents, expected):\n        # Create YAML file\n        with open(yaml_path, 'w') as file:\n            yaml.safe_dump(contents, file)\n        # Run function\n        data = task_func(yaml_path, key)\n        # Check data\n        self.assertEqual(data, expected)\n        # Remove YAML file\n        os.remove(yaml_path)\n    def test_case_1(self):\n        self.base('./data.yaml', 'ele', {'ele': 1, 'ale': 2, 'ile': 3}, {'ele': math.cos(1), 'ale': 2, 'ile': 3})\n    def test_case_2(self):\n        self.base('./y.yaml', 'zzz', {'zzz': 1, 'yyy': 2, 'xxx': 3}, {'zzz': math.cos(1), 'yyy': 2, 'xxx': 3})\n    def test_case_3(self):\n        self.base('./data.yaml', 'ale', {'ele': 1, 'ale': 2, 'ile': 3}, {'ele': 1, 'ale': math.cos(2), 'ile': 3})\n    def test_case_4(self):\n        self.base('./y.yaml', 'yyy', {'zzz': 1, 'yyy': 2, 'xxx': 3}, {'zzz': 1, 'yyy': math.cos(2), 'xxx': 3})\n    def test_case_5(self):\n        self.base('./data.yaml', 'ile', {'ele': 1, 'ale': 2, 'ile': 3}, {'ele': 1, 'ale': 2, 'ile': math.cos(3)})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a string of numerical values separated by a specified separator into a pandas numerical series with int64, and then draw a histogram of the data. The function raises a ValueError if data is empty or it fails to convert the data. It plots the histogram with the following attributes: - grid: True - rwidth: 0.9 - color: '#607c8e'\nThe function should output with:\n    tuple: A tuple containing:\n    1. Series: A pandas Series of the data coonverted into integers.\n    2. Axes: The Axes object of the plotted histogram.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(data_str, separator=\",\", bins=20):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(data_str, separator=\",\", bins=20):\n\n    data = np.fromstring(data_str, sep=separator)\n    if data.size == 0:\n        raise ValueError(\"Failed to find valid data\")\n\n    data = pd.Series(data, dtype='int64')\n    ax = data.plot.hist(grid=True, bins=bins, rwidth=0.9, color=\"#607c8e\")\n    return data, ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib\nfrom matplotlib import pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self) -> None:\n        self.default_str = \"1,2,3,4,5,5,5,4,3,2,1\"\n        self.default_expected = pd.Series([1, 2, 3, 4, 5, 5, 5, 4, 3, 2, 1])\n    def assertHistogramAttributes(self, series, ax):\n        # Check that the y-axis gridlines are set to True\n        self.assertTrue(ax.yaxis.grid)\n        # Ensure the histogram bars have the correct color\n        self.assertEqual(matplotlib.colors.to_hex(ax.patches[0].get_fc()), \"#607c8e\")\n        # Validate the heights of the histogram bars\n        for patch in ax.patches:\n            if (\n                round(patch.get_x()) in series.values\n                or round(patch.get_x() + patch.get_width()) in series.values\n            ):\n                self.assertTrue(patch.get_height() >= 0)\n    def test_case_1(self):\n        # Test default case\n        series, ax = task_func(self.default_str)\n        self.assertIsInstance(series, pd.Series)\n        self.assertHistogramAttributes(series, ax)\n        pd.testing.assert_series_equal(series, self.default_expected)\n    def test_case_2(self):\n        # Test function works on different bin sizes\n        for bins in [5, 10, 15, 30, 100]:\n            with self.subTest(bins=bins):\n                series, ax = task_func(self.default_str, bins=bins)\n                self.assertIsInstance(series, pd.Series)\n                self.assertHistogramAttributes(series, ax)\n                pd.testing.assert_series_equal(series, self.default_expected)\n    def test_case_3(self):\n        # Test custom separators\n        data_str = \"1|2|3|4|5\"\n        series, ax = task_func(data_str, separator=\"|\")\n        self.assertIsInstance(series, pd.Series)\n        self.assertHistogramAttributes(series, ax)\n        pd.testing.assert_series_equal(series, pd.Series([1, 2, 3, 4, 5]))\n    def test_case_4(self):\n        # Test negative and zero\n        data_str = \"-5,-4,-3,-2,-1,0\"\n        series, ax = task_func(data_str)\n        self.assertIsInstance(series, pd.Series)\n        self.assertHistogramAttributes(series, ax)\n        pd.testing.assert_series_equal(series, pd.Series([-5, -4, -3, -2, -1, 0]))\n    def test_case_5(self):\n        # Test single item\n        data_str = \"1\"\n        series, ax = task_func(data_str)\n        self.assertIsInstance(series, pd.Series)\n        self.assertHistogramAttributes(series, ax)\n        pd.testing.assert_series_equal(series, pd.Series([1]))\n    def test_case_6(self):\n        # Test with float\n        series, ax = task_func(\"1.0,2.0,3.0,4.0,5.0,5.0,5.0,4.0,3.0,2.0,1.0\")\n        self.assertIsInstance(series, pd.Series)\n        self.assertHistogramAttributes(series, ax)\n        pd.testing.assert_series_equal(series, self.default_expected)\n    def test_case_7(self):\n        # Test with empty string\n        data_str = \"\"\n        with self.assertRaises(ValueError):\n            task_func(data_str)\n    def test_case_8(self):\n        # Test with invalid data (contains string)\n        data_str = \"a,b,c, 1\"\n        with self.assertRaises(ValueError):\n            task_func(data_str)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Download all files from a specific directory on an FTP server using wget in a subprocess. Args: ftp_server (str): The FTP server address. Default is 'ftp.dlptest.com'. ftp_user (str): The FTP server username. Default is 'dlpuser'. ftp_password (str): The FTP server password. Default is 'rNrKYTX9g7z3RgJRmxWuGHbeu'. ftp_dir (str): The directory path on the FTP server from which files need to be downloaded. Default is '/ftp/test'.\nThe function should raise the exception for: Exception: If there is a failure in connecting to the FTP server. Outputs the message \"Failed to connect to FTP server {ftp_server}: {str(e)}\" If there is a failure in logging into the FTP server. Outputs the message \"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\" If there is a failure in changing to the specified directory. Outputs the message \"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\"\nThe function should output with:\n    List[str]: A list of filenames that were attempted to be downloaded from the FTP server.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n```",
        "gt": "import subprocess\nimport ftplib\nimport os\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    # Attempt to connect to the FTP server\n    try:\n        ftp_obj = ftplib.FTP(ftp_server)\n    except Exception as e:\n        raise Exception(f'Failed to connect to FTP server {ftp_server}: {str(e)}')\n\n    # Attempt to login to the FTP server\n    try:\n        ftp_obj.login(ftp_user, ftp_password)\n    except Exception as e:\n        raise Exception(f'Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}')\n\n    # Attempt to change to the specified directory\n    try:\n        ftp_obj.cwd(ftp_dir)\n    except Exception as e:\n        raise Exception(f'Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}')\n\n    # Directory to store downloaded files\n    download_dir = \"downloaded_files\"\n    if not os.path.exists(download_dir):\n        os.makedirs(download_dir)\n\n    downloaded_files = []\n    for filename in ftp_obj.nlst():\n        command = f'wget ftp://{ftp_user}:{ftp_password}@{ftp_server}{ftp_dir}/{filename} -P {download_dir}'\n        subprocess.call(command, shell=True)\n        downloaded_files.append(filename)\n\n    ftp_obj.quit()\n    return downloaded_files",
        "test": "import unittest\nfrom unittest.mock import patch\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Setup a clean test environment before each test.\"\"\"\n        if not os.path.exists(\"downloaded_files\"):\n            os.makedirs(\"downloaded_files\")\n    \n    def tearDown(self):\n        \"\"\"Cleanup after each test.\"\"\"\n        for filename in os.listdir(\"downloaded_files\"):\n            os.remove(os.path.join(\"downloaded_files\", filename))\n        os.rmdir(\"downloaded_files\")\n    @patch('ftplib.FTP')\n    @patch('subprocess.call')\n    def test_case_1(self, mock_subprocess_call, mock_ftp):\n        \"\"\"Test with default parameters and successful download.\"\"\"\n        mock_ftp.return_value.nlst.return_value = ['file1.txt', 'file2.jpg']\n        mock_subprocess_call.return_value = 0  # Simulating successful wget command execution\n        downloaded_files = task_func()\n        self.assertEqual(len(downloaded_files), 2)\n        self.assertIn('file1.txt', downloaded_files)\n        self.assertIn('file2.jpg', downloaded_files)\n    @patch('ftplib.FTP')\n    def test_case_2(self, mock_ftp):\n        \"\"\"Test with an invalid FTP server by raising an exception on connect.\"\"\"\n        error_message = \"Failed to connect to FTP server\"\n        mock_ftp.side_effect = Exception(error_message)\n        with self.assertRaises(Exception) as context:\n            task_func(ftp_server=\"invalid_server\")\n        self.assertEqual(str(context.exception), f'Failed to connect to FTP server invalid_server: {error_message}')\n    @patch('ftplib.FTP')\n    def test_case_3(self, mock_ftp):\n        \"\"\"Test with an invalid FTP user by raising an exception on login.\"\"\"\n        error_message = \"Failed to login\"\n        mock_ftp.return_value.login.side_effect = Exception(error_message)\n        with self.assertRaises(Exception) as context:\n            task_func(ftp_user=\"invalid_user\")\n        self.assertEqual(str(context.exception), f'Failed to log into FTP server ftp.dlptest.com with user invalid_user: {error_message}')\n    @patch('ftplib.FTP')\n    def test_case_4(self, mock_ftp):\n        \"\"\"Test with an invalid FTP password by raising an exception on login.\"\"\"\n        error_message = \"Failed to login\"\n        mock_ftp.return_value.login.side_effect = Exception(error_message)\n        with self.assertRaises(Exception) as context:\n            task_func(ftp_password=\"invalid_password\")\n        self.assertEqual(str(context.exception), f'Failed to log into FTP server ftp.dlptest.com with user dlpuser: {error_message}')\n    @patch('ftplib.FTP')\n    def test_case_5(self, mock_ftp):\n        \"\"\"Test with an invalid FTP directory by raising an exception on cwd.\"\"\"\n        error_message = \"Failed to change directory\"\n        mock_ftp.return_value.cwd.side_effect = Exception(error_message)\n        with self.assertRaises(Exception) as context:\n            task_func(ftp_dir=\"/invalid_directory\")\n        self.assertEqual(str(context.exception), f'Failed to change to directory /invalid_directory on server ftp.dlptest.com: {error_message}')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plot sales trends for five products over a year, highlighting variability with standard deviation shading with 'Month' on x-axis and 'Sales' on y-axis.\nThe function should output with:\n    ax (matplotlib.axes.Axes): Axes object with the sales trends plot.\nYou should write self-contained code starting with:\n```\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n```",
        "gt": "import statistics\nimport matplotlib.pyplot as plt\ndef task_func(sales_data):\n    fig, ax = plt.subplots()\n    for label in sales_data.columns[1:]:  # Skipping 'Month' column\n        monthly_sales = sales_data[label]\n        std_dev = statistics.stdev(monthly_sales)\n\n        ax.plot(sales_data['Month'], monthly_sales, label=label)\n        ax.fill_between(sales_data['Month'],\n                        monthly_sales - std_dev,\n                        monthly_sales + std_dev,\n                        alpha=0.2)\n\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Sales')\n    ax.set_title('Monthly Sales Trends with Standard Deviation')\n    ax.legend()\n\n    # Set x-ticks to be explicit months from the DataFrame\n    ax.set_xticks(sales_data['Month'])\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Generating a sample sales DataFrame\n        self.sales_data = pd.DataFrame({\n            'Month': range(1, 13),\n            'Product A': np.random.randint(100, 200, size=12),\n            'Product B': np.random.randint(150, 250, size=12),\n            'Product C': np.random.randint(120, 220, size=12),\n            'Product D': np.random.randint(130, 230, size=12),\n            'Product E': np.random.randint(140, 240, size=12)\n        })\n    def test_plot_labels(self):\n        \"\"\"Ensure all product labels are present in the plot legend.\"\"\"\n        ax = task_func(self.sales_data)\n        legend_labels = [text.get_text() for text in ax.get_legend().get_texts()]\n        self.assertEqual(set(legend_labels), set(self.sales_data.columns[1:]),\n                         \"Not all product labels are present in the plot legend.\")\n    def test_plot_lines(self):\n        \"\"\"Check if the plot contains lines for each product.\"\"\"\n        ax = task_func(self.sales_data)\n        self.assertEqual(len(ax.lines), len(self.sales_data.columns) - 1,\n                         \"Plot does not contain the correct number of lines.\")\n    def test_monthly_ticks(self):\n        \"\"\"Verify that all months are correctly plotted as x-ticks.\"\"\"\n        ax = task_func(self.sales_data)\n        # Convert x-ticks to integers for comparison\n        x_ticks = [int(tick) for tick in ax.get_xticks() if isinstance(tick, (int, np.integer))]\n        expected_ticks = self.sales_data['Month'].tolist()\n        self.assertListEqual(x_ticks, expected_ticks, \"Not all months are correctly plotted as x-ticks.\")\n    def test_positive_sales(self):\n        \"\"\"Ensure all plotted sales values are positive.\"\"\"\n        ax = task_func(self.sales_data)\n        for line in ax.lines:\n            self.assertTrue(all(y >= 0 for y in line.get_ydata()),\n                            \"Plotted sales values should be positive.\")\n    def test_std_dev_shading(self):\n        \"\"\"Check for standard deviation shading around each product line.\"\"\"\n        ax = task_func(self.sales_data)\n        self.assertGreaterEqual(len(ax.collections), len(self.sales_data.columns) - 1,\n                                \"Missing standard deviation shading for one or more products.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fit a simple linear regression model to two columns of a DataFrame specified by feature and target. return the indices of the n largest residuals as well as the linear regression model. >>> df = pd.DataFrame({ ...     'a': [1, 2, 3, 4, 5], ...     'b': [1, 2, 3, 4, 5] ... }) >>> indices, model = task_func(df, 'a', 'b', n=3) >>> print(indices) [0, 1, 2] >>> print(model) LinearRegression()\nThe function should raise the exception for: ValueError: If specified columns are not in the provided DataFrame.\nThe function should output with:\n    list[int]: Indices of the n largest residuals.\n    LinearRegression: The LinearRegression model.\nYou should write self-contained code starting with:\n```\nimport heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n```",
        "gt": "import heapq\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, feature, target, n=10):\n    # Ensure provided columns exist in the dataframe\n    if feature not in df.columns or target not in df.columns:\n        raise ValueError(f\"Columns {feature} or {target} not found in the DataFrame.\")\n\n\n    X = df[feature].values.reshape(-1, 1)\n    y = df[target].values\n    model = LinearRegression()\n    model.fit(X, y)\n    residuals = y - model.predict(X)\n    largest_residual_indices = heapq.nlargest(n, range(len(residuals)), key=lambda i: abs(residuals[i]))\n    return largest_residual_indices, model",
        "test": "import unittest\nfrom faker import Faker\nimport pandas as pd\nfake = Faker()\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        self.sample_data = {\n            'col1': [fake.random_int(min=1, max=100) for _ in range(100)],\n            'col2': [fake.random_int(min=1, max=100) for _ in range(100)]\n        }\n    def test_wrong_columns(self):\n        # test with wrong columns\n        data = {\n            'col1': [1, 2, 3, 4, 5],\n            'col2': [2, 3, 4, 5, 6]\n        }\n        df = pd.DataFrame(data)\n        self.assertRaises(Exception, task_func, df, 'a', 'col2')\n        self.assertRaises(Exception, task_func, df, 'col1', 'a')\n        self.assertRaises(Exception, task_func, df, 'a', 'b')\n    # tests with random data\n    def test_case_1(self):\n        indices, model = task_func(pd.DataFrame(self.sample_data), 'col1', 'col2')\n        self.assertTrue(isinstance(model, LinearRegression))\n        self.assertEqual(len(indices), 10)\n    def test_case_2(self):\n        indices, model = task_func(pd.DataFrame(self.sample_data), 'col1', 'col2', n=5)\n        self.assertTrue(isinstance(model, LinearRegression))\n        self.assertEqual(len(indices), 5)\n    def test_case_3(self):\n        random_length = fake.random_int(min=5, max=20)\n        df = pd.DataFrame({\n            'col1': [fake.random_int(min=1, max=100) for _ in range(random_length)],\n            'col2': [fake.random_int(min=1, max=100) for _ in range(random_length)]\n        })\n        indices, model = task_func(df, 'col1', 'col2', n=3)\n        self.assertTrue(isinstance(model, LinearRegression))\n        self.assertEqual(len(indices), 3)\n    def test_case_4(self):\n        df = pd.DataFrame({\n            'col1': [fake.random_int(min=1, max=100) for _ in range(10)],\n            'col2': [50 for _ in range(10)]\n        })\n        indices, model = task_func(df, 'col1', 'col2')\n        self.assertTrue(isinstance(model, LinearRegression))\n        self.assertEqual(len(indices), 10)\n    def test_case_5(self):\n        df = pd.DataFrame({\n            'col1': list(range(10)),\n            'col2': list(range(10))\n        })\n        indices, model = task_func(df, 'col1', 'col2')\n        self.assertTrue(isinstance(model, LinearRegression))\n        self.assertEqual(len(indices), 10)\n    # deterministic tests\n    def test_deterministic_case_1(self):\n        df = pd.DataFrame({\n            'col1': [10, 20, 30, 40, 50],\n            'col2': [1, 2, 3, 4, 5]\n        })\n        indices, model = task_func(df, 'col1', 'col2')\n        self.assertTrue(isinstance(model, LinearRegression))\n        # Given the linear relationship, the residuals should be close to zero.\n        # Hence, any index could be in the top N residuals.\n        # check if model was used to generate indices\n        y = df['col2'].values\n        X = df['col1'].values.reshape(-1, 1)\n        residuals = y - model.predict(X)\n        largest_residual_indices = heapq.nlargest(10, range(len(residuals)), key=lambda i: abs(residuals[i]))\n        self.assertListEqual(largest_residual_indices, indices)\n    def test_deterministic_case_2(self):\n        df = pd.DataFrame({\n            'col1': [10, 20, 30, 40, 50],\n            'col2': [10, 40, 90, 160, 250]\n        })\n        indices, model = task_func(df, 'col1', 'col2')\n        self.assertTrue(isinstance(model, LinearRegression))\n        # Given the data, the residuals will vary. \n        # We're predicting the largest residuals based on known data.\n        expected_indices = [0, 2, 4, 1, 3]  # This is based on a manual observation.\n        self.assertEqual(indices, expected_indices)\n        # check if model was used to generate indices\n        y = df['col2'].values\n        X = df['col1'].values.reshape(-1, 1)\n        residuals = y - model.predict(X)\n        largest_residual_indices = heapq.nlargest(10, range(len(residuals)), key=lambda i: abs(residuals[i]))\n        self.assertListEqual(largest_residual_indices, indices)\n    def test_deterministic_case_3(self):\n        df = pd.DataFrame({\n            'col1': [1, 2, 3, 4, 5],\n            'col2': [5, 4, 3, 2, 1]\n        })\n        indices, model = task_func(df, 'col1', 'col2')\n        self.assertTrue(isinstance(model, LinearRegression))\n        # Given the inverse linear relationship, the residuals should be close to zero.\n        # Hence, any index could be in the top N residuals.\n        self.assertEqual(len(indices), 5)\n        # check if model was used to generate indices\n        y = df['col2'].values\n        X = df['col1'].values.reshape(-1, 1)\n        residuals = y - model.predict(X)\n        largest_residual_indices = heapq.nlargest(10, range(len(residuals)), key=lambda i: abs(residuals[i]))\n        self.assertListEqual(largest_residual_indices, indices)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "If you have a nested list, replace each sublist with a random letter and return a count of each letter in the final list.\nThe function should output with:\n    dict: A dictionary containing count of each letter in the list.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n```",
        "gt": "from collections import Counter\nimport random\nimport string\n# Constants\nLETTERS = string.ascii_letters\ndef task_func(list_of_lists):\n    flat_list = [random.choice(LETTERS) for _ in list_of_lists]\n\n    return dict(Counter(flat_list))",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    # Input 1: Standard nested list with string values\n    def test_case_1(self):\n        result = task_func([['Pizza', 'Burger'], ['Pizza', 'Coke'], ['Pasta', 'Coke']])\n        assert isinstance(result, dict)\n        assert sum(result.values()) == 3\n    # Input 2: Nested list with numerical values\n    def test_case_2(self):\n        result = task_func([[1, 2], [3, 4], [5, 6]])\n        assert isinstance(result, dict)\n        assert sum(result.values()) == 3\n    # Input 3: Nested list with mixed string and numerical values\n    def test_case_3(self):\n        result = task_func([['Pizza', 1], [2, 'Coke'], ['Pasta', 3]])\n        assert isinstance(result, dict)\n        assert sum(result.values()) == 3\n    # Input 4: Empty list\n    def test_case_4(self):\n        result = task_func([])\n        assert isinstance(result, dict)\n        assert sum(result.values()) == 0\n    # Input 5: Nested list with a single sublist\n    def test_case_5(self):\n        result = task_func([['Pizza']])\n        assert isinstance(result, dict)\n        assert sum(result.values()) == 1",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze an \"L\" list by calculating the mean, median, mode, and standard deviation. Visualize the data by returning a histogram plot.\nThe function should output with:\n    dict: A dictionary with the 'mean', 'median', 'mode', 'std_dev' of 'L, and the 'plot' Axes object.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n```",
        "gt": "import numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(L):\n    mean = np.mean(L)\n    median = np.median(L)\n    mode = Counter(L).most_common(1)[0][0]\n    std_dev = np.std(L)\n    \n    plt.hist(L, bins='auto')\n    plt.title('Histogram of Data')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    return {'mean': mean, 'median': median, 'mode': mode, 'std_dev': std_dev, 'plot': plt.gca()}",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        L = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        stats = task_func(L)\n        self.assertAlmostEqual(stats['mean'], np.mean(L))\n        self.assertAlmostEqual(stats['median'], np.median(L))\n        self.assertEqual(stats['mode'], 1)\n        self.assertAlmostEqual(stats['std_dev'], np.std(L))\n        self.assertIsInstance(stats['plot'], plt.Axes)\n    def test_case_2(self):\n        L = [5, 5, 5, 5, 5]\n        stats = task_func(L)\n        self.assertAlmostEqual(stats['mean'], 5.0)\n        self.assertAlmostEqual(stats['median'], 5.0)\n        self.assertEqual(stats['mode'], 5)\n        self.assertAlmostEqual(stats['std_dev'], 0.0)\n        self.assertIsInstance(stats['plot'], plt.Axes)\n    def test_case_3(self):\n        L = [1, 2, 3, 4, 5, 5, 6, 7, 8, 8, 8, 9]\n        stats = task_func(L)\n        self.assertAlmostEqual(stats['mean'], np.mean(L))\n        self.assertAlmostEqual(stats['median'], np.median(L))\n        self.assertEqual(stats['mode'], 8)\n        self.assertAlmostEqual(stats['std_dev'], np.std(L))\n        self.assertIsInstance(stats['plot'], plt.Axes)\n    def test_case_4(self):\n        L = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n        stats = task_func(L)\n        self.assertAlmostEqual(stats['mean'], np.mean(L))\n        self.assertAlmostEqual(stats['median'], np.median(L))\n        self.assertEqual(stats['mode'], 10)\n        self.assertAlmostEqual(stats['std_dev'], np.std(L))\n        self.assertIsInstance(stats['plot'], plt.Axes)\n    def test_case_5(self):\n        L = [5]\n        stats = task_func(L)\n        self.assertAlmostEqual(stats['mean'], 5.0)\n        self.assertAlmostEqual(stats['median'], 5.0)\n        self.assertEqual(stats['mode'], 5)\n        self.assertAlmostEqual(stats['std_dev'], 0.0)\n        self.assertIsInstance(stats['plot'], plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads from a given file pointer to a JSON file, evaluates strings that represent dictionaries to actual dictionaries, and counts the frequency of each key across all dictionary entries in the JSON data.\nNote that: This function assumes the input JSON data is a list of dictionaries or strings that can be evaluated as dictionaries.\nThe function should output with:\n    collections.Counter: A Counter object representing the frequency of each key found in the dictionaries.\nYou should write self-contained code starting with:\n```\nimport ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n```",
        "gt": "import ast\nimport json\nfrom collections import Counter\ndef task_func(file_pointer):\n\n    data = json.load(file_pointer)\n    key_frequency_counter = Counter()\n\n    for item in data:\n        if isinstance(item, str):\n            try:\n                item = ast.literal_eval(item)\n            except ValueError:\n                continue\n\n        if isinstance(item, dict):\n            key_frequency_counter.update(item.keys())\n\n    return key_frequency_counter",
        "test": "import unittest\nfrom io import BytesIO\nfrom collections import Counter\nimport json\nclass TestCases(unittest.TestCase):\n    def test_with_dicts(self):\n        # Simulate a JSON file containing dictionaries\n        data = json.dumps([{\"name\": \"John\", \"age\": 30}, {\"name\": \"Jane\", \"age\": 25}, {\"name\": \"Jake\"}]).encode('utf-8')\n        json_file = BytesIO(data)\n        # Expected result is a Counter object with the frequency of each key\n        expected = Counter({'name': 3, 'age': 2})\n        result = task_func(json_file)\n        self.assertEqual(result, expected)\n    def test_with_string_repr_dicts(self):\n        # Simulate a JSON file containing string representations of dictionaries\n        data = json.dumps(['{\"city\": \"New York\"}', '{\"city\": \"Los Angeles\", \"temp\": 75}']).encode('utf-8')\n        json_file = BytesIO(data)\n        expected = Counter({'city': 2, 'temp': 1})\n        result = task_func(json_file)\n        self.assertEqual(result, expected)\n    def test_with_invalid_json(self):\n        # Simulate an invalid JSON file\n        data = b'invalid json'\n        json_file = BytesIO(data)\n        # In this case, the function should either return an empty Counter or raise a specific exception\n        # Depending on how you've implemented error handling in your function, adjust this test accordingly\n        with self.assertRaises(json.JSONDecodeError):\n            task_func(json_file)\n    def test_empty_json(self):\n        # Simulate an empty JSON file\n        data = json.dumps([]).encode('utf-8')\n        json_file = BytesIO(data)\n        expected = Counter()\n        result = task_func(json_file)\n        self.assertEqual(result, expected)\n    def test_mixed_valid_invalid_dicts(self):\n        # Simulate a JSON file with a mix of valid and invalid dictionary strings\n        data = json.dumps(['{\"name\": \"John\"}', 'Invalid', '{\"age\": 30}']).encode('utf-8')\n        json_file = BytesIO(data)\n        expected = Counter({'name': 1, 'age': 1})\n        result = task_func(json_file)\n        self.assertEqual(result, expected)\n    def test_nested_dicts(self):\n        # Simulate a JSON file containing nested dictionaries (should only count top-level keys)\n        data = json.dumps([{\"person\": {\"name\": \"John\", \"age\": 30}}, {\"person\": {\"city\": \"New York\"}}]).encode('utf-8')\n        json_file = BytesIO(data)\n        expected = Counter({'person': 2})\n        result = task_func(json_file)\n        self.assertEqual(result, expected)\n    def test_with_actual_json_objects_instead_of_strings(self):\n        # Simulate a JSON file with actual JSON objects (dictionaries) instead of string representations\n        data = json.dumps([{\"key1\": \"value1\"}, {\"key2\": \"value2\", \"key3\": \"value3\"}]).encode('utf-8')\n        json_file = BytesIO(data)\n        expected = Counter({'key1': 1, 'key2': 1, 'key3': 1})\n        result = task_func(json_file)\n        self.assertEqual(result, expected)\n    def test_invalid_json_structure(self):\n        # Simulate a JSON file that is not a list\n        data = json.dumps({\"not\": \"a list\"}).encode('utf-8')\n        json_file = BytesIO(data)\n        # Depending on how you've implemented error handling, adjust this test accordingly\n        # Here we expect an error or a specific handling\n        with self.assertRaises(SyntaxError):\n            task_func(json_file)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Remove duplicate and stopwords from a string \"text.\" Then, generate a count of n-grams (default is bigrams) in the text.\nThe function should output with:\n    dict: The count of the n-grams in the text.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n```",
        "gt": "import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text, n=2):\n    # Normalize spaces and remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove all punctuation\n    text = re.sub(r'\\s+', ' ', text)  # Normalize whitespace\n\n    # Filter out stopwords and split into words\n    words = [word.lower() for word in text.split() if word.lower() not in STOPWORDS]\n\n    # Generate n-grams\n    ngrams = zip(*[words[i:] for i in range(n)])\n\n    return Counter(ngrams)",
        "test": "import unittest\nfrom collections import Counter\nimport string\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        \"\"\"\n        Test Case 1: Simple Text\n        - Input: A simple text string with no duplicated words or stopwords\n        - Expected Output: A Counter object with the count of each bigram\n        \"\"\"\n        text = \"The quick brown fox jumps over the lazy dog.\"\n        result = task_func(text)\n        expected = Counter({('quick', 'brown'): 1, ('brown', 'fox'): 1, ('fox', 'jumps'): 1, ('jumps', 'lazy'): 1, ('lazy', 'dog'): 1})\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        \"\"\"\n        Test Case 2: Text with Duplicated Words\n        - Input: A text string with duplicated consecutive words\n        - Expected Output: A Counter object with the count of each bigram, excluding duplicated words\n        \"\"\"\n        text = \"This is is a simple simple test test.\"\n        result = task_func(text)\n        expected = Counter({('simple', 'simple'): 1, ('simple', 'test'): 1, ('test', 'test'): 1})\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        \"\"\"\n        Test Case 3: Text with Stopwords\n        - Input: A text string with common English stopwords\n        - Expected Output: A Counter object with the count of each bigram, excluding stopwords\n        \"\"\"\n        text = \"This is a test of the function.\"\n        result = task_func(text)\n        expected = Counter({('test', 'function'): 1})\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        # This test involves punctuation; ensure punctuation handling is consistent with function logic\n        text = \"Hello, world!\"\n        result = task_func(text)\n        expected = Counter({\n            ('hello', 'world'): 1\n        })\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        \"\"\"\n        Test Case 5: Empty Text\n        - Input: An empty text string\n        - Expected Output: An empty Counter object\n        \"\"\"\n        text = \"\"\n        result = task_func(text)\n        expected = Counter()\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Make a GET request to an API, extract data that matches a RegEx pattern, and write it to a CSV file.\nNote that: The CSV file generated name is \"matched_data.csv\" The JSON response from the GET request in the API contains a key named \"data\", from which the data is extracted.\nThe function should output with:\n    str: The absolute path to the CSV file containing matched data. If no data is matched, the file will be empty.\nYou should write self-contained code starting with:\n```\nimport re\nimport requests\nimport json\nimport csv\nimport os  \n# Constants\nAPI_URL = 'https://api.example.com/data'\ndef task_func(pattern):\n```",
        "gt": "import re\nimport requests\nimport json\nimport csv\nimport os  \n# Constants\nAPI_URL = 'https://api.example.com/data'\ndef task_func(pattern):\n\n    response = requests.get(API_URL)\n    data = json.loads(response.text)\n    matched_data = [re.findall(pattern, str(item)) for item in data['data']]\n    with open('matched_data.csv', 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(matched_data)\n    return os.path.abspath('matched_data.csv')",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport os\ndef mock_requests_get(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, json_data):\n            self.json_data = json_data\n            self.text = json.dumps(json_data)\n        \n        def json(self):\n            return self.json_data\n    if args[0] == 'https://api.example.com/data':\n        return MockResponse(MOCK_API_RESPONSES.pop(0))\n    return MockResponse(None)\nMOCK_API_RESPONSES = [\n    {\"data\": [\"john.doe@example.com\", \"jane.smith@domain.org\"]},\n    {\"data\": [\"123-45-6789\", \"987-65-4321\"]},\n    {\"data\": [\"apple\", \"banana\", \"cherry\"]},\n    {\"data\": []},\n    {\"data\": [\"test1@example.com\", \"test2@domain.org\", \"123-45-6789\", \"apple\"]}\n]\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        if os.path.exists(\"matched_data.csv\"):\n            os.remove(\"matched_data.csv\")\n    def tearDown(self):\n        if os.path.exists(\"matched_data.csv\"):\n            os.remove(\"matched_data.csv\")\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_1(self, mock_get):\n        result = task_func(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b')\n        self.assertTrue(os.path.exists(result))\n        with open(\"matched_data.csv\", \"r\") as file:\n            content = file.read()\n            self.assertIn(\"john.doe@example.com\", content)\n            self.assertIn(\"jane.smith@domain.org\", content)\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_2(self, mock_get):\n        result = task_func('\\d{3}-\\d{2}-\\d{4}')\n        self.assertTrue(os.path.exists(result))\n        with open(\"matched_data.csv\", \"r\") as file:\n            content = file.read()\n            self.assertIn(\"123-45-6789\", content)\n            self.assertIn(\"987-65-4321\", content)\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_3(self, mock_get):\n        result = task_func(r'apple')\n        self.assertTrue(os.path.exists(result))\n        with open(\"matched_data.csv\", \"r\") as file:\n            content = file.read()\n            self.assertIn(\"apple\", content)\n            self.assertNotIn(\"banana\", content)\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_4(self, mock_get):\n        result = task_func(r'no_match')\n        self.assertTrue(os.path.exists(result))\n        with open(\"matched_data.csv\", \"r\") as file:\n            content = file.read()\n            self.assertEqual(content, \"\")\n    @patch('requests.get', side_effect=mock_requests_get)\n    def test_case_5(self, mock_get):\n        result = task_func(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b')\n        self.assertTrue(os.path.exists(result))\n        with open(\"matched_data.csv\", \"r\") as file:\n            content = file.read()\n            self.assertNotIn(\"john.doe@example.com\", content)\n            self.assertNotIn(\"jane.smith@domain.org\", content)\n            self.assertIn(\"test1@example.com\", content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the most common value in each column of a csv file with column names. If some values occur the same number of times, the values are sorted alphabetically and the first is considered most common. If an empty csv is passed, an empty dictionary is returned.\nThe function should output with:\n    dict: A dictionary with column names as keys and most common values as values.\nYou should write self-contained code starting with:\n```\nimport collections\nimport numpy as np\ndef task_func(file_name):\n```",
        "gt": "import collections\nimport numpy as np\ndef task_func(file_name):\n    data = np.genfromtxt(file_name, delimiter=',', names=True,\n                         dtype=None, encoding=None)\n    common_values = {}\n\n    if len(np.atleast_1d(data)) == 0:\n        return {}\n\n    if len(np.atleast_1d(data)) == 1:\n        for col in data.dtype.names:\n            common_values[col] = data[col].item()\n\n    else:\n        for col in data.dtype.names:\n            counter = collections.Counter(data[col])\n            if counter.most_common(2)[0][1] == counter.most_common(2)[1][1]:\n                common_values[col] = sorted(counter.items())[0][0]\n            else:\n                common_values[col] = counter.most_common(1)[0][0]\n\n    return common_values",
        "test": "import unittest\nimport os\nimport shutil\nimport tempfile\nimport csv\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to house the CSV files\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove the temporary directory after the test\n        shutil.rmtree(self.test_dir)\n    def create_csv(self, file_name, headers, data):\n        # Helper function to create a CSV file\n        path = os.path.join(self.test_dir, file_name)\n        with open(path, 'w', newline='') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=headers)\n            writer.writeheader()\n            for row in data:\n                writer.writerow(row)\n        return path\n    def test_empty_csv(self):\n        # Test for an empty CSV file\n        file_path = self.create_csv('empty.csv', ['Name', 'Age'], [])\n        result = task_func(file_path)\n        self.assertEqual(result, {})\n    def test_single_entry(self):\n        # Test for a CSV file with a single entry\n        file_path = self.create_csv('single.csv', ['Name', 'Age'], [{'Name': 'John', 'Age': '30'}])\n        result = task_func(file_path)\n        self.assertEqual(result, {'Name': 'John', 'Age': 30})\n    def test_common_values_sorted(self):\n        # Test for common values, ensuring alphabetical sorting\n        file_path = self.create_csv('common_values.csv', ['Fruit'], [{'Fruit': 'Apple'}, {'Fruit': 'Banana'}, {'Fruit': 'Apple'}, {'Fruit': 'Banana'}, {'Fruit': 'Cherry'}])\n        result = task_func(file_path)\n        self.assertEqual(result, {'Fruit': 'Apple'})\n    def test_multiple_columns(self):\n        # Test for multiple columns and entries\n        data = [{'Name': 'Alice', 'Age': '25', 'Country': 'USA'},\n                {'Name': 'Bob', 'Age': '30', 'Country': 'USA'},\n                {'Name': 'Alice', 'Age': '25', 'Country': 'Canada'}]\n        file_path = self.create_csv('multi_columns.csv', ['Name', 'Age', 'Country'], data)\n        result = task_func(file_path)\n        expected = {'Name': 'Alice', 'Age': 25, 'Country': 'USA'}\n        self.assertEqual(result, expected)\n    def test_tie_breaking(self):\n        # Test for tie-breaking in value counts\n        data = [{'Name': 'Alice'}, {'Name': 'Bob'}, {'Name': 'Alice'}, {'Name': 'Bob'}]\n        file_path = self.create_csv('tie.csv', ['Name'], data)\n        result = task_func(file_path)\n        self.assertEqual(result, {'Name': 'Alice'})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a dictionary with a fake event schedule given an event time. The function converts a given epoch in milliseconds into a datetime object in the current system time's timezone. It generates a fake event name using Faker. Then, it uses pytz and regex to check if specified timezones are valid (i.e. in pytz.all_timezones or can be parsed using regex from UTC\u00b1HH:MM format), ignoring invalid ones. If none is valid or if timezones were not specified, it selects UTC; otherwise, it randomly selects a valid one using Faker. Finally, the function returns a dictionary with the fake event name as key and a list as value, where the list itself contains a schedule, i.e. a dictionary with keys 'date', 'time', 'timezone'.\nThe function should output with:\n    A dictionary containing event names as keys and a list of event details as values.\n    Event details include the date, time, and timezone of the event.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n```",
        "gt": "from datetime import datetime\nimport pytz\nimport re\nfrom faker import Faker\ndef task_func(epoch_milliseconds, seed=0, timezones=[\"UTC\"]):\n    Faker.seed(seed)\n\n    faker_instance = Faker()\n\n    event_datetime = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n\n    event_name = faker_instance.unique.first_name()\n\n    validated_timezones = []\n    utc_offset_regex = r\"^UTC([+-])(0[0-9]|1[0-4]):([0-5][0-9])$\"\n    for tz in timezones:\n        if (\n            (tz == \"UTC\")\n            or (re.match(utc_offset_regex, tz))\n            or (tz in pytz.all_timezones)\n        ):\n            validated_timezones.append(tz)\n    if not validated_timezones:\n        validated_timezones = [\"UTC\"]\n\n    timezone = faker_instance.random_element(elements=(validated_timezones))\n\n    event_schedule = {\n        event_name: [\n            {\n                \"date\": event_datetime.date(),\n                \"time\": event_datetime.time(),\n                \"timezone\": timezone,\n            }\n        ]\n    }\n\n    return event_schedule",
        "test": "import unittest\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    TIMEZONES = [\"UTC\", \"UTC+01:00\", \"UTC+02:00\", \"UTC+03:00\", \"UTC+04:00\", \"UTC+05:00\"]\n    default_time = 1236472051807\n    def check_structure_and_content(self, schedule, epoch_milliseconds):\n        event_name = list(schedule.keys())[0]\n        event_details = schedule[event_name]\n        event_datetime = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n        self.assertIsInstance(schedule, dict)\n        self.assertEqual(len(schedule), 1)\n        self.assertEqual(len(event_details), 1)\n        self.assertEqual(event_details[0][\"date\"], event_datetime.date())\n        self.assertEqual(event_details[0][\"time\"], event_datetime.time())\n        self.assertIn(\n            event_details[0][\"timezone\"], self.TIMEZONES\n        )  # expected in these tests\n    def test_case_1(self):\n        # Test defaults\n        epoch_milliseconds = self.default_time\n        schedule = task_func(epoch_milliseconds)\n        self.check_structure_and_content(schedule, epoch_milliseconds)\n        self.assertTrue(schedule[list(schedule.keys())[0]][0][\"timezone\"] == \"UTC\")\n    def test_case_2(self):\n        # Test with a specific known epoch\n        epoch_milliseconds = self.default_time\n        schedule = task_func(epoch_milliseconds, seed=2, timezones=self.TIMEZONES)\n        self.check_structure_and_content(schedule, epoch_milliseconds)\n    def test_case_3(self):\n        # Test with an invalid timezone list - should default to UTC\n        schedule = task_func(self.default_time, seed=3, timezones=[\"INVALID\"])\n        self.assertTrue(schedule[list(schedule.keys())[0]][0][\"timezone\"] == \"UTC\")\n        schedule = task_func(self.default_time, seed=3, timezones=[\"FOO\", \"BAR\"])\n        self.assertTrue(schedule[list(schedule.keys())[0]][0][\"timezone\"] == \"UTC\")\n        for valid_tz in self.TIMEZONES:\n            schedule = task_func(self.default_time, seed=3, timezones=[\"INVALID\", valid_tz])\n            self.assertTrue(\n                schedule[list(schedule.keys())[0]][0][\"timezone\"] == valid_tz,\n                f'Expected {valid_tz}, got {schedule[list(schedule.keys())[0]][0][\"timezone\"]}',\n            )\n    def test_case_4(self):\n        # Test random seed reproducibility\n        schedule1 = task_func(self.default_time, seed=42, timezones=self.TIMEZONES)\n        schedule2 = task_func(self.default_time, seed=42, timezones=self.TIMEZONES)\n        self.assertEqual(schedule1, schedule2)\n    def test_case_6(self):\n        # Test handling invalid dates - invalid types\n        for invalid in [\"1\", [], None]:\n            with self.assertRaises(TypeError):\n                task_func(invalid)\n    def test_case_7(self):\n        # Test handling extremely future dates\n        epoch_milliseconds = (\n            4133980800000  # This is a date far in the future (2100-12-31)\n        )\n        schedule = task_func(epoch_milliseconds, seed=5, timezones=[\"UTC\", \"UTC+05:00\"])\n        self.check_structure_and_content(schedule, epoch_milliseconds)\n        # No additional asserts required, check_structure_and_content will validate\n    def test_case_8(self):\n        # Test handling leap year date\n        epoch_milliseconds = 1582934400000  # This corresponds to 2020-02-29\n        schedule = task_func(\n            epoch_milliseconds, seed=6, timezones=[\"UTC\", \"UTC+01:00\", \"UTC+02:00\"]\n        )\n        self.check_structure_and_content(schedule, epoch_milliseconds)\n        # Validate it handles the leap day correctly\n        event_date = schedule[list(schedule.keys())[0]][0][\"date\"]\n        self.assertTrue(event_date.year == 2020)\n        self.assertTrue(event_date.month == 2)\n        self.assertTrue(event_date.day == 29)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read all JSON files from the specified directory, count the occurrence of keys starting with certain prefixes (defined in the PREFIXES constant), and return a dictionary of statistics.\nThe function should output with:\n    dict: A dictionary with keys as prefixes (from PREFIXES) and values as their counts in the JSON files.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n```",
        "gt": "import json\nimport os\n# Constants\nPREFIXES = [\"is_\", \"has_\", \"can_\", \"should_\"]\ndef task_func(directory):\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(f'{directory}/{filename}', 'r') as f:\n                data = json.load(f)\n\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n\n    return stats",
        "test": "import unittest\nfrom unittest.mock import mock_open, patch\nimport json\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Example JSON data\n        self.json_data_1 = json.dumps({\"is_valid\": True, \"has_value\": False})\n        self.json_data_2 = json.dumps({\"can_do\": True, \"should_do\": False})\n        self.json_data_no_prefix = json.dumps({\"name\": \"John\", \"age\": 30})  # No matching prefixes\n        self.invalid_json = '{\"invalid\": True,'  # Malformed JSON\n        self.non_json_content = \"Not JSON content\"  # Non-JSON content for testing mixed content\n        self.file_names = [\"file1.json\", \"file2.json\"]\n    def tearDown(self):\n        # Code to delete files or directories\n        if os.path.exists('some_file'):\n            os.remove('some_file')\n        if os.path.exists('some_directory'):\n            shutil.rmtree('some_directory')\n    \n    @patch('os.listdir')\n    @patch('builtins.open', new_callable=mock_open)\n    def test_json_prefixes(self, mock_file_open, mock_listdir):\n        # Setup mock to simulate file reading and directory listing\n        mock_listdir.return_value = self.file_names\n        mock_file_open().read.side_effect = [self.json_data_1, self.json_data_2]\n        \n        expected_result = {'is_': 1, 'has_': 1, 'can_': 1, 'should_': 1}\n        result = task_func('/fake/directory')\n        self.assertEqual(result, expected_result)\n    @patch('os.listdir')\n    @patch('builtins.open', new_callable=mock_open)\n    def test_no_json_files(self, mock_file_open, mock_listdir):\n        mock_listdir.return_value = ['file1.txt', 'data.bin']\n        result = task_func('/fake/directory')\n        expected = {prefix: 0 for prefix in PREFIXES}\n        self.assertEqual(result, expected)\n    @patch('os.listdir')\n    @patch('builtins.open', new_callable=mock_open)\n    def test_json_files_without_matching_prefixes(self, mock_file_open, mock_listdir):\n        # Setup mock to simulate file reading and directory listing\n        mock_listdir.return_value = ['file1.json']\n        mock_file_open().read.side_effect = [self.json_data_no_prefix]\n        \n        expected_result = {'is_': 0, 'has_': 0, 'can_': 0, 'should_': 0}\n        result = task_func('/fake/directory')\n        self.assertEqual(result, expected_result)\n    @patch('os.listdir')\n    @patch('builtins.open', new_callable=mock_open)\n    def test_multiple_json_files_with_repeated_prefixes(self, mock_file_open, mock_listdir):\n        mock_file_open().read.side_effect = [self.json_data_1, self.json_data_1]\n        mock_listdir.return_value = ['file1.json', 'file2.json']\n        result = task_func('/fake/directory')\n        expected = {'is_': 2, 'has_': 2, 'can_': 0, 'should_': 0}\n        self.assertEqual(result, expected)\n    @patch('os.listdir')\n    @patch('builtins.open', new_callable=mock_open)\n    def test_mixed_content_in_directory(self, mock_file_open, mock_listdir):\n        # Set up the directory listing to include JSON and non-JSON files\n        mock_listdir.return_value = self.file_names\n        # Mock read side effects to provide JSON data or raise an error on invalid JSON data\n        mock_file_open.side_effect = [\n            mock_open(read_data=self.json_data_1).return_value,\n            mock_open(read_data=self.non_json_content).return_value,\n            mock_open(read_data=self.json_data_2).return_value\n        ]\n        \n        # Modify the function to skip files that do not contain valid JSON\n        def custom_task_func(directory):\n            stats = {prefix: 0 for prefix in PREFIXES}\n            for filename in os.listdir(directory):\n                if filename.endswith('.json'):\n                    try:\n                        with open(f'{directory}/{filename}', 'r') as f:\n                            data = json.load(f)\n                        for key in data.keys():\n                            for prefix in PREFIXES:\n                                if key.startswith(prefix):\n                                    stats[prefix] += 1\n                    except json.JSONDecodeError:\n                        print(f\"Skipping non-JSON content in {filename}\")\n            return stats\n        # Call the modified function\n        result = custom_task_func('/fake/directory')\n        expected_result = {'can_': 0, 'has_': 1, 'is_': 1, 'should_': 0}\n        self.assertEqual(result, expected_result)\n        # Ensure that non-JSON content does not cause a failure\n        calls = [unittest.mock.call(f'/fake/directory/{fn}', 'r') for fn in self.file_names if fn.endswith('.json')]\n        mock_file_open.assert_has_calls(calls, any_order=True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on the specified file extensions (EXTENSIONS). It also issues warnings for files that could not be transferred due to any issues.\nThe function should output with:\n    transferred_files (list): A list containing the names of files that were successfully transferred.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n```",
        "gt": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \n    warnings.simplefilter('always')\n    transferred_files = []  # Ensure this is reset each time the function is called\n\n    for ext in EXTENSIONS:\n        for src_file in glob.glob(os.path.join(SOURCE_DIR, '*' + ext)):\n            try:\n                shutil.move(src_file, DEST_DIR)\n                transferred_files.append(os.path.basename(src_file))\n            except Exception as e:\n                warnings.warn(f\"Unable to move file {src_file}: {str(e)}\")\n\n    time.sleep(1)  # To ensure all warnings are processed\n    return transferred_files",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport tempfile\nimport shutil\nimport os\nimport warnings\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.mkdtemp()\n        self.source_dir = os.path.join(self.temp_dir, 'source_dir')\n        self.dest_dir = os.path.join(self.temp_dir, 'dest_dir')\n        os.makedirs(self.source_dir, exist_ok=True)\n        os.makedirs(self.dest_dir, exist_ok=True)\n        self.files = ['file1.txt', 'file2.csv', 'file3.xlsx', 'file4.jpg', 'invalid file name.jpg']\n        for file in self.files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write(\"Dummy content\")\n    def tearDown(self):\n        shutil.rmtree(self.temp_dir)\n    def configure_mock_glob_move(self, mock_glob, mock_move, files_to_move):\n        mock_glob.return_value = [os.path.join(self.source_dir, f) for f in files_to_move]\n        mock_move.side_effect = [None for _ in files_to_move]  # Simulate successful moves without actual file operations\n    @patch('shutil.move')\n    @patch('glob.glob')\n    def test_successful_transfer(self, mock_glob, mock_move):\n        self.configure_mock_glob_move(mock_glob, mock_move, ['file1.txt', 'file2.csv'])\n        transferred_files = task_func(self.source_dir, self.dest_dir, ['.txt', '.csv'])\n        self.assertEqual(transferred_files, ['file1.txt', 'file2.csv'])\n    @patch('shutil.move')\n    @patch('glob.glob')\n    def test_empty_source_directory(self, mock_glob, mock_move):\n        mock_glob.return_value = []\n        transferred_files = task_func(self.source_dir, self.dest_dir, ['.txt', '.csv'])\n        self.assertEqual(transferred_files, [])\n    @patch('shutil.move')\n    @patch('glob.glob')\n    def test_invalid_file_extensions(self, mock_glob, mock_move):\n        mock_glob.return_value = []\n        transferred_files = task_func(self.source_dir, self.dest_dir, ['.html', '.png'])\n        self.assertEqual(transferred_files, [])\n    @patch('shutil.move')\n    @patch('glob.glob')\n    def test_exception_handling(self, mock_glob, mock_move):\n        mock_glob.return_value = [os.path.join(self.source_dir, 'invalid file name.jpg')]\n        mock_move.side_effect = Exception(\"Permission denied\")\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            transferred_files = task_func(self.source_dir, self.dest_dir, ['.jpg'])\n        self.assertEqual(transferred_files, [])\n        self.assertTrue(any(\"Unable to move file\" in str(warn.message) for warn in w))\n    @patch('shutil.move')\n    @patch('glob.glob')\n    def test_all_extensions(self, mock_glob, mock_move):\n        self.configure_mock_glob_move(mock_glob, mock_move, self.files[:4])  # Exclude invalid files\n        transferred_files = task_func(self.source_dir, self.dest_dir, ['.txt', '.csv', '.xlsx', '.jpg'])\n        self.assertEqual(transferred_files, ['file1.txt', 'file2.csv', 'file3.xlsx', 'file4.jpg'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the occurrences of each two-letter combination in the sanitized word, where only alphabetic characters are considered.\nThe function should output with:\n    collections.defaultdict: A dictionary with keys as two-letter combinations and values as their counts in the sanitized word.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n```",
        "gt": "from collections import defaultdict\nimport re\ndef task_func(word: str) -> dict:\n    # Sanitize the word to include only alphabetic characters\n    sanitized_word = re.sub('[^A-Za-z]', '', word)\n    occurrences = defaultdict(int)\n    pairs = [''.join(x) for x in zip(sanitized_word, sanitized_word[1:])]\n\n    for pair in pairs:\n        occurrences[pair] += 1\n\n    return occurrences",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('abcdef')\n        expected = {'ab': 1, 'bc': 1, 'cd': 1, 'de': 1, 'ef': 1}\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        result = task_func('aabbcc')\n        expected = {'aa': 1, 'ab': 1, 'bb': 1, 'bc': 1, 'cc': 1}\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        result = task_func('a')\n        expected = {}\n        self.assertEqual(result, expected)\n    def test_case_4(self):\n        result = task_func('')\n        expected = {}\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        result = task_func('AbCd')\n        expected = {'Ab': 1, 'bC': 1, 'Cd': 1}\n        self.assertEqual(result, expected)\n    def test_case_6(self):\n        # Test with non-alphabetic characters in the word\n        result = task_func('a1!b@c#d$')\n        expected = {'ab': 1, 'bc': 1, 'cd': 1}\n        self.assertEqual(result, expected)\n    def test_case_7(self):\n        # Test with mixed case and non-alphabetic characters\n        result = task_func('AaBb!!Cc123')\n        expected = {'Aa': 1, 'aB': 1, 'Bb': 1, 'bC': 1, 'Cc': 1}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function appends a given path to sys.path and updates an SQLite database with the path, creating the table if needed and avoiding duplicates.\nThe function should output with:\n    str: The path that was appended to sys.path and inserted into the database.\nYou should write self-contained code starting with:\n```\nimport sys\nimport sqlite3\n# Constants\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n```",
        "gt": "import sys\nimport sqlite3\n# Constants\nPATH_TO_APPEND = \"path/to/whatever\"\nDATABASE = \"path/to/database.db\"\ndef task_func(path_to_append=PATH_TO_APPEND, database=DATABASE):\n    sys.path.append(path_to_append)\n\n    conn = sqlite3.connect(database)\n    cur = conn.cursor()\n    cur.execute(\"CREATE TABLE IF NOT EXISTS paths (path TEXT UNIQUE)\")\n    cur.execute(\"INSERT OR IGNORE INTO paths (path) VALUES (?)\", (path_to_append,))\n    conn.commit()\n    conn.close()\n\n    return path_to_append",
        "test": "import unittest\nimport sqlite3\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def setUp(self):\n        path_to_create = os.path.dirname(PATH_TO_APPEND)\n        os.makedirs(path_to_create, exist_ok=True)\n        self.test_db = DATABASE\n    def test_basic_path_insertion(self):\n        \"\"\"Test the function when a path is provided.\"\"\"\n        test_path = \"path/to/test/path\"\n        result = task_func(test_path, self.test_db)\n        self.assertEqual(result, test_path)\n        # Check the database to ensure the path was saved\n        conn = sqlite3.connect(self.test_db)\n        cur = conn.cursor()\n        cur.execute(\"SELECT * FROM paths WHERE path=?\", (test_path,))\n        fetched_path = cur.fetchone()\n        conn.close()\n        self.assertIsNotNone(fetched_path)\n        self.assertEqual(fetched_path[0], test_path)\n    def test_existing_path(self):\n        \"\"\"Test the function when an existing path is provided.\"\"\"\n        # Insert an existing path\n        existing_path = \"existing/path\"\n        task_func(existing_path, self.test_db)\n        # Attempt to insert the same path again\n        result = task_func(existing_path, self.test_db)\n        self.assertEqual(result, existing_path)\n        # Check the database to ensure there's only one entry for the existing path\n        conn = sqlite3.connect(self.test_db)\n        cur = conn.cursor()\n        cur.execute(\"SELECT COUNT(*) FROM paths WHERE path=?\", (existing_path,))\n        count = cur.fetchone()[0]\n        conn.close()\n        self.assertEqual(count, 1)\n    def test_multiple_paths(self):\n        \"\"\"Test the function when multiple paths are provided.\"\"\"\n        paths = [\"path1\", \"path2\", \"path3\"]\n        for path in paths:\n            result = task_func(path, self.test_db)\n            self.assertEqual(result, path)\n        # Check the database to ensure all paths are saved\n        conn = sqlite3.connect(self.test_db)\n        cur = conn.cursor()\n        cur.execute(\"SELECT COUNT(*) FROM paths\")\n        count = cur.fetchone()[0]\n        conn.close()\n        self.assertEqual(count, len(paths))\n    def test_database_creation(self):\n        \"\"\"Test the function when the database doesn't exist.\"\"\"\n        new_db = \"path/to/new_test_database.db\"\n        test_path = \"path/to/new\"\n        os.makedirs(os.path.dirname(test_path), exist_ok=True)\n        result = task_func(test_path, new_db)\n        self.assertEqual(result, test_path)\n        # Check the new database to ensure the path was saved\n        conn = sqlite3.connect(new_db)\n        cur = conn.cursor()\n        cur.execute(\"SELECT * FROM paths WHERE path=?\", (test_path,))\n        fetched_path = cur.fetchone()\n        conn.close()\n        self.assertIsNotNone(fetched_path)\n        self.assertEqual(fetched_path[0], test_path)\n    def test_invalid_database(self):\n        \"\"\"Test the function when an invalid database is provided.\"\"\"\n        invalid_db = \"invalid/path/database.db\"\n        test_path = \"test/path\"\n        with self.assertRaises(sqlite3.OperationalError):\n            task_func(test_path, invalid_db)\n    def tearDown(self):\n        # Cleanup the test databases\n        dbs_to_remove = [\"path/to/database.db\", \"path/to/new_test_database.db\"]\n        for db in dbs_to_remove:\n            if os.path.exists(db):\n                os.remove(db)\n        # Cleanup the test directories\n        dirs_to_remove = [\"path/to/whatever\", \"path/to\", \"path\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Shuffles the columns of a numpy array randomly, performs Principal Component Analysis (PCA) to reduce the dimensionality to 2 principal components, and returns these components as a pandas DataFrame.\nNote that: PCA reduction will default to the number of features if fewer than 2. An named but empty DataFrame is returned for arrays without features or with empty content.\nThe function should raise the exception for: ValueError: If the input array is not 2D.\nThe function should output with:\n    pandas.DataFrame: DataFrame with columns 'PC1' and 'PC2' representing the two principal components.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndef task_func(array, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    if not isinstance(array, np.ndarray) or len(array.shape) != 2:\n        raise ValueError(\"Input must be a 2D numpy array.\")\n\n    if array.size == 0 or array.shape[1] == 0:\n        return pd.DataFrame(columns=[\"PC1\", \"PC2\"])\n\n    shuffled_array = np.copy(array)\n    np.random.shuffle(np.transpose(shuffled_array))\n\n    n_components = min(2, shuffled_array.shape[1])\n    pca = PCA(n_components=n_components)\n    principal_components = pca.fit_transform(shuffled_array)\n\n    column_labels = [\"PC1\", \"PC2\"][:n_components]\n    df = pd.DataFrame(data=principal_components, columns=column_labels)\n\n    return df",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.array2x5 = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n        self.array5x1 = np.array([[1], [2], [3], [4], [5]])\n    def test_with_empty_array(self):\n        \"\"\"Test handling of an empty array.\"\"\"\n        array = np.empty((0, 0))\n        df = task_func(array, seed=42)\n        self.assertTrue(df.empty, \"The returned DataFrame should be empty.\")\n        self.assertTrue(\n            (df.columns == [\"PC1\", \"PC2\"]).all(),\n            \"Column names should be 'PC1' and 'PC2' even for an empty DataFrame.\",\n        )\n    def test_with_2x5_array(self):\n        \"\"\"Test PCA on a 2x5 array with shuffled columns.\"\"\"\n        df = task_func(self.array2x5, seed=42)\n        self.assertEqual(df.shape, (2, 2), \"DataFrame shape should be (2, 2).\")\n        self.assertTrue(\n            (df.columns == [\"PC1\", \"PC2\"]).all(),\n            \"Column names should be 'PC1' and 'PC2'.\",\n        )\n    def test_with_5x1_array(self):\n        \"\"\"Test PCA on a 5x1 array.\"\"\"\n        df = task_func(self.array5x1, seed=0)\n        self.assertEqual(\n            df.shape, (5, 1), \"DataFrame shape should be (5, 1) for a single component.\"\n        )\n        self.assertTrue(\n            (df.columns == [\"PC1\"]).all(),\n            \"Column name should be 'PC1' for a single component.\",\n        )\n    def test_invalid_input(self):\n        \"\"\"Test handling of invalid input.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(np.array([1, 2, 3]), seed=42)\n    def test_reproducibility(self):\n        \"\"\"Test if the function is reproducible with the same seed.\"\"\"\n        df1 = task_func(self.array2x5, seed=42)\n        df2 = task_func(self.array2x5, seed=42)\n        pd.testing.assert_frame_equal(\n            df1, df2, \"Results should be identical when using the same seed.\"\n        )\n    def test_pca_correctness(self):\n        \"\"\"\n        Test PCA correctness by ensuring that the variance is captured correctly\n        in the principal components.\n        \"\"\"\n        # Creating a simple array where variance is higher in one dimension\n        # This dataset is designed so that the first principal component should\n        # capture the majority of the variance.\n        array = np.array(\n            [\n                [1, 2, 3, 4, 5],\n                [1, 2, 3, 4, 5],\n                [1, 2, 3, 4, 5],\n                [1, 2, 3, 4, 5],\n                [10, 10, 10, 10, 10],\n            ]\n        )  # Increased variance in the last row\n        df = task_func(array, seed=0)\n        # The PCA should be able to capture the variance in the first principal component\n        # significantly more than in the second, if applicable.\n        # Asserting that the first PC values are not all the same,\n        # which indicates it captured the variance.\n        self.assertFalse(\n            df[\"PC1\"].std() == 0,\n            \"PCA should capture variance along the first principal component.\",\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create n random txt files in a specific directory, write only a single digit random integer into each file, and then reset the cursor to the beginning of each file. The file names start from 'file_1.txt' and increment by 1 for each file.\nThe function should output with:\n    n_files (int): The number of files generated.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\ndef task_func(directory, n_files):\n```",
        "gt": "import os\nimport random\ndef task_func(directory, n_files):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n_files):\n        filename = os.path.join(directory, f\"file_{i+1}.txt\")\n\n        with open(filename, 'w') as file:\n            file.write(str(random.randint(0, 9)))\n            file.seek(0)\n\n    return n_files",
        "test": "import unittest\nimport shutil\nclass TestCases(unittest.TestCase):\n    def base(self, dir, n_files, contents):\n        random.seed(42)\n        # Create directory\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n        # Run function\n        n = task_func(dir, n_files)\n        # Check files\n        self.assertEqual(n, n_files)\n        read_data = []\n        for f in sorted(os.listdir(dir)):\n            self.assertTrue(f.endswith('.txt'))\n            with open(os.path.join(dir, f), 'r') as file:\n                read_data.append(file.read())\n                file.seek(0)\n        self.assertEqual(read_data, contents)\n    def tearDown(self):\n        shutil.rmtree('./directory', ignore_errors=True)\n        shutil.rmtree('./dir', ignore_errors=True)\n        shutil.rmtree('./d', ignore_errors=True)\n    def test_case_1(self):\n        self.base('./directory', 5, ['1', '0', '4', '3', '3'])\n    def test_case_2(self):\n        self.base('./dir', 10, ['1', '9', '0', '4', '3', '3', '2', '1', '8', '1'])\n    def test_case_3(self):\n        self.base('./d', 15, ['1', '9', '6', '0', '0', '1', '3', '0', '4', '3', '3', '2', '1', '8', '1'])\n    def test_case_4(self):\n        self.base('./d', 20, ['1', '9', '6', '0', '0', '1', '3', '3', '8', '9', '0', '0', '8', '4', '3', '3', '2', '1', '8', '1'])\n    def test_case_5(self):\n        self.base('./directory', 25, ['1', '9', '6', '0', '0', '1', '3', '3', '8', '9', '0', '0', '8', '3', '8', '6', '3', '7', '4', '3', '3', '2', '1', '8', '1'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a CSV file, inverse the order of the lines and write the inverted lines back into the file. Then reset the cursor to the beginning of the file.\nThe function should output with:\n    filename (str): The name of the CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport sys\ndef task_func(filename):\n```",
        "gt": "import csv\nimport sys\ndef task_func(filename):\n    try:\n        with open(filename, 'r+') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            file.seek(0)\n            file.truncate()\n\n            writer = csv.writer(file)\n            writer.writerows(reversed(rows))\n\n            file.seek(0)\n    except Exception as e:\n        print(f\"An error occurred: {e}\", file=sys.stderr)\n\n    return filename",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def base(self, filename, contents, expected):\n        # Create file\n        with open(filename, 'w') as file:\n            file.write(contents)\n        # Run function\n        task_func(filename)\n        # Check file\n        with open(filename, 'r') as file:\n            txt = file.read()\n            self.assertEqual(txt, expected)\n        # Remove file\n        os.remove(filename)\n    def test_case_1(self):\n        self.base('file.csv', \"a,b\\nc,d\\ne,f\\ng,h\\n\", \"g,h\\ne,f\\nc,d\\na,b\\n\")\n    \n    def test_case_2(self):\n        self.base('file.csv', \"a,b,c\\nd,e,f\\ng,h,i\\n\", \"g,h,i\\nd,e,f\\na,b,c\\n\")\n    def test_case_3(self):\n        self.base('file.csv', \"a,b,c,d\\ne,f,g,h\\ni,j,k,l\\n\", \"i,j,k,l\\ne,f,g,h\\na,b,c,d\\n\")\n    \n    def test_case_4(self):\n        self.base('file.csv', \"a,b,c,d,e\\nf,g,h,i,j\\nk,l,m,n,o\\n\", \"k,l,m,n,o\\nf,g,h,i,j\\na,b,c,d,e\\n\")\n    def test_case_5(self):\n        self.base('file.csv', \"a,b,c,d,e,f\\ng,h,i,j,k,l\\nm,n,o,p,q,r\\n\", \"m,n,o,p,q,r\\ng,h,i,j,k,l\\na,b,c,d,e,f\\n\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches data from an SQLite database using the provided database path and SQL query. This function will issue a warning of \"The data contains more than 10000 rows.\" when this condition is met.\nThe function should raise the exception for: Exception: If any error occurs during database connection, SQL query execution, or data fetching. The error message provides details about the issue, starting with \"Error fetching data from the database: \".\nThe function should output with:\n    pandas.DataFrame: A DataFrame containing the data fetched from the database.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n```",
        "gt": "import warnings\nimport sqlite3\nimport pandas as pd\ndef task_func(db_path, query, warn_large_dataset=True):\n    if warn_large_dataset:\n        warnings.simplefilter(\"always\")\n\n    try:\n        with sqlite3.connect(db_path) as conn:\n            data = pd.read_sql_query(query, conn)\n\n        if warn_large_dataset and data.shape[0] > 10000:\n            warnings.warn(\"The data contains more than 10000 rows.\")\n\n        return data\n\n    except Exception as e:\n        raise Exception(f\"Error fetching data from the database: {str(e)}\") from e",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport pandas as pd\nimport sqlite3\nimport warnings\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func function.\"\"\"\n    def setUp(self):\n        self.db_path = \"/path/to/sqlite.db\"\n        self.query = \"SELECT * FROM table_name\"\n        self.mock_data = pd.DataFrame({\"column1\": [1, 2, 3], \"column2\": [4, 5, 6]})\n    @patch(\"pandas.read_sql_query\")\n    @patch(\"sqlite3.connect\")\n    def test_successful_query(self, mock_connect, mock_read_sql):\n        \"\"\"\n        Test task_func function for successful query execution.\n        \"\"\"\n        mock_connect.return_value.__enter__.return_value = MagicMock()\n        mock_read_sql.return_value = self.mock_data\n        result = task_func(self.db_path, self.query)\n        print(result)\n        mock_connect.assert_called_with(self.db_path)\n        mock_read_sql.assert_called_with(\n            self.query, mock_connect.return_value.__enter__.return_value\n        )\n        self.assertTrue(result.equals(self.mock_data))\n    @patch(\"pandas.read_sql_query\")\n    @patch(\"sqlite3.connect\")\n    def test_large_dataset_warning(self, mock_connect, mock_read_sql):\n        \"\"\"\n        Test task_func function to check if it issues a warning for large datasets.\n        \"\"\"\n        large_data = pd.DataFrame({\"column1\": range(10001)})\n        mock_read_sql.return_value = large_data\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            task_func(self.db_path, self.query)\n            self.assertEqual(len(w), 1)\n            self.assertTrue(\"more than 10000 rows\" in str(w[-1].message))\n    @patch(\"pandas.read_sql_query\")\n    @patch(\"sqlite3.connect\")\n    def test_no_warning_for_small_dataset(self, mock_connect, mock_read_sql):\n        \"\"\"\n        Test task_func function to ensure no warning for datasets smaller than 10000 rows.\n        \"\"\"\n        mock_read_sql.return_value = self.mock_data\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            task_func(self.db_path, self.query)\n            self.assertEqual(len(w), 0)\n    @patch(\"pandas.read_sql_query\")\n    @patch(\"sqlite3.connect\")\n    def test_database_exception(self, mock_connect, mock_read_sql):\n        \"\"\"\n        Test task_func function to handle database connection exceptions.\n        \"\"\"\n        mock_connect.side_effect = sqlite3.OperationalError(\"Failed to connect\")\n        with self.assertRaises(Exception) as context:\n            task_func(self.db_path, self.query)\n        self.assertIn(\"Error fetching data from the database\", str(context.exception))\n    @patch(\"pandas.read_sql_query\")\n    @patch(\"sqlite3.connect\")\n    def test_sql_query_exception(self, mock_connect, mock_read_sql):\n        \"\"\"\n        Test task_func function to handle SQL query execution exceptions.\n        \"\"\"\n        mock_read_sql.side_effect = pd.io.sql.DatabaseError(\"Failed to execute query\")\n        with self.assertRaises(Exception) as context:\n            task_func(self.db_path, self.query)\n        self.assertIn(\"Error fetching data from the database\", str(context.exception))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches and parses an XML file from a specified URL, then converts it into a Pandas DataFrame. # Example with an invalid XML structure >>> df = task_func('http://example.com/invalid_structure.xml') ValueError: XML structure does not match expected format.\nThe function should raise the exception for: ValueError This error is raised in several scenarios: 1. If the URL is invalid or the XML file cannot be fetched from the URL. 2. If the XML file has invalid syntax. 3. If the XML structure does not conform to the expected format.\nThe function should output with:\n    pandas.DataFrame\n    A DataFrame constructed from the parsed XML data. Each row of the DataFrame corresponds to an 'item' element\n    in the XML file, with child elements of 'item' becoming columns in the DataFrame.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n```",
        "gt": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\ndef task_func(url):\n    try:\n        with urllib.request.urlopen(url) as response:\n            xml_data = response.read()\n    except Exception as e:\n        raise ValueError(f\"Error fetching the XML file: {e}\")\n\n    try:\n        xml_tree = etree.XML(xml_data)\n    except etree.XMLSyntaxError:\n        raise ValueError(\"Invalid XML syntax\")\n\n    data = []\n    for item in xml_tree.findall(\".//item\"):\n        data_item = {child.tag: child.text for child in item}\n        data.append(data_item)\n\n    if not data:\n        raise ValueError(\"XML structure does not match expected format.\")\n\n    return pd.DataFrame(data)",
        "test": "import unittest\nimport pandas as pd\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @patch(\"urllib.request.urlopen\")\n    def test_valid_xml(self, mock_urlopen):\n        \"\"\"Test that the function returns the correct DataFrame for a given XML file.\"\"\"\n        # Mocking the XML data\n        valid_xml_data = b\"<root><item><name>John</name><age>25</age></item><item><name>Jane</name><age>30</age></item></root>\"\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            valid_xml_data\n        )\n        url = \"http://example.com/sample_data.xml\"\n        expected_df = pd.DataFrame({\"name\": [\"John\", \"Jane\"], \"age\": [\"25\", \"30\"]})\n        result_df = task_func(url)\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    @patch(\"urllib.request.urlopen\")\n    def test_empty_xml(self, mock_urlopen):\n        \"\"\"Test that the function raises an error for an empty XML file.\"\"\"\n        # Mocking empty XML data\n        empty_xml_data = b\"<root></root>\"\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            empty_xml_data\n        )\n        url = \"http://example.com/empty_data.xml\"\n        with self.assertRaises(ValueError):\n            task_func(url)\n    @patch(\"urllib.request.urlopen\")\n    def test_different_structure_xml(self, mock_urlopen):\n        \"\"\"Test that the function raises an error for an XML file with a different structure.\"\"\"\n        # Mocking XML with different structure\n        different_structure_xml = (\n            b\"<root><different><name>John</name></different></root>\"\n        )\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            different_structure_xml\n        )\n        url = \"http://example.com/different_structure_data.xml\"\n        with self.assertRaises(ValueError):\n            task_func(url)\n    @patch(\"urllib.request.urlopen\")\n    def test_invalid_url(self, mock_urlopen):\n        \"\"\"Test that the function raises an error for an invalid URL.\"\"\"\n        # Simulate an error in URL fetching\n        mock_urlopen.side_effect = Exception(\"URL fetch error\")\n        url = \"http://example.com/nonexistent/file.xml\"\n        with self.assertRaises(ValueError):\n            task_func(url)\n    @patch(\"urllib.request.urlopen\")\n    def test_non_xml_data(self, mock_urlopen):\n        \"\"\"Test that the function raises an error for non-XML data.\"\"\"\n        # Mocking non-XML data\n        non_xml_data = b\"Not an XML content\"\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            non_xml_data\n        )\n        url = \"http://example.com/non_xml_data.txt\"\n        with self.assertRaises(ValueError):\n            task_func(url)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Finds all files in the specified directory whose names contain any type of bracket (round, curly, or square). Uses an internal constant BRACKET_PATTERN = '[(){}\\\\[\\\\]]', which specifies the brackets that are looked for. >>> task_func('./another_directory/') ['./another_directory/file{3}.png']\nThe function should output with:\n    list[str]: A list of file paths that contain brackets in their names.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(directory):\n```",
        "gt": "import os\nimport re\ndef task_func(directory):\n    BRACKET_PATTERN = '[(){}\\\\[\\\\]]'  # Corrected pattern to match any type of bracket\n    \n    file_list = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.search(BRACKET_PATTERN, file):\n                file_list.append(os.path.join(root, file))\n    return file_list",
        "test": "import unittest\nimport os\nfrom pathlib import Path\nimport shutil\nclass TestCases(unittest.TestCase):\n    # Function to create the mock directory structure and files\n    def create_test_files(self, base_path, file_dict):\n        for name, content in file_dict.items():\n            path = Path(base_path) / name\n            if isinstance(content, dict):  # it's a directory\n                path.mkdir()\n                self.create_test_files(path, content)\n            else:  # it's a file\n                path.write_text(content)\n    # Define a directory structure with files containing brackets and without brackets\n    test_files = {\n        'file1.txt': '',  # without brackets\n        'file(2).txt': '',  # with round brackets\n        'file[3].png': '',  # with square brackets\n        'file{4}.jpg': '',  # with curly brackets\n        'folder1': {\n            'file(5).jpg': '',  # with round brackets\n            'file6.csv': '',  # without brackets\n            'folder2': {\n                'file[7].csv': '',  # with square brackets\n                'file{8}.png': ''  # with curly brackets\n            }\n        }\n    }\n# Create a temporary directory structure for testing\n    temp_dir = ''\n    def setUp(self):\n        self.temp_dir = os.path.join(os.getcwd(), 'temp_test_dir')\n        if not os.path.exists(self.temp_dir):\n            os.mkdir(self.temp_dir)\n        self.create_test_files(self.temp_dir, self.test_files)\n    \n    def test_case_1(self):\n        # Test with the root directory\n        result = task_func(self.temp_dir)\n        self.assertIn(os.path.join(self.temp_dir, 'file(2).txt'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'file[3].png'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'file{4}.jpg'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'file(5).jpg'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'folder2', 'file[7].csv'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'folder2', 'file{8}.png'), result)\n        self.assertEqual(len(result), 6)\n        \n    def test_case_2(self):\n        # Test with a sub-directory\n        result = task_func(os.path.join(self.temp_dir, 'folder1'))\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'file(5).jpg'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'folder2', 'file[7].csv'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'folder2', 'file{8}.png'), result)\n        self.assertEqual(len(result), 3)\n        \n    def test_case_3(self):\n        # Test with a deeper sub-directory\n        result = task_func(os.path.join(self.temp_dir, 'folder1', 'folder2'))\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'folder2', 'file[7].csv'), result)\n        self.assertIn(os.path.join(self.temp_dir, 'folder1', 'folder2', 'file{8}.png'), result)\n        self.assertEqual(len(result), 2)\n    def test_case_4(self):\n        # Test with an empty directory\n        empty_dir = os.path.join(self.temp_dir, 'empty_folder')\n        os.mkdir(empty_dir)\n        result = task_func(empty_dir)\n        self.assertEqual(result, [])\n    def test_case_5(self):\n        # Test with directory containing files without brackets\n        no_bracket_dir = os.path.join(self.temp_dir, 'no_bracket_folder')\n        os.mkdir(no_bracket_dir)\n        open(os.path.join(no_bracket_dir, 'file9.txt'), 'w').close()\n        open(os.path.join(no_bracket_dir, 'file10.jpg'), 'w').close()\n        result = task_func(no_bracket_dir)\n        self.assertEqual(result, [])\n    def tearDown(self):\n        shutil.rmtree('temp_test_dir')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes the frequency of words in a given text after lowercasing, removing punctuation, splitting into words, and plots the top 10 most common words.\nThe function should output with:\n    list: A list of tuples containing the 10 most common words and their counts.\n    Axes: The matplotlib Axes object of the bar chart.\nYou should write self-contained code starting with:\n```\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```",
        "gt": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Process text and count words\n    cleaned_text = re.sub(f\"[{punctuation}]\", \"\", text).lower()\n    words = cleaned_text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    # Plotting\n    _, ax = plt.subplots()\n    if most_common_words:  # Check if the list is not empty\n        ax.bar(*zip(*most_common_words))\n    else:  # Handle empty case\n        ax.bar([], [])\n\n    return most_common_words, ax",
        "test": "import unittest\nfrom string import punctuation\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def test_empty_text(self):\n        \"\"\"\n        Test the function with an empty string. Expect an empty list and a chart with no bars.\n        \"\"\"\n        common_words, _ = task_func(\"\")\n        self.assertEqual(common_words, [])\n    def test_single_word(self):\n        \"\"\"\n        Test the function with a text containing a single word repeated. Expect the word with its count.\n        \"\"\"\n        common_words, _ = task_func(\"test test test\")\n        self.assertEqual(common_words, [(\"test\", 3)])\n    def test_punctuation(self):\n        \"\"\"\n        Test the function with a text containing punctuations. Expect punctuations to be removed.\n        \"\"\"\n        common_words, _ = task_func(\"hello! hello, world.\")\n        self.assertEqual(common_words, [(\"hello\", 2), (\"world\", 1)])\n    def test_case_sensitivity(self):\n        \"\"\"\n        Test the function with a text containing the same word in different cases. Expect case insensitivity.\n        \"\"\"\n        common_words, _ = task_func(\"Hello hello HeLLo\")\n        self.assertEqual(common_words, [(\"hello\", 3)])\n    def test_common_scenario(self):\n        \"\"\"\n        Test the function with a standard sentence. Expect a correct count and ordering of words.\n        \"\"\"\n        text = \"This is a test. This is only a test.\"\n        common_words, _ = task_func(text)\n        expected = [(\"this\", 2), (\"is\", 2), (\"a\", 2), (\"test\", 2), (\"only\", 1)]\n        self.assertEqual(common_words, expected)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a plot visualizing a complex distribution created from two Gaussian distributions. The real part of the complex distribution is a Gaussian centered at 0 with a standard deviation of 1, and the imaginary part is a Gaussian centered at 2 with a standard deviation of 2.\nThe function should raise the exception for: TypeError: If `x` is not a numpy.ndarray.\nThe function should output with:\n    numpy.ndarray: The complex distribution created from the two Gaussian distributions.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n```",
        "gt": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\ndef task_func(x):\n\n    # Type check for x and y\n    if not isinstance(x, np.ndarray):\n        raise TypeError(\"x must be numpy.ndarray\")\n\n    real_part = norm.pdf(x, 0, 1)\n    imag_part = norm.pdf(x, 2, 2)\n    complex_dist = real_part + 1j * imag_part\n\n    plt.plot(x, complex_dist.real, label='Real part')\n    plt.plot(x, complex_dist.imag, label='Imaginary part')\n    plt.legend()\n    plt.grid()\n    plt.show()\n    return complex_dist",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\" Test that the function returns None. \"\"\"\n        result = task_func(np.linspace(-10, 10, 1000))\n        self.assertAlmostEquals(result[0], 7.69459863e-23+3.03794142e-09j)\n        self.assertAlmostEquals(result[1], 9.398202102189114e-23+3.2258293600449145e-09j)\n    def test_input_type(self):\n        \"\"\" Test the function with non-numpy array inputs. \"\"\"\n        with self.assertRaises(TypeError):\n            task_func([1, 2, 3])\n    def test_empty_array(self):\n        \"\"\" Test function with empty numpy array. \"\"\"\n        result = task_func(np.array([]))\n        self.assertEqual(result.size, 0)\n    def test_array_length(self):\n        \"\"\" Test function with arrays of different lengths. \"\"\"\n        result = task_func(np.linspace(-5, 5, 500))\n        self.assertAlmostEquals(result[0], 1.4867195147342979e-06+0.0004363413475228801j)\n        self.assertAlmostEquals(result[-1], 1.4867195147342979e-06+0.06475879783294587j)\n    def test_special_values(self):\n        \"\"\" Test function with special values. \"\"\"\n        result = task_func(np.linspace(-np.inf, np.inf, 1000))\n        # nan+nanj, should not use assertEqual\n        self.assertTrue(np.isnan(result[0].real))\n        self.assertTrue(np.isnan(result[0].imag))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze a text by creating a document term matrix with CountVectorizer. The text contains several sentences, each separated by a period. Ignore empty sentences.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the document-term matrix. Its column names should be adapted from the vectorizer feature names.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n```",
        "gt": "import pandas as pd\nimport regex as re\nfrom sklearn.feature_extraction.text import CountVectorizer\ndef task_func(text):\n    sentences = re.split(r\"\\.\\s*\", text)\n    sentences = [sentence for sentence in sentences if len(sentence.strip()) != 0]\n    vectorizer = CountVectorizer()\n    dtm = vectorizer.fit_transform(sentences)\n    df = pd.DataFrame(dtm.toarray(), columns=vectorizer.get_feature_names_out())\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        # Test with a basic input\n        text = \"This is a sample sentence. This sentence contains sample words.\"\n        dtm = task_func(text)\n        # Assertions\n        self.assertEqual(\n            dtm.shape, (2, 6)\n        )  # Expected 2 rows (sentences) and 6 unique words\n        self.assertEqual(dtm[\"sample\"].tolist(), [1, 1])\n        self.assertEqual(dtm[\"this\"].tolist(), [1, 1])\n    def test_case_2(self):\n        # Test with a single sentence (with a trailing period)\n        text = \"A single sentence.\"\n        dtm = task_func(text)\n        # Assertions\n        self.assertEqual(\n            dtm.shape, (1, 2)\n        )  # Expected 1 rows (sentences) and 2 unique words\n        self.assertEqual(dtm[\"single\"].tolist(), [1])\n    def test_case_3(self):\n        # Test with no periods (still should consider it as one sentence)\n        text = \"No periods in this text\"\n        dtm = task_func(text)\n        # Assertions\n        self.assertEqual(\n            dtm.shape, (1, 5)\n        )  # Expected 1 row (sentence) and 5 unique words\n        self.assertEqual(dtm[\"text\"].tolist(), [1])\n    def test_case_4(self):\n        # Test with a single sentence (with same word multiple times)\n        text = (\"test test test test test test test test test test test \" * 3).strip()\n        dtm = task_func(text)\n        # Assertions\n        self.assertEqual(\n            dtm.shape, (1, 1)\n        )  # Expected 1 row (sentence) and 1 unique words\n        self.assertEqual(dtm[\"test\"].tolist(), [33])\n    def test_case_5(self):\n        # Test with no periods (still should consider it as one sentence)\n        text = \"This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fith and last sentence.\"\n        dtm = task_func(text)\n        # Assertions\n        self.assertEqual(\n            dtm.shape, (5, 11)\n        )  # Expected 5 rows (sentence) and 11 unique words\n        self.assertEqual(dtm[\"this\"].tolist(), [1, 1, 1, 1, 1])\n        self.assertEqual(dtm[\"is\"].tolist(), [1, 1, 1, 1, 1])\n        self.assertEqual(dtm[\"the\"].tolist(), [1, 1, 1, 1, 1])\n        self.assertEqual(dtm[\"sentence\"].tolist(), [1, 1, 1, 1, 1])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scans a specified directory for files matching a given pattern and with a certain suffix, then determines their file types. The function returns a dictionary with file names as keys and their corresponding MIME types as values.\nThe function should output with:\n    dict: A dictionary mapping file names to their MIME types.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n```",
        "gt": "import re\nimport os\nimport glob\nimport mimetypes\ndef task_func(directory, file_pattern, suffix):\n    os.chdir(directory)\n    files = glob.glob(file_pattern)\n    file_types = {}\n\n    for file in files:\n        if re.search(suffix, file):\n            file_type = mimetypes.guess_type(file)[0]\n            file_types[file] = file_type\n\n    return file_types",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nimport mimetypes\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test that the function returns a dictionary.\"\"\"\n        with patch('os.chdir'), patch('glob.glob', return_value=[]), patch('re.search'):\n            result = task_func('/path/to/directory', '*', '_suff')\n        self.assertIsInstance(result, dict)\n    @patch('glob.glob', return_value=['file_suff.txt', 'other_file.txt'])\n    @patch('os.chdir')\n    def test_dictionary_content(self, mock_chdir, mock_glob):\n        \"\"\"Test the content of the dictionary.\"\"\"\n        result = task_func('/path/to/directory', '*_suff.txt', '_suff')\n        self.assertIn('file_suff.txt', result)\n        self.assertNotIn('other_file.txt', result)\n    @patch('mimetypes.guess_type', return_value=['text/plain'])\n    @patch('glob.glob', return_value=['file_suff.txt'])\n    @patch('os.chdir')\n    def test_file_type_identification(self, mock_chdir, mock_glob, mock_guess_type):\n        \"\"\"Test correct file type identification.\"\"\"\n        result = task_func('/path/to/directory', '*', '_suff')\n        self.assertEqual(result['file_suff.txt'], 'text/plain')\n    @patch('glob.glob', return_value=[])\n    @patch('os.chdir')\n    def test_empty_directory(self, mock_chdir, mock_glob):\n        \"\"\"Test the function with an empty directory.\"\"\"\n        result = task_func('/path/to/directory', '*', '_suff')\n        self.assertEqual(result, {})\n    @patch('re.search', lambda pat, string: '_suff' in string)\n    @patch('glob.glob', return_value=['test_suff', 'test', 'another_suff'])\n    @patch('os.chdir')\n    def test_re_search_called_with_suffix(self, mock_chdir, mock_glob):\n        \"\"\"Test that re.search is correctly used to filter files by suffix.\"\"\"\n        result = task_func('/path/to/directory', '*', '_suff')\n        self.assertIn('test_suff', result)\n        self.assertNotIn('test', result)\n        self.assertIn('another_suff', result)\n    @patch('re.search', return_value=False)\n    @patch('glob.glob', return_value=['test_suff', 'test', 'another_suff'])\n    @patch('os.chdir')\n    def test_suffix_filtering(self, mock_chdir, mock_glob, mock_search):\n        \"\"\"Test that files not matching the suffix are correctly filtered out.\"\"\"\n        result = task_func('/path/to/directory', '*', '_suff')\n        # Expecting an empty dictionary since mock_search is mocked to always return False, simulating no match\n        self.assertEqual(result, {})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a sales report for a list of products in different categories. The report includes the quantity sold, revenue for 1 product, and total revenue generated for each product.\nNote that: The column names uses are 'Product', 'Category', 'Quantity Sold', 'Revenue' , and 'Total Revenue'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with sales data for the products.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n```",
        "gt": "import pandas as pd\nimport random\ndef task_func(product_list, categories, min_value = 10, max_value = 100):\n\n    report_data = []\n\n    for product in product_list:\n        category = categories[random.randint(0, len(categories)-1)]\n        quantity_sold = random.randint(min_value, max_value)\n        revenue = random.randint(min_value, max_value)\n        total_revenue = quantity_sold * revenue\n        report_data.append([product, category, quantity_sold, revenue, total_revenue])\n\n    report_df = pd.DataFrame(report_data, columns=['Product', 'Category', 'Quantity Sold', 'Revenue', 'Total Revenue'])\n    return report_df",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    \n    categories = ['Electronics', 'Fashion', 'Home', 'Beauty', 'Sports']\n    products = ['Product ' + str(i) for i in range(1, 101)]\n    \n    def test_case_1(self):\n        random.seed(0)\n        report = task_func(self.products[:5], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 5)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_2(self):\n        random.seed(0)\n        report = task_func(self.products[5:10], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 5)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_3(self):\n        random.seed(0)\n        report = task_func([self.products[10]], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 1)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_4(self):\n        random.seed(0)\n        report = task_func(self.products[10:20], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 10)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        \n    def test_case_5(self):\n        random.seed(0)\n        report = task_func(self.products[20:40], self.categories)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 20)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n    \n    def test_case_6(self):\n        random.seed(0)\n        report = task_func([self.products[0]], self.categories, 10, 10)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 1)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        self.assertEqual(report.iloc[0]['Quantity Sold'], 10)\n        self.assertEqual(report.iloc[0]['Total Revenue'], 100)\n    \n    def test_case_7(self):\n        random.seed(0)\n        report = task_func([self.products[0]], self.categories, 10, 100)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 1)\n        self.assertEqual(set(report['Category'].unique()).issubset(self.categories), True)\n        self.assertEqual(report.iloc[0]['Total Revenue'], report.iloc[0]['Quantity Sold']*report.iloc[0]['Revenue'])\n    def test_case_8(self):\n        random.seed(0)\n        report = task_func(self.products[40:60], self.categories, 100, 200)\n        self.assertTrue(isinstance(report, pd.DataFrame))\n        self.assertEqual(len(report), 20)\n        for index, row in report.iterrows():\n            self.assertEqual(row['Total Revenue'], row['Quantity Sold']*row['Revenue'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the occurrence of certain words in a collection of sentences and return a bar chart.\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object of the bar chart displaying the frequencies.\nYou should write self-contained code starting with:\n```\nimport collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n```",
        "gt": "import collections\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nWORDS = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I']\ndef task_func(sentences_dict, word_keys):\n    word_counts = collections.Counter(' '.join(sentences_dict.values()).split())\n    frequencies = [word_counts[word] for word in word_keys]\n    word_series = pd.Series(frequencies, index=word_keys)\n    plt.figure()\n    word_series.plot(kind='bar')\n    return word_series.plot(kind='bar')",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        sentences_dict = {\n            'Sentence1': 'the quick brown fox',\n            'Sentence2': 'jumps over the lazy dog',\n            'Sentence3': 'the dog is brown'\n        }\n        word_keys = ['the', 'dog']\n        ax = task_func(sentences_dict, word_keys)\n        \n        # Check the x-tick labels\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n        \n        # Check the bar heights\n        self.assertListEqual([rect.get_height() for rect in ax.patches], [3, 2, 3, 2])\n        \n    def test_case_2(self):\n        sentences_dict = {\n            'Sentence1': 'apple orange banana',\n            'Sentence2': 'apple apple',\n            'Sentence3': 'banana orange orange'\n        }\n        word_keys = ['apple', 'orange', 'banana']\n        ax = task_func(sentences_dict, word_keys)\n        \n        # Check the x-tick labels\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n        \n        # Check the bar heights\n        self.assertListEqual([rect.get_height() for rect in ax.patches], [3, 3, 2, 3, 3, 2])\n        \n    def test_case_3(self):\n        sentences_dict = {\n            'Sentence1': 'cat mouse',\n            'Sentence2': 'dog cat',\n            'Sentence3': 'mouse mouse cat'\n        }\n        word_keys = ['cat', 'mouse', 'dog']\n        ax = task_func(sentences_dict, word_keys)\n        \n        # Check the x-tick labels\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n        \n        # Check the bar heights\n        self.assertListEqual([rect.get_height() for rect in ax.patches], [3, 3, 1, 3, 3, 1])\n    def test_case_4(self):\n        sentences_dict = {\n            'Sentence1': 'sun moon stars',\n            'Sentence2': 'sun sun',\n            'Sentence3': 'moon stars stars'\n        }\n        word_keys = ['sun', 'stars', 'moon']\n        ax = task_func(sentences_dict, word_keys)\n        \n        # Check the x-tick labels\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n        \n        # Check the bar heights\n        self.assertListEqual([rect.get_height() for rect in ax.patches], [3, 3, 2, 3, 3, 2])\n    def test_case_5(self):\n        sentences_dict = {\n            'Sentence1': 'car bus bike',\n            'Sentence2': 'bus bus bike',\n            'Sentence3': 'car car bus'\n        }\n        word_keys = ['car', 'bus', 'bike']\n        ax = task_func(sentences_dict, word_keys)\n        \n        # Check the x-tick labels\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], word_keys)\n        \n        # Check the bar heights\n        self.assertListEqual([rect.get_height() for rect in ax.patches], [3, 4, 2, 3, 4, 2])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Copy a file to a specified destination directory and clear its contents. This function takes in the path to a file and a destination directory path. It copies the file to the destination directory. Once the file is copied, the function will erase the content of the original file, leaving it empty.\nNote that: Notes: If the destination directory already contains a file with the same name, the function will overwrite that file without warning. The original file will not be deleted from the filesystem, only its content will be cleared.\nThe function should raise the exception for: OSError: If the destination directory cannot be created and does not exist, or if the file cannot be copied for reasons other than a pre-existing directory.\nThe function should output with:\n    str: The absolute path to the copied file within the destination directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n```",
        "gt": "import os\nimport errno\nimport shutil\ndef task_func(filename, dest_dir):\n    # Ensure the destination directory exists\n    try:\n        os.makedirs(dest_dir, exist_ok=True)  # Simplified directory creation\n    except OSError as e:\n        # Reraise the exception if it's not related to existing directory\n        if e.errno != errno.EEXIST:\n            raise\n\n    # Copy the file\n    dest = shutil.copy(filename, dest_dir)\n\n    # Erase the original file content by opening in write mode and closing it\n    with open(filename, 'w') as original_file:\n        original_file.truncate(0)\n\n    return os.path.abspath(dest)",
        "test": "import unittest\nimport os\nimport tempfile\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for the tests\n        self.test_dir = tempfile.mkdtemp()\n        self.test_file = os.path.join(self.test_dir, 'test.txt')\n        with open(self.test_file, 'w') as f:\n            f.write('This is a test file.')\n    def tearDown(self):\n        # Clean up any files created by the test\n        shutil.rmtree(self.test_dir)\n    def test_copy_and_erase(self):\n        # Test case description:\n        # This test verifies that the function copies the file to the specified\n        # destination directory and that the original file's content is cleared.\n        dest_dir = os.path.join(self.test_dir, 'dest')\n        copied_file = task_func(self.test_file, dest_dir)\n        self.assertTrue(os.path.isfile(copied_file))\n        with open(self.test_file, 'r') as f:\n            self.assertEqual(f.read(), '')\n    def test_non_existent_dest_dir(self):\n        # Test case description:\n        # This test checks the function's behavior when the destination directory\n        # does not exist. It is expected to create the directory and copy the file.\n        dest_dir = os.path.join(self.test_dir, 'non_existent_dir')\n        copied_file = task_func(self.test_file, dest_dir)\n        self.assertTrue(os.path.isdir(dest_dir))\n        self.assertTrue(os.path.isfile(copied_file))\n    def test_overwrite_existing_file(self):\n        # Test case description:\n        # This test ensures that if a file with the same name exists in the destination\n        # directory, it is overwritten by the copied file.\n        dest_dir = os.path.join(self.test_dir, 'dest')\n        os.makedirs(dest_dir, exist_ok=True)\n        existing_file_path = os.path.join(dest_dir, 'test.txt')\n        with open(existing_file_path, 'w') as f:\n            f.write('Old content')\n        copied_file = task_func(self.test_file, dest_dir)\n        with open(copied_file, 'r') as f:\n            self.assertEqual(f.read(), 'This is a test file.')\n    def test_same_source_and_destination(self):\n        # Test case description:\n        # This test checks the function's response when the source and destination\n        # directories are the same. An OSError is expected to be raised.\n        with self.assertRaises(OSError):\n            task_func(self.test_file, self.test_dir)\n    def test_invalid_source_file(self):\n        # Test case description:\n        # This test attempts to copy from an invalid source file path, expecting\n        # the function to raise a FileNotFoundError.\n        with self.assertRaises(FileNotFoundError):\n            task_func('/invalid/path/to/file.txt', self.test_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save a Pandas DataFrame to a JSON file in a specified directory.\nNote that: The function manipulates a Pandas DataFrame and saves it as a JSON file.\nThe function should output with:\n    str: The full file path where the DataFrame is saved.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n```",
        "gt": "import pandas as pd\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    file_path = os.path.join(output_dir, filename)\n    df_clean = df.where(pd.notnull(df), None)\n    with open(file_path, 'w') as f:\n        df_clean.to_json(f, orient='records')\n    return file_path",
        "test": "import unittest\nimport json\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up testing environment; ensure data directory exists.\"\"\"\n        if not os.path.exists(OUTPUT_DIR):\n            os.makedirs(OUTPUT_DIR)\n    def tearDown(self):\n        \"\"\"Clean up; remove the data directory and its contents after tests.\"\"\"\n        shutil.rmtree(OUTPUT_DIR, ignore_errors=True)\n    def test_basic_dataframe(self):\n        \"\"\"Test saving a simple DataFrame.\"\"\"\n        df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n        filepath = task_func(df, 'basic.json')\n        with open(filepath, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(data, [{\"A\": 1, \"B\": 3}, {\"A\": 2, \"B\": 4}])\n    def test_nan_values(self):\n        \"\"\"Test DataFrame with NaN values.\"\"\"\n        df = pd.DataFrame({'A': [1, None], 'B': [None, 4]})\n        filepath = task_func(df, 'nan_values.json')\n        with open(filepath, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(data, [{\"A\": 1, \"B\": None}, {\"A\": None, \"B\": 4}])\n    def test_integer_conversion(self):\n        \"\"\"Test converting float to int where applicable.\"\"\"\n        df = pd.DataFrame({'A': [1.0, 2.5], 'B': [3.0, 4.5]})\n        filepath = task_func(df, 'int_conversion.json')\n        with open(filepath, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(data, [{\"A\": 1, \"B\": 3.0}, {\"A\": 2.5, \"B\": 4.5}])\n    def test_empty_dataframe(self):\n        \"\"\"Test with an empty DataFrame.\"\"\"\n        df = pd.DataFrame()\n        filepath = task_func(df, 'empty.json')\n        self.assertTrue(os.path.isfile(filepath))\n        with open(filepath, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(data, [])\n    def test_all_nan_dataframe(self):\n        \"\"\"Test DataFrame with all NaN values.\"\"\"\n        df = pd.DataFrame({'A': [None, None], 'B': [None, None]})\n        filepath = task_func(df, 'all_nan.json')\n        with open(filepath, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(data, [{\"A\": None, \"B\": None}, {\"A\": None, \"B\": None}])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function processes a text dataset from a CSV file, performs text vectorization while excluding specific stopwords, and creates a histogram of the ten most common words. The function is robust to different input scenarios, such as empty data or data containing only stopwords.\nThe function should output with:\n    matplotlib Axes object: If save_path is not provided and valid words are found in the input, the function\n    displays the histogram plot and returns the matplotlib Axes object.\n    None: In two scenarios:\n    1. If save_path is provided, saves the plot to the specified location and returns None.\n    2. If the input file is empty or contains only stop words, prints a message and returns None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\ndef task_func(file_path, save_path=None):\n    df = pd.read_csv(file_path, header=None, names=[\"Text\"])\n    df[\"Text\"] = df[\"Text\"].str.split(\"\\\\n\").str.join(\" \")\n\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    try:\n        word_count = vectorizer.fit_transform(df[\"Text\"])\n    except ValueError:\n        # Handle the case where the DataFrame is empty or contains only stop words\n        print(\"No valid words to plot. Returning None.\")\n        return None\n\n    sum_words = word_count.sum(axis=0)\n    words_freq = [\n        (word, sum_words[0, idx]) for word, idx in vectorizer.vocabulary_.items()\n    ]\n    words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)\n\n    top_words = words_freq[:10]\n    df = pd.DataFrame(top_words, columns=[\"Word\", \"Count\"])\n\n    ax = df.plot.bar(x=\"Word\", y=\"Count\", rot=0)\n\n    # Saving or displaying the plot\n    if save_path:\n        plt.savefig(save_path)\n        plt.close()\n        return None\n    else:\n        return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    @patch(\"pandas.read_csv\")\n    def test_empty_csv(self, mock_read_csv):\n        \"\"\"\n        Test with an empty CSV file. Checks if the function handles empty data gracefully.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame(columns=[\"Text\"])\n        result = task_func(\"dummy_path.csv\")\n        self.assertIsNone(result, \"The function should return None for empty data\")\n    @patch(\"pandas.read_csv\")\n    def test_single_line_csv(self, mock_read_csv):\n        \"\"\"\n        Test with a CSV file containing a single line of text. Verifies correct handling of minimal data.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"Text\": [\"test\"]})\n        ax = task_func(\"dummy_path.csv\")\n        self.assertEqual(\n            len(ax.patches),\n            1,\n            \"There should be one bar in the histogram for a single word\",\n        )\n    @patch(\"pandas.read_csv\")\n    def test_stop_words_removal(self, mock_read_csv):\n        \"\"\"\n        Test to ensure that stop words are correctly removed from the text.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"Text\": [\"a test\"]})\n        ax = task_func(\"dummy_path.csv\")\n        x_labels = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertNotIn(\"a\", x_labels, \"Stop words should not appear in the histogram\")\n    @patch(\"pandas.read_csv\")\n    @patch(\"matplotlib.pyplot.savefig\")\n    def test_save_plot(self, mock_savefig, mock_read_csv):\n        \"\"\"\n        Test the functionality of saving the plot to a file.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"Text\": [\"save test\"]})\n        task_func(\"dummy_path.csv\", \"output.png\")\n        mock_savefig.assert_called_with(\"output.png\")\n    @patch(\"pandas.read_csv\")\n    def test_multiple_lines_csv(self, mock_read_csv):\n        \"\"\"\n        Test with a CSV file containing multiple lines of text. Checks for correct handling of multiline data.\n        \"\"\"\n        mock_read_csv.return_value = pd.DataFrame({\"Text\": [\"test1\", \"test2\"]})\n        ax = task_func(\"dummy_path.csv\")\n        self.assertEqual(\n            len(ax.patches),\n            2,\n            \"There should be two bars in the histogram for two different words\",\n        )\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws the linear equation y = 2x + 1 on a 2D plot for x values ranging from -10 to 10, and marks the solution for x = 2 with a green 'o' (circle) marker. The plot includes: - A red line representing the equation y = 2x + 1, labeled as 'y=2x+1', for x in [-10, 10]. - A green circle marker indicating the solution at x = 2, y = 5. - Title: 'Solution of the equation y=2x+1 at x=2' - X-axis labeled as 'x', with a range from -10 to 10. - Y-axis labeled as 'y', with a range automatically adjusted based on the equation. - A legend indicating labels for the equation and the solution point.\nThe function should output with:\n    matplotlib.axes.Axes: An object representing the plot with specified features and ranges.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    X = np.linspace(-10, 10, 400)  # X range specified\n    y = 2 * X + 1\n\n    fig, ax = plt.subplots()\n    ax.plot(X, y, '-r', label='y=2x+1')\n    \n    solution_y = 2 * 2 + 1  # y value at x = 2\n    ax.plot(2, solution_y, 'go', label='Solution at x=2')\n    \n    ax.set_title('Solution of the equation y=2x+1 at x=2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_xlim([-10, 10])  # Explicitly setting the x-axis range\n    # ax.set_ylim is optional and can be set if a specific y-range is desired\n    ax.legend(loc='best')\n    ax.grid()\n\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        ax = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n    def test_line_plot(self):\n        ax = task_func()\n        line = ax.lines[0]\n        self.assertEqual(line.get_label(), 'y=2x+1')\n    def test_solution_plot(self):\n        ax = task_func()\n        # Find the solution point among line plots\n        # Assuming the last added line plot is the solution point\n        solution_point = ax.lines[-1]  # Get the last line plot, which should be the solution\n        self.assertTrue(solution_point.get_marker() == 'o')  # Check marker shape\n        color = solution_point.get_color()\n        expected_green = matplotlib.colors.to_rgba('g')\n        # We convert both the actual color and the expected 'green' color to RGBA format for a proper comparison\n        actual_color_rgba = matplotlib.colors.to_rgba(color)\n        self.assertTrue(np.allclose(actual_color_rgba, expected_green, atol=0.01), f\"Actual color {actual_color_rgba} not close to expected green {expected_green}\")\n    def test_plot_title_and_labels(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Solution of the equation y=2x+1 at x=2')\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n    def test_solution_accuracy(self):\n        ax = task_func()\n        solution_point = ax.lines[-1]  # Get the last line plot, which should be the solution\n        x_data, y_data = solution_point.get_data()\n        self.assertAlmostEqual(x_data[0], 2)  # x coordinate of the solution\n        self.assertAlmostEqual(y_data[0], 5)  # y coordinate of the solution\n    def test_x_range(self):\n        ax = task_func()\n        self.assertEqual(ax.get_xlim(), (-10, 10))  # Check if the x-axis range is set as expected",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the Z-values of a 2D data matrix, calculate the mean value of each row and then visualize the correlation matrix of the Z-values with a heatmap.\nThe function should output with:\n    tuple: A tuple containing:\n    pandas.DataFrame: A DataFrame with columns 'Feature 1', 'Feature 2', ..., 'Feature n' containing the Z-scores (per matrix row).\n    There is also an additional column 'Mean' the mean of z-score per row.\n    matplotlib.axes.Axes: The Axes object of the plotted heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\ndef task_func(data_matrix):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nfrom scipy.stats import zscore\ndef task_func(data_matrix):\n    z_scores = zscore(data_matrix, axis=1)\n    feature_columns = [\"Feature \" + str(i + 1) for i in range(data_matrix.shape[1])]\n    df = pd.DataFrame(z_scores, columns=feature_columns)\n    df[\"Mean\"] = df.mean(axis=1)\n    correlation_matrix = df.corr()\n    ax = sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\")\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        df, ax = task_func(data)\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        np.testing.assert_array_equal(\n            df.loc[:, [col for col in df.columns if col.startswith(\"Feature\")]].values,\n            zscore(data, axis=1),\n        )\n        self.assertTrue(\"Mean\" in df.columns)\n    def test_case_2(self):\n        data = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])\n        df, ax = task_func(data)\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        np.testing.assert_array_equal(\n            df.loc[:, [col for col in df.columns if col.startswith(\"Feature\")]].values,\n            zscore(data, axis=1),\n        )\n        self.assertTrue(\"Mean\" in df.columns)\n    def test_case_3(self):\n        data = np.array([[3, 5, 7, 1000], [200, 5, 7, 1], [1, -9, 14, 700]])\n        df, ax = task_func(data)\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        np.testing.assert_array_equal(\n            df.loc[:, [col for col in df.columns if col.startswith(\"Feature\")]].values,\n            zscore(data, axis=1),\n        )\n        self.assertTrue(\"Mean\" in df.columns)\n    def test_case_4(self):\n        data = np.array(\n            [\n                [1, 2, 3, 4, 5, 4, 3, 2, 1],\n            ]\n        )\n        df, ax = task_func(data)\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        np.testing.assert_array_equal(\n            df.loc[:, [col for col in df.columns if col.startswith(\"Feature\")]].values,\n            zscore(data, axis=1),\n        )\n        self.assertTrue(\"Mean\" in df.columns)\n    def test_case_5(self):\n        data = np.array([[1], [1], [1]])\n        df, ax = task_func(data)\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertTrue(isinstance(ax, matplotlib.axes.Axes))\n        np.testing.assert_array_equal(\n            df.loc[:, [col for col in df.columns if col.startswith(\"Feature\")]].values,\n            zscore(data, axis=1),\n        )\n        self.assertTrue(\"Mean\" in df.columns)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a bar chart of data in multiple groups with error bars.\nNote that: The function uses a predefined set of colors for the bars. If there are more groups than colors, the colors will repeat from the beginning of the COLORS list. This function use \"Bar chart of {value_col} by {group_col}\" for the plot title. This function use value of variables group_col and value_col as the xlabel and ylabel respectively.\nThe function should raise the exception for: This function will raise TypeError if the 'Value' has non-numeric values.\nThe function should output with:\n    Axes: A matplotlib axes object with the bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col):\n\n    group_mean = df.groupby(group_col)[value_col].mean()\n    group_std = df.groupby(group_col)[value_col].std()\n\n    # Get the number of groups and generate x locations for the bars\n    num_groups = len(group_mean)\n    index = np.arange(num_groups)\n\n    # Create the bar chart with error bars\n    for i, (mean, std) in enumerate(zip(group_mean, group_std)):\n        plt.bar(index[i], mean, yerr=std, color=COLORS[i % len(COLORS)], capsize=4, label=f'Group {i+1}')\n\n    # Set labels and title\n    plt.xlabel(group_col)\n    plt.ylabel(value_col)\n    plt.title(f'Bar chart of {value_col} by {group_col}')\n    plt.xticks(index, group_mean.index)  # Set x-axis labels to group names\n    plt.legend()\n    # Return the axes object\n    return plt.gca()",
        "test": "import unittest\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom faker import Faker\nfaker = Faker()\n# Constants\nCOLORS = ['r', 'g', 'b']\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({'Group': ['A', 'B', 'C'], 'Value': [10, 20, 30]})\n        self.ax = task_func(self.df, 'Group', 'Value')\n        plt.close()\n    def test_bar_chart(self):\n        # Create a figure and render the plot\n        fig = plt.figure()\n        canvas = FigureCanvas(fig)\n        ax = fig.add_subplot(111)\n        canvas = FigureCanvas(fig)\n        self.ax.set_title('Bar chart of Value by Group')\n        self.ax.set_xlabel('Group')\n        self.ax.set_ylabel('Value')\n        self.ax.legend(['Group 1', 'Group 2', 'Group 3'])\n        canvas.draw()\n        \n        # Get the RGBA buffer and convert to RGB\n        buf = canvas.buffer_rgba()\n        rgb = np.asarray(buf)\n        # Check that bars are present in the plot\n        self.assertTrue(np.any(rgb[:, :, 3] != 0), msg=\"No bars found in the plot\")\n        plt.close()\n    def test_single_group(self):\n        # Test for a single group with a single value\n        df_single_group = pd.DataFrame({\n            'Group': ['A'] * 4,\n            'Value': [1, 2, 3, 4]\n        })\n        ax = task_func(df_single_group, 'Group', 'Value')\n        self.assertIsNotNone(ax, \"The axes object should not be None\")\n        plt.close()\n    def test_multiple_groups(self):\n        # Test for multiple groups\n        df_multiple_groups = pd.DataFrame({\n            'Group': ['A', 'B', 'C', 'D'] * 4,\n            'Value': [1, 2, 3, 4] * 4\n        })\n        ax = task_func(df_multiple_groups, 'Group', 'Value')\n        self.assertIsNotNone(ax, \"The axes object should not be None\")\n        plt.close()\n    def test_with_nan(self):\n        # Test handling of NaN values\n        df_with_nan = pd.DataFrame({\n            'Group': ['A', 'B', 'C', 'D', None],\n            'Value': [1, 2, 3, 4, None]\n        })\n        ax = task_func(df_with_nan, 'Group', 'Value')\n        self.assertIsNotNone(ax, \"The axes object should not be None\")\n        plt.close()\n    def test_non_numeric_values(self):\n        # Test with non-numeric values to ensure TypeError is raised\n        df_non_numeric = pd.DataFrame({\n            'Group': ['A', 'B', 'C', 'D'],\n            'Value': [1, 'two', 3, 4]\n        })\n        with self.assertRaises(TypeError):\n            task_func(df_non_numeric, 'Group', 'Value')\n        plt.close()\n    def test_large_numbers(self):\n        # Test with a large range of numbers\n        df_large_numbers = pd.DataFrame({\n            'Group': ['A'] * 100,\n            'Value': range(1, 101)\n        })\n        ax = task_func(df_large_numbers, 'Group', 'Value')\n        self.assertIsNotNone(ax, \"The axes object should not be None\")\n        plt.close()\n    def test_complex_data(self):\n        # Test with complex data generated by Faker\n        df_complex = generate_complex_test_data(num_rows=100)\n        ax = task_func(df_complex, 'Group', 'Value')\n        self.assertIsNotNone(ax, \"The axes object should not be None for complex data\")\n        plt.close()\ndef generate_complex_test_data(num_rows=100):\n    \"\"\"Generate a DataFrame with a mix of numeric and text data, including some potential outliers.\"\"\"\n    data = {\n        'Group': [faker.random_element(elements=('A', 'B', 'C', 'D')) for _ in range(num_rows)],\n        'Value': [faker.random_int(min=0, max=1000) for _ in range(num_rows)]\n    }\n    complex_df = pd.DataFrame(data)\n    return complex_df",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame with random alphabets in each cell. The DataFrame will have a specified number of rows and columns. Each column is named with a string from the list ['a', 'b', 'c', ...] depending on the number of columns specified.\nThe function should output with:\n    DataFrame: A pandas DataFrame with random alphabets.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(rows=100, columns=3):\n    column_names = [\n        chr(97 + i) for i in range(columns)\n    ]  # generate column names based on the number of columns\n    values = list(\"abcdefghijklmnopqrstuvwxyz\")\n    data = np.random.choice(values, size=(rows, columns))\n    df = pd.DataFrame(data, columns=column_names)\n    return df",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests case for function `task_func`.\"\"\"\n    def test_dataframe_shape_default(self):\n        \"\"\"Test if the DataFrame has default shape (100 rows, 3 columns) with default parameters.\"\"\"\n        np.random.seed(1)\n        df_test = task_func()\n        self.assertEqual(df_test.shape, (100, 3))\n    def test_dataframe_shape_custom_rows(self):\n        \"\"\"Test if the DataFrame has the correct shape when a custom number of rows is specified.\"\"\"\n        np.random.seed(2)\n        df_test = task_func(50)\n        self.assertEqual(df_test.shape, (50, 3))\n    def test_dataframe_shape_custom_columns(self):\n        \"\"\"Test if the DataFrame has the correct shape with a custom number of columns.\"\"\"\n        np.random.seed(3)\n        df_test = task_func(50, 5)\n        self.assertEqual(df_test.shape, (50, 5))\n    def test_dataframe_columns_default(self):\n        \"\"\"Test if the DataFrame has default column names ['a', 'b', 'c'] with default parameters.\"\"\"\n        np.random.seed(4)\n        df_test = task_func()\n        self.assertListEqual(list(df_test.columns), [\"a\", \"b\", \"c\"])\n    def test_dataframe_columns_custom(self):\n        \"\"\"Test if the DataFrame has the correct column names when a custom number of columns is specified.\"\"\"\n        np.random.seed(5)\n        df_test = task_func(columns=5)\n        expected_columns = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n        self.assertListEqual(list(df_test.columns), expected_columns)\n    def test_dataframe_values(self):\n        \"\"\"Test if each cell in the DataFrame contains a letter from the English alphabet.\"\"\"\n        np.random.seed(6)\n        df_test = task_func()\n        for col in df_test.columns:\n            self.assertTrue(\n                set(df_test[col].unique()).issubset(set(\"abcdefghijklmnopqrstuvwxyz\"))\n            )\n    def test_dataframe_empty(self):\n        \"\"\"Test if an empty DataFrame is created when 0 rows are specified.\"\"\"\n        np.random.seed(7)\n        df_test = task_func(0)\n        self.assertEqual(df_test.shape, (0, 3))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame with multiple random integer time series (each ranging from 0 to 100) from a start date to an end date, then returns the generated time series on a line plot.\nNote that: Notes: The line plot's title is set to \"Random Time Series\", the x-axis label to \"Date\", and the y-axis label to \"Value\". Each time series is plotted as a separate line with automatic coloring and legend entry labeled as \"series_x\" where x is the series number.\nThe function should raise the exception for: ValueError: If start_date is later than end_date; or if num_series is less than 1.\nThe function should output with:\n    pandas.DataFrame: A pandas DataFrame containing the generated time series, indexed by date.\n    plt.Axes: A matplotlib line plot of the time series.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(start_date, end_date, num_series, seed=None):\n```",
        "gt": "import pandas as pd\nfrom datetime import datetime\nimport random\ndef task_func(start_date, end_date, num_series, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    start_date_dt = datetime.strptime(start_date, \"%Y-%m-%d\")\n    end_date_dt = datetime.strptime(end_date, \"%Y-%m-%d\")\n    if start_date_dt > end_date_dt:\n        raise ValueError(\"start_date must be earlier than or equal to end_date.\")\n    if num_series < 1:\n        raise ValueError(\"num_series must be at least 1.\")\n\n    date_range = pd.date_range(start_date_dt, end_date_dt)\n\n    data = {}\n    for i in range(num_series):\n        series_name = f\"series_{i+1}\"\n        data[series_name] = [random.randint(0, 100) for _ in range(len(date_range))]\n\n    df = pd.DataFrame(data, index=date_range)\n\n    ax = df.plot()\n    ax.set_title(\"Random Time Series\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Value\")\n\n    return df, ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib\nimport warnings\nclass TestCases(unittest.TestCase):\n    def test_valid_input(self):\n        \"\"\"Tests correct DataFrame structure and plot type with valid inputs.\"\"\"\n        df, ax = task_func(\"2022-01-01\", \"2022-01-10\", 2, seed=42)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape[1], 2)\n        self.assertEqual(len(df.index), 10)\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes)\n        self.assertTrue((df <= 100).all().all() and (df >= 0).all().all())\n    def test_seed_reproducibility(self):\n        \"\"\"Tests if providing a seed results in reproducible outputs.\"\"\"\n        df1, _ = task_func(\"2022-01-01\", \"2022-01-05\", 1, seed=42)\n        df2, _ = task_func(\"2022-01-01\", \"2022-01-05\", 1, seed=42)\n        pd.testing.assert_frame_equal(df1, df2)\n        self.assertTrue((df1 <= 100).all().all() and (df1 >= 0).all().all())\n    def test_negative_num_series(self):\n        \"\"\"Tests if function raises an error when num_series is less than 1.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(\"2022-01-01\", \"2022-01-10\", 0)\n    def test_start_date_after_end_date(self):\n        \"\"\"Tests if function raises an error when start date is after end date.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(\"2022-01-10\", \"2022-01-01\", 1)\n    def test_single_day_series(self):\n        \"\"\"Tests DataFrame structure and plot type when start and end dates are the same.\"\"\"\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", category=UserWarning)\n            df, ax = task_func(\"2022-07-01\", \"2022-07-01\", 1, seed=42)\n        self.assertEqual(len(df.index), 1)\n        self.assertIsInstance(ax, matplotlib.axes._axes.Axes)\n        self.assertTrue((df <= 100).all().all() and (df >= 0).all().all())\n    def test_multiple_series_names(self):\n        \"\"\"Tests if the generated DataFrame contains correct series names.\"\"\"\n        df, _ = task_func(\"2022-01-01\", \"2022-01-05\", 3, seed=42)\n        expected_columns = [\"series_1\", \"series_2\", \"series_3\"]\n        self.assertListEqual(list(df.columns), expected_columns)\n        self.assertTrue((df <= 100).all().all() and (df >= 0).all().all())\n    def test_plot_attributes(self):\n        \"\"\"Tests the attributes of the plot, including title, x-label, and y-label.\"\"\"\n        _, ax = task_func(\"2022-01-01\", \"2022-01-05\", 2, seed=42)\n        self.assertEqual(ax.get_title(), \"Random Time Series\")\n        self.assertEqual(ax.get_xlabel(), \"Date\")\n        self.assertEqual(ax.get_ylabel(), \"Value\")\n        self.assertTrue(len(ax.lines) == 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. Constants: - The function uses a constant time step of 24*60*60 seconds to generate future timestamps.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list with predicted prices for the next 7 days.\n    Axes: The matplotlib Axes object containing the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df):\n    # Convert date to timestamp\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].map(pd.Timestamp.timestamp)\n    \n    # Prepare data\n    X = df['date'].values.reshape(-1, 1)\n    y = df['closing_price'].values\n    \n    # Fit model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Predict future prices\n    future_dates = np.array([df['date'].max() + i*24*60*60 for i in range(1, 8)]).reshape(-1, 1)\n    pred_prices = model.predict(future_dates)\n    \n    # Plot\n    fig, ax = plt.subplots()\n    ax.scatter(df['date'], df['closing_price'], color='black')\n    ax.plot(future_dates, pred_prices, color='blue', linewidth=3)\n    \n    return pred_prices.tolist(), ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame({\n            'date': pd.date_range(start='1/1/2021', end='1/7/2021'),\n            'closing_price': [100, 101, 102, 103, 104, 105, 106]\n        })\n        pred_prices, ax = task_func(df)\n        self.assertEqual(pred_prices, [107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0])\n        \n    def test_case_2(self):\n        df = pd.DataFrame({\n            'date': pd.date_range(start='2/1/2021', end='2/7/2021'),\n            'closing_price': [200, 201, 202, 203, 204, 205, 206]\n        })\n        pred_prices, ax = task_func(df)\n        self.assertEqual(pred_prices, [207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0])\n        \n    def test_case_3(self):\n        df = pd.DataFrame({\n            'date': pd.date_range(start='3/1/2021', end='3/7/2021'),\n            'closing_price': [300, 301, 302, 303, 304, 305, 306]\n        })\n        pred_prices, ax = task_func(df)\n        self.assertEqual(pred_prices, [307.0, 308.0, 309.0, 310.0, 311.0, 312.0, 313.0])\n        \n    def test_case_4(self):\n        df = pd.DataFrame({\n            'date': pd.date_range(start='4/1/2021', end='4/7/2021'),\n            'closing_price': [400, 401, 402, 403, 404, 405, 406]\n        })\n        pred_prices, ax = task_func(df)\n        self.assertEqual(pred_prices, [407.0, 408.0, 409.0, 410.0, 411.0, 412.0, 413.0])\n        \n    def test_case_5(self):\n        df = pd.DataFrame({\n            'date': pd.date_range(start='5/1/2021', end='5/7/2021'),\n            'closing_price': [500, 501, 502, 503, 504, 505, 506]\n        })\n        pred_prices, ax = task_func(df)\n        self.assertEqual(pred_prices, [507.0, 508.0, 509.0, 510.0, 511.0, 512.0, 513.0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a pie chart that shows the job distribution in the given data and return the plot object.\nThe function should raise the exception for: The function will raise ValueError if the input data is not a DataFrame.\nThe function should output with:\n    matplotlib.figure.Figure: The Figure object containing the pie chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n\n    \n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n\n    job_count = data['Job'].value_counts()\n    \n    labels = job_count.index.tolist()\n    sizes = job_count.values.tolist()\n    colors = [plt.cm.Spectral(i/float(len(labels))) for i in range(len(labels))]\n        \n    fig, ax = plt.subplots()\n    ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n    ax.axis('equal')\n\n    return fig",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_empty_data(self):\n        data = pd.DataFrame(columns=['Name', 'Date', 'Job'])\n        fig = task_func(data)\n        self.assertIsInstance(fig, plt.Figure)\n        plt.close()\n    def test_single_job(self):\n        data = pd.DataFrame({'Name': ['John'], 'Date': ['01/03/2012'], 'Job': ['Engineer']})\n        fig = task_func(data)\n        self.assertIsInstance(fig, plt.Figure)\n        # Check pie sizes\n        sizes = fig.axes[0].patches\n        self.assertEqual(len(sizes), 1)  # There should be only one slice\n        plt.close()\n    def test_multiple_jobs(self):\n        data = pd.DataFrame({'Name': ['John', 'Jane'], 'Date': ['01/03/2012', '02/05/2013'], 'Job': ['Engineer', 'Doctor']})\n        fig = task_func(data)\n        self.assertIsInstance(fig, plt.Figure)\n        # Check pie sizes\n        sizes = fig.axes[0].patches\n        self.assertEqual(len(sizes), 2)  # There should be two slices\n        plt.close()\n    def test_repeated_jobs(self):\n        data = pd.DataFrame({'Name': ['John', 'Jane', 'Joe'], 'Date': ['01/03/2012', '02/05/2013', '03/08/2014'], 'Job': ['Engineer', 'Engineer', 'Lawyer']})\n        fig = task_func(data)\n        self.assertIsInstance(fig, plt.Figure)\n        plt.close()\n    def test_large_dataset(self):\n        data = pd.DataFrame({'Name': ['Person' + str(i) for i in range(100)], 'Date': ['01/01/2020' for _ in range(100)], 'Job': ['Job' + str(i % 3) for i in range(100)]})\n        fig = task_func(data)\n        self.assertIsInstance(fig, plt.Figure)\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots the hourly difference between UTC and specified global time zones across a date range. This function visualizes the time difference in hours between UTC and predefined time zones for each day within the specified date range. Predefined time zones include UTC, America/Los_Angeles, Europe/Paris, Asia/Kolkata, and Australia/Sydney. The differences are plotted on a graph, using a distinct color for each time zone's time difference curve, selecting from [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"].\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the plotted time differences in hours between UTC and\n    other time zones.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n```",
        "gt": "from datetime import datetime, timedelta\nimport pytz\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(start_time, end_time):\n    # Constants\n    TIMEZONES = [\n        \"UTC\",\n        \"America/Los_Angeles\",\n        \"Europe/Paris\",\n        \"Asia/Kolkata\",\n        \"Australia/Sydney\",\n    ]\n    COLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n\n    start_date = datetime.strptime(start_time, \"%Y-%m-%d\")\n    end_date = datetime.strptime(end_time, \"%Y-%m-%d\")\n    current_tz = pytz.timezone(\"UTC\")\n    dates = np.arange(start_date, end_date, timedelta(days=1)).astype(datetime)\n    differences = []\n    for tz in TIMEZONES:\n        other_tz = pytz.timezone(tz)\n        difference = [\n            (other_tz.localize(dt) - current_tz.localize(dt)).total_seconds() / 3600\n            for dt in dates\n        ]\n        differences.append(difference)\n    fig, ax = plt.subplots()\n    for i, difference in enumerate(differences):\n        ax.plot(dates, difference, color=COLORS[i % len(COLORS)], label=TIMEZONES[i])\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Time difference (hours)\")\n    ax.legend()\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic functionality\n        ax = task_func(\"2021-01-01\", \"2021-01-10\")\n        self._common_assertions(ax)\n    def test_case_2(self):\n        # Test single day range\n        ax = task_func(\"2021-01-01\", \"2021-01-01\")\n        self._common_assertions(ax)\n    def test_case_3(self):\n        # Test leap year\n        ax = task_func(\"2020-02-28\", \"2020-03-01\")\n        self._common_assertions(ax)\n    def test_case_4(self):\n        # Test DST transition\n        ax = task_func(\"2021-03-27\", \"2021-03-29\")\n        self._common_assertions(ax)\n    def test_case_5(self):\n        # Test plotting consistency\n        ax = task_func(\"2021-01-01\", \"2021-01-10\")\n        colors = [line.get_color() for line in ax.get_lines()]\n        self.assertEqual(len(set(colors)), len(colors))  # Check if colors are unique\n    def test_case_6(self):\n        # Testing input validation via invalid date format\n        with self.assertRaises(ValueError):\n            task_func(\"01-01-2021\", \"10-01-2021\")\n    def _common_assertions(self, ax):\n        \"\"\"Common assertions for all test cases\"\"\"\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_xlabel(), \"Date\")\n        self.assertEqual(ax.get_ylabel().lower(), \"time difference (hours)\".lower())\n        legend_labels = [text.get_text() for text in ax.get_legend().get_texts()]\n        expected_timezones = [\n            \"UTC\",\n            \"America/Los_Angeles\",\n            \"Europe/Paris\",\n            \"Asia/Kolkata\",\n            \"Australia/Sydney\",\n        ]\n        self.assertListEqual(legend_labels, expected_timezones)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Combine two lists and record the frequency of predefined items in the combined list.\nThe function should output with:\n    matplotlib.axes.Axes: A bar chart showing the frequency of predefined items in the combined list.\nYou should write self-contained code starting with:\n```\nimport collections\nimport itertools\nimport matplotlib.pyplot as plt\n# Constants\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n```",
        "gt": "import collections\nimport itertools\nimport matplotlib.pyplot as plt\n# Constants\nITEMS = ['apple', 'banana']\ndef task_func(a, b, items=ITEMS):\n    # Combine lists\n    combined = list(itertools.chain(a, b))\n    # Count occurrences of each item\n    counter = collections.Counter(combined)\n    # Get counts for predefined items\n    item_counts = [counter.get(item, 0) for item in items]\n\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(items, item_counts, color='skyblue')\n    ax.set_xlabel('Items')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Item Frequency in Combined List')\n    plt.xticks(rotation=45)\n    plt.tight_layout()  # Adjust layout to make room for item labels\n\n    return ax",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_standard_functionality(self):\n        \"\"\"Test with typical list inputs.\"\"\"\n        a = ['apple', 'banana', 'cherry']\n        b = ['banana', 'apple', 'apple', 'dragonfruit']\n        ax = task_func(a, b)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_empty_lists(self):\n        \"\"\"Test with both lists empty.\"\"\"\n        a = []\n        b = []\n        ax = task_func(a, b)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_one_empty_list(self):\n        \"\"\"Test with one list empty.\"\"\"\n        a = ['apple', 'apple']\n        b = []\n        ax = task_func(a, b)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_non_predefined_items_only(self):\n        \"\"\"Test with lists containing non-predefined items.\"\"\"\n        a = ['cherry', 'dragonfruit']\n        b = ['cherry', 'mango']\n        ax = task_func(a, b)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_all_predefined_items(self):\n        \"\"\"Test with lists containing only predefined items.\"\"\"\n        a = ['apple', 'apple']\n        b = ['banana']\n        ax = task_func(a, b)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_duplicate_items(self):\n        \"\"\"Test with lists containing duplicate items.\"\"\"\n        a = ['apple', 'apple']\n        b = ['apple', 'banana', 'banana']\n        ax = task_func(a, b)\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze text content in JSON files from a given directory and find the most common words. This function reads all the JSON files in the specified directory, extracts the text content from each file, and determines the most frequent words. It then returns a list of the specified number of the most common words and their respective counts.\nThe function should output with:\n    list: A list of tuples with the most common words and their counts.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n```",
        "gt": "import pandas as pd\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_dir_path, word_count):\n    word_counter = Counter()\n    \n    for filename in os.listdir(json_dir_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(json_dir_path, filename), 'r') as f:\n                data = json.load(f)\n                text = data.get('text', '')\n                words = pd.Series(text.split())\n                word_counter += Counter(words)\n                \n    return word_counter.most_common(word_count)",
        "test": "import unittest\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create temporary JSON files for testing using tempfile\n        fake_data_1 = {\n            \"text\": \"Top visit morning price certainly indicate time. Figure add cold behind customer also.\" \n            \"Much join industry rate matter. Grow whether blue piece performance. And spend design speak \"\n            \"available evening. Network choice under wear. Listen world ago life hard list bag. Recently office \"\n            \"become network total student which color. Then director decision activity through new. Likely \"\n            \"scientist up. While little position statement. Other worker key local least.\"\n        }\n        fake_data_2 = {\n            \"text\": \"Itself to current listen. Cover add will feeling head. Perform family affect reduce \"\n            \"political general. Goal thought their treatment five born. In near his look recently treat. Read \"\n            \"know her drug without determine. Want surface president whatever staff. Adult soon second together \"\n            \"his wind. Early north voice magazine most enough pattern. Government hear back discussion admit \"\n            \"measure pick. Market final former defense. Effort leg many reflect. Responsibility phone national \"\n            \"beat none. Community current condition season ball sure administration final.\"\n        }\n        fake_data_3 = {\n            \"text\": \"Public plant program few close firm peace. Audience imagine attorney agreement team turn. \"\n            \"Necessary put character. People research plan agent read its. Seem impact door represent final. See \"\n            \"magazine pretty short next church. Bring last even wrong. Possible its impact join year. My final \"\n            \"use road. Box tough training participant network remember. Baby trouble natural nation boy there \"\n            \"yourself. Miss daughter address run with. Pull work bar lose.\"\n        }\n        fake_data_4 = {\n            \"text\": \"Live federal whatever single official deep. Effect TV store go should amount us threat. Admit \"\n            \"science law family everyone now. Soldier southern group that response attack personal. Carry water \"\n            \"list military capital activity. Trade say father manage Democrat. Their big upon green practice feeling. \"\n            \"Policy five dark represent across stand dark most. Woman western certain success condition community \"\n            \"appear. Event subject whose success economy.\"\n        }\n        fake_data_5 = {\n            \"text\": \"Security board interview ready there without fire. Street write somebody officer front he \"\n            \"agency. Heart later year TV garden. Support able peace thousand push success skin. Peace eight eight \"\n            \"between. Officer cup necessary reveal. End court skill book ground law finish world. Worry east author \"\n            \"chance report military per. Build share entire might beautiful brother. Maintain great edge more \"\n            \"family full market.\"\n        }\n        fake_data_6 = {\n            \"text\": \"Son sing teach finish window face community. Mean lawyer world good. Back political tax \"\n            \"structure control or difficult last. Current nice just whatever interesting. Share ago information \"\n            \"price never. Administration yes along north simply seem sister. Various instead record school effort \"\n            \"medical. Arm happen generation perform those special realize. Meet admit seek reduce. Ground begin \"\n            \"price keep modern especially statement. Argue key if use. Beautiful matter it concern quickly do. \"\n            \"Win avoid away blue someone. There authority behind camera station.\"\n        }\n        fake_data_7 = {\n            \"text\": \"You ground seek. Collection fall action security. Very stage growth act develop. Cell hope \"\n            \"clearly begin. Begin almost section contain read him. Across many smile drop perhaps system. Not push \"\n            \"her kind song fight much. Southern boy hear other democratic. Home especially really around fall \"\n            \"computer evidence. Bag decide father old area change. Research final manage day mind prove tend. \"\n            \"Institution group involve mother set we. Season national issue level president.\"\n        }\n        fake_data_8 = {\n            \"text\": \"Official court point sit. Good stay return. Hard attorney son nice compare. Collection fly dog \"\n            \"term. When wall program manage each street modern value. Reflect area travel every Republican miss \"\n            \"research. Treatment line difficult feeling another professional hospital. Apply good person opportunity \"\n            \"learn subject hotel. Cultural subject tell seven he use team. Together through run common relationship \"\n            \"just. Box human interest expert student less area. Job become senior ahead himself.\"\n        }\n        fake_data_9 = {\n            \"text\": \"Place so per approach. Difference low business. Card institution course will defense develop. \"\n            \"Growth usually great note above knowledge myself. Enough focus serve few until because ready. Ground \"\n            \"stuff region high. Region probably large program. Continue true Mr success school.\"\n        }\n        fake_data_10 = {\n            \"text\": \"Plan buy candidate. Pay factor all whole heart Republican prove rise. Family state maybe watch. \"\n            \"Sport improve worry care knowledge perhaps company thus. Away sport shake rich article pay born. Bag \"\n            \"source how white. Several purpose year short six. Economic practice form bill. Top face thank girl \"\n            \"together phone on him. Answer myself cultural suddenly attention. Answer understand great effect \"\n            \"evidence state pick. Painting make time she stock.\"\n        }\n        # Create a temporary directory\n        self.temp_dir = tempfile.TemporaryDirectory()\n        # Write fake data to JSON files in the temporary directory\n        for i, fake_data in enumerate([fake_data_1, fake_data_2, fake_data_3, fake_data_4, fake_data_5, fake_data_6,\n                                       fake_data_7, fake_data_8, fake_data_9, fake_data_10], 1):\n            with open(f\"{self.temp_dir.name}/fake_data_{i}.json\", 'w') as f:\n                json.dump(fake_data, f)\n    def tearDown(self):\n        # Delete temporary directory\n        self.temp_dir.cleanup()\n    def test_case_1(self):\n        # Testing with 3 most common words\n        result = task_func(f\"{self.temp_dir.name}/\", 3)\n        # Expecting 'Hello' to be the most common word based on our mock data\n        self.assertEqual(result[0][0], 'success')\n        self.assertEqual(len(result), 3)\n    def test_case_2(self):\n        # Testing with 5 most common words\n        result = task_func(f\"{self.temp_dir.name}/\", 5)\n        self.assertEqual(len(result), 5)\n    def test_case_3(self):\n        # Testing with all words\n        result = task_func(f\"{self.temp_dir.name}/\", 100)\n        self.assertTrue('world.' not in [word[0] for word in result])\n    def test_case_4(self):\n        # Testing with non-existent directory\n        with self.assertRaises(FileNotFoundError):\n            task_func('./non_existent_dir/', 3)\n    def test_case_5(self):\n        # Testing with 0 most common words (should return an empty list)\n        result = task_func(f\"{self.temp_dir.name}/\", 0)\n        self.assertEqual(result, [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a heatmap of the correlation matrix of a DataFrame built from a CSV file. Round each correlation to 2 decimals.\nThe function should output with:\n    DataFrame: correlation dataframe where each row and each column correspond to a specific column.\n    matplotlib.axes.Axes: The Axes object of the plotted data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(csv_file_path: str, title: str):\n    data = pd.read_csv(csv_file_path)\n    corr = data.corr().round(2)\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(corr, annot=True, cmap='coolwarm', cbar=True)\n    plt.title(title)\n    return corr, plt.gca()",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self) -> None:\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        data = pd.DataFrame({'A': range(10), 'B': range(10), 'C': range(10)})\n        data.to_csv(os.path.join(self.test_dir, \"csv_1.csv\"), index=False)\n        data = pd.DataFrame({'X': [1, 2, 3, 4, 5], 'Y': [5, 4, 3, 2, 1], 'Z': [2, 3, 4, 5, 6]})\n        data.to_csv(os.path.join(self.test_dir, \"csv_2.csv\"), index=False)\n        data = pd.DataFrame({'M': [10, 20, 30], 'N': [30, 20, 10], 'O': [15, 25, 35]})\n        data.to_csv(os.path.join(self.test_dir, \"csv_3.csv\"), index=False)\n        data = pd.DataFrame({'P': [10, 43], 'Q': [32, 19], 'R': [22, 16]})\n        data.to_csv(os.path.join(self.test_dir, \"csv_4.csv\"), index=False)\n        data = pd.DataFrame({'S': [1, 7, 3], 'T': [9, 9, 5], 'U': [5, 8, 2]})\n        data.to_csv(os.path.join(self.test_dir, \"csv_5.csv\"), index=False)\n    \n    def tearDown(self) -> None:\n        import shutil\n        try:\n            shutil.rmtree(self.test_dir)\n        except:\n            pass\n    def test_case_1(self):\n        title = 'Test Case 1'\n        expected_c = pd.DataFrame(\n            {\n                \"A\" : [1.0, 1.0, 1.0],\n                \"B\" : [1.0, 1.0, 1.0],\n                \"C\" : [1.0, 1.0, 1.0]\n            },\n            index = [\"A\", \"B\", \"C\"]\n        )\n        c, ax = task_func(os.path.join(self.test_dir, \"csv_1.csv\"), title)\n        self.assertEqual(ax.get_title(), title)\n        pd.testing.assert_frame_equal(c, expected_c)\n    def test_case_2(self):\n        title = 'Test Case 2'\n        expected_c = pd.DataFrame(\n            {\n                \"X\" : [1.0, -1.0, 1.0],\n                \"Y\" : [-1.0, 1.0, -1.0],\n                \"Z\" : [1.0, -1.0, 1.0]\n            },\n            index = [\"X\", \"Y\", \"Z\"]\n        )\n        c, ax = task_func(os.path.join(self.test_dir, \"csv_2.csv\"), title)\n        self.assertEqual(ax.get_title(), title)\n        pd.testing.assert_frame_equal(c, expected_c)\n    def test_case_3(self):        \n        title = 'Test Case 3'\n        _, ax = task_func(os.path.join(self.test_dir, \"csv_3.csv\"), title)\n        self.assertEqual(ax.get_title(), title)\n    \n    def test_case_4(self):     \n        title = 'Test Case 4'\n        _, ax = task_func(os.path.join(self.test_dir, \"csv_4.csv\"), title)\n        self.assertEqual(ax.get_title(), title)\n    def test_case_5(self):\n        title = 'Test Case 5'\n        expected_c = pd.DataFrame(\n            {\n                \"S\" : [1.0, 0.19, 0.65],\n                \"T\" : [0.19, 1.0, 0.87],\n                \"U\" : [0.65, 0.87, 1.0]\n            },\n            index = [\"S\", \"T\", \"U\"]\n        )\n        c, ax = task_func(os.path.join(self.test_dir, \"csv_5.csv\"), title)\n        self.assertEqual(ax.get_title(), title)\n        pd.testing.assert_frame_equal(c, expected_c)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Evaluates each item (files and directories) in a given directory against specified conditions.\nNote that: This function evaluates file/directory names, rather than their full path. Predicates are deduplicated.\nThe function should raise the exception for: ValueError: If no valid predicates are provided. FileNotFoundError: If the specified directory does not exist or is not a directory.\nThe function should output with:\n    dict: A dictionary with directory items as keys and the results of condition checks as values.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n```",
        "gt": "import os\nimport re\nfrom pathlib import Path\ndef task_func(dir_path: str, predicates: list) -> dict:\n    predicate_functions = {\n        \"is_file\": lambda x: x.is_file(),\n        \"is_dir\": lambda x: x.is_dir(),\n        \"has_special_chars\": lambda x: bool(re.search(r\"\\W\", x.stem)),\n        \"has_numbers\": lambda x: bool(re.search(r\"\\d\", x.name)),\n    }\n    predicates = [p for p in set(predicates) if p in predicate_functions]\n    if not predicates:\n        raise ValueError(\"No valid predicates provided.\")\n\n    if not os.path.exists(dir_path) or not os.path.isdir(dir_path):\n        raise FileNotFoundError(\n            f\"The directory {dir_path} does not exist or is not a directory.\"\n        )\n\n    results = {}\n    for item in os.listdir(dir_path):\n        full_path = Path(os.path.join(dir_path, item))\n        results[item] = {\n            predicate_name: predicate_fn(full_path)\n            for predicate_name, predicate_fn in predicate_functions.items()\n            if predicate_name in predicates\n        }\n    return results",
        "test": "import unittest\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = TemporaryDirectory()\n        self.test_dir = self.temp_dir.name\n        self.fields = [\n            \"is_file\",\n            \"is_dir\",\n            \"has_special_chars\",\n            \"has_numbers\",\n        ]\n        self.is_file_fns = [\n            \"file\",\n            \"file.txt\",\n            \"file1.txt\",\n            \"somefile\",\n        ]\n        self.is_dir_fns = [\"somedir\", \"aDirectory123\"]\n    def tearDown(self):\n        self.temp_dir.cleanup()\n    def helper_make_data(self, name, is_dir=False):\n        # Helper function to make test files\n        if is_dir:\n            Path(os.path.join(self.test_dir, name)).mkdir()\n        else:\n            Path(os.path.join(self.test_dir, name)).touch()\n    def helper_assert_predicate(self, results, predicates):\n        # Helper to check only specified predicates are returned\n        num_predicates = len(predicates)\n        self.assertTrue(all(len(r) == num_predicates for r in results.values()))\n        self.assertTrue(\n            all(predicate in r for r in results.values() for predicate in predicates)\n        )\n    def test_file_is_file(self):\n        field = \"is_file\"\n        for fn in self.is_file_fns:\n            self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), [field])\n        for fn in self.is_file_fns:\n            self.assertTrue(result[fn][field])\n        self.helper_assert_predicate(result, [field])\n    def test_file_is_not_dir(self):\n        field = \"is_dir\"\n        for fn in self.is_file_fns:\n            self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), [field])\n        for fn in self.is_file_fns:\n            self.assertFalse(result[fn][field])\n        self.helper_assert_predicate(result, [field])\n    def test_dir_is_dir(self):\n        field = \"is_dir\"\n        for fn in self.is_dir_fns:\n            self.helper_make_data(fn, is_dir=True)\n        result = task_func(str(self.test_dir), [field])\n        for fn in self.is_dir_fns:\n            self.assertTrue(result[fn][field])\n        self.helper_assert_predicate(result, [field])\n    def test_dir_is_not_file(self):\n        field = \"is_file\"\n        for fn in self.is_dir_fns:\n            self.helper_make_data(fn, is_dir=True)\n        result = task_func(str(self.test_dir), [field])\n        for fn in self.is_dir_fns:\n            self.assertFalse(result[fn][field])\n        self.helper_assert_predicate(result, [field])\n    def test_has_special_char(self):\n        field = \"has_special_chars\"\n        fns = [\"fi!e\", \"fi@\", \"f.ile.txt\"]\n        for fn in fns:\n            self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), [field])\n        for fn in fns:\n            self.assertTrue(result[fn][field], result)\n        self.helper_assert_predicate(result, [field])\n    def test_has_no_special_char(self):\n        field = \"has_special_chars\"\n        fns = [\"file_\", \"_file\", \"file.txt\", \"some_file.txt\"]\n        for fn in fns:\n            self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), [field])\n        for fn in fns:\n            self.assertFalse(result[fn][field])\n        self.helper_assert_predicate(result, [field])\n    def test_has_numbers(self):\n        field = \"has_numbers\"\n        fns = [\"123\", \"123.txt\", \"text123\", \"t1e2x3t4\"]\n        for fn in fns:\n            self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), [field])\n        for fn in fns:\n            self.assertTrue(result[fn][field])\n        self.helper_assert_predicate(result, [field])\n    def test_multiple_predicates(self):\n        fn = \"test1!.txt\"\n        self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), self.fields)\n        self.helper_assert_predicate(result, self.fields)\n        self.assertTrue(result[fn][\"is_file\"])\n        self.assertFalse(result[fn][\"is_dir\"])\n        self.assertTrue(result[fn][\"has_special_chars\"])\n        self.assertTrue(result[fn][\"has_numbers\"])\n    def test_deduplicate_predicates(self):\n        fn = \"test_file\"\n        self.helper_make_data(fn, is_dir=False)\n        result = task_func(str(self.test_dir), [\"is_file\", \"is_file\"])\n        self.assertTrue(len(result) == 1)\n        self.helper_assert_predicate(result, [\"is_file\"])\n    def test_empty_predicates(self):\n        with self.assertRaises(ValueError):\n            task_func(str(self.test_dir), [])\n    def test_invalid_predicates(self):\n        with self.assertRaises(ValueError):\n            task_func(str(self.test_dir), [\"foo\", \"bar\"])\n    def test_nonexistent_directory_error(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"nonexistent_dir\", [\"is_file\"])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a pandas DataFrame with 'Date' and 'Value' columns. The 'Value' column contains lists of numbers. Converts 'Date' to datetime, splits 'Value' lists into separate columns, calculates Z-scores, and creates a box plot for Z-scores over time.\nNote that: This function use \"Z-Scores Over Time\" for the plot title. This function use \"Date\" and \"Z-Score\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: This function will raise KeyError if the DataFrame does not have the 'Date' and 'Value' columns.\nThe function should output with:\n    DataFrame: With original 'Value' lists split into separate columns and replaced with Z-scores.\n    Figure: A matplotlib figure of a box plot of Z-scores over time.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom scipy.stats import zscore\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    df.iloc[:,1:] = df.iloc[:,1:].apply(zscore)\n    \n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    df.set_index('Date').boxplot(ax=ax)\n    ax.set_title('Z-Scores Over Time')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Z-Score')\n    \n    return df, fig",
        "test": "import unittest\nimport pandas as pd\nfrom faker import Faker\nimport matplotlib.pyplot as plt\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fake = Faker()\n    \n    def test_empty_dataframe(self):\n        df = pd.DataFrame(columns=['Date', 'Value'])\n        with self.assertRaises(Exception):\n            task_func(df)\n        plt.close()\n    def test_typical_data(self):\n        df = pd.DataFrame([[self.fake.date(), [self.fake.random_number(digits=2) for _ in range(3)]] for _ in range(5)],\n                          columns=['Date', 'Value'])\n        zscore_df, fig = task_func(df)\n        self.assertEqual(zscore_df.shape, (5, 4))\n        self.assertIsInstance(fig, plt.Figure)\n        self.assertEqual(len(fig.axes), 1)\n        ax = fig.axes[0]\n        self.assertEqual(ax.get_title(), 'Z-Scores Over Time')\n        self.assertEqual(ax.get_xlabel(), 'Date')\n        self.assertEqual(ax.get_ylabel(), 'Z-Score')\n        plt.close()\n    def test_nan_values(self):\n        df = pd.DataFrame([['2021-01-01', [5, np.nan, 7]], ['2021-01-02', [np.nan, 9, 10]]], columns=['Date', 'Value'])\n        zscore_df, fig = task_func(df)\n        self.assertEqual(zscore_df.shape, (2, 4))\n        self.assertIsInstance(fig, plt.Figure)\n        plt.close()\n    def test_single_row_data(self):\n        df = pd.DataFrame([[self.fake.date(), [self.fake.random_number(digits=2) for _ in range(3)]]],\n                          columns=['Date', 'Value'])\n        zscore_df, fig = task_func(df)\n        self.assertEqual(zscore_df.shape, (1, 4))\n        self.assertIsInstance(fig, plt.Figure)\n        plt.close()\n    def test_non_numeric_values(self):\n        df = pd.DataFrame([[self.fake.date(), [self.fake.word() for _ in range(3)]] for _ in range(5)],\n                          columns=['Date', 'Value'])\n        with self.assertRaises(Exception):\n            task_func(df)\n        plt.close()\n    def test_large_dataset(self):\n        df = pd.DataFrame([[self.fake.date(), [self.fake.random_number(digits=2) for _ in range(10)]] for _ in range(100)],\n                          columns=['Date', 'Value'])\n        zscore_df, fig = task_func(df)\n        self.assertEqual(zscore_df.shape, (100, 11))\n        self.assertIsInstance(fig, plt.Figure)\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts CSV content into an Excel file and saves it with the given filename. The function reads the CSV content, creates a new Excel workbook, writes the data into the workbook, and saves it as an Excel file. Create an Excel file with a single cell. >>> csv_content = 'Hello' >>> os.path.isfile(task_func(csv_content, 'single_cell.xls')) True\nThe function should output with:\n    str: The absolute path of the created Excel file.\nYou should write self-contained code starting with:\n```\nimport xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n```",
        "gt": "import xlwt\nimport os\nimport io\nimport csv\ndef task_func(csv_content, filename):\n    book = xlwt.Workbook()\n    sheet1 = book.add_sheet(\"sheet1\")\n\n    reader = csv.reader(io.StringIO(csv_content))\n    for row_index, row in enumerate(reader):\n        for col_index, col in enumerate(row):\n            sheet1.write(row_index, col_index, col)\n\n    book.save(filename)\n\n    return os.path.abspath(filename)",
        "test": "import unittest\nimport os\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up a temporary directory for test files.\"\"\"\n        self.temp_dir = tempfile.TemporaryDirectory()\n    def tearDown(self):\n        \"\"\"Clean up and remove the temporary directory after tests.\"\"\"\n        self.temp_dir.cleanup()\n    def test_csv_to_excel_conversion(self):\n        \"\"\"Test conversion of basic CSV content to an Excel file.\"\"\"\n        csv_content = 'ID,Name,Age\\n1,John Doe,30\\n2,Jane Doe,28'\n        filename = os.path.join(self.temp_dir.name, 'test_data.xls')\n        result_path = task_func(csv_content, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_single_cell_excel(self):\n        \"\"\"Test creation of an Excel file from CSV content with a single cell.\"\"\"\n        csv_content = 'Hello'\n        filename = os.path.join(self.temp_dir.name, 'single_cell.xls')\n        result_path = task_func(csv_content, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_empty_csv(self):\n        \"\"\"Test handling of empty CSV content without causing errors.\"\"\"\n        csv_content = ''\n        filename = os.path.join(self.temp_dir.name, 'empty.xls')\n        result_path = task_func(csv_content, filename)\n        self.assertTrue(os.path.isfile(result_path))\n    def test_nonstandard_csv(self):\n        \"\"\"Ensure the function can handle non-standard CSV formats, expecting failure or adaptation.\"\"\"\n        csv_content = 'One;Two;Three\\n1;2;3'  # This test may need function adaptation to pass.\n        filename = os.path.join(self.temp_dir.name, 'nonstandard.xls')  # Corrected extension to .xls\n        result_path = task_func(csv_content, filename)\n        self.assertTrue(os.path.isfile(result_path))  # This assertion may fail without function adaptation.\n    def test_multiple_rows(self):\n        \"\"\"Test conversion of multi-row CSV content to ensure all rows are processed.\"\"\"\n        csv_content = 'A,B,C\\n1,2,3\\n4,5,6'\n        filename = os.path.join(self.temp_dir.name, 'multi_rows.xls')\n        result_path = task_func(csv_content, filename)\n        self.assertTrue(os.path.isfile(result_path))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scale the values in a list of lists to a (0,1) range using MinMaxScaler. If any inner list is empty, the function fills it with five random integers between 0 and 100, and then scales the values.\nThe function should output with:\n    list of list of float: A list of lists containing scaled values between the range [0, 1].\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n```",
        "gt": "import numpy as np\nimport random\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(list_of_lists, seed=42):\n    np.random.seed(seed)\n    random.seed(seed)\n    scaled_data = []\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    for list_ in list_of_lists:\n        if not list_:\n            list_ = [random.randint(0, 100) for _ in range(5)]\n        # Reshape the data to fit the scaler\n        reshaped_data = np.array(list_).reshape(-1, 1)\n        scaled_list = scaler.fit_transform(reshaped_data)\n        # Flatten the list and append to the result\n        scaled_data.append(scaled_list.flatten().tolist())\n    \n    return scaled_data",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        input_data = [[1, 2, 3], [], [4, 5, 6]]\n        output = task_func(input_data)\n        for inner_list in output:\n            self.assertTrue(0.0 <= min(inner_list) <= 1.0)\n            self.assertTrue(0.0 <= max(inner_list) <= 1.0)\n            self.assertTrue(len(inner_list) <= 5)\n    \n    def test_case_2(self):\n        input_data = [[10, 20, 30, 40, 50], [], [60, 70, 80, 90, 100]]\n        output = task_func(input_data)\n        for inner_list in output:\n            self.assertTrue(0.0 <= min(inner_list) <= 1.0)\n            self.assertTrue(0.0 <= max(inner_list) <= 1.0)\n            self.assertEqual(len(inner_list), 5)\n        \n    def test_case_3(self):\n        input_data = [[], [], []]\n        output = task_func(input_data)\n        for inner_list in output:\n            self.assertTrue(0.0 <= min(inner_list) <= 1.0)\n            self.assertTrue(0.0 <= max(inner_list) <= 1.0)\n            self.assertEqual(len(inner_list), 5)\n    def test_case_4(self):\n        input_data = [[15], [25], [35], [45], [55]]\n        expected_output = [[0.0], [0.0], [0.0], [0.0], [0.0]]\n        output = task_func(input_data)\n        self.assertEqual(output, expected_output)\n    \n    def test_case_5(self):\n        input_data = [[0, 100], [0, 50], [50, 100]]\n        expected_output = [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]\n        output = task_func(input_data)\n        self.assertEqual(output, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads a JSON file containing a list of dictionaries. For each key across all dictionaries, calculates the mean and median of its values using numpy. Visualizes the mean and median using bar charts. Returns the results and plots.\nThe function should output with:\n    result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n    value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n    plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n    each key in the dictionaries, visualizing the mean and median values.\nYou should write self-contained code starting with:\n```\nimport json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n```",
        "gt": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\ndef task_func(input_file):\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots",
        "test": "import matplotlib\nimport unittest\nimport tempfile\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.test_data = {\n            \"test_1.json\": [{\"a\": 2, \"b\": 4}, {\"a\": 4, \"b\": 8}],\n            \"test_2.json\": [{\"x\": 1}, {\"y\": 2}, {\"z\": 6}],\n            \"invalid.json\": {\"not\": \"valid\"},\n            \"empty.json\": [],\n        }\n        # Generate test files\n        for filename, content in self.test_data.items():\n            with open(os.path.join(self.temp_dir.name, filename), \"w\") as f:\n                json.dump(content, f)\n    def tearDown(self):\n        self.temp_dir.cleanup()\n        plt.close(\"all\")\n    def test_case_1(self):\n        # Check plot generation\n        expected_titles = [\"a\", \"b\"]\n        _, plots = task_func(os.path.join(self.temp_dir.name, \"test_1.json\"))\n        self.assertEqual(len(plots), len(expected_titles))\n        for plot, title in zip(plots, expected_titles):\n            assert isinstance(plot, matplotlib.axes._axes.Axes)\n            self.assertTrue(plot.get_title(), f\"Statistics of {title}\")\n    def test_case_2(self):\n        # Check result correctness\n        results, _ = task_func(os.path.join(self.temp_dir.name, \"test_1.json\"))\n        self.assertIn(\"a\", results)\n        self.assertIn(\"b\", results)\n        self.assertEqual(results[\"a\"][\"mean\"], 3.0)\n        self.assertEqual(results[\"a\"][\"median\"], 3.0)\n        self.assertEqual(results[\"b\"][\"mean\"], 6.0)\n        self.assertEqual(results[\"b\"][\"median\"], 6.0)\n    def test_case_3(self):\n        # Test with invalid data structure (not a list of dicts)\n        with self.assertRaises(AttributeError):\n            task_func(os.path.join(self.temp_dir.name, \"invalid.json\"))\n    def test_case_4(self):\n        # Test with empty data\n        results, plots = task_func(os.path.join(self.temp_dir.name, \"empty.json\"))\n        self.assertEqual(results, {})\n        self.assertEqual(len(plots), 0)\n    def test_case_5(self):\n        # Test handling nested dicts with one key each\n        results, _ = task_func(os.path.join(self.temp_dir.name, \"test_2.json\"))\n        self.assertIn(\"x\", results)\n        self.assertIn(\"y\", results)\n        self.assertIn(\"z\", results)\n        self.assertEqual(results[\"x\"][\"mean\"], 1.0)\n        self.assertEqual(results[\"x\"][\"median\"], 1.0)\n        self.assertEqual(results[\"y\"][\"mean\"], 2.0)\n        self.assertEqual(results[\"y\"][\"median\"], 2.0)\n        self.assertEqual(results[\"z\"][\"mean\"], 6.0)\n        self.assertEqual(results[\"z\"][\"median\"], 6.0)\n    def test_case_6(self):\n        # Test with nonexistent filename\n        with self.assertRaises(FileNotFoundError):\n            task_func(os.path.join(self.temp_dir.name, \"NOTEXISTS.json\"))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Select a random file from a given list of files in a specified directory and run it as a subprocess.\nThe function should output with:\n    int: The exit code of the subprocess, or None if the process is still running or if the file list is empty.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n```",
        "gt": "import subprocess\nimport os\nimport random\ndef task_func(directory, file_list):\n\n    if not file_list:\n        return None\n\n    file = random.choice(file_list)\n    file_path = os.path.join(directory, file)\n    try:\n        process = subprocess.Popen(file_path)\n        process.wait()  # wait for the process to complete\n        return process.returncode  # return the exit code\n    except Exception as e:\n        return None",
        "test": "import unittest\nimport subprocess\nfrom unittest.mock import patch, MagicMock\nimport random\nclass TestCases(unittest.TestCase):\n    def test_valid_input(self):\n        random.seed(0)\n        # Testing with a valid directory and file list\n        directory = \"valid_dir\"\n        file_list = [\"script1.bat\", \"script2.bat\"]\n        with patch('subprocess.Popen') as mock_popen:\n            mock_process = MagicMock()\n            mock_process.wait.return_value = None\n            mock_process.returncode = 0\n            mock_popen.return_value = mock_process\n            result = task_func(directory, file_list)\n            self.assertEqual(result, 0)\n    def test_empty_file_list(self):\n        # Testing with an empty file list\n        random.seed(0)\n        directory = \"valid_dir\"\n        file_list = []\n        result = task_func(directory, file_list)\n        self.assertIsNone(result)\n    def test_invalid_directory(self):\n        # Testing with an invalid directory\n        random.seed(0)\n        directory = \"invalid_dir\"\n        file_list = [\"script1.bat\"]\n        with patch('subprocess.Popen', side_effect=Exception(\"Error\")):\n            result = task_func(directory, file_list)\n            self.assertIsNone(result)\n    def test_non_zero_exit_code(self):\n        # Testing a subprocess that returns a non-zero exit code\n        random.seed(0)\n        directory = \"valid_dir\"\n        file_list = [\"script3.bat\"]\n        with patch('subprocess.Popen') as mock_popen:\n            mock_process = MagicMock()\n            mock_process.wait.return_value = None\n            mock_process.returncode = 1\n            mock_popen.return_value = mock_process\n            result = task_func(directory, file_list)\n            self.assertEqual(result, 1)\n    def test_random_file_selection(self):\n        # Testing that a file is randomly selected from the list\n        random.seed(0)\n        directory = \"valid_dir\"\n        file_list = [\"script1.bat\", \"script2.bat\", \"script3.bat\"]\n        with patch('random.choice', side_effect=file_list):\n            with patch('subprocess.Popen') as mock_popen:\n                mock_process = MagicMock()\n                mock_process.wait.return_value = None\n                mock_process.returncode = 0\n                mock_popen.return_value = mock_process\n                for expected_file in file_list:\n                    result = task_func(directory, file_list)\n                    # Manually check that the expected command was part of any call\n                    expected_call = os.path.join(directory, expected_file)\n                    found = False\n                    for call in mock_popen.call_args_list:\n                        call_args, call_kwargs = call\n                        if call_args[0] == expected_call:\n                            found = True\n                            break\n                    self.assertTrue(found, f\"Expected call with {expected_call} not found\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize 'Age' and 'Score' columns in a pandas DataFrame, remove duplicate entries based on 'Name', and plot a scatter plot of these standardized values.\nNote that: The function use \"Scatter Plot of Standardized Age and Score\" for the plot title. The function use \"Age (standardized)\" and \"Score (standardized)\" as the xlabel and ylabel respectively.\nThe function should output with:\n    pandas.DataFrame: DataFrame with standardized 'Age' and 'Score', duplicates removed.\n    matplotlib.axes.Axes: Axes object of the scatter plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```",
        "gt": "import matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n\n    df = df.drop_duplicates(subset='Name')\n\n    scaler = StandardScaler()\n\n    df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']])\n\n    plt.figure(figsize=(8, 6))\n    plt.scatter(df['Age'], df['Score'])\n    plt.xlabel('Age (standardized)')\n    plt.ylabel('Score (standardized)')\n    plt.title('Scatter Plot of Standardized Age and Score')\n    ax = plt.gca()  # Get current axes\n    \n    return df, ax",
        "test": "import unittest\nimport pandas as pd\nfrom faker import Faker\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Using Faker to create test data\n        fake = Faker()\n        self.test_data = pd.DataFrame([{'Name': fake.name(), 'Age': fake.random_int(min=18, max=100), 'Score': fake.random_int(min=0, max=100)} for _ in range(10)])\n    def test_duplicate_removal(self):\n        df, _ = task_func(self.test_data)\n        self.assertEqual(df['Name'].nunique(), df.shape[0])\n    def test_standardization(self):\n        df, _ = task_func(self.test_data)\n        self.assertAlmostEqual(df['Age'].mean(), 0, places=1)\n        self.assertAlmostEqual(int(df['Age'].std()), 1, places=1)\n        self.assertAlmostEqual(df['Score'].mean(), 0, places=1)\n        self.assertAlmostEqual(int(df['Score'].std()), 1, places=1)\n    def test_return_types(self):\n        data = pd.DataFrame([\n            {'Name': 'James', 'Age': 30, 'Score': 85},\n            {'Name': 'James', 'Age': 35, 'Score': 90},\n            {'Name': 'Lily', 'Age': 28, 'Score': 92},\n            {'Name': 'Sam', 'Age': 40, 'Score': 88},\n            {'Name': 'Nick', 'Age': 50, 'Score': 80}\n        ])\n        df, ax = task_func(data)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_plot_contents(self):\n        _, ax = task_func(self.test_data)\n        self.assertEqual(ax.get_title(), 'Scatter Plot of Standardized Age and Score')\n        self.assertEqual(ax.get_xlabel(), 'Age (standardized)')\n        self.assertEqual(ax.get_ylabel(), 'Score (standardized)')\n    def test_plot_data_points(self):\n        df, ax = task_func(self.test_data)\n        scatter = [child for child in ax.get_children() if isinstance(child, matplotlib.collections.PathCollection)]\n        self.assertGreater(len(scatter), 0)\n        self.assertEqual(len(scatter[0].get_offsets()), len(df))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame from a 2D list and plot the sum of each column. Internal Constants: COLUMNS: List of column names used for the DataFrame ['A', 'B', 'C', 'D', 'E']\nThe function should output with:\n    DataFrame, Axes: A pandas DataFrame with the data and a matplotlib Axes object showing the sum of each column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(array):\n    # Internal Constants\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    df = pd.DataFrame(array, columns=COLUMNS)\n    sums = df.sum()\n\n    fig, ax = plt.subplots()\n    sums.plot(kind=\"bar\", ax=ax)\n\n    return df, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df, ax = task_func([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n        self.assertEqual(df.values.tolist(), [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n        self.assertEqual(df.columns.tolist(), [\"A\", \"B\", \"C\", \"D\", \"E\"])\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_2(self):\n        df, ax = task_func(\n            [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [5, 15, 25, 35, 45]]\n        )\n        self.assertEqual(\n            df.values.tolist(),\n            [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [5, 15, 25, 35, 45]],\n        )\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_3(self):\n        # Test handling uniform data\n        df, ax = task_func([[1, 1, 1, 1, 1]])\n        self.assertEqual(df.values.tolist(), [[1, 1, 1, 1, 1]])\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_4(self):\n        # Test handling all zero\n        df, ax = task_func([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])\n        self.assertEqual(df.values.tolist(), [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_5(self):\n        # Handle negatives\n        df, ax = task_func([[-1, -2, -3, -4, -5], [1, 2, 3, 4, 5]])\n        self.assertEqual(df.values.tolist(), [[-1, -2, -3, -4, -5], [1, 2, 3, 4, 5]])\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_6(self):\n        # Handle empty\n        df, ax = task_func([])\n        self.assertEqual(df.values.tolist(), [])\n        self.assertTrue(isinstance(ax, plt.Axes))\n    def test_case_7(self):\n        # Handle invalid input\n        with self.assertRaises(TypeError):\n            task_func([[\"a\", \"b\", \"c\", \"d\", \"e\"]])\n    def test_case_8(self):\n        # Handle large numbers\n        df, _ = task_func([[1000000, 2000000, 3000000, 4000000, 5000000]])\n        self.assertTrue(\n            all(\n                df.sum()\n                == pd.Series(\n                    [1000000, 2000000, 3000000, 4000000, 5000000],\n                    index=[\"A\", \"B\", \"C\", \"D\", \"E\"],\n                )\n            )\n        )\n    def test_case_9(self):\n        # Test plot details\n        _, ax = task_func([[1, 2, 3, 4, 5]])\n        self.assertEqual(len(ax.patches), 5)  # Checks if there are exactly 5 bars\n        bar_labels = [bar.get_x() for bar in ax.patches]\n        self.assertEqual(len(bar_labels), 5)\n    def test_case_10(self):\n        # Test column sums with plot check\n        data = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [2, 3, 4, 5, 6]]\n        df, ax = task_func(data)\n        column_sums = df.sum().tolist()\n        bar_heights = [bar.get_height() for bar in ax.patches]\n        self.assertEqual(column_sums, bar_heights)\n        self.assertEqual(\n            len(ax.patches), len(data[0])\n        )  # Ensure there's a bar for each column\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a pandas DataFrame containing shuffled combinations of provided colors and states. The DataFrame is formatted so that each column represents a series of unique combinations, with each combination displayed as \"Color:State\".\nNote that: Cartesian product of 'colors' and 'states', The number of columns in the resulting DataFrame is determined by the smaller number of elements in either the 'colors' or 'states' list, ensuring an even distribution without excess empty cells. If the number of combinations is not evenly divisible by the number of columns, some columns will have fewer entries.\nThe function should output with:\n    df (pandas.DataFrame): A DataFrame where each cell contains a string of the format \"Color:State\".\n    The combinations are distributed across columns, with the number of columns being the lesser\n    of the lengths of 'colors' and 'states'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n```",
        "gt": "import pandas as pd\nimport itertools\nimport random\ndef task_func(colors, states):\n    combinations = list(itertools.product(colors, states))\n    random.seed(42)\n    random.shuffle(combinations)\n    num_columns = min(len(colors), len(states))\n\n    data = {\n        f\"Color:State {i+1}\": [\n            f\"{comb[0]}:{comb[1]}\" for comb in combinations[i::num_columns]\n        ]\n        for i in range(num_columns)\n    }\n    df = pd.DataFrame(data)\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def test_empty_lists(self):\n        \"\"\"Test with empty color and state lists.\"\"\"\n        self.assertEqual(task_func([], []).empty, True)\n    def test_single_color_and_state(self):\n        \"\"\"Test with one color and one state.\"\"\"\n        random.seed(0)\n        result = task_func([\"Red\"], [\"Solid\"])\n        expected = pd.DataFrame({\"Color:State 1\": [\"Red:Solid\"]})\n        pd.testing.assert_frame_equal(result, expected)\n    def test_multiple_colors_single_state(self):\n        \"\"\"Test with multiple colors and a single state.\"\"\"\n        random.seed(1)\n        result = task_func([\"Red\", \"Blue\", \"Green\"], [\"Solid\"])\n        expected_combinations = set([\"Red:Solid\", \"Blue:Solid\", \"Green:Solid\"])\n        result_combinations = set(result[\"Color:State 1\"])\n        self.assertEqual(result_combinations, expected_combinations)\n    def test_single_color_multiple_states(self):\n        \"\"\"Test with a single color and multiple states.\"\"\"\n        random.seed(2)\n        result = task_func([\"Red\"], [\"Solid\", \"Liquid\", \"Gas\"])\n        expected_combinations = set([\"Red:Solid\", \"Red:Liquid\", \"Red:Gas\"])\n        result_combinations = set(result[\"Color:State 1\"])\n        self.assertEqual(result_combinations, expected_combinations)\n    def test_multiple_colors_and_states(self):\n        \"\"\"Test with multiple colors and states.\"\"\"\n        random.seed(3)\n        colors = [\"Red\", \"Blue\"]\n        states = [\"Solid\", \"Liquid\"]\n        result = task_func(colors, states)\n        expected_combinations = set(\n            [f\"{color}:{state}\" for color in colors for state in states]\n        )\n        result_combinations = set(result.values.flatten())\n        self.assertEqual(result_combinations, expected_combinations)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a random string of specified length and evaluates it for specific characteristics.\nNote that: Notes: Predicates are deduplicated. Characters are randomly sampled from string ascii_letters, digits, and punctuation with replacement. Any invalid predicates provided will result in a KeyError. If no predicates are provided, the result dictionary will be empty.\nThe function should raise the exception for: ValueError: If the specified length is negative. KeyError: If any predicate is not recognized.\nThe function should output with:\n    tuple:\n    string: the generated random text\n    dict: the text's characteristics\nYou should write self-contained code starting with:\n```\nimport random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n```",
        "gt": "import random\nimport string\ndef task_func(length: int, predicates: list, seed: int = None):\n    if seed is not None:\n        random.seed(seed)\n\n    if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n\n    predicate_functions = {\n        \"has_uppercase\": lambda x: any(c.isupper() for c in x),\n        \"has_lowercase\": lambda x: any(c.islower() for c in x),\n        \"has_special_chars\": lambda x: any(c in string.punctuation for c in x),\n        \"has_numbers\": lambda x: any(c.isdigit() for c in x),\n    }\n\n    predicates = list(set(predicates))\n    if any(p not in predicate_functions for p in predicates):\n        raise KeyError(f\"Invalid predicate provided.\")\n\n    characters = string.ascii_letters + string.digits + string.punctuation\n    generated_string = \"\".join(random.choices(characters, k=length))\n\n    results = {\n        predicate: predicate_functions[predicate](generated_string)\n        for predicate in predicates\n    }\n\n    return generated_string, results",
        "test": "import unittest\nimport string\nclass TestCases(unittest.TestCase):\n    def test_valid_length_and_predicates(self):\n        result_str, result_dict = task_func(\n            10,\n            [\"has_uppercase\", \"has_lowercase\", \"has_numbers\", \"has_special_chars\"],\n            seed=1,\n        )\n        self.assertEqual(len(result_str), 10)\n        self.assertTrue(result_dict[\"has_uppercase\"])\n        self.assertTrue(result_dict[\"has_lowercase\"])\n        self.assertTrue(result_dict[\"has_numbers\"])\n        self.assertTrue(result_dict[\"has_special_chars\"])\n    def test_result_correctness(self):\n        n_repetitions = 1000\n        for _ in range(n_repetitions):\n            result_str, result_dict = task_func(\n                10,\n                [\"has_uppercase\", \"has_lowercase\", \"has_numbers\", \"has_special_chars\"],\n                seed=1,\n            )\n            if any(c.isupper() for c in result_str):\n                self.assertTrue(result_dict[\"has_uppercase\"])\n            if any(c.islower() for c in result_str):\n                self.assertTrue(result_dict[\"has_lowercase\"])\n            if any(c in string.punctuation for c in result_str):\n                self.assertTrue(result_dict[\"has_special_chars\"])\n            if any(c.isdigit() for c in result_str):\n                self.assertTrue(result_dict[\"has_numbers\"])\n    def test_empty_string(self):\n        result_str, result_dict = task_func(0, [\"has_uppercase\", \"has_numbers\"], seed=3)\n        self.assertEqual(result_str, \"\")\n        self.assertFalse(result_dict[\"has_uppercase\"])\n        self.assertFalse(result_dict[\"has_numbers\"])\n    def test_negative_length(self):\n        with self.assertRaises(ValueError):\n            task_func(-1, [\"has_uppercase\"])\n    def test_no_predicates(self):\n        result_str, result_dict = task_func(10, [], seed=5)\n        self.assertEqual(len(result_str), 10)\n        self.assertEqual(result_dict, {})\n    def test_key_error(self):\n        with self.assertRaises(KeyError):\n            task_func(10, [\"has_uppercase\", \"invalid\"])\n    def test_deduplicate_predicates(self):\n        _, result_dict = task_func(15, [\"has_uppercase\", \"has_uppercase\"], seed=7)\n        self.assertEqual(len(result_dict), 1)\n    def test_random_seed_reproducibility(self):\n        result_str1, result_dict1 = task_func(10, [\"has_uppercase\", \"has_numbers\"], seed=8)\n        result_str2, result_dict2 = task_func(10, [\"has_uppercase\", \"has_numbers\"], seed=8)\n        self.assertEqual(result_str1, result_str2)\n        self.assertEqual(result_dict1, result_dict2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Run a random bash script from a list of scripts.\nThe function should output with:\n    script (str): The full path of the script that was executed.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport random\n# Constants\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'  \ndef task_func():\n```",
        "gt": "import subprocess\nimport random\n# Constants\nSCRIPTS = ['script1.sh', 'script2.sh', 'script3.sh']\nSCRIPTS_DIR = '/path/to/scripts'  \ndef task_func():\n    script_name = random.choice(SCRIPTS)\n    script_path = os.path.join(SCRIPTS_DIR, script_name)  # Generate the full path\n    subprocess.call(script_path, shell=True)\n\n    return script_path  # Return the full path",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport subprocess\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = '/path/to/scripts'\n        self.scripts_full_path = [os.path.join(self.temp_dir, script) for script in SCRIPTS]\n        self.patcher = patch('subprocess.call', return_value=0)\n        self.mock_subprocess_call = self.patcher.start()\n    def tearDown(self):\n        self.patcher.stop()\n    def test_script_execution(self):\n        # Test that the selected script is actually executed\n        script_name = task_func()\n        self.mock_subprocess_call.assert_called_with(script_name, shell=True)\n        # Check if the script is called with the correct base name (only the script name, not full path)\n        called_script_name = os.path.basename(self.mock_subprocess_call.call_args[0][0])\n        self.assertIn(called_script_name, SCRIPTS)  # SCRIPTS only contains the base names like 'script1.sh'\n    def test_random_script_selection(self):\n        executions = {task_func() for _ in range(10)}\n        self.assertTrue(len(executions) > 1, \"Script selection is not random.\")\n    def test_script_execution_failure_handling(self):\n        with patch('subprocess.call', side_effect=Exception(\"Failed to execute\")):\n            with self.assertRaises(Exception):\n                task_func()\n    def test_full_path_execution(self):\n        script_name = task_func()\n        self.mock_subprocess_call.assert_called_with(script_name, shell=True)  # Expect the base name\n    def test_environment_variables(self):\n        with patch.dict(os.environ, {'MY_VAR': '123'}, clear=True):\n            task_func()\n            self.assertEqual(os.environ['MY_VAR'], '123')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sorts a CSV file by a specific column key using pandas, and optionally writes the sorted data to another CSV file. Can also fit a linear regression model to specified columns if required.\nThe function should raise the exception for: Exception: If there is an error in reading, sorting the data, or fitting the model. If the specified columns for linear regression do not exist in the dataframe, a ValueError with \"Specified columns for linear regression do not exist in the dataframe\" message is also raised.\nThe function should output with:\n    DataFrame, str, or LinearRegression model: The sorted pandas DataFrame if 'output_path' is None and\n    'linear_regression' is False, otherwise the path to the saved output file. If 'linear_regression' is True,\n    returns the fitted model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(file_path, output_path=None, sort_key='title', linear_regression=False, x_column=None, y_column=None):\n    try:\n        df = pd.read_csv(file_path)\n        df.sort_values(by=[sort_key], inplace=True)\n\n        if linear_regression:\n            if x_column not in df.columns or y_column not in df.columns:\n                raise ValueError(\"Specified columns for linear regression do not exist in the dataframe\")\n\n            X = df[[x_column]]\n            y = df[y_column]\n            model = LinearRegression().fit(X, y)\n            return model\n\n        if output_path:\n            df.to_csv(output_path, index=False)\n            return output_path\n        else:\n            return df\n    except Exception as e:\n        raise Exception(f\"Error while processing the file: {str(e)}\")",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nimport shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for test files\n        self.test_dir = tempfile.mkdtemp()\n        self.test_csv_path = os.path.join(self.test_dir, 'test_data.csv')\n        # Create a sample CSV file\n        df = pd.DataFrame({\n            'title': ['Book C', 'Book A', 'Book B'],\n            'x': [1, 2, 3],\n            'y': [5, 7, 9]\n        })\n        df.to_csv(self.test_csv_path, index=False)\n    def tearDown(self):\n        # Remove the temporary directory after the test\n        shutil.rmtree(self.test_dir)\n    def test_valid_input_no_output_path(self):\n        # Test with valid input, no output file specified (should return DataFrame)\n        df = task_func(self.test_csv_path, sort_key='title')\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue(df['title'].is_monotonic_increasing)\n    def test_invalid_file_path(self):\n        # Test with invalid file path (should raise an exception)\n        with self.assertRaises(Exception):\n            task_func(os.path.join(self.test_dir, 'non_existent.csv'))\n    def test_invalid_sort_key(self):\n        # Test with invalid sort key (should raise an exception)\n        with self.assertRaises(Exception):\n            task_func(self.test_csv_path, sort_key='non_existent_column')\n    def test_output_data_saving(self):\n        # Test if the function saves the sorted data correctly when an output path is provided\n        output_path = os.path.join(self.test_dir, 'sorted_data.csv')\n        result_path = task_func(self.test_csv_path, output_path=output_path, sort_key='title')\n        self.assertEqual(result_path, output_path)\n        # Check if the file is created and is not empty\n        self.assertTrue(os.path.exists(output_path))\n        self.assertGreater(os.stat(output_path).st_size, 0)\n    def test_linear_regression_functionality(self):\n        # Test if linear regression model is fitted correctly\n        model = task_func(self.test_csv_path, linear_regression=True, x_column='x', y_column='y')\n        self.assertIsInstance(model, LinearRegression)\n        # Check if coefficients are as expected (approximate)\n        np.testing.assert_almost_equal(model.coef_, [2], decimal=1)\n        np.testing.assert_almost_equal(model.intercept_, 3, decimal=1)\n    def test_linear_regression_error_on_invalid_columns(self):\n        # Test error handling for non-existent columns in linear regression\n        with self.assertRaises(Exception) as context:\n            task_func(self.test_csv_path, linear_regression=True, x_column='nonexistent', y_column='title')\n        self.assertIn(\"Specified columns for linear regression do not exist in the dataframe\", str(context.exception))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a sales report with randomly simulated sales and profit data for a given list of products. The data is aggregated by product and sorted by total profit in descending order.\nThe function should raise the exception for: ValueError: If n_samples is not a positive integer, or if sales_lower is greater than sales_upper. TypeError: If products is not a list of strings, or if sales_lower, sales_upper, profit_margin_min, or profit_margin_max are not numeric.\nThe function should output with:\n    pd.DataFrame: A DataFrame containing aggregated sales and profit data for each product, sorted by profit.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(products, n_samples=100, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42):\n    np.random.seed(random_seed)\n    \n    if not products:\n        return pd.DataFrame(columns=[\"Product\", \"Sales\", \"Profit\"])\n\n    if not isinstance(products, list) or not all(isinstance(product, str) for product in products):\n        raise TypeError(\"products must be a list of strings.\")\n    if not isinstance(n_samples, int) or n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer.\")\n    if not (isinstance(sales_lower, int) and isinstance(sales_upper, int)) or sales_lower >= sales_upper:\n        raise ValueError(\"sales_lower must be less than sales_upper and both must be integers.\")\n    if not all(isinstance(x, (int, float)) for x in [profit_margin_min, profit_margin_max]) or profit_margin_min >= profit_margin_max:\n        raise ValueError(\"profit_margin_min must be less than profit_margin_max and both must be numeric.\")\n\n    data = []\n    for _ in range(n_samples):\n        product = np.random.choice(products)\n        sales = np.random.randint(sales_lower, sales_upper + 1)\n        profit = sales * np.random.uniform(profit_margin_min, profit_margin_max)\n        data.append([product, sales, profit])\n\n    df = pd.DataFrame(data, columns=[\"Product\", \"Sales\", \"Profit\"])\n    df = df.groupby(\"Product\", as_index=False).sum()\n    df.sort_values(\"Profit\", ascending=False, inplace=True)\n\n    return df",
        "test": "import pandas as pd\nimport unittest\nclass TestCases(unittest.TestCase):\n    def test_random_reproducibility(self):\n        report1 = task_func([\"iPhone\", \"iPad\"], n_samples=50, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42)\n        report2 = task_func([\"iPhone\", \"iPad\"], n_samples=50, sales_lower=50, sales_upper=200, profit_margin_min=0.1, profit_margin_max=0.5, random_seed=42)\n        pd.testing.assert_frame_equal(report1, report2)\n    def test_number_of_rows(self):\n        report = task_func([\"iPhone\", \"iPad\"], n_samples=50, sales_lower=50, sales_upper=200)\n        self.assertEqual(len(report), len(set([\"iPhone\", \"iPad\"])))\n    def test_sorting_by_profit(self):\n        report = task_func([\"iPhone\", \"iPad\"], sales_lower=50, sales_upper=200)\n        self.assertTrue(report[\"Profit\"].is_monotonic_decreasing)\n    def test_custom_parameters(self):\n        report = task_func([\"iPhone\", \"iPad\", \"Macbook\", \"Airpods\", \"Apple Watch\"], n_samples=50, sales_lower=100, sales_upper=150, profit_margin_min=0.2, profit_margin_max=0.4, random_seed=42)\n        # This test needs to be adjusted based on the expected outcome of the custom parameters.\n        # Specific checks on DataFrame contents should account for the randomness and reproducibility aspects.\n        self.assertTrue(len(report) > 0, \"The report should contain aggregated sales and profit data.\")\n        \n    def test_new_custom_parameters(self):\n        report1 = task_func([\"iPhone\", \"iPad\", \"Macbook\", \"Airpods\", \"Apple Watch\"], n_samples=50, sales_lower=100, sales_upper=150, profit_margin_min=0.2, profit_margin_max=0.4, random_seed=42)\n        df_list = report1.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['Macbook,1561,444.82670855378143', 'iPad,1383,401.9253335536443', 'Airpods,1297,381.4827132170069', 'Apple Watch,1123,308.07853599252707', 'iPhone,921,294.0138866107959']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    \n    def test_sales_bounds_validation(self):\n        \"\"\"Test that an error is raised if sales_lower is greater than sales_upper.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([\"Product1\"], sales_lower=250, sales_upper=100)\n    def test_profit_margin_validation(self):\n        \"\"\"Test that an error is raised if profit_margin_min is greater than or equal to profit_margin_max.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([\"Product1\"], profit_margin_min=0.6, profit_margin_max=0.5)\n    def test_product_list_validation(self):\n        \"\"\"Test that an error is raised if the products list is not a list of strings.\"\"\"\n        with self.assertRaises(TypeError):\n            task_func([123, 456], n_samples=10)\n    def test_n_samples_validation(self):\n        \"\"\"Test that an error is raised if n_samples is not a positive integer.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([\"Product1\"], n_samples=-10)\n    def test_empty_product_list(self):\n        \"\"\"Test that the function can handle an empty product list.\"\"\"\n        report = task_func([], n_samples=10)\n        self.assertTrue(report.empty, \"The report should be empty if no products are provided.\")\n    def test_zero_samples(self):\n        \"\"\"Test handling of zero samples.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([\"Product1\"], n_samples=-10)\n    def test_single_product_reproducibility(self):\n        \"\"\"Test that the function generates consistent results for a single product across multiple runs.\"\"\"\n        report1 = task_func([\"Product1\"], n_samples=10, random_seed=42)\n        report2 = task_func([\"Product1\"], n_samples=10, random_seed=42)\n        pd.testing.assert_frame_equal(report1, report2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a Flask application configured to send emails using Flask-Mail. It sets up the necessary SMTP configuration dynamically based on provided parameters and defines a route to send a test email.\nThe function should output with:\n    Flask: A Flask application instance configured for sending emails.\nYou should write self-contained code starting with:\n```\nfrom flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n```",
        "gt": "from flask import Flask\nfrom flask_mail import Mail, Message\ndef task_func(smtp_server, smtp_port, smtp_user, smtp_password, template_folder):\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['MAIL_SERVER'] = smtp_server\n    app.config['MAIL_PORT'] = smtp_port\n    app.config['MAIL_USERNAME'] = smtp_user\n    app.config['MAIL_PASSWORD'] = smtp_password\n    app.config['MAIL_USE_TLS'] = True\n    \n    mail = Mail()\n    mail.init_app(app)\n\n    @app.route('/send_mail')\n    def send_mail():\n        msg = Message('Hello', sender='from@example.com', recipients=['to@example.com'])\n        msg.body = 'Hello Flask message sent from Flask-Mail'\n        mail.send(msg)\n\n        return 'Mail sent!'\n\n    return app",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom flask import Flask\nfrom flask_mail import Mail\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Constants used for testing\n        self.smtp_server = 'smtp.example.com'\n        self.smtp_port = 587\n        self.smtp_user = 'user@example.com'\n        self.smtp_password = 'password'\n        self.template_folder = 'templates'\n        # Create the app with test configurations\n        self.app = task_func(self.smtp_server, self.smtp_port, self.smtp_user, self.smtp_password, self.template_folder)\n        self.app.config['TESTING'] = True\n        self.client = self.app.test_client()\n    def test_app_instance(self):\n        \"\"\"Test if the function returns a Flask app instance.\"\"\"\n        self.assertIsInstance(self.app, Flask)\n    def test_mail_config(self):\n        \"\"\"Test if the mail configuration is set correctly.\"\"\"\n        self.assertEqual(self.app.config['MAIL_SERVER'], self.smtp_server)\n        self.assertEqual(self.app.config['MAIL_PORT'], self.smtp_port)\n        self.assertEqual(self.app.config['MAIL_USERNAME'], self.smtp_user)\n        self.assertEqual(self.app.config['MAIL_PASSWORD'], self.smtp_password)\n    @patch.object(Mail, 'send')\n    def test_send_mail_route(self, mock_mail_send):\n        \"\"\"Test if the send_mail route triggers the mail sending.\"\"\"\n        response = self.client.get('/send_mail')\n        self.assertEqual(response.status_code, 200)\n        mock_mail_send.assert_called_once()\n    def test_send_mail_functionality(self):\n        \"\"\"Test the functionality of sending an email.\"\"\"\n        with patch('flask_mail.Mail.send') as mock_mail_send:\n            response = self.client.get('/send_mail')\n            self.assertEqual(response.status_code, 200)\n            mock_mail_send.assert_called_once()\n            args, kwargs = mock_mail_send.call_args\n            message = args[0]\n            self.assertEqual(message.subject, 'Hello')\n            self.assertEqual(message.sender, 'from@example.com')\n            self.assertEqual(message.recipients, ['to@example.com'])\n    def test_smtp_configuration(self):\n        \"\"\"Ensure SMTP settings are correctly configured.\"\"\"\n        # Since we have already tested the configuration in setUp, this test could be redundant\n        # Or it could be kept for isolated testing of SMTP configurations without setup\n        self.assertEqual(self.app.config['MAIL_SERVER'], self.smtp_server)\n        self.assertEqual(self.app.config['MAIL_PORT'], self.smtp_port)\n        self.assertEqual(self.app.config['MAIL_USERNAME'], self.smtp_user)\n        self.assertEqual(self.app.config['MAIL_PASSWORD'], self.smtp_password)\n        self.assertEqual(self.app.config['MAIL_USE_TLS'], True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sort a list of news articles by \"category\" and \"title.\" The news articles are then grouped by \"category.\" >>> articles = [ ...        {'title': 'Der Standard', 'title_url': 'standard', 'id': 2, 'category': 'climate'}, ...        {'title': 'tecky', 'title_url': 'tecky', 'id': 4, 'category': 'climate'}, ...        {'title': 'earth magazine', 'title_url': 'earth', 'id': 4, 'category': 'environment'} ...    ] >>> sorted_articles = task_func(articles) >>> print(sorted_articles) defaultdict(<class 'list'>, {'climate': [{'title': 'Der Standard', 'title_url': 'standard', 'id': 2, 'category': 'climate'}, {'title': 'tecky', 'title_url': 'tecky', 'id': 4, 'category': 'climate'}], 'environment': [{'title': 'earth magazine', 'title_url': 'earth', 'id': 4, 'category': 'environment'}]})\nThe function should raise the exception for: ValueError: If dictionary keys do not match the requirements.\nThe function should output with:\n    dict: A dictionary where the keys are categories and the values are lists\n    of articles sorted by 'title' in that category. Each article is represented as a dictionary\n    with keys 'title', 'title_url', 'id', and 'category'.\nYou should write self-contained code starting with:\n```\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\ndef task_func(news_articles):\n```",
        "gt": "from collections import defaultdict\nfrom operator import itemgetter\nfrom itertools import groupby\ndef task_func(news_articles):\n    if any(not sorted(dic.keys()) == ['category', 'id', 'title', 'title_url']  for dic in news_articles):\n        raise ValueError(\"input dictionaries must contain the following keys: 'category', 'id', 'title', 'title_url'\")\n\n    news_articles.sort(key=itemgetter('category', 'title'))\n\n    grouped_articles = defaultdict(list)\n    for category, group in groupby(news_articles, key=itemgetter('category')):\n        grouped_articles[category] = list(group)\n\n    return grouped_articles",
        "test": "import unittest\nfrom faker import Faker\nfake = Faker()\ndef generate_mock_articles(num_articles=10):\n    categories = ['Sports', 'Technology', 'Health', 'Science', 'Business']\n    mock_articles = []\n    for _ in range(num_articles):\n        article = {\n            'title': fake.sentence(),\n            'title_url': fake.slug(),\n            'id': fake.unique.random_int(min=1, max=1000),\n            'category': fake.random_element(elements=categories)\n        }\n        mock_articles.append(article)\n    return mock_articles\nclass TestCases(unittest.TestCase):\n    def test_wrong_keys(self):\n        'wrong input'\n        input1 = [{}]\n        input2 = {'title': 'Apple News', 'title_url': 'Apple_News', 'id': 2, 'category': 'Technology'}\n        input3 = [{'title': 'Apple News', 'title_url': 'Apple_News', 'id': 2, 'category': 'Technology', 'test': 2}]\n        input4 = [{'title': 'Apple News', 'title_url': 'Apple_News', 'id': 2, 'test': 'Technology'}]\n        self.assertRaises(Exception, task_func, input1)\n        self.assertRaises(Exception, task_func, input2)\n        self.assertRaises(Exception, task_func, input3)\n        self.assertRaises(Exception, task_func, input4)\n    def test_case_1(self):\n        'two categories'\n        articles = [\n            {'title': 'Apple News', 'title_url': 'Apple_News', 'id': 2, 'category': 'science'},\n            {'title': 'Tech Crunch', 'title_url': 'Tech_Crunch', 'id': 3, 'category': 'science'},\n            {'title': 'Wired', 'title_url': 'Wired', 'id': 4, 'category': 'Technology'}\n        ]\n        expected = {\n            'Technology': [\n                {'title': 'Wired',\n                 'title_url': 'Wired',\n                 'id': 4,\n                 'category': 'Technology'}\n                ],\n            'science': [\n                {'title': 'Apple News',\n                 'title_url': 'Apple_News',\n                 'id': 2,\n                 'category': 'science'},\n                {'title': 'Tech Crunch',\n                 'title_url': 'Tech_Crunch',\n                 'id': 3,\n                 'category': 'science'}\n                ]\n        }\n        sorted_articles = task_func(articles)\n        self.assertIn('Technology', sorted_articles)\n        self.assertIn('science', sorted_articles)\n        self.assertCountEqual(sorted_articles['science'], expected['science'])\n        self.assertCountEqual(sorted_articles['Technology'], expected['Technology'])\n    def test_case_2(self):\n        'test for correct count with one category'\n        articles = [\n            {'title': 'Apple News', 'title_url': 'Apple_News', 'id': 2, 'category': 'Technology'},\n            {'title': 'Tech Crunch', 'title_url': 'Tech_Crunch', 'id': 3, 'category': 'Technology'},\n            {'title': 'Wired', 'title_url': 'Wired', 'id': 4, 'category': 'Technology'}\n        ]\n        expected = {\n            'Technology': [\n                {'title': 'Wired',\n                 'title_url': 'Wired',\n                 'id': 4,\n                 'category': 'Technology'},\n                {'title': 'Apple News',\n                 'title_url': 'Apple_News',\n                 'id': 2,\n                 'category': 'Technology'},\n                {'title': 'Tech Crunch',\n                 'title_url': 'Tech_Crunch',\n                 'id': 3,\n                 'category': 'Technology'}\n                ]\n        }\n        sorted_articles = task_func(articles)\n        self.assertCountEqual(sorted_articles['Technology'], expected['Technology'])\n    def test_case_4(self):\n        'empty list'\n        articles = []\n        sorted_articles = task_func(articles)\n        self.assertEqual(len(sorted_articles), 0)\n    def test_case_5(self):\n        'test return structure with large input set'\n        articles = generate_mock_articles(300)\n        sorted_articles = task_func(articles)\n        for article in articles:\n            self.assertIn(article['category'], sorted_articles)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a Unix timestamp to date objects in different time zones, create a Pandas DataFrame, and draw a bar chart. - You should use the time zones mentionned in the constant TIMEZONES. - The date format should be as DATE_FORMAT. - The DataFrame should have 'Timezone' and 'Datetime' as column names. - The x-label of the bar plot should be set to 'Timezone' while the y-label should be set to 'Datetime'. - The plot title should be \"Datetime = f(Timezone)\"\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame containing the datetime in different timezones.\n    Axes: A matplotlib Axes object for the generated bar chart.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n```",
        "gt": "from datetime import datetime\nimport pandas as pd\nimport pytz\nimport matplotlib.pyplot as plt\n# Constants\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nTIMEZONES = [\n    \"America/New_York\",\n    \"Europe/London\",\n    \"Asia/Shanghai\",\n    \"Asia/Tokyo\",\n    \"Australia/Sydney\",\n]\ndef task_func(timestamp):\n    datetimes = [\n        datetime.fromtimestamp(timestamp, pytz.timezone(tz)).strftime(DATE_FORMAT)\n        for tz in TIMEZONES\n    ]\n    df = pd.DataFrame({\"Timezone\": TIMEZONES, \"Datetime\": datetimes})\n    df[\"Datetime\"] = pd.to_datetime(df[\"Datetime\"])\n    ax = df.plot.bar(x=\"Timezone\", y=\"Datetime\", legend=False)\n    plt.ylabel(\"Timezone\")\n    plt.ylabel(\"Datetime\")\n    plt.title(\"Datetime = f(Timezone)\")\n    plt.close()\n    return df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        df, ax = task_func(398024852)\n        self.validate_output(df, ax)\n    def test_case_2(self):\n        df, ax = task_func(229981844)\n        self.validate_output(df, ax)\n    def test_case_3(self):\n        df, ax = task_func(163757150)\n        self.validate_output(df, ax)\n    def test_case_4(self):\n        df, ax = task_func(136821030)\n        self.validate_output(df, ax)\n    def test_case_5(self):\n        df, ax = task_func(1318935276)\n        self.validate_output(df, ax)\n    def test_case_6(self):\n        df, ax = task_func(2078245012)\n        edf = pd.DataFrame(\n            {\n                \"Timezone\": [\n                    \"America/New_York\",\n                    \"Europe/London\",\n                    \"Asia/Shanghai\",\n                    \"Asia/Tokyo\",\n                    \"Australia/Sydney\",\n                ],\n                \"Datetime\": [\n                    \"2035-11-09 13:16:52\",\n                    \"2035-11-09 18:16:52\",\n                    \"2035-11-10 02:16:52\",\n                    \"2035-11-10 03:16:52\",\n                    \"2035-11-10 05:16:52\",\n                ],\n            }\n        )\n        edf = edf.astype({\"Timezone\": \"object\", \"Datetime\": \"datetime64[ns]\"})\n        pd.testing.assert_frame_equal(df, edf)\n        self.validate_output(df, ax)\n    def validate_output(self, df, ax):\n        # Test the shape of the returned DataFrame\n        self.assertEqual(df.shape, (5, 2))\n        # Test if the Timezones in DataFrame are correct\n        expected_timezones = [\n            \"America/New_York\",\n            \"Europe/London\",\n            \"Asia/Shanghai\",\n            \"Asia/Tokyo\",\n            \"Australia/Sydney\",\n        ]\n        self.assertListEqual(df[\"Timezone\"].tolist(), expected_timezones)\n        # Test if the Datetime column in DataFrame is of datetime64 type\n        self.assertEqual(df[\"Datetime\"].dtype, \"datetime64[ns]\")\n        # Test the title of the plot\n        self.assertEqual(ax.get_title(), \"Datetime = f(Timezone)\")\n        # Test the x and y axis labels of the plot\n        self.assertEqual(ax.get_xlabel(), \"Timezone\")\n        self.assertEqual(ax.get_ylabel(), \"Datetime\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a matrix of given dimensions (rows x columns) containing unique dates between a specified start date and end date.\nThe function should output with:\n    ndarray: A numpy ndarray with unique dates in the shape (rows, columns).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom datetime import datetime\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n```",
        "gt": "import numpy as np\nimport random\nfrom datetime import datetime\ndef task_func(rows=3, columns=2, start_date=datetime(2021, 1, 1), end_date=datetime(2021, 12, 31), seed=0):\n    # Convert start_date and end_date to numpy datetime64 objects\n    if seed is not None:\n        random.seed(seed)\n    \n    # Convert start_date and end_date to numpy datetime64 objects\n    start_date_np = np.datetime64(start_date)\n    end_date_np = np.datetime64(end_date)\n\n    # Calculate the number of days between start_date and end_date\n    total_days = int((end_date_np - start_date_np).astype('timedelta64[D]').astype(int) + 1)\n\n    # Randomly select unique dates within the range without replacement using random.sample\n    selected_dates = sorted(random.sample(range(total_days), rows * columns))\n\n    # Generate the matrix with selected unique dates\n    matrix = (start_date_np + np.array(selected_dates).astype('timedelta64[D]')).reshape(rows, columns)\n\n    return matrix",
        "test": "# Unit testing\nimport unittest\nimport numpy.testing as npt\nclass TestCases(unittest.TestCase):\n        \n    def test_case_1(self):\n        # Using default parameters\n        matrix = task_func(seed=0)\n        self.assertEqual(matrix.shape, (3, 2))\n        self.assertTrue(np.all(np.diff(matrix.ravel()).astype(int) > 0))  # Dates should be unique\n    def test_case_2(self):\n        # Using custom rows and columns, and a small date range\n        matrix = task_func(2, 2, datetime(2021, 1, 1), datetime(2021, 1, 10), seed=42)\n        self.assertEqual(matrix.shape, (2, 2))\n        self.assertTrue(np.all(np.diff(matrix.ravel()).astype(int) >= 0))  # Dates should be unique\n    def test_case_3(self):\n        # Using custom rows and columns, and a large date range\n        matrix = task_func(4, 4, datetime(2000, 1, 1), datetime(2021, 12, 31), seed=55)\n        self.assertEqual(matrix.shape, (4, 4))\n        self.assertTrue(np.all(np.diff(matrix.ravel()).astype(int) >= 0))  # Dates should be unique\n    def test_case_4(self):\n        # Using a date range of one day\n        matrix = task_func(1, 1, datetime(2021, 1, 1), datetime(2021, 1, 1), seed=0)\n        expected_date = np.array(['2021-01-01'], dtype='datetime64[us]').reshape(1, 1)\n        npt.assert_array_equal(matrix, expected_date)  # Only one date in the range\n    def test_case_5(self):\n        # Using custom rows and columns, and a date range with only two days\n        matrix = task_func(1, 2, datetime(2021, 1, 1), datetime(2021, 1, 2), seed=41)\n        self.assertEqual(matrix.shape, (1, 2))\n        self.assertTrue(np.all(np.diff(matrix.ravel()).astype(int) >= 0))  # Dates should be unique\n        expected_dates = np.array(['2021-01-01', '2021-01-02'], dtype='datetime64[us]').reshape(1, 2)\n        for date in expected_dates.ravel():\n            self.assertIn(date, matrix.ravel())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame with randomized student data. This function allows for specifying the total number of students and the randomness seed for reproducible outcomes. Data attributes include student names, ages, genders, and scores, each derived from provided parameters or defaults.\nNote that: Notes: The 'Name' column values are selected randomly from the 'name_list'. The 'Age' column values are integers randomly generated within the 'age_range', inclusive. The 'Gender' column values are selected randomly from the 'gender_list'. The 'Score' column values are integers randomly generated within the 'score_range', inclusive. Setting the same seed value ensures the reproducibility of the dataset across different function calls.\nThe function should raise the exception for: ValueError: If num_of_students is non-positive.\nThe function should output with:\n    pandas.DataFrame: A DataFrame object with columns ['Name', 'Age', 'Gender', 'Score'], containing\n    randomly generated data for the specified number of students. Names and genders are randomly selected\n    from the provided lists (or defaults). Ages and scores are randomly generated within the specified ranges.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom random import choice, seed as set_seed\ndef task_func(num_of_students, seed=42, name_list=None, gender_list=None, age_range=(15, 20), score_range=(50, 100)):\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be positive.\")\n\n    set_seed(seed)\n    np.random.seed(seed)\n\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n\n    data = []\n    for _ in range(num_of_students):\n        name = choice(name_list)\n        age = np.random.randint(age_range[0], age_range[1] + 1)\n        gender = choice(gender_list)\n        score = np.random.randint(score_range[0], score_range[1] + 1)\n        data.append([name, age, gender, score])\n\n    columns = ['Name', 'Age', 'Gender', 'Score']\n    df = pd.DataFrame(data, columns=columns)\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_with_seed(self):\n        df1 = task_func(5, seed=42)        \n        df_list = df1.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['John,18,Male,78', 'Sara,17,Male,57', 'Mike,19,Male,70', 'John,16,Male,68', 'Nick,17,Female,60']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n        \n    def test_reproducibility_with_seed(self):\n        df1 = task_func(3, seed=123)\n        df2 = task_func(3, seed=123)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_positive_num_students(self):\n        df = task_func(5)\n        self.assertEqual(len(df), 5)\n    def test_invalid_num_students(self):\n        with self.assertRaises(ValueError):\n            task_func(-1)\n    def test_column_names(self):\n        df = task_func(1)\n        self.assertListEqual(list(df.columns), ['Name', 'Age', 'Gender', 'Score'])\n    def test_age_range(self):\n        df = task_func(10, age_range=(18, 22))\n        self.assertTrue(all(18 <= age <= 22 for age in df['Age']))\n    def test_custom_name_and_gender_list(self):\n        custom_names = ['Alex', 'Bob']\n        custom_genders = ['Non-Binary']\n        df = task_func(2, name_list=custom_names, gender_list=custom_genders)\n        self.assertIn(df.iloc[0]['Name'], custom_names)\n        self.assertIn(df.iloc[0]['Gender'], custom_genders)\n    def test_score_range(self):\n        df = task_func(10, score_range=(60, 70))\n        self.assertTrue(all(60 <= score <= 70 for score in df['Score']))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scans a specified IP address range and sends an HTTP GET request to each IP to verify if it is an active web server. The function requires an IP range in CIDR format (e.g., '192.168.0.0/16') and a timeout value in seconds. It returns a list of IPs where the request returned a status code of 200. If the request is not success, then ignore and continue to the next IP address.\nThe function should raise the exception for: ValueError: If an invalid IP range is provided.\nThe function should output with:\n    list: A list of IP addresses that responded with a status code of 200.\nYou should write self-contained code starting with:\n```\nimport ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n```",
        "gt": "import ipaddress\nimport requests\ndef task_func(ip_range, timeout):\n    results = []\n    try:\n        network = ipaddress.IPv4Network(ip_range, strict=False)  # Note the `strict=False`\n    except ValueError as e:\n        raise ValueError(f\"Invalid IP range: {e}\")\n\n    for ip in network:\n        try:\n            response = requests.get(f\"http://{ip}\", timeout=timeout)\n            if response.status_code == 200:\n                results.append(str(ip))\n        except requests.exceptions.ConnectionError as e:\n            pass\n    return results",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport requests  # Ensure requests is imported for exception handling\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_return_type(self, mock_get):\n        \"\"\"Test that the function returns a list.\"\"\"\n        mock_get.side_effect = requests.exceptions.ConnectionError\n        # Adjusted to include required 'timeout' parameter\n        result = task_func('192.168.0.0/30', 5)  \n        self.assertIsInstance(result, list)\n    @patch('requests.get')\n    def test_handle_exceptions(self, mock_get):\n        \"\"\"Test that the function handles exceptions properly by not including IPs with failed requests.\"\"\"\n        mock_get.side_effect = [requests.exceptions.ConnectionError] * 4  # Assuming a /30 subnet, resulting in 4 attempts.\n        result = task_func('192.168.0.0/30', 5)\n        # The expected result is adjusted since the function no longer returns False for failed requests but instead skips them.\n        expected_result = []  # Expecting an empty list due to ConnectionError.\n        self.assertEqual(result, expected_result, \"task_func should skip IPs that failed to connect.\")\n    @patch('requests.get')\n    def test_active_server(self, mock_get):\n        \"\"\"\n        Test that the function correctly identifies and includes active servers in the IP range.\n        \"\"\"\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_get.return_value = mock_response\n        ip_range = '192.168.1.0/30'  \n        result = task_func(ip_range, 5)\n        expected_result = ['192.168.1.0', '192.168.1.1', '192.168.1.2', '192.168.1.3']\n        self.assertEqual(result, expected_result, \"The function should identify and include all active servers in the range.\")\n    @patch('requests.get')\n    def test_non_active_server(self, mock_get):\n        \"\"\"Test that non-active IP addresses are not included.\"\"\"\n        mock_get.return_value.status_code = 404\n        result = task_func('192.168.0.0/30', 5)\n        self.assertEqual(result, [], \"Non-active IPs should not be included in the result.\")\n    @patch('requests.get')\n    def test_full_range_iteration(self, mock_get):\n        \"\"\"\n        Test that the function iterates over and makes a request to each IP in a complete /30 subnet.\n        \"\"\"\n        mock_response = MagicMock(status_code=200)\n        mock_get.return_value = mock_response\n        ip_range = '192.168.1.0/30'\n        result = task_func(ip_range, 5)\n        expected_result_count = 4  # /30 network typically includes 4 IPs, but 2 are usable hosts\n        self.assertEqual(len(result), expected_result_count)\n        self.assertEqual(mock_get.call_count, expected_result_count, \"Should make HTTP GET requests only to usable IPs.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the latest log file in a specified directory that matches a given regex pattern. This function searches through all files in the specified directory, filters them based on the provided regex pattern, and returns the path to the most recent log file based on modification time. If no files match the pattern or the directory is empty, the function returns None.\nThe function should output with:\n    str or None: The path to the most recent log file that matches the pattern, or None if no matching files are found.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n```",
        "gt": "import os\nimport re\ndef task_func(pattern, log_dir='/var/log/'):\n    log_files = [f for f in os.listdir(log_dir) if re.match(pattern, f)]\n    log_files = sorted(log_files, key=lambda f: os.path.getmtime(os.path.join(log_dir, f)), reverse=True)\n\n    return os.path.join(log_dir, log_files[0]) if log_files else None",
        "test": "import unittest\nfrom unittest.mock import patch\nimport os\nimport re\nclass TestCases(unittest.TestCase):\n    \n    @patch(\"os.listdir\")\n    @patch(\"os.path.getmtime\")\n    def test_case_1(self, mock_getmtime, mock_listdir):\n        # Test that no log files are returned when none match the regex pattern\n        mock_listdir.return_value = [\"file1.txt\", \"file2.log\", \"access.log.abc\"]\n        result = task_func(r'^access.log.[0-9]+$', '/mock_dir/')\n        self.assertIsNone(result)\n    \n    @patch(\"os.listdir\")\n    @patch(\"os.path.getmtime\")\n    def test_case_2(self, mock_getmtime, mock_listdir):\n        # Test that the correct latest log file is returned when multiple files match the regex\n        mock_listdir.return_value = [\"access.log.1\", \"access.log.2\", \"access.log.3\"]\n        mock_getmtime.side_effect = [3, 1, 2]\n        result = task_func(r'^access.log.[0-9]+$', '/mock_dir/')\n        self.assertEqual(result, '/mock_dir/access.log.1')\n    \n    @patch(\"os.listdir\")\n    @patch(\"os.path.getmtime\")\n    def test_case_3(self, mock_getmtime, mock_listdir):\n        # Test that a correct single matching log file is returned among non-matching ones\n        mock_listdir.return_value = [\"file1.txt\", \"file2.log\", \"access.log.123\"]\n        mock_getmtime.return_value = 1\n        result = task_func(r'^access.log.[0-9]+$', '/mock_dir/')\n        self.assertEqual(result, '/mock_dir/access.log.123')\n    \n    @patch(\"os.listdir\")\n    @patch(\"os.path.getmtime\")\n    def test_case_4(self, mock_getmtime, mock_listdir):\n        # Test that None is returned when the directory is empty\n        mock_listdir.return_value = []\n        result = task_func(r'^access.log.[0-9]+$', '/mock_dir/')\n        self.assertIsNone(result)\n    \n    @patch(\"os.listdir\")\n    @patch(\"os.path.getmtime\")\n    def test_case_5(self, mock_getmtime, mock_listdir):\n        # Test the function with the default directory parameter to ensure it handles defaults properly\n        mock_listdir.return_value = [\"access.log.999\"]\n        mock_getmtime.return_value = 1\n        result = task_func(r'^access.log.[0-9]+$')\n        self.assertEqual(result, '/var/log/access.log.999')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame with random integer values between 0 and 9 for a given number of rows. Count the non-zero values in each column and visualize this information using a bar plot.\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    DataFrame: The generated DataFrame with random integer values.\n    Axes: The matplotlib Axes object containing the bar plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(rows):\n    plt.close('all')  # Clear previous plots\n    \n    # Create an empty DataFrame and Axes object for negative or zero rows\n    if rows <= 0:\n        empty_ax = plt.gca()\n        empty_ax.set_title('Non-Zero Value Counts')\n        return pd.DataFrame(columns=COLUMNS), empty_ax\n    \n    # Generate random data and create DataFrame\n    data = np.random.randint(10, size=(rows, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n    \n    # Count non-zero values in each column\n    counts = df.astype(bool).sum(axis=0)\n    \n    # Create bar plot for non-zero counts\n    ax = counts.plot(kind='bar')\n    ax.set_title('Non-Zero Value Counts')\n    \n    return df, ax",
        "test": "import unittest\n# Test function\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test when rows is 0\n        df, ax = task_func(0)\n        self.assertTrue(df.empty)\n        self.assertEqual(len(ax.patches), 0)\n    def test_case_2(self):\n        # Test when rows is 1\n        df, ax = task_func(1)\n        self.assertEqual(len(df), 1)\n        self.assertEqual(len(ax.patches), 5)\n    def test_case_3(self):\n        # Test when rows is 10\n        df, ax = task_func(10)\n        self.assertEqual(len(df), 10)\n        self.assertEqual(len(ax.patches), 5)\n    def test_case_4(self):\n        # Test when rows is negative\n        df, ax = task_func(-5)\n        self.assertTrue(df.empty)\n        self.assertEqual(len(ax.patches), 0)\n    def test_case_5(self):\n        # Test when rows is large (e.g., 1000)\n        df, ax = task_func(1000)\n        self.assertEqual(len(df), 1000)\n        self.assertEqual(len(ax.patches), 5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a numeric array of random integers, calculate the mean and standard deviation, and draw a histogram of the distribution.\nNote that: The random integers are generated between 1 and 100. The title of the histogram is \"Histogram of Random Integers\". The x-axis is labeled \"Value\" and the y-axis is labeled \"Frequency\". The mean is plotted as a red dashed line, and the standard deviation is plotted as purple dashed lines.\nThe function should output with:\n    Tuple: A tuple containing the array, mean, standard deviation, and the histogram plot (Axes).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nARRAY_SIZE = 10000\ndef task_func():\n    array = np.random.randint(1, 100, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins='auto')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.axvline(mean, color='red', linestyle='dashed', linewidth=1)\n    ax.axvline(mean + std, color='purple', linestyle='dashed', linewidth=1)\n    ax.axvline(mean - std, color='purple', linestyle='dashed', linewidth=1)\n    ax.legend([\"Mean\", \"Standard Deviation\"])\n    plt.show()\n    \n    return array, mean, std, ax",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        np.random.seed(0)\n        array, mean, std, ax = task_func()\n        self.assertEqual(array.size, ARRAY_SIZE)\n        self.assertEqual(mean, 49.6135)\n        self.assertEqual(std, 28.5323416100046)\n        self.assertEqual(ax.get_title(), 'Histogram of Random Integers')\n    def test_case_2(self):\n        array, mean, std, ax = task_func()\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n    def test_case_3(self):\n        np.random.seed(1)\n        array, mean, std, ax = task_func()\n        self.assertEqual(mean, 50.0717)\n        self.assertEqual(std, 28.559862729186918)\n    def test_case_4(self):\n        np.random.seed(100)\n        array, mean, std, ax = task_func()\n        self.assertEqual(mean, 50.2223)\n        self.assertEqual(std, 28.494467580742757)\n    def test_case_5(self):\n        np.random.seed(500)\n        array, mean, std, ax = task_func()\n        self.assertEqual(mean, 49.8636)\n        self.assertEqual(std, 28.516030492338864)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a specific number of random letter pairs, each from a predefined list, and analyze the frequency of each pair.\nThe function should output with:\n    Counter: A Counter object representing the frequency of each generated letter pair.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n```",
        "gt": "from collections import Counter\nimport random\nLETTERS = ['a', 'b', 'c', 'd', 'e']\ndef task_func(count, seed=0):\n    random.seed(seed)\n\n    pairs = [tuple(random.choices(LETTERS, k=2)) for _ in range(count)]\n    pair_frequency = Counter(pairs)\n\n    return pair_frequency",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Initialize random seed for reproducibility in tests\n        random.seed(42)\n    def test_case_1(self):\n        # Test with count = 5\n        result = task_func(5, seed=42)\n        self.assertIsInstance(result, Counter)\n        self.assertEqual(result, Counter({('d', 'a'): 1, ('b', 'b'): 1, ('d', 'd'): 1, ('e', 'a'): 1, ('c', 'a'): 1}))\n    def test_case_2(self):\n        # Test with count = 0 (no pairs)\n        result = task_func(0, seed=4)\n        self.assertEqual(result, Counter())\n    def test_case_3(self):\n        # Test with count = 100 (larger number)\n        result = task_func(100, seed=2)\n        self.assertEqual(sum(result.values()), 100)\n    def test_case_4(self):\n        # Test with count = 10 and check if all pairs have letters from the defined LETTERS\n        result = task_func(10, seed=0)\n        self.assertEqual(result, Counter({('c', 'c'): 2, ('d', 'b'): 2, ('e', 'e'): 2, ('e', 'd'): 1, ('c', 'b'): 1, ('e', 'c'): 1, ('b', 'd'): 1}))\n    def test_case_5(self):\n        # Test with count = 5 and check if the total counts match the input count\n        result = task_func(5, seed=1)\n        self.assertEqual(result, Counter({('a', 'e'): 1, ('d', 'b'): 1, ('c', 'c'): 1, ('d', 'd'): 1, ('a', 'a'): 1}))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a synthetic 2D dataset using make_blobs, visualize the dataset, and then calculate the Euclidean distance between individual samples of the dataset.\nThe function should output with:\n    tuple:\n    ndarray: A 2D array with distances between each sample.\n    Axes or None: If plot_path is None, returns the matplotlib Axes object of the plot.\n    Otherwise, saves the plot to the provided path and return None.\n    Plot shows values of the first feature dimension on the x-axis, values\n    of the second feature dimension on the y-axis, and labels of the synthetic\n    examples as color.\nYou should write self-contained code starting with:\n```\nfrom scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n```",
        "gt": "from scipy.spatial.distance import cdist\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\ndef task_func(n_samples=200, centers=4, plot_path=None, random_seed=None):\n    X, y = make_blobs(\n        n_samples=n_samples,\n        n_features=2,\n        centers=centers,\n        random_state=random_seed,\n    )\n\n    fig, ax = plt.subplots()\n\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n\n    if plot_path:\n        plt.savefig(plot_path)\n        plt.close(fig)\n        return cdist(X, X), None\n\n    return cdist(X, X), ax",
        "test": "import unittest\nimport tempfile\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.seed = 42\n        self.temp_dir = tempfile.TemporaryDirectory()\n    def test_case_1(self):\n        # Default parameters\n        distances, plot = task_func()\n        self.assertEqual(distances.shape, (200, 200))\n        self.assertEqual(len(plot.collections[0].get_offsets()), 200)\n        self.assertEqual(len(set(plot.collections[0].get_array())), 4)\n    def test_case_2(self):\n        # Custom parameters\n        n_samples, centers = 50, 5\n        distances, plot = task_func(\n            random_seed=self.seed, n_samples=n_samples, centers=centers\n        )\n        self.assertEqual(distances.shape, (n_samples, n_samples))\n        self.assertEqual(len(plot.collections[0].get_offsets()), n_samples)\n        self.assertEqual(len(set(plot.collections[0].get_array())), centers)\n    def test_case_3(self):\n        # Saving the plot to a path\n        plot_path = os.path.join(self.temp_dir.name, \"test_plot.png\")\n        distances, plot = task_func(random_seed=self.seed, plot_path=plot_path)\n        self.assertEqual(distances.shape, (200, 200))\n        self.assertTrue(os.path.exists(plot_path))\n        self.assertIsNone(plot)\n    def test_case_4(self):\n        # Test reproducibility with the same seed\n        distances1, _ = task_func(random_seed=self.seed)\n        distances2, _ = task_func(random_seed=self.seed)\n        np.testing.assert_array_equal(distances1, distances2)\n        # Test different outputs with different seeds\n        distances3, _ = task_func(random_seed=43)\n        with self.assertRaises(AssertionError):\n            np.testing.assert_array_equal(distances1, distances3)\n    def test_case_5(self):\n        # Test negative parameters for n_samples\n        with self.assertRaises(ValueError):\n            task_func(n_samples=-100, random_seed=self.seed)\n    def test_case_6(self):\n        # Test non-integer inputs for n_samples\n        with self.assertRaises(TypeError):\n            task_func(n_samples=200.5, random_seed=self.seed)\n    def tearDown(self):\n        plt.close(\"all\")\n        self.temp_dir.cleanup()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads a tar.gz file from a specified URL, then validates its MD5 checksum against a predefined expected value. If the checksum matches, it extracts the contents of the tar.gz file. Otherwise, it deletes the downloaded file.\nThe function should output with:\n    bool: Returns True if the file is successfully downloaded, its MD5 checksum matches the expected value, and\n    it is extracted. Returns False if the checksum does not match the expected value or if the download fails.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n```",
        "gt": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\ndef task_func(url):\n    try:\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n    except Exception as e:\n        print(e)\n        return False\n\n    md5_hash = hashlib.md5()\n    with open(TARGET_TAR_FILE, \"rb\") as f:\n        for byte_block in iter(lambda: f.read(4096), b\"\"):\n            md5_hash.update(byte_block)\n    if md5_hash.hexdigest() != EXPECTED_MD5_CHECKSUM:\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n    with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar_ref:\n        tar_ref.extractall()\n\n    os.remove(TARGET_TAR_FILE)\n\n    return True",
        "test": "import unittest\nfrom unittest.mock import patch\nimport urllib.request\nimport hashlib\nimport os\n# Constants from the task_func function\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.valid_url = \"http://example.com/valid.tar.gz\"\n        self.invalid_checksum_url = \"http://example.com/invalid_checksum.tar.gz\"\n        # Create a minimal tar.gz file to simulate download\n        with open(\"test_file.txt\", \"w\") as f:\n            f.write(\"test data\")\n        with tarfile.open(TARGET_TAR_FILE, \"w:gz\") as tar:\n            tar.add(\"test_file.txt\")\n    def test_valid_file(self):\n        \"\"\"Test that a valid file is downloaded, its checksum is validated, and it is extracted.\"\"\"\n        with patch(\"urllib.request.urlretrieve\"), patch(\"hashlib.md5\") as mock_md5:\n            mock_md5.return_value.hexdigest.return_value = EXPECTED_MD5_CHECKSUM\n            result = task_func(self.valid_url)\n            self.assertTrue(result)\n            self.assertFalse(os.path.exists(TARGET_TAR_FILE))\n    def test_invalid_checksum_valid_format(self):\n        \"\"\"Test that a file with an invalid checksum is not extracted.\"\"\"\n        with patch(\"urllib.request.urlretrieve\"), patch(\"hashlib.md5\") as mock_md5:\n            mock_md5.return_value.hexdigest.return_value = \"invalidchecksum\"\n            result = task_func(self.invalid_checksum_url)\n            self.assertFalse(result)\n            self.assertFalse(os.path.exists(TARGET_TAR_FILE))\n    def test_download_failure(self):\n        \"\"\"Test that a file that fails to download is not extracted.\"\"\"\n        with patch(\n            \"urllib.request.urlretrieve\", side_effect=Exception(\"Download failed\")\n        ):\n            result = task_func(self.valid_url)\n            self.assertFalse(result)\n    def test_file_removal_after_failure(self):\n        \"\"\"Test that a file that fails to download is removed.\"\"\"\n        with patch(\"urllib.request.urlretrieve\"), patch(\"hashlib.md5\") as mock_md5:\n            mock_md5.return_value.hexdigest.return_value = \"invalidchecksum\"\n            task_func(self.invalid_checksum_url)\n            self.assertFalse(os.path.exists(TARGET_TAR_FILE))\n    def test_extraction_success(self):\n        \"\"\"Test that a file is extracted if its checksum is valid.\"\"\"\n        with patch(\"urllib.request.urlretrieve\"), patch(\"hashlib.md5\") as mock_md5:\n            mock_md5.return_value.hexdigest.return_value = EXPECTED_MD5_CHECKSUM\n            result = task_func(self.valid_url)\n            self.assertTrue(result)\n    def tearDown(self):\n        # Clean up any created files\n        if os.path.exists(TARGET_TAR_FILE):\n            os.remove(TARGET_TAR_FILE)\n        if os.path.exists(\"test_file.txt\"):\n            os.remove(\"test_file.txt\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Transforms a given string by removing special characters, normalizing whitespace, and randomizing character casing.\nNote that: This function considers special characters to be string punctuations. Spaces, tabs, and newlines are replaced with with '_', '__', and '___' respectively. To randomize casing, this function converts characters to uppercase with a 50% probability.\nThe function should output with:\n    str: The preprocessed text string.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n```",
        "gt": "import re\nimport string\nimport random\ndef task_func(text: str, seed=None) -> str:\n\n    if seed is not None:\n        random.seed(seed)\n\n    text = re.sub(\"[%s]\" % re.escape(string.punctuation), \"\", text)\n\n    REPLACEMENTS = {\" \": \"_\", \"\\t\": \"__\", \"\\n\": \"___\"}\n    for k, v in REPLACEMENTS.items():\n        text = text.replace(k, v)\n\n    text = \"\".join(random.choice([k.upper(), k]) for k in text)\n\n    return text",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func(\"Hello   World!\", seed=1)\n        self.assertNotIn(\" \", result, \"Spaces should be replaced.\")\n        self.assertNotIn(\"!\", result, \"Special characters should be removed.\")\n        self.assertEqual(\n            len(result), len(\"Hello___World\"), \"Length should match processed input.\"\n        )\n    def test_case_2(self):\n        result = task_func(\"Python!\", seed=2)\n        self.assertNotIn(\"!\", result, \"Special characters should be removed.\")\n        self.assertEqual(\n            len(result), len(\"Python\"), \"Length should match processed input.\"\n        )\n    def test_case_3(self):\n        result = task_func(\"  \", seed=3)\n        self.assertEqual(result, \"__\", \"Spaces should be replaced with underscores.\")\n    def test_case_4(self):\n        result = task_func(\"\\t\\n\", seed=4)\n        self.assertEqual(\n            result, \"_____\", \"Tab and newline should be replaced with underscores.\"\n        )\n    def test_case_5(self):\n        result = task_func(\"a!b@c#\", seed=5)\n        self.assertTrue(result.isalpha(), \"Output should only contain alphabets.\")\n        self.assertEqual(\n            len(result), len(\"abc\"), \"Length should match processed input.\"\n        )\n    def test_case_6(self):\n        # Test with all types of whitespace characters\n        result = task_func(\"a b\\tc\\nd\", seed=6)\n        self.assertEqual(\n            result.lower(),\n            \"a_b__c___d\",\n            \"Should replace all types of whitespaces correctly.\",\n        )\n    def test_case_7(self):\n        # Test with a mix of alphanumeric and special characters\n        result = task_func(\"a1! b2@ c3#\", seed=7)\n        self.assertTrue(\n            all(char.isalnum() or char == \"_\" for char in result),\n            \"Should only contain alphanumeric characters and underscores.\",\n        )\n    def test_case_8(self):\n        # Test with an empty string\n        result = task_func(\"\", seed=8)\n        self.assertEqual(result, \"\", \"Should handle empty string correctly.\")\n    def test_case_9(self):\n        # Test with a string that contains no special characters or whitespaces\n        result = task_func(\"abcdefg\", seed=9)\n        self.assertTrue(result.isalpha(), \"Should contain only letters.\")\n        self.assertEqual(len(result), 7, \"Length should match the input.\")\n    def test_case_10(self):\n        # Test with a long string of repeated characters\n        result = task_func(\"a\" * 50, seed=10)\n        self.assertTrue(\n            all(char.lower() == \"a\" for char in result),\n            \"All characters should be 'a' or 'A'.\",\n        )\n        self.assertEqual(len(result), 50, \"Length should match the input.\")\n    def test_case_11(self):\n        # Test with only special characters\n        result = task_func(\"!@#$%^&*\", seed=11)\n        self.assertEqual(\n            result, \"\", \"Should return an empty string for only special characters.\"\n        )\n    def test_case_12(self):\n        # Test with numeric characters\n        result = task_func(\"12345\", seed=13)\n        self.assertTrue(result.isdigit(), \"Should contain only digits.\")\n        self.assertEqual(len(result), 5, \"Length should match the input.\")\n    def test_case_13(self):\n        # Test with a string containing only whitespace characters\n        result = task_func(\" \\t\\n\", seed=14)\n        self.assertEqual(\n            result,\n            \"______\",\n            \"Should replace all types of whitespaces correctly, with two underscores for tab and three for newline.\",\n        )\n    def test_case_14(self):\n        # Test the randomness of uppercase conversion with a long string\n        result = task_func(\"a\" * 100, seed=15)\n        self.assertTrue(\n            all(char.lower() == \"a\" for char in result),\n            \"All characters should be 'a' or 'A'.\",\n        )\n        self.assertNotEqual(\n            result, \"a\" * 100, \"Should have some uppercase transformations.\"\n        )\n        self.assertNotEqual(\n            result, \"A\" * 100, \"Should have some lowercase transformations.\"\n        )\n    def test_case_15(self):\n        # Test random seed impact\n        result1 = task_func(\"test seed impact\", seed=42)\n        result2 = task_func(\"test seed impact\", seed=42)\n        self.assertEqual(\n            result1, result2, \"Results with the same seed should be identical.\"\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Group the dictionary entries after the first character of the key and add the values for each group.\nThe function should output with:\n    aggregated_dict (dict): The aggregated dictionary.\nYou should write self-contained code starting with:\n```\nfrom itertools import groupby\nfrom operator import itemgetter\n# Constants\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n```",
        "gt": "from itertools import groupby\nfrom operator import itemgetter\n# Constants\nKEY_FUNC = itemgetter(0)\ndef task_func(my_dict):\n    sorted_items = sorted(my_dict.items(), key=lambda item: item[0][0])\n    # Group items by the first character of the key and sum their values\n    aggregated_dict = {k: sum(item[1] for item in g) for k, g in groupby(sorted_items, key=lambda item: item[0][0])}\n\n    return aggregated_dict",
        "test": "import unittest\n# Import the function from the provided file\nclass TestCases(unittest.TestCase):\n    \n    def test_1(self):\n        my_dict = {'apple': 1, 'banana': 2, 'avocado': 3, 'blueberry': 4, 'blackberry': 5}\n        result = task_func(my_dict)\n        expected = {'a': 4, 'b': 11}\n        self.assertEqual(result, expected)\n        \n    def test_2(self):\n        my_dict = {'apple': 10, 'apricot': 10, 'banana': 10, 'blueberry': 10}\n        result = task_func(my_dict)\n        expected = {'a': 20, 'b': 20}\n        self.assertEqual(result, expected)\n    def test_3(self):\n        my_dict = {}\n        result = task_func(my_dict)\n        expected = {}\n        self.assertEqual(result, expected)\n    def test_4(self):\n        my_dict = {'apple': 1, 'orange': 2, 'cherry': 3, 'blueberry': 4}\n        result = task_func(my_dict)\n        expected = {'a': 1, 'o': 2, 'c': 3, 'b': 4}\n        self.assertEqual(result, expected)\n    def test_5(self):\n        my_dict = {'apple': 1, 'apricot': 2, 'banana': 3, 'blueberry': 4, 'cherry': 5, 'date': 6}\n        result = task_func(my_dict)\n        expected = {'a': 3, 'b': 7, 'c': 5, 'd': 6}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Loads a DLL file from the specified filepath and returns its metadata, including creation time, modification time, and file size. The times are displayed in UTC format. This function demonstrates the use of ctypes for loading DLLs and os module for accessing file metadata.\nThe function should output with:\n    str: The name of the loaded DLL file.\n    dict: A dictionary containing the metadata of the DLL file, including the keys 'Creation Time', 'Modification Time', and 'Size'.\nYou should write self-contained code starting with:\n```\nimport os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n```",
        "gt": "import os\nimport ctypes\nfrom datetime import datetime\nimport pytz\ndef task_func(filepath):\n    metadata = dict()\n    lib = ctypes.CDLL(filepath)\n\n    file_stat = os.stat(filepath)\n\n    creation_time = datetime.fromtimestamp(file_stat.st_ctime, pytz.UTC)\n    \n    modification_time = datetime.fromtimestamp(file_stat.st_mtime, pytz.UTC)\n\n    file_size = file_stat.st_size\n    metadata['Creation Time'] = creation_time\n    metadata['Modification Time'] = modification_time\n    metadata['Size'] = file_size\n    \n    return lib._name, metadata",
        "test": "import unittest\nimport os\nimport ctypes\nfrom unittest.mock import patch\nimport tempfile\nimport sys\nfrom datetime import datetime\nimport pytz\nfrom io import StringIO\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary DLL file\n        self.temp_file = tempfile.NamedTemporaryFile(suffix='.dll', delete=False)\n        self.filepath = self.temp_file.name\n    def test_file_existence(self):\n        self.assertTrue(os.path.exists(self.filepath))\n    def test_invalid_file_path(self):\n        with self.assertRaises(OSError):\n            task_func('invalid_path.dll')\n    @patch('ctypes.CDLL')\n    @patch('os.stat')\n    def test_return_value(self, mock_stat, mock_cdll):\n        \"\"\"Verify that the function returns the name of the DLL file.\"\"\"\n        mock_cdll.return_value._name = 'test.dll'\n        result, metadata = task_func('path/to/test.dll')\n        self.assertEqual(result, 'test.dll')\n        self.assertIsInstance(metadata, dict)\n    @patch('ctypes.CDLL', side_effect=OSError(\"File not found\"))\n    def test_nonexistent_file(self, mock_cdll):\n        \"\"\"Ensure function handles nonexistent files appropriately.\"\"\"\n        with self.assertRaises(OSError) as context:\n            task_func('path/to/nonexistent.dll')\n        self.assertEqual(str(context.exception), \"File not found\")\n    @patch('os.stat')\n    @patch('ctypes.CDLL')\n    def test_metadata_printing(self, mock_cdll, mock_stat):\n        \"\"\"Check if file metadata is correctly printed.\"\"\"\n        # Setup mock for os.stat to return specific file metadata\n        mock_stat.return_value.st_ctime = 1609459200  # 2021-01-01 00:00:00 UTC\n        mock_stat.return_value.st_mtime = 1609545600  # 2021-01-02 00:00:00 UTC\n        mock_stat.return_value.st_size = 123456\n        # Setup mock for CDLL to return a dummy name\n        mock_cdll.return_value._name = 'test.dll'\n        # Set the expected output dictionary\n        expected_output = {\n            'Creation Time': datetime(2021, 1, 1, 0, 0, 0, tzinfo=pytz.UTC),\n            'Modification Time': datetime(2021, 1, 2, 0, 0, 0, tzinfo=pytz.UTC),\n            'Size': 123456\n        }\n        # Call the function\n        result, metadata = task_func('path/to/test.dll')\n        # Check if the output matches the expected dictionary\n        self.assertEqual(result, 'test.dll', expected_output)\n        self.assertEqual(metadata, expected_output)\n        \n    def tearDown(self):\n        os.remove(self.filepath)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create and visualize a sales report for different categories over a period of time.\nThe function should output with:\n    Returns a DataFrame containing the sales data with the following columns: 'Date', 'Category', 'Sales'.\n    Returns the Matplotlib Axes object for the plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    np.random.seed(0)  # Ensure reproducible sales figures\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n    report_data = []\n\n    for date in date_range:\n        for category in categories:\n            sales = np.random.randint(low=100, high=500)\n            report_data.append([date, category, sales])\n\n    sales_df = pd.DataFrame(report_data, columns=['Date', 'Category', 'Sales'])\n\n    fig, ax = plt.subplots(figsize=(12, 8))\n    sales_df.pivot(index='Date', columns='Category', values='Sales').plot(ax=ax)\n    ax.set_title('Category-wise Sales Trends')\n    ax.grid(True)\n    \n    return sales_df, ax",
        "test": "import unittest\nimport pandas as pd\n# Unit tests for the task_func function\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        \"\"\"Test with default parameters.\"\"\"\n        df, ax = task_func()\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue(all(x in df.columns for x in ['Date', 'Category', 'Sales']))\n        self.assertEqual(len(df['Category'].unique()), 5)\n        self.assertEqual(ax.get_title(), 'Category-wise Sales Trends')\n    def test_case_2(self):\n        \"\"\"Test with custom start_date and periods.\"\"\"\n        df, _ = task_func(start_date='2021-01-01', periods=7)\n        self.assertTrue(df['Date'].min() >= pd.to_datetime('2021-01-01'))\n        self.assertEqual(df['Date'].nunique(), 7)\n        expected_rows = 7 * len(['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports'])\n        self.assertEqual(len(df), expected_rows)\n        \n    def test_case_3(self):\n        \"\"\"Test with a different frequency and custom categories.\"\"\"\n        df, _ = task_func(freq='W-TUE', categories=['Books', 'Games'])\n        self.assertEqual(len(df['Category'].unique()), 2)\n        self.assertTrue(all(category in ['Books', 'Games'] for category in df['Category'].unique()))\n    def test_case_4(self):\n        \"\"\"Test with all parameters customized.\"\"\"\n        df, _ = task_func(start_date='2019-06-01', periods=10, freq='W-WED', categories=['Food', 'Clothing'])\n        self.assertEqual(len(df['Category'].unique()), 2)\n        self.assertTrue(all(category in ['Food', 'Clothing'] for category in df['Category'].unique()))\n    def test_case_5(self):\n        \"\"\"Test with a single category.\"\"\"\n        df, _ = task_func(categories=['Electronics'])\n        self.assertTrue(all(df['Category'] == 'Electronics'))\n        self.assertEqual(len(df), 13)  # Default periods",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "You are given a list of elements. Each element of the list is a list of 3 values. Use this list of elements to build a dataframe with 3 columns 'col1', 'col2' and 'col3' and create a distribution of chart of the different values of \"col3\" grouped by \"col1\" and \"col2\" using seaborn. The function's logic is as follows: 1. Build a pandas DataFrame by using list of elements. Make sure to name the columns as 'col1', 'col2' and 'col3', the constant COLUMNS is provided for this purpose. 2. Create a new dataframe by grouping the values in the column 'col3' by ['col1', 'col2']. 3. Reset the index of the newly created dataframe. This dataframe is the first element of the output tuple. 4. Create a distribution plot of the 'col3' column of the previous dataframe using seaborn. This plot is the second and last element of the output tuple. - The xlabel (label for the x-axis) is set to the 'col3'.\nThe function should output with:\n    tuple:\n    pandas.DataFrame: The DataFrame of the analyzed data.\n    plt.Axes: The seaborn plot object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    analyzed_df = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].nunique().reset_index()\n    ax = sns.distplot(analyzed_df[COLUMNS[-1]])\n\n    return analyzed_df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        data = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]\n        analyzed_df, plot = task_func(data)\n        # Asserting the analyzed DataFrame\n        expected_df = pd.DataFrame({\n            'col1': [1, 1, 2, 2],\n            'col2': [1, 2, 1, 2],\n            'col3': [2, 1, 3, 1]\n        })\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        # Asserting plot attributes (e.g., title, x-axis, y-axis)\n        self.assertEqual(plot.get_xlabel(), 'col3')\n    def test_case_2(self):\n        # Testing with a different dataset\n        data = [[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n        analyzed_df, plot = task_func(data)\n        # Asserting the analyzed DataFrame\n        expected_df = pd.DataFrame({\n            'col1': [1, 1],\n            'col2': [1, 2],\n            'col3': [3, 1]\n        })\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        # Asserting plot attributes\n        self.assertEqual(plot.get_xlabel(), 'col3')\n    def test_case_3(self):\n        data = [[1, 2, 3], [1, 2, 4], [1, 2, 5], [6, 7, 8]]\n        analyzed_df, plot = task_func(data)\n        # Asserting the analyzed DataFrame\n        expected_df = pd.DataFrame({\n            'col1': [1, 6],\n            'col2': [2, 7],\n            'col3': [3, 1]\n        })\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        # Asserting plot attributes\n        self.assertEqual(plot.get_xlabel(), 'col3')\n    def test_case_4(self):\n        data = [\n            [0, 0, 1],\n            [0, 0, 4],\n            [0, 1, 1],\n            [0, 1, 7],\n            [1, 0, 0],\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n        ]\n        analyzed_df, plot = task_func(data)\n        expected_data = [\n            [0, 0, 2],\n            [0, 1, 2],\n            [1, 0, 1],\n            [1, 1, 1]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        # Asserting plot attributes\n        self.assertEqual(plot.get_xlabel(), 'col3')\n    def test_case_5(self):\n        data = [\n            [0, 0, 0],\n            [0, 1, 0],\n            [1, 0, 0],\n            [1, 1, 0],\n            [0, 0, 1],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1],\n        ]\n        analyzed_df, plot = task_func(data)\n        expected_data = [\n            [0, 0, 2],\n            [0, 1, 2],\n            [1, 0, 2],\n            [1, 1, 2]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        # Asserting plot attributes\n        self.assertEqual(plot.get_xlabel(), 'col3')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw and return a bar chart that shows the distribution of categories in a specific column of a dictionary.\nNote that: The categories are defined by the constant CATEGORIES, which is a list containing ['A', 'B', 'C', 'D', 'E']. If some categories are missing in the DataFrame, they will be included in the plot with a count of zero. The x label of the plot is set to 'Category', the y label is set to 'Count', and the title is set to 'Distribution of {column}'.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object for the generated plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column):\n    df = pd.DataFrame(data)\n    # Define the categories\n    CATEGORIES = ['A', 'B', 'C', 'D', 'E']\n    \n    # Count occurrences of each category\n    counts = df[column].value_counts()\n    missing_categories = list(set(CATEGORIES) - set(counts.index))\n    for category in missing_categories:\n        counts[category] = 0\n\n    counts = counts.reindex(CATEGORIES)\n    \n    # Plotting\n    ax = counts.plot(kind='bar')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Count')\n    ax.set_title(f'Distribution of {column}')\n    plt.show()\n    \n    return ax",
        "test": "import unittest\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nclass TestCases(unittest.TestCase):\n    \n    def test_with_all_categories(self):\n        \"\"\"Test with all categories present.\"\"\"\n        data = {'Category': ['A', 'B', 'B', 'C', 'A', 'D', 'E', 'E', 'D']}\n        ax = task_func(data, 'Category')\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_xlabel(), 'Category')\n        self.assertEqual(ax.get_ylabel(), 'Count')\n        self.assertEqual(ax.get_title(), 'Distribution of Category')\n        self.assertEqual(len(ax.get_xticks()), 5)  # Check the number of x-axis ticks instead\n    def test_with_missing_categories(self):\n        \"\"\"Test with some categories missing.\"\"\"\n        data = {'Category': ['A', 'A', 'B', 'C']}\n        ax = task_func(data, 'Category')\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.get_xticks()), 5)  # Ensure all categories are accounted for, including missing ones\n    def test_with_unexpected_category(self):\n        \"\"\"Test with a category not in predefined list.\"\"\"\n        data = {'Category': ['F', 'A', 'B']}  # 'F' is not a predefined category\n        ax = task_func(data, 'Category')\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.get_xticks()), 5)  # 'F' is ignored, only predefined categories are considered",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Merge / Concatenate multiple CSV files from a specified directory into a single Pandas DataFrame. If an empty list of files is passed, an empty DataFrame is returned.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame with the merged data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nimport os\ndef task_func(data_dir: str, csv_files: list) -> pd.DataFrame:\n    merged_df = pd.DataFrame()\n\n    for file in csv_files:\n        file_path = os.path.join(data_dir, file)\n        df = pd.read_csv(file_path)\n        merged_df = pd.concat([merged_df, df], ignore_index=True)\n\n    return merged_df",
        "test": "import unittest\nimport pandas as pd\nimport os\nimport shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to hold CSV files\n        self.test_dir = tempfile.mkdtemp()\n        self.files = {\n            'file1.csv': pd.DataFrame({\n                'Name': ['Alice', 'Bob'],\n                'Age': [25, 30]\n            }),\n            'file2.csv': pd.DataFrame({\n                'Name': ['Charlie'],\n                'Age': [35]\n            }),\n            'file3.csv': pd.DataFrame({\n                'Name': ['David', 'Eve'],\n                'Age': [45, 55],\n                'Gender': ['Male', 'Female']\n            }),\n            'file4.csv': pd.DataFrame({\n                'Name': ['Faythe'],\n                'Animal': ['Cat']\n            })\n        }\n        # Write files to disk\n        for filename, df in self.files.items():\n            df.to_csv(os.path.join(self.test_dir, filename), index=False)\n    def tearDown(self):\n        # Clean up the temporary directory\n        shutil.rmtree(self.test_dir)\n    def test_with_multiple_files(self):\n        # Test merging multiple files\n        result = task_func(self.test_dir, ['file1.csv', 'file2.csv'])\n        expected_df = pd.concat([self.files['file1.csv'], self.files['file2.csv']],\n                                ignore_index=True)\n        pd.testing.assert_frame_equal(result, expected_df)\n    def test_with_different_columns(self):\n        # Test files with different columns\n        result = task_func(self.test_dir, ['file1.csv', 'file3.csv', 'file4.csv'])\n        expected_df = pd.concat([self.files['file1.csv'], self.files['file3.csv'], self.files['file4.csv']],\n                                ignore_index=True)\n        pd.testing.assert_frame_equal(result, expected_df)\n    def test_with_empty_list(self):\n        # Test with an empty list of files\n        result = task_func(self.test_dir, [])\n        self.assertTrue(result.empty)\n    def test_with_nonexistent_file(self):\n        # Test referencing a non-existent file\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.test_dir, ['nonexistent.csv'])\n    def test_single_file(self):\n        # Test with a single file\n        result = task_func(self.test_dir, ['file2.csv'])\n        expected_df = self.files['file2.csv']\n        pd.testing.assert_frame_equal(result, expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Get the weekday of the date 'days_in_past' days ago from today. This function computes the date that is 'days_in_past' number of days ago from the current system time's date in UTC. It then determines the weekday of this target date using calendar and returns its name as a string.\nThe function should raise the exception for: ValueError: If 'days_in_past' is negative.\nThe function should output with:\n    weekday (str)     : The name of the weekday (e.g., 'Monday', 'Tuesday') for the computed date.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n```",
        "gt": "from datetime import datetime, timedelta\nimport pytz\nimport calendar\ndef task_func(days_in_past=7):\n    if days_in_past < 0:\n        raise ValueError(\"Days in the past cannot be negative\")\n\n    date = datetime.now(pytz.UTC) - timedelta(days=days_in_past)\n    weekday = calendar.day_name[date.weekday()]\n\n    return weekday",
        "test": "import unittest\nfrom datetime import datetime, timedelta\nimport pytz\nimport calendar\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input 1: Default input\n        result = task_func()\n        self.assertIsInstance(result, str)\n        self.assertIn(result, list(calendar.day_name))\n        # Ensure the result matches the expected output for 7 days ago\n        expected_date = datetime.now(pytz.UTC) - timedelta(days=7)\n        expected_weekday = calendar.day_name[expected_date.weekday()]\n        self.assertEqual(result, expected_weekday)\n    def test_case_2(self):\n        # Input 2: Test with 3 days in the past\n        result = task_func(3)\n        self.assertIsInstance(result, str)\n        self.assertIn(result, list(calendar.day_name))\n        # Ensure the result matches the expected output for 3 days ago\n        expected_date = datetime.now(pytz.UTC) - timedelta(days=3)\n        expected_weekday = calendar.day_name[expected_date.weekday()]\n        self.assertEqual(result, expected_weekday)\n    def test_case_3(self):\n        # Input 3: Test with 0 days in the past (today)\n        result = task_func(0)\n        self.assertIsInstance(result, str)\n        self.assertIn(result, list(calendar.day_name))\n        # Ensure the result matches the expected output for today\n        expected_date = datetime.now(pytz.UTC)\n        expected_weekday = calendar.day_name[expected_date.weekday()]\n        self.assertEqual(result, expected_weekday)\n    def test_case_4(self):\n        # Input 4: Test with 30 days in the past (approximately a month ago)\n        result = task_func(30)\n        self.assertIsInstance(result, str)\n        self.assertIn(result, list(calendar.day_name))\n        # Ensure the result matches the expected output for 30 days ago\n        expected_date = datetime.now(pytz.UTC) - timedelta(days=30)\n        expected_weekday = calendar.day_name[expected_date.weekday()]\n        self.assertEqual(result, expected_weekday)\n    def test_case_5(self):\n        # Input 5: Test handling invalid days_in_the_past\n        for invalid in [-1, \"1\"]:\n            with self.assertRaises(Exception):\n                task_func(invalid)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame and heatmap from a 2D list. This function takes a 2D list and returns a pandas DataFrame and a seaborn heatmap representing the correlation matrix of the DataFrame. Assumes sublists of length 5. Also assumes DataFrame columns: 'A', 'B', 'C', 'D', 'E'.\nThe function should raise the exception for: ValueError: If the input array is empty or contains sublists of varying lengths.\nThe function should output with:\n    DataFrame: Constructed from the input 2D list.\n    heatmap: Seaborn heatmap of the DataFrame's correlation matrix.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(array):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(array):\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    if not array or any(len(sublist) != 5 for sublist in array):\n        raise ValueError(\"array must be non-empty and all sublists must have a length of 5.\")\n\n    df = pd.DataFrame(array, columns=COLUMNS)\n    heatmap = sns.heatmap(df.corr(), annot=True)\n    return df, heatmap",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        random.seed(42)\n        self.mock_data = [[random.randint(1, 100) for _ in range(5)] for _ in range(5)]\n    def test_case_1(self):\n        # Test dataframe creation with valid input\n        df, _ = task_func(self.mock_data)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (5, 5))\n    def test_case_2(self):\n        # Test heatmap creation with valid input\n        _, heatmap = task_func(self.mock_data)\n        self.assertIsNotNone(heatmap)\n    def test_case_3(self):\n        # Test correlation accuracy with known data\n        correlated_data = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]\n        df, _ = task_func(correlated_data)\n        corr_matrix = df.corr()\n        np.testing.assert_array_almost_equal(\n            corr_matrix, np.corrcoef(correlated_data, rowvar=False)\n        )\n    def test_case_4(self):\n        # Test handling of non-numeric data\n        with self.assertRaises(ValueError):\n            task_func([[\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5]])\n    def test_case_5(self):\n        # Test with empty list\n        with self.assertRaises(ValueError):\n            task_func([])\n    def test_case_6(self):\n        # Test with single sublist\n        single_sublist = [[1, 2, 3, 4, 5]]\n        df, _ = task_func(single_sublist)\n        self.assertEqual(df.shape, (1, 5))\n    def test_case_7(self):\n        # Test handling sublists of varying lengths\n        with self.assertRaises(ValueError):\n            task_func([[1, 2, 3], [4, 5, 6, 7, 8]])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a histogram of the given array with a Gaussian fit.\nNote that: This function use \"Fit results: mu = {mean},  std = {standard deviation}\" as the title of the plot, where the values are rounded to two decimal points.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object with the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(l):\n    fig, ax = plt.subplots()\n    ax.hist(l, bins='auto', density=True, alpha=0.6, color='g')\n\n    mu, std = stats.norm.fit(l)\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    title = \"Fit results: mu = %.2f,  std = %.2f\" % (mu, std)\n    ax.set_title(title)\n    return ax",
        "test": "import unittest\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        l1 = np.array([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n        ax1 = task_func(l1)\n        mu, std = stats.norm.fit(l1)\n        expected_title_1 = f\"Fit results: mu = {mu:.2f},  std = {std:.2f}\"\n        self.assertIsInstance(ax1, plt.Axes, \"Return type should be a matplotlib Axes object.\")\n        self.assertEqual(ax1.get_title(), expected_title_1, \"Incorrect title for test case 1.\")\n    \n    def test_case_2(self):\n        l2 = np.array([5, 5, 5, 5, 5])\n        ax2 = task_func(l2)\n        self.assertIsInstance(ax2, plt.Axes, \"Return type should be a matplotlib Axes object.\")\n        self.assertEqual(ax2.get_title(), \"Fit results: mu = 5.00,  std = 0.00\", \"Incorrect title for test case 2.\")\n    def test_case_3(self):\n        l3 = np.array([1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9])\n        ax3 = task_func(l3)\n        mu, std = stats.norm.fit(l3)\n        expected_title_3 = f\"Fit results: mu = {mu:.2f},  std = {std:.2f}\"\n        self.assertIsInstance(ax3, plt.Axes, \"Return type should be a matplotlib Axes object.\")\n        self.assertEqual(ax3.get_title(), expected_title_3, \"Incorrect title for test case 3.\")\n    \n    def test_case_4(self):\n        l4 = np.array([10, 10, 10, 10, 10])\n        ax4 = task_func(l4)\n        self.assertIsInstance(ax4, plt.Axes, \"Return type should be a matplotlib Axes object.\")\n        self.assertEqual(ax4.get_title(), \"Fit results: mu = 10.00,  std = 0.00\", \"Incorrect title for test case 4.\")\n        \n    def test_case_5(self):\n        l5 = np.array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n        ax5 = task_func(l5)\n        mu, std = stats.norm.fit(l5)\n        expected_title_5 = f\"Fit results: mu = {mu:.2f},  std = {std:.2f}\"\n        self.assertIsInstance(ax5, plt.Axes, \"Return type should be a matplotlib Axes object.\")\n        self.assertEqual(ax5.get_title(), expected_title_5, \"Incorrect title for test case 5.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a list of tuples into a Pandas DataFrame, perform a default scaling in each column, and return the transformed DataFrame.\nThe function should output with:\n    df_scaled (DataFrame): A pandas DataFrame containing the scaled versions of the original data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(tuples_list, columns):\n    df = pd.DataFrame(tuples_list, columns=columns)\n    scaler = StandardScaler()\n    df_scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n\n    return df_scaled",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], ['A', 'B', 'C', 'D'])\n        self.assertEqual(df.shape, (3, 4))\n        self.assertEqual(df.columns.tolist(), ['A', 'B', 'C', 'D'])\n        self.assertEqual(df['A'].tolist(), [-1.224744871391589, 0.0, 1.224744871391589])\n    def test_case_2(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], ['A', 'B', 'C', 'D'])\n        self.assertEqual(df.shape, (3, 4))\n        self.assertEqual(df.columns.tolist(), ['A', 'B', 'C', 'D'])\n        self.assertEqual(df['B'].tolist(), [-1.224744871391589, 0.0, 1.224744871391589])\n    def test_case_3(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], ['A', 'B', 'C', 'D'])\n        self.assertEqual(df.shape, (3, 4))\n        self.assertEqual(df.columns.tolist(), ['A', 'B', 'C', 'D'])\n        self.assertEqual(df['C'].tolist(), [-1.224744871391589, 0.0, 1.224744871391589])\n    def test_case_4(self):\n        df = task_func([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], ['A', 'B', 'C', 'D'])\n        self.assertEqual(df.shape, (3, 4))\n        self.assertEqual(df.columns.tolist(), ['A', 'B', 'C', 'D'])\n        self.assertEqual(df['D'].tolist(), [-1.224744871391589, 0.0, 1.224744871391589])\n    def test_case_5(self):\n        df = task_func([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)], ['A', 'B', 'C', 'D'])\n        self.assertEqual(df.shape, (3, 4))\n        self.assertEqual(df.columns.tolist(), ['A', 'B', 'C', 'D'])\n        self.assertEqual(df['A'].tolist(), [0.0, 0.0, 0.0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a list of stock data and calculates the sum, mean, minimum, and maximum values for a specified column.\nThe function should raise the exception for: ValueError: If the specified column name is not valid.\nThe function should output with:\n    dict: A dictionary containing the calculated 'sum', 'mean', 'min' (minimum), and 'max' (maximum)\n    for the specified column. If the input data is empty, 'sum' will be 0, and 'mean', 'min', and\n    'max' will be NaN.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(column, data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(column, data):\n    valid_columns = [\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]\n    if column not in valid_columns:\n        raise ValueError(f\"Invalid column name.\")\n    if not isinstance(data, list) or (\n        len(data) > 0\n        and not all(\n            isinstance(row, list) and len(row) == len(valid_columns) for row in data\n        )\n    ):\n        raise ValueError(\n            \"Data must be a list of lists, with each inner list matching the length of the column names.\"\n        )\n\n    df = pd.DataFrame(data, columns=valid_columns)\n    column_data = df[column]\n\n    result = {\n        \"sum\": np.sum(column_data) if not column_data.empty else 0,\n        \"mean\": np.mean(column_data) if not column_data.empty else float(\"nan\"),\n        \"min\": np.min(column_data) if not column_data.empty else float(\"nan\"),\n        \"max\": np.max(column_data) if not column_data.empty else float(\"nan\"),\n    }\n\n    return result",
        "test": "import unittest\nimport numpy as np\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def assertDictAlmostEqual(self, d1, d2, msg=None):\n        # Helper function for testing\n        for k, v in d1.items():\n            if isinstance(v, float) and np.isnan(v):\n                self.assertTrue(np.isnan(d2[k]), msg or f\"{k} not almost equal\")\n            else:\n                self.assertAlmostEqual(v, d2[k], msg=msg or f\"{k} not equal\")\n    def test_case_1(self):\n        # Test with valid data for a specific column\n        data = [\n            [datetime(2022, 1, 1), 100, 105, 95, 102, 10000],\n            [datetime(2022, 1, 2), 102, 108, 100, 105, 15000],\n            [datetime(2022, 1, 3), 105, 110, 103, 108, 20000],\n        ]\n        result = task_func(\"Open\", data)\n        expected_result = {\n            \"sum\": 307,\n            \"mean\": 102.33333333333333,\n            \"min\": 100,\n            \"max\": 105,\n        }\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_2(self):\n        # Test with empty data list\n        data = []\n        result = task_func(\"Open\", data)\n        expected_result = {\n            \"sum\": 0,\n            \"mean\": float(\"nan\"),\n            \"min\": float(\"nan\"),\n            \"max\": float(\"nan\"),\n        }\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_3(self):\n        # Test with an invalid column name\n        data = [[datetime(2022, 1, 1), 100, 105, 95, 102, 10000]]\n        with self.assertRaises(ValueError):\n            task_func(\"InvalidColumn\", data)\n    def test_case_4(self):\n        # Test with NaN values in the target column\n        data = [\n            [datetime(2022, 1, 1), np.nan, 105, 95, 102, 10000],\n            [datetime(2022, 1, 2), 102, np.nan, 100, 105, 15000],\n            [datetime(2022, 1, 3), 105, np.nan, 103, 108, 20000],\n        ]\n        result = task_func(\"Open\", data)\n        expected_result = {\"sum\": 207, \"mean\": 103.5, \"min\": 102, \"max\": 105}\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_5(self):\n        # Test with all values in the target column being the same\n        data = [[datetime(2022, 1, 1), 100, 100, 100, 100, 10000]] * 3\n        result = task_func(\"Open\", data)\n        expected_result = {\"sum\": 300, \"mean\": 100, \"min\": 100, \"max\": 100}\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_6(self):\n        # Test for handling mixed data types within a single column\n        data = [\n            [datetime(2022, 1, 1), 100, 105, 95, 102, 10000],\n            [datetime(2022, 1, 2), \"102\", 108, 100, 105, 15000],\n        ]\n        with self.assertRaises(TypeError):\n            task_func(\"Open\", data)\n    def test_case_7(self):\n        # Test with extremely large values in the target column\n        data = [[datetime(2022, 1, 1), 1e18, 1.05e18, 0.95e18, 1.02e18, 10000]]\n        result = task_func(\"Open\", data)\n        expected_result = {\"sum\": 1e18, \"mean\": 1e18, \"min\": 1e18, \"max\": 1e18}\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_8(self):\n        # Test with a single row of data\n        data = [[datetime(2022, 1, 1), 100, 105, 95, 102, 10000]]\n        result = task_func(\"Open\", data)\n        expected_result = {\"sum\": 100, \"mean\": 100, \"min\": 100, \"max\": 100}\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_9(self):\n        # Test with a very large dataset to check performance/scalability\n        large_data = [[datetime(2022, 1, 1), 100, 105, 95, 102, 10000]] * 10000\n        result = task_func(\"Open\", large_data)\n        expected_result = {\"sum\": 1000000, \"mean\": 100, \"min\": 100, \"max\": 100}\n        self.assertDictAlmostEqual(result, expected_result)\n    def test_case_10(self):\n        # Test for column case sensitivity\n        data = [\n            [datetime(2022, 1, 1), 100, 105, 95, 102, 10000],\n        ]\n        with self.assertRaises(ValueError):\n            task_func(\"open\", data)\n    def test_case_11(self):\n        # Test with incorrect data\n        data = \"Incorrect data type\"\n        with self.assertRaises(ValueError):\n            task_func(\"Open\", data)\n    def test_case_12(self):\n        # Test for data list containing lists of varying lengths\n        data = [\n            [datetime(2022, 1, 1), 100, 105, 95, 102, 10000],\n            [datetime(2022, 1, 2), 102, 108, 100],\n        ]\n        with self.assertRaises(ValueError):\n            task_func(\"Open\", data)\n    def test_case_13(self):\n        # Test for data list containing elements other than lists (mixed types)\n        data = [[datetime(2022, 1, 1), 100, 105, 95, 102, 10000], \"Not a list\"]\n        with self.assertRaises(ValueError):\n            task_func(\"Open\", data)\n    def test_case_14(self):\n        # Test for a correctly structured and typed data list but with an empty inner list\n        data = [[datetime(2022, 1, 1), 100, 105, 95, 102, 10000], []]\n        with self.assertRaises(ValueError):\n            task_func(\"Open\", data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalize data in a csv file using MinMaxScaler from sklearn. Only numeric columns are normalized. Columns with other dtypes are left as they are.\nThe function should raise the exception for: ValueError: If input does not have numeric columns.\nThe function should output with:\n    DataFrame: A pandas DataFrame with normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(file_name: str) -> pd.DataFrame:\n    df = pd.read_csv(file_name)\n    if df.select_dtypes(include='number').empty:\n        raise ValueError(\"Input must at least have one numeric column.\")\n\n    scaler = MinMaxScaler()\n    numeric_columns = df.select_dtypes(include='number').columns\n    df[numeric_columns] = scaler.fit_transform(df[numeric_columns])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport tempfile\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up a temporary directory\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Clean up by removing the directory\n        shutil.rmtree(self.test_dir)\n    def create_csv(self, filename, data):\n        # Helper function to create a CSV file with the given data\n        full_path = os.path.join(self.test_dir, filename)\n        data.to_csv(full_path, index=False)\n        return full_path\n    def test_non_numeric_and_empty(self):\n        # Test with non-numeric and empty data\n        non_numeric_df = pd.DataFrame({\n            \"Name\": [\"Alice\", \"Bob\"],\n            \"City\": [\"New York\", \"Los Angeles\"]\n        })\n        empty_df = pd.DataFrame()\n        non_numeric_path = self.create_csv(\"non_numeric.csv\", non_numeric_df)\n        empty_path = self.create_csv(\"empty.csv\", empty_df)\n        self.assertRaises(ValueError, task_func, non_numeric_path)\n        self.assertRaises(ValueError, task_func, empty_path)\n    def test_single_row(self):\n        # Test with a single row of numeric data\n        single_row_df = pd.DataFrame({\n            \"Name\": [\"Olivia Anderson\"],\n            \"Age\": [35],\n            \"Salary\": [58000]\n        })\n        csv_path = self.create_csv(\"single_row.csv\", single_row_df)\n        df = task_func(csv_path)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue((df['Age'] == 0).all() and (df['Salary'] == 0).all())\n    def test_multiple_rows(self):\n        # Test multiple rows with numeric data\n        data_df = pd.DataFrame({\n            \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n            \"Age\": [25, 35, 45],\n            \"Salary\": [50000, 60000, 70000]\n        })\n        csv_path = self.create_csv(\"multiple_rows.csv\", data_df)\n        df = task_func(csv_path)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue((df['Age'] >= 0).all() and (df['Age'] <= 1).all())\n        self.assertTrue((df['Salary'] >= 0).all() and (df['Salary'] <= 1).all())\n    def test_mixed_columns(self):\n        # Test with a mix of numeric and non-numeric columns\n        mixed_df = pd.DataFrame({\n            \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n            \"Age\": [25, 35, 45],\n            \"Salary\": [50000, 60000, 70000],\n            \"City\": [\"New York\", \"Chicago\", \"San Francisco\"]\n        })\n        csv_path = self.create_csv(\"mixed_columns.csv\", mixed_df)\n        df = task_func(csv_path)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue((df['Age'] >= 0).all() and (df['Age'] <= 1).all())\n        self.assertTrue((df['Salary'] >= 0).all() and (df['Salary'] <= 1).all())\n        self.assertTrue('City' in df.columns and df['City'].equals(mixed_df['City']))\n    def test_large_dataset(self):\n        # Test with a large dataset to ensure scalability\n        large_df = pd.DataFrame({\n            \"Age\": range(10000),  # Large range of ages\n            \"Salary\": range(10000, 20000)  # Large range of salaries\n        })\n        csv_path = self.create_csv(\"large_dataset.csv\", large_df)\n        df = task_func(csv_path)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertTrue((df['Age'] >= 0).all() and (df['Age'] <= 1).all())\n        self.assertTrue((df['Salary'] >= 0).all() and (df['Salary'] <= 1).all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a bar subplot of a specific group from the input dataframe.\nNote that: The title of the plot will be 'Bar chart of [value_col] for [group_name]'. The x-axis label will be the name of the grouping column [group_col]. The y-axis label will be the name of the value column [value_col].\nThe function should raise the exception for: Raise ValueError if the group_name does not exist in df.\nThe function should output with:\n    Axes: A matplotlib axes object with the bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nCOLORS = ['r', 'g', 'b']\ndef task_func(df, group_col, value_col, group_name):\n    # Filter the DataFrame to select the specific group\n    group_data = df[df[group_col] == group_name]\n    if group_data.empty:\n        raise ValueError\n    \n    # Create a figure and axes\n    fig, ax = plt.subplots()\n\n    # Get the number of bars\n    num_bars = len(group_data)\n\n    # Set the width of the bars\n    bar_width = 0.35\n\n    # Generate positions for the bars\n    index = np.arange(num_bars)\n\n    # Create the bar chart\n    bars = ax.bar(index, group_data[value_col], bar_width, color=COLORS[:num_bars])\n\n    # Set labels and title\n    ax.set_xlabel(group_col)\n    ax.set_ylabel(value_col)\n    ax.set_title(f'Bar chart of {value_col} for {group_name}')\n\n    # Set x-axis ticks and labels\n    ax.set_xticks(index)\n    ax.set_xticklabels(group_data[group_col])\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom faker import Faker\nfaker = Faker()\n# Constants\nCOLORS = ['r', 'g', 'b']\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({'Group': ['A', 'B', 'C'], 'Value': [10, 20, 30]})\n        \n    def test_single_group_bar_chart(self):\n        ax = task_func(self.df, 'Group', 'Value', 'B')\n        num_bars = len(ax.containers[0])  # Number of bars in the plot\n        self.assertEqual(num_bars, 1)  # There should be 1 bar in the plot for group 'B'\n        plt.close()\n    def test_missing_group(self):\n        with self.assertRaises(ValueError):\n            ax = task_func(self.df, 'Group', 'Value', 'D')  # Group 'D' does not exist in the DataFrame\n        plt.close()\n    def test_correct_labels(self):\n        ax = task_func(self.df, 'Group', 'Value', 'B')\n        self.assertEqual(ax.get_xlabel(), 'Group')  # x-axis label should be 'Group'\n        self.assertEqual(ax.get_ylabel(), 'Value')  # y-axis label should be 'Value'\n        plt.close()\n    def test_inline_points(self):\n        ax = task_func(self.df, 'Group', 'Value', 'B')\n        bars = ax.containers[0]\n        for bar in bars:\n            self.assertAlmostEqual(bar.get_height(), 20, delta=0.01)  # Check if points are inline\n        plt.close()\n    \n    \n    def test_inline_points(self):\n        ax = task_func(self.df, 'Group', 'Value', 'C')\n        bars = ax.containers[0]\n        for bar in bars:\n            self.assertAlmostEqual(bar.get_height(), 30, delta=0.01)  # Check if points are inline\n        plt.close()\ndef generate_complex_test_data(num_rows=100):\n    \"\"\"Generate a DataFrame with a mix of numeric and text data, including some potential outliers.\"\"\"\n    data = {\n        'Group': [faker.random_element(elements=('A', 'B', 'C', 'D')) for _ in range(num_rows)],\n        'Value': [faker.random_int(min=0, max=1000) for _ in range(num_rows)]\n    }\n    complex_df = pd.DataFrame(data)\n    return complex_df",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Simulates sales in a pet shop based on a randomly determined number of customers. Each customer randomly buys one type of animal from the specified list of animals. The function displays and returns a summary of the sales, where the number of customers follows a Poisson distribution with the specified mean (mu).\nThe function should output with:\n    dict: A dictionary with animal types as keys and the number of sales as values.\nYou should write self-contained code starting with:\n```\nimport random\nfrom scipy import stats\ndef task_func(animals, mean):\n```",
        "gt": "import random\nfrom scipy import stats\ndef task_func(animals, mean):\n    if not animals:\n        return {}\n\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.animals = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_typical_case(self, mock_poisson, mock_choice):\n        \"\"\"Test typical case with mock number of customers and sales.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 100\n        mock_choice.side_effect = lambda x: x[0]  # always choose the first animal\n        expected = {'Dog': 100, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0}\n        result = task_func(self.animals, 100)\n        self.assertEqual(result, expected)\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_zero_customers(self, mock_poisson, mock_choice):\n        \"\"\"Test the scenario where zero customers arrive.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 0\n        expected = {'Dog': 0, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0}\n        result = task_func(self.animals, 0)\n        self.assertEqual(result, expected)\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_large_number_of_customers(self, mock_poisson, mock_choice):\n        \"\"\"Test the function with a very large number of customers.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 1000\n        mock_choice.side_effect = lambda x: 'Dog'  # simulate all choosing 'Dog'\n        expected = {'Dog': 1000, 'Cat': 0, 'Bird': 0, 'Fish': 0, 'Hamster': 0}\n        result = task_func(self.animals, 500)\n        self.assertEqual(result, expected)\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_random_animal_selection(self, mock_poisson, mock_choice):\n        \"\"\"Test random selection of animals.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 5\n        mock_choice.side_effect = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n        result = task_func(self.animals, 5)\n        expected = {'Dog': 1, 'Cat': 1, 'Bird': 1, 'Fish': 1, 'Hamster': 1}\n        self.assertEqual(result, expected)\n    def test_empty_animal_list(self):\n        \"\"\"Test with an empty list of animals.\"\"\"\n        result = task_func([], 10)\n        self.assertEqual(result, {})\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_return_type(self, mock_poisson, mock_random):\n        \"\"\"Test that the function returns a dictionary.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 5\n        mock_random.side_effect = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n        result = task_func(self.animals, 120)\n        self.assertIsInstance(result, dict)\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_sales_content(self, mock_poisson, mock_random):\n        \"\"\"Test the content of the sales dictionary matches the expected distribution of one each.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 5\n        mock_random.side_effect = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n        result = task_func(self.animals, 120)\n        self.assertEqual(result, {'Dog': 1, 'Cat': 1, 'Bird': 1, 'Fish': 1, 'Hamster': 1})\n    @patch('scipy.stats.poisson')\n    def test_no_customer(self, mock_poisson):\n        \"\"\"Test the function with zero customers.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 0\n        result = task_func(self.animals, 120)\n        self.assertEqual(result, {animal: 0 for animal in self.animals})\n    @patch('random.choice')\n    @patch('scipy.stats.poisson')\n    def test_all_animals_sold(self, mock_poisson, mock_random):\n        \"\"\"Test that all animal types are considered in sales.\"\"\"\n        mock_poisson.return_value.rvs.return_value = 5\n        mock_random.side_effect = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n        result = task_func(self.animals, 120)\n        self.assertTrue(all(animal in result for animal in self.animals))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the number of unique non-stop words across all '.txt' files in a specified directory.\nThe function should output with:\n    int: The total count of unique non-stop words across all files.\nYou should write self-contained code starting with:\n```\nimport nltk\nnltk.download('stopwords')\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n```",
        "gt": "import nltk\nnltk.download('stopwords')\nfrom collections import Counter\nimport os\nfrom nltk.corpus import stopwords\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(directory_path):\n\n    word_counts = Counter()\n\n    for file_name in os.listdir(directory_path):\n        if not file_name.endswith('.txt'):\n            continue\n        with open(os.path.join(directory_path, file_name), 'r') as file:\n            words = [word for word in file.read().split() if word.lower() not in STOPWORDS]\n            word_counts.update(words)\n\n    return len(word_counts)",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'test_data'\n        os.makedirs(self.test_dir, exist_ok=True)\n    def tearDown(self):\n        for f in os.listdir(self.test_dir):\n            os.remove(os.path.join(self.test_dir, f))\n        os.rmdir(self.test_dir)\n    def test_no_text_files(self):\n        self.assertEqual(task_func(self.test_dir), 0)\n    def test_empty_text_files(self):\n        with open(os.path.join(self.test_dir, 'empty.txt'), 'w') as f:\n            pass\n        self.assertEqual(task_func(self.test_dir), 0)\n    def test_files_with_only_stopwords(self):\n        with open(os.path.join(self.test_dir, 'stopwords.txt'), 'w') as f:\n            f.write('the and or but')\n        self.assertEqual(task_func(self.test_dir), 0)\n    def test_non_empty_text_files(self):\n        with open(os.path.join(self.test_dir, 'sample.txt'), 'w') as f:\n            f.write('Hello world! This is a test.')\n        self.assertEqual(task_func(self.test_dir), 3)  # 'Hello', 'world', 'This', 'test'\n    def test_case_insensitivity(self):\n        with open(os.path.join(self.test_dir, 'mixed_case.txt'), 'w') as f:\n            f.write('Word word WoRd WORD')\n        self.assertEqual(task_func(self.test_dir), 4)  # 'Word' in different cases",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scrape a web page for the first occurrence of a specified HTML tag and return its text content.\nThe function should output with:\n    str: The text content of the specified HTML tag if found, otherwise returns None.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n```",
        "gt": "import requests\nfrom bs4 import BeautifulSoup\ndef task_func(url, tag):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    tag_content = soup.find(tag)\n    \n    return tag_content.string if tag_content else None",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_title_tag_found(self, mock_get):\n        \"\"\"Test retrieving the title tag.\"\"\"\n        html_content = \"<html><head><title>Test Page</title></head><body></body></html>\"\n        mock_response = Mock()\n        mock_response.text = html_content\n        mock_get.return_value = mock_response\n        result = task_func(\"http://test.com\", \"title\")\n        self.assertEqual(result, \"Test Page\")\n    @patch('requests.get')\n    def test_h1_tag_found(self, mock_get):\n        \"\"\"Test retrieving the h1 tag.\"\"\"\n        html_content = \"<html><body><h1>This is a test page</h1></body></html>\"\n        mock_response = Mock()\n        mock_response.text = html_content\n        mock_get.return_value = mock_response\n        result = task_func(\"http://test.com\", \"h1\")\n        self.assertEqual(result, \"This is a test page\")\n    @patch('requests.get')\n    def test_nonexistent_tag(self, mock_get):\n        \"\"\"Test for a tag that doesn't exist.\"\"\"\n        html_content = \"<html><body><h1>Existing Tag</h1></body></html>\"\n        mock_response = Mock()\n        mock_response.text = html_content\n        mock_get.return_value = mock_response\n        result = task_func(\"http://test.com\", \"h2\")\n        self.assertIsNone(result)\n    def test_invalid_url_handling(self):\n        \"\"\"Test how the function handles an invalid URL.\"\"\"\n        with self.assertRaises(requests.exceptions.RequestException):\n            task_func(\"invalid_url\", \"title\")\n    @patch('requests.get')\n    def test_malformed_html(self, mock_get):\n        \"\"\"Test the function with a malformed HTML input.\"\"\"\n        html_content = \"<html><head><title>Test Page</title><head><body><h1>This is a test page<h1></body></html>\"\n        mock_response = Mock()\n        mock_response.text = html_content\n        mock_get.return_value = mock_response\n        result = task_func(\"http://test.com\", \"title\")\n        self.assertEqual(result, \"Test Page\")\n        result = task_func(\"http://test.com\", \"h1\")\n        self.assertIsNone(result)\n    @patch('requests.get')\n    def test_multiple_matching_tags(self, mock_get):\n        \"\"\"Test the function with multiple tags of the same type.\"\"\"\n        html_content = \"<html><body><p>First Paragraph</p><p>Second Paragraph</p></body></html>\"\n        mock_response = Mock()\n        mock_response.text = html_content\n        mock_get.return_value = mock_response\n        result = task_func(\"http://test.com\", \"p\")\n        self.assertEqual(result, \"First Paragraph\")\n    @patch('requests.get')\n    def test_empty_tag(self, mock_get):\n        \"\"\"Test the function with an empty tag content.\"\"\"\n        html_content = \"<html><body><div></div><h1>Not empty</h1></body></html>\"\n        mock_response = Mock()\n        mock_response.text = html_content\n        mock_get.return_value = mock_response\n        result = task_func(\"http://test.com\", \"div\")\n        self.assertIsNone(result)\n        result = task_func(\"http://test.com\", \"h1\")\n        self.assertEqual(result, \"Not empty\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a heatmap using the seaborn library for \"x\" as x-values and \"y\" as y-values with labels.\nThe function should output with:\n    ax (Axes): A seaborn heatmap object.\n    df (DataFrame): The dataframe used to create the heatmap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n# Constants\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nimport numpy as np\n# Constants\nLABELS = ['H\\u2082O', 'O\\u2082', 'CO\\u2082', 'N\\u2082', 'Ar']\ndef task_func(x, y, labels):\n    data = []\n\n    for i in range(len(x)):\n        data.append(np.concatenate((x[i], y[i])))\n\n    df = pd.DataFrame(data, index=labels)\n    ax = sns.heatmap(df, cmap='coolwarm')\n    \n    return ax, df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        x = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n        y = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n        labels = ['H\u2082O', 'O\u2082', 'CO\u2082']\n        ax, df = task_func(x, y, labels)\n        \n        # Assert the shape of the dataframe\n        self.assertEqual(df.shape, (3, 6))\n        \n        # Assert the data values of the dataframe\n        expected_data = np.array([[1,2,3,4,5,6], [4,5,6,7,8,9], [7,8,9,10,11,12]])\n        np.testing.assert_array_equal(df.values, expected_data)\n    def test_case_2(self):\n        x = [np.array([1,1]), np.array([2,2])]\n        y = [np.array([3,3]), np.array([4,4])]\n        labels = ['H\u2082O', 'O\u2082']\n        ax, df = task_func(x, y, labels)\n        \n        # Assert the shape of the dataframe\n        self.assertEqual(df.shape, (2, 4))\n        \n        # Assert the data values of the dataframe\n        expected_data = np.array([[1,1,3,3], [2,2,4,4]])\n        np.testing.assert_array_equal(df.values, expected_data)\n    def test_case_3(self):\n        x = [np.array([10])]\n        y = [np.array([20])]\n        labels = ['H\u2082O']\n        ax, df = task_func(x, y, labels)\n        \n        # Assert the shape of the dataframe\n        self.assertEqual(df.shape, (1, 2))\n        \n        # Assert the data values of the dataframe\n        expected_data = np.array([[10, 20]])\n        np.testing.assert_array_equal(df.values, expected_data)\n    def test_case_4(self):\n        x = [np.array([5,6,7]), np.array([8,9,10]), np.array([11,12,13])]\n        y = [np.array([15,16,17]), np.array([18,19,20]), np.array([21,22,23])]\n        labels = ['A', 'B', 'C']\n        ax, df = task_func(x, y, labels)\n        \n        # Assert the shape of the dataframe\n        self.assertEqual(df.shape, (3, 6))\n        \n        # Assert the data values of the dataframe\n        expected_data = np.array([[5,6,7,15,16,17], [8,9,10,18,19,20], [11,12,13,21,22,23]])\n        np.testing.assert_array_equal(df.values, expected_data)\n    def test_case_5(self):\n        x = [np.array([2,3]), np.array([5,6])]\n        y = [np.array([8,9]), np.array([11,12])]\n        labels = ['X', 'Y']\n        ax, df = task_func(x, y, labels)\n        \n        # Assert the shape of the dataframe\n        self.assertEqual(df.shape, (2, 4))\n        \n        # Assert the data values of the dataframe\n        expected_data = np.array([[2,3,8,9], [5,6,11,12]])\n        np.testing.assert_array_equal(df.values, expected_data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a CSV file on a given file path with random numeric data. The number of rows in the CSV file is determined by the 'num_rows' parameter, and the number of columns (features) is determined by the 'data_dimensions' parameter. Columns are named following the convention: 'Feature_x', where x is the number of the feature column starting at 1.\nThe function should output with:\n    str: The file path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(file_path, num_rows, data_dimensions=5, random_seed=None):\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.rand(num_rows, data_dimensions),\n                      columns=[f'Feature_{i + 1}' for i in range(data_dimensions)])\n\n    df.to_csv(file_path, index=False)\n\n    return file_path",
        "test": "import unittest\nimport os\nimport pandas as pd\nimport shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for each test case\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove the temporary directory after each test\n        shutil.rmtree(self.test_dir)\n    def test_basic_functionality(self):\n        # Test with default parameters\n        file_path = task_func(os.path.join(self.test_dir, 'data.csv'), 100)\n        self.assertTrue(os.path.exists(file_path))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 100)\n        self.assertEqual(len(df.columns), 5)\n    def test_custom_dimensions(self):\n        # Test with custom dimensions\n        file_path = task_func(os.path.join(self.test_dir, 'data_custom.csv'), 50, 7)\n        self.assertTrue(os.path.exists(file_path))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 50)\n        self.assertEqual(len(df.columns), 7)\n    def test_empty_file(self):\n        # Test generating an empty file\n        file_path = task_func(os.path.join(self.test_dir, 'empty.csv'), 0, 5)\n        self.assertTrue(os.path.exists(file_path))\n        df = pd.read_csv(file_path)\n        self.assertEqual(len(df), 0)\n    def test_random_seed(self):\n        # Test reproducibility with a random seed\n        file_path1 = task_func(os.path.join(self.test_dir, 'data_seed.csv'), 20, 5, 42)\n        file_path2 = task_func(os.path.join(self.test_dir, 'data_seed.csv'), 20, 5, 42)\n        df1 = pd.read_csv(file_path1)\n        df2 = pd.read_csv(file_path2)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_no_columns(self):\n        # Test with zero columns\n        file_path = task_func(os.path.join(self.test_dir, 'no_columns.csv'), 10, 0)\n        self.assertTrue(os.path.exists(file_path))\n        with open(file_path, 'r') as file:\n            data = file.read()\n        # Expect the file to contain only the headers or be empty\n        self.assertTrue(data == '' or all([x.strip() == '' for x in data.split(',')]))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a JSON string into a dictionary, normalize the dictionary by doubling the numerical values, and then create a Pandas DataFrame from the dictionary. This function processes a JSON string by converting it into a dictionary, normalizes the data by doubling the numerical values, and then constructs a Pandas DataFrame from this dictionary.\nNote that: the function is designed to handle simple flat dictionaries, with values that are either single numerical values, lists of numerical values, or strings that can be interpreted as numbers. It doubles the values of numerical data types within the dictionary, including those within lists and those in strings (which are extracted using regex), but the function does not process nested dictionaries. Finally, it returns the DataFrame with numerical values stored as floats and other types left as-is, or an empty DataFrame if the input JSON string is empty or does not contain any valid data structures for DataFrame conversion.\nThe function should output with:\n    DataFrame: A pandas DataFrame created from the dictionary.\nYou should write self-contained code starting with:\n```\nimport json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n```",
        "gt": "import json\nimport re\nimport pandas as pd\ndef task_func(json_str):\n    NUMBERS = re.compile(r\"^-?\\d+(?:\\.\\d+)?$\")\n\n    my_dict = json.loads(json_str)\n\n    if not my_dict:\n        return pd.DataFrame()\n\n    for key, value in my_dict.items():\n        if isinstance(value, list):\n            my_dict[key] = [v * 2 if isinstance(v, (int, float)) else v for v in value]\n        elif isinstance(value, (int, float)):\n            my_dict[key] = value * 2\n        elif isinstance(value, str) and NUMBERS.match(value):\n            try:\n                my_dict[key] = int(value) * 2\n            except ValueError:\n                my_dict[key] = float(value) * 2\n\n    if all(not isinstance(v, list) for v in my_dict.values()):\n        df = pd.DataFrame([my_dict])\n    else:\n        df = pd.DataFrame(my_dict)\n\n    for col in df.columns:\n        converted_col = pd.to_numeric(df[col], errors=\"coerce\")\n        if not converted_col.isnull().any():\n            df[col] = converted_col\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        json_str = '{\"a\": [1, 2, 3], \"b\": 4.9, \"c\": \"5\"}'\n        expected_output = pd.DataFrame(\n            {\"a\": [2, 4, 6], \"b\": [9.8, 9.8, 9.8], \"c\": [10, 10, 10]}\n        )\n        pd.testing.assert_frame_equal(task_func(json_str), expected_output, check_dtype=False)\n    def test_case_2(self):\n        json_str = \"{}\"\n        expected_output = pd.DataFrame()\n        pd.testing.assert_frame_equal(task_func(json_str), expected_output, check_dtype=False)\n    def test_case_3(self):\n        json_str = '{\"a\": [1, \"apple\", 3], \"b\": 4.9, \"c\": \"5\", \"d\": \"banana\"}'\n        expected_output = pd.DataFrame(\n            {\n                \"a\": [2, \"apple\", 6],\n                \"b\": [9.8, 9.8, 9.8],\n                \"c\": [10, 10, 10],\n                \"d\": [\"banana\", \"banana\", \"banana\"],\n            }\n        )\n        pd.testing.assert_frame_equal(task_func(json_str), expected_output, check_dtype=False)\n    def test_case_4(self):\n        json_str = '{\"a\": \"1\", \"b\": \"2.5\", \"c\": \"string\"}'\n        expected_output = pd.DataFrame({\"a\": [2], \"b\": [5.0], \"c\": [\"string\"]})\n        pd.testing.assert_frame_equal(task_func(json_str), expected_output, check_dtype=False)\n    def test_case_5(self):\n        json_str = '{\"a\": [1, 2, {\"b\": 3}], \"c\": 4.9}'\n        expected_output = pd.DataFrame({\"a\": [2, 4, {\"b\": 3}], \"c\": [9.8, 9.8, 9.8]})\n        pd.testing.assert_frame_equal(task_func(json_str), expected_output, check_dtype=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates 'n' random integer numbers such that their sum equals 'total', sorts these numbers, and determines the position where a new random number can be inserted to maintain the sorted order. The function uses a retry mechanism to ensure the generated numbers sum up to 'total'.\nThe function should output with:\n    tuple: A tuple containing the sorted numbers as an array and the insertion position for a new number.\nYou should write self-contained code starting with:\n```\nimport random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n```",
        "gt": "import random\nimport bisect\nfrom array import array\ndef task_func(n=10, total=100):\n    nums = []\n    while sum(nums) != total:\n        nums = [random.randint(0, total) for _ in range(n)]\n\n    nums.sort()\n    nums = array('i', nums)\n\n    new_num = random.randint(0, total)\n    pos = bisect.bisect(nums, new_num)\n\n    return (nums, pos)",
        "test": "import unittest\nfrom array import array\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        nums, pos = task_func(5, 50)\n        self.assertIsInstance(nums, array)\n        self.assertIsInstance(pos, int)\n    def test_correct_length(self):\n        nums, _ = task_func(5, 50)\n        self.assertEqual(len(nums), 5)\n    def test_sum_of_numbers(self):\n        nums, _ = task_func(5, 50)\n        self.assertEqual(sum(nums), 50)\n    def test_sorted_order(self):\n        nums, _ = task_func(5, 50)\n        self.assertEqual(list(nums), sorted(nums))\n    def test_insertion_position(self):\n        nums, pos = task_func(5, 50)\n        new_num = random.randint(0, 50)\n        nums.insert(pos, new_num)\n        self.assertEqual(nums[pos], new_num)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate and plot a performance trend for different teams from a given epoch timestamp to the current time. The performance data is generated by creating a series of random values for each day from the starting timestamp to the present day. Each team's performance is simulated as a random float between 0.1 and 1 for each day. The plot shows days since the start date on the x-axis and performance on the y-axis.\nThe function should output with:\n    dict: A dictionary containing performance data for each team, with days as indices and performance as float values.\n    matplotlib.figure.Figure: A figure object showing the performance trend of each team over the days.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(\n    epoch_milliseconds,\n    teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"],\n    random_seed=0,\n):\n```",
        "gt": "from datetime import datetime\nimport random\nimport matplotlib.pyplot as plt\ndef task_func(\n    epoch_milliseconds,\n    teams=[\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"],\n    random_seed=0,\n):\n\n    random.seed(random_seed)\n\n    if (not isinstance(teams, list)) or (not all(isinstance(t, str) for t in teams)):\n        raise TypeError(\"Expected teams to be list of str\")\n\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    current_time = datetime.now()\n    days_diff = (current_time - start_time).days\n\n    if days_diff < 0:\n        raise ValueError(\"Input epoch timestamp is in the future!\")\n\n    performance_data = {team: [0] * days_diff for team in teams}\n\n    for i in range(days_diff):\n        for team in teams:\n            performance = random.uniform(0.1, 1)\n            performance_data[team][i] += performance\n\n    fig, ax = plt.subplots()\n    for team, performance in performance_data.items():\n        ax.plot(range(days_diff), performance, label=team)\n\n    ax.set_xlabel(\"Days since \" + start_time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    ax.set_ylabel(\"Performance\")\n    ax.legend()\n\n    return performance_data, fig",
        "test": "import unittest\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.x = 1631295600000\n        self.default_valid_teams = [\"Team1\", \"Team2\", \"Team3\", \"Team4\", \"Team5\"]\n    def _check_valid_performance_data(self, performance_data, valid_teams):\n        self.assertIsInstance(performance_data, dict)\n        self.assertTrue(all(team in valid_teams for team in performance_data.keys()))\n        for team, performances in performance_data.items():\n            for performance in performances:\n                self.assertTrue(\n                    0.1 <= performance <= 1, f\"Performance out of range for {team}\"\n                )\n                self.assertIsInstance(performance, float)\n    def _check_plot(self, fig):\n        ax = fig.axes[0]\n        self.assertIsInstance(fig, plt.Figure)\n        self.assertEqual(ax.get_ylabel(), \"Performance\")\n        self.assertTrue(ax.get_xlabel().startswith(\"Days since\"))\n    def test_case_1(self):\n        # Test basic case with default parameters - data\n        performance_data, _ = task_func(self.x)\n        self._check_valid_performance_data(performance_data, self.default_valid_teams)\n    def test_case_2(self):\n        # Test basic case with default parameters - plot\n        _, fig = task_func(self.x)\n        self._check_plot(fig)\n    def test_case_3(self):\n        # Test basic case with custom input\n        performance_data, fig = task_func(1236472051807, random_seed=42)\n        self._check_plot(fig)\n        self._check_valid_performance_data(performance_data, self.default_valid_teams)\n    def test_case_4(self):\n        # Test custom parameters - custom teams\n        for custom_teams in [[\"A\", \"B\"], [\"c d e\", \"F\", \"GH\", \"ij kl\"]]:\n            performance_data, fig = task_func(self.x, teams=custom_teams, random_seed=42)\n            self._check_plot(fig)\n            self._check_valid_performance_data(performance_data, custom_teams)\n    def test_case_5(self):\n        # Test custom parameters - random seed\n        performance_data1, _ = task_func(self.x, random_seed=42)\n        performance_data2, _ = task_func(self.x, random_seed=42)\n        performance_data3, _ = task_func(self.x, random_seed=0)\n        self.assertEqual(performance_data1, performance_data2)\n        self.assertNotEqual(performance_data1, performance_data3)\n    def test_case_6(self):\n        # Test error handling for invalid input time\n        future_epoch = int((datetime.now() + timedelta(days=1)).timestamp() * 1000)\n        with self.assertRaises(ValueError):\n            task_func(future_epoch)\n    def test_case_7(self):\n        # Test error handling for invalid team\n        with self.assertRaises(TypeError):\n            task_func(self.x, [1, 2, 3])\n        with self.assertRaises(TypeError):\n            task_func(self.x, [[]])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process a pandas Series of text data by lowercasing all letters, removing non-alphanumeric characters (except spaces), removing punctuation, and stemming each word to its root form. Stemming is done using the NLTK's PorterStemmer, which applies a series of rules to find the stem of each word.\nThe function should output with:\n    pandas.Series: A Series where each string has been processed to remove non-alphanumeric characters,\n    punctuation, converted to lowercase, and where each word has been stemmed.\nYou should write self-contained code starting with:\n```\nimport re\nfrom nltk.stem import PorterStemmer\ndef task_func(text_series):\n```",
        "gt": "import re\nfrom nltk.stem import PorterStemmer\ndef task_func(text_series):\n    stemmer = PorterStemmer()\n\n    def process_text(text):\n        # Remove non-alphanumeric characters (except spaces)\n        text = re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()\n        # Stem each word in the text\n        text = \" \".join([stemmer.stem(word) for word in text.split()])\n\n        return text\n\n    # Apply the processing to each entry in the Series\n    return text_series.apply(process_text)",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \n    def test_lowercase_and_stemming(self):\n        \"\"\"\n        Test case to ensure that all text is converted to lowercase and words are stemmed properly.\n        \"\"\"\n        input_series = pd.Series([\"THIS IS A TEST.\", \"Test, case number 2!\"])\n        expected_output = pd.Series([\"thi is a test\", \"test case number 2\"])\n        processed_series = task_func(input_series)\n        pd.testing.assert_series_equal(processed_series, expected_output)\n    def test_numerics_and_special_characters(self):\n        \"\"\"\n        Test case to verify that numeric characters are retained and special characters are removed.\n        \"\"\"\n        input_series = pd.Series([\"Another Test 123.\", \"456 Anoth3r one!\"])\n        expected_output = pd.Series([\"anoth test 123\", \"456 anoth3r one\"])\n        processed_series = task_func(input_series)\n        pd.testing.assert_series_equal(processed_series, expected_output)\n    def test_empty_strings(self):\n        \"\"\"\n        Test case to check the function's handling of empty strings.\n        \"\"\"\n        input_series = pd.Series([\"\", \" \"])\n        expected_output = pd.Series([\"\", \"\"])\n        processed_series = task_func(input_series)\n        pd.testing.assert_series_equal(processed_series, expected_output)\n    def test_punctuation(self):\n        \"\"\"\n        Test case to check that punctuation is removed from the text.\n        \"\"\"\n        input_series = pd.Series([\"Punctuation! Should, be: removed; right?\"])\n        expected_output = pd.Series([\"punctuat should be remov right\"])\n        processed_series = task_func(input_series)\n        pd.testing.assert_series_equal(processed_series, expected_output)\n    def test_stemconsistency(self):\n        \"\"\"\n        Test case to ensure that stemming is consistent across different forms of words.\n        \"\"\"\n        input_series = pd.Series([\"Stemming should work on words like running\", \"stemmed works on stemmed\"])\n        expected_output = pd.Series([\"stem should work on word like run\", \"stem work on stem\"])\n        processed_series = task_func(input_series)\n        pd.testing.assert_series_equal(processed_series, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Performs a two-sample t-test on numerical data from two groups to determine if there is a significant difference in their means. The function handles NaN values, computes descriptive statistics for each group, and generates a boxplot and histograms for data visualization.\nNote that: The function sets the significance level (alpha) at 0.05. It removes NaN values before performing any calculations or plotting. A t-test is performed with the 'nan_policy' set to 'omit' to ignore NaNs. The function checks for sufficient non-NaN data points and adequate variance in each group before conducting the t-test. The boxplot and histograms provide a visual comparison of the data distributions.\nThe function should raise the exception for: ValueError: If either group is empty, contains only NaN values, has less than two non-NaN values, or if the variance in one or both groups is below a threshold (1e-8).\nThe function should output with:\n    dict: A dictionary containing:\n    'significant': Boolean. True if the means of the two groups are significantly different (p < 0.05).\n    'group1_stats': Dictionary with mean and standard deviation of 'group1' (excluding NaNs).\n    'group2_stats': Dictionary with mean and standard deviation of 'group2' (excluding NaNs).\n    'ax_boxplot': A matplotlib Axes object with a boxplot comparing 'group1' and 'group2'.\n    'ax_histogram': A matplotlib Axes object with histograms of 'group1' and 'group2'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n```",
        "gt": "import numpy as np\nfrom scipy.stats import ttest_ind\nimport matplotlib.pyplot as plt\ndef task_func(kwargs):\n    alpha = 0.05  # Define the significance level\n\n    group1 = np.array(kwargs.get(\"group1\", []))\n    group2 = np.array(kwargs.get(\"group2\", []))\n\n    # Check for empty or all-NaN groups\n    if (\n        len(group1) == 0\n        or len(group2) == 0\n        or np.all(np.isnan(group1))\n        or np.all(np.isnan(group2))\n    ):\n        raise ValueError(\"One or both groups are empty or contain only NaN values.\")\n\n    # Removing NaN values and ensuring sufficient data\n    valid_group1 = group1[~np.isnan(group1)]\n    valid_group2 = group2[~np.isnan(group2)]\n\n    # Check for sufficient size and variance\n    if len(valid_group1) < 2 or len(valid_group2) < 2:\n        raise ValueError(\"Each group must have at least two non-NaN values.\")\n\n    if np.var(valid_group1) < 1e-8 or np.var(valid_group2) < 1e-8:\n        raise ValueError(\"Variance in one or both groups is too low.\")\n\n    # Perform t-test\n    _, p_val = ttest_ind(valid_group1, valid_group2, nan_policy=\"omit\")\n\n    significant = p_val < alpha\n\n    # Calculate descriptive statistics\n    group1_stats = {\"mean\": np.mean(valid_group1), \"std\": np.std(valid_group1)}\n    group2_stats = {\"mean\": np.mean(valid_group2), \"std\": np.std(valid_group2)}\n\n    # Plotting\n    _, (ax_boxplot, ax_histogram) = plt.subplots(2, 1, figsize=(8, 12))\n\n    # Boxplot\n    ax_boxplot.boxplot([valid_group1, valid_group2], labels=[\"group1\", \"group2\"])\n\n    # Histogram\n    ax_histogram.hist(valid_group1, alpha=0.5, label=\"group1\")\n    ax_histogram.hist(valid_group2, alpha=0.5, label=\"group2\")\n    ax_histogram.legend()\n\n    return {\n        \"significant\": significant,\n        \"group1_stats\": group1_stats,\n        \"group2_stats\": group2_stats,\n        \"ax_boxplot\": ax_boxplot,\n        \"ax_histogram\": ax_histogram,\n    }",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function.\"\"\"\n    def test_different_means(self):\n        \"\"\"Test with groups having significantly different means.\"\"\"\n        data = {\"group1\": [1, 2, 3], \"group2\": [4, 5, 6]}\n        result = task_func(data)\n        self.assertTrue(result[\"significant\"])\n    def test_similar_means(self):\n        \"\"\"Test with groups having similar means.\"\"\"\n        data = {\"group1\": [1, 2, 3], \"group2\": [1, 2, 3]}\n        result = task_func(data)\n        self.assertFalse(result[\"significant\"])\n    def test_with_nan_values(self):\n        \"\"\"Test with groups containing NaN values but with at least two non-NaN values in each group.\"\"\"\n        data = {\"group1\": [np.nan, 2, 3], \"group2\": [1, np.nan, 3]}\n        result = task_func(data)\n        self.assertIsNotNone(result)\n    def test_empty_group(self):\n        \"\"\"Test with one of the groups being empty.\"\"\"\n        data = {\"group1\": [], \"group2\": [1, 2, 3]}\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_all_nan_values(self):\n        \"\"\"Test with groups containing only NaN values.\"\"\"\n        data = {\"group1\": [np.nan, np.nan], \"group2\": [np.nan, np.nan]}\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_insufficient_group_size(self):\n        \"\"\"Test with one of the groups having less than two non-NaN values.\"\"\"\n        data = {\"group1\": [1, np.nan], \"group2\": [2, 3, 4]}\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_low_variance(self):\n        \"\"\"Test with one of the groups having extremely low variance.\"\"\"\n        data = {\"group1\": [1.00000001, 1.00000002], \"group2\": [2, 3, 4]}\n        with self.assertRaises(ValueError):\n            task_func(data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a scatter plot for the specified columns from a pandas DataFrame and fits a linear regression model to the data.\nNote that: Notes: After plotting the scatterplot, this function overlays the predicted regression line on top in red on the same Axes.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object containing the scatter plot and the linear regression line.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, x_column, y_column):\n```",
        "gt": "import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, x_column, y_column):\n    X = df[x_column].values.reshape(-1, 1)\n    Y = df[y_column].values\n    reg = LinearRegression().fit(X, Y)\n    Y_pred = reg.predict(X)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, Y_pred, color=\"red\")\n\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    def helper_assert_line_correctness(self, ax, expected_slope, expected_intercept):\n        # Helper function to check if linear regression predictions are correct\n        tolerance = 1e-6\n        # Extract line data\n        line = ax.lines[0]\n        x_data, y_data = line.get_xdata(), line.get_ydata()\n        # Calculate slope and intercept of the line plot\n        calculated_slope = (y_data[-1] - y_data[0]) / (x_data[-1] - x_data[0])\n        calculated_intercept = y_data[0] - calculated_slope * x_data[0]\n        # Assert slope and intercept\n        self.assertAlmostEqual(\n            calculated_slope,\n            expected_slope,\n            delta=tolerance,\n            msg=\"Slope did not match expected value\",\n        )\n        self.assertAlmostEqual(\n            calculated_intercept,\n            expected_intercept,\n            delta=tolerance,\n            msg=\"Intercept did not match expected value\",\n        )\n    def test_plot_attributes(self):\n        # Basic case to test plot is correct\n        df = pd.DataFrame({\"X\": [1, 2, 3, 4], \"Y\": [1, 2, 3, 4]})\n        ax = task_func(df, \"X\", \"Y\")\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(len(ax.lines), 1)\n        self.assertEqual(len(ax.collections), 1)\n    def test_linear_positive_slope(self):\n        # Testing with a dataset that should produce a positive slope\n        df = pd.DataFrame({\"X\": [1, 2, 3, 4], \"Y\": [2, 4, 6, 8]})\n        ax = task_func(df, \"X\", \"Y\")\n        self.helper_assert_line_correctness(ax, expected_slope=2, expected_intercept=0)\n    def test_linear_negative_slope(self):\n        # Testing with a dataset that should produce a negative slope\n        df = pd.DataFrame({\"X\": [1, 2, 3, 4], \"Y\": [8, 6, 4, 2]})\n        ax = task_func(df, \"X\", \"Y\")\n        self.helper_assert_line_correctness(\n            ax, expected_slope=-2, expected_intercept=10\n        )\n    def test_linear_zero_slope(self):\n        # Testing with a dataset that should produce a zero slope\n        df = pd.DataFrame({\"X\": [1, 2, 3, 4], \"Y\": [5, 5, 5, 5]})\n        ax = task_func(df, \"X\", \"Y\")\n        self.helper_assert_line_correctness(ax, expected_slope=0, expected_intercept=5)\n    def test_single_data_point(self):\n        # Testing with a DataFrame having a single data point\n        df = pd.DataFrame({\"X\": [1], \"Y\": [1]})\n        ax = task_func(df, \"X\", \"Y\")\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(len(ax.lines), 1)\n        self.assertEqual(len(ax.collections), 1)\n    def test_missing_values(self):\n        # Testing with missing values in the DataFrame\n        df = pd.DataFrame({\"X\": [1, 2, np.nan, 4], \"Y\": [1, np.nan, 3, 4]})\n        with self.assertRaises(ValueError):\n            task_func(df, \"X\", \"Y\")\n    def test_with_categorical_data(self):\n        # Testing with categorical data to ensure it fails\n        df = pd.DataFrame({\"X\": [\"a\", \"b\", \"c\"], \"Y\": [\"d\", \"e\", \"f\"]})\n        with self.assertRaises(ValueError):\n            task_func(df, \"X\", \"Y\")\n    def test_incorrect_column_names(self):\n        # Testing with incorrect column names\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        with self.assertRaises(KeyError):\n            task_func(df, \"X\", \"Y\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Moves a random file from the source directory to the specified destination directory.\nThe function should output with:\n    str: The name of the file moved. Format: 'filename.extension' (e.g., 'file1.txt').\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n```",
        "gt": "import os\nimport shutil\nimport random\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    # Setting the seed for reproducibility\n    random.seed(seed)\n    # Constants\n    files = os.listdir(src_dir)\n    if len(files) == 0:\n        raise FileNotFoundError(f\"No files found in {src_dir}\")\n\n    # Selecting a random file\n    file_name = random.choice(files)\n    \n    # Creating the source and destination paths\n    src_file = os.path.join(src_dir, file_name)\n    dest_file = os.path.join(dest_dir, file_name)\n\n    # Moving the file\n    shutil.move(src_file, dest_file)\n\n    # Returning the name of the moved file\n    return file_name",
        "test": "import unittest\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.base_temp_dir = tempfile.mkdtemp()\n        self.base_test_dir = f\"{self.base_temp_dir}/test\"\n        if os.path.exists(self.base_test_dir):\n            shutil.rmtree(self.base_test_dir)\n        os.makedirs(self.base_test_dir, exist_ok=True)\n        self.test_dirs = {\n            f\"{self.base_test_dir}/src_test_dir_1\": [f\"file{i}.txt\" for i in range(1, 6)],\n            f\"{self.base_test_dir}/src_test_dir_2\": [f\"file{i}.txt\" for i in range(6, 11)],\n            f\"{self.base_test_dir}/src_test_dir_3\": [],\n            f\"{self.base_test_dir}/src_test_dir_4\": [f\"file{i}.txt\" for i in range(11, 16)],\n            f\"{self.base_test_dir}/src_test_dir_5\": [f\"file{i}.txt\" for i in range(16, 21)],\n        }\n        self.dest_dirs = {\n            f\"{self.base_test_dir}/dest_test_dir_1\": [],\n            f\"{self.base_test_dir}/dest_test_dir_2\": [],\n            f\"{self.base_test_dir}/dest_test_dir_3\": [],\n            f\"{self.base_test_dir}/dest_test_dir_4\": [],\n            f\"{self.base_test_dir}/dest_test_dir_5\": [],\n        }\n        # Create the test directories and files\n        for dir_name, files in self.test_dirs.items():\n            os.makedirs(dir_name, exist_ok=True)\n            for file_name in files:\n                with open(os.path.join(dir_name, file_name), 'w') as file:\n                    file.write(f\"This is content for {file_name}\")\n        for dir_name in self.dest_dirs.keys():\n            os.makedirs(dir_name, exist_ok=True)\n    def tearDown(self):\n        if os.path.exists(self.base_test_dir):\n            shutil.rmtree(self.base_test_dir)\n    def test_case_1(self):\n        moved_file = task_func(\n            f'{self.base_test_dir}/src_test_dir_1', \n            f'{self.base_test_dir}/dest_test_dir_1', \n            seed=1\n        )\n        self.assertIn(moved_file, self.test_dirs[f'{self.base_test_dir}/src_test_dir_1'])\n        self.assertTrue(os.path.exists(os.path.join(f'{self.base_test_dir}/dest_test_dir_1', moved_file)))\n        # Test the name of the moved file\n        self.assertTrue(moved_file.endswith('.txt'))\n    def test_case_2(self):\n        moved_file = task_func(f'{self.base_test_dir}/src_test_dir_2', f'{self.base_test_dir}/dest_test_dir_2')\n        self.assertIn(moved_file, self.test_dirs[f'{self.base_test_dir}/src_test_dir_2'])\n        self.assertTrue(os.path.exists(os.path.join(f'{self.base_test_dir}/dest_test_dir_2', moved_file)))\n    def test_case_3(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(f'{self.base_test_dir}/src_test_dir_3', f'{self.base_test_dir}/dest_test_dir_3')\n    def test_case_4(self):\n        moved_file = task_func(\n            f'{self.base_test_dir}/src_test_dir_4', \n            f'{self.base_test_dir}/dest_test_dir_4', \n            seed=2\n        )\n        self.assertIn(moved_file, self.test_dirs[f'{self.base_test_dir}/src_test_dir_4'])\n        self.assertTrue(os.path.exists(os.path.join(f'{self.base_test_dir}/dest_test_dir_4', moved_file)))\n        # Test the name of the moved file\n        self.assertTrue(moved_file.endswith('.txt'))\n    def test_case_5(self):\n        moved_file = task_func(f'{self.base_test_dir}/src_test_dir_5', f'{self.base_test_dir}/dest_test_dir_5')\n        self.assertIn(moved_file, self.test_dirs[f'{self.base_test_dir}/src_test_dir_5'])\n        self.assertTrue(os.path.exists(os.path.join(f'{self.base_test_dir}/dest_test_dir_5', moved_file)))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scans a directory for CSV files, finds for each file the index of the row with the first cell equal to the target value, and optionally moves the processed files to another directory. The above example assumes that '332' is found at index 10 in 'file1.csv' and index 15 in 'file2.csv' and that the file moving is simulated.\nThe function should output with:\n    result (dict): A dictionary with file names as keys and the row indices as values where the target value was found.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n```",
        "gt": "import os\nimport shutil\nimport csv\ndef task_func(target_value='332', csv_dir='./csv_files/', processed_dir='./processed_files/', simulate=False):\n    result = {}\n\n    # Scan the CSV files in the directory\n    for filename in os.listdir(csv_dir):\n        if filename.endswith('.csv'):\n            with open(os.path.join(csv_dir, filename), 'r') as f:\n                reader = csv.reader(f)\n                for i, row in enumerate(reader):\n                    if row[0] == target_value:\n                        result[filename] = i\n                        break\n\n            # Move the file to the processed directory if not simulating\n            if not simulate:\n                shutil.move(os.path.join(csv_dir, filename), processed_dir)\n    \n    return result",
        "test": "import unittest\nfrom unittest.mock import patch\nimport tempfile\nimport shutil\nimport os\nfrom unittest.mock import mock_open, patch, MagicMock\nimport csv\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Common setup for all tests\n        self.target_value = '332'\n        self.csv_dir = '/fake/csv_files/'\n        self.processed_dir = '/fake/processed_files/'\n        self.simulate = True\n    @patch('os.listdir', return_value=['file_with_target.csv'])\n    @patch('builtins.open', new_callable=mock_open, read_data=\"332,Data\\n333,More Data\\n\")\n    @patch('shutil.move')\n    def test_file_with_target(self, mock_move, mock_open, mock_listdir):\n        \"\"\" Test case for files with the target value. \"\"\"\n        result = task_func(target_value=self.target_value, csv_dir=self.csv_dir,\n                       processed_dir=self.processed_dir, simulate=self.simulate)\n        self.assertIn('file_with_target.csv', result)\n        self.assertEqual(result['file_with_target.csv'], 0)\n        mock_move.assert_not_called()\n    @patch('os.listdir', return_value=['file_without_target.csv'])\n    @patch('builtins.open', new_callable=mock_open, read_data=\"334,Data\\n335,More Data\\n\")\n    @patch('shutil.move')\n    def test_file_without_target(self, mock_move, mock_open, mock_listdir):\n        \"\"\" Test case for files without the target value. \"\"\"\n        result = task_func(target_value=self.target_value, csv_dir=self.csv_dir,\n                       processed_dir=self.processed_dir, simulate=self.simulate)\n        self.assertNotIn('file_without_target.csv', result)\n        mock_move.assert_not_called()\n    @patch('os.listdir', return_value=['empty_file.csv'])\n    @patch('builtins.open', new_callable=mock_open, read_data=\"\")\n    @patch('shutil.move')\n    def test_empty_file(self, mock_move, mock_open, mock_listdir):\n        \"\"\" Test case for an empty CSV file. \"\"\"\n        result = task_func(target_value=self.target_value, csv_dir=self.csv_dir,\n                       processed_dir=self.processed_dir, simulate=self.simulate)\n        self.assertNotIn('empty_file.csv', result)\n        mock_move.assert_not_called()\n    @patch('os.listdir', return_value=['file_with_multiple_targets.csv'])\n    @patch('builtins.open', new_callable=mock_open, read_data=\"332,Data\\n332,More Data\\n333,Other Data\\n\")\n    @patch('shutil.move')\n    def test_file_with_multiple_targets(self, mock_move, mock_open, mock_listdir):\n        \"\"\" Test case for files with multiple occurrences of the target value. \"\"\"\n        result = task_func(target_value=self.target_value, csv_dir=self.csv_dir,\n                       processed_dir=self.processed_dir, simulate=self.simulate)\n        self.assertIn('file_with_multiple_targets.csv', result)\n        self.assertEqual(result['file_with_multiple_targets.csv'], 0)\n        mock_move.assert_not_called()\n    @patch('os.listdir', return_value=['file_with_target_not_first.csv'])\n    @patch('builtins.open', new_callable=mock_open, read_data=\"333,Data\\n334,332\\n335,Data\\n\")\n    @patch('shutil.move')\n    def test_file_with_target_not_first(self, mock_move, mock_open, mock_listdir):\n        \"\"\" Test case for a file where the target value is not in the first cell. \"\"\"\n        result = task_func(target_value='332', csv_dir=self.csv_dir,\n                    processed_dir=self.processed_dir, simulate=self.simulate)\n        # This file should not be in the results because '332' is not in the first cell\n        self.assertNotIn('file_with_target_not_first.csv', result)\n        mock_move.assert_not_called()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compresses a given NumPy array using gzip compression and returns the compressed data. This method takes a NumPy array as input, compresses it using gzip, and returns the compressed data as bytes. It is useful for efficiently handling large datasets, especially when saving space is a concern. The function utilizes the struct module to pack the array elements into bytes before compressing them. The compressed data can then be used for storage or transmission purposes where space efficiency is crucial.\nThe function should output with:\n    bytes: The gzipped data of the NumPy array.\nYou should write self-contained code starting with:\n```\nimport struct\nimport io\nimport gzip\ndef task_func(newArray):\n```",
        "gt": "import struct\nimport io\nimport gzip\ndef task_func(newArray):\n    buffer = io.BytesIO()\n\n    with gzip.GzipFile(fileobj=buffer, mode='w') as f:\n        f.write(struct.pack('d'*newArray.size, *newArray))\n\n    return buffer.getvalue()",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test that the function returns bytes.\"\"\"\n        result = task_func(np.array([1, 2, 3]))\n        self.assertIsInstance(result, bytes)\n    def test_gzipped_data_size(self):\n        \"\"\"Test the size of the gzipped data is greater than 0.\"\"\"\n        data = task_func(np.array([1, 2, 3]))\n        self.assertGreater(len(data), 0)\n    def test_with_different_array_sizes(self):\n        \"\"\"Ensure larger arrays produce gzipped data of greater or equal size compared to smaller arrays.\"\"\"\n        small_array = task_func(np.array([1]))\n        larger_array = task_func(np.array(range(100)))\n        self.assertGreaterEqual(len(larger_array), len(small_array))\n    def test_with_different_array_types(self):\n        \"\"\"Compare gzipped sizes of int and float arrays to acknowledge compression differences.\"\"\"\n        int_array = task_func(np.array([1, 2, 3], dtype=int))\n        float_array = task_func(np.array([1.0, 2.0, 3.0], dtype=float))\n        # Acknowledge that the compression might affect differently due to data representation\n        # Therefore, not asserting equality of lengths but rather that they are compressed without error\n        self.assertTrue(len(int_array) > 0 and len(float_array) > 0)\n    def test_compression_efficiency(self):\n        \"\"\"Test that repeated elements in an array compress to a smaller size than unique elements.\"\"\"\n        repeated_elements = task_func(np.array([1]*100))\n        unique_elements = task_func(np.array(range(100)))\n        self.assertLess(len(repeated_elements), len(unique_elements))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a time series from a given epoch start time to end time with a specified step and trend. The time series is plotted with timestamps on the x-axis ('Time') and values on the y-axis ('Value'). The values are generated from a normal distribution, and a linear trend is added based on the provided trend value.\nThe function should output with:\n    ax (matplotlib.pyplot.Axes): The Axes object of the generated plot, with the x-axis labeled 'Time' and y-axis labeled 'Value'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, trend, seed=42):\n```",
        "gt": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\ndef task_func(start_time, end_time, step, trend, seed=42):\n    if (start_time - end_time) > 0:\n        raise ValueError(\"Start time must be before end time\")\n    if step <= 0:\n        raise ValueError(\"Invalid step value.\")\n    np.random.seed(seed)\n\n    timestamps = np.arange(start_time, end_time, step)\n    df = pd.DataFrame(columns=[\"Time\", \"Value\"])\n    values = np.random.normal(size=len(timestamps))\n\n    for i, ts in enumerate(timestamps):\n        dt = datetime.fromtimestamp(ts / 1000).strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n        value = values[i] + trend * i\n        df.loc[i] = [dt, value]\n\n    ax = df.plot(x=\"Time\", y=\"Value\")\n    ax.set_ylabel(\"Value\")\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.default_start = 0\n        self.default_end = 10000\n        self.default_step = 100\n        self.default_trend = 0.001\n        self.default_seed = 42\n    def test_case_1(self):\n        ax = task_func(\n            self.default_start, self.default_end, self.default_step, self.default_trend\n        )\n        self.assertIsInstance(ax, plt.Axes, \"Returned object is not an Axes instance.\")\n        self.assertEqual(ax.get_xlabel(), \"Time\", \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), \"Value\", \"Y-axis label is incorrect.\")\n    def test_case_2(self):\n        # Test with different seed for reproducibility\n        ax1 = task_func(\n            self.default_start,\n            self.default_end,\n            self.default_step,\n            self.default_trend,\n            seed=self.default_seed,\n        )\n        ax2 = task_func(\n            self.default_start,\n            self.default_end,\n            self.default_step,\n            self.default_trend,\n            seed=self.default_seed,\n        )\n        self.assertTrue(\n            np.array_equal(ax1.lines[0].get_ydata(), ax2.lines[0].get_ydata()),\n            \"Data is not reproducible with the same seed.\",\n        )\n    def test_case_3(self):\n        # Test with different seeds to ensure different results\n        ax1 = task_func(\n            self.default_start,\n            self.default_end,\n            self.default_step,\n            self.default_trend,\n            seed=self.default_seed,\n        )\n        ax2 = task_func(\n            self.default_start,\n            self.default_end,\n            self.default_step,\n            self.default_trend,\n            seed=self.default_seed + 10,\n        )\n        self.assertFalse(\n            np.array_equal(ax1.lines[0].get_ydata(), ax2.lines[0].get_ydata()),\n            \"Data is the same with different seeds.\",\n        )\n    def test_case_4(self):\n        # Test negative trend\n        ax = task_func(self.default_start, self.default_end, self.default_step, -0.001)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_5(self):\n        # Test no trend\n        ax = task_func(self.default_start, self.default_end, self.default_step, 0.0)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_6(self):\n        # Test when start time is greater than end time\n        with self.assertRaises(Exception):\n            task_func(10000, 0, self.default_step, self.default_trend)\n    def test_case_7(self):\n        # Function should fail when step is 0\n        with self.assertRaises(Exception):\n            task_func(self.default_start, self.default_end, 0, self.default_trend)\n    def test_case_8(self):\n        # Test time formatting\n        ax = task_func(0, 1000, 100, 0.001)\n        # Manually check one of the labels for correct formatting\n        self.assertTrue(\n            any([\"1970\" in label.get_text() for label in ax.get_xticklabels()])\n        )\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a word cloud from text after removing URLs and plot it.\nThe function should raise the exception for: ValueError(\"No words available to generate a word cloud after removing URLs.\"): If there are no words available to generate a word cloud after removing URLs.\nThe function should output with:\n    WordCloud object: The generated word cloud.\nYou should write self-contained code starting with:\n```\nimport re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n```",
        "gt": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef task_func(text):\n    # Remove URLs\n    text = re.sub(r\"http[s]?://\\S+\", \"\", text)\n    if not text.strip():  # Check if text is not empty after URL removal\n        raise ValueError(\n            \"No words available to generate a word cloud after removing URLs.\"\n        )\n    # Generate word cloud\n    wordcloud = WordCloud().generate(text)\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")  # Do not show axis to make it visually appealing\n    return wordcloud",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        text = (\n            f\"Visit https://www.example1.com for more info. This is the first sentence.\"\n        )\n        result = task_func(text)\n        self.assertIsInstance(result, WordCloud)\n        self.assertNotIn(\"https://www.example1.com\", result.words_)\n    def test_case_2(self):\n        text = f\"Check out this link: https://www.example2.com. This is the second sentence.\"\n        result = task_func(text)\n        self.assertIsInstance(result, WordCloud)\n        self.assertNotIn(\"https://www.example2.com\", result.words_)\n    def test_case_3(self):\n        text = \"There is no url in this sentence.\"\n        result = task_func(text)\n        self.assertIsInstance(result, WordCloud)\n    def test_case_4(self):\n        text = \"https://www.example4.com\"\n        with self.assertRaises(ValueError) as context:\n            task_func(text)\n        self.assertEqual(\n            str(context.exception),\n            \"No words available to generate a word cloud after removing URLs.\",\n        )\n    def test_case_5(self):\n        text = f\"Check https://www.example51.com and also visit https://www.example52.com for more details. This is the fifth sentence.\"\n        result = task_func(text)\n        self.assertIsInstance(result, WordCloud)\n        self.assertNotIn(\"https://www.example51.com\", result.words_)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Monitors and logs CPU usage at specified intervals over a given duration.\nNote that: Actual run time of the function may slightly exceed the specified 'duration' due to processing time and system response delay. The function records the CPU usage percentage at regular intervals for a specified duration. The data is captured every 'interval' seconds until the 'duration' is reached or exceeded. Each record includes a timestamp and the CPU usage percentage at that moment. The data is saved in JSON format in a log file named 'logfile.log'. The function supports different commands for CPU usage monitoring on Windows and Unix/Linux platforms.\nThe function should raise the exception for: ValueError: If either 'interval' or 'duration' is less than or equal to zero.\nThe function should output with:\n    str: Path to the log file where CPU usage data is saved. Returns None if an IOError occurs during file operations.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n```",
        "gt": "import subprocess\nimport time\nimport json\nimport platform\nLOGFILE_PATH = \"logfile.log\"\ndef task_func(interval, duration):\n    if interval <= 0 or duration <= 0:\n        raise ValueError(\"Interval and duration must be greater than zero.\")\n\n    start_time = time.time()\n    try:\n        with open(LOGFILE_PATH, \"w\", encoding=\"utf-8\") as logfile:\n            while time.time() - start_time <= duration:\n                operation_start_time = time.time()\n\n                # Check the operating system\n                if platform.system() == \"Windows\":\n                    # Windows command for CPU usage\n                    command = [\n                        \"typeperf\",\n                        \"\\\\Processor(_Total)\\\\% Processor Time\",\n                        \"-sc\",\n                        \"1\",\n                    ]\n                else:\n                    # Unix/Linux command for CPU usage\n                    command = [\"top\", \"-b\", \"-n1\"]\n\n                output = subprocess.check_output(command)\n                cpu_usage_line = (\n                    output.decode(\"utf-8\").split(\"\\n\")[2]\n                    if platform.system() == \"Windows\"\n                    else output.decode(\"utf-8\").split(\"\\n\")[2]\n                )\n                cpu_usage = (\n                    cpu_usage_line.split(\",\")[-1].strip().replace('\"', \"\")\n                    if platform.system() == \"Windows\"\n                    else cpu_usage_line.split(\":\")[1].split(\",\")[0].strip()\n                )\n\n                log_data = {\"timestamp\": time.time(), \"cpu_usage\": cpu_usage}\n                json.dump(log_data, logfile)\n                logfile.write(\"\\n\")\n\n                # Adjust sleep time\n                sleep_time = max(0, interval - (time.time() - operation_start_time))\n                time.sleep(sleep_time)\n    except IOError as e:\n        print(f\"Error writing to file {LOGFILE_PATH}: {e}\")\n        return None\n\n    return LOGFILE_PATH",
        "test": "import unittest\nimport os\nimport json\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def setUp(self):\n        \"\"\"\n        Setup before each test case.\n        \"\"\"\n        self.logfile_path = \"logfile.log\"\n    def tearDown(self):\n        \"\"\"\n        Cleanup after each test case.\n        \"\"\"\n        if os.path.exists(self.logfile_path):\n            os.remove(self.logfile_path)\n    @patch(\"time.time\")\n    def test_normal_operation(self, mock_time):\n        \"\"\"\n        Test the normal operation of the function.\n        It should create a log file with the expected content.\n        \"\"\"\n        # Create an iterator that starts at 0 and increments by 5 every time it's called\n        time_iter = iter(range(0, 100, 5))\n        mock_time.side_effect = lambda: next(time_iter)\n        result = task_func(5, 25)\n        self.assertEqual(result, self.logfile_path)\n        self.assertTrue(os.path.exists(self.logfile_path))\n    def test_invalid_interval(self):\n        \"\"\"\n        Test the function with an invalid interval value (less than or equal to zero).\n        It should raise a ValueError.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            task_func(-1, 10)\n    def test_invalid_duration(self):\n        \"\"\"\n        Test the function with an invalid duration value (less than or equal to zero).\n        It should raise a ValueError.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            task_func(5, -10)\n    @patch(\"subprocess.check_output\")\n    @patch(\"time.time\")\n    @patch(\"platform.system\")\n    def test_subprocess_output_handling_windows(\n        self, mock_platform, mock_time, mock_subprocess\n    ):\n        \"\"\"\n        Test handling of subprocess output on Windows.\n        It should correctly parse the CPU usage from the subprocess output.\n        \"\"\"\n        mock_platform.return_value = \"Windows\"\n        mock_time.side_effect = iter(range(0, 100, 5))\n        mock_output = b'\"\\\\Processor(_Total)\\\\% Processor Time\",\"5.0\"\\n\\n\"2023-04-01 12:34:56.789\",\"5.0\"\\n'\n        mock_subprocess.return_value = mock_output\n        result = task_func(5, 10)\n        self.assertEqual(result, self.logfile_path)\n    @patch(\"subprocess.check_output\")\n    @patch(\"time.time\")\n    @patch(\"platform.system\")\n    def test_subprocess_output_handling_linux(\n        self, mock_platform, mock_time, mock_subprocess\n    ):\n        \"\"\"\n        Test handling of subprocess output on Linux.\n        It should correctly parse the CPU usage from the subprocess output.\n        \"\"\"\n        mock_platform.return_value = \"Linux\"\n        mock_time.side_effect = iter(range(0, 100, 5))\n        mock_output = b\"Linux 4.15.0-54-generic (ubuntu) \\nTasks: 195 total...\\n%Cpu(s):  5.0 us,  2.0 sy,  0.0 ni, 92.0 id,  0.0 wa,  0.0 hi,  1.0 si,  0.0 st\\n\"\n        mock_subprocess.return_value = mock_output\n        result = task_func(5, 10)\n        self.assertEqual(result, self.logfile_path)\n    @patch(\"builtins.open\", side_effect=IOError(\"Mocked error\"))\n    def test_io_error_handling(self, mock_open):\n        \"\"\"\n        Test the function's behavior when an IOError occurs during file operations.\n        It should handle the error and return None.\n        \"\"\"\n        result = task_func(5, 10)\n        self.assertIsNone(result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Computes the MD5 hash of each file's content in the specified `source_dir`, prepends the hash along with a prefix to the original content, and writes the modified content to new files in the `target_dir`. Existing files with the same name in `target_dir` are overwritten.\nThe function should raise the exception for: FileNotFoundError if the source directory does not exist.\nThe function should output with:\n    list: A list of paths to the newly created files in the `target_dir`, each with the hash prepended.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n```",
        "gt": "import os\nimport glob\nimport hashlib\ndef task_func(source_dir, target_dir, prefix='#Hash: '):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    \n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    new_files = []\n    for file_path in glob.glob(os.path.join(source_dir, '*')):\n        with open(file_path, 'r') as infile:\n            content = infile.read()\n        \n        hash_object = hashlib.md5(content.encode())\n        new_file_path = os.path.join(target_dir, os.path.basename(file_path))\n        \n        with open(new_file_path, 'w') as outfile:\n            outfile.write(f\"{prefix}{hash_object.hexdigest()}\\n{content}\")\n        \n        new_files.append(new_file_path)\n    \n    return new_files",
        "test": "import unittest\nimport os\nimport shutil\nimport tempfile\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create temporary directories for source and target\n        self.source_dir = tempfile.mkdtemp()\n        self.target_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Clean up the directories after tests\n        shutil.rmtree(self.source_dir)\n        shutil.rmtree(self.target_dir)\n    def test_default_directories_and_prefix(self):\n        # Create some sample files in source_dir\n        sample_files = ['file1.txt', 'file2.txt', 'file3.txt']\n        for file_name in sample_files:\n            with open(os.path.join(self.source_dir, file_name), 'w') as f:\n                f.write(\"Sample content for \" + file_name)\n        \n        result = task_func(source_dir=self.source_dir, target_dir=self.target_dir)\n        expected_files = [os.path.join(self.target_dir, file_name) for file_name in sample_files]\n        self.assertListEqual(sorted(result), sorted(expected_files))\n        for file in expected_files:\n            with open(file, 'r') as f:\n                lines = f.readlines()\n                self.assertTrue(lines[0].startswith('#Hash: '))\n                self.assertIn(\"Sample content for\", ''.join(lines[1:]))\n    def test_custom_prefix(self):\n        # Testing with a custom prefix\n        custom_prefix = \"MD5Hash: \"\n        with open(os.path.join(self.source_dir, \"file.txt\"), 'w') as f:\n            f.write(\"Sample content\")\n        \n        result = task_func(source_dir=self.source_dir, target_dir=self.target_dir, prefix=custom_prefix)\n        for file in result:\n            with open(file, 'r') as f:\n                lines = f.readlines()\n                self.assertTrue(lines[0].startswith(custom_prefix))\n    def test_empty_directory(self):\n        # Testing with an empty source directory\n        result = task_func(source_dir=self.source_dir, target_dir=self.target_dir)\n        self.assertEqual(result, [])\n    def test_non_existing_source_directory(self):\n        # Using a non-existing source directory should raise FileNotFoundError\n        non_existing_dir = \"/path/to/nonexistent/dir\"\n        with self.assertRaises(FileNotFoundError):\n            task_func(source_dir=non_existing_dir, target_dir=self.target_dir)\n    def test_overwriting_existing_files(self):\n        # Overwriting existing files in the target directory\n        file_path = os.path.join(self.target_dir, \"file1.txt\")\n        with open(file_path, 'w') as f:\n            f.write(\"Initial content.\")\n        \n        with open(os.path.join(self.source_dir, \"file1.txt\"), 'w') as f:\n            f.write(\"New content.\")\n        \n        task_func(source_dir=self.source_dir, target_dir=self.target_dir)\n        with open(file_path, 'r') as f:\n            self.assertNotEqual(f.read(), \"Initial content.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process files from a dictionary by checking if the file exists, and if it has content, then copies it to a target directory.\nThe function should output with:\n    copied_files (list): A list of full file paths that were copied.\nYou should write self-contained code starting with:\n```\nimport os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n```",
        "gt": "import os\nfrom pathlib import Path\nimport shutil\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    # Check if the target directory exists, if not create it\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    copied_files = []\n\n    for file, content in kwargs.items():\n        if content is not None and os.path.isfile(file):\n            target_file = Path(target_dir) / Path(file).name\n            shutil.copyfile(file, target_file)\n            copied_files.append(str(target_file))\n\n    return copied_files",
        "test": "import os\nimport shutil\nimport unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'test_dir'\n        self.target_dir = 'target_dir'\n        os.makedirs(self.test_dir, exist_ok=True)\n        os.makedirs(self.target_dir, exist_ok=True)\n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n        shutil.rmtree(self.target_dir)\n    def test_files_with_content(self):\n        test_files = {'file1.txt': 'Hello', 'file2.txt': 'World'}\n        for file, content in test_files.items():\n            with open(os.path.join(self.test_dir, file), 'w') as f:\n                f.write(content)\n        \n        full_paths = {os.path.join(self.test_dir, k): v for k, v in test_files.items()}\n        copied_files = task_func(full_paths, self.target_dir)\n        \n        self.assertEqual(len(copied_files), 2)\n        for copied in copied_files:\n            self.assertTrue(os.path.isfile(copied))\n            self.assertTrue(copied.startswith(self.target_dir))\n    def test_files_with_no_content(self):\n        test_files = {'file1.txt': 'Hello', 'file2.txt': None}\n        for file, content in test_files.items():\n            with open(os.path.join(self.test_dir, file), 'w') as f:\n                if content:\n                    f.write(content)\n        full_paths = {os.path.join(self.test_dir, k): v for k, v in test_files.items()}\n        copied_files = task_func(full_paths, self.target_dir)\n        self.assertEqual(len(copied_files), 1)\n        self.assertTrue(os.path.isfile(copied_files[0]))\n        self.assertTrue(copied_files[0].startswith(self.target_dir))\n    def test_files_do_not_exist(self):\n        test_files = {'file1.txt': 'Hello', 'file2.txt': 'World'}\n        full_paths = {os.path.join(self.test_dir, k): v for k, v in test_files.items()}\n        copied_files = task_func(full_paths, self.target_dir)\n        self.assertEqual(len(copied_files), 0)\n    def test_mixed_case(self):\n        test_files = {'file1.txt': 'Hello', 'file2.txt': None, 'file3.txt': 'World'}\n        for file, content in test_files.items():\n            with open(os.path.join(self.test_dir, file), 'w') as f:\n                if content:\n                    f.write(content)\n        full_paths = {os.path.join(self.test_dir, k): v for k, v in test_files.items()}\n        copied_files = task_func(full_paths, self.target_dir)\n        self.assertEqual(len(copied_files), 2)\n        for copied in copied_files:\n            self.assertTrue(os.path.isfile(copied))\n            self.assertTrue(copied.startswith(self.target_dir))\n    def test_empty_dict(self):\n        copied_files = task_func({}, self.target_dir)\n        self.assertEqual(len(copied_files), 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a pie chart of the status distribution from a pandas DataFrame with a 'Status' column and returns the plot object. The 'Status' column in the DataFrame is expected to contain categorical data with possible values like 'Pending', 'In Progress', 'Completed', 'Cancelled'.\nThe function should raise the exception for: ValueError: If 'df' is not a pandas DataFrame or does not contain the 'Status' column.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object with the pie chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError(\"Input must be a pandas DataFrame with a 'Status' column.\")\n\n    status_counts = df['Status'].value_counts()\n    fig, ax = plt.subplots()\n    ax.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%')\n    ax.set_title('Status Distribution')\n\n    return ax",
        "test": "import unittest\nfrom random import choice\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        random.seed(42)\n        self.df = pd.DataFrame({'Status': [choice(['Pending', 'In Progress', 'Completed', 'Cancelled']) for _ in range(100)]})\n    \n    def test_return_value(self):\n        ax = task_func(self.df)\n        # Assuming 'ax' is the Axes object returned by your function 'task_func'\n        # Retrieve the pie chart wedges and texts\n        wedges, texts, autotexts = ax.patches, ax.texts, ax.texts[1::2]\n        # Extract the labels and percentages\n        labels = [text.get_text() for text in texts\n                  ]\n        status_dict = {labels[i]: labels[i + 1] for i in range(0, len(labels), 2)}\n        expect = {'In Progress': '29.0%', 'Pending': '27.0%', 'Completed': '24.0%', 'Cancelled': '20.0%'}\n        self.assertEqual(status_dict, expect, \"contents should match the expected output\")\n    def test_return_type(self):\n        ax = task_func(self.df)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame({'A': [1, 2], 'B': [3, 4]}))\n    def test_plot_title(self):\n        ax = task_func(self.df)\n        self.assertEqual(ax.get_title(), 'Status Distribution')\n    def test_pie_labels(self):\n        ax = task_func(self.df)\n        labels = [text.get_text() for text in ax.texts]\n        for status in ['Pending', 'In Progress', 'Completed', 'Cancelled']:\n            self.assertIn(status, labels)\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save a Pandas DataFrame to a CSV file in a specified directory. This function takes a Pandas DataFrame and a filename as input and saves the DataFrame to a CSV file. The CSV file will be saved in the 'data' directory relative to the parent directory of this script.\nThe function should output with:\n    str: The absolute path of the saved CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n```",
        "gt": "import csv\nimport os\nOUTPUT_DIR = './output'\ndef task_func(df, filename, output_dir=OUTPUT_DIR):\n    # Ensure the data directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, filename)\n    df.to_csv(file_path, index=False, quoting=csv.QUOTE_NONNUMERIC)\n    return os.path.abspath(file_path)",
        "test": "import unittest\nimport shutil\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Create the data directory if it doesn't exist.\"\"\"\n        if not os.path.exists(OUTPUT_DIR):\n            os.makedirs(OUTPUT_DIR)\n    def tearDown(self):\n        \"\"\"Clean up by removing files created during tests (if any).\"\"\"\n        shutil.rmtree(OUTPUT_DIR, ignore_errors=True)\n    def test_basic_dataframe(self):\n        \"\"\"Test saving a simple DataFrame.\"\"\"\n        df = pd.DataFrame({'A': [1, 2], 'B': ['x', 'y']})\n        expected_path = os.path.join(OUTPUT_DIR, 'basic.csv')\n        result_path = task_func(df, 'basic.csv')\n        self.assertEqual(expected_path[expected_path.rindex('/') + 1:], result_path[result_path.rindex('/') + 1: ])\n        self.assertTrue(os.path.exists(result_path))\n    def test_with_numeric_and_text(self):\n        \"\"\"Test a DataFrame with both numeric and text columns.\"\"\"\n        df = pd.DataFrame({'Numeric': [10, 20], 'Text': ['Hello', 'World']})\n        result_path = task_func(df, 'numeric_text.csv')\n        self.assertTrue(os.path.exists(result_path))\n    def test_with_special_characters(self):\n        \"\"\"Test a DataFrame containing special characters.\"\"\"\n        df = pd.DataFrame({'Data': ['\"Quoted\"', ',Comma']})\n        result_path = task_func(df, 'special_chars.csv')\n        self.assertTrue(os.path.exists(result_path))\n    def test_empty_dataframe(self):\n        \"\"\"Test saving an empty DataFrame.\"\"\"\n        df = pd.DataFrame()\n        result_path = task_func(df, 'empty.csv')\n        self.assertTrue(os.path.exists(result_path))\n    def test_returned_path_format(self):\n        \"\"\"Test the format of the returned file path.\"\"\"\n        df = pd.DataFrame({'Column': [1]})\n        result_path = task_func(df, 'path_format.csv')\n        self.assertTrue(os.path.isabs(result_path))\n        self.assertIn('path_format.csv', result_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Retrieves JSON data from a specified API endpoint and writes it to a file. The filename is generated by concatenating a provided prefix with the endpoint name, followed by '.json'.\nThe function should raise the exception for: RuntimeError: If there is an error fetching data from the API or writing to the file.\nThe function should output with:\n    str: The filename into which the JSON data was written.\nYou should write self-contained code starting with:\n```\nimport json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n```",
        "gt": "import json\nimport requests\ndef task_func(API_URL, endpoint, PREFIX):\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        data = response.json()\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n\n    return filename",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nimport os\nimport json\nclass TestCases(unittest.TestCase):    \n    def tearDown(self):\n        # Cleanup the directory after tests\n        for filename in (\"PREFIX_data.json\", \"PREFIX_empty.json\", \"PREFIX_temp.json\"):\n            if os.path.exists(filename):\n                os.remove(filename)\n    @patch('requests.get')\n    def test_successful_data_fetch(self, mock_get):\n        # Test successful API call and file creation with correct data\n        mock_data = {'name': 'test', 'value': 123}\n        mock_get.return_value = Mock(status_code=200, json=lambda: mock_data)\n        api_url = 'https://fakeapi.com/'\n        endpoint = 'data'\n        prefix = 'PREFIX_'\n        expected_filename = prefix + endpoint + '.json'\n        result = task_func(api_url, endpoint, prefix)\n        \n        self.assertEqual(result, expected_filename)\n        with open(result, 'r') as file:\n            data = json.load(file)\n        self.assertEqual(data, mock_data)\n    @patch('requests.get')\n    def test_empty_response_handling(self, mock_get):\n        # Test function's handling of an empty response from the API\n        mock_get.return_value = Mock(status_code=200, json=lambda: {})\n        api_url = 'https://fakeapi.com/'\n        endpoint = 'empty'\n        prefix = 'PREFIX_'\n        expected_filename = prefix + endpoint + '.json'\n        with patch('os.path.join', return_value=expected_filename):\n            result = task_func(api_url, endpoint, prefix)\n        self.assertEqual(result, expected_filename)\n    @patch('requests.get')\n    def test_successful_data_fetch_different_filename(self, mock_get):\n        # Test successful API call and file creation with correct data\n        mock_data = {'name': 'test', 'value': 123}\n        mock_get.return_value = Mock(status_code=200, json=lambda: mock_data)\n        api_url = 'https://fakeapi.com/'\n        endpoint = 'temp'\n        prefix = 'PREFIX_'\n        expected_filename = prefix + endpoint + '.json'\n        with patch('os.path.join', return_value=expected_filename):\n            result = task_func(api_url, endpoint, prefix)\n        self.assertEqual(result, expected_filename)\n    @patch('requests.get')\n    def test_successful_data_fetch_and_content_check(self, mock_get):\n        # Test successful API call and file creation with correct data and content check\n        mock_data = {'name': 'test', 'value': 123}\n        mock_get.return_value = Mock(status_code=200, json=lambda: mock_data)\n        api_url = 'https://fakeapi.com/'\n        endpoint = 'data'\n        prefix = 'PREFIX_'\n        expected_filename = prefix + endpoint + '.json'\n        result = task_func(api_url, endpoint, prefix)\n        \n        self.assertEqual(result, expected_filename)\n        with open(result, 'r') as file:\n            content = json.load(file)\n        self.assertEqual(content, mock_data)\n        self.assertIn('name', content)\n        self.assertIn('value', content)\n        self.assertEqual(content['name'], 'test')\n        self.assertEqual(content['value'], 123)\n    @patch('requests.get')\n    def test_empty_response_content(self, mock_get):\n        # Test handling of an empty JSON response from the API and content check\n        mock_get.return_value = Mock(status_code=200, json=lambda: {})\n        api_url = 'https://fakeapi.com/'\n        endpoint = 'empty'\n        prefix = 'PREFIX_'\n        expected_filename = prefix + endpoint + '.json'\n        result = task_func(api_url, endpoint, prefix)\n        \n        self.assertEqual(result, expected_filename)\n        with open(result, 'r') as file:\n            content = json.load(file)\n        self.assertEqual(content, {})  # Ensuring the file content is indeed empty as expected",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Renames all files in a directory that match a particular pattern with a given replacement string.\nThe function should output with:\n    Returns a boolean value. True if the operation was successful, otherwise False.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n```",
        "gt": "import os\nimport re\ndef task_func(pattern: str, replacement: str, directory: str) -> bool:\n    try:\n        for file in os.listdir(directory):\n            if re.search(pattern, file):\n                new_filename = re.sub(pattern, replacement, file)\n                os.rename(os.path.join(directory, file), os.path.join(directory, new_filename))\n        return True\n    except Exception as e:\n        return False",
        "test": "import unittest\nimport tempfile\nimport shutil\nfrom pathlib import Path\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n        \n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n    \n    def create_test_files(self, filenames):\n        for filename in filenames:\n            Path(f\"{self.test_dir}/{filename}\").touch()\n    \n    def test_renafiles(self):\n        self.create_test_files([\"draft1.txt\", \"draft2.txt\", \"draft3.txt\"])\n        result = task_func(\"draft\", \"final\", self.test_dir)\n        self.assertTrue(result)\n        expected_files = sorted([\"final1.txt\", \"final2.txt\", \"final3.txt\"])\n        actual_files = sorted(os.listdir(self.test_dir))\n        self.assertEqual(expected_files, actual_files)\n        \n    def test_no_matching_files(self):\n        self.create_test_files([\"file1.txt\", \"file2.txt\", \"file3.txt\"])\n        result = task_func(\"draft\", \"final\", self.test_dir)\n        self.assertTrue(result)\n        expected_files = sorted([\"file1.txt\", \"file2.txt\", \"file3.txt\"])\n        actual_files = sorted(os.listdir(self.test_dir))\n        self.assertEqual(expected_files, actual_files)\n        \n    def test_nonexistent_directory(self):\n        result = task_func(\"draft\", \"final\", \"/nonexistent/directory\")\n        self.assertFalse(result)\n        \n    def test_empty_directory(self):\n        result = task_func(\"draft\", \"final\", self.test_dir)\n        self.assertTrue(result)\n        self.assertEqual([], os.listdir(self.test_dir))\n        \n    def test_complex_pattern_renaming(self):\n        self.create_test_files([\"draft_file1.txt\", \"file_draft2.txt\", \"draft3file.txt\"])\n        result = task_func(\"draft\", \"final\", self.test_dir)\n        self.assertTrue(result)\n        expected_files = sorted([\"final_file1.txt\", \"file_final2.txt\", \"final3file.txt\"])\n        actual_files = sorted(os.listdir(self.test_dir))\n        self.assertEqual(expected_files, actual_files)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a dictionary to a pandas DataFrame and find the locations of a particular item in the resulting DataFrame. Counts the number of occurences and adds a random integer x, where 0 <=x < 10, to it. >>> dict = {'A': ['a', 'b', 'e'], 'B': ['c', 'd', 'd'], '2': ['asdf', 'ddd', 'aaaa'], '12': ['e', 'e', 'd']} >>> task_func(dict, 'e', seed=2) ([(2, 'A'), (0, '12'), (1, '12')], 3,    A  B     2 12 0  a  c  asdf  e 1  b  d   ddd  e 2  e  d  aaaa  d)\nThe function should output with:\n    list: A list of tuples. Each tuple contains the row-index and column-name where the item is found.\n    int: The number of occurences with the added random number.\n    DataFrame: The converted dictionary.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n```",
        "gt": "import pandas as pd\nimport random\ndef task_func(dictionary, item, seed):\n    random.seed(seed)\n    random_int = random.randint(0, 9)\n    df = pd.DataFrame(dictionary)\n    positions = [(index, col) for col in df for index, val in enumerate(df[col]) if val == item]\n    return positions, len(positions) + random_int , df",
        "test": "import unittest\nimport pandas as pd\nfrom faker import Faker\nfake = Faker()\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Simple dict\n        dictionary = {'A': ['apple', 'banana'], 'B': ['orange', 'apple']}\n        result, count, df = task_func(dictionary, 'apple', 2222)\n        expected_result = [(0, 'A'), (1, 'B')]\n        self.assertCountEqual(result, expected_result)\n        self.assertEqual(count, 5)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_2(self):\n        # No occurrence of the item\n        dictionary = {'A': ['orange', 'banana'], 'B': ['orange', 'banana']}\n        result, count, df = task_func(dictionary, 'apple', seed=12)\n        expected_result = []\n        self.assertCountEqual(result, expected_result)\n        self.assertEqual(count, 7)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_3(self):\n        # Larger dict\n        fake.random.seed(111)\n        dictionary = {\n            'A': [fake.random_element(elements=('apple', 'banana', 'orange')) for _ in range(10)],\n            'B': [fake.random_element(elements=('apple', 'banana', 'orange')) for _ in range(10)],\n            'C': [fake.random_element(elements=('apple', 'banana', 'orange')) for _ in range(10)]\n        }\n        result, count, df = task_func(dictionary, 'apple', seed=22)\n        expected_result = [(index, col) for col in df for index, val in enumerate(df[col]) if val == 'apple']\n        self.assertCountEqual(result, expected_result)\n        self.assertEqual(count, 10)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    \n    def test_case_4(self):\n        # Empty dict\n        dictionary = {}\n        result, count, df = task_func(dictionary, 'apple', seed=112)\n        expected_result = []\n        self.assertCountEqual(result, expected_result)\n        self.assertEqual(count, 7)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)\n    def test_case_5(self):\n        # dict with non-string values\n        dictionary = {\n            'A': [1, 2, 3, 4, 5],\n            'B': [2, 3, 4, 5, 6]\n        }\n        result, count, df = task_func(dictionary, 3, seed=32)\n        expected_result = [(2, 'A'), (1, 'B')]\n        self.assertCountEqual(result, expected_result)\n        self.assertEqual(count, 3)\n        pd.testing.assert_frame_equal(pd.DataFrame(dictionary), df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Unzip a list of objects and their 3D coordinates, run PCA to reduce the dimensionality to 2D, and depending on the value of save_plot parameter, either save the plot to the provided path and return the 2D coordinates or return the 2D coordinates and the plot's Axes.\nThe function should raise the exception for: ValueError: If save_plot is True but plot_path is not provided.\nThe function should output with:\n    coordinates_2d (numpy.ndarray): The 2D coordinates after applying PCA.\n    ax (matplotlib.axes._axes.Axes, optional): The plot's Axes if save_plot is True.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n```",
        "gt": "import numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(data, save_plot=False, plot_path=None):\n    items, x_values, y_values, z_values = zip(*data)\n    coordinates = np.array(list(zip(x_values, y_values, z_values)))\n\n    pca = PCA(n_components=2)\n    coordinates_2d = pca.fit_transform(coordinates)\n\n    # Initialize a fresh plot\n    plt.figure()\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*coordinates_2d))\n\n    if save_plot:\n        if plot_path:\n            plt.savefig(plot_path)\n            plt.close(fig)\n            return coordinates_2d, ax\n        else:\n            raise ValueError(\"plot_path is required if save_plot is True\")\n    else:\n        return coordinates_2d",
        "test": "import unittest\nimport os\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Basic functionality test\n        data = [('A', 1, 1, 1), ('B', 2, 2, 2)]\n        result = task_func(data)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertEqual(result.shape, (2, 2))\n        # Test the return value\n        self.assertTrue(np.allclose(result, [[0.866, 0], [-0.866, 0]], atol=0.1))\n    def test_case_2(self):\n        # Test with save_plot=True without providing plot_path\n        data = [('A', 1, 1, 1), ('B', 2, 2, 2)]\n        with self.assertRaises(ValueError):\n            task_func(data, save_plot=True)\n    def test_case_3(self):\n        # Test with save_plot=True and providing plot_path\n        data = [('A', 1, 1, 1), ('B', 2, 2, 2)]\n        plot_path = \"temp_plot.png\"\n        result, ax = task_func(data, save_plot=True, plot_path=plot_path)\n        self.assertTrue(os.path.exists(plot_path))\n        os.remove(plot_path)\n    def test_case_4(self):\n        # Test with different data\n        data = [('A', 3, 2, 1), ('B', 5, 6, 7), ('C', 8, 9, 10)]\n        result = task_func(data)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertEqual(result.shape, (3, 2))\n    def test_case_5(self):\n        # Test with larger data\n        data = [('A', i, i+1, i+2) for i in range(10)]\n        result = task_func(data)\n        self.assertIsInstance(result, np.ndarray)\n        self.assertEqual(result.shape, (10, 2))\n        # Test the return value\n        # Expected result (can have flipped signs)\n        expected = np.array([\n            [-7.79, 0.], [-6.06, 0.], [-4.33, 0.], [-2.6, 0.], [-0.87, 0.],\n            [0.87, 0.], [2.6, 0.], [4.33, 0.], [6.06, 0.], [7.79, 0.]\n        ])\n    \n        # Check if either the original or the sign-flipped version matches\n        flipped = -expected\n        self.assertTrue(\n            np.allclose(result, expected, atol=0.1) or np.allclose(result, flipped, atol=0.1),\n            \"The PCA results do not match the expected values considering possible sign flips.\"\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Look for files that match the pattern of the regular expression '(? <! Distillr)\\\\\\\\ AcroTray\\\\.exe' in the directory 'C:\\\\ SomeDir\\\\'. If found, archive these files in a tar file.\nThe function should output with:\n    str: Path to the created tar file.\nYou should write self-contained code starting with:\n```\nimport re\nfrom pathlib import Path\nimport tarfile\n# Constants\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n```",
        "gt": "import re\nfrom pathlib import Path\nimport tarfile\n# Constants\nPATTERN = r\"(?<!Distillr)\\\\\\\\AcroTray\\.exe\"\nDIRECTORY = r\"C:\\\\SomeDir\\\\\"\ndef task_func(directory=DIRECTORY, file_pattern=PATTERN):\n    tar_path = Path(directory) / 'archive.tar'\n    with tarfile.open(tar_path, 'w') as tar:\n        for path in Path(directory).rglob('*'):\n            if re.match(file_pattern, path.name):\n                try:\n                    tar.add(path, arcname=path.relative_to(directory))\n                except PermissionError as e:\n                    print(f\"Skipping {path} due to permission error: {e}\")\n    return str(tar_path)",
        "test": "import unittest\nimport tempfile\nimport os\nimport tarfile\nfrom pathlib import Path\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup directories and files for testing\n        self.source_dir = tempfile.mkdtemp()\n        self.valid_files = {\n            'test1.txt': 'content',\n            'test2.doc': 'content',\n            'AcroTray.exe': 'content',\n            'sample.exe': 'content'\n        }\n        for filename, content in self.valid_files.items():\n            with open(os.path.join(self.source_dir, filename), 'w') as f:\n                f.write(content)\n        self.test_dir = tempfile.TemporaryDirectory()\n        self.addCleanup(self.test_dir.cleanup) \n    def create_test_files(self, files):\n        \"\"\"\n        Helper function to create test files in the temporary directory.\n        \"\"\"\n        for file_name, content in files.items():\n            with open(os.path.join(self.test_dir.name, file_name), 'w') as f:\n                f.write(content)\n    def tearDown(self):\n        # Clean up the test directory\n        shutil.rmtree(self.source_dir)\n    def test_valid_files_archived(self):\n        # Setup files that should be archived\n        files = {'AcroTray.exe': 'content', 'Ignore.exe': 'ignore this'}\n        self.create_test_files(files)\n        pattern = r\"AcroTray\\.exe$\"\n        \n        # Function to test\n        tar_file_path = task_func(self.test_dir.name, pattern)\n        \n        # Verify correct files are archived\n        with tarfile.open(tar_file_path, 'r') as tar:\n            archived_files = [m.name for m in tar.getmembers()]\n            self.assertIn('AcroTray.exe', archived_files)\n    def test_no_matches(self):\n        # When no files match, the archive should be empty\n        tar_file_path = task_func(self.source_dir, r\"non_matching_pattern\")\n        with tarfile.open(tar_file_path, 'r') as tar:\n            self.assertEqual(len(tar.getmembers()), 0)\n    def test_with_subdirectories(self):\n        # Setup files in subdirectories\n        sub_dir = Path(self.test_dir.name) / 'subdir'\n        sub_dir.mkdir(parents=True, exist_ok=True)\n        file_name = 'AcroTray.exe'\n        file_path = sub_dir / file_name\n        with open(file_path, 'w') as f:\n            f.write('content')\n        pattern = r\"AcroTray\\.exe$\"\n        \n        # Function to test\n        tar_file_path = task_func(self.test_dir.name, pattern)\n        \n        # Verify correct files are archived\n        with tarfile.open(tar_file_path, 'r') as tar:\n            archived_files = [m.name for m in tar.getmembers()]\n            self.assertIn(os.path.join('subdir', 'AcroTray.exe'), archived_files)\n    def test_empty_directory(self):\n        # If the directory is empty, the tar file should also be empty\n        empty_dir = tempfile.mkdtemp()\n        tar_file_path = task_func(empty_dir, PATTERN)\n        with tarfile.open(tar_file_path, 'r') as tar:\n            self.assertEqual(len(tar.getmembers()), 0)\n        shutil.rmtree(empty_dir)\n    def test_file_permission_issues(self):\n        # Setup a file with restricted permissions\n        file_name = 'AcroTray.exe'\n        file_path = os.path.join(self.test_dir.name, file_name)\n        with open(file_path, 'w') as f:\n            f.write('content')\n        os.chmod(file_path, 0o000)  # Make it unreadable\n        pattern = r\"AcroTray\\.exe$\"\n        \n        # Function to test\n        tar_file_path = task_func(self.test_dir.name, pattern)\n        \n        # Verify that files with permission issues are handled\n        with tarfile.open(tar_file_path, 'r') as tar:\n            archived_files = [m.name for m in tar.getmembers()]\n            self.assertNotIn('AcroTray.exe', archived_files)\n        os.chmod(file_path, 0o666)  # Restore permissions",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load a JSON configuration file and return the configuration dictionary.\nThe function should raise the exception for: FileNotFoundError: If the provided configuration file does not exist.\nThe function should output with:\n    config (dict): Configuration dictionary loaded from the file.\nYou should write self-contained code starting with:\n```\nimport os\nimport json\ndef task_func(config_path: str) -> dict:\n```",
        "gt": "import os\nimport json\ndef task_func(config_path: str) -> dict:\n    if not os.path.isfile(config_path):\n        raise FileNotFoundError(f\"The configuration file {config_path} does not exist.\")\n    \n    with open(config_path) as f:\n        config = json.load(f)\n    \n    return config",
        "test": "import unittest\nimport json\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create temporary configuration files for testing\n        self.valid_config_file = tempfile.NamedTemporaryFile(mode='w', delete=False)\n        self.valid_config_file.write('{\"database\": \"test_db\", \"logging\": true}')\n        self.valid_config_file.close()\n        \n        self.empty_config_file = tempfile.NamedTemporaryFile(mode='w', delete=False)\n        self.empty_config_file.write('{}')\n        self.empty_config_file.close()\n        \n        self.invalid_json_file = tempfile.NamedTemporaryFile(mode='w', delete=False)\n        self.invalid_json_file.write('invalid json')\n        self.invalid_json_file.close()\n    \n    def tearDown(self):\n        # Clean up temporary configuration files after testing\n        os.unlink(self.valid_config_file.name)\n        os.unlink(self.empty_config_file.name)\n        os.unlink(self.invalid_json_file.name)\n    \n    def test_valid_config(self):\n        # Test with a valid configuration file\n        config = task_func(self.valid_config_file.name)\n        self.assertIsInstance(config, dict)\n        self.assertIn(\"database\", config)\n        self.assertIn(\"logging\", config)\n    \n    def test_non_existent_config(self):\n        # Test with a non-existent configuration file\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"test_data/non_existent_config.json\")\n    \n    def test_invalid_json_format(self):\n        # Test with a configuration file containing invalid JSON\n        with self.assertRaises(json.JSONDecodeError):\n            task_func(self.invalid_json_file.name)\n    \n    def test_empty_config(self):\n        # Test with an empty configuration file\n        config = task_func(self.empty_config_file.name)\n        self.assertIsInstance(config, dict)\n        self.assertEqual(len(config), 0)\n    \n    def test_additional_config_fields(self):\n        # Test with a configuration file containing additional fields\n        extra_config_file = tempfile.NamedTemporaryFile(mode='w', delete=False)\n        extra_config_file.write('{\"database\": \"test_db\", \"logging\": true, \"extra_field\": \"value\"}')\n        extra_config_file.close()\n        \n        config = task_func(extra_config_file.name)\n        self.assertIsInstance(config, dict)\n        self.assertIn(\"database\", config)\n        self.assertIn(\"logging\", config)\n        self.assertIn(\"extra_field\", config)\n        \n        os.unlink(extra_config_file.name)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Updates the passwords in a user table of an SQLite database by hashing them with SHA256, using a provided salt. The function directly modifies the database via the given cursor.\nThe function should raise the exception for: TypeError if the salt is not a string\nThe function should output with:\n    int: The number of users whose passwords were successfully updated.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport binascii\ndef task_func(salt, cursor):\n```",
        "gt": "import hashlib\nimport binascii\ndef task_func(salt, cursor):\n    if not isinstance(salt, str):\n        raise TypeError\n    cursor.execute(\"SELECT id, password FROM users\")\n    users = cursor.fetchall()\n    count_updated = 0\n\n    for user in users:\n        password = user[1].encode('utf-8')\n        salted_password = password + salt.encode('utf-8')\n        hash_obj = hashlib.sha256(salted_password)\n        hashed_password = binascii.hexlify(hash_obj.digest()).decode('utf-8')\n\n        cursor.execute(f\"UPDATE users SET password = '{hashed_password}' WHERE id = {user[0]}\")\n        count_updated += 1\n\n    return count_updated",
        "test": "import unittest\nimport sqlite3\nimport hashlib\nimport binascii\ndef create_mock_db():\n    \"\"\"Helper function to create a mock SQLite database with a users table.\"\"\"\n    conn = sqlite3.connect(\":memory:\")\n    cursor = conn.cursor()\n    cursor.execute(\"CREATE TABLE users (id INTEGER PRIMARY KEY, password TEXT)\")\n    passwords = [(\"password1\",), (\"password2\",), (\"password3\",), (\"password4\",), (\"password5\",)]\n    cursor.executemany(\"INSERT INTO users (password) VALUES (?)\", passwords)\n    conn.commit()\n    return conn\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Setup mock database for testing.\"\"\"\n        self.conn = create_mock_db()\n        self.cursor = self.conn.cursor()\n    def tearDown(self):\n        \"\"\"Tear down and close the mock database after testing.\"\"\"\n        self.conn.close()\n    def test_updated_passwords(self):\n        \"\"\"Verify that the number of updated passwords matches the number of users.\"\"\"\n        salt = \"testsalt\"\n        num_updated = task_func(salt, self.cursor)\n        self.assertEqual(num_updated, 5, \"Expected 5 users to be updated\")\n    def test_hash_correctness(self):\n        \"\"\"Verify that hash correctness.\"\"\"\n        salt = \"testsalt1\"\n        _ = task_func(salt, self.cursor)\n        self.cursor.execute(\"SELECT password FROM users\")\n        init_passwords = []\n        for row in self.cursor.fetchall():\n            password = row[0]\n            init_passwords.append(password)\n        salt = \"testsalt2\"\n        _ = task_func(salt, self.cursor)\n        self.cursor.execute(\"SELECT password FROM users\")\n        final_passwords = []\n        for row in self.cursor.fetchall():\n            password = row[0]\n            final_passwords.append(password)\n        for init, final in zip(init_passwords, final_passwords):\n            self.assertNotEqual(init, final)\n    def test_the_password_len_and_type(self):\n        \"\"\"Verify that hash type and len.\"\"\"\n        salt = \"testsalt3\"\n        _ = task_func(salt, self.cursor)\n        self.cursor.execute(\"SELECT password FROM users\")\n        for row in self.cursor.fetchall():\n            password = row[0]\n            self.assertTrue(isinstance(password, str) and len(password) == 64,\n                            \"Expected hashed password to be 64 characters long\")\n    def test_empty_database(self):\n        \"\"\"Check behavior with an empty user table.\"\"\"\n        self.cursor.execute(\"DELETE FROM users\")\n        num_updated = task_func(\"testsalt\", self.cursor)\n        self.assertEqual(num_updated, 0, \"Expected 0 users to be updated when the table is empty\")\n    def test_varied_salts(self):\n        \"\"\"Ensure different salts produce different hashes for the same password.\"\"\"\n        self.cursor.execute(\"UPDATE users SET password = 'constant'\")\n        salt1 = \"salt1\"\n        salt2 = \"salt2\"\n        task_func(salt1, self.cursor)\n        hash1 = self.cursor.execute(\"SELECT password FROM users WHERE id = 1\").fetchone()[0]\n        \n        self.cursor.execute(\"UPDATE users SET password = 'constant'\")\n        task_func(salt2, self.cursor)\n        hash2 = self.cursor.execute(\"SELECT password FROM users WHERE id = 1\").fetchone()[0]\n        \n        self.assertNotEqual(hash1, hash2, \"Hashes should differ when different salts are used\")\n    def test_invalid_salt(self):\n        with self.assertRaises(TypeError):\n            task_func(1, self.cursor)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a directory with the given name, create specified .txt files. Encode the content using the specified encoding and write it into all .txt files, then zip the directory. Args: directory_name (str): The name of the directory to be created. content (str, optional): The content which should be written to each .txt file. Defaults to 'Sopet\u00f3n'. file_names (list): List of .txt file names to be created. Defaults to ['file1.txt', 'file2.txt', 'file3.txt']. encoding (str): The encoding type for the files. Default is 'latin-1'. >>> zipped_file = task_func(directory_name=\"directorio\", content='hi', file_names=[\"custom1.txt\", \"custom2.txt\"], encoding='utf-8') >>> print(zipped_file) directorio.zip\nThe function should output with:\n    str: The zipped file name.\nYou should write self-contained code starting with:\n```\nimport codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n          content='Sopet\u00f3n',\n          file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n          encoding=\"latin-1\"):\n```",
        "gt": "import codecs\nimport os\nimport zipfile\ndef task_func(directory_name=\"latin_files\",\n          content='Sopet\u00f3n',\n          file_names=['file1.txt', 'file2.txt', 'file3.txt'],\n          encoding=\"latin-1\"):\n\n    os.makedirs(directory_name, exist_ok=True)\n\n    for file_name in file_names:\n        with open(os.path.join(directory_name, file_name), 'wb') as f:\n            f.write(codecs.encode(content, encoding))\n\n    zipped_file = directory_name + '.zip'\n    with zipfile.ZipFile(zipped_file, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for root, dirs, files in os.walk(directory_name):\n            for file in files:\n                zipf.write(os.path.join(root, file))\n\n    return zipped_file ",
        "test": "import unittest\nimport os\nimport shutil\nfrom zipfile import ZipFile\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test default parameters\n        zipped_file = task_func()\n        self.assertEqual(zipped_file, \"latin_files.zip\")\n        self.assertTrue(os.path.exists(zipped_file))\n        \n        # Extract the zipped file and check contents\n        with ZipFile(zipped_file, 'r') as zip_ref:\n            zip_ref.extractall(\"test_case_1\")\n        self.assertTrue(os.path.exists(os.path.join(\"latin_files\", \"file1.txt\")))\n        self.assertTrue(os.path.exists(os.path.join(\"latin_files\", \"file2.txt\")))\n        self.assertTrue(os.path.exists(os.path.join(\"latin_files\", \"file3.txt\")))\n        for i in range(1,4):\n            with open(os.path.join(\"latin_files\", f'file{i}.txt'), encoding='latin-1') as file:\n                self.assertEqual(file.read(), 'Sopet\u00f3n')\n        shutil.rmtree(\"test_case_1\")\n        os.remove(zipped_file)\n        shutil.rmtree(\"latin_files\")\n    def test_case_2(self):\n        # Test with custom directory and file names\n        zipped_file = task_func(directory_name=\"custom_directory\", content='test', file_names=[\"custom1.txt\", \"custom2.txt\"], encoding='utf-8')\n        self.assertEqual(zipped_file, \"custom_directory.zip\")\n        self.assertTrue(os.path.exists(zipped_file))\n        \n        # Extract the zipped file and check contents\n        with ZipFile(zipped_file, 'r') as zip_ref:\n            zip_ref.extractall(\"test_case_2\")\n        self.assertTrue(os.path.exists(os.path.join(\"test_case_2\", \"custom_directory\", \"custom1.txt\")))\n        self.assertTrue(os.path.exists(os.path.join(\"test_case_2\", \"custom_directory\", \"custom2.txt\")))\n        for i in range(1,3):\n            with open(os.path.join(\"custom_directory\", f'custom{i}.txt'), encoding='latin-1') as file:\n                self.assertEqual(file.read(), 'test')    \n    \n        shutil.rmtree(\"test_case_2\")\n        os.remove(zipped_file)\n        shutil.rmtree(\"custom_directory\")\n    def test_case_3(self):\n        # Test with custom encoding\n        zipped_file = task_func(encoding=\"utf-8\")\n        self.assertEqual(zipped_file, \"latin_files.zip\")\n        self.assertTrue(os.path.exists(zipped_file))\n        \n        # Extract the zipped file and check contents\n        with ZipFile(zipped_file, 'r') as zip_ref:\n            zip_ref.extractall(\"test_case_3\")\n        with open(os.path.join(\"test_case_3\", \"latin_files\", \"file1.txt\"), 'r') as file:\n            content = file.read()\n        self.assertEqual(content, 'Sopet\u00f3n')  # Since we used utf-8 encoding, the content should match\n        shutil.rmtree(\"test_case_3\")\n        os.remove(zipped_file)\n        shutil.rmtree(\"latin_files\")\n    def test_case_4(self):\n        # Test with all custom parameters\n        zipped_file = task_func(directory_name=\"all_custom\", file_names=[\"all1.txt\", \"all2.txt\"], encoding=\"utf-8\")\n        self.assertEqual(zipped_file, \"all_custom.zip\")\n        self.assertTrue(os.path.exists(zipped_file))\n        \n        # Extract the zipped file and check contents\n        with ZipFile(zipped_file, 'r') as zip_ref:\n            zip_ref.extractall(\"test_case_4\")\n        with open(os.path.join(\"test_case_4\", \"all_custom\", \"all1.txt\"), 'r') as file:\n            content = file.read()\n        self.assertEqual(content, 'Sopet\u00f3n')  # Since we used utf-8 encoding, the content should match\n        shutil.rmtree(\"test_case_4\")\n        os.remove(zipped_file)\n        shutil.rmtree(\"all_custom\")\n    def test_case_5(self):\n        # Test with a single file and default encoding\n        zipped_file = task_func(directory_name=\"single_file_dir\", file_names=[\"single.txt\"])\n        self.assertEqual(zipped_file, \"single_file_dir.zip\")\n        self.assertTrue(os.path.exists(zipped_file))\n        \n        # Extract the zipped file and check contents\n        with ZipFile(zipped_file, 'r') as zip_ref:\n            zip_ref.extractall(\"test_case_5\")\n        self.assertTrue(os.path.exists(os.path.join(\"test_case_5\", \"single_file_dir\", \"single.txt\")))\n        shutil.rmtree(\"test_case_5\")\n        shutil.rmtree(\"single_file_dir\")\n        os.remove(zipped_file)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the Pearson correlation coefficient of two lists, generate a Pandas DataFrame from these lists, and then draw a scatter plot with a regression line.\nThe function should output with:\n    tuple: Contains two elements:\n    float: The Pearson correlation coefficient.\n    matplotlib.axes.Axes: The Axes object of the plotted scatter plot with a regression line.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\ndef task_func(a, b):\n    correlation, _ = stats.pearsonr(a, b)\n    df = pd.DataFrame({'A': a, 'B': b})\n\n    plt.scatter(df['A'], df['B'])\n    plt.plot(np.unique(df['A']), np.poly1d(np.polyfit(df['A'], df['B'], 1))(np.unique(df['A'])), color='red')\n    plt.show()\n    return correlation, plt.gca()",
        "test": "import unittest\nimport math\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        correlation, ax = task_func([1, 2, 3, 4, 5], [2, 4, 6, 8, 10])\n        self.assertAlmostEqual(correlation, 1.0)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_2(self):\n        correlation, ax = task_func([1, 1, 1, 1, 1], [1, 1, 1, 1, 1])\n        self.assertTrue(math.isnan(correlation))\n    def test_case_3(self):\n        correlation, ax = task_func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])\n        self.assertAlmostEqual(correlation, -1.0)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_4(self):\n        correlation, ax = task_func([2, 4, 6, 8, 10], [1, 2, 3, 4, 5])\n        self.assertAlmostEqual(correlation, 1.0)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_case_5(self):\n        correlation, ax = task_func([1, 3, 5, 7, 9], [9, 7, 5, 3, 1])\n        self.assertAlmostEqual(correlation, -1.0)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a collection of text documents to compute the TF-IDF (Term Frequency-Inverse Document Frequency) scores for each word, excluding any URLs present in the texts. The TF-IDF scores help to identify the importance of a word within a document relative to a collection of documents.\nNote that: Notes: URLs in the text documents are removed before calculating TF-IDF scores to ensure they do not affect the analysis. The TF-IDF scores are rounded to 8 decimal places for precision.\nThe function should output with:\n    tuple of (list of tuples, list of str):\n    The first element is a list of tuples, each tuple representing a document with its words' TF-IDF scores in a\n    dense matrix format. Each score in the tuple corresponds to a word's TF-IDF score in the document.\n    The second element is a list of strings, representing the unique words (features) across all documents for\n    which TF-IDF scores have been calculated. The order of words in this list matches the order of scores in the\n    tuples of the first element.\nYou should write self-contained code starting with:\n```\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef task_func(texts):\n```",
        "gt": "import re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef task_func(texts):\n\n    # Handle empty input\n    if all(text.strip() == \"\" for text in texts):\n        return [], []\n\n    # Remove URLs\n    cleaned_texts = [re.sub('http[s]?://\\S+', '', text) for text in texts]\n\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(cleaned_texts)\n\n    # Convert the sparse matrix to a dense format, round the values, convert to tuples and return along with feature names\n    dense_matrix = [tuple(round(val, 8) for val in row) for row in tfidf_matrix.toarray().tolist()]\n    return dense_matrix, list(vectorizer.get_feature_names_out())",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        input_texts = ['Visit https://www.python.org for more info.', 'Python is great.', 'I love Python.']\n        output = task_func(input_texts)\n        sorted_indices = sorted(range(len(output[1])), key=lambda k: output[1][k])\n        expected_output = (\n            [tuple(row[i] for i in sorted_indices) for row in output[0]],\n            sorted(output[1])\n        )\n        self.assertEqual(output, expected_output)\n    def test_case_2(self):\n        input_texts = ['Hello world!', 'Python programming is fun.', 'Data science with Python.']\n        output = task_func(input_texts)\n        sorted_indices = sorted(range(len(output[1])), key=lambda k: output[1][k])\n        expected_output = (\n            [tuple(row[i] for i in sorted_indices) for row in output[0]],\n            sorted(output[1])\n        )\n        self.assertEqual(output, expected_output)\n    def test_case_3(self):\n        input_texts = ['I love coding.', 'You love coding too.', 'We all love coding.']\n        output = task_func(input_texts)\n        sorted_indices = sorted(range(len(output[1])), key=lambda k: output[1][k])\n        expected_output = (\n            [tuple(row[i] for i in sorted_indices) for row in output[0]],\n            sorted(output[1])\n        )\n        self.assertEqual(output, expected_output)\n    def test_case_4(self):\n        input_texts = ['Check out this amazing article at https://www.example.com/article']\n        output = task_func(input_texts)\n        sorted_indices = sorted(range(len(output[1])), key=lambda k: output[1][k])\n        expected_output = (\n            [tuple(row[i] for i in sorted_indices) for row in output[0]],\n            sorted(output[1])\n        )\n        self.assertEqual(output, expected_output)\n    def test_case_5(self):\n        input_texts = ['', '', '']\n        expected_output = ([], [])\n        self.assertEqual(task_func(input_texts), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Impute missing values in the last column of the dataframe using mean imputation, then create a box plot to visualize the distribution of data in the last column.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame or has no columns.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the imputed last column.\n    Axes: A matplotlib Axes object with the boxplot of the last column of the dataframe.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty pandas DataFrame.\")\n\n    last_col = df.columns[-1]\n    imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n    df[last_col] = imp_mean.fit_transform(df[last_col].values.reshape(-1, 1))\n\n    fig, ax = plt.subplots()\n    sns.boxplot(x=df[last_col], ax=ax)\n    ax.set_title('Boxplot of Last Column')\n    ax.set_xlabel(last_col)\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n        self.df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n        self.df.iloc[::3, -1] = np.nan  # Insert some NaN values\n    def test_return_types(self):\n        imputed_df, ax = task_func(self.df)\n        self.assertIsInstance(imputed_df, pd.DataFrame)\n        self.assertIsInstance(ax, plt.Axes)\n        df_list = imputed_df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['51.0,92.0,14.0,55.666666666666664', '60.0,20.0,82.0,86.0', '74.0,74.0,87.0,99.0', '23.0,2.0,21.0,55.666666666666664', '1.0,87.0,29.0,37.0', '1.0,63.0,59.0,20.0', '32.0,75.0,57.0,55.666666666666664', '88.0,48.0,90.0,58.0', '41.0,91.0,59.0,79.0', '14.0,61.0,61.0,55.666666666666664', '61.0,50.0,54.0,63.0', '2.0,50.0,6.0,20.0', '72.0,38.0,17.0,55.666666666666664', '88.0,59.0,13.0,8.0', '89.0,52.0,1.0,83.0', '91.0,59.0,70.0,55.666666666666664', '7.0,46.0,34.0,77.0', '80.0,35.0,49.0,3.0', '1.0,5.0,53.0,55.666666666666664', '53.0,92.0,62.0,17.0', '89.0,43.0,33.0,73.0', '61.0,99.0,13.0,55.666666666666664', '47.0,14.0,71.0,77.0', '86.0,61.0,39.0,84.0', '79.0,81.0,52.0,55.666666666666664', '25.0,88.0,59.0,40.0', '28.0,14.0,44.0,64.0', '88.0,70.0,8.0,55.666666666666664', '0.0,7.0,87.0,62.0', '10.0,80.0,7.0,34.0', '34.0,32.0,4.0,55.666666666666664', '27.0,6.0,72.0,71.0', '11.0,33.0,32.0,47.0', '22.0,61.0,87.0,55.666666666666664', '98.0,43.0,85.0,90.0', '34.0,64.0,98.0,46.0', '77.0,2.0,0.0,55.666666666666664', '89.0,13.0,26.0,8.0', '78.0,14.0,89.0,41.0', '76.0,50.0,62.0,55.666666666666664', '51.0,95.0,3.0,93.0', '22.0,14.0,42.0,28.0', '35.0,12.0,31.0,55.666666666666664', '58.0,85.0,27.0,65.0', '41.0,44.0,61.0,56.0', '5.0,27.0,27.0,55.666666666666664', '83.0,29.0,61.0,74.0', '91.0,88.0,61.0,96.0', '0.0,26.0,61.0,55.666666666666664', '2.0,69.0,71.0,26.0', '8.0,61.0,36.0,96.0', '50.0,43.0,23.0,55.666666666666664', '58.0,31.0,95.0,87.0', '51.0,61.0,57.0,51.0', '11.0,38.0,1.0,55.666666666666664', '55.0,80.0,58.0,1.0', '1.0,91.0,53.0,86.0', '95.0,96.0,0.0,55.666666666666664', '1.0,52.0,43.0,89.0', '31.0,69.0,31.0,67.0', '54.0,74.0,55.0,55.666666666666664', '37.0,23.0,68.0,97.0', '69.0,85.0,10.0,15.0', '96.0,72.0,58.0,55.666666666666664', '79.0,92.0,2.0,19.0', '58.0,35.0,18.0,89.0', '66.0,18.0,19.0,55.666666666666664', '70.0,51.0,32.0,39.0', '38.0,81.0,0.0,10.0', '91.0,56.0,88.0,55.666666666666664', '22.0,30.0,93.0,41.0', '98.0,6.0,15.0,89.0', '59.0,1.0,0.0,55.666666666666664', '11.0,68.0,36.0,31.0', '8.0,98.0,18.0,47.0', '79.0,2.0,19.0,55.666666666666664', '53.0,32.0,23.0,74.0', '71.0,35.0,37.0,83.0', '98.0,88.0,98.0,55.666666666666664', '92.0,17.0,81.0,65.0', '53.0,34.0,79.0,60.0', '40.0,99.0,32.0,55.666666666666664', '32.0,13.0,20.0,47.0', '19.0,7.0,6.0,66.0', '16.0,32.0,47.0,55.666666666666664', '58.0,85.0,21.0,29.0', '37.0,50.0,53.0,7.0', '26.0,26.0,97.0,55.666666666666664', '29.0,96.0,27.0,63.0', '96.0,68.0,60.0,47.0', '18.0,3.0,34.0,55.666666666666664', '48.0,16.0,43.0,91.0', '29.0,92.0,45.0,5.0', '98.0,36.0,23.0,55.666666666666664', '45.0,52.0,94.0,98.0', '59.0,96.0,62.0,84.0', '31.0,86.0,32.0,55.666666666666664', '17.0,24.0,94.0,53.0', '57.0,66.0,45.0,23.0', '31.0,46.0,85.0,55.666666666666664']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    def test_imputation(self):\n        imputed_df, _ = task_func(self.df)\n        self.assertFalse(imputed_df.isna().any().any())\n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_plot_title_and_labels(self):\n        _, ax = task_func(self.df)\n        self.assertEqual(ax.get_title(), 'Boxplot of Last Column')\n        self.assertEqual(ax.get_xlabel(), 'D')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a date time from one timezone to another.\nThe function should output with:\n    str: The converted datetime string in \"yyyy-mm-dd hh:mm:ss\" format.\nYou should write self-contained code starting with:\n```\nimport pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n```",
        "gt": "import pytz\nfrom dateutil import parser\ndef task_func(date_str, from_tz, to_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(to_tz)\n    date = parser.parse(date_str).replace(tzinfo=from_tz)\n    date = date.astimezone(to_tz)\n\n    return date.strftime('%Y-%m-%d %H:%M:%S')",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_utc_to_new_york(self):\n        \"\"\"Test conversion from UTC to America/New_York timezone.\"\"\"\n        result = task_func('2022-03-01 12:00:00', 'UTC', 'America/New_York')\n        self.assertEqual(result, '2022-03-01 07:00:00')\n    def test_utc_to_los_angeles_summer_time(self):\n        \"\"\"Test conversion from UTC to America/Los_Angeles with daylight saving.\"\"\"\n        result = task_func('2022-06-01 12:00:00', 'UTC', 'America/Los_Angeles')\n        self.assertEqual(result, '2022-06-01 05:00:00')\n    def test_invalid_date_format(self):\n        \"\"\"Test handling of invalid date format.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func('invalid-date', 'UTC', 'America/New_York')\n    def test_same_timezone_conversion(self):\n        \"\"\"Test conversion where from_tz and to_tz are the same.\"\"\"\n        result = task_func('2022-03-01 12:00:00', 'UTC', 'UTC')\n        self.assertEqual(result, '2022-03-01 12:00:00')\n    def test_utc_to_london_summer_time(self):\n        \"\"\"Test conversion from UTC to Europe/London during summer (BST).\"\"\"\n        result = task_func('2022-06-01 12:00:00', 'UTC', 'Europe/London')\n        self.assertEqual(result, '2022-06-01 13:00:00')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function preprocesses a pandas DataFrame by replacing specified values, encoding categorical attributes, and standardizing numerical attributes. It's designed to be flexible for data preprocessing in machine learning tasks.\nNote that: The function assumes that the DataFrame and the dictionary are well-formed and relevant to each other. The encoding of categorical columns is done using LabelEncoder, which encodes labels with value between 0 and n_classes-1. Numerical standardization is performed by subtracting the mean and dividing by the standard deviation of each column.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    DataFrame: The preprocessed DataFrame with encoded categorical attributes and standardized numerical attributes.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df, dct, columns=None):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndef task_func(df, dct, columns=None):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n\n    # Replace values using the provided dictionary\n    df = df.replace(dct)\n    \n    # Determine columns to encode\n    if columns is None:\n        columns = df.select_dtypes(include=['object']).columns.tolist()\n\n    # Encode categorical features\n    for column in columns:\n        if df[column].dtype == 'object':\n            le = LabelEncoder()\n            df[column] = le.fit_transform(df[column])\n            \n    # Standardize numerical features\n    df = (df - df.mean()) / df.std()\n    \n    return df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with a mix of categorical and numerical columns\n        df = pd.DataFrame({'cat': ['a', 'b', 'c'], 'num': [1, 2, 3]})\n        dct = {'a': 'x', 'b': 'y', 'c': 'z'}\n        result = task_func(df, dct)\n        # Assertions\n        self.assertEqual(result.shape, df.shape)\n        self.assertTrue('cat' in result.columns)\n        self.assertTrue('num' in result.columns)\n    def test_case_2(self):\n        # Testing with only numerical columns\n        df = pd.DataFrame({'num1': [10, 20, 30], 'num2': [40, 50, 60]})\n        dct = {}\n        result = task_func(df, dct)\n        # Assertions\n        self.assertEqual(result.shape, df.shape)\n        self.assertAlmostEqual(result['num1'].mean(), 0, places=5)\n        self.assertAlmostEqual(result['num2'].mean(), 0, places=5)\n    def test_case_3(self):\n        # Testing with only categorical columns\n        df = pd.DataFrame({'cat1': ['u', 'v', 'w'], 'cat2': ['x', 'y', 'z']})\n        dct = {'u': 'a', 'v': 'b', 'w': 'c', 'x': 'd', 'y': 'e', 'z': 'f'}\n        result = task_func(df, dct)\n        # Assertions\n        self.assertEqual(result.shape, df.shape)\n        self.assertIn(result['cat1'].dtype, [np.float64])\n        self.assertIn(result['cat2'].dtype, [np.float64])\n    def test_case_4(self):\n        # Testing with an empty DataFrame\n        df = pd.DataFrame({})\n        dct = {}\n        result = task_func(df, dct)\n        # Assertions\n        self.assertEqual(result.empty, True)\n    def test_case_5(self):\n        # Testing with complex DataFrame and no changes through dictionary\n        df = pd.DataFrame({'num': [100, 200, 300], 'cat': ['alpha', 'beta', 'gamma']})\n        dct = {'delta': 400}\n        result = task_func(df, dct)\n        # Assertions\n        self.assertEqual(result.shape, df.shape)\n        self.assertAlmostEqual(result['num'].std(), 1, places=5)\n        self.assertIn(result['cat'].dtype, [np.float64])\n    \n    def test_case_6(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\", {})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Archive files that were changed older than a specified number of days in a given directory. This function searches for files with specific extensions (.txt, .csv, .xlsx, .docx, .pdf) in the given directory. Files older than 'days_old' are moved to an 'archive' subdirectory within the specified directory.\nThe function should output with:\n    str: The path of the archive subdirectory where files are moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport shutil\nimport time\n# Constants\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n```",
        "gt": "import os\nimport glob\nimport shutil\nimport time\n# Constants\nFILE_EXTENSIONS = ['.txt', '.csv', '.xlsx', '.docx', '.pdf']\ndef task_func(my_path: str, days_old: int) -> str:\n\n    archive_dir = os.path.join(my_path, 'archive')\n    os.makedirs(archive_dir, exist_ok=True)\n\n    for ext in FILE_EXTENSIONS:\n        files = glob.glob(os.path.join(my_path, '*' + ext))\n        for file in files:\n            if os.path.isfile(file) and os.path.getmtime(file) < time.time() - days_old * 86400:\n                shutil.move(file, archive_dir)\n\n    return archive_dir",
        "test": "import tempfile\nimport unittest\nclass TestCases(unittest.TestCase):\n    def create_test_file(self, directory, filename, age_days):\n        file_path = os.path.join(directory, filename)\n        with open(file_path, 'w') as f:\n            f.write('Test content')\n        # Set the last modified time to 'age_days' days ago\n        old_time = time.time() - (age_days * 86400)\n        os.utime(file_path, (old_time, old_time))\n        return file_path\n    def test_empty_directory(self):\n        with tempfile.TemporaryDirectory() as tmpdir:\n            archive_dir = task_func(tmpdir, 30)\n            self.assertTrue(os.path.isdir(archive_dir), 'Archive directory not created')\n            self.assertEqual(len(os.listdir(archive_dir)), 0, 'Archive directory is not empty')\n    def test_no_old_files(self):\n        with tempfile.TemporaryDirectory() as tmpdir:\n            self.create_test_file(tmpdir, 'test1.txt', 10)\n            archive_dir = task_func(tmpdir, 30)\n            self.assertTrue(os.path.isdir(archive_dir), 'Archive directory not created')\n            self.assertEqual(len(os.listdir(archive_dir)), 0, 'Old files incorrectly archived')\n    def test_old_files_archived(self):\n        with tempfile.TemporaryDirectory() as tmpdir:\n            old_file = self.create_test_file(tmpdir, 'test2.txt', 40)\n            archive_dir = task_func(tmpdir, 30)\n            self.assertTrue(os.path.isfile(os.path.join(archive_dir, 'test2.txt')), 'Old file not archived')\n    def test_mixed_file_ages(self):\n        with tempfile.TemporaryDirectory() as tmpdir:\n            self.create_test_file(tmpdir, 'recent.txt', 10)\n            old_file = self.create_test_file(tmpdir, 'old.txt', 40)\n            archive_dir = task_func(tmpdir, 30)\n            self.assertTrue(os.path.isfile(os.path.join(archive_dir, 'old.txt')), 'Old file not archived')\n            self.assertFalse(os.path.isfile(os.path.join(archive_dir, 'recent.txt')), 'Recent file incorrectly archived')\n    def test_different_extensions(self):\n        with tempfile.TemporaryDirectory() as tmpdir:\n            self.create_test_file(tmpdir, 'test.pdf', 40)\n            self.create_test_file(tmpdir, 'test.xlsx', 50)\n            archive_dir = task_func(tmpdir, 30)\n            self.assertTrue(os.path.isfile(os.path.join(archive_dir, 'test.pdf')), 'PDF file not archived')\n            self.assertTrue(os.path.isfile(os.path.join(archive_dir, 'test.xlsx')), 'XLSX file not archived')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame from a 2D list and calculate a distance matrix. This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'. It uses the `chr()` function, which converts an integer to its corresponding Unicode character, to dynamically assign alphabetical labels to each column based on their index. The function then computes the Euclidean distance matrix between rows.\nThe function should output with:\n    df (pd.DataFrame): data converted from 2D list.\n    distance_matrix (pd.DataFrame): output distance matrix.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n```",
        "gt": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\ndef task_func(array):\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n\n    return df, distance_matrix",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Teset basic case\n        input_data = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (2, 5))\n        self.assertTrue((df.columns == [\"A\", \"B\", \"C\", \"D\", \"E\"]).all())\n        self.assertEqual(distance_matrix.shape, (2, 2))\n        self.assertAlmostEqual(distance_matrix.iloc[0, 1], 11.18034, places=5)\n        self.assertAlmostEqual(distance_matrix.iloc[1, 0], 11.18034, places=5)\n    def test_case_2(self):\n        # Test negatives and zero\n        input_data = [[-5, -4, -3, -2, -1], [0, 0, 0, 0, 0], [1, 2, 3, 4, 5]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (3, 5))\n        self.assertEqual(distance_matrix.shape, (3, 3))\n        self.assertAlmostEqual(distance_matrix.iloc[0, 1], 7.41620, places=5)\n        self.assertAlmostEqual(distance_matrix.iloc[1, 2], 7.41620, places=5)\n    def test_case_3(self):\n        # Test small lists\n        input_data = [[1, 2], [3, 4]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (2, 2))\n        self.assertEqual(distance_matrix.shape, (2, 2))\n        self.assertAlmostEqual(distance_matrix.iloc[0, 1], 2.82843, places=5)\n    def test_case_4(self):\n        # Test repeated single element\n        input_data = [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (3, 3))\n        self.assertEqual(distance_matrix.shape, (3, 3))\n        self.assertEqual(distance_matrix.iloc[0, 1], 0)\n        self.assertEqual(distance_matrix.iloc[1, 2], 0)\n    def test_case_5(self):\n        # Test single list\n        input_data = [[1, 2, 3, 4, 5]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (1, 5))\n        self.assertEqual(distance_matrix.shape, (1, 1))\n        self.assertEqual(distance_matrix.iloc[0, 0], 0)\n    def test_case_6(self):\n        # Test empty list\n        input_data = []\n        with self.assertRaises(IndexError):\n            task_func(input_data)\n    def test_case_7(self):\n        # Test larger dataset\n        input_data = [list(range(100)) for _ in range(50)]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (50, 100))\n        self.assertEqual(distance_matrix.shape, (50, 50))\n        # No specific values check due to complexity\n    def test_case_8(self):\n        # Test single element list\n        input_data = [[1]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (1, 1))\n        self.assertEqual(distance_matrix.shape, (1, 1))\n        self.assertEqual(distance_matrix.iloc[0, 0], 0)\n    def test_case_9(self):\n        # Test with different types in list\n        input_data = [[1, 2, 3], [\"a\", \"b\", \"c\"]]\n        with self.assertRaises(TypeError):\n            task_func(input_data)\n    def test_case_10(self):\n        # Test with a more complex numerical list (including floats and negatives)\n        input_data = [[-1.5, 2.3, 4.5], [0, 0, 0], [5.5, -2.3, 3.1]]\n        df, distance_matrix = task_func(input_data)\n        self.assertEqual(df.shape, (3, 3))\n        self.assertEqual(distance_matrix.shape, (3, 3))\n        # Define expected distances based on manual or precise calculation\n        expected_distances = [\n            [0.0, 5.27162, 8.49235],\n            [5.27162, 0.0, 6.71937],\n            [8.49235, 6.71937, 0.0],\n        ]\n        # Assert each calculated distance matches the expected value\n        for i in range(len(expected_distances)):\n            for j in range(len(expected_distances[i])):\n                self.assertAlmostEqual(\n                    distance_matrix.iloc[i, j], expected_distances[i][j], places=5\n                )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a DataFrame to find videos with titles containing \"how\" or \"what\" and visualizes their like ratios. The like ratio for each video is calculated by dividing the number of likes by the number of views. This function generates a bar plot of the like ratios for these specific videos. If the DataFrame is empty, lacks the required columns, or contains no titles matching the criteria, an empty subplot is returned.\nNote that: The function checks for the presence of the necessary data columns ('Title', 'Views', 'Likes') and whether there are any entries matching the search criteria. If these conditions are not met, it returns an empty plot.\nThe function should output with:\n    Axes: A matplotlib.axes.Axes object of the bar plot. The plot will be empty if the DataFrame is insufficient\n    or no video titles match the search criteria.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import re\nimport matplotlib.pyplot as plt\ndef task_func(df):\n\n    if df.empty or 'Likes' not in df.columns or 'Views' not in df.columns or 'Title' not in df.columns:\n        fig, ax = plt.subplots()\n        return ax\n\n    pattern = re.compile(r'(how|what)', re.IGNORECASE)\n    interesting_videos = df[df['Title'].apply(lambda x: bool(pattern.search(x)))]\n\n    if interesting_videos.empty:\n        fig, ax = plt.subplots()\n        return ax\n\n    interesting_videos = interesting_videos.copy()  # Create a copy to avoid modifying the input df\n    interesting_videos['Like Ratio'] = interesting_videos['Likes'] / interesting_videos['Views']\n\n    ax = interesting_videos.plot(kind='bar', x='Title', y='Like Ratio', legend=False)\n    ax.set_ylabel('Like Ratio')\n    ax.set_xticklabels(interesting_videos['Title'], rotation='vertical')\n\n    return ax",
        "test": "# Integrating the test_cases function into the TestCases class methods and running the tests\nimport pandas as pd\nimport unittest\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data_1 = pd.DataFrame({\n            'Title': ['How to code?', 'What is Python?', 'The art of programming', 'How to cook?', 'What is life?'],\n            'Views': [1000, 500, 200, 300, 800],\n            'Likes': [500, 250, 100, 150, 600]\n        })\n        ax = task_func(data_1)\n        self.assertIsInstance(ax, matplotlib.axes.Axes, \"The returned object should be of type Axes.\")\n        y_data = [rect.get_height() for rect in ax.patches]\n        expected_y_data = [0.5, 0.5, 0.5, 0.75]\n        self.assertEqual(y_data, expected_y_data, f\"Expected {expected_y_data}, but got {y_data}\")\n    def test_case_2(self):\n        data_2 = pd.DataFrame({\n            'Title': ['How to swim?', 'What is Java?', 'The beauty of nature', 'How to paint?', 'What is art?'],\n            'Views': [1200, 400, 250, 350, 900],\n            'Likes': [600, 200, 125, 175, 450]\n        })\n        ax = task_func(data_2)\n        self.assertIsInstance(ax, matplotlib.axes.Axes, \"The returned object should be of type Axes.\")\n        y_data = [rect.get_height() for rect in ax.patches]\n        expected_y_data = [0.5, 0.5, 0.5, 0.5]\n        self.assertEqual(y_data, expected_y_data, f\"Expected {expected_y_data}, but got {y_data}\")\n    def test_case_3(self):\n        data_3 = pd.DataFrame({\n            'Title': [],\n            'Views': [],\n            'Likes': []\n        })\n        ax = task_func(data_3)\n        self.assertIsInstance(ax, matplotlib.axes.Axes, \"The returned object should be of type Axes.\")\n    def test_case_4(self):\n        data_4 = pd.DataFrame({\n            'Title': ['Learning to code', 'Python basics', 'Advanced programming', 'Cooking basics',\n                      'Life and philosophy'],\n            'Views': [1100, 450, 220, 320, 850],\n            'Likes': [550, 225, 110, 160, 425]\n        })\n        ax = task_func(data_4)\n        self.assertIsInstance(ax, matplotlib.axes.Axes, \"The returned object should be of type Axes.\")\n    def test_case_5(self):\n        data_5 = pd.DataFrame({\n            'Title': ['How to sing?', 'What is C++?', 'The mysteries of the universe', 'How to dance?',\n                      'What is time?'],\n            'Views': [1300, 420, 270, 370, 950],\n            'Likes': [650, 210, 135, 185, 475]\n        })\n        ax = task_func(data_5)\n        self.assertIsInstance(ax, matplotlib.axes.Axes, \"The returned object should be of type Axes.\")\n        y_data = [rect.get_height() for rect in ax.patches]\n        expected_y_data = [0.5, 0.5, 0.5, 0.5]\n        self.assertEqual(y_data, expected_y_data, f\"Expected {expected_y_data}, but got {y_data}\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates an HTTP POST request handler for processing incoming data. The data is expected to be in JSON format with a key 'data'. The handler responds with a 200 success message if the data is valid, or an error message otherwise. The type of the response can be retrieved as 'content-type' and the length of the response as 'content-length'. There are two types of error messages: 'Content-Type header is not application/json' and 'No data key in request'.\nNote that: Notes: If the 'content-type' header is not 'application/json', indicating the client sent a request with an unsupported format. This condition sends a 400 Bad Request response to the client with the message \"Content-Type header is not application/json\". If the JSON object does not contain the 'data' key, leading to a 400 Bad Request response with the message \"No data key in request\". If the request body does not contain valid JSON, resulting in a 400 Bad Request response with the message \"Invalid JSON\".\nThe function should output with:\n    function: A class that handles HTTP POST requests and validates incoming data.\nYou should write self-contained code starting with:\n```\nimport cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\ndef task_func():\n```",
        "gt": "import cgi\nimport http.server\nimport json\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\ndef task_func():\n    class PostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n            if ctype != 'application/json':\n                self.send_error(400, 'Content-Type header is not application/json')\n                return\n\n            length = int(self.headers.get('content-length'))\n            try:\n                message = json.loads(self.rfile.read(length))\n            except json.JSONDecodeError:\n                self.send_error(400, 'Invalid JSON')\n                return\n\n            if 'data' not in message:\n                self.send_error(400, 'No data key in request')\n                return\n\n            self.send_response(200)\n            self.send_header('content-type', 'application/json')\n            self.end_headers()\n            response = json.dumps(SUCCESS_RESPONSE).encode()\n            self.wfile.write(response)\n\n    return PostRequestHandler",
        "test": "import unittest\nfrom unittest.mock import MagicMock, patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.mock_server = MagicMock()\n        self.mock_request = MagicMock()\n        self.mock_client_address = ('127.0.0.1', 8080)\n    @patch('http.server.BaseHTTPRequestHandler.handle')\n    def test_invalid_content_type(self, mock_handle):\n        \"\"\"Test handler response to invalid Content-Type.\"\"\"\n        handler = task_func()\n        request_handler = handler(self.mock_request, self.mock_client_address, self.mock_server)\n        request_handler.headers = {'content-type': 'text/plain'}\n        request_handler.send_error = MagicMock()\n        request_handler.do_POST()\n        request_handler.send_error.assert_called_with(400, 'Content-Type header is not application/json')\n    def test_class_properties(self):\n        \"\"\"Test if task_func returns a class that is a type and subclass of BaseHTTPRequestHandler.\"\"\"\n        handler_class = task_func()\n        self.assertTrue(isinstance(handler_class, type))\n        self.assertTrue(issubclass(handler_class, http.server.BaseHTTPRequestHandler))\n    @patch('http.server.BaseHTTPRequestHandler.handle')\n    def test_valid_json_data(self, mock_handle):\n        \"\"\"Test handler response to valid JSON with 'data' key.\"\"\"\n        valid_json = json.dumps({'data': 'Test data'}).encode('utf-8')\n        handler = task_func()\n        request_handler = handler(self.mock_request, self.mock_client_address, self.mock_server)\n        request_handler.headers = {'content-type': 'application/json', 'content-length': str(len(valid_json))}\n        request_handler.rfile.read = MagicMock(return_value=valid_json)\n        request_handler.send_response = MagicMock()\n        request_handler.send_header = MagicMock()  # Mock send_header as well\n        request_handler.end_headers = MagicMock()\n        request_handler.wfile.write = MagicMock()\n        # Set necessary attributes to avoid AttributeError\n        request_handler.request_version = 'HTTP/1.1'  # Add this line\n        request_handler.do_POST()\n        request_handler.send_response.assert_called_with(200)\n        request_handler.wfile.write.assert_called()\n    @patch('http.server.BaseHTTPRequestHandler.handle')\n    def test_invalid_json(self, mock_handle):\n        \"\"\"Test handler response to invalid JSON.\"\"\"\n        invalid_json = b'{\"data\": \"Test data\", invalid}'\n        handler = task_func()\n        request_handler = handler(self.mock_request, self.mock_client_address, self.mock_server)\n        request_handler.headers = {'content-type': 'application/json', 'content-length': str(len(invalid_json))}\n        request_handler.rfile.read = MagicMock(return_value=invalid_json)\n        request_handler.send_error = MagicMock()\n        request_handler.do_POST()\n        request_handler.send_error.assert_called_with(400, 'Invalid JSON')\n    @patch('http.server.BaseHTTPRequestHandler.handle')\n    def test_missing_data_key(self, mock_handle):\n        \"\"\"Test handler response to JSON without 'data' key.\"\"\"\n        json_without_data = json.dumps({'wrongKey': 'No data here'}).encode('utf-8')\n        handler = task_func()\n        request_handler = handler(self.mock_request, self.mock_client_address, self.mock_server)\n        request_handler.headers = {'content-type': 'application/json', 'content-length': str(len(json_without_data))}\n        request_handler.rfile.read = MagicMock(return_value=json_without_data)\n        request_handler.send_error = MagicMock()\n        request_handler.do_POST()\n        request_handler.send_error.assert_called_with(400, 'No data key in request')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a list representing a color pattern. The pattern consists of 'n_colors' elements and alternates between a cyclic sequence of colors as defined in the parameter 'colors', and random colors from the same list. Optionally, a seed for the random number generator can be provided for repeatable randomness. If n_colors is smaller than or equal to zero an empty list is returned. >>> colors = ['Brown', 'Green', 'Black'] >>> color_pattern = task_func(12, colors=colors, rng_seed=42) >>> print(color_pattern) ['Brown', 'Black', 'Green', 'Brown', 'Black', 'Brown', 'Brown', 'Black', 'Green', 'Green', 'Black', 'Brown']\nThe function should output with:\n    list: A list representing the color pattern. Each element of the list is a string indicating\n    the color. For example, with n_colors=4 and a specific seed, the result could be consistent\n    across calls with the same seed.\nYou should write self-contained code starting with:\n```\nfrom itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n```",
        "gt": "from itertools import cycle\nfrom random import choice, seed\ndef task_func(n_colors, colors=['Red', 'Green', 'Blue', 'Yellow', 'Purple'], rng_seed=None):\n\n    # Setting the seed for the random number generator\n    if rng_seed is not None:\n        seed(rng_seed)\n\n    color_cycle = cycle(colors)\n    color_pattern = []\n\n    for _ in range(n_colors):\n        color = next(color_cycle) if _ % 2 == 0 else choice(colors)\n        color_pattern.append(color)\n\n    return color_pattern",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_small_number_of_colors(self):\n        # Testing with a small number of colors and a fixed seed for repeatability\n        color_pattern = task_func(4, rng_seed=123)\n        expected_pattern = ['Red', 'Red', 'Green', 'Blue']  # This pattern is based on the seed value\n        self.assertEqual(color_pattern, expected_pattern)\n    def test_large_number_of_colors(self):\n        # Testing with a large number of colors to check the function's behavior with more extensive patterns\n        # Here, we're not checking for exact match due to randomness, but rather size and content\n        color_pattern = task_func(100, rng_seed=123)\n        self.assertEqual(len(color_pattern), 100)\n        self.assertTrue(all(color in ['Red', 'Green', 'Blue', 'Yellow', 'Purple'] for color in color_pattern))\n    def test_zero_colors(self):\n        # Testing with zero colors, which should return an empty list\n        color_pattern = task_func(0, rng_seed=123)\n        self.assertEqual(color_pattern, [])\n    def test_negative_number_of_colors(self):\n        # Testing with a negative number, which should not break the function and return an empty list\n        color_pattern = task_func(-4, rng_seed=123)\n        self.assertEqual(color_pattern, [])\n    def test_repeatability_with_same_seed(self):\n        # Testing the function with the same seed value should produce the same results\n        color_pattern1 = task_func(10, rng_seed=123)\n        color_pattern2 = task_func(10, rng_seed=123)\n        self.assertEqual(color_pattern1, color_pattern2)\n    def test_randomness_with_different_seeds(self):\n        # Testing the function with different seeds should produce different results\n        color_pattern1 = task_func(10, rng_seed=123)\n        color_pattern2 = task_func(10, rng_seed=456)\n        self.assertNotEqual(color_pattern1, color_pattern2)\n    def test_no_seed_provided(self):\n        # Testing the function without a seed should still produce valid results (though they can't be predetermined)\n        color_pattern = task_func(10)  # No seed provided\n        self.assertEqual(len(color_pattern), 10)\n        self.assertTrue(all(color in ['Red', 'Green', 'Blue', 'Yellow', 'Purple'] for color in color_pattern))\n    def test_custom_colors(self):\n        colors = ['Brown', 'White', 'Black', \"Orange\"]\n        color_pattern = task_func(10, colors=colors, rng_seed=12)  # No seed provided\n        self.assertTrue(all(color in colors for color in color_pattern))\n        expected = ['Brown',\n                    'Orange',\n                    'White',\n                    'Black',\n                    'Black',\n                    'Black',\n                    'Orange',\n                    'White',\n                    'Brown',\n                    'Orange']\n        self.assertEqual(color_pattern, expected)\n    def test_cyclicity(self):\n        color_pattern = task_func(1000, rng_seed=1234)  # No seed provided\n        colors = ['Red', 'Green', 'Blue', 'Yellow', 'Purple']\n        color_cycle = cycle(colors)\n        for i in range(500):\n            self.assertEqual(color_pattern[2*i], next(color_cycle))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate diagrams for the sine and cosine functions over the interval [0, 2\u03c0]. This function plots the sine and cosine functions, setting appropriate titles and axis labels. The sine function plot is labeled 'Sine function', with x-axis labeled 'x' and y-axis labeled 'sin(x)'. The cosine function plot is labeled 'Cosine function', with x-axis labeled 'x' and y-axis labeled 'cos(x)'.\nThe function should output with:\n    Figure: A Matplotlib Figure object containing the plots.\n    ndarray: An array of Matplotlib Axes objects for the subplots, where:\n    The first Axes object contains the sine function plot.\n    The second Axes object contains the cosine function plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func():\n    x_values = np.linspace(0, 2 * np.pi, 400)\n    fig, axs = plt.subplots(2)\n    \n    axs[0].plot(x_values, np.sin(x_values))\n    axs[0].set_title('Sine function')\n    axs[0].set_xlabel('x')\n    axs[0].set_ylabel('sin(x)')\n    \n    axs[1].plot(x_values, np.cos(x_values))\n    axs[1].set_title('Cosine function')\n    axs[1].set_xlabel('x')\n    axs[1].set_ylabel('cos(x)')\n    \n    plt.tight_layout()\n    \n    return fig, axs",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.axs = task_func()\n    def test_return_types(self):\n        self.assertIsInstance(self.fig, plt.Figure)\n        self.assertEqual(len(self.axs), 2)\n        for ax in self.axs:\n            self.assertIsInstance(ax, plt.Axes)\n    def test_plot_titles(self):\n        self.assertEqual(self.axs[0].get_title(), 'Sine function')\n        self.assertEqual(self.axs[1].get_title(), 'Cosine function')\n    def test_axes_labels(self):\n        self.assertEqual(self.axs[0].get_xlabel(), 'x')\n        self.assertEqual(self.axs[0].get_ylabel(), 'sin(x)')\n        self.assertEqual(self.axs[1].get_xlabel(), 'x')\n        self.assertEqual(self.axs[1].get_ylabel(), 'cos(x)')\n    def test_plot_contents(self):\n        sine_line = self.axs[0].lines[0]\n        cosine_line = self.axs[1].lines[0]\n        np.testing.assert_array_almost_equal(sine_line.get_ydata(), np.sin(sine_line.get_xdata()), decimal=5)\n        np.testing.assert_array_almost_equal(cosine_line.get_ydata(), np.cos(cosine_line.get_xdata()), decimal=5)\n    def test_x_values_range(self):\n        for ax in self.axs:\n            line = ax.lines[0]\n            self.assertTrue(np.all(line.get_xdata() >= 0) and np.all(line.get_xdata() <= 2 * np.pi))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Archive all JSON files in a given directory by moving them to a specified archive directory.\nThe function should output with:\n    tuple: A tuple containing a boolean value and a list of error messages.\n    The boolean is True if all files are successfully moved, and False otherwise.\n    The list contains error messages for each file that failed to move.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n```",
        "gt": "import os\nimport glob\nimport shutil\ndef task_func(directory, archive_dir='archive'):\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n\n    return (len(error_messages) == 0, error_messages)",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a test directory with some JSON files and some other file types\n        os.makedirs('test_data', exist_ok=True)\n        with open('test_data/test1.json', 'w') as f:\n            f.write('{}')\n        with open('test_data/test2.json', 'w') as f:\n            f.write('{}')\n        with open('test_data/test.txt', 'w') as f:\n            f.write('Hello')\n        # Create a different archive directory for one of the tests\n        os.makedirs('custom_archive', exist_ok=True)\n        os.makedirs('archive', exist_ok=True)\n    def tearDown(self):\n        # Clean up test directories and files\n        shutil.rmtree('test_data')\n        shutil.rmtree('archive')\n        shutil.rmtree('custom_archive')\n    def test_case_1(self):\n        \"\"\"Test archiving JSON files with the default archive directory.\"\"\"\n        success, errors = task_func('test_data')\n        self.assertTrue(success)\n        self.assertEqual(len(errors), 0)\n        self.assertTrue(os.path.exists('archive/test1.json'))\n        self.assertTrue(os.path.exists('archive/test2.json'))\n    def test_case_2(self):\n        \"\"\"Test archiving with a custom archive directory.\"\"\"\n        success, errors = task_func('test_data', 'custom_archive')\n        self.assertTrue(success)\n        self.assertEqual(len(errors), 0)\n        self.assertTrue(os.path.exists('custom_archive/test1.json'))\n        self.assertTrue(os.path.exists('custom_archive/test2.json'))\n    def test_case_3(self):\n        \"\"\"Test with a nonexistent source directory.\"\"\"\n        success, errors = task_func('nonexistent_directory')\n        self.assertTrue(success)\n        self.assertEqual(len(errors), 0)\n    def test_case_4(self):\n        \"\"\"Test with an empty directory.\"\"\"\n        os.makedirs('empty_directory', exist_ok=True)\n        success, errors = task_func('empty_directory')\n        self.assertTrue(success)\n        self.assertEqual(len(errors), 0)\n        shutil.rmtree('empty_directory')\n    def test_case_5(self):\n        \"\"\"Test that non-JSON files are not archived.\"\"\"\n        success, errors = task_func('test_data')\n        self.assertTrue(success)\n        self.assertEqual(len(errors), 0)\n        self.assertFalse(os.path.exists('archive/test.txt'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Submits a form on a given webpage using mechanize and extracts the title of the response page.\nNote that: Notes: If the page has no title, it returns 'No Title'.\nThe function should output with:\n    str: The title of the page resulting from the form submission.\nYou should write self-contained code starting with:\n```\nimport mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n```",
        "gt": "import mechanize\nfrom bs4 import BeautifulSoup\ndef task_func(url, form_id, data):\n    br = mechanize.Browser()\n    br.open(url)\n    br.select_form(nr=form_id)\n\n    for key, value in data.items():\n        br[key] = value\n\n    response = br.submit()\n\n    soup = BeautifulSoup(response.read(), 'html.parser')\n    title = soup.title.string if soup.title else 'No Title'\n\n    return title",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('mechanize.Browser')\n    def test_return_type(self, mock_browser):\n        \"\"\" Test that the function returns a string. \"\"\"\n        mock_browser.return_value.open.return_value = MagicMock()\n        mock_browser.return_value.select_form.return_value = MagicMock()\n        mock_browser.return_value.submit.return_value.read.return_value = \"<html><head><title>Test Page</title></head></html>\"\n        result = task_func('https://www.example.com/login', 0, {'username': 'admin'})\n        self.assertIsInstance(result, str)\n    @patch('mechanize.Browser')\n    def test_form_submission(self, mock_browser):\n        \"\"\" Test form submission with mock data. \"\"\"\n        mock_browser.return_value.open.return_value = MagicMock()\n        mock_browser.return_value.select_form.return_value = MagicMock()\n        mock_browser.return_value.submit.return_value.read.return_value = \"<html><head><title>Successful Submission</title></head></html>\"\n        result = task_func('https://www.example.com/submit', 0, {'data': 'test'})\n        self.assertEqual(\"Successful Submission\", result)\n    @patch('mechanize.Browser')\n    def test_incorrect_form_id(self, mock_browser):\n        \"\"\" Test handling of incorrect form ID. \"\"\"\n        mock_browser.return_value.open.return_value = MagicMock()\n        mock_browser.return_value.select_form.side_effect = mechanize.FormNotFoundError\n        with self.assertRaises(mechanize.FormNotFoundError):\n            task_func('https://www.example.com/login', 99, {'username': 'admin'})\n    @patch('mechanize.Browser')\n    def test_no_title_page(self, mock_browser):\n        \"\"\" Test handling of pages with no title. \"\"\"\n        mock_browser.return_value.open.return_value = MagicMock()\n        mock_browser.return_value.select_form.return_value = MagicMock()\n        mock_browser.return_value.submit.return_value.read.return_value = \"<html><body><h1>No Title Page</h1></body></html>\"\n        result = task_func('https://www.example.com/no_title', 0, {})\n        self.assertEqual(\"No Title\", result)\n    @patch('mechanize.Browser')\n    def test_different_data_inputs(self, mock_browser):\n        \"\"\" Test the function with different data inputs. \"\"\"\n        mock_browser.return_value.open.return_value = MagicMock()\n        mock_browser.return_value.select_form.return_value = MagicMock()\n        mock_browser.return_value.submit.return_value.read.return_value = \"<html><head><title>Different Input</title></head></html>\"\n        result = task_func('https://www.example.com/different', 0, {'new_field': 'new_value'})\n        self.assertIn(\"Different Input\", result)\n    @patch('mechanize.Browser')\n    def test_invalid_url(self, mock_browser):\n        \"\"\" Test handling of invalid URL. \"\"\"\n        mock_browser.return_value.open.side_effect = mechanize.URLError(None)\n        with self.assertRaises(mechanize.URLError):\n            task_func('invalid_url', 0, {'username': 'admin'})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process a multi-line string by replacing tabs with spaces and converting it into a pandas DataFrame. Each non-empty line of the input string is transformed into a separate row in the DataFrame. The function specifically filters out empty lines and replaces tabs with single spaces in the remaining lines.\nNote that: The function excludes lines that are empty or contain only whitespace. Tabs within the lines are replaced with a single space. For instance, a '\\\\t' character in the input string will be replaced by ' ' in the output DataFrame.\nThe function should output with:\n    pd.DataFrame: A DataFrame with a single column named 'Text'. Each row in this column corresponds to a non-empty\n    line from the input string, with tabs replaced by spaces.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n```",
        "gt": "import re\nimport pandas as pd\ndef task_func(input_string: str) -> pd.DataFrame:\n    input_string = input_string.replace('\\\\n', '\\n').replace('\\\\t', ' ')\n    # Split the input string into lines and filter out empty lines\n    lines = [line for line in input_string.split(\"\\n\") if line.strip()]\n    # Replace tabs with spaces in each line\n    lines = [re.sub(\"\\t\", \" \", line) for line in lines]\n    # Create a DataFrame from the processed lines\n    return pd.DataFrame(lines, columns=[\"Text\"])",
        "test": "import pandas as pd\nimport unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for task_func.\"\"\"\n    def test_basic_string(self):\n        \"\"\"\n        Test with a basic multi-line string.\n        \"\"\"\n        input_str = \"line1\\nline2 with a\\ttab\\nline3\"\n        expected_output = pd.DataFrame({\"Text\": [\"line1\", \"line2 with a tab\", \"line3\"]})\n        pd.testing.assert_frame_equal(task_func(input_str), expected_output)\n    def test_empty_string(self):\n        \"\"\"\n        Test with an empty string.\n        \"\"\"\n        input_str = \"\"\n        expected_output = pd.DataFrame(columns=[\"Text\"])\n        pd.testing.assert_frame_equal(task_func(input_str), expected_output)\n    def test_string_with_empty_lines(self):\n        \"\"\"\n        Test with a string that contains empty lines.\n        \"\"\"\n        input_str = \"line1\\n\\nline3\"\n        expected_output = pd.DataFrame({\"Text\": [\"line1\", \"line3\"]})\n        pd.testing.assert_frame_equal(task_func(input_str), expected_output)\n    def test_string_with_only_tabs(self):\n        \"\"\"\n        Test with a string that contains only tabs.\n        \"\"\"\n        input_str = \"\\t\\t\\t\"\n        expected_output = pd.DataFrame(columns=[\"Text\"])\n        pd.testing.assert_frame_equal(task_func(input_str), expected_output)\n    def test_string_with_mixed_whitespace(self):\n        \"\"\"\n        Test with a string that contains a mix of tabs and spaces.\n        \"\"\"\n        input_str = \"line1\\n \\t \\nline3\"\n        expected_output = pd.DataFrame({\"Text\": [\"line1\", \"line3\"]})\n        pd.testing.assert_frame_equal(task_func(input_str), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a CSV file, convert the string representations of dictionaries in a specific column ('dict_column') to Python dictionaries, and visualize the data with Seaborn's pairplot.\nThe function should output with:\n    tuple: A tuple containing:\n    df (DataFrame): The DataFrame after reading and processing the CSV file.\n    ax (PairGrid): Seaborn's PairGrid object after plotting.\nYou should write self-contained code starting with:\n```\nimport ast\nimport pandas as pd\nimport seaborn as sns\ndef task_func(csv_file):\n```",
        "gt": "import ast\nimport pandas as pd\nimport seaborn as sns\ndef task_func(csv_file):\n    df = pd.read_csv(csv_file)\n    df[\"dict_column\"] = df[\"dict_column\"].apply(ast.literal_eval)\n    # Convert 'dict_column' to string representation for plotting\n    df[\"hue_column\"] = df[\"dict_column\"].apply(str)\n    ax = sns.pairplot(df, hue=\"hue_column\")\n    return df, ax",
        "test": "import unittest\nimport matplotlib\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = \"data/task_func\"\n        os.makedirs(self.test_dir, exist_ok=True)\n        df = pd.DataFrame(\n            {\n                \"dict_column\": [\n                    \"{'A' : 1, 'B' : 2, 'C' : 3}\",\n                    \"{'D' : 4, 'E' : 5, 'F' : 6}\",\n                ],\n                \"Value1\": [1, 2],\n                \"Value2\": [3, 4],\n            }\n        )\n        self.f_1 = os.path.join(self.test_dir, \"csv_1.csv\")\n        df.to_csv(self.f_1, index=False)\n        df = pd.DataFrame(\n            {\n                \"dict_column\": [\n                    \"{'G' : 7, 'H' : 8}\",\n                    \"{'I' : 9, 'J' : 10}\",\n                    \"{'G' : 7, 'H' : 8}\",\n                    \"{'I' : 9, 'J' : 10}\",\n                ],\n                \"Value1\": [2, 1, 2, 2],\n                \"Value2\": [1, 1, 3, 1],\n            }\n        )\n        self.f_2 = os.path.join(self.test_dir, \"csv_2.csv\")\n        df.to_csv(self.f_2, index=False)\n        df = pd.DataFrame(\n            {\n                \"dict_column\": [\n                    \"{'K' : 11, 'L' : 12, 'M' : 13, 'N' : 14}\",\n                ],\n                \"Value1\": [1],\n                \"Value2\": [2],\n            }\n        )\n        self.f_3 = os.path.join(self.test_dir, \"csv_3.csv\")\n        df.to_csv(self.f_3, index=False)\n        df = pd.DataFrame(\n            {\n                \"dict_column\": [\n                    \"{'O' : 15}\",\n                    \"{'P' : 16}\",\n                    \"{'Q' : 17}\",\n                    \"{'R' : 18}\",\n                    \"{'Q' : 17}\",\n                    \"{'P' : 16}\",\n                    \"{'P' : 16}\",\n                    \"{'P' : 16}\",\n                ],\n                \"Value1\": [1, 2, 2, 1, 1, 1, 2, 2],\n                \"Value2\": [1, 1, 1, 1, 2, 2, 2, 2],\n            }\n        )\n        self.f_4 = os.path.join(self.test_dir, \"csv_4.csv\")\n        df.to_csv(self.f_4, index=False)\n        df = pd.DataFrame(\n            {\n                \"dict_column\": [\n                    \"{'S' : 19, 'T' : 20, 'U' : 21, 'V' : 22}\",\n                    \"{'W' : 23, 'X' : 24, 'Y' : 25, 'Z' : 26}\",\n                ],\n                \"Value1\": [1, 2],\n                \"Value2\": [1, 2],\n            }\n        )\n        self.f_5 = os.path.join(self.test_dir, \"csv_5.csv\")\n        df.to_csv(self.f_5, index=False)\n    def tearDown(self) -> None:\n        import shutil\n        shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        df, ax = task_func(self.f_1)\n        # Assertions for DataFrame\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 2)\n        self.assertTrue(\"dict_column\" in df.columns)\n        self.assertTrue(isinstance(df.iloc[0][\"dict_column\"], dict))\n        # Assertions for Seaborn PairGrid (plot)\n        self.assertIsInstance(ax, sns.axisgrid.PairGrid)\n        self.assertTrue(hasattr(ax, \"fig\"))\n        self.assertIsInstance(ax.fig, matplotlib.figure.Figure)\n    def test_case_2(self):\n        df, ax = task_func(self.f_2)\n        # Assertions for DataFrame\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 4)\n        self.assertTrue(\"dict_column\" in df.columns)\n        self.assertTrue(isinstance(df.iloc[0][\"dict_column\"], dict))\n        # Assertions for Seaborn PairGrid (plot)\n        self.assertIsInstance(ax, sns.axisgrid.PairGrid)\n        self.assertTrue(hasattr(ax, \"fig\"))\n        self.assertIsInstance(ax.fig, matplotlib.figure.Figure)\n    def test_case_3(self):\n        df, ax = task_func(self.f_3)\n        # Assertions for DataFrame\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 1)\n        self.assertTrue(\"dict_column\" in df.columns)\n        self.assertTrue(isinstance(df.iloc[0][\"dict_column\"], dict))\n        # Assertions for Seaborn PairGrid (plot)\n        self.assertIsInstance(ax, sns.axisgrid.PairGrid)\n        self.assertTrue(hasattr(ax, \"fig\"))\n        self.assertIsInstance(ax.fig, matplotlib.figure.Figure)\n    def test_case_4(self):\n        df, ax = task_func(self.f_4)\n        # Assertions for DataFrame\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 8)\n        self.assertTrue(\"dict_column\" in df.columns)\n        self.assertTrue(isinstance(df.iloc[0][\"dict_column\"], dict))\n        # Assertions for Seaborn PairGrid (plot)\n        self.assertIsInstance(ax, sns.axisgrid.PairGrid)\n        self.assertTrue(hasattr(ax, \"fig\"))\n        self.assertIsInstance(ax.fig, matplotlib.figure.Figure)\n    def test_case_5(self):\n        df, ax = task_func(self.f_5)\n        # Assertions for DataFrame\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 2)\n        self.assertTrue(\"dict_column\" in df.columns)\n        self.assertTrue(isinstance(df.iloc[0][\"dict_column\"], dict))\n        # Assertions for Seaborn PairGrid (plot)\n        self.assertIsInstance(ax, sns.axisgrid.PairGrid)\n        self.assertTrue(hasattr(ax, \"fig\"))\n        self.assertIsInstance(ax.fig, matplotlib.figure.Figure)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a numeric array from the \"original\" list, normalize the array, and draw the original and normalized arrays. The function will plot the original and normalized arrays with a title of 'Original vs. Normalized Data'.\nThe function should output with:\n    np.array: A numpy array for the original data.\n    np.array: Normalized array.\n    matplotlib.axes.Axes: Axes object with the plotted data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\ndef task_func(original):\n    arr = np.array([b for (a, b) in original])\n    \n    # Check if the array is empty to avoid normalization error\n    if arr.size == 0:\n        norm_arr = arr\n    else:\n        norm_arr = preprocessing.normalize([arr])[0]\n    \n    # Plotting the data\n    fig, ax = plt.subplots()\n    ax.plot(arr, label='Original')\n    ax.plot(norm_arr, label='Normalized')\n    ax.legend()\n    ax.set_title(\"Original vs. Normalized Data\")\n    \n    return arr, norm_arr, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Simple input\n        original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n        arr, norm_arr, ax = task_func(original)\n        \n        # Test the returned arrays\n        np.testing.assert_array_equal(arr, np.array([1, 2, 3, 4]))\n        np.testing.assert_allclose(norm_arr, np.array([0.18257419, 0.36514837, 0.54772256, 0.73029674]))\n        \n        # Test plot attributes\n        self.assertEqual(ax.get_title(), \"Original vs. Normalized Data\")\n        self.assertTrue('Original' in [line.get_label() for line in ax.lines])\n        self.assertTrue('Normalized' in [line.get_label() for line in ax.lines])\n    def test_case_2(self):\n        # Negative and zero values in input\n        original = [('a', -1), ('b', 0), ('c', 3)]\n        arr, norm_arr, ax = task_func(original)\n        \n        # Test the returned arrays\n        np.testing.assert_array_equal(arr, np.array([-1, 0, 3]))\n        \n        # Normalize manually to check\n        manual_norm = arr / np.linalg.norm(arr)\n        np.testing.assert_allclose(norm_arr, manual_norm)\n        \n        # Test plot attributes\n        self.assertEqual(ax.get_title(), \"Original vs. Normalized Data\")\n        self.assertTrue('Original' in [line.get_label() for line in ax.lines])\n        self.assertTrue('Normalized' in [line.get_label() for line in ax.lines])\n    def test_case_3(self):\n        # Single value in input\n        original = [('a', 5)]\n        arr, norm_arr, ax = task_func(original)\n        \n        # Test the returned arrays\n        np.testing.assert_array_equal(arr, np.array([5]))\n        np.testing.assert_allclose(norm_arr, np.array([1.0]))  # Normalized value of a single number is 1\n        \n        # Test plot attributes\n        self.assertEqual(ax.get_title(), \"Original vs. Normalized Data\")\n        self.assertTrue('Original' in [line.get_label() for line in ax.lines])\n        self.assertTrue('Normalized' in [line.get_label() for line in ax.lines])\n    def test_case_4(self):\n        # Multiple same values in input\n        original = [('a', 4), ('b', 4), ('c', 4), ('d', 4)]\n        arr, norm_arr, ax = task_func(original)\n        \n        # Test the returned arrays\n        np.testing.assert_array_equal(arr, np.array([4, 4, 4, 4]))\n        \n        # Normalize manually to check\n        manual_norm = arr / np.linalg.norm(arr)\n        np.testing.assert_allclose(norm_arr, manual_norm)\n        \n        # Test plot attributes\n        self.assertEqual(ax.get_title(), \"Original vs. Normalized Data\")\n        self.assertTrue('Original' in [line.get_label() for line in ax.lines])\n        self.assertTrue('Normalized' in [line.get_label() for line in ax.lines])\n        \n    def test_case_5(self):\n        # Empty input\n        original = []\n        arr, norm_arr, ax = task_func(original)\n        \n        # Test the returned arrays\n        np.testing.assert_array_equal(arr, np.array([]))\n        np.testing.assert_array_equal(norm_arr, np.array([]))\n        \n        # Test plot attributes\n        self.assertEqual(ax.get_title(), \"Original vs. Normalized Data\")\n        self.assertTrue('Original' in [line.get_label() for line in ax.lines])\n        self.assertTrue('Normalized' in [line.get_label() for line in ax.lines])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a word into a list of tuples, with each tuple containing a lowercase English letter from the word and its position in the alphabet. Then, split the given word into a list of words.\nThe function should output with:\n    list of tuples: Each tuple consists of a letter from the input string and its corresponding position in the alphabet.\nYou should write self-contained code starting with:\n```\nimport string\nimport wordninja\ndef task_func(word):\n```",
        "gt": "import string\nimport wordninja\ndef task_func(word):\n    ALPHABET = list(string.ascii_lowercase)\n    # Map each letter in the word to its corresponding alphabetical number\n    word_numbers = [ALPHABET.index(letter) + 1 for letter in word]\n    \n    # Combine each letter with its alphabetical number in a tuple\n    return [(word[i], word_numbers[i]) for i in range(len(word))],  wordninja.split(word)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_basic_word(self):\n        self.assertEqual(task_func('abc'), ([('a', 1), ('b', 2), ('c', 3)], ['abc']))\n        \n    def test_non_consecutive_letters(self):\n        self.assertEqual(task_func('ihatehim'), ([('i', 9), ('h', 8), ('a', 1), ('t', 20), ('e', 5), ('h', 8), ('i', 9), ('m', 13)], ['i', 'hate', 'him']))\n    \n    def test_single_letter(self):\n        self.assertEqual(task_func('hellohello'), ([('h', 8), ('e', 5), ('l', 12), ('l', 12), ('o', 15), ('h', 8), ('e', 5), ('l', 12), ('l', 12), ('o', 15)], ['hello', 'hello']))\n        \n    def test_repeated_letters(self):\n        self.assertEqual(task_func('aa'), ([('a', 1), ('a', 1)], ['a', 'a']))\n        \n    def test_empty_string(self):\n        self.assertEqual(task_func(''), ([], []))\n        \n    def test_long_word(self):\n        result = task_func('abcdefghijklmnopqrstuvwxyz')\n        ALPHABET = list(string.ascii_lowercase)\n        expected = [(letter, index + 1) for index, letter in enumerate(ALPHABET)]\n        self.assertEqual(result, (expected, ['abcde', 'fg', 'hi', 'j', 'klm', 'no', 'p', 'qrs', 'tu', 'vw', 'xyz']))\n        \n    def test_word_with_uppercase_should_fail(self):\n        with self.assertRaises(ValueError):\n            task_func('aBc')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function takes a pandas DataFrame and a column name as input and generates two subplots in one matplotlib figure: the first subplot is a histogram (with a kernel density estimate for numerical data), and the second is a box plot, representing the distribution of the values in the specified column.\nThe function should raise the exception for: The input df must be DataFrame, not be empty, and must contain the specified column, if it is not, the function will raise ValueError.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure object containing the histogram and box plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndef task_func(df, col):\n\n    if not isinstance(df, pd.DataFrame) or df.empty or col not in df.columns:\n        raise ValueError(\"The DataFrame is empty or the specified column does not exist.\")\n\n    fig, axes = plt.subplots(nrows=2, ncols=1)\n\n    # Plot histogram or count plot based on data type\n    if pd.api.types.is_numeric_dtype(df[col]):\n        axes[0].hist(df[col], bins=10, edgecolor='black', alpha=0.7)  # Using matplotlib's hist function for numerical data\n    else:\n        sns.countplot(x=df[col], ax=axes[0])\n\n    # Plot boxplot or strip plot based on data type\n    if pd.api.types.is_numeric_dtype(df[col]):\n        sns.boxplot(x=df[col], ax=axes[1])\n    else:\n        sns.stripplot(x=df[col], ax=axes[1], jitter=True)\n\n    return fig",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup data for the tests\n        self.numeric_df = pd.DataFrame({'numeric': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})\n        self.categorical_df = pd.DataFrame({'categorical': ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']})\n        self.mixed_df = pd.DataFrame({\n            'numeric': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            'categorical': ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']\n        })\n    def test_numeric_data(self):\n        \"Test with numeric data for histogram and box plot\"\n        fig = task_func(self.numeric_df, 'numeric')\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self.assertTrue(len(fig.axes[0].patches) > 0)\n        self.assertTrue(len(fig.axes[1].lines) > 0)\n        plt.close()\n    def test_categorical_data(self):\n        \"Test with categorical data for count plot and strip plot\"\n        fig = task_func(self.categorical_df, 'categorical')\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self.assertTrue(len(fig.axes[0].patches) > 0)\n        self.assertTrue(len(fig.axes[1].collections) > 0)\n        plt.close()\n    def test_mixed_data(self):\n        \"Test with DataFrame containing both numeric and categorical columns\"\n        fig = task_func(self.mixed_df, 'numeric')\n        self.assertIsInstance(fig, matplotlib.figure.Figure)\n        self.assertEqual(len(fig.axes), 2)\n        self.assertTrue(len(fig.axes[0].patches) > 0)\n        self.assertTrue(len(fig.axes[1].lines) > 0)\n    def test_invalid_column(self):\n        \"Test with a non-existent column\"\n        with self.assertRaises(Exception):\n            task_func(self.numeric_df, 'nonexistent')\n        plt.close()\n    def test_empty_dataframe(self):\n        \"Test with an empty DataFrame\"\n        empty_df = pd.DataFrame({'empty': []})\n        with self.assertRaises(ValueError):\n            task_func(empty_df, 'empty')\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the sum of each row in a 2D numpy array and plot these sums as a time series. This function takes a 2D numpy array and computes the sum of elements in each row. It then creates a Pandas DataFrame with these row sums and plots them as a time series, using dates starting from January 1, 2020, for each row. Handling Scenarios: - For non-empty arrays: The function computes the sum of elements for each row, stores these sums in a Pandas DataFrame, and then plots them. Each row in the plot represents the sum for a specific day, starting from January 1, 2020. - For empty arrays: The function creates an empty plot with the title 'Time Series of Row Sums' but without data. This is achieved by checking if the array size is zero (empty array) and if so, creating a subplot without any data.\nNote that: The function uses 'pandas' for DataFrame creation and 'matplotlib.pyplot' for plotting. The dates in the plot start from January 1, 2020, and each subsequent row represents the next day.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A plot representing the time series of row sums.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n```",
        "gt": "import pandas as pd\nfrom matplotlib import pyplot as plt\ndef task_func(arr):\n    if not arr.size:  # Check for empty array\n        _, ax = plt.subplots()\n        ax.set_title(\"Time Series of Row Sums\")\n        return ax\n\n    row_sums = arr.sum(axis=1)\n    df = pd.DataFrame(row_sums, columns=[\"Sum\"])\n    df.index = pd.date_range(start=\"1/1/2020\", periods=df.shape[0])\n    ax = df.plot(title=\"Time Series of Row Sums\")\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def test_basic_functionality(self):\n        \"\"\"Test the basic functionality of the function.\"\"\"\n        arr = np.array([[i + j for i in range(3)] for j in range(5)])\n        ax = task_func(arr)\n        # Check if the function returns Axes object\n        self.assertIsInstance(ax, plt.Axes)\n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Time Series of Row Sums\")\n        # Check if the data plotted matches the expected sum of rows\n        y_data = [line.get_ydata() for line in ax.get_lines()][0]\n        expected_sums = arr.sum(axis=1)\n        np.testing.assert_array_equal(y_data, expected_sums)\n    def test_empty_array(self):\n        \"\"\"Test the function with an empty array.\"\"\"\n        arr = np.array([])\n        ax = task_func(arr)\n        # Check if the function returns Axes object\n        self.assertIsInstance(ax, plt.Axes)\n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Time Series of Row Sums\")\n        # Check if the data plotted is empty\n        lines = ax.get_lines()\n        self.assertEqual(len(lines), 0)\n    def test_single_row_array(self):\n        \"\"\"Test the function with a single row array.\"\"\"\n        arr = np.array([[1, 2, 3]])\n        ax = task_func(arr)\n        # Check if the function returns Axes object\n        self.assertIsInstance(ax, plt.Axes)\n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Time Series of Row Sums\")\n        # Check if the data plotted matches the expected sum of the single row\n        y_data = [line.get_ydata() for line in ax.get_lines()][0]\n        expected_sum = arr.sum(axis=1)\n        np.testing.assert_array_equal(y_data, expected_sum)\n    def test_negative_values(self):\n        \"\"\"Test the function with negative values.\"\"\"\n        arr = np.array([[-1, -2, -3], [-4, -5, -6]])\n        ax = task_func(arr)\n        # Check if the function returns Axes object\n        self.assertIsInstance(ax, plt.Axes)\n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Time Series of Row Sums\")\n        # Check if the data plotted matches the expected sum of rows\n        y_data = [line.get_ydata() for line in ax.get_lines()][0]\n        expected_sums = arr.sum(axis=1)\n        np.testing.assert_array_equal(y_data, expected_sums)\n    def test_zero_values(self):\n        \"\"\"Test the function with zero values.\"\"\"\n        arr = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n        ax = task_func(arr)\n        # Check if the function returns Axes object\n        self.assertIsInstance(ax, plt.Axes)\n        # Check the title of the plot\n        self.assertEqual(ax.get_title(), \"Time Series of Row Sums\")\n        # Check if the data plotted matches the expected sum of rows\n        y_data = [line.get_ydata() for line in ax.get_lines()][0]\n        expected_sums = arr.sum(axis=1)\n        np.testing.assert_array_equal(y_data, expected_sums)\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Encrypt a string with a password, then write the encrypted string to a file. If the file or directory does not exist, create it.\nThe function should output with:\n    str: The encrypted string.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport base64\ndef task_func(filename, data, password):\n```",
        "gt": "import hashlib\nimport base64\ndef task_func(filename, data, password):\n    # Ensure the file exists\n    directory = os.path.dirname(filename)\n    os.makedirs(directory, exist_ok=True)\n    if not os.path.exists(filename):\n        open(filename, 'a').close()\n\n    # Encrypt the data using simple XOR operation with password hash as key\n    key = hashlib.sha256(password.encode()).digest()\n    encrypted_bytes = [byte ^ key[i % len(key)] for i, byte in enumerate(data.encode())]\n    encrypted = base64.b64encode(bytes(encrypted_bytes)).decode()\n\n    # Write to the file\n    with open(filename, 'w') as f:\n        f.write(encrypted)\n\n    return encrypted",
        "test": "import unittest\nimport os\nimport shutil\nOUTPUT_DIR = './output'\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        \"\"\"Clean up any files created during the tests.\"\"\"\n        # Check and remove the expected file if it exists\n        # if os.path.exists(FILE_PATH):\n        #     os.remove(FILE_PATH)\n        if os.path.exists(OUTPUT_DIR):\n            shutil.rmtree(OUTPUT_DIR)\n    def test_case_1(self):\n        # Testing basic encryption and file write\n        file1 = os.path.join(OUTPUT_DIR, 'test1.txt')\n        encrypted = task_func(file1, 'Hello, World!', 'password123')\n        with open(file1, 'r') as f:\n            file_content = f.read()\n        self.assertEqual(encrypted, file_content)\n        \n    def test_case_2(self):\n        # Testing with different data and password\n        file2 = os.path.join(OUTPUT_DIR, 'test2.txt')\n        encrypted = task_func(file2, 'OpenAI', 'secret')\n        with open(file2, 'r') as f:\n            file_content = f.read()\n        self.assertEqual(encrypted, file_content)\n        \n    def test_case_3(self):\n        # Testing with special characters in data and password\n        file3 = os.path.join(OUTPUT_DIR, 'test3.txt')\n        data = '!@#$%^&*()_+'\n        password = 'special_chars'\n        encrypted = task_func(file3, data, password)\n        with open(file3, 'r') as f:\n            file_content = f.read()\n        self.assertEqual(encrypted, file_content)\n        \n    def test_case_4(self):\n        # Testing file creation if it doesn't exist\n        file4 = os.path.join(OUTPUT_DIR, 'nonexistent_file.txt')\n        if os.path.exists(file4):\n            os.remove(file4)\n        encrypted = task_func(file4, 'Test Data', 'pwd')\n        self.assertTrue(os.path.exists(file4))\n        \n    def test_case_5(self):\n        # Testing decryption to ensure encryption is reversible\n        file5 = os.path.join(OUTPUT_DIR, 'test5.txt')\n        data = 'Decryption Test'\n        password = 'decrypt_pwd'\n        encrypted = task_func(file5, data, password)\n        \n        # Decryption logic (reverse of encryption)\n        key = hashlib.sha256(password.encode()).digest()\n        decrypted_bytes = [byte ^ key[i % len(key)] for i, byte in enumerate(base64.b64decode(encrypted))]\n        decrypted = bytes(decrypted_bytes).decode()\n        \n        self.assertEqual(data, decrypted)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find all files in a specific directory that contain a regex pattern in their contents in a case insensitive manner.\nThe function should output with:\n    list: A list of absolute file paths that contain the pattern.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n```",
        "gt": "import re\nimport os\nimport glob\nfrom pathlib import Path\ndef task_func(pattern, directory, extensions):\n    matched_files = []\n    for ext in extensions:\n        files = glob.glob(os.path.join(directory, ext))\n        for file in files:\n            with open(file, 'r') as f:\n                content = f.read().lower()\n                if re.search(pattern.lower(), content):\n                    matched_files.append(Path(file).resolve())\n    return matched_files",
        "test": "import unittest\nimport shutil\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.extensions = ['*.txt', '*.md', '*.csv']\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_directory = f\"{self.base_tmp_dir}/test/\"\n        os.makedirs(self.test_directory, exist_ok=True)\n        # Sample data to be written to files\n        sample_files_data = {\n            \"sample1.txt\": \"Hello, this is a test file.\\nContains some text.\",\n            \"sample2.md\": \"# Markdown File\\n\\nThis is a markdown hello file.\\n\",\n            \"sample3.csv\": \"Name,Age\\nAlice,25\\nBob,hello\\nCharlie,30\",\n            \"sample4.txt\": \"Just another random text file.\",\n            \"sample5.md\": \"Hello world! This is a markdown file.\"\n        }\n        # Write the sample data to files\n        for filename, content in sample_files_data.items():\n            with (\n                    open(os.path.join(self.test_directory, filename), 'w')\n                    if os.path.exists(os.path.join(self.test_directory, filename))\n                    else open(os.path.join(self.test_directory, filename), 'x')\n            ) as file:\n                file.write(content)\n    def tearDown(self):\n        if os.path.exists(self.test_directory):\n            shutil.rmtree(self.test_directory)\n    def test_case_1(self):\n        matched_files = task_func('.*hello.*', self.test_directory, self.extensions)\n        matched_files = [Path(file).name for file in matched_files]\n        expected_files = ['sample1.txt', 'sample2.md', 'sample3.csv', 'sample5.md']\n        self.assertCountEqual(matched_files, expected_files)\n    def test_case_2(self):\n        matched_files = task_func('alice', self.test_directory, self.extensions)\n        matched_files = [Path(file).name for file in matched_files]\n        expected_files = ['sample3.csv']\n        self.assertCountEqual(matched_files, expected_files)\n    def test_case_3(self):\n        matched_files = task_func('random', self.test_directory, self.extensions)\n        matched_files = [Path(file).name for file in matched_files]\n        expected_files = ['sample4.txt']\n        self.assertCountEqual(matched_files, expected_files)\n    def test_case_4(self):\n        matched_files = task_func('\\#', self.test_directory, self.extensions)\n        matched_files = [Path(file).name for file in matched_files]\n        expected_files = ['sample2.md']\n        self.assertCountEqual(matched_files, expected_files)\n    def test_case_5(self):\n        matched_files = task_func('world', self.test_directory, self.extensions)\n        matched_files = [Path(file).name for file in matched_files]\n        expected_files = ['sample5.md']\n        self.assertCountEqual(matched_files, expected_files)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads all files with a specified extension in a given directory and returns their data in a dictionary. - Reads all files with the specified extension in the given directory. - Uses the filename without the extension as a key in the output dictionary. - The value for each key is a list of rows from the file, where each row is represented as a list of values. >>> data = task_func('/home/user/data', '.txt') >>> print(data) {}\nThe function should output with:\n    Returns a dictionary where each key is the filename (without extension) and the value is a list of rows from the file.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n```",
        "gt": "import os\nimport glob\nimport csv\ndef task_func(directory_path, file_extension='.csv'):\n    data = {}\n\n    for file in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n        filename = os.path.splitext(os.path.basename(file))[0]\n        with open(file, 'r') as f:\n            reader = csv.reader(f)\n            data[filename] = list(reader)\n\n    return data",
        "test": "import unittest\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # create a directory with test files\n        os.mkdir('test_1')\n        with open('test_1/file1.csv', 'w', newline='') as f:\n            writer = csv.writer(f)\n            writer.writerows([['header1', 'header2'], ['row1_col1', 'row1_col2'], ['row2_col1', 'row2_col2']])\n        os.mkdir('test_2')\n        with open('test_2/file2.csv', 'w', newline='') as f:\n            writer = csv.writer(f)\n            writer.writerows([['name', 'age'], ['Alice', '30'], ['Bob', '40']])\n        os.mkdir('test_5')\n        with open('test_5/file3.csv', 'w', newline='') as f:\n            writer = csv.writer(f)\n            writer.writerows([['subject', 'marks'], ['Math', '90'], ['Science', '85']])\n    def tearDown(self):\n        # remove the test directories\n        shutil.rmtree('test_1')\n        shutil.rmtree('test_2')\n        shutil.rmtree('test_5')\n    \n    def test_case_1(self):\n        # This test assumes the existence of a directory named 'task_func_data' with a CSV file 'file1.csv'\n        data = task_func('test_1')\n        self.assertIsInstance(data, dict)\n        self.assertIn('file1', data)\n        self.assertEqual(data['file1'], [['header1', 'header2'], ['row1_col1', 'row1_col2'], ['row2_col1', 'row2_col2']])\n    def test_case_2(self):\n        # This test checks explicit file_extension input\n        data = task_func('test_2', '.csv')\n        self.assertIsInstance(data, dict)\n        self.assertIn('file2', data)\n        self.assertEqual(data['file2'], [['name', 'age'], ['Alice', '30'], ['Bob', '40']])\n    def test_case_3(self):\n        # This test checks for a non-existent file extension, expecting an empty dictionary\n        data = task_func('test_3', '.txt')\n        self.assertIsInstance(data, dict)\n        self.assertEqual(len(data), 0)\n    def test_case_4(self):\n        # This test checks for a non-existent directory, expecting an empty dictionary\n        data = task_func('/nonexistent/directory')\n        self.assertIsInstance(data, dict)\n        self.assertEqual(len(data), 0)\n    def test_case_5(self):\n        # This test checks another file's presence and content in the dictionary\n        data = task_func('test_5')\n        self.assertIsInstance(data, dict)\n        self.assertIn('file3', data)\n        self.assertEqual(data['file3'], [['subject', 'marks'], ['Math', '90'], ['Science', '85']])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Search for occurrences of the word \"error\" in all text files within a specified directory and its subdirectories. The function specifically searches for the word \"error\" in text files (with the extension \".txt\"). This function is NOT case sensitive, e.g. also \"ERROr\" will be counted.\nThe function should raise the exception for: ValueError: If directory in dir_path does not exist.\nThe function should output with:\n    dict: A dictionary with relative file paths as keys and the count of\n    occurrences of the word \"error\" as values.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\ndef task_func(dir_path):\n```",
        "gt": "import re\nimport os\nimport glob\ndef task_func(dir_path):\n\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Specified directory does not exist.\")\n\n    result = {}\n    file_paths = glob.glob(f'{dir_path}/**/*.txt', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n        matches = re.findall(r'\\berror\\b', content, re.IGNORECASE)\n        # Always set the file's count in the result dictionary, even if it's 0\n        result[os.path.relpath(file_path, dir_path)] = len(matches)\n\n    return result",
        "test": "import unittest\nimport os\nimport shutil\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to simulate test environments\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove the temporary directory after the test\n        shutil.rmtree(self.test_dir)\n    def create_file(self, sub_path, content=\"\"):\n        # Helper method to create a file with given content\n        full_path = os.path.join(self.test_dir, sub_path)\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)\n        with open(full_path, 'w') as file:\n            file.write(content)\n        # Return normalized path for cross-platform compatibility\n        return os.path.normpath(sub_path)\n    def test_non_existent(self):\n        # Expect ValueError for non-existent directory\n        with self.assertRaises(ValueError):\n            task_func(os.path.join(self.test_dir, \"non_existent\"))\n    def test_empty_folder(self):\n        # Test empty directory\n        result = task_func(self.test_dir)\n        self.assertEqual(result, {})\n    def test_files_with_errors(self):\n        # Files with varying counts of 'error'\n        files = {\n            \"1.txt\": \"error\\nERROR\\nErrOr\",\n            \"subfolder1/2.txt\": \"\",\n            \"subfolder2/3.txt\": \"error\\nerror error\"\n        }\n        expected = {\n            os.path.normpath(\"1.txt\"): 3,\n            os.path.normpath(\"subfolder1/2.txt\"): 0,\n            os.path.normpath(\"subfolder2/3.txt\"): 3\n        }\n        for path, content in files.items():\n            self.create_file(path, content)\n        result = task_func(self.test_dir)\n        self.assertEqual(result, expected)\n    def test_case_sensitive_and_realistic_text(self):\n        # More complex scenarios, including nested directories\n        file_path = self.create_file('nested/folder1/folder2/error_log.txt', 'Error\\nerror\\nERROR')\n        expected = {file_path: 3}\n        result = task_func(self.test_dir)\n        self.assertEqual(result, expected)\n    def test_exact_word_matching(self):\n        # Ensure only the exact word 'error' is counted and ignore similar words like 'errors'\n        files = {\n            \"file1.txt\": \"error error error\",  # Should count 3 times\n            \"subdir/file2.txt\": \"errors error erro errors\",  # Should count 1 time\n            \"subdir2/nested/file3.txt\": \"an error occurred\",  # Should count 1 time\n            \"subdir3/file4.txt\": \"no errors here\",  # Should count 0 times\n            \"subdir3/file5.txt\": \"Error and ERROR and error\"  # Should count 3 times, case insensitive\n        }\n        expected = {\n            os.path.normpath(\"file1.txt\"): 3,\n            os.path.normpath(\"subdir/file2.txt\"): 1,\n            os.path.normpath(\"subdir2/nested/file3.txt\"): 1,\n            os.path.normpath(\"subdir3/file4.txt\"): 0,\n            os.path.normpath(\"subdir3/file5.txt\"): 3\n        }\n        for path, content in files.items():\n            self.create_file(path, content)\n        result = task_func(self.test_dir)\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculates the mode(s), their count(s), and the fast fourier transform of the data after repeating it a specified number of times. in a list of elements that can be repeated a specified number of times.\nNote that: If the data is empty or the number of repetitions is less than or equal to 0, the function will return empty arrays.\nThe function should output with:\n    dict: A dictionary with two keys:\n    'mode': a numpy array of the mode(s), sorted in ascending order.\n    'count': a numpy array of the count(s) of the mode(s).\nYou should write self-contained code starting with:\n```\nfrom typing import List, Union\nimport numpy as np\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n```",
        "gt": "from typing import List, Union\nimport numpy as np\nimport scipy.fft\ndef task_func(data: List[Union[int, str]], repetitions: int = 1):\n    \n    def calculate_mode(data):\n        # Use a dictionary to count occurrences, considering both value and type\n        counts = {}\n        for item in data:\n            key = (item, type(item))  # Distinguish between types\n            counts[key] = counts.get(key, 0) + 1\n\n        # Find the maximum count and corresponding values\n        max_count = max(counts.values())\n        mode_items = [value for (value, value_type), count in counts.items() if count == max_count]\n\n        return mode_items, [max_count] * len(mode_items)\n    \n    if not data or repetitions <= 0:  # Handle empty data or no repetitions\n        return {'mode': np.array([], dtype='object'), 'count': np.array([], dtype=int), 'fft': np.array([])}\n\n    # Repeat the data\n    repeated_data = data * repetitions\n\n    # Calculate mode\n    mode, count = calculate_mode(repeated_data)\n    # using scipy.stats to calculate fft\n    return {'mode': np.sort(mode), 'count': count, 'fft': scipy.fft.fft(data)}",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_empty_list(self):\n        expected = {'mode': np.array([], dtype='object').tolist(), 'count': np.array([], dtype=int).tolist(), 'fft': np.array([]).tolist()}\n        result = task_func([], repetitions=1)\n        self.assertEqual({'mode': result['mode'].tolist(), 'count': result['count'].tolist(), 'fft': result['fft'].tolist()}, expected)\n    def test_single_mode(self):\n        result = task_func([1, 2, 2, 3], repetitions=1)\n        np.testing.assert_array_equal(result['mode'], np.array([2]))\n        np.testing.assert_array_equal(result['count'], np.array([2]))\n        np.testing.assert_array_equal(result['fft'], np.array([ 8.-0.j, -1.+1.j, -2.-0.j, -1.-1.j]))\n    def test_multiple_modes_repeated(self):\n        result = task_func(['00', '01'], repetitions=3)\n        np.testing.assert_array_equal(result['mode'], np.array(['00', '01']))\n        np.testing.assert_array_equal(result['count'], np.array([3, 3]))\n        np.testing.assert_array_equal(result['fft'], np.array([ 1.-0.j, -1.-0.j]))\n    def test_mixed_types(self):\n        # Assuming '1' (string) appears twice, and 1 (int) appears once.\n        # The test expects the string '1' to be the mode with a count of 2.\n        result = task_func([1, '1', '1', 2], repetitions=1)\n        np.testing.assert_array_equal(result['mode'], np.array(['1']))\n        np.testing.assert_array_equal(result['count'], np.array([2]))  # Expected count is 2 for '1'\n        np.testing.assert_array_equal(result['fft'], np.array([ 5.-0.j,  0.+1.j, -1.-0.j,  0.-1.j]))\n        \n    def test_no_repetitions(self):\n        expected = {'mode': np.array([], dtype='object').tolist(), 'count': np.array([], dtype=int).tolist(), 'fft': np.array([]).tolist()}\n        result = task_func(['111', '222', '333'], repetitions=0)\n        self.assertEqual({'mode': result['mode'].tolist(), 'count': result['count'].tolist(), 'fft': result['fft'].tolist()}, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a product catalog DataFrame where each row represents a product with the following columns: - 'Product Name': The name of the product with spaces replaced by underscores. - 'Category': The category to which the product belongs. - 'Price': The price of the product, generated randomly based on a normal distribution with a mean of 50 and a standard deviation of 10. Constants: - CATEGORIES: A list of categories used to randomly assign a category to each product.\nThe function should output with:\n    pd.DataFrame: A pandas DataFrame containing the product catalog information.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\n# Constants\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport random\nfrom random import randint, seed\n# Constants\nCATEGORIES = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Toys & Games']\ndef task_func(mystrings, n_products, seed=0):\n    catalogue_data = []\n    random.seed(seed)\n    np.random.seed(seed)\n    for _ in range(n_products):\n        product_name = mystrings[randint(0, len(mystrings) - 1)].replace(' ', '_')\n        category = CATEGORIES[randint(0, len(CATEGORIES) - 1)]\n        price = round(np.random.normal(50, 10), 2)\n        catalogue_data.append([product_name, category, price])\n\n    catalogue_df = pd.DataFrame(catalogue_data, columns=['Product Name', 'Category', 'Price'])\n\n    return catalogue_df",
        "test": "import unittest\nfrom pandas.testing import assert_frame_equal\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        \n        result = task_func(['Mobile Phone', 'T Shirt', 'Coffee Maker', 'Python Book', 'Toy Car'], 2, 42)\n        # assert the value of the DataFrame\n        self.assertEqual(result['Product Name'].tolist(), ['Mobile_Phone', 'Coffee_Maker'])\n        self.assertEqual(result['Category'].tolist(), ['Electronics', 'Clothing'])\n        self.assertEqual(result['Price'].tolist(), [54.97, 48.62])\n        \n    def test_case_2(self):\n        result = task_func(['Laptop', 'Sweater'], 1)\n        self.assertEqual(result['Product Name'].tolist(), ['Sweater'])\n        self.assertEqual(result['Category'].tolist(), ['Books'])\n        self.assertEqual(result['Price'].tolist(), [67.64])\n        \n    def test_case_3(self):\n        result = task_func(['Book', 'Pen', 'Bag'], 3)\n        self.assertEqual(result['Product Name'].tolist(), ['Pen', 'Book', 'Bag'])\n        self.assertEqual(result['Category'].tolist(), ['Books', 'Home & Kitchen', 'Books'])\n        self.assertEqual(result['Price'].tolist(), [67.64, 54.00, 59.79])\n        \n    def test_case_4(self):\n        result = task_func(['Watch'], 2)\n        self.assertEqual(result['Product Name'].tolist(), ['Watch', 'Watch'])\n        self.assertEqual(result['Category'].tolist(), ['Books', 'Home & Kitchen'])\n        self.assertEqual(result['Price'].tolist(), [67.64, 54.00])\n    def test_case_5(self):\n        result = task_func(['TV', 'Fridge', 'Sofa', 'Table'], 0)\n        self.assertEqual(result.empty, True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random float number from a list of hexadecimal strings and then round the float number to 2 decimal places.\nThe function should output with:\n    rounded_float (float): The rounded float number.\nYou should write self-contained code starting with:\n```\nimport struct\nimport random\n# Constants\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n```",
        "gt": "import struct\nimport random\n# Constants\nKEYS = ['470FC614', '4A0FC614', '4B9FC614', '4C8FC614', '4D7FC614']\ndef task_func(hex_key=None):\n    if hex_key is None:\n        hex_key = random.choice(KEYS)\n    float_num = struct.unpack('!f', bytes.fromhex(hex_key))[0]\n    rounded_float = round(float_num, 2)\n    return rounded_float",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_return_type(self):\n        result = task_func()\n        self.assertIsInstance(result, float)\n    def test_rounded_two_decimal(self):\n        result = task_func()\n        decimal_part = str(result).split('.')[1]\n        self.assertTrue(len(decimal_part) <= 2)\n    def test_randomness(self):\n        random.seed()  # Reset the seed to ensure randomness\n        results = {task_func() for _ in range(100)}\n        self.assertTrue(len(results) > 1)\n    def test_specific_hex_keys(self):\n        for hex_key in KEYS:\n            expected_result = round(struct.unpack('!f', bytes.fromhex(hex_key))[0], 2)\n            result = task_func(hex_key)\n            self.assertEqual(result, expected_result)\n    def test_no_seed(self):\n        random.seed()  # Reset the random seed\n        results = {task_func() for _ in range(100)}\n        self.assertTrue(len(results) > 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalizes a dataset from a .csv file.\nThe function should output with:\n    df (DataFrame): The normalized dataset.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data_path):\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    \n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n\n    df = pd.DataFrame(data, columns=df.columns)\n\n    return df",
        "test": "import unittest\nimport os\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Create data\n        data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        df = pd.DataFrame(data, columns=['a', 'b', 'c'])\n        df.to_csv('data.csv', index=False)\n        # Run function\n        df = task_func('data.csv')\n        # Check result\n        self.assertEqual(df.shape, (3, 3))\n        self.assertAlmostEqual(df['a'].min(), 0)\n        self.assertAlmostEqual(df['a'].max(), 1)\n        self.assertAlmostEqual(df['b'].min(), 0)\n        self.assertAlmostEqual(df['b'].max(), 1)\n        self.assertAlmostEqual(df['c'].min(), 0)\n        self.assertAlmostEqual(df['c'].max(), 1)\n        # Remove data\n        os.remove('data.csv')\n    def test_case_2(self):\n        # Create data\n        data = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n        df = pd.DataFrame(data, columns=['a', 'b', 'c'])\n        df.to_csv('data.csv', index=False)\n        # Run function\n        df = task_func('data.csv')\n        # Check result\n        self.assertEqual(df.shape, (3, 3))\n        self.assertAlmostEqual(df['a'].min(), 0)\n        self.assertAlmostEqual(df['a'].max(), 0)\n        self.assertAlmostEqual(df['b'].min(), 0)\n        self.assertAlmostEqual(df['b'].max(), 0)\n        self.assertAlmostEqual(df['c'].min(), 0)\n        self.assertAlmostEqual(df['c'].max(), 0)\n        # Remove data\n        os.remove('data.csv')\n    def test_case_3(self):\n        # Create data\n        data = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])\n        df = pd.DataFrame(data, columns=['a', 'b', 'c'])\n        df.to_csv('data.csv', index=False)\n        # Run function\n        df = task_func('data.csv')\n        # Check result\n        self.assertEqual(df.shape, (3, 3))\n        self.assertAlmostEqual(df['a'].min(), 0)\n        self.assertAlmostEqual(df['a'].max(), 0)\n        self.assertAlmostEqual(df['b'].min(), 0)\n        self.assertAlmostEqual(df['b'].max(), 0)\n        self.assertAlmostEqual(df['c'].min(), 0)\n        self.assertAlmostEqual(df['c'].max(), 0)\n        # Remove data\n        os.remove('data.csv')\n    def test_case_4(self):\n        # Create data\n        data = np.array([[3, 2, 1], [6, 5, 4], [9, 8, 7]])\n        df = pd.DataFrame(data, columns=['a', 'b', 'c'])\n        df.to_csv('data.csv', index=False)\n        # Run function\n        df = task_func('data.csv')\n        # Check result\n        self.assertEqual(df.shape, (3, 3))\n        self.assertAlmostEqual(df['a'].min(), 0)\n        self.assertAlmostEqual(df['a'].max(), 1)\n        self.assertAlmostEqual(df['b'].min(), 0)\n        self.assertAlmostEqual(df['b'].max(), 1)\n        self.assertAlmostEqual(df['c'].min(), 0)\n        self.assertAlmostEqual(df['c'].max(), 1)\n        # Remove data\n        os.remove('data.csv')\n    def test_case_5(self):\n        # Create data\n        data = np.array([[1, 2, 3], [4, 5, 6]])\n        df = pd.DataFrame(data, columns=['a', 'b', 'c'])\n        df.to_csv('data.csv', index=False)\n        # Run function\n        df = task_func('data.csv')\n        # Check result\n        self.assertEqual(df.shape, (2, 3))\n        self.assertAlmostEqual(df['a'].min(), 0)\n        self.assertAlmostEqual(df['a'].max(), 1)\n        self.assertAlmostEqual(df['b'].min(), 0)\n        self.assertAlmostEqual(df['b'].max(), 1)\n        self.assertAlmostEqual(df['c'].min(), 0)\n        self.assertAlmostEqual(df['c'].max(), 1)\n        # Remove data\n        os.remove('data.csv')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame with a specified number of rows and six columns (default A-F), each filled with random numbers between 1 and 100, using a specified seed for reproducibility. Additionally, calculate the mean and median for each column.\nThe function should raise the exception for: ValueError: If 'rows' is not a positive integer greater than 0.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the generated data.\n    dict: A dictionary containing the calculated mean and median for each column.\n    The dictionary format is:\n    {\n    'ColumnName': {\n    'mean': MeanValue,\n    'median': MedianValue\n    }, ...\n    }\n    where 'ColumnName' is each of the specified column names, 'MeanValue' is the calculated mean,\n    and 'MedianValue' is the calculated median for that column.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport statistics\ndef task_func(rows, columns=['A', 'B', 'C', 'D', 'E', 'F'], seed=42):\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"rows must be a positive integer greater than 0.\")\n\n    np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    \n    stats_dict = {}\n    for col in columns:\n        stats_dict[col] = {\n            'mean': statistics.mean(df[col]),\n            'median': statistics.median(df[col])\n        }\n    \n    return df, stats_dict",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_dataframe_structure(self):\n        df, _ = task_func(10)\n        self.assertEqual(df.shape, (10, 6))  # 10 rows, 6 columns\n    def test_invalid_rows_input_negative(self):\n        with self.assertRaises(ValueError):\n            task_func(-1)\n    def test_invalid_rows_input_zero(self):\n        with self.assertRaises(ValueError):\n            task_func(0)\n    def test_invalid_rows_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"five\")\n    def test_stats_calculation(self):\n        _, stats = task_func(10)\n        for col_stats in stats.values():\n            self.assertIn('mean', col_stats)\n            self.assertIn('median', col_stats)\n            \n    def test_specific_stats_values(self):\n        df, stats = task_func(10)\n        for col in df.columns:\n            expected_mean = df[col].mean()\n            expected_median = df[col].median()\n            self.assertAlmostEqual(stats[col]['mean'], expected_mean)\n            self.assertAlmostEqual(stats[col]['median'], expected_median)\n    def test_reproducibility_with_seed(self):\n        df1, _ = task_func(10, seed=123)\n        df2, _ = task_func(10, seed=123)\n        pd.testing.assert_frame_equal(df1, df2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Copy all files from 'src_dir' to 'dst_dir' that match any pattern in ['*.txt', '*.docx'].\nThe function should output with:\n    str: The destination directory.\nYou should write self-contained code starting with:\n```\nimport shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n```",
        "gt": "import shutil\nimport os\nimport fnmatch\nimport itertools\ndef task_func(src_dir, dst_dir):\n    FILE_PATTERNS = ['*.txt', '*.docx']\n    # Find all matching files\n    matching_files = list(itertools.chain.from_iterable(\n        fnmatch.filter(os.listdir(src_dir), pattern) for pattern in FILE_PATTERNS))\n\n    for filename in matching_files:\n        shutil.copy2(os.path.join(src_dir, filename), dst_dir)\n\n    return dst_dir",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def base(self, src_dir, dst_dir):\n        if os.path.exists(src_dir):\n            shutil.rmtree(src_dir)\n        # Create source directory\n        os.mkdir(src_dir)\n        # Create destination directory\n        os.mkdir(dst_dir)\n        # Create files\n        for filename in ['a.txt', 'b.txt', 'c.docx', 'd.docx', 'e.txt', 'a.pdf', 'a.doc']:\n            with open(os.path.join(src_dir, filename), 'w') as f:\n                f.write('test')\n        # Run function\n        task_func(src_dir, dst_dir)\n        # Check files\n        for d in [src_dir, dst_dir]:\n            self.assertTrue(os.path.exists(os.path.join(d, 'a.txt')))\n            self.assertTrue(os.path.exists(os.path.join(d, 'b.txt')))\n            self.assertTrue(os.path.exists(os.path.join(d, 'c.docx')))\n            self.assertTrue(os.path.exists(os.path.join(d, 'd.docx')))\n            self.assertTrue(os.path.exists(os.path.join(d, 'e.txt')))\n            self.assertFalse(os.path.exists(os.path.join(d, 'f.txt')))\n            if d == src_dir:\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertTrue(os.path.exists(os.path.join(d, 'a.doc')))\n            else:\n                self.assertFalse(os.path.exists(os.path.join(d, 'a.pdf')))\n                self.assertFalse(os.path.exists(os.path.join(d, 'a.doc')))\n    \n    def tearDown(self):\n        for d in ['./source', './destination', './src', './dst', './s', './d']:\n            if os.path.exists(d):\n                shutil.rmtree(d)\n    def test_case_1(self):\n        self.base('./source', './destination')\n    \n    def test_case_2(self):\n        self.base('./src', './dst')\n    \n    def test_case_3(self):\n        self.base('./s', './d')\n    \n    def test_case_4(self):\n        self.base('./s', './destination')\n    def test_case_5(self):\n        self.base('./source', './d')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Processes a pandas DataFrame by splitting lists in the 'Value' column into separate columns, calculates the Pearson correlation coefficient between these columns, and optionally visualizes the correlation matrix using a heatmap.\nNote that: This function use \"Correlation Heatmap\" as the title of the heatmap plot\nThe function should raise the exception for: If the DataFrame input is empty or have invalid 'Value', this function will raise ValueError.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing the correlation coefficients among the lists in the 'Value' column.\n    Axes (optional): A matplotlib Axes object containing the heatmap plot, returned if 'plot' is True.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n\n    if not isinstance(df, pd.DataFrame) or 'Value' not in df or 'Date' not in df or len(df.index) == 0:\n        raise ValueError()\n    \n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    corr_df = df.iloc[:, 1:].corr()\n\n    if plot:\n        plt.figure()\n        heatmap = sns.heatmap(corr_df, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        return corr_df, heatmap\n\n    return corr_df",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_basic_functionality(self):\n        # Testing basic functionality with valid input\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        result = task_func(df)\n        expected_result = pd.DataFrame([[1, 1, 1], [1, 1, 1], [1, 1, 1]], index=[0, 1, 2], columns=[0, 1, 2])\n        self.assertFalse(result.equals(expected_result))\n    def test_empty_dataframe(self):\n        # Testing with an empty DataFrame\n        df = pd.DataFrame(columns=['Date', 'Value'])\n        with self.assertRaises(ValueError):\n            result = task_func(df)\n    def test_plot_generation(self):\n        # Testing if the function correctly generates a plot\n        df = pd.DataFrame([['2021-01-01', [1, 2]], ['2021-01-02', [3, 4]]], columns=['Date', 'Value'])\n        _, ax = task_func(df, plot=True)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), 'Correlation Heatmap')\n        plt.close()\n    def test_invalid_data(self):\n        # Testing with invalid data (non-numeric) in 'Value' column\n        df = pd.DataFrame([['2021-01-01', ['a', 'b', 'c']]], columns=['Date', 'Value'])\n        with self.assertRaises(ValueError):\n            result = task_func(df)\n        \n    \n    def test_plot_data_correlation(self):\n        # Testing if the values in the plot match the correlation coefficients in the DataFrame\n        df = pd.DataFrame([['2021-01-01', [1, 2, 3]], ['2021-01-02', [4, 5, 6]], ['2021-01-03', [7, 8, 9]]], columns=['Date', 'Value'])\n        corr_df, ax = task_func(df, plot=True)\n        # Extracting the values from the heatmap plot\n        plot_data = np.array([text.get_text() for text in ax.collections[0].axes.texts]).reshape(corr_df.shape)\n        # Convert plot data to float for comparison\n        plot_data_float = plot_data.astype(float)\n        # Asserting that the values in the plot match the correlation coefficients in the DataFrame\n        np.testing.assert_array_almost_equal(corr_df.values, plot_data_float, decimal=2)\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate random data and visualize it with a stacked bar chart, saving the chart to a file. This function facilitates the exploration and sharing of data distribution across multiple categories.\nThe function should output with:\n    tuple: A tuple containing:\n    matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n    pandas.DataFrame: The DataFrame with randomly generated data.\n    str: The filename where the plot is saved ('test_plot.png').\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_groups=5, data_size=5, labels=None):\n\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n\n    return fig, data, plot_filename",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        \"\"\"Ensure no files are left after tests.\"\"\"\n        try:\n            os.remove('test_plot.png')\n        except FileNotFoundError:\n            pass\n    def test_default_parameters(self):\n        \"\"\"Test the function with default parameters.\"\"\"\n        fig, data, plot_filename = task_func()\n        self.assertIsInstance(fig, plt.Figure, \"The function should return a matplotlib.figure.Figure object.\")\n        self.assertEqual(data.shape, (5, 5), \"The default DataFrame should have 5 rows and 5 columns.\")\n        expected_columns = ['Group1', 'Group2', 'Group3', 'Group4', 'Group5']\n        self.assertListEqual(list(data.columns), expected_columns, \"Default column labels are incorrect.\")\n        self.assertTrue(os.path.exists(plot_filename), \"Plot file should be created.\")\n    def test_custom_parameters(self):\n        \"\"\"Test the function with custom number of groups, data size, and labels.\"\"\"\n        num_groups, data_size, labels = 3, 4, ['A', 'B', 'C']\n        fig, data, plot_filename = task_func(num_groups=num_groups, data_size=data_size, labels=labels)\n        self.assertIsInstance(fig, plt.Figure, \"The function should return a matplotlib.figure.Figure object.\")\n        self.assertEqual(data.shape, (4, 3), \"DataFrame dimensions should match the custom parameters.\")\n        self.assertListEqual(list(data.columns), labels, \"Column labels should match the custom labels provided.\")\n    def test_data_values(self):\n        \"\"\"Test that the data in the DataFrame is within the expected range (0.0, 1.0).\"\"\"\n        fig, data, plot_filename = task_func()\n        self.assertTrue((data >= 0.0).all().all() and (data <= 1.0).all().all(),\n                        \"All data should be within the range [0.0, 1.0].\")\n    def test_no_labels_provided(self):\n        \"\"\"Test that default labels are used when no labels are provided.\"\"\"\n        fig, data, plot_filename = task_func(num_groups=3)\n        expected_columns = ['Group1', 'Group2', 'Group3']\n        self.assertListEqual(list(data.columns), expected_columns,\n                             \"Default column labels are incorrect when no labels are provided.\")\n    def test_plot_file_cleanup(self):\n        \"\"\"Test that the plot file is cleaned up after a test.\"\"\"\n        fig, data, plot_filename = task_func()\n        self.assertTrue(os.path.exists(plot_filename), \"Plot file should exist immediately after creation.\")\n        os.remove(plot_filename)\n        self.assertFalse(os.path.exists(plot_filename), \"Plot file should be deleted in tearDown.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random dataset of floating-point numbers, truncate each value to 3 decimal places, then return the generated DataFrame with the specified column name.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the generated data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import uniform\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n```",
        "gt": "import pandas as pd\nfrom random import uniform\ndef task_func(n_data_points=1000, min_value=0.0, max_value=10.0, column_name='Value'):\n\n    data = [round(uniform(min_value, max_value), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=[column_name])\n\n    return data_df",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_dataframe_type(self):\n        \"\"\"Test if the returned object is a pandas DataFrame.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertIsInstance(result, pd.DataFrame, \"Returned object is not a pandas DataFrame\")\n    def test_dataframe_size(self):\n        \"\"\"Test if the DataFrame contains the correct number of data points.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertEqual(len(result), 1000, \"DataFrame does not contain 1000 data points\")\n    def test_value_range(self):\n        \"\"\"Test if values are within the specified range.\"\"\"\n        random.seed(0)\n        result = task_func(100)\n        for value in result['Value']:\n            self.assertGreaterEqual(value, 0.0, \"Value is less than 0.0\")\n            self.assertLessEqual(value, 10.0, \"Value is greater than 10.0\")\n    def test_decimal_precision(self):\n        \"\"\"Test if values have up to 3 decimal places.\"\"\"\n        random.seed(0)\n        result = task_func(10, 5.0, 8.0)\n        for value in result['Value']:\n            self.assertLessEqual(len(str(value).split('.')[1]), 3, \"Value does not have up to 3 decimal places\")\n    def test_dataframe_columns(self):\n        \"\"\"Test if the DataFrame has the correct column name.\"\"\"\n        random.seed(0)\n        column_name = 'User'\n        result = task_func(10, 5.0, 8.0, column_name)\n        self.assertIn(column_name, result.columns, \"DataFrame does not have a column named \"+column_name)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "The function filters rows in a dict of list in which the values of the 'Word' column begin with a specified letter. It first convert the dict to Datafrome, then calculates the length of the words in the filtered column and returns a dictionary of word lengths and their respective counts.\nThe function should output with:\n    dict: A dictionary of word lengths and their counts.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\ndef task_func(df, letter):\n```",
        "gt": "import pandas as pd\nimport time\ndef task_func(df, letter):\n    start_time = time.time()\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    count_dict = word_lengths.value_counts().to_dict()\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n\n    return count_dict",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = {'Word': ['apple', 'banana', 'cherry', 'date', 'elephant', 'fig', 'grape', 'kiwi']}\n        result = task_func(df, 'a')\n        expected_result = {5: 1}\n        self.assertDictEqual(result, expected_result)\n    def test_case_2(self):\n        df = {'Word': ['cat', 'dog', 'elephant', 'fish', 'goose']}\n        result = task_func(df, 'e')\n        expected_result = {8: 1}\n        self.assertDictEqual(result, expected_result)\n    def test_case_3(self):\n        df = {'Word': ['kiwi', 'lemon', 'mango', 'nectarine', 'orange']}\n        result = task_func(df, 'm')\n        expected_result = {5: 1}\n        self.assertDictEqual(result, expected_result)\n    def test_case_4(self):\n        df = {'Word': ['apple', 'banana', 'cherry', 'date', 'elephant', 'fig', 'grape', 'kiwi']}\n        result = task_func(df, 'z')\n        expected_result = {}\n        self.assertDictEqual(result, expected_result)\n    def test_case_5(self):\n        df = {'Word': ['zebra', 'zoo', 'zucchini']}\n        result = task_func(df, 'z')\n        expected_result = {5: 1, 3: 1, 8: 1}\n        self.assertDictEqual(result, expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function generates and displays a bar chart representing random letter-number pairs. Each bar corresponds to a unique pair, formed by combining a letter from 'a' to 'z' with a number from 1 to 26. The function randomly shuffles these pairs and assigns a random count to each.\nNote that: Notes: Each call to this function will likely produce a different chart because it shuffles the order of the pairs and assigns random counts to them. The random counts assigned to each pair range from 1 to 9.\nThe function should raise the exception for: ValueError: If 'n_pairs' is outside the range of 1 to 26, inclusive. This ensures that the function operates within the bounds of the predefined letters ('a' to 'z') and numbers (1 to 26).\nThe function should output with:\n    matplotlib.container.BarContainer: This object represents the bar chart created by the function.\n    Each bar in the chart is labeled with its corresponding letter-number pair (e.g., 'a:1', 'b:2').\n    The title of the chart is \"Random Letter:Number Pairs Chart\", the x-axis label is \"Letter:Number Pairs\",\n    and the y-axis label is \"Counts\".\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n```",
        "gt": "import numpy as np\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nLETTERS = list(\"abcdefghijklmnopqrstuvwxyz\")\nNUMBERS = list(range(1, 27))\ndef task_func(n_pairs=26):\n    if n_pairs > 26 or n_pairs < 1:\n        raise ValueError(\"n_pairs should be between 1 and 26\")\n\n    pairs = [f\"{letter}:{number}\" for letter, number in zip(LETTERS, NUMBERS)][:n_pairs]\n    random.seed(42)\n    random.shuffle(pairs)\n    counts = np.random.randint(1, 10, size=n_pairs)\n\n    bars = plt.bar(pairs, counts)\n\n    # Set label for each bar\n    for bar, pair in zip(bars, pairs):\n        bar.set_label(pair)\n\n    plt.xlabel(\"Letter:Number Pairs\")\n    plt.ylabel(\"Counts\")\n    plt.title(\"Random Letter:Number Pairs Chart\")\n\n    return bars",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.container import BarContainer\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def test_return_type(self):\n        \"\"\"Verify the returned type of the function.\"\"\"\n        random.seed(0)\n        ax = task_func(5)\n        self.assertIsInstance(\n            ax, BarContainer, \"The returned object is not of the expected type.\"\n        )\n    def test_number_of_bars(self):\n        \"\"\"Verify the number of bars plotted for different `n_pairs` values.\"\"\"\n        random.seed(1)\n        for i in [5, 10, 20]:\n            ax = task_func(i)\n            self.assertEqual(\n                len(ax.patches),\n                i,\n                f\"Expected {i} bars, but got {len(ax.patches)} bars.\",\n            )\n    def test_labels_and_title(self):\n        \"\"\"Verify the labels and the title of the plotted bar chart.\"\"\"\n        random.seed(2)\n        _ = task_func(15)\n        fig = plt.gcf()\n        axes = fig.gca()\n        self.assertEqual(\n            axes.get_xlabel(), \"Letter:Number Pairs\", \"X label is incorrect.\"\n        )\n        self.assertEqual(axes.get_ylabel(), \"Counts\", \"Y label is incorrect.\")\n        self.assertEqual(\n            axes.get_title(), \"Random Letter:Number Pairs Chart\", \"Title is incorrect.\"\n        )\n    def test_invalid_n_pairs(self):\n        \"\"\"Test the function with invalid `n_pairs` values.\"\"\"\n        random.seed(3)\n        with self.assertRaises(ValueError):\n            task_func(27)\n        with self.assertRaises(ValueError):\n            task_func(0)\n    def test_valid_pairs(self):\n        \"\"\"Verify that the pairs generated are valid and correspond to the expected letter:number format.\"\"\"\n        random.seed(4)\n        ax = task_func(5)\n        expected_pairs = [\"a:1\", \"b:2\", \"c:3\", \"d:4\", \"e:5\"]\n        generated_pairs = [bar.get_label() for bar in ax]\n        for expected_pair in expected_pairs:\n            self.assertIn(\n                expected_pair,\n                generated_pairs,\n                f\"Expected pair {expected_pair} not found in plotted pairs.\",\n            )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a plot of random time series data for the past 30 days with reproducibility controlled by an optional seed parameter. The plot is styled with Arial font for better readability.\nThe function should raise the exception for: ValueError: If there is an issue generating the data or plot.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing a line plot of the time series data.\n    The plot will have 'Date' as the x-axis label, 'Value' as the y-axis label,\n    and 'Random Time Series Data' as the title.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\ndef task_func(seed=42):\n    try:\n        plt.rc('font', family='Arial')\n\n        random.seed(seed)\n        dates = pd.date_range(end=datetime.now(), periods=30)\n        values = [random.randint(0, 100) for _ in range(30)]\n        \n        fig, ax = plt.subplots()\n        ax.plot(dates, values, label='Value over Time')\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Value')\n        ax.set_title('Random Time Series Data')\n        ax.legend()\n\n        return ax\n    except Exception as e:\n        raise ValueError(f\"Error generating the plot: {e}\")",
        "test": "import unittest\nimport pandas as pd \nclass TestCases(unittest.TestCase):\n    def test_plot_attributes(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Random Time Series Data', \"The plot title does not match.\")\n        self.assertEqual(ax.get_xlabel(), 'Date', \"The x-axis label does not match.\")\n        self.assertEqual(ax.get_ylabel(), 'Value', \"The y-axis label does not match.\")\n    def test_reproducibility(self):\n        ax1 = task_func(42)\n        ax2 = task_func(42)\n        self.assertEqual(ax1.get_lines()[0].get_ydata().tolist(), ax2.get_lines()[0].get_ydata().tolist(),\n                         \"Data generated with the same seed should match.\")\n    def test_random_seed_effect(self):\n        ax1 = task_func(42)\n        ax2 = task_func(43)\n        self.assertNotEqual(ax1.get_lines()[0].get_ydata().tolist(), ax2.get_lines()[0].get_ydata().tolist(),\n                            \"Data generated with different seeds should not match.\")\n    def test_data_range(self):\n        ax = task_func()\n        lines = ax.get_lines()[0]\n        x_data = lines.get_xdata()\n        self.assertTrue((max(pd.to_datetime(x_data)) - min(pd.to_datetime(x_data))).days <= 29,\n                        \"The range of dates should cover up to 29 days.\")\n    def test_value_range(self):\n        ax = task_func()\n        y_data = ax.get_lines()[0].get_ydata()\n        all_values_in_range = all(0 <= v <= 100 for v in y_data)\n        self.assertTrue(all_values_in_range, \"All values should be within the range 0 to 100.\")\n        \n    def test_value(self):\n        ax = task_func()\n        y_data = ax.get_lines()[0].get_ydata()\n        # with open('df_contents.txt', 'w') as file:\n        #     file.write(str(y_data.tolist()))\n        expect = [81, 14, 3, 94, 35, 31, 28, 17, 94, 13, 86, 94, 69, 11, 75, 54, 4, 3, 11, 27, 29, 64, 77, 3, 71, 25, 91, 83, 89, 69]\n        self.assertEqual(expect, y_data.tolist(), \"DataFrame contents should match the expected output\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compares and visualizes the sales data of two stores for predefined categories. The function generates a bar plot for categories where both stores have sales exceeding a specified threshold. The Euclidean distance between the two series is also computed.\nThe function should output with:\n    matplotlib.axes.Axes or None: A bar plot for categories where both stores' sales exceed the threshold of 200,\n    or None if no such categories exist.\n    float: The Euclidean distance between the two series or 0.0 if no categories meet the threshold.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef task_func(s1, s2):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\ndef task_func(s1, s2):\n\n    # Determine categories where both stores exceed the sales threshold\n    high_sales_categories = s1.index[(s1 > 200) & (s2 > 200)]\n\n    if high_sales_categories.empty:\n        return None, 0.0\n\n    # Prepare the data for plotting\n    df = pd.DataFrame(\n        {\"Store 1\": s1[high_sales_categories], \"Store 2\": s2[high_sales_categories]}\n    )\n\n    # compute the edit distance between the two series\n    edit_distance = np.linalg.norm(df[\"Store 1\"] - df[\"Store 2\"])\n    \n    # Generate the bar plot\n    ax = df.plot(kind=\"bar\", title=\"Sales Comparison Above Threshold in Categories\")\n    return ax, edit_distance",
        "test": "import pandas as pd\nimport numpy as np\nimport unittest\nimport matplotlib.pyplot as plt\n# Constants (should be kept consistent with function.py)\nCATEGORIES = [\"Electronics\", \"Clothing\", \"Home Decor\", \"Automotive\", \"Books\"]\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for function task_func.\"\"\"\n    def test_sales_above_threshold(self):\n        \"\"\"Test that the function returns a plot when sales exceed the threshold\"\"\"\n        np.random.seed(seed=32)\n        s1 = pd.Series(np.random.randint(100, 500, size=5), index=CATEGORIES)\n        np.random.seed(seed=32)\n        s2 = pd.Series(np.random.randint(150, 600, size=5), index=CATEGORIES)\n        ax, edit_distance = task_func(s1, s2)\n        # Check the correct categories are plotted\n        categories_plotted = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertListEqual(\n            categories_plotted, [\"Electronics\", \"Home Decor\", \"Automotive\", \"Books\"]\n        )\n        # Check the title of the plot\n        self.assertEqual(\n            ax.get_title(), \"Sales Comparison Above Threshold in Categories\"\n        )\n        self.assertAlmostEqual(edit_distance, 100.0)\n        \n    def test_no_sales_above_threshold(self):\n        \"\"\"Test that no categories are plotted when no sales exceed the threshold\"\"\"\n        np.random.seed(seed=32)\n        s1 = pd.Series(np.random.randint(50, 150, size=5), index=CATEGORIES)\n        np.random.seed(seed=32)\n        s2 = pd.Series(np.random.randint(50, 150, size=5), index=CATEGORIES)\n        ax, edit_distance = task_func(s1, s2)\n        # Check that no categories are plotted\n        self.assertIsNone(\n            ax, \"Expected None as no categories should meet the threshold\"\n        )\n        self.assertAlmostEqual(edit_distance, 0.0)\n    def test_all_sales_above_threshold(self):\n        \"\"\"Test that all categories are plotted when all sales exceed the threshold\"\"\"\n        np.random.seed(seed=123)\n        s1 = pd.Series(np.random.randint(200, 500, size=5), index=CATEGORIES)\n        np.random.seed(seed=123)\n        s2 = pd.Series(np.random.randint(250, 600, size=5), index=CATEGORIES)\n        ax, edit_distance = task_func(s1, s2)\n        # Check that all categories are plotted\n        categories_plotted = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertListEqual(categories_plotted, CATEGORIES)\n        self.assertAlmostEqual(edit_distance, 389.8127755730948)\n        \n    def test_some_sales_above_threshold(self):\n        \"\"\"Test that some categories are plotted when some sales exceed the threshold\"\"\"\n        s1 = pd.Series([250, 180, 290, 200, 290], index=CATEGORIES)\n        s2 = pd.Series([260, 290, 195, 299, 295], index=CATEGORIES)\n        ax, edit_distance = task_func(s1, s2)\n        # Check that only the correct categories are plotted\n        categories_plotted = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertListEqual(categories_plotted, [\"Electronics\", \"Books\"])\n        self.assertAlmostEqual(edit_distance, 11.180339887498949)\n        \n    def test_single_sales_above_threshold(self):\n        \"\"\"Test that only a single category is plotted when only a single category has sales exceeding the threshold\"\"\"\n        s1 = pd.Series([150, 180, 290, 200, 190], index=CATEGORIES)\n        s2 = pd.Series([160, 190, 295, 199, 195], index=CATEGORIES)\n        ax, edit_distance = task_func(s1, s2)\n        # Check that only a single category is plotted\n        categories_plotted = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertListEqual(categories_plotted, [\"Home Decor\"])\n        self.assertAlmostEqual(edit_distance, 5.0)\n        \n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Connects two 2D numeric arrays (matrices) along the second axis (columns), converts them into a Pandas DataFrame, and returns a string representation of the DataFrame.\nThe function should output with:\n    str: The string representation of the DataFrame without the index and header.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(matrix1, matrix2):\n    combined_matrix = np.concatenate((matrix1, matrix2), axis=1)\n    df = pd.DataFrame(combined_matrix)\n    return df.to_string(index=False, header=False)",
        "test": "import unittest\nimport re\nclass TestCases(unittest.TestCase):\n    def normalize_whitespace(self, string):\n        \"\"\"Normalize the whitespace in the string to a single space.\"\"\"\n        return re.sub(r'\\s+', ' ', string).strip()\n    def test_basic_concatenation(self):\n        \"\"\"Test basic functionality of concatenating two matrices.\"\"\"\n        matrix1 = np.array([[1, 2], [3, 4]])\n        matrix2 = np.array([[5, 6], [7, 8]])\n        expected_output = \" 1  2  5  6\\n 3  4  7  8\"\n        result = task_func(matrix1, matrix2)\n        self.assertEqual(self.normalize_whitespace(result), self.normalize_whitespace(expected_output))\n    def test_different_length_matrices(self):\n        \"\"\"Test concatenation of matrices with different numbers of rows.\"\"\"\n        matrix1 = np.array([[1, 2], [3, 4], [5, 6]])\n        matrix2 = np.array([[7, 8]])\n        with self.assertRaises(ValueError):\n            task_func(matrix1, matrix2)\n    def test_mismatched_dimensions(self):\n        \"\"\"Test concatenation with mismatched dimensions.\"\"\"\n        matrix1 = np.array([[1, 2]])\n        matrix2 = np.array([[3], [4]])\n        with self.assertRaises(ValueError):\n            task_func(matrix1, matrix2)\n    def test_single_row_matrices(self):\n        \"\"\"Test concatenation of single-row matrices.\"\"\"\n        matrix1 = np.array([[1, 2, 3]])\n        matrix2 = np.array([[4, 5, 6]])\n        expected_output = \" 1  2  3  4  5  6\"\n        result = task_func(matrix1, matrix2)\n        self.assertEqual(self.normalize_whitespace(result), self.normalize_whitespace(expected_output))\n    def test_non_numeric_matrices(self):\n        \"\"\"Ensure non-numeric matrices are handled.\"\"\"\n        matrix1 = np.array([['a', 'b']])\n        matrix2 = np.array([['c', 'd']])\n        expected_output = \" a  b  c  d\"\n        result = task_func(matrix1, matrix2)\n        self.assertEqual(self.normalize_whitespace(result), self.normalize_whitespace(expected_output))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random string of a given length using ASCII letters and calculate the frequency of each character.\u200b\nThe function should output with:\n    dict: A dictionary with the frequency of each character in the generated string.\nYou should write self-contained code starting with:\n```\nimport collections\nimport string\nimport random\ndef task_func(length, seed=0):\n```",
        "gt": "import collections\nimport string\nimport random\ndef task_func(length, seed=0):\n    random.seed(seed)\n    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(length))\n\n    char_freq = collections.Counter(random_string)\n\n    return dict(char_freq)",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func(0, 77)\n        self.assertEquals(result, {})\n        self.assertIsInstance(result, dict)\n        self.assertEqual(len(result), 0)\n    def test_case_2(self):\n        result = task_func(1)\n        self.assertIsInstance(result, dict)\n        self.assertEqual(sum(result.values()), 1)\n        self.assertEqual(len(result), 1)\n    def test_case_3(self):\n        length = 10000\n        result = task_func(length, 34)\n        self.assertIsInstance(result, dict)\n        self.assertEqual(sum(result.values()), length)\n        self.assertTrue(all(char in string.ascii_letters for char in result))\n    def test_case_4(self):\n        length = 10\n        result = task_func(length, 77)\n        self.assertIsInstance(result, dict)\n        self.assertEqual(result, {'Z': 1, 'q': 1, 'u': 1, 'm': 2, 'p': 1, 'h': 1, 's': 1, 'E': 1, 'J': 1})\n        self.assertTrue(all(char in string.ascii_letters for char in result))\n    def test_case_5(self):\n        length = random.randint(1, 1000)\n        result = task_func(length)\n        self.assertIsInstance(result, dict)\n        self.assertEqual(sum(result.values()), length)\n        self.assertTrue(all(char in string.ascii_letters for char in result))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalize the last column of the DataFrame using MinMaxScaler from sklearn and plot the normalized data.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame or if the DataFrame is empty.\nThe function should output with:\n    DataFrame: A pandas DataFrame where the last column has been normalized.\n    Axes: A Matplotlib Axes object representing the plot of the normalized last column. The plot includes:\n    Title: 'Normalized Data of <column_name>'\n    X-axis label: 'Index'\n    Y-axis label: 'Normalized Value'\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    \n    last_col_name = df.columns[-1]\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(df[[last_col_name]])\n    normalized_df = df.copy()\n    normalized_df[last_col_name] = normalized_values.flatten()\n    \n    fig, ax = plt.subplots()\n    ax.plot(normalized_df.index, normalized_df[last_col_name])\n    ax.set_title(f'Normalized Data of {last_col_name}')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Normalized Value\")\n\n    return normalized_df, ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n    def test_return_type(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        _, ax = task_func(df)\n        self.assertIsInstance(ax, plt.Axes)\n        \n    \n    def test_normalized_dataframe_structure(self):\n        np.random.seed(42)\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        normalized_df, _ = task_func(df)\n        self.assertTrue('D' in normalized_df.columns)\n        df_list = normalized_df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(df_list))\n        expect = ['51.0,92.0,14.0,0.7142857142857142', '60.0,20.0,82.0,0.8673469387755102', '74.0,74.0,87.0,0.9999999999999999', '23.0,2.0,21.0,0.520408163265306', '1.0,87.0,29.0,0.36734693877551017', '1.0,63.0,59.0,0.19387755102040813', '32.0,75.0,57.0,0.2040816326530612', '88.0,48.0,90.0,0.5816326530612245', '41.0,91.0,59.0,0.7959183673469387', '14.0,61.0,61.0,0.4591836734693877', '61.0,50.0,54.0,0.6326530612244897', '2.0,50.0,6.0,0.19387755102040813', '72.0,38.0,17.0,0.020408163265306124', '88.0,59.0,13.0,0.07142857142857142', '89.0,52.0,1.0,0.836734693877551', '91.0,59.0,70.0,0.42857142857142855', '7.0,46.0,34.0,0.7755102040816326', '80.0,35.0,49.0,0.020408163265306124', '1.0,5.0,53.0,0.020408163265306124', '53.0,92.0,62.0,0.16326530612244897', '89.0,43.0,33.0,0.7346938775510203', '61.0,99.0,13.0,0.9489795918367346', '47.0,14.0,71.0,0.7755102040816326', '86.0,61.0,39.0,0.846938775510204', '79.0,81.0,52.0,0.22448979591836732', '25.0,88.0,59.0,0.39795918367346933', '28.0,14.0,44.0,0.6428571428571428', '88.0,70.0,8.0,0.8775510204081631', '0.0,7.0,87.0,0.6224489795918366', '10.0,80.0,7.0,0.336734693877551', '34.0,32.0,4.0,0.39795918367346933', '27.0,6.0,72.0,0.7142857142857142', '11.0,33.0,32.0,0.4693877551020408', '22.0,61.0,87.0,0.3571428571428571', '98.0,43.0,85.0,0.9081632653061223', '34.0,64.0,98.0,0.4591836734693877', '77.0,2.0,0.0,0.030612244897959183', '89.0,13.0,26.0,0.07142857142857142', '78.0,14.0,89.0,0.4081632653061224', '76.0,50.0,62.0,0.9591836734693877', '51.0,95.0,3.0,0.9387755102040816', '22.0,14.0,42.0,0.2755102040816326', '35.0,12.0,31.0,0.7040816326530611', '58.0,85.0,27.0,0.6530612244897959', '41.0,44.0,61.0,0.5612244897959183', '5.0,27.0,27.0,0.42857142857142855', '83.0,29.0,61.0,0.7448979591836734', '91.0,88.0,61.0,0.9693877551020408', '0.0,26.0,61.0,0.7653061224489796', '2.0,69.0,71.0,0.2551020408163265', '8.0,61.0,36.0,0.9693877551020408', '50.0,43.0,23.0,0.7857142857142856', '58.0,31.0,95.0,0.8775510204081631', '51.0,61.0,57.0,0.510204081632653', '11.0,38.0,1.0,0.01020408163265306', '55.0,80.0,58.0,0.0', '1.0,91.0,53.0,0.8673469387755102', '95.0,96.0,0.0,0.173469387755102', '1.0,52.0,43.0,0.8979591836734693', '31.0,69.0,31.0,0.673469387755102', '54.0,74.0,55.0,0.1530612244897959', '37.0,23.0,68.0,0.9795918367346937', '69.0,85.0,10.0,0.14285714285714282', '96.0,72.0,58.0,0.693877551020408', '79.0,92.0,2.0,0.18367346938775508', '58.0,35.0,18.0,0.8979591836734693', '66.0,18.0,19.0,0.9591836734693877', '70.0,51.0,32.0,0.38775510204081626', '38.0,81.0,0.0,0.09183673469387754', '91.0,56.0,88.0,0.48979591836734687', '22.0,30.0,93.0,0.4081632653061224', '98.0,6.0,15.0,0.8979591836734693', '59.0,1.0,0.0,0.4693877551020408', '11.0,68.0,36.0,0.3061224489795918', '8.0,98.0,18.0,0.4693877551020408', '79.0,2.0,19.0,0.22448979591836732', '53.0,32.0,23.0,0.7448979591836734', '71.0,35.0,37.0,0.836734693877551', '98.0,88.0,98.0,0.2346938775510204', '92.0,17.0,81.0,0.6530612244897959', '53.0,34.0,79.0,0.6020408163265305', '40.0,99.0,32.0,0.673469387755102', '32.0,13.0,20.0,0.4693877551020408', '19.0,7.0,6.0,0.6632653061224489', '16.0,32.0,47.0,0.7551020408163265', '58.0,85.0,21.0,0.2857142857142857', '37.0,50.0,53.0,0.061224489795918366', '26.0,26.0,97.0,0.19387755102040813', '29.0,96.0,27.0,0.6326530612244897', '96.0,68.0,60.0,0.4693877551020408', '18.0,3.0,34.0,0.6326530612244897', '48.0,16.0,43.0,0.9183673469387754', '29.0,92.0,45.0,0.04081632653061224', '98.0,36.0,23.0,0.9285714285714285', '45.0,52.0,94.0,0.9897959183673468', '59.0,96.0,62.0,0.846938775510204', '31.0,86.0,32.0,0.6632653061224489', '17.0,24.0,94.0,0.5306122448979591', '57.0,66.0,45.0,0.22448979591836732', '31.0,46.0,85.0,0.21428571428571425']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n    def test_invalid_input_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_invalid_input_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_plot_attributes(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        _, ax = task_func(df)\n        expected_title = f'Normalized Data of {df.columns[-1]}'\n        self.assertEqual(ax.get_title(), expected_title)\n        self.assertEqual(ax.get_xlabel(), 'Index')\n        self.assertEqual(ax.get_ylabel(), 'Normalized Value')\n        \n    def test_normalized_values_range(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        normalized_df, _ = task_func(df)\n        last_col_name = df.columns[-1]\n        self.assertTrue(normalized_df[last_col_name].between(0, 1).all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates an HTTP POST request handler that processes incoming email data and sends an email. The email data must be a JSON object with 'subject', 'message', and 'to' keys. The type of the response can be retrieved as 'content-type' and the length of the response as 'content-length'.\nThe function should raise the exception for: JSONDecodeError: If the email data is not valid JSON. This results in a 400 Bad Request response. ValueError: If the 'subject', 'message', or 'to' keys are missing from the email data, leading to a 400 Bad Request response. smtplib.SMTPAuthenticationError: If there is an authentication issue with the SMTP server. This is communicated to the client with a 535 Authentication Failed response.\nThe function should output with:\n    function: A class that handles HTTP POST requests and sends emails based on\n    the provided data.\nYou should write self-contained code starting with:\n```\nimport cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n```",
        "gt": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    class EmailRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n            if ctype != 'application/json':\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            length = int(self.headers.get('content-length'))\n            try:\n                email_data = json.loads(self.rfile.read(length))\n            except (json.JSONDecodeError):\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            if 'subject' not in email_data or 'message' not in email_data or 'to' not in email_data:\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            msg = MIMEText(email_data['message'])\n            msg['Subject'] = email_data['subject']\n            msg['From'] = smtp_username\n            msg['To'] = email_data['to']\n\n            with smtplib.SMTP(smtp_server, smtp_port) as server:\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                try:\n                    server.sendmail(smtp_username, [email_data['to']], msg.as_string())\n                except smtplib.SMTPAuthenticationError:\n                    self.send_response(535)\n                    self.end_headers()\n                    return\n\n            self.send_response(200)\n            self.end_headers()\n\n    return EmailRequestHandler",
        "test": "import unittest\nfrom unittest.mock import MagicMock, patch, ANY\nimport io\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup with mock SMTP details\n        self.smtp_server = 'smtp.example.com'\n        self.smtp_port = 587\n        self.smtp_username = 'user@example.com'\n        self.smtp_password = 'password'\n        self.handler_class = task_func(self.smtp_server, self.smtp_port, self.smtp_username, self.smtp_password)\n        mock_request = MagicMock()\n        mock_request.makefile = MagicMock(side_effect=lambda *args, **kwargs: io.BytesIO())\n        self.handler = self.handler_class(mock_request, ('127.0.0.1', 8080), None)\n        self.handler.send_response = MagicMock()\n        self.handler.end_headers = MagicMock()\n        self.handler.send_error = MagicMock()\n        self.handler.wfile = io.BytesIO()  # To capture output if needed\n    def test_invalid_content_type(self):\n        self.handler.headers = {'content-type': 'text/plain', 'content-length': '2'}\n        self.handler.do_POST()\n        self.handler.send_response.assert_called_with(400)\n        self.handler.end_headers.assert_called_once()\n    def test_missing_key_in_json_data(self):\n        self.handler.headers = {'content-type': 'application/json', 'content-length': '58'}\n        self.handler.rfile = io.BytesIO(b'{\"subject\": \"Test\", \"message\": \"Missing \\'to\\' key.\"}')\n        self.handler.do_POST()\n        self.handler.send_response.assert_called_with(400)\n        self.handler.end_headers.assert_called_once()\n    @patch('smtplib.SMTP')\n    def test_valid_json_request(self, mock_smtp):\n        self.handler.headers = {'content-type': 'application/json', 'content-length': '89'}\n        self.handler.rfile = io.BytesIO(b'{\"subject\": \"Hello\", \"message\": \"This is a test\", \"to\": \"test@example.com\"}')\n        self.handler.do_POST()\n        mock_smtp.assert_called_with(self.smtp_server, self.smtp_port)\n        instance = mock_smtp.return_value.__enter__.return_value\n        instance.sendmail.assert_called_once_with(self.smtp_username, ['test@example.com'], ANY)\n        self.handler.send_response.assert_called_with(200)\n        self.handler.end_headers.assert_called_once()\n    def test_invalid_json_format(self):\n        self.handler.headers = {'content-type': 'application/json', 'content-length': '20'}\n        self.handler.rfile = io.BytesIO(b'{invalid_json_data}')\n        self.handler.do_POST()\n        self.handler.send_response.assert_called_with(400)\n        self.handler.end_headers.assert_called_once()\n    def test_empty_json_data(self):\n        self.handler.headers = {'content-type': 'application/json', 'content-length': '2'}\n        self.handler.rfile = io.BytesIO(b'{}')\n        self.handler.do_POST()\n        self.handler.send_response.assert_called_with(400)\n        self.handler.end_headers.assert_called_once()\n    @patch('smtplib.SMTP')\n    def test_email_sending_exception(self, mock_smtp):\n        \"\"\"\n        Test handling of exceptions during the email sending process, such as authentication failure.\n        \"\"\"\n        self.handler.headers = {'content-type': 'application/json', 'content-length': '89'}\n        self.handler.rfile = io.BytesIO(b'{\"subject\": \"Hello\", \"message\": \"This is a test\", \"to\": \"test@example.com\"}')\n        \n        instance = mock_smtp.return_value.__enter__.return_value\n        instance.sendmail.side_effect = smtplib.SMTPAuthenticationError(535, 'Authentication failed')\n        # Wrap the call that is expected to raise the exception in a self.assertRaises context\n        self.handler.do_POST()\n        # Expecting the handler to respond with an error due to SMTP authentication failure\n        self.handler.send_response.assert_called_with(535)\n        self.handler.end_headers.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Remove rows from a dataframe based on column values and generate random scatter plots.\nThe function should output with:\n    pd.DataFrame: The DataFrame after removal of specified rows.\n    list: A list containing matplotlib Axes objects of the generated plots.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\n# Constants for column names to use in plots\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom random import sample\n# Constants for column names to use in plots\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df: pd.DataFrame, tuples: list, n_plots: int) -> (pd.DataFrame, list):\n\n    # Ensure tuple elements match DataFrame columns for removal\n    df = df[~df.apply(tuple, axis=1).isin(tuples)]\n\n    # Generate random plots\n    plots = []\n    for _ in range(n_plots):\n        selected_columns = sample(COLUMNS, 2)\n        ax = df.plot(x=selected_columns[0], y=selected_columns[1], kind='scatter')\n        plots.append(ax)\n\n    plt.show()\n\n    return df, plots",
        "test": "import unittest\nfrom unittest.mock import patch\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame(np.random.randint(0, 100, size=(100, 5)), columns=COLUMNS)\n        self.tuples = [(self.df.iloc[0].values), (self.df.iloc[1].values)]\n    def test_no_plots_generated(self):\n        \"\"\"Test case with zero plots requested.\"\"\"\n        _, plots = task_func(self.df, [], 0)  # Request 0 plots.\n        self.assertEqual(len(plots), 0, \"No plots should be generated when n_plots is 0.\")\n    def test_plot_generation(self):\n        _, plots = task_func(self.df, [], 3)\n        self.assertEqual(len(plots), 3, \"Should generate exactly 3 plots.\")\n    @patch('matplotlib.pyplot.show')\n    def test_empty_dataframe(self, mock_show):\n        empty_df = pd.DataFrame(columns=COLUMNS)\n        modified_df, plots = task_func(empty_df, [], 2)\n        self.assertTrue(modified_df.empty, \"DataFrame should be empty.\")\n        self.assertEqual(len(plots), 2, \"Should attempt to generate 2 plots even for an empty DataFrame.\")\n    def test_no_row_removal(self):\n        modified_df, _ = task_func(self.df, [(999, 999, 999, 999, 999)], 0)\n        self.assertEqual(len(modified_df), len(self.df), \"No rows should be removed.\")\n    def test_random_plot_columns(self):\n        _, plots = task_func(self.df, [], 1)\n        # Assuming task_func generates at least one plot and adds it to the list,\n        # access the first plot for testing.\n        first_plot = plots[0]\n        plot_columns = [first_plot.get_xlabel(), first_plot.get_ylabel()]\n        self.assertIn(plot_columns[0], COLUMNS, \"X-axis should be from COLUMNS.\")\n        self.assertIn(plot_columns[1], COLUMNS, \"Y-axis should be from COLUMNS.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a seaborn pairplot for the diabetes dataset obtained from sklearn.datasets. This function sets the font to Arial. It then loads the diabetes dataset into a DataFrame and creates a pairplot using seaborn, which is useful for visual exploration of relationships between different features in the dataset.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib Figure instance representing the created pairplot.\n    pd.DataFrame: a DataFrame representation of the diabetes dataset\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef task_func():\n```",
        "gt": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\ndef task_func():\n    font = {'family': 'Arial'}\n    plt.rc('font', **font)  # Set the global font to Arial.\n    DIABETES = load_diabetes()\n    diabetes_df = pd.DataFrame(data=DIABETES.data, columns=DIABETES.feature_names)\n    pair_plot = sns.pairplot(diabetes_df)\n    return pair_plot.fig, diabetes_df",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom unittest.mock import patch\nfrom sklearn.datasets import load_diabetes\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Load the dataset only once for use in multiple tests to improve performance\n        self.diabetes_data = load_diabetes()\n        self.diabetes_df = pd.DataFrame(data=self.diabetes_data.data, columns=self.diabetes_data.feature_names)\n    def test_return_type(self):\n        \"\"\"Test that the function returns a matplotlib Figure instance.\"\"\"\n        fig, diabetes_df = task_func()\n        self.assertIsInstance(fig, plt.Figure)\n        self.assertIsInstance(diabetes_df, pd.DataFrame)\n    def test_dataframe_values_equal(self):\n        fig, diabetes_df = task_func()\n        # Check if all values in each column are equal\n        for col in self.diabetes_df.columns:\n            self.assertTrue(all(self.diabetes_df[col] == diabetes_df[col]))\n    def test_font_setting(self):\n        \"\"\"Test if the font setting is correctly applied to the figure.\"\"\"\n        task_func()\n        # Checking matplotlib's default font settings\n        current_font = plt.rcParams['font.family']\n        self.assertIn('Arial', current_font)\n    @patch('seaborn.pairplot')\n    def test_seaborn_pairplot_called(self, mock_pairplot):\n        \"\"\"Test if seaborn's pairplot function is called in task_func.\"\"\"\n        mock_pairplot.return_value = sns.pairplot(self.diabetes_df)  # Mocking pairplot to return a valid pairplot\n        task_func()\n        mock_pairplot.assert_called()\n    def test_dataframe_col_equal(self):\n        \"\"\"Test specific configurations of the seaborn pairplot.\"\"\"\n        fig, diabetes_df = task_func()\n        # Check if all columns in self.diabetes_df are the same as in diabetes_df\n        self.assertTrue(all(col in diabetes_df.columns for col in self.diabetes_df.columns))\n        self.assertTrue(all(col in self.diabetes_df.columns for col in diabetes_df.columns))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with a specified number of records containing personal names and emails. The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\nThe function should raise the exception for: ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n```",
        "gt": "import pandas as pd\nimport random\nimport re\ndef task_func(person_names, email_domains, num_records=5):\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    \n    data = []\n    \n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        random.seed(0)  # Initialize random seed\n        result_df = task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n        self.assertTrue(isinstance(result_df, pd.DataFrame))\n        self.assertEqual(len(result_df), 2)\n        self.assertTrue(set(result_df.columns) == {'Name', 'Email'})\n        self.assertTrue(all(result_df['Email'].str.contains('[at]')))\n        \n    def test_case_2(self):\n        random.seed(0)  # Initialize random seed\n        result_df = task_func(['Alice'], ['outlook.com'], 1)\n        self.assertTrue(isinstance(result_df, pd.DataFrame))\n        self.assertEqual(len(result_df), 1)\n        self.assertTrue(set(result_df.columns) == {'Name', 'Email'})\n        self.assertTrue(all(result_df['Email'].str.contains('[at]')))\n        \n    def test_case_3(self):\n        random.seed(0)  # Initialize random seed\n        with self.assertRaises(ValueError):\n            task_func(['John Doe'], ['gmail.com'], 2)\n            \n    def test_case_4(self):\n        random.seed(0)  # Initialize random seed\n        with self.assertRaises(ValueError):\n            task_func(['John Doe', 'Jane Smith'], [], 2)\n            \n    def test_case_5(self):\n        random.seed(0)  # Initialize random seed\n        result_df = task_func(['John Doe', 'Jane Smith', 'Bob'], ['gmail.com', 'yahoo.com'], 3)\n        self.assertTrue(isinstance(result_df, pd.DataFrame))\n        self.assertEqual(len(result_df), 3)\n        self.assertTrue(set(result_df.columns) == {'Name', 'Email'})\n        self.assertTrue(all(result_df['Email'].str.contains('[at]')))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create and plot `n_walks` number of random walks, each with `n_steps` steps. The function checks for valid n_walks and n_steps, then generates walks via numpy. Each walk is plotted in a different color cycling through a predefined set of colors: ['b', 'g', 'r', 'c', 'm', 'y', 'k'].\nThe function should output with:\n    ax (plt.Axes): A Matplotlib Axes containing the plotted random walks.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools\ndef task_func(n_walks, n_steps, seed=None):\n    if n_walks < 0 or n_steps < 0:\n        raise ValueError(\"Walks and steps cannot be negative.\")\n    np.random.seed(seed)\n    COLORS = [\"b\", \"g\", \"r\", \"c\", \"m\", \"y\", \"k\"]\n    color_cycle = itertools.cycle(COLORS)\n    fig, ax = plt.subplots()\n    for _ in range(n_walks):\n        walk = np.random.choice([-1, 1], size=n_steps)\n        walk = np.cumsum(walk)\n        ax.plot(walk, next(color_cycle))\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic setup\n        ax = task_func(5, 100, seed=42)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        # Test number of walks\n        for n_walk in [0, 1, 2, 10, 50]:\n            ax = task_func(n_walk, 10, seed=42)\n            lines = ax.get_lines()\n            self.assertEqual(len(lines), n_walk)\n    def test_case_3(self):\n        # Test number of steps\n        for n_steps in [0, 1, 10, 100, 500]:\n            ax = task_func(2, n_steps, seed=42)\n            lines = ax.get_lines()\n            self.assertEqual(len(lines[0].get_ydata()), n_steps)\n    def test_case_4(self):\n        # Test random seed\n        ax1 = task_func(5, 100, seed=42)\n        ax2 = task_func(5, 100, seed=42)\n        ax3 = task_func(5, 100, seed=0)\n        lines1 = ax1.get_lines()\n        lines2 = ax2.get_lines()\n        lines3 = ax3.get_lines()\n        self.assertTrue(\n            all(\n                np.array_equal(line1.get_ydata(), line2.get_ydata())\n                for line1, line2 in zip(lines1, lines2)\n            )\n        )\n        self.assertFalse(\n            all(\n                np.array_equal(line1.get_ydata(), line3.get_ydata())\n                for line1, line3 in zip(lines1, lines3)\n            ),\n            \"Random walks are not reproducible using the same seed.\",\n        )\n    def test_case_5(self):\n        # Test invalid n_walks\n        with self.assertRaises(ValueError):\n            task_func(-1, 100, seed=42)\n    def test_case_6(self):\n        # Test negative n_steps\n        with self.assertRaises(ValueError):\n            task_func(1, -100, seed=42)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Load e-mail data from a JSON file, convert it into a Pandas DataFrame, calculate the sum and mean of the list associated with each e-mail, and then record those values. Additionally, it plots the sum and mean values for each email. If there is no e-mail data, return an empty dataframe with the right columns (['email', 'list', 'sum', 'mean']), and None as the plot.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: A pandas DataFrame with columns ['email', 'list', 'sum', 'mean'].\n    Axes: The Axes object for the plot. None if the dataframe is empty.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport json\nimport numpy as np\n# Constants\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n```",
        "gt": "import pandas as pd\nimport json\nimport numpy as np\n# Constants\nCOLUMNS = ['email', 'list']\ndef task_func(json_file):\n    with open(json_file, 'r') as file:\n        email_data = json.load(file)\n    if not email_data :\n        return pd.DataFrame([], columns = COLUMNS + [\"sum\", \"mean\"]), None\n\n    df = pd.DataFrame(email_data, columns=COLUMNS)\n    df['sum'] = df['list'].apply(np.sum)\n    df['mean'] = df['list'].apply(np.mean)\n\n    ax = df[['sum', 'mean']].plot(kind='bar')\n\n    return df, ax",
        "test": "import os\nimport shutil\nimport unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        self.test_dir = 'data/task_func'\n        os.makedirs(self.test_dir, exist_ok=True)\n        self.f_1 = os.path.join(self.test_dir, \"json_1.json\")\n        self.f_2 = os.path.join(self.test_dir, \"json_2.json\")\n        self.f_3 = os.path.join(self.test_dir, \"json_3.json\")\n        self.f_4 = os.path.join(self.test_dir, \"json_4.json\")\n        self.f_5 = os.path.join(self.test_dir, \"json_5.json\")\n        with open(self.f_1, \"w\") as fout :\n            json.dump(\n                [\n                    {\n                        \"email\" : \"first@example.com\",\n                        \"list\" : [12, 17, 29, 45, 7, 3]\n                    },\n                    {\n                        \"email\" : \"second@example.com\",\n                        \"list\" : [1, 1, 3, 73, 21, 19, 12]\n                    },\n                    {\n                        \"email\" : \"third@example.com\",\n                        \"list\" : [91, 23, 7, 14, 66]\n                    }\n                ],\n                fout\n            )\n        with open(self.f_2, \"w\") as fout :\n            json.dump(\n                [\n                    {\n                        \"email\" : \"fourth@example.com\",\n                        \"list\" : [12, 21, 35, 2, 1]\n                    },\n                    {\n                        \"email\" : \"fifth@example.com\",\n                        \"list\" : [13, 4, 10, 20]\n                    },\n                    {\n                        \"email\" : \"sixth@example.com\",\n                        \"list\" : [82, 23, 7, 14, 66]\n                    },\n                    {\n                        \"email\" : \"seventh@example.com\",\n                        \"list\" : [111, 23, 4]\n                    }\n                ],\n                fout\n            )\n        with open(self.f_3, \"w\") as fout :\n            json.dump(\n                [\n                    {\n                        \"email\" : \"eight@example.com\",\n                        \"list\" : [1, 2, 3, 4, 5]\n                    },\n                    {\n                        \"email\" : \"ninth@example.com\",\n                        \"list\" : [6, 7, 8, 9, 10]\n                    }\n                ],\n                fout\n            )\n        with open(self.f_4, \"w\") as fout :\n            json.dump(\n                [\n                    {\n                        \"email\" : \"tenth@example.com\",\n                        \"list\" : [11, 12, 13, 14, 15]\n                    }\n                ],\n                fout\n            )\n        with open(self.f_5, \"w\") as fout :\n            json.dump(\n                [],\n                fout\n            )\n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Test with sample JSON data\n        df, ax = task_func(self.f_1)\n        # Assert DataFrame values\n        self.assertEqual(df[\"email\"].tolist(), [\"first@example.com\", \"second@example.com\", \"third@example.com\"])\n        self.assertEqual(df[\"sum\"].tolist(), [113, 130, 201])\n        self.assertEqual(df[\"mean\"].tolist(), [113/6.0, 130/7.0, 201/5.0])\n        # Assert plot attributes\n        self.assertEqual(ax.get_title(), '')\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], ['0', '1', '2'])\n        self.assertListEqual([label.get_text() for label in ax.get_legend().get_texts()], ['sum', 'mean'])\n    def test_case_2(self):\n        # Test with sample JSON data\n        df, ax = task_func(self.f_2)\n        # Assert DataFrame values\n        self.assertEqual(df[\"email\"].tolist(), [\"fourth@example.com\", \"fifth@example.com\", \"sixth@example.com\", \"seventh@example.com\"])\n        self.assertEqual(df[\"sum\"].tolist(), [71, 47, 192, 138])\n        self.assertEqual(df[\"mean\"].tolist(), [71/5.0, 47/4.0, 192/5.0, 138/3.0])\n        # Assert plot attributes\n        self.assertEqual(ax.get_title(), '')\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], ['0', '1', '2', '3'])\n        self.assertListEqual([label.get_text() for label in ax.get_legend().get_texts()], ['sum', 'mean'])\n    def test_case_3(self):\n        # Test with sample JSON data\n        df, ax = task_func(self.f_3)\n        # Assert DataFrame values\n        self.assertEqual(df[\"email\"].tolist(), [\"eight@example.com\", \"ninth@example.com\"])\n        self.assertEqual(df[\"sum\"].tolist(), [15.0, 40.0])\n        self.assertEqual(df[\"mean\"].tolist(), [3.0, 8.0])\n        # Assert plot attributes\n        self.assertEqual(ax.get_title(), '')\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], ['0', '1'])\n        self.assertListEqual([label.get_text() for label in ax.get_legend().get_texts()], ['sum', 'mean'])\n    def test_case_4(self):\n        # Test with sample JSON data\n        df, ax = task_func(self.f_4)\n        # Assert DataFrame values\n        self.assertEqual(df[\"email\"].tolist(), [\"tenth@example.com\"])\n        self.assertEqual(df[\"sum\"].tolist(), [65.0])\n        self.assertEqual(df[\"mean\"].tolist(), [13.0])\n        # Assert plot attributes\n        self.assertEqual(ax.get_title(), '')\n        self.assertListEqual([label.get_text() for label in ax.get_xticklabels()], ['0'])\n        self.assertListEqual([label.get_text() for label in ax.get_legend().get_texts()], ['sum', 'mean'])\n    def test_case_5(self):\n        # Test with empty JSON data\n        df, ax = task_func(self.f_5)\n        self.assertIsNone(ax)\n        self.assertTrue(df.empty)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random string of length 'n' and find all non-overlapping matches of the regex 'pattern'. The function generates a random string of ASCII Letters and Digits using the random module. By providing a seed the results are reproducable. Non overlapping matches of the provided pattern are then found using the re module. >>> task_func(1000, r'[1-9]{2}', seed=1) ['51', '84', '16', '79', '16', '28', '63', '82', '94', '18', '68', '42', '95', '33', '64', '38', '69', '56', '32', '16', '18', '19', '27']\nThe function should output with:\n    list: A list of all non-overlapping matches of the regex pattern in the generated string.\nYou should write self-contained code starting with:\n```\nimport re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n```",
        "gt": "import re\nimport random\nimport string\ndef task_func(n, pattern, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    rand_str = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n))\n    matches = re.findall(pattern, rand_str)\n    return matches",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_valid_pattern_matching(self):\n        test_length = 100\n        test_pattern = r'[A-Za-z]{5}'\n        test_seed = 12345  # using a seed for consistency\n        expected_matches = [\n            'mrKBk',\n            'BqJOl',\n            'NJlwV',\n            'UfHVA',\n            'LGkjn',\n            'vubDv',\n            'GSVAa',\n            'kXLls',\n            'RKlVy',\n            'vZcoh',\n            'FnVZW',\n            'JQlqL'\n        ]\n        actual_matches = task_func(test_length, test_pattern, seed=test_seed)\n        self.assertEqual(actual_matches, expected_matches)\n    def test_no_matches_found(self):\n        test_length = 100\n        test_pattern = r'XYZ'\n        test_seed = 12345\n        expected_matches = []\n        actual_matches = task_func(test_length, test_pattern, seed=test_seed)\n        self.assertEqual(actual_matches, expected_matches)\n    def test_zero_length_string(self):\n        test_length = 0\n        test_pattern = r'[A-Za-z0-9]{5}'\n        expected_matches = []\n        actual_matches = task_func(test_length, test_pattern, seed=None)\n        self.assertEqual(actual_matches, expected_matches)\n    def test_unusual_pattern(self):\n        test_length = 100\n        test_pattern = r'[^A-Za-z0-9]+'\n        test_seed = 67890\n        expected_matches = []\n        actual_matches = task_func(test_length, test_pattern, seed=test_seed)\n        self.assertEqual(actual_matches, expected_matches)\n    def test_extreme_input_values(self):\n        test_length = 10000  # Reduced size for the environment's stability\n        test_pattern = r'[A-Za-z]{5}'\n        actual_matches = task_func(test_length, test_pattern, seed=None)\n        self.assertIsInstance(actual_matches, list)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scales the values in a given dictionary using MinMaxScaler and plots the scaled data.\nThe function should output with:\n    pandas.DataFrame containing the scaled data.\n    matplotlib Axes object that displays the plot of the scaled data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n# Constants\nPLOT_TITLE = \"Scaled Values\"\ndef task_func(data_dict):\n    df = pd.DataFrame(data_dict).dropna()\n\n    if df.empty:\n        ax = plt.gca()\n        ax.set_title(PLOT_TITLE)\n        return df, ax\n\n    scaler = MinMaxScaler()\n    scaled_data = scaler.fit_transform(df)\n    df_scaled = pd.DataFrame(scaled_data, columns=df.columns)\n\n    ax = df_scaled.plot()\n    ax.set_title(PLOT_TITLE)\n\n    return df_scaled, ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Unit tests for the function.\"\"\"\n    def test_empty_data(self):\n        \"\"\"\n        Test with an empty dictionary. Should return an empty DataFrame and a plot object.\n        \"\"\"\n        result_df, result_ax = task_func({})\n        self.assertTrue(result_df.empty)\n        self.assertIsNotNone(result_ax)\n    def test_all_none_data(self):\n        \"\"\"\n        Test with a dictionary where all values are None. Should return an empty DataFrame and a plot object.\n        \"\"\"\n        data = {\"a\": [None, None], \"b\": [None, None]}\n        result_df, result_ax = task_func(data)\n        self.assertTrue(result_df.empty)\n        self.assertIsNotNone(result_ax)\n    def test_normal_data(self):\n        \"\"\"\n        Test with a normal data dictionary. Should return a non-empty DataFrame and a plot object.\n        \"\"\"\n        data = {\"a\": [1, 2, 3], \"b\": [4, 5, 6]}\n        result_df, result_ax = task_func(data)\n        self.assertEqual(result_ax.get_title(), \"Scaled Values\")\n        self.assertFalse(result_df.empty)\n        self.assertEqual(result_df.shape, (3, 2))\n        self.assertIsNotNone(result_ax)\n    def test_with_missing_values(self):\n        \"\"\"\n        Test data with some missing values. Missing values should be dropped, and scaled data should be returned.\n        \"\"\"\n        data = {\"a\": [1, None, 3], \"b\": [4, 5, None]}\n        result_df, result_ax = task_func(data)\n        self.assertEqual(result_df.shape, (1, 2))  # Only one row without missing values\n        self.assertIsNotNone(result_ax)\n    def test_with_negative_values(self):\n        \"\"\"\n        Test data with negative values. Should handle negative values correctly and return scaled data.\n        \"\"\"\n        data = {\"a\": [-1, -2, -3], \"b\": [1, 2, 3]}\n        result_df, result_ax = task_func(data)\n        self.assertFalse(result_df.empty)\n        self.assertEqual(result_df.shape, (3, 2))\n        self.assertIsNotNone(result_ax)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Save the Sklearn dataset (\"Data\" and \"Destination\") in the pickle file \"save.pkl\" and then read it back for validation.\nThe function should output with:\n    tuple: The loaded tuple (data, target) from 'save.pkl'.\nYou should write self-contained code starting with:\n```\nimport pickle\nimport os\nfrom sklearn.datasets import make_classification\n# Constants\nFILE_NAME = 'save.pkl'\nDATA, TARGET = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\ndef task_func(data, target):\n```",
        "gt": "import pickle\nimport os\nfrom sklearn.datasets import make_classification\n# Constants\nFILE_NAME = 'save.pkl'\nDATA, TARGET = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\ndef task_func(data, target):\n    with open(FILE_NAME, 'wb') as file:\n        pickle.dump((data, target), file)\n    \n    with open(FILE_NAME, 'rb') as file:\n        loaded_data, loaded_target = pickle.load(file)\n\n    os.remove(FILE_NAME)\n\n    return loaded_data, loaded_target",
        "test": "from sklearn.datasets import make_classification\nimport numpy as np\nimport unittest\nimport sys\nsys.path.append(\"/mnt/data\")\n# Defining the test function\nclass TestCases(unittest.TestCase):\n    def test_save_and_load_data(self):\n        data, target = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\n        loaded_data, loaded_target = task_func(data, target)\n        self.assertTrue(np.array_equal(data, loaded_data))\n        self.assertTrue(np.array_equal(target, loaded_target))\n    \n    def test_save_and_load_empty_data(self):\n        data, target = np.array([]), np.array([])\n        loaded_data, loaded_target = task_func(data, target)\n        self.assertTrue(np.array_equal(data, loaded_data))\n        self.assertTrue(np.array_equal(target, loaded_target))\n    \n    def test_save_and_load_single_element_data(self):\n        data, target = np.array([5]), np.array([1])\n        loaded_data, loaded_target = task_func(data, target)\n        self.assertTrue(np.array_equal(data, loaded_data))\n        self.assertTrue(np.array_equal(target, loaded_target))\n    \n    def test_save_and_load_large_data(self):\n        data, target = make_classification(n_samples=1000, n_features=50, n_informative=5, n_redundant=25, n_classes=3, random_state=2)\n        loaded_data, loaded_target = task_func(data, target)\n        self.assertTrue(np.array_equal(data, loaded_data))\n        self.assertTrue(np.array_equal(target, loaded_target))\n    \n    def test_save_and_load_random_data(self):\n        data, target = np.random.rand(50, 5), np.random.randint(0, 2, 50)\n        loaded_data, loaded_target = task_func(data, target)\n        self.assertTrue(np.array_equal(data, loaded_data))\n        self.assertTrue(np.array_equal(target, loaded_target))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the N biggest differences between the respective elements of the list 'l1' and list 'l2', square the differences, take the square root and return the plotted values as a matplotlib Axes object.\nThe function should output with:\n    matplotlib.axes._axes.Axes: A matplotlib Axes object with the plotted differences.\nYou should write self-contained code starting with:\n```\nimport heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n```",
        "gt": "import heapq\nimport math\nimport matplotlib.pyplot as plt\ndef task_func(l1, l2, N=10):\n    largest_diff_indices = heapq.nlargest(N, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n    largest_diffs = [math.sqrt((l1[i] - l2[i])**2) for i in largest_diff_indices]\n\n    fig, ax = plt.subplots()\n    ax.plot(largest_diffs)\n\n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        l1 = [99, 86, 90, 70, 86, 95, 56, 98, 80, 81]\n        l2 = [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n        ax = task_func(l1, l2)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 10)\n    def test_case_2(self):\n        l1 = [10, 20, 30, 40, 50]\n        l2 = [1, 2, 3, 4, 5]\n        ax = task_func(l1, l2, 3)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 3)\n    def test_case_3(self):\n        l1 = [0, 10, 20, 30, 40, 50]\n        l2 = [0, 0, 0, 0, 0, 0]\n        ax = task_func(l1, l2)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 6)\n    def test_case_4(self):\n        l1 = [1, 2, 3, 4, 5]\n        l2 = [5, 4, 3, 2, 1]\n        ax = task_func(l1, l2)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 5)\n    def test_case_5(self):\n        l1 = [0, 0, 0, 0, 0]\n        l2 = [0, 0, 0, 0, 0]\n        ax = task_func(l1, l2)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate statistics for the vegetables preferred by people listed in the input dictionary. The function reverses the dictionary to map vegetables to people and assigns random counts to these vegetables. It then calculates the occurrences of each vegetable as a percentage of the total counts. A dictionary is created to map each vegetable to a person from the input where vegetables are values. Random counts between 1 and 10 are assigned to simulate varying popularity or availability of each vegetable.\nThe function should output with:\n    DataFrame: Returns a DataFrame with columns for vegetable names, their random counts,\n    and their percentage occurrence within the total counts.\nYou should write self-contained code starting with:\n```\nimport random\nimport pandas as pd\nimport collections\n# Constants\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n```",
        "gt": "import random\nimport pandas as pd\nimport collections\n# Constants\nVEGETABLES = ['Carrot', 'Potato', 'Tomato', 'Cabbage', 'Spinach']\ndef task_func(vegetable_dict, seed=0):\n    random.seed(seed)\n    # Create a counter for vegetables based on reversed dictionary\n    reversed_dict = {v: k for k, v in vegetable_dict.items()}\n    vegetable_counter = collections.Counter({vegetable: random.randint(1, 10) for vegetable in reversed_dict.keys()})\n\n    statistics_df = pd.DataFrame.from_dict(vegetable_counter, orient='index', columns=['Count'])\n    statistics_df['Percentage'] = statistics_df['Count'] / statistics_df['Count'].sum() * 100\n\n    return statistics_df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        vegetable_dict = {'John': 'Carrot', 'Alice': 'Potato', 'Bob': 'Tomato'}\n        result = task_func(vegetable_dict)\n        self.assertIn('Carrot', result.index)\n        self.assertIn('Potato', result.index)\n        self.assertIn('Tomato', result.index)\n        self.assertTrue(all(result['Percentage'] <= 100))\n        self.assertTrue(all(result['Percentage'] >= 0))\n    def test_case_2(self):\n        vegetable_dict = {'Charlie': 'Cabbage', 'David': 'Spinach'}\n        result = task_func(vegetable_dict)\n        self.assertIn('Cabbage', result.index)\n        self.assertIn('Spinach', result.index)\n        self.assertTrue(all(result['Percentage'] <= 100))\n        self.assertTrue(all(result['Percentage'] >= 0))\n    def test_case_3(self):\n        vegetable_dict = {}\n        result = task_func(vegetable_dict)\n        self.assertTrue(all(result['Percentage'] <= 100))\n        self.assertTrue(all(result['Percentage'] >= 0))\n    def test_case_4(self):\n        vegetable_dict = {'Eva': 'Carrot', 'Frank': 'Carrot', 'Grace': 'Tomato'}\n        result = task_func(vegetable_dict)\n        self.assertIn('Carrot', result.index)\n        self.assertIn('Tomato', result.index)\n        self.assertTrue(all(result['Percentage'] <= 100))\n        self.assertTrue(all(result['Percentage'] >= 0))\n    def test_case_5(self):\n        vegetable_dict = {'Hannah': 'Spinach', 'Ian': 'Potato', 'Jack': 'Cabbage', 'Katie': 'Tomato'}\n        result = task_func(vegetable_dict)\n        self.assertIn('Spinach', result.index)\n        self.assertIn('Potato', result.index)\n        self.assertIn('Cabbage', result.index)\n        self.assertIn('Tomato', result.index)\n        self.assertTrue(all(result['Percentage'] <= 100))\n        self.assertTrue(all(result['Percentage'] >= 0))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform an SVM classification of the iris dataset and warn if the accuracy is less than 0.9. The warning action is set to 'always'. The test size for the train-test split is 0.33.\nThe function should output with:\n    tuple: A tuple containing:\n    accuracy (float): The accuracy of the SVM classification.\n    warning_msg (str or None): A warning message if the accuracy is below 0.9, None otherwise.\nYou should write self-contained code starting with:\n```\nimport warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\ndef task_func():\n```",
        "gt": "import warnings\nimport sklearn.model_selection as model_selection\nimport sklearn.svm as svm\nimport sklearn.datasets as datasets\nimport sklearn.metrics as metrics\ndef task_func():\n    warnings.simplefilter('always')\n    iris = datasets.load_iris()\n    # Set random_state to any fixed number to ensure consistency in data splitting\n    X_train, X_test, y_train, y_test = model_selection.train_test_split(\n        iris.data, iris.target, test_size=0.33, random_state=42)\n    \n    # Initialize the classifier with a fixed random_state\n    clf = svm.SVC(random_state=42)\n    clf.fit(X_train, y_train)\n    predictions = clf.predict(X_test)\n    accuracy = metrics.accuracy_score(y_test, predictions)\n\n    warning_msg = None\n    if accuracy < 0.9:\n        warning_msg = \"The accuracy of the SVM classification is below 0.9.\"\n        warnings.warn(warning_msg)\n\n    return accuracy, warning_msg",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_high_accuracy(self):\n        accuracy, warning_msg = task_func()\n        self.assertGreaterEqual(accuracy, 0.8)\n        self.assertIsNone(warning_msg)\n    def test_low_accuracy_warning(self):\n        accuracy, warning_msg = task_func()\n        if accuracy < 0.9:\n            self.assertEqual(warning_msg, \"The accuracy of the SVM classification is below 0.9.\")\n    def test_accuracy_range(self):\n        accuracy, _ = task_func()\n        self.assertGreaterEqual(accuracy, 0)\n        self.assertLessEqual(accuracy, 1)\n    def test_return_type(self):\n        result = task_func()\n        self.assertIsInstance(result, tuple)\n        self.assertIsInstance(result[0], float)\n        self.assertIn(result[1], [None, \"The accuracy of the SVM classification is below 0.9.\"])\n    def test_warning_setting(self):\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            _, _ = task_func()\n            if w:\n                self.assertEqual(str(w[-1].message), \"The accuracy of the SVM classification is below 0.9.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame with a specified number of rows and columns, populated with randomly generated data. Each column's data type is randomly selected from a set of Python data types, including primitive and complex structures. DataFrame: A DataFrame in which each column's data type could be one of the following, with random content generated accordingly: - str: Random strings of 5 lowercase alphabetic characters. - int: Random integers from 0 to 9. - float: Random floats derived by converting integers from 0 to 9 into float. - list: Lists of random length (1 to 5) containing integers from 0 to 9. - tuple: Tuples of random length (1 to 5) containing integers from 0 to 9. - dict: Dictionaries with a random number (1 to 5) of key-value pairs, keys and values are integers from 0 to 9. - set: Sets of random size (1 to 5) containing unique integers from 0 to 9.\nThe function should output with:\n    pd.DataFrame: A DataFrame with the specified number of rows and columns named 'col0', 'col1', etc., containing randomly generated data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom random import choice\n# Constants\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\ndef task_func(rows, columns):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom random import choice\n# Constants\nDATA_TYPES = [str, int, float, list, tuple, dict, set]\ndef task_func(rows, columns):\n    data = {}\n    for col in range(columns):\n        data_type = choice(DATA_TYPES)\n        if data_type == str:\n            data['col' + str(col)] = [''.join(np.random.choice(list('abcdefghijklmnopqrstuvwxyz'), size=5)) for _ in\n                                      range(rows)]\n        elif data_type in [int, float]:\n            data['col' + str(col)] = np.random.choice([data_type(i) for i in range(10)], size=rows)\n        elif data_type == list:\n            data['col' + str(col)] = [list(np.random.choice(range(10), size=np.random.randint(1, 6))) for _ in\n                                      range(rows)]\n        elif data_type == tuple:\n            data['col' + str(col)] = [tuple(np.random.choice(range(10), size=np.random.randint(1, 6))) for _ in\n                                      range(rows)]\n        elif data_type == dict:\n            data['col' + str(col)] = [dict(zip(np.random.choice(range(10), size=np.random.randint(1, 6)),\n                                               np.random.choice(range(10), size=np.random.randint(1, 6)))) for _ in\n                                      range(rows)]\n        elif data_type == set:\n            data['col' + str(col)] = [set(np.random.choice(range(10), size=np.random.randint(1, 6))) for _ in\n                                      range(rows)]\n\n    df = pd.DataFrame(data)\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Setup a predictable random seed for numpy to ensure deterministic tests.\"\"\"\n        np.random.seed(42)\n    def test_dataframe_dimensions(self):\n        \"\"\"Test the generated DataFrame has the correct dimensions.\"\"\"\n        rows, columns = 5, 3\n        df = task_func(rows, columns)\n        self.assertEqual(df.shape, (rows, columns), \"DataFrame should have the specified dimensions.\")\n    def test_dataframe_data_types(self):\n        \"\"\"Test that each column in the DataFrame has data of the correct type and validates mixed data types.\"\"\"\n        df = task_func(5, 5)\n        for col in df.columns:\n            values = df[col]\n            unique_types = set(type(v) for v in values)\n            self.assertTrue(len(unique_types) <= 2, \"Each column should contain no more than two distinct data types.\")\n    def test_dataframe_size(self):\n        \"\"\"Test that the DataFrame has the correct dimensions.\"\"\"\n        rows, columns = 5, 4\n        df = task_func(rows, columns)\n        self.assertEqual(df.shape, (rows, columns), \"DataFrame should have the specified dimensions.\")\n    def test_column_names(self):\n        \"\"\"Test that the column names are correctly formatted.\"\"\"\n        columns = 3\n        df = task_func(5, columns)\n        expected_columns = ['col' + str(i) for i in range(columns)]\n        self.assertListEqual(list(df.columns), expected_columns, \"Column names are not formatted correctly.\")\n    def test_collection_sizes(self):\n        \"\"\"Test the size constraints of collections like lists, tuples, dicts, and sets.\"\"\"\n        df = task_func(10, 10)\n        for col in df.columns:\n            if isinstance(df[col][0], (list, tuple, set, dict)):\n                if isinstance(df[col][0], dict):\n                    sizes = [len(v.keys()) for v in df[col]]\n                else:\n                    sizes = [len(v) for v in df[col]]\n                self.assertTrue(all(1 <= s <= 5 for s in sizes), f\"Sizes in column {col} should be between 1 and 5.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a number from one base to another, adds a random salt, hashes the result using SHA-256, and then encodes the hash in base64 using a custom alphabet. The function also returns the used salt. Verify that different invocations produce different results due to the random salt. >>> result1, salt1 = task_func('FF', 16, 8, alphabet) >>> result2, salt2 = task_func('FF', 16, 8, alphabet) >>> result1 != result2 True\nThe function should raise the exception for: ValueError: If `from_base` or `to_base` is less than 2, indicating an invalid base for conversion. ValueError: If the `num` string contains characters not valid in the `from_base` specified, indicating an invalid number format for conversion.\nThe function should output with:\n    tuple: A tuple containing the base64-encoded hash of the converted number and the used salt.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n```",
        "gt": "import numpy as np\nimport secrets\nimport hashlib\nimport base64\ndef task_func(num, from_base, to_base, alphabet):\n    base64_table = np.array(list(alphabet))\n    n = int(num, from_base)\n    new_num = ''\n\n    if to_base < 2:\n        raise ValueError(\"to_base must be >= 2.\")\n\n    while n > 0:\n        n, m = divmod(n, to_base)\n        new_num += base64_table[m]\n\n    num = new_num[::-1]\n    salt = secrets.token_hex(16)\n    hashed_num = hashlib.pbkdf2_hmac('sha256', bytes(num, 'utf-8'), bytes(salt, 'utf-8'), 100000)\n    base64_encoded = base64.b64encode(hashed_num)\n\n    return base64_encoded.decode(), salt",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Define the alphabet in the setUp method to be reused in all tests\n        self.alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\"\n    \n    def test_base_conversion_and_hashing(self):\n        encoded, salt = task_func('A1', 16, 8, self.alphabet)\n        self.assertTrue(isinstance(encoded, str))\n        self.assertTrue(isinstance(salt, str))\n    def test_different_salts_different_hashes(self):\n        result1, salt1 = task_func('FF', 16, 8, self.alphabet)\n        result2, salt2 = task_func('FF', 16, 8, self.alphabet)\n        self.assertNotEqual(result1, result2)\n    def test_invalid_number_format(self):\n        with self.assertRaises(ValueError):\n            task_func('G', 16, 8, self.alphabet)\n    def test_invalid_from_base(self):\n        with self.assertRaises(ValueError):\n            task_func('10', 1, 8, self.alphabet)\n    def test_invalid_to_base(self):\n        with self.assertRaises(ValueError):\n            task_func('10', 10, 1, self.alphabet)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Merges a predefined set of lists into a list and one-hot-encodes the elements of the list.\nThe function should output with:\n    one_hot (numpy.array): The one-hot encoding of the merged list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n```",
        "gt": "import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\ndef task_func(list_of_lists):\n    merged_list = np.array([item for sublist in list_of_lists for item in sublist]).reshape(-1, 1)\n    encoder = OneHotEncoder(sparse=False)\n    one_hot = encoder.fit_transform(merged_list)\n    return one_hot",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).shape, (9, 9))\n    def test_case_2(self):\n        arr = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.assertTrue(np.all(arr.sum(axis=0) == 1))\n        self.assertTrue(np.all(arr.sum(axis=1) == 1))\n        self.assertTrue(np.all(arr >= 0))\n    def test_case_3(self):\n        arr = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.assertEqual(arr[0, 0], 1)\n        self.assertEqual(arr[1, 1], 1)\n        self.assertEqual(arr[2, 2], 1)\n        self.assertEqual(arr[3, 3], 1)\n        self.assertEqual(arr[4, 4], 1)\n        self.assertEqual(arr[5, 5], 1)\n        self.assertEqual(arr[6, 6], 1)\n        self.assertEqual(arr[7, 7], 1)\n        self.assertEqual(arr[8, 8], 1)\n        \n    def test_case_4(self):\n        arr = task_func([[1, 1, 1], [2, 2, 2], [3, 3, 3]])\n        self.assertEqual(arr[0, 0], 1)\n        self.assertEqual(arr[1, 0], 1)\n        self.assertEqual(arr[2, 0], 1)\n        self.assertEqual(arr[3, 1], 1)\n        self.assertEqual(arr[4, 1], 1)\n        self.assertEqual(arr[5, 1], 1)\n        self.assertEqual(arr[6, 2], 1)\n        self.assertEqual(arr[7, 2], 1)\n        self.assertEqual(arr[8, 2], 1)\n    def test_case_5(self):\n        arr = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.assertEqual(arr[0, 0], 1)\n        self.assertEqual(arr[1, 1], 1)\n        self.assertEqual(arr[2, 2], 1)\n        self.assertEqual(arr[3, 3], 1)\n        self.assertEqual(arr[4, 4], 1)\n        self.assertEqual(arr[5, 5], 1)\n        self.assertEqual(arr[6, 6], 1)\n        self.assertEqual(arr[7, 7], 1)\n        self.assertEqual(arr[8, 8], 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a dictionary \"data\", this function performs the following operations: 1. Adds a new key \"a\" with the value 1 to the dictionary. 2. Generates a signal based on the values in \"data\". 3. Runs a Fast Fourier Transform (FFT) on the signal. 4. Plots and returns the FFT of the signal with a title of 'FFT of the signal'.\nThe function should output with:\n    tuple: A tuple containing:\n    ndarray: The FFT of the signal.\n    Axes: The plot of the FFT.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n```",
        "gt": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\ndef task_func(data, sample_rate=8000):\n    # Add new key 'a' with value 1\n    data['a'] = 1\n\n    # Generate a signal based on the values in `data`\n    signal = np.array(list(data.values()))\n    time = np.linspace(0, 2, 2 * sample_rate, False)\n    signal = np.sin(np.outer(time, signal) * np.pi)\n\n    # Perform a Fast Fourier Transform (FFT) on the signal\n    fft = fftpack.fft(signal)\n\n    # Plot the FFT\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(np.abs(fft))\n    ax.set_title('FFT of the Signal')\n    ax.set_xlabel('Frequency [Hz]')\n    ax.set_ylabel('Frequency Spectrum Magnitude')\n    \n    return fft, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = {'key1': 1, 'key2': 2, 'key3': 3}\n        fft, ax = task_func(data)\n        \n        # Assert the key 'a' is added to the dictionary\n        self.assertIn('a', data)\n        \n        # Assert the FFT is returned as ndarray\n        self.assertIsInstance(fft, np.ndarray)\n        \n        # Assert the plot attributes\n        self.assertEqual(ax.get_title(), 'FFT of the Signal')\n        self.assertEqual(ax.get_xlabel(), 'Frequency [Hz]')\n        self.assertEqual(ax.get_ylabel(), 'Frequency Spectrum Magnitude')\n    def test_case_2(self):\n        data = {'a': 5, 'b': 10}\n        fft, ax = task_func(data)\n        \n        # Assert the key 'a' is added to the dictionary\n        self.assertIn('a', data)\n        \n        # Assert the FFT is returned as ndarray\n        self.assertIsInstance(fft, np.ndarray)\n        \n        # Assert the plot attributes\n        self.assertEqual(ax.get_title(), 'FFT of the Signal')\n        self.assertEqual(ax.get_xlabel(), 'Frequency [Hz]')\n        self.assertEqual(ax.get_ylabel(), 'Frequency Spectrum Magnitude')\n    def test_case_3(self):\n        data = {}\n        fft, ax = task_func(data)\n        \n        # Assert the key 'a' is added to the dictionary\n        self.assertIn('a', data)\n        \n        # Assert the FFT is returned as ndarray\n        self.assertIsInstance(fft, np.ndarray)\n        \n        # Assert the plot attributes\n        self.assertEqual(ax.get_title(), 'FFT of the Signal')\n        self.assertEqual(ax.get_xlabel(), 'Frequency [Hz]')\n        self.assertEqual(ax.get_ylabel(), 'Frequency Spectrum Magnitude')\n        \n    def test_case_4(self):\n        data = {'x': 15, 'y': 30, 'z': 45}\n        fft, ax = task_func(data)\n        \n        # Assert the key 'a' is added to the dictionary\n        self.assertIn('a', data)\n        \n        # Assert the FFT is returned as ndarray\n        self.assertIsInstance(fft, np.ndarray)\n        \n        # Assert the plot attributes\n        self.assertEqual(ax.get_title(), 'FFT of the Signal')\n        self.assertEqual(ax.get_xlabel(), 'Frequency [Hz]')\n        self.assertEqual(ax.get_ylabel(), 'Frequency Spectrum Magnitude')\n        \n    def test_case_5(self):\n        data = {'one': 1, 'two': 2}\n        fft, ax = task_func(data)\n        \n        # Assert the key 'a' is added to the dictionary\n        self.assertIn('a', data)\n        \n        # Assert the FFT is returned as ndarray\n        self.assertIsInstance(fft, np.ndarray)\n        \n        # Assert the plot attributes\n        self.assertEqual(ax.get_title(), 'FFT of the Signal')\n        self.assertEqual(ax.get_xlabel(), 'Frequency [Hz]')\n        self.assertEqual(ax.get_ylabel(), 'Frequency Spectrum Magnitude')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform K-Means clustering on data points from two pandas Series and visualize the clusters.\nNote that: Notes: The function needs to ensure that s1 and s2 are pandas Series of equal length. It then performs K-Means clustering on the combined data points from s1 and s2. After clustering, it creates a scatter plot where each cluster is visualized with a different color. The plot title is set to \"K-Means Clustering\" to describe the visualization technique. A legend is added, which uses elements from the scatter plot to describe each cluster.\nThe function should raise the exception for: ValueError: If either s1 or s2 is not a pandas Series, raise \"s1 and s2 must be pandas Series\" ValueError: If s1 and s2 have different lengths, raise \"s1 and s2 must have the same length\"\nThe function should output with:\n    tuple: A tuple containing the following elements:\n    ndarray: An array of cluster labels indicating the cluster each data point belongs to.\n    matplotlib.axes.Axes: The Axes object of the plot, which shows the data points colored according to their cluster labels.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n```",
        "gt": "import pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(s1, s2, n_clusters=3):\n    if not isinstance(s1, pd.Series) or not isinstance(s2, pd.Series):\n        raise ValueError(\"s1 and s2 must be pandas Series\")\n\n    if len(s1) != len(s2):\n        raise ValueError(\"s1 and s2 must have the same length\")\n\n    # Create a DataFrame from the series\n    df = pd.concat([s1, s2], axis=1)\n\n    # Perform K-Means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n    labels = kmeans.fit_predict(df)\n\n    # Visualize the clusters\n    _, ax = plt.subplots()\n    scatter = ax.scatter(df[s1.name], df[s2.name], c=labels)\n    ax.set_xlabel(s1.name)\n    ax.set_ylabel(s2.name)\n    ax.set_title(\"K-Means Clustering\")\n    plt.legend(*scatter.legend_elements(), title=\"Clusters\")\n\n    return labels, ax",
        "test": "import pandas as pd\nimport numpy as np\nimport unittest\nimport os\nfrom sklearn.datasets import make_blobs\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for task_func.\"\"\"\n    def setUp(self) -> None:\n        os.environ[\"LOKY_MAX_CPU_COUNT\"] = \"2\"\n    def test_random_data_size_100(self):\n        \"\"\"Test with random data of size 100 and default number of clusters\"\"\"\n        np.random.seed(42)\n        s1 = pd.Series(np.random.rand(100), name=\"feature1\")\n        np.random.seed(0)\n        s2 = pd.Series(np.random.rand(100), name=\"feature2\")\n        labels, ax = task_func(s1, s2)\n        # Check if labels are ndarray\n        self.assertIsInstance(labels, np.ndarray)\n        # Check the plot's title\n        self.assertEqual(ax.get_title(), \"K-Means Clustering\")\n    def test_random_data_custom_clusters(self):\n        \"\"\"Test with random data of size 100 and custom number of clusters\"\"\"\n        np.random.seed(42)\n        s1 = pd.Series(np.random.rand(100), name=\"feature1\")\n        np.random.seed(0)\n        s2 = pd.Series(np.random.rand(100), name=\"feature2\")\n        labels, ax = task_func(s1, s2, n_clusters=5)\n        # Check if labels are ndarray\n        self.assertIsInstance(labels, np.ndarray)\n        self.assertEqual(len(set(labels)), 5)\n        # Check the plot's title\n        self.assertEqual(ax.get_title(), \"K-Means Clustering\")\n    def test_invalid_input_non_series(self):\n        \"\"\"Test with invalid input types (non-Series)\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([1, 2, 3], pd.Series([4, 5, 6]))\n    def test_invalid_input_mismatched_length(self):\n        \"\"\"Test with mismatched length of Series\"\"\"\n        s1 = pd.Series([1, 2, 3], name=\"feature1\")\n        s2 = pd.Series([4, 5], name=\"feature2\")\n        with self.assertRaises(ValueError):\n            task_func(s1, s2)\n    def test_custom_clusters_with_synthetic_data(self):\n        \"\"\"Test with synthetic data and custom number of clusters using make_blobs\"\"\"\n        # Generate synthetic data with 2 distinct clusters\n        X, _ = make_blobs(n_samples=100, centers=2, random_state=42)\n        # Convert to pandas Series\n        s1 = pd.Series(X[:, 0], name=\"feature1\")\n        s2 = pd.Series(X[:, 1], name=\"feature2\")\n        # Run the clustering function\n        labels, ax = task_func(s1, s2, n_clusters=2)\n        # Check if labels are ndarray\n        self.assertIsInstance(labels, np.ndarray)\n        # Check the number of unique labels (should be 2 for 2 clusters)\n        self.assertEqual(len(set(labels)), 2)\n        # Check the plot's title\n        self.assertEqual(ax.get_title(), \"K-Means Clustering\")\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of the second values in each tuple in a list of tuples and return the product as a single-element numeric array.\nThe function should output with:\n    numpy.ndarray: A 1D numpy array containing a single element that is the product of the second values in the list of tuples.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n```",
        "gt": "import numpy as np\nfrom functools import reduce\ndef task_func(list_of_pairs):\n    second_values = [pair[1] for pair in list_of_pairs]\n    product = reduce(np.multiply, second_values)\n    product_array = np.array([product])\n\n    return product_array",
        "test": "import unittest\nimport numpy as np\nfrom functools import reduce\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Basic test case with positive and negative numbers\n        list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n        expected_output = np.array([360])\n        actual_output = task_func(list_of_pairs)\n        print(actual_output, expected_output)\n        self.assertTrue(np.array_equal(actual_output, expected_output))\n    \n    def test_case_2(self):\n        # Test case with all positive numbers\n        list_of_pairs = [('A', 2), ('B', 3), ('C', 4)]\n        expected_output = np.array([24])\n        actual_output = task_func(list_of_pairs)\n        self.assertTrue(np.array_equal(actual_output, expected_output))\n    \n    def test_case_3(self):\n        # Test case with all negative numbers\n        list_of_pairs = [('A', -2), ('B', -3), ('C', -4)]\n        expected_output = np.array([-24])\n        actual_output = task_func(list_of_pairs)\n        self.assertTrue(np.array_equal(actual_output, expected_output))\n    \n    def test_case_4(self):\n        # Test case with a single tuple\n        list_of_pairs = [('A', 10)]\n        expected_output = np.array([10])\n        actual_output = task_func(list_of_pairs)\n        self.assertTrue(np.array_equal(actual_output, expected_output))\n    \n    def test_case_5(self):\n        # Test case with zeros\n        list_of_pairs = [('A', 0), ('B', 5), ('C', 10)]\n        expected_output = np.array([0])\n        actual_output = task_func(list_of_pairs)\n        self.assertTrue(np.array_equal(actual_output, expected_output))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files. Specifically, the function searches for all JSON files within the provided directory and updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key doesn't already exist. The function modifies the JSON files in place.\nThe function should output with:\n    int: The number of JSON files updated.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\nimport glob\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n```",
        "gt": "import json\nimport os\nimport glob\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\ndef task_func(directory):\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n\n    return updated_files",
        "test": "import unittest\nimport tempfile\nimport shutil\nimport doctest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for testing\n        self.test_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove the temporary directory after testing\n        shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Create mock JSON files\n        file_1 = os.path.join(self.test_dir, \"file_1.json\")\n        file_2 = os.path.join(self.test_dir, \"file_2.json\")\n        \n        with open(file_1, 'w') as f:\n            json.dump({\"name\": \"Alice\"}, f)\n        with open(file_2, 'w') as f:\n            json.dump({\"name\": \"Bob\", \"mynewkey\": \"existingvalue\"}, f)\n        # Run the function\n        updated_files = task_func(self.test_dir)\n        # Assert number of updated files\n        self.assertEqual(updated_files, 1)\n        # Assert content of the updated file\n        with open(file_1, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {\"name\": \"Alice\", \"mynewkey\": \"mynewvalue\"})\n        with open(file_2, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {\"name\": \"Bob\", \"mynewkey\": \"existingvalue\"})\n    def test_case_2(self):\n        # Create mock JSON files\n        file_1 = os.path.join(self.test_dir, \"file_3.json\")\n        file_2 = os.path.join(self.test_dir, \"file_4.json\")\n        \n        with open(file_1, 'w') as f:\n            json.dump({\"id\": 1}, f)\n        with open(file_2, 'w') as f:\n            json.dump({\"id\": 2}, f)\n        # Run the function\n        updated_files = task_func(self.test_dir)\n        # Assert number of updated files\n        self.assertEqual(updated_files, 2)\n        # Assert content of the updated files\n        with open(file_1, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {\"id\": 1, \"mynewkey\": \"mynewvalue\"})\n        with open(file_2, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {\"id\": 2, \"mynewkey\": \"mynewvalue\"})\n    def test_case_3(self):\n        # No JSON files in the directory\n        updated_files = task_func(self.test_dir)\n        self.assertEqual(updated_files, 0)\n    def test_case_4(self):\n        # Create mock JSON files with nested structures\n        file_1 = os.path.join(self.test_dir, \"file_5.json\")\n        \n        with open(file_1, 'w') as f:\n            json.dump({\"details\": {\"name\": \"Charlie\", \"age\": 30}}, f)\n        # Run the function\n        updated_files = task_func(self.test_dir)\n        # Assert number of updated files\n        self.assertEqual(updated_files, 1)\n        # Assert content of the updated files\n        with open(file_1, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {\"details\": {\"name\": \"Charlie\", \"age\": 30}, \"mynewkey\": \"mynewvalue\"})\n    def test_case_5(self):\n        # Create mock JSON files with list structures\n        file_1 = os.path.join(self.test_dir, \"file_6.json\")\n        \n        with open(file_1, 'w') as f:\n            json.dump({\"items\": [\"apple\", \"banana\", \"cherry\"]}, f)\n        # Run the function\n        updated_files = task_func(self.test_dir)\n        # Assert number of updated files\n        self.assertEqual(updated_files, 1)\n        # Assert content of the updated files\n        with open(file_1, 'r') as f:\n            data = json.load(f)\n            self.assertEqual(data, {\"items\": [\"apple\", \"banana\", \"cherry\"], \"mynewkey\": \"mynewvalue\"})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create sensor data for the specified number of hours and save it in a CSV file with coloumns 'Time', 'Temperature', 'Humidity' and 'Pressure'.\nThe function should output with:\n    hours (int): Number of hours to generate data for.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
        "gt": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    FILE_PATH = os.path.join(output_dir, 'sensor_data.csv')\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    data = [['Time'] + SENSORS]\n    for i in range(hours):\n        row = [datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')] + [randint(0, 100) for _ in SENSORS]\n        data.append(row)\n\n    with open(FILE_PATH, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n\n    return FILE_PATH",
        "test": "import unittest\nimport os\nimport shutil\nFILE_PATH = os.path.join(OUTPUT_DIR, 'sensor_data.csv')\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        \"\"\"Clean up any files created during the tests.\"\"\"\n        # Check and remove the expected file if it exists\n        # if os.path.exists(FILE_PATH):\n        #     os.remove(FILE_PATH)\n        if os.path.exists(OUTPUT_DIR):\n            shutil.rmtree(OUTPUT_DIR)\n    def test_csv_file_creation(self):\n        \"\"\"Test if the CSV file is successfully created.\"\"\"\n        task_func(1)\n        self.assertTrue(os.path.exists(FILE_PATH))\n    def test_csv_file_rows(self):\n        \"\"\"Test if the CSV file contains the correct number of rows for 24 hours.\"\"\"\n        task_func(24)\n        with open(FILE_PATH, 'r') as f:\n            self.assertEqual(len(f.readlines()), 25)  # Including header\n    def test_csv_file_header(self):\n        \"\"\"Test if the CSV file header matches the expected sensors.\"\"\"\n        task_func(0)\n        with open(FILE_PATH, 'r') as f:\n            reader = csv.reader(f)\n            header = next(reader)\n            self.assertEqual(header, ['Time', 'Temperature', 'Humidity', 'Pressure'])\n    def test_file_path_return(self):\n        \"\"\"Test if the correct file path is returned.\"\"\"\n        file_path = task_func(1)\n        self.assertEqual(file_path, FILE_PATH)\n    def test_no_hours_data(self):\n        \"\"\"Test sensor data generation with 0 hours.\"\"\"\n        task_func(0)\n        with open(FILE_PATH, 'r') as f:\n            self.assertEqual(len(f.readlines()), 1)  # Only header row expected",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This method is designed to handle the authentication process in a web application context. It expects input in the form of a dictionary with 'username' and 'password' keys. The password is expected to be a base64-encoded SHA-256 hash. The method decodes and authenticates these credentials against predefined values (for demonstration purposes, it checks if the username is 'admin' and the password hash matches the hash of 'password'). Based on the authentication result, it returns an appropriate HTTP response. >>> data = {'username': 'admin', 'password': base64.b64encode(hashlib.sha256('wrongpassword'.encode()).digest()).decode()} >>> response = task_func(data) >>> response.status_code == 401 and 'Login failed.' in response.content.decode() False\nNote that: Notes: If the authentication success, the returned HttpResponse should contain 'Login successful.' with status 400. If the authentication fails, the returned HttpResponse should contain 'Login failed.' with status 401. If the input data is invalid (i.e., password is a non-base64, missing keys), the function return HttpResponseBadRequest and it contains 'Bad Request.'\nThe function should raise the exception for: KeyError, UnicodeDecodeError, binascii.Error, ValueError if the input dictionary is invalid.\nThe function should output with:\n    django.http.HttpResponse: An HttpResponse indicating the login result.\n    HttpResponseBadRequest if the data is invalid.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n```",
        "gt": "import hashlib\nimport base64\nimport binascii\nfrom django.http import HttpResponseBadRequest, HttpResponse\ndef task_func(data):\n    try:\n        username = data['username']\n        password = base64.b64decode(data['password']).decode()\n    except (KeyError, UnicodeDecodeError, binascii.Error, ValueError):\n        return HttpResponseBadRequest('Bad Request')\n\n    hashed_password = hashlib.sha256(password.encode()).digest()\n\n    # Dummy authentication logic\n    if username == 'admin' and hashed_password == hashlib.sha256('password'.encode()).digest():\n        return HttpResponse('Login successful.')\n    else:\n        return HttpResponse('Login failed.', status=401)",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom django.http import HttpResponseBadRequest, HttpResponse\nfrom django.conf import settings\nif not settings.configured:\n    settings.configure()\nclass TestCases(unittest.TestCase):\n    @patch('base64.b64decode')\n    def test_successful_login(self, mock_b64decode):\n        \"\"\"Test successful login with correct credentials.\"\"\"\n        mock_b64decode.return_value = b'password'\n        data = {'username': 'admin', 'password': 'valid_base64'}\n        response = task_func(data)\n        self.assertEqual(response.status_code, 200)\n        self.assertIn('Login successful.', response.content.decode())\n    @patch('base64.b64decode')\n    def test_failed_login(self, mock_b64decode):\n        \"\"\"Test failed login with incorrect password.\"\"\"\n        mock_b64decode.return_value = b'wrongpassword'\n        data = {'username': 'admin', 'password': 'valid_base64'}\n        response = task_func(data)\n        self.assertEqual(response.status_code, 401)\n        self.assertIn('Login failed.', response.content.decode())\n    def test_invalid_data_structure(self):\n        \"\"\"Test response with missing username or password.\"\"\"\n        data = {'username': 'admin'}\n        response = task_func(data)\n        self.assertIsInstance(response, HttpResponseBadRequest)\n    @patch('base64.b64decode', side_effect=ValueError)\n    def test_malformed_data(self, mock_b64decode):\n        \"\"\"Test response with non-base64 encoded password.\"\"\"\n        data = {'username': 'admin', 'password': 'not_base64'}\n        response = task_func(data)\n        self.assertIsInstance(response, HttpResponseBadRequest)\n    def test_empty_data(self):\n        \"\"\"Test response when provided with an empty dictionary.\"\"\"\n        data = {}\n        response = task_func(data)\n        self.assertIsInstance(response, HttpResponseBadRequest)\n        self.assertIn('Bad Request', response.content.decode())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Open a web page in the default web browser in a background process.\nThe function should output with:\n    int: The return code of the subprocess.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport platform\nimport time\ndef task_func(url):\n```",
        "gt": "import subprocess\nimport platform\nimport time\ndef task_func(url):\n    if platform.system() == 'Darwin':\n        cmd = 'open'\n    elif platform.system() == 'Windows':\n        cmd = 'start'\n    else:\n        cmd = 'xdg-open'\n\n    # Open webpage in a background process\n    process = subprocess.Popen([cmd, url], shell=True)\n\n    # Wait for the process to complete\n    while process.poll() is None:\n        time.sleep(1)\n\n    return process.returncode",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.Popen')\n    @patch('platform.system')\n    def test_case_1(self, mock_system, mock_popen):\n        mock_system.return_value = 'Darwin'\n        process_mock = MagicMock()\n        process_mock.poll.side_effect = [None] * 9 + [0]  # Simulate process ending after 10 checks\n        process_mock.returncode = 0\n        mock_popen.return_value = process_mock\n        result = task_func('https://www.google.com')\n        self.assertEqual(['open', 'https://www.google.com'], mock_popen.call_args_list[0][0][0])\n        self.assertIsInstance(result, int)\n        self.assertEqual(result, 0)\n    @patch('subprocess.Popen')\n    @patch('platform.system')\n    def test_case_2(self, mock_system, mock_popen):\n        mock_system.return_value = 'Windows'\n        process_mock = MagicMock()\n        process_mock.poll.side_effect = [None] * 9 + [0]  # Simulate process ending after 10 checks\n        process_mock.returncode = 0\n        mock_popen.return_value = process_mock\n        result = task_func('https://www.openai.com')\n        self.assertEqual(['start', 'https://www.openai.com'], mock_popen.call_args_list[0][0][0])\n        self.assertIsInstance(result, int)\n        self.assertEqual(result, 0)\n    @patch('subprocess.Popen')\n    @patch('platform.system')\n    def test_case_3(self, mock_system, mock_popen):\n        mock_system.return_value = 'Linux'\n        process_mock = MagicMock()\n        process_mock.poll.side_effect = [None] * 9 + [1]  # Simulate failure\n        process_mock.returncode = 1\n        mock_popen.return_value = process_mock\n        result = task_func('')\n        self.assertEqual(['xdg-open', ''], mock_popen.call_args_list[0][0][0])\n        self.assertIsInstance(result, int)\n        self.assertEqual(result, 1)\n    @patch('subprocess.Popen')\n    @patch('platform.system')\n    def test_case_4(self, mock_system, mock_popen):\n        mock_system.return_value = 'Linux'\n        process_mock = MagicMock()\n        process_mock.poll.side_effect = [None] * 9 + [1]  # Simulate failure\n        process_mock.returncode = 1\n        mock_popen.return_value = process_mock\n        result = task_func('/invalid_url')\n        self.assertEqual(['xdg-open', '/invalid_url'], mock_popen.call_args_list[0][0][0])\n        self.assertIsInstance(result, int)\n        self.assertEqual(result, 1)\n    @patch('subprocess.Popen')\n    @patch('platform.system')\n    def test_case_5(self, mock_system, mock_popen):\n        mock_system.return_value = 'Linux'\n        process_mock = MagicMock()\n        process_mock.poll.side_effect = [None] * 9 + [1]  # Simulate failure\n        process_mock.returncode = 1\n        mock_popen.return_value = process_mock\n        result = task_func('/path/to/file.txt')\n        self.assertEqual(['xdg-open', '/path/to/file.txt'], mock_popen.call_args_list[0][0][0])\n        self.assertIsInstance(result, int)\n        self.assertEqual(result, 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Insert a number into a randomly generated sorted list and return the new sorted list.\nThe function should output with:\n    tuple: A tuple containing two lists:\n    list[int]: The randomly generated list of integers with the specified length.\n    list[int]: A new sorted list containing the original elements and the inserted number.\nYou should write self-contained code starting with:\n```\nimport bisect\nimport random\ndef task_func(num, list_length = 5, min_value = 0, max_value = 0):\n```",
        "gt": "import bisect\nimport random\ndef task_func(num, list_length = 5, min_value = 0, max_value = 0):\n\n    numbers = [random.randint(min_value, max_value) for _ in range(list_length)]\n    sorted_list = numbers.copy()\n    bisect.insort(sorted_list, num)\n    return numbers, sorted_list",
        "test": "import unittest\nfrom unittest.mock import patch\nimport random\nclass TestCases(unittest.TestCase):\n    @patch('random.randint', side_effect=[12, 23, 34, 45, 56])\n    def test_insert_into_empty_list(self, mock_randint):\n        random.seed(0)\n        result = task_func(15, 0, 5, 60)\n        self.assertEqual(result, ([], [15]))\n    @patch('random.randint', side_effect=[12, 23, 34, 45, 56])\n    def test_insert_into_existing_list(self, mock_randint):\n        random.seed(0)\n        result = task_func(15, 5, 10, 60)\n        self.assertEqual(result, ([12, 23, 34, 45, 56], [12, 15, 23, 34, 45, 56]))\n    @patch('random.randint', side_effect=[12, 23, 34, 45, 56])\n    def test_insert_at_beginning(self, mock_randint):\n        random.seed(0)\n        result = task_func(4, 4, 10, 60)\n        self.assertEqual(result, ([12, 23, 34, 45], [4, 12, 23, 34, 45]))\n    # @patch('random.randint', side_effect=[12, 23, 34, 45, 56])\n    def test_insert_at_end(self):\n        random.seed(0)\n        result = task_func(15, 4, 10, 10)\n        self.assertEqual(result, ([10, 10, 10, 10], [10, 10, 10, 10, 15]))\n    @patch('random.randint', side_effect=[12, 34, 56])\n    def test_insert_in_middle(self, mock_randint):\n        random.seed(0)\n        result = task_func(15, 3, 10, 60)\n        self.assertEqual(result, ([12, 34, 56], [12, 15, 34, 56]))\n    @patch('random.randint', side_effect=[12, 23, 34, 45, 56])\n    def test_random_list_length(self, mock_randint):\n        random.seed(0)\n        result = task_func(15, 5, 10, 20)\n        self.assertEqual(len(result[0]), 5)\n        self.assertIn(15, result[1])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a datetime string from a given timezone to a datetime string in a randomly chosen timezone.\nThe function should output with:\n    tuple: A tuple containing the converted datetime string and the randomly chosen timezone.\nYou should write self-contained code starting with:\n```\nfrom random import choice\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n```",
        "gt": "from random import choice\nimport pytz\nfrom dateutil.parser import parse\n# Constants\nTIMEZONES = ['America/New_York', 'Europe/London', 'Asia/Shanghai', 'Asia/Tokyo', 'Australia/Sydney']\ndef task_func(date_str, from_tz):\n    from_tz = pytz.timezone(from_tz)\n    to_tz = pytz.timezone(choice(TIMEZONES))\n    given_date = parse(date_str).replace(tzinfo=from_tz)\n    converted_date = given_date.astimezone(to_tz)\n\n    return converted_date.strftime('%Y-%m-%d %H:%M:%S'), to_tz.zone",
        "test": "import unittest\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func('2023-06-15 12:00:00', 'UTC')\n        self.assertIsInstance(result, tuple)\n        self.assertEqual(len(result), 2)\n        datetime_obj = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')\n        self.assertIsInstance(datetime_obj, datetime)\n        self.assertIn(result[1], TIMEZONES)\n    \n    def test_case_2(self):\n        result = task_func('2022-01-01 00:00:00', 'America/New_York')\n        self.assertIsInstance(result, tuple)\n        self.assertEqual(len(result), 2)\n        datetime_obj = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')\n        self.assertIsInstance(datetime_obj, datetime)\n        self.assertIn(result[1], TIMEZONES)\n        \n    def test_case_3(self):\n        result = task_func('2020-12-31 23:59:59', 'Asia/Shanghai')\n        self.assertIsInstance(result, tuple)\n        self.assertEqual(len(result), 2)\n        datetime_obj = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')\n        self.assertIsInstance(datetime_obj, datetime)\n        self.assertIn(result[1], TIMEZONES)\n        \n    def test_case_4(self):\n        result = task_func('2019-07-04 04:04:04', 'Europe/London')\n        self.assertIsInstance(result, tuple)\n        self.assertEqual(len(result), 2)\n        datetime_obj = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')\n        self.assertIsInstance(datetime_obj, datetime)\n        self.assertIn(result[1], TIMEZONES)\n    \n    def test_case_5(self):\n        result = task_func('2018-02-28 14:28:58', 'Australia/Sydney')\n        self.assertIsInstance(result, tuple)\n        self.assertEqual(len(result), 2)\n        datetime_obj = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')\n        self.assertIsInstance(datetime_obj, datetime)\n        self.assertIn(result[1], TIMEZONES)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Validates the HMAC SHA-1 signature of a base64-encoded message against a provided signature using a specified secret key. This function first decodes the base64-encoded message, then computes its HMAC SHA-1 hash using the provided secret key, and finally compares this computed hash with the provided signature. >>> task_func('SGVsbG8gV29ybGQ=', 'incorrect_signature', 'my_secret_key') False\nThe function should output with:\n    bool: Returns True if the provided signature matches the computed signature, False otherwise.\nYou should write self-contained code starting with:\n```\nimport base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n```",
        "gt": "import base64\nimport hashlib\nimport hmac\nimport binascii\ndef task_func(s, signature, secret_key):\n    decoded_msg = base64.b64decode(s).decode()\n    computed_signature = hmac.new(secret_key.encode(), decoded_msg.encode(), hashlib.sha1)\n    return binascii.hexlify(computed_signature.digest()).decode() == signature",
        "test": "import unittest\nimport binascii\nclass TestCases(unittest.TestCase):\n    def test_valid_signature(self):\n        # Test that a correctly signed message returns True\n        self.assertTrue(task_func('SGVsbG8gV29ybGQ=', 'c47c23299efca3c220f4c19a5f2e4ced14729322', 'my_secret_key'))\n    def test_invalid_signature(self):\n        # Test that an incorrectly signed message returns False\n        self.assertFalse(task_func('SGVsbG8gV29ybGQ=', 'incorrect_signature', 'my_secret_key'))\n    def test_empty_message(self):\n        # Test that an empty message with its correct signature verifies successfully\n        self.assertTrue(task_func('', '4b4f493acb45332879e4812a98473fc98209fee6', 'my_secret_key'))\n    def test_empty_signature(self):\n        # Test that a non-empty message with an empty signature returns False\n        self.assertFalse(task_func('SGVsbG8gV29ybGQ=', '', 'my_secret_key'))\n    def test_invalid_base64(self):\n        # Test that invalid base64 input raises a binascii.Error\n        with self.assertRaises(binascii.Error):\n            task_func('Invalid base64', '2ef7bde608ce5404e97d5f042f95f89f1c232871', 'my_secret_key')\n    def test_non_ascii_characters(self):\n        # Test handling of base64-encoded non-ASCII characters\n        self.assertTrue(task_func('SGVsbG8sIOS4lueVjA==', '960b22b65fba025f6a7e75fb18be1acfb5babe90', 'my_secret_key'))\n    def test_long_message(self):\n        # Test with a longer base64-encoded message to ensure robust handling\n        long_message = \"A\"*100\n        # Expected signature will vary; this is a placeholder for the correct HMAC SHA-1 hash\n        expected_signature = 'b609cc34db26376fadbcb71ae371427cb4e2426d'\n        self.assertTrue(task_func(long_message, expected_signature, 'my_secret_key'))\n    def test_signature_case_sensitivity(self):\n        # Verify that signature comparison is case-sensitive\n        self.assertFalse(task_func('SGVsbG8gV29ybGQ=', 'c47c23299efca3c220f4c19a5f2e4ced14729322'.upper(), 'my_secret_key'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate and plot the daytime temperatures for New York over a given period. The plot uses Arial font for display. for the returned plot,  set the xlabel as 'Date', ylabel as 'Temperature (\u00b0C)' and title as Daily Temperatures in New York\nThe function should raise the exception for: ValueError: If the input DataFrame is not in the expected format or empty.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object containing the temperature plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(temperatures):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(temperatures):\n    try:\n        if temperatures.empty or not isinstance(temperatures, pd.DataFrame):\n            raise ValueError(\"Input temperatures must be a non-empty pandas DataFrame.\")\n\n        # Setting the font to Arial\n        font = {'sans-serif': 'Arial', 'family': 'sans-serif'}\n        plt.rc('font', **font)\n        \n        fig, ax = plt.subplots(figsize=(10, 6))\n        ax.plot(temperatures.index, temperatures['temperature'])\n        ax.set_xlabel('Date')\n        ax.set_ylabel('Temperature (\u00b0C)')\n        ax.set_title('Daily Temperatures in New York')\n\n        return ax\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom datetime import datetime\nimport random\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temperatures = pd.DataFrame({\n            'temperature': [random.randint(-10, 30) for _ in range(365)],\n            'date': pd.date_range(start='01-01-2023', periods=365, tz='America/New_York')\n        }).set_index('date')\n    def test_basic_functionality(self):\n        ax = task_func(self.temperatures)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_incorrect_dataframe(self):\n        incorrect_df = pd.DataFrame({'temp': [20, 21], 'time': [datetime.now(), datetime.now()]})\n        with self.assertRaises(ValueError):\n            task_func(incorrect_df)\n    def test_data_on_plot(self):\n        ax = task_func(self.temperatures)\n        self.assertEqual(len(ax.get_lines()[0].get_xdata()), 365)\n        self.assertEqual(len(ax.get_lines()[0].get_ydata()), 365)\n    def test_plot_labels_and_title(self):\n        ax = task_func(self.temperatures)\n        self.assertEqual(ax.get_xlabel(), 'Date')\n        self.assertEqual(ax.get_ylabel(), 'Temperature (\u00b0C)')\n        self.assertEqual(ax.get_title(), 'Daily Temperatures in New York')\n    \n    def test_value_consistency(self):\n        ax = task_func(self.temperatures)\n        line = ax.get_lines()[0]\n        plot_dates = line.get_xdata()\n        plot_temperatures = line.get_ydata()\n        for date, temperature in zip(plot_dates, plot_temperatures):\n            self.assertAlmostEqual(temperature, self.temperatures.at[pd.Timestamp(date), 'temperature'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame by associating each element from a list of letters to a category from a list of categories. The categories are randomly shuffled.\nThe function should output with:\n    DataFrame: A Pandas DataFrame with two columns: 'Letter' and 'Category'. Each letter is randomly associated with a category.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n```",
        "gt": "import pandas as pd\nimport itertools\nfrom random import shuffle\ndef task_func(letters=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], categories=['Category 1', 'Category 2', 'Category 3']):\n    \n    flattened_list = list(itertools.chain(*[letters for _ in range(len(categories))]))\n    expanded_categories = list(itertools.chain(*[[category] * len(letters) for category in categories]))\n    shuffle(expanded_categories)\n\n    df = pd.DataFrame({'Letter': flattened_list, 'Category': expanded_categories})\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with default parameters\n        df = task_func()\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(set(df.columns), {'Letter', 'Category'})\n        self.assertEqual(len(df), 27)  # 9 letters * 3 categories\n    def test_case_2(self):\n        # Testing with custom parameters\n        df = task_func(['X', 'Y'], ['Cat 1'])\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(set(df.columns), {'Letter', 'Category'})\n        self.assertEqual(len(df), 2)  # 2 letters * 1 category\n    def test_case_3(self):\n        # Testing with empty categories list\n        df = task_func(['X', 'Y'], [])\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(set(df.columns), {'Letter', 'Category'})\n        self.assertEqual(len(df), 0)  # 2 letters * 0 categories\n    def test_case_4(self):\n        # Testing with empty letters list\n        df = task_func([], ['Cat 1', 'Cat 2'])\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(set(df.columns), {'Letter', 'Category'})\n        self.assertEqual(len(df), 0)  # 0 letters * 2 categories\n    def test_case_5(self):\n        # Testing with both empty lists\n        df = task_func([], [])\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(set(df.columns), {'Letter', 'Category'})\n        self.assertEqual(len(df), 0)  # 0 letters * 0 categories",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a dictionary in which the keys are letters and the values are random integers. Find the 3 most common letters in the dictionary.\nThe function should output with:\n    most_common_letters (list): The 3 most common letters.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport heapq\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n```",
        "gt": "from collections import Counter\nimport heapq\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(my_dict):\n    letter_counter = Counter(my_dict)\n    most_common_letters = heapq.nlargest(3, letter_counter, key=letter_counter.get)\n\n    return most_common_letters",
        "test": "import unittest\nimport random\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef generate_random_dict(size=26, min_val=1, max_val=100):\n    \"\"\"Generate a random dictionary with letters as keys and random integers as values.\"\"\"\n    letters = random.sample(LETTERS, size)\n    return {letter: random.randint(min_val, max_val) for letter in letters}\nclass TestCases(unittest.TestCase):\n    def test_basic(self):\n        # Basic Test\n        test_dict = generate_random_dict()\n        result = task_func(test_dict)\n        self.assertIsInstance(result, list)\n        self.assertEqual(len(result), 3)\n        self.assertTrue(all(isinstance(letter, str) for letter in result))\n    def test_few_letters(self):\n        # Edge Case: Fewer than 3 letters\n        test_dict = {'a': 10, 'b': 20}\n        result = task_func(test_dict)\n        self.assertEqual(result, ['b', 'a'])\n    def test_empty_dict(self):\n        # Edge Case: Empty dictionary\n        test_dict = {}\n        result = task_func(test_dict)\n        self.assertEqual(result, [])\n    def test_specific_letters(self):\n        # Specific Test: Known output\n        test_dict = {'a': 100, 'b': 90, 'c': 80, 'd': 70}\n        result = task_func(test_dict)\n        self.assertEqual(result, ['a', 'b', 'c'])\n    def test_general(self):\n        # General Test: Check top 3 values\n        test_dict = generate_random_dict()\n        result = task_func(test_dict)\n        sorted_values = sorted(test_dict.values(), reverse=True)[:3]\n        sorted_keys = [k for k, v in sorted(test_dict.items(), key=lambda item: item[1], reverse=True)][:3]\n        self.assertEqual(result, sorted_keys)\n        self.assertEqual([test_dict[key] for key in result], sorted_values)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "You are given a list of elements. Each element is a list with the same length as COLUMNS, representing one row a dataframe df to create. Draw a line chart with unique values in the COLUMNS[-1] of the pandas DataFrame \"df\", grouped by the rest of the columns. - The x-label should be set to the string obtained by joining all the column names (except the last one) by the character \"-\". - The y-label should be set to the last column name.\nThe function should output with:\n    tuple: A tuple containing:\n    pandas.DataFrame: The DataFrame of the analyzed data.\n    plt.Axes: The Axes object of the plotted line chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nCOLUMNS = ['col1', 'col2', 'col3']\ndef task_func(data):\n    df = pd.DataFrame(data, columns=COLUMNS)\n    analyzed_df = df.groupby(COLUMNS[:-1])[COLUMNS[-1]].nunique().reset_index()\n\n    # Adjusting the plotting logic\n    fig, ax = plt.subplots()\n    ax.plot(analyzed_df[COLUMNS[:-1]].astype(str).agg('-'.join, axis=1), analyzed_df[COLUMNS[-1]])\n    ax.set_xlabel('-'.join(COLUMNS[:-1]))\n    ax.set_ylabel(COLUMNS[-1])\n\n    return analyzed_df, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        # Using the provided example as the first test case\n        data = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]\n        analyzed_df, ax = task_func(data)\n        # Assertions for the returned DataFrame\n        expected_data = [[1, 1, 2], [1, 2, 1], [2, 1, 3], [2, 2, 1]]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        # Assertions for the returned plot\n        self.assertEqual(ax.get_xlabel(), 'col1-col2')\n        self.assertEqual(ax.get_ylabel(), 'col3')\n        self.assertListEqual(list(ax.lines[0].get_ydata()), [2, 1, 3, 1])\n    def test_case_2(self):\n        data = [\n            [1, 1, 2],\n            [1, 1, 3],\n            [1, 2, 4],\n            [1, 1, 5],\n            [1, 3, 7]\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [1, 1, 3],\n            [1, 2, 1],\n            [1, 3, 1]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertEqual(ax.get_xlabel(), 'col1-col2')\n        self.assertEqual(ax.get_ylabel(), 'col3')\n        self.assertListEqual(list(ax.lines[0].get_ydata()), [3, 1, 1])\n    def test_case_3(self):\n        data = [\n            [1, 1, 1],\n            [1, 2, 3],\n            [2, 1, 4],\n            [2, 2, 5]\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [1, 1, 1],\n            [1, 2, 1],\n            [2, 1, 1],\n            [2, 2, 1]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertEqual(ax.get_xlabel(), 'col1-col2')\n        self.assertEqual(ax.get_ylabel(), 'col3')\n        self.assertListEqual(list(ax.lines[0].get_ydata()), [1, 1, 1, 1])\n    def test_case_4(self):\n        data = [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [1, 1, 1],\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertEqual(ax.get_xlabel(), 'col1-col2')\n        self.assertEqual(ax.get_ylabel(), 'col3')\n        self.assertListEqual(list(ax.lines[0].get_ydata()), [1])\n    def test_case_5(self):\n        data = [\n            [0, 0, 0],\n            [0, 1, 0],\n            [1, 0, 0],\n            [1, 1, 0],\n            [0, 0, 1],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1],\n        ]\n        analyzed_df, ax = task_func(data)\n        expected_data = [\n            [0, 0, 2],\n            [0, 1, 2],\n            [1, 0, 2],\n            [1, 1, 2]\n        ]\n        expected_df = pd.DataFrame(expected_data, columns=COLUMNS)\n        pd.testing.assert_frame_equal(analyzed_df, expected_df, check_dtype=False)\n        self.assertEqual(ax.get_xlabel(), 'col1-col2')\n        self.assertEqual(ax.get_ylabel(), 'col3')\n        self.assertListEqual(list(ax.lines[0].get_ydata()), [2, 2, 2, 2])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a JSON file to CSV.\nThe function should output with:\n    csv_file: The function returns the path to the CSV file that was written.\nYou should write self-contained code starting with:\n```\nimport json\nimport csv\ndef task_func(json_file, csv_file):\n```",
        "gt": "import json\nimport csv\ndef task_func(json_file, csv_file):\n    with open(json_file, 'r') as f:\n        data = json.load(f)\n\n    with open(csv_file, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerow(data.keys())\n        writer.writerow(data.values())\n    \n    return csv_file",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        for file in ['./test.json', './test.csv', './testx.json', './testx.csv', './testy.json', './testy.csv', './testz.json', './testz.csv']:\n            if os.path.exists(file):\n                os.remove(file)\n    def test_case_1(self):\n        # Create json file\n        json_file = './test.json'\n        with open(json_file, 'w') as f:\n            json.dump({'a': 1, 'b': 2, 'c': 3}, f)\n        # Run function\n        csv_file = task_func(json_file, './test.csv')\n        # Check file\n        self.assertTrue(os.path.exists(csv_file))\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            csv_data = list(reader)\n        self.assertEqual(csv_data, [['a', 'b', 'c'], ['1', '2', '3']])\n        \n    def test_case_2(self):\n        # Create json file\n        json_file = './test.json'\n        with open(json_file, 'w') as f:\n            json.dump({'z': 1, 'y': 2, 'x': 3}, f)\n        # Run function\n        csv_file = task_func(json_file, './test.csv')\n        # Check file\n        self.assertTrue(os.path.exists(csv_file))\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            csv_data = list(reader)\n        self.assertEqual(csv_data, [['z', 'y', 'x'], ['1', '2', '3']])\n        \n    def test_case_3(self):\n        # Create json file\n        json_file = './testx.json'\n        with open(json_file, 'w') as f:\n            json.dump({'xxx': 99}, f)\n        # Run function\n        csv_file = task_func(json_file, './testx.csv')\n        # Check file\n        self.assertTrue(os.path.exists(csv_file))\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            csv_data = list(reader)\n        self.assertEqual(csv_data, [['xxx'], ['99']])\n        \n    def test_case_4(self):\n        # Create json file\n        json_file = './testy.json'\n        with open(json_file, 'w') as f:\n            json.dump({'yyy': 99}, f)\n        # Run function\n        csv_file = task_func(json_file, './testy.csv')\n        # Check file\n        self.assertTrue(os.path.exists(csv_file))\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            csv_data = list(reader)\n        self.assertEqual(csv_data, [['yyy'], ['99']])\n        \n    def test_case_5(self):\n        # Create json file\n        json_file = './testz.json'\n        with open(json_file, 'w') as f:\n            json.dump({'zzz': 99}, f)\n        # Run function\n        csv_file = task_func(json_file, './testz.csv')\n        # Check file\n        self.assertTrue(os.path.exists(csv_file))\n        with open(csv_file, 'r') as f:\n            reader = csv.reader(f)\n            csv_data = list(reader)\n        self.assertEqual(csv_data, [['zzz'], ['99']])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a constant list of animals in ANIMALS, and a dictionary 'animal_dict' with keys as people's names and values as their favorite animal names, reverse the keys and values in a given dictionary and count the occurrences of each predefined animal name with a random count. Return the reversed dictionary and the counter with animal name occurrences. This function performs two tasks: 1. It reverses the given dictionary (animal_dict) such that the original values become keys and the original keys become lists of values. 2. It counts the occurrences of each animal name in a predefined list (ANIMALS). The count of each animal name is a random integer between 1 and max_count (inclusive).\nThe function should output with:\n    tuple: A tuple where the first element is a reversed dictionary and the second element is a counter with animal\n    name occurrences (with randomness in count).\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n```",
        "gt": "import collections\nimport random\nimport itertools\nANIMALS = ['Cat', 'Dog', 'Elephant', 'Lion', 'Tiger', 'Bear', 'Giraffe', 'Horse', 'Rabbit', 'Snake', 'Zebra']\ndef task_func(animal_dict, max_count=10, seed=0):\n    if max_count < 1:\n        raise ValueError(\"max_count must be a positive integer\")\n\n    random.seed(seed)\n\n    reversed_dict = {v: [] for v in animal_dict.values() if isinstance(v, str) and v in ANIMALS}\n    for k, v in animal_dict.items():\n        if isinstance(v, str) and v in ANIMALS:\n            reversed_dict[v].append(k)\n\n    animal_counter = collections.Counter(itertools.chain.from_iterable([[v] * random.randint(1, max_count) for v in ANIMALS]))\n    return reversed_dict, animal_counter",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing if the dictionary is correctly reversed\n        input_dict = {'John': 'Cat', 'Alice': 'Dog', 'Bob': 'Elephant'}\n        expected_output = {'Cat': ['John'], 'Dog': ['Alice'], 'Elephant': ['Bob']}\n        reversed_dict, animal_counter = task_func(input_dict)\n        self.assertEqual(reversed_dict, expected_output)\n        self.assertEqual(set(animal_counter.keys()), set(ANIMALS))\n    def test_case_2(self):\n        # Testing if the animal counts are within the range of 1 to 10\n        _, animal_counter = task_func({})\n        for animal in ANIMALS:\n            self.assertIn(animal, animal_counter)\n            self.assertTrue(1 <= animal_counter[animal] <= 10)\n    def test_case_3(self):\n        # Testing if all predefined animals are counted\n        _, animal_counter = task_func({}, 17, 42)\n        target = {'Rabbit': 14, 'Elephant': 9, 'Lion': 8, 'Tiger': 8, 'Bear': 5, 'Cat': 4, \n                  'Giraffe': 4, 'Horse': 3, 'Snake': 2, 'Dog': 1, 'Zebra': 1}\n        self.assertEqual(animal_counter, target)\n    def test_case_4(self):\n        # Testing function behavior with an empty dictionary\n        expected_reversed_dict = {}\n        reversed_dict, animal_counter = task_func(expected_reversed_dict)\n        self.assertEqual(reversed_dict, expected_reversed_dict)\n        self.assertEqual(set(animal_counter.keys()), set(ANIMALS))\n        with self.assertRaises(ValueError):\n            task_func(expected_reversed_dict, -1)\n    def test_case_5(self):\n        # Testing function behavior with a non-empty dictionary\n        input_dict = {'John': 'Lion', 'Alice': 'Tiger'}\n        expected_reversed_dict = {'Lion': ['John'], 'Tiger': ['Alice']}\n        reversed_dict, animal_counter = task_func(input_dict)\n        self.assertEqual(reversed_dict, expected_reversed_dict)\n        self.assertEqual(set(animal_counter.keys()), set(ANIMALS))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Remove duplicate and stopwords from a string \"text.\" Then, analyze the sentiment of the text using TextBlob.\nThe function should output with:\n    Sentiment: The sentiment of the text.\nYou should write self-contained code starting with:\n```\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n```",
        "gt": "import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\n# Constants\nSTOPWORDS = set(stopwords.words('english'))\ndef task_func(text):\n    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n    words = [word for word in re.findall(r'\\b\\w+\\b', text.lower()) if word not in STOPWORDS]\n    text = ' '.join(words)\n    blob = TextBlob(text)\n    \n    return blob.sentiment",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test Case 1: Regular Sentence\n        # Description: This test case checks the function's behavior with a regular sentence containing duplicate words\n        # and stopwords. The function should remove the duplicate words and stopwords, and return the sentiment analysis\n        # result as a tuple of two float values.\n        text = \"The quick brown fox jumps over the lazy dog and the dog was not quick.\"\n        sentiment = task_func(text)\n        self.assertIsInstance(sentiment, tuple, \"The function should return a tuple\")\n        self.assertEqual(len(sentiment), 2, \"The tuple should contain two elements\")\n        self.assertIsInstance(sentiment[0], float, \"The polarity should be a float\")\n        self.assertIsInstance(sentiment[1], float, \"The subjectivity should be a float\")\n    def test_case_2(self):\n        # Test Case 2: Empty String\n        # Description: This test case checks the function's behavior with an empty string. The function should return\n        # (0.0, 0.0) as the sentiment of an empty string is neutral.\n        text = \"\"\n        sentiment = task_func(text)\n        self.assertEqual(sentiment, (0.0, 0.0), \"The sentiment of an empty string should be (0.0, 0.0)\")\n    def test_case_3(self):\n        # Test Case 3: Positive Sentiment\n        # Description: This test case checks the function's behavior with a sentence that has a positive sentiment.\n        # The function should return a positive polarity value.\n        text = \"I absolutely love this! It's amazing.\"\n        sentiment = task_func(text)\n        self.assertGreater(sentiment[0], 0, \"The polarity of a positive sentiment sentence should be greater than 0\")\n    def test_case_4(self):\n        # Test Case 4: Negative Sentiment\n        # Description: This test case checks the function's behavior with a sentence that has a negative sentiment.\n        # The function should return a negative polarity value.\n        text = \"This is really bad. I hate it.\"\n        sentiment = task_func(text)\n        self.assertLess(sentiment[0], 0, \"The polarity of a negative sentiment sentence should be less than 0\")\n    def test_case_5(self):\n        # Test Case 5: Neutral Sentiment\n        # Description: This test case checks the function's behavior with a sentence that has a neutral sentiment.\n        # The function should return a zero polarity value.\n        text = \"This is a pen.\"\n        sentiment = task_func(text)\n        self.assertEqual(sentiment[0], 0, \"The polarity of a neutral sentiment sentence should be 0\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Removes rows from a DataFrame based on values of multiple columns, and then create n random line plots of two columns against each other.\nThe function should output with:\n    (pd.DataFrame, list): A tuple containing the modified DataFrame and a list of plot details.\n    Each entry in the plot details list is a tuple containing the two columns plotted against each other.\nYou should write self-contained code starting with:\n```\nfrom random import sample\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n```",
        "gt": "from random import sample\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(df, tuples, n_plots):\n    mask = df.apply(tuple, axis=1).isin(tuples)\n    df = df[~mask]\n\n    plot_details = []\n    for _ in range(min(n_plots, len(df))):\n        selected_columns = sample(COLUMNS, 2)\n        df.plot(x=selected_columns[0], y=selected_columns[1], kind='line')\n        plot_details.append((selected_columns[0], selected_columns[1]))\n\n    plt.show()\n\n    return df, plot_details",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\n# Unit test class\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame(np.random.randint(0,100,size=(100, 5)), columns=list('ABCDE'))\n        self.tuples = [(10, 20, 30, 40, 50), (60, 70, 80, 90, 100)]\n    def test_basic_functionality(self):\n        modified_df, plot_details = task_func(self.df, self.tuples, 3)\n        # Convert DataFrame rows to tuples for comparison\n        df_tuples = set([tuple(x) for x in modified_df.to_numpy()])\n        # Convert list of tuples to a set for efficient searching\n        tuples_to_remove = set(self.tuples)\n        # Check that none of the tuples to remove are in the modified DataFrame\n        intersection = df_tuples.intersection(tuples_to_remove)\n        self.assertTrue(len(intersection) == 0, f\"Removed tuples found in the modified DataFrame: {intersection}\")\n    def test_empty_dataframe(self):\n        empty_df = pd.DataFrame(columns=list('ABCDE'))\n        modified_df, plot_details = task_func(empty_df, [], 1)\n        self.assertTrue(modified_df.empty)\n    def test_zero_plots(self):\n        modified_df, plot_details = task_func(self.df, [], 0)\n        self.assertEqual(len(plot_details), 0)\n    def test_more_plots_than_data(self):\n        modified_df, plot_details = task_func(self.df.iloc[:5], [], 10)\n        self.assertTrue(len(plot_details) <= 5)\n    def test_plot_details(self):\n        _, plot_details = task_func(self.df, [], 3)\n        self.assertEqual(len(plot_details), 3)\n        all_columns = all(c[0] in COLUMNS and c[1] in COLUMNS for c in plot_details)\n        self.assertTrue(all_columns)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a bar chart of the frequency of words in a text beginning with the \"$\" character. Words that start with the '$' character but consist only of punctuation (e.g., '$!$' and '$.$') are not included in the frequency count. - If there is no word respecting the above conditions, the plot should be None. - The barplot x words on the x-axis and frequencies on the y-axis.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The plot showing the frequency of words beginning with the '$' character.\nYou should write self-contained code starting with:\n```\nimport nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nPUNCTUATION = set(punctuation)\ndef task_func(text):\n```",
        "gt": "import nltk\nfrom string import punctuation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Constants\nPUNCTUATION = set(punctuation)\ndef task_func(text):\n    words = text.split()\n    dollar_words = [\n        word\n        for word in words\n        if word.startswith(\"$\")\n        and not all(c in PUNCTUATION for c in word)\n        and len(word) > 1\n    ]\n    freq = nltk.FreqDist(dollar_words)\n    if not freq:  # If frequency distribution is empty, return None\n        return None\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x=freq.keys(), y=freq.values())\n    return plt.gca()",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @staticmethod\n    def is_bar(ax, expected_values, expected_categories):\n        extracted_values = [\n            bar.get_height() for bar in ax.patches\n        ]  # extract bar height\n        extracted_categories = [\n            tick.get_text() for tick in ax.get_xticklabels()\n        ]  # extract category label\n        for actual_value, expected_value in zip(extracted_values, expected_values):\n            assert (\n                actual_value == expected_value\n            ), f\"Expected value '{expected_value}', but got '{actual_value}'\"\n        for actual_category, expected_category in zip(\n            extracted_categories, expected_categories\n        ):\n            assert (\n                actual_category == expected_category\n            ), f\"Expected category '{expected_category}', but got '{actual_category}'\"\n    def test_case_1(self):\n        # Randomly generated sentence with $ words\n        text = \"This is the $first $first sentence.\"\n        plot = task_func(text)\n        self.assertIsInstance(plot, plt.Axes, \"Return type should be a plot (Axes).\")\n        self.is_bar(plot, expected_categories=[\"$first\"], expected_values=[2.0])\n    def test_case_2(self):\n        # Another randomly generated sentence with $ words\n        text = \"This $is $is $is the $second $sentence $sentence\"\n        plot = task_func(text)\n        self.assertIsInstance(plot, plt.Axes, \"Return type should be a plot (Axes).\")\n        self.is_bar(\n            plot,\n            expected_categories=[\"$is\", \"$second\", \"$sentence\"],\n            expected_values=[3.0, 1.0, 2.0],\n        )\n    def test_case_3(self):\n        # Sentence without any $ words\n        text = \"This is the third sentence.\"\n        plot = task_func(text)\n        self.assertIsNone(plot, \"The plot should be None since there are no $ words.\")\n    def test_case_4(self):\n        # Sentence with all $ words being single characters or punctuation\n        text = \"$ $! $@ $$\"\n        plot = task_func(text)\n        self.assertIsNone(\n            plot,\n            \"The plot should be None since all $ words are single characters or punctuation.\",\n        )\n    def test_case_5(self):\n        # Mix of valid $ words and punctuation-only $ words with some repeated words\n        text = \"$apple $apple $banana $!$ $@ fruit $cherry\"\n        plot = task_func(text)\n        self.assertIsInstance(plot, plt.Axes, \"Return type should be a plot (Axes).\")\n        self.is_bar(\n            plot,\n            expected_categories=[\"$apple\", \"$banana\", \"$cherry\"],\n            expected_values=[2.0, 1.0, 1.0],\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Adjust a quadratic curve to the specified data and return the parameters and fitted values.\nThe function should output with:\n    tuple: A tuple containing the following:\n    params (numpy array): Parameters of the fitted curve.\n    fitted_values (numpy array): Fitted y-values for the provided x_data.\n    ax (matplotlib.axes._axes.Axes, optional): Axes object of the plot if plot=True.\nYou should write self-contained code starting with:\n```\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef task_func(l, x_data, plot=False):\n```",
        "gt": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\ndef task_func(l, x_data, plot=False):\n\n    def func(x, a, b):\n        return a * x**2 + b\n\n    params, _ = curve_fit(func, x_data, l)\n    fitted_values = func(x_data, *params)\n    \n    if plot:\n        fig, ax = plt.subplots(figsize=(6, 4))\n        ax.scatter(x_data, l, label='Data')\n        ax.plot(x_data, fitted_values, label='Fitted function')\n        ax.legend(loc='best')\n        return params, fitted_values, ax\n\n    return params, fitted_values",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        l = np.array([1, 4, 9, 16, 25])\n        x_data = np.array([1, 2, 3, 4, 5])\n        params, fitted_values = task_func(l, x_data)\n        # Check the correctness of the fitted parameters\n        self.assertAlmostEqual(params[0], 1.0, places=5)\n        self.assertAlmostEqual(params[1], 0, places=5)\n        # Check the correctness of the fitted values\n        np.testing.assert_array_almost_equal(fitted_values, l, decimal=5)\n    def test_case_2(self):\n        l = np.array([2, 5, 10, 17, 26])\n        x_data = np.array([1, 2, 3, 4, 5])\n        params, fitted_values = task_func(l, x_data)\n        # Check the correctness of the fitted values\n        np.testing.assert_array_almost_equal(fitted_values, l, decimal=5)\n    def test_case_3(self):\n        l = np.array([0, 3, 8, 15, 24])\n        x_data = np.array([1, 2, 3, 4, 5])\n        params, fitted_values, ax = task_func(l, x_data, plot=True)\n        # Ensure the fitted values are correct\n        np.testing.assert_array_almost_equal(fitted_values, l, decimal=5)\n        # Ensure a plot is returned by checking the type of ax\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_4(self):\n        x_data = np.array([1, 2, 3, 4, 5])\n        l = x_data ** 2\n        params, fitted_values, ax = task_func(l, x_data, plot=True)\n        line = ax.lines[0].get_xydata()\n        self.assertTrue(np.allclose(line[:, 1], l))  # The plotted curve should match the fitted values\n    def test_case_5(self):\n        x_data = np.array([1, 2, 3, 4, 5])\n        l = x_data ** 2\n        \n        self.assertEqual(len(task_func(l, x_data, plot=False)), 2)  # If plot=False, no Axes object should be returned",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate and draw a sales trend for different categories from a particular epoch milliseconds to the current UTC time. The function selects category from ['Electronics', 'Clothing', 'Home', 'Books', 'Sports']. Each day's sales are randomly determined between 10 and 50 units for each category. The plot's x-axis represents 'Days since (the start date)', and the y-axis represents 'Sales' units.\nThe function should raise the exception for: ValueError: If the start time is negative or after the current time.\nThe function should output with:\n    sales_data (dict): Sales data for different categories over days.\n    ax (plt.Axes): The plot depicting the sales trend.\nYou should write self-contained code starting with:\n```\nimport random\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n```",
        "gt": "import random\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\ndef task_func(epoch_milliseconds, seed=None):\n    CATEGORIES = [\"Electronics\", \"Clothing\", \"Home\", \"Books\", \"Sports\"]\n\n    if seed is not None:\n        random.seed(seed)\n\n    if epoch_milliseconds < 0:\n        raise ValueError(\"Start time cannot be negative.\")\n\n    start_time = datetime.utcfromtimestamp(epoch_milliseconds / 1000.0)\n    current_time = datetime.utcnow()\n    days_diff = (current_time - start_time).days\n    if days_diff <= 0:\n        raise ValueError(\"Start date must be before current time.\")\n\n    sales_data = {category: [0] * days_diff for category in CATEGORIES}\n\n    for i in range(days_diff):\n        for category in CATEGORIES:\n            sales = random.randint(10, 50)\n            sales_data[category][i] += sales\n\n    fig, ax = plt.subplots()\n    for category, sales in sales_data.items():\n        ax.plot(range(days_diff), sales, label=category)\n\n    ax.set_xlabel(\"Days since \" + start_time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    ax.set_ylabel(\"Sales\")\n    ax.legend()\n\n    return sales_data, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom datetime import timedelta\nclass TestCases(unittest.TestCase):\n    def _check_sales_data(self, sales_data, expected_days):\n        \"\"\"Utility function to validate sales data.\"\"\"\n        self.assertIsInstance(sales_data, dict)\n        self.assertEqual(\n            set(sales_data.keys()),\n            set([\"Electronics\", \"Clothing\", \"Home\", \"Books\", \"Sports\"]),\n        )\n        for category, sales in sales_data.items():\n            self.assertEqual(len(sales), expected_days)\n            for sale in sales:\n                self.assertGreaterEqual(sale, 10)\n                self.assertLessEqual(sale, 50)\n    def test_case_1(self):\n        # Basic test on manual example - Jan 1 2021\n        sales_data, ax = task_func(1609459200000, seed=1)\n        self.assertIsInstance(sales_data, dict)\n        self.assertIsInstance(ax, plt.Axes)\n        self._check_sales_data(\n            sales_data,\n            (datetime.now() - datetime.utcfromtimestamp(1609459200000 / 1000.0)).days,\n        )\n        self.assertEqual(ax.get_ylabel(), \"Sales\")\n    def test_case_2(self):\n        # Basic test on current date - should raise error\n        current_epoch = int(datetime.now().timestamp() * 1000)\n        with self.assertRaises(ValueError):\n            task_func(current_epoch, seed=2)\n    def test_case_3(self):\n        # Test random seed\n        t = 1609459200000\n        sales_data1, _ = task_func(t, seed=42)\n        sales_data2, _ = task_func(t, seed=42)\n        sales_data3, _ = task_func(t, seed=3)\n        self.assertEqual(sales_data1, sales_data2)\n        self.assertNotEqual(sales_data1, sales_data3)\n    def test_case_4(self):\n        # Test that future date raises ValueError\n        future_epoch = int((datetime.now() + timedelta(days=1)).timestamp() * 1000)\n        with self.assertRaises(ValueError):\n            task_func(future_epoch, seed=4)\n    def test_case_5(self):\n        # Test that negative epoch milliseconds raise an error\n        with self.assertRaises(ValueError):\n            task_func(-1609459200000, seed=5)\n    def test_case_6(self):\n        # Test that non-integer types for epoch milliseconds raise a TypeError\n        with self.assertRaises(TypeError):\n            task_func(\"1609459200000\", seed=6)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a Folium map with markers for specified locations. It preprocesses the input to handle both direct geographical coordinates and address strings. For address strings, it dynamically resolves their latitude and longitude using the Photon geolocation service. This flexible input handling allows for easy mapping of various location types.\nNote that: Notes: The geolocator, instantiated as Photon(user_agent=\"geoapiExercises\"), plays a crucial role in enabling the function to handle string addresses by converting them into latitude and longitude, thus broadening the scope of input data that can be mapped.\nThe function should output with:\n    folium.Map: A Folium map object with markers for each specified location.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n```",
        "gt": "import pandas as pd\nimport folium\nfrom geopy.geocoders import Photon\ndef task_func(dic):\n    geolocator = Photon(user_agent=\"geoapiExercises\")\n\n    # Preprocess to handle both coordinates and string addresses\n    preprocessed_locations = []\n    for location, value in dic.items():\n        if isinstance(value, dict) and 'Lat' in value and 'Lon' in value:\n            preprocessed_locations.append({'Location': location, 'Lat': value['Lat'], 'Lon': value['Lon']})\n        elif isinstance(value, str):\n            geocoded_location = geolocator.geocode(value)\n            preprocessed_locations.append({'Location': location, 'Lat': geocoded_location.latitude, 'Lon': geocoded_location.longitude})\n        else:\n            raise ValueError(\"Location value must be either a dict with 'Lat' and 'Lon' keys or a string.\")\n\n    locations_df = pd.DataFrame(preprocessed_locations)\n\n    # Assuming the first row has valid coordinates\n    first_row = locations_df.iloc[0]\n    folium_map = folium.Map(location=[first_row['Lat'], first_row['Lon']], zoom_start=4)\n\n    # Add markers for all locations\n    for _, row in locations_df.iterrows():\n        folium.Marker([row['Lat'], row['Lon']], popup=row['Location']).add_to(folium_map)\n\n    return folium_map",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock, ANY\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Mocking the geocode return to control output of Photon geocode calls\n        self.geocode_patch = patch('geopy.geocoders.Photon.geocode', return_value=MagicMock(latitude=0, longitude=0))\n        self.mock_geocode = self.geocode_patch.start()\n        # Ensure to stop the patcher to avoid side-effects\n        self.addCleanup(self.geocode_patch.stop)\n    def test_return_type(self):\n        \"\"\"Test that the function returns a folium.Map object.\"\"\"\n        locations = {'Loc1': {'Lat': 0, 'Lon': 0}}\n        result = task_func(locations)\n        self.assertIsInstance(result, folium.Map)\n    @patch('folium.Map')\n    @patch('folium.Marker')\n    def test_marker_creation(self, mock_marker, mock_map):\n        \"\"\"Test that markers are added to the map for each location.\"\"\"\n        locations = {'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 1, 'Lon': 1}}\n        task_func(locations)\n        self.assertEqual(mock_marker.call_count, len(locations))\n    @patch('geopy.geocoders.Photon.geocode')\n    def test_different_locations(self, mock_geocode):\n        mock_geocode.return_value = MagicMock(latitude=40.7128, longitude=-74.0060)\n        locations = {'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': 'New York, USA'}\n        result = task_func(locations)\n        # Verifying that geocode was called for the string location\n        mock_geocode.assert_called_once_with('New York, USA')\n    def test_initial_centering(self):\n        \"\"\"Test that the map is initially centered on the first location.\"\"\"\n        locations = {'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 3, 'Lon': 3}}\n        result = task_func(locations)\n        self.assertEqual(result.location, [0, 0])\n    @patch('folium.Map')\n    def test_map_initialization(self, mock_map):\n        \"\"\"Test that the map is initialized with correct latitude and longitude.\"\"\"\n        locations = {'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 4, 'Lon': 4}}\n        task_func(locations)\n        # Assuming that the map is initialized at the location of the first entry in the dictionary\n        mock_map.assert_called_with(location=[0, 0], zoom_start=ANY)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Filter the prime numbers from the specified list, sort the prime numbers ascending based on their radian value converted to degrees, and return the sorted list. The function uses the isprime function from the sympy library to determine prime numbers and the degrees function from the math library to sort the numbers based on their degree value. >>> task_func([101, 102, 103, 104]) [101, 103]\nThe function should output with:\n    list[int]: A sorted list of prime numbers based on their degree value.\nYou should write self-contained code starting with:\n```\nimport math\nfrom sympy import isprime\ndef task_func(input_list):\n```",
        "gt": "import math\nfrom sympy import isprime\ndef task_func(input_list):\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        input_data = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n        expected_output = [2, 3, 5, 7]\n        self.assertEqual(task_func(input_data), expected_output)\n    def test_case_2(self):\n        input_data = [2, 3, 5, 7, 11, 13, 17, 19]\n        expected_output = [2, 3, 5, 7, 11, 13, 17, 19]\n        self.assertEqual(task_func(input_data), expected_output)\n    def test_case_3(self):\n        input_data = [4, 6, 8, 9, 10, 12, 14, 15, 16]\n        expected_output = []\n        self.assertEqual(task_func(input_data), expected_output)\n    def test_case_4(self):\n        input_data = []\n        expected_output = []\n        self.assertEqual(task_func(input_data), expected_output)\n    def test_case_5(self):\n        input_data = [89, 90, 91, 97, 98, 99, 100]\n        expected_output = [89, 97]\n        self.assertEqual(task_func(input_data), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Move all files with certain extensions from one directory to another.\nThe function should raise the exception for: ValueError: If source_dir or target_dir does not exist.\nThe function should output with:\n    int: The number of moved files.\nYou should write self-contained code starting with:\n```\nimport shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n```",
        "gt": "import shutil\nfrom pathlib import Path\nfrom typing import List\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n\n    count = 0\n\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n\n    return count",
        "test": "import unittest\nimport tempfile\nimport os\nimport shutil\ndef setup_test_environment(extensions, num_files_per_extension):\n    # Create temporary directories\n    source_dir = tempfile.mkdtemp()\n    target_dir = tempfile.mkdtemp()\n    file_list = []\n    # Populate source_dir with files\n    for ext in extensions:\n        for i in range(num_files_per_extension):\n            with open(os.path.join(source_dir, f\"file_{i}{ext}\"), \"w\") as f:\n                f.write(f\"This is a sample {ext} file.\")\n                file_list.append(f\"file_{i}{ext}\")\n    return source_dir, target_dir, file_list\n# Cleanup function to remove temporary directories after test\ndef cleanup_test_environment(source_dir, target_dir):\n    shutil.rmtree(source_dir)\n    shutil.rmtree(target_dir)\n# Define the test cases\nclass TestCases(unittest.TestCase):\n    def test_case_dir(self):\n        source_dir, target_dir, file_list = setup_test_environment(['.jpg', '.png', '.gif'], 3)\n        self.assertRaises(Exception, task_func, 'non_existent', target_dir, ['.test'])\n        self.assertRaises(Exception, task_func, source_dir, 'non_existent', ['.test'])\n    \n    def test_case_1(self):\n        # Test basic functionality with jpg, png, and gif extensions\n        source_dir, target_dir, file_list = setup_test_environment(['.jpg', '.png', '.gif'], 3)\n        result = task_func(source_dir, target_dir, ['.jpg', '.png', '.gif'])\n        self.assertEqual(result, 9)  # 3 files for each of the 3 extensions\n        self.assertEqual(len(os.listdir(target_dir)), 9)\n        self.assertCountEqual(file_list, os.listdir(target_dir))\n        cleanup_test_environment(source_dir, target_dir)\n    def test_case_2(self):\n        # Test only one extension\n        source_dir, target_dir, file_list = setup_test_environment(['.jpg', '.png', '.gif', '.txt'], 12)\n        result = task_func(source_dir, target_dir, ['.jpg'])\n        file_list = [file for file in file_list if file[-4:] == '.jpg']\n        self.assertEqual(result, 12)  # Only jpg files should be moved\n        self.assertEqual(len(os.listdir(target_dir)), 12)\n        self.assertCountEqual(file_list, os.listdir(target_dir))\n        cleanup_test_environment(source_dir, target_dir)\n    def test_case_3(self):\n        # Test with no files to move\n        source_dir, target_dir, file_list = setup_test_environment(['.jpg'], 8)\n        result = task_func(source_dir, target_dir, ['.png'])\n        self.assertEqual(result, 0)  # No png files in source\n        self.assertEqual(len(os.listdir(target_dir)), 0)\n        self.assertCountEqual([], os.listdir(target_dir))\n        cleanup_test_environment(source_dir, target_dir)\n    def test_case_4(self):\n        # Test with empty source directory\n        source_dir = tempfile.mkdtemp()\n        target_dir = tempfile.mkdtemp()\n        result = task_func(source_dir, target_dir, ['.jpg', '.png', '.gif'])\n        self.assertEqual(result, 0)  # No files to move\n        self.assertEqual(len(os.listdir(target_dir)), 0)\n        self.assertCountEqual([], os.listdir(target_dir))\n        cleanup_test_environment(source_dir, target_dir)\n    def test_case_5(self):\n        # Test moving multiple extensions but not all\n        source_dir, target_dir, file_list = setup_test_environment(['.jpg', '.txt', '.doc', 'png'], 5)\n        result = task_func(source_dir, target_dir, ['.jpg', '.txt', '.doc'])\n        file_list = [file for file in file_list if file[-4:] in ['.jpg', '.txt', '.doc']]\n        self.assertEqual(result, 15)  # All files should be moved\n        self.assertEqual(len(os.listdir(target_dir)), 15)\n        self.assertCountEqual(file_list, os.listdir(target_dir))\n        cleanup_test_environment(source_dir, target_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Check that the data in a JSON file is a list of dictionaries (objects in JavaScript).\nThe function should output with:\n    bool: True if the data is a list of dictionaries, False otherwise.\nYou should write self-contained code starting with:\n```\nimport json\nimport os\ndef task_func(file_path):\n```",
        "gt": "import json\nimport os\ndef task_func(file_path):\n    if not os.path.exists(file_path):\n        return False\n\n    with open(file_path, 'r') as file:\n        try:\n            data = json.load(file)\n        except json.JSONDecodeError:\n            return False\n\n    return isinstance(data, list) and all(isinstance(item, dict) for item in data)",
        "test": "import unittest\nimport shutil\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Preparing sample JSON data for testing\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_data_folder = f\"{self.base_tmp_dir}/test\"\n        os.makedirs(self.test_data_folder, exist_ok=True)\n        # Sample data\n        valid_json_data = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}]\n        invalid_json_data = [\"Alice\", 30, \"Bob\", 25]  # Not a list of dictionaries\n        empty_json_data = []  # Empty list\n        non_dict_list_json_data = [{\"name\": \"Alice\", \"age\": 30}, [\"Bob\", 25]]  # Mixed list types\n        # Writing these samples to files\n        def write_json_file(file_name, data):\n            with open(os.path.join(self.test_data_folder, file_name), 'w') as file:\n                json.dump(data, file)\n        write_json_file('valid.json', valid_json_data)\n        write_json_file('invalid.json', invalid_json_data)\n        write_json_file('empty.json', empty_json_data)\n        write_json_file('non_dict_list.json', non_dict_list_json_data)\n    def tearDown(self):\n        if os.path.exists(self.test_data_folder):\n            shutil.rmtree(self.test_data_folder)\n    def test_case_1(self):\n        file_path = os.path.join(self.test_data_folder, 'valid.json')\n        self.assertTrue(task_func(file_path))\n    def test_case_2(self):\n        file_path = os.path.join(self.test_data_folder, 'invalid.json')\n        self.assertFalse(task_func(file_path))\n    def test_case_3(self):\n        file_path = os.path.join(self.test_data_folder, 'empty.json')\n        self.assertTrue(task_func(file_path))\n    def test_case_4(self):\n        file_path = os.path.join(self.test_data_folder, 'non_dict_list.json')\n        self.assertFalse(task_func(file_path))\n    def test_case_5(self):\n        self.assertFalse(task_func('nonexistent.json'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Get the most common values associated with the url key in the dictionary list \"result.\"\nThe function should output with:\n    dict: A dictionary with the most common values and their counts.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport re\ndef task_func(result):\n```",
        "gt": "from collections import Counter\nimport re\ndef task_func(result):\n\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    \n    from_user_values = []\n    for l_res in result:\n        for j in l_res:\n            if re.match(regex, j):\n                from_user_values.append(l_res[j])\n           \n\n    counter = Counter(from_user_values)\n    most_common = dict(counter.most_common(1))\n\n    return most_common",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = [{\"hi\": 7, \"bye\": 4, \"http://google.com\": 0}, {\"https://google.com\": 0}, {\"http://www.cwi.nl\": 1}]\n        expected_output = {0: 2}\n        self.assertEqual(task_func(result), expected_output)\n    def test_case_2(self):\n        result = [{\"http://google.com\": 2}, {\"http://www.cwi.nl\": 2}, {\"http://google.com\": 3}]\n        expected_output = {2: 2}\n        self.assertEqual(task_func(result), expected_output)\n    def test_case_3(self):\n        result = [{\"http://google.com\": 5}]\n        expected_output = {5: 1}\n        self.assertEqual(task_func(result), expected_output)\n    def test_case_4(self):\n        result = []\n        expected_output = {}\n        self.assertEqual(task_func(result), expected_output)\n    def test_case_5(self):\n        result = [{\"hi\": 7, \"bye\": 4}, {\"hello\": \"world\"}]\n        expected_output = {}\n        self.assertEqual(task_func(result), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fit an exponential curve to given data points and plot the curves with labels. It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c to the provided x and y data points for each set of data and plots the fitted curves with the corresponding labels on a single matplotlib figure.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object that contains the plotted curves.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.optimize import curve_fit\ndef task_func(x, y, labels):\n```",
        "gt": "import numpy as np\nfrom scipy.optimize import curve_fit\ndef task_func(x, y, labels):\n\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n\n    ax.legend()\n\n    return fig",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Example data for all tests\n        self.x = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([1, 3, 5])]\n        self.y = [np.array([2, 3, 5]), np.array([5, 7, 10]), np.array([2.5, 3.5, 5.5])]\n        self.labels = [\"Test 1\", \"Test 2\", \"Test 3\"]\n    def test_plot_labels(self):\n        \"\"\"Ensure the plot includes all specified labels.\"\"\"\n        fig = task_func(self.x, self.y, self.labels)\n        ax = fig.gca()\n        legend_labels = [text.get_text() for text in ax.get_legend().get_texts()]\n        self.assertListEqual(legend_labels, self.labels, \"Legend labels do not match input labels.\")\n    def test_curve_fit_success(self):\n        \"\"\"Verify that curve_fit successfully fits the data.\"\"\"\n        for x_arr, y_arr in zip(self.x, self.y):\n            with self.subTest(x=x_arr, y=y_arr):\n                popt, _ = curve_fit(lambda x, a, b, c: a * np.exp(-b * x) + c, x_arr, y_arr)\n                self.assertTrue(len(popt) == 3, \"Optimal parameters not found for the exponential fit.\")\n    def test_output_type(self):\n        \"\"\"Check the output type to be a matplotlib figure.\"\"\"\n        fig = task_func(self.x, self.y, self.labels)\n        self.assertIsInstance(fig, plt.Figure, \"Output is not a matplotlib figure.\")\n    def test_no_data(self):\n        \"\"\"Test the function with no data provided.\"\"\"\n        with self.assertRaises(ValueError, msg=\"Empty data lists should raise a ValueError.\"):\n            task_func([], [], [])\n    def test_non_numeric_data(self):\n        \"\"\"Ensure non-numeric data raises a ValueError during fitting.\"\"\"\n        x = [np.array([\"a\", \"b\", \"c\"])]\n        y = [np.array([\"d\", \"e\", \"f\"])]\n        labels = [\"Invalid Data\"]\n        with self.assertRaises(ValueError, msg=\"Non-numeric data should raise a ValueError.\"):\n            task_func(x, y, labels)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Process a JSON string containing a \"text\" field: convert to lowercase, remove punctuation, and count word frequency. This function takes a JSON string with a field named \"text\", and returns a dictionary with word counts. It processes the text by converting it to lowercase, removing all punctuation and non-alphanumeric characters (except spaces), and then counting the frequency of each word.\nNote that: Notes: Punctuation is removed using the `string.punctuation` constant. The function is case-insensitive and treats words like \"Hello\" and \"hello\" as the same word. If the JSON string is malformed or the \"text\" field is missing, an empty dictionary is returned.\nThe function should output with:\n    dict: A dictionary with words as keys and their frequency counts as values. If the \"text\" field is missing,\n    returns an empty dictionary.\nYou should write self-contained code starting with:\n```\nimport re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n```",
        "gt": "import re\nimport json\nfrom collections import defaultdict\nimport string\ndef task_func(json_string):\n    try:\n        # Load JSON and extract text\n        data = json.loads(json_string)\n        text = data.get('text', '')\n    except json.JSONDecodeError:\n        return {}\n\n    # Lowercase, remove non-alphanumeric characters except spaces, remove punctuation\n    text = re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()\n    text = text.translate({ord(c): None for c in string.punctuation})\n\n    # Count words\n    word_counts = defaultdict(int)\n    for word in text.split():\n        word_counts[word] += 1\n\n    return dict(word_counts)",
        "test": "import unittest\nimport json\nclass TestCases(unittest.TestCase):\n    def test_normal_json_input(self):\n        \"\"\"Test with normal JSON input with various punctuation.\"\"\"\n        # Description: This test ensures that the function can accurately count words\n        # in a JSON string that contains typical sentence punctuation.\n        json_input = '{\"text\": \"Hello world! Hello universe. World, meet universe.\"}'\n        expected_output = {'hello': 2, 'world': 2, 'universe': 2, 'meet': 1}\n        self.assertEqual(task_func(json_input), expected_output)\n    def test_missing_text_field(self):\n        \"\"\"Test with JSON input with no 'text' field.\"\"\"\n        # Description: This test checks the function's behavior when the JSON string\n        # does not have a \"text\" field, expecting an empty dictionary in return.\n        json_input = '{\"data\": \"Some data without text field.\"}'\n        expected_output = {}\n        self.assertEqual(task_func(json_input), expected_output)\n    def test_numbers_and_special_characters(self):\n        \"\"\"Test with JSON input containing numbers and special characters.\"\"\"\n        # Description: This test verifies that numbers and special characters are not counted\n        # as words and that they are properly removed before word counting.\n        json_input = '{\"text\": \"12345 test! Special #characters and numbers 67890.\"}'\n        expected_output = {'12345': 1, 'test': 1, 'special': 1, 'characters': 1, 'and': 1, 'numbers': 1, '67890': 1}\n        self.assertEqual(task_func(json_input), expected_output)\n    def test_large_text_input(self):\n        \"\"\"Test with a large text input to check performance and accuracy.\"\"\"\n        # Description: This test uses a large block of text to assess the function's\n        # performance and accuracy in processing and counting words.\n        json_input = '{\"text\": \"' + \" \".join([\"word\"] * 1000) + '\"}'\n        expected_output = {'word': 1000}\n        self.assertEqual(task_func(json_input), expected_output)\n    def test_malformed_json_input(self):\n        \"\"\"Test with a malformed JSON input.\"\"\"\n        # Description: This test checks the function's ability to handle a JSON string that\n        # is not properly formatted. The function is expected to return an empty dictionary.\n        json_input = '{\"text: \"This is not a properly formatted JSON string.\"}'\n        expected_output = {}\n        self.assertEqual(task_func(json_input), expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random password of a specified length, including Latin characters, numbers, and symbols. Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\nThe function should output with:\n    str: The hashed password.\nYou should write self-contained code starting with:\n```\nimport codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n```",
        "gt": "import codecs\nimport random\nimport string\nimport hashlib\ndef task_func(password_length=10, salt=\"salty\"):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    \n    return hashed_password",
        "test": "import unittest\nimport codecs\nimport random\nimport string\nimport hashlib\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with default parameters\n        random.seed(0)\n        hashed_password = task_func()\n        self.assertEqual(len(hashed_password), 64)  # SHA256 produces a 64-character long hash\n    def test_case_2(self):\n        # Testing with custom password length but default salt\n        random.seed(0)\n        hashed_password = task_func(15)\n        self.assertEqual(len(hashed_password), 64)\n    def test_case_3(self):\n        # Testing with default password length but custom salt\n        random.seed(0)\n        hashed_password = task_func(salt=\"custom_salt\")\n        self.assertEqual(len(hashed_password), 64)\n    def test_case_4(self):\n        # Testing with both custom password length and salt\n        random.seed(0)\n        hashed_password = task_func(20, \"another_salt\")\n        self.assertEqual(len(hashed_password), 64)\n    def test_case_5(self):\n        # Testing with edge value for password length (e.g., very small value)\n        random.seed(0)\n        hashed_password = task_func(1)\n        self.assertEqual(len(hashed_password), 64)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function retrieves a JSON file from the given URL using urllib.request.urlretrieve, temporarily saving it as 'downloaded_file.json'. It then opens and reads this file, converts the JSON content into a pandas DataFrame, and finally deletes the temporary JSON file.\nThe function should output with:\n    pandas.DataFrame: A DataFrame constructed from the JSON data in the downloaded file.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport json\nimport pandas as pd\n# Constants\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n```",
        "gt": "import urllib.request\nimport os\nimport json\nimport pandas as pd\n# Constants\nTARGET_JSON_FILE = \"downloaded_file.json\"\ndef task_func(url):\n    urllib.request.urlretrieve(url, TARGET_JSON_FILE)\n\n    with open(TARGET_JSON_FILE, \"r\") as f:\n        data = json.load(f)\n\n    os.remove(TARGET_JSON_FILE)\n\n    return pd.DataFrame(data)",
        "test": "import unittest\nimport pandas as pd\nfrom unittest.mock import patch, mock_open\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"os.remove\")\n    def test_sample_1(self, mock_remove, mock_urlretrieve):\n        \"\"\"Test that the function returns the correct DataFrame for a given JSON file.\"\"\"\n        url = \"http://example.com/sample_1.json\"\n        sample_data = '[{\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}, {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"}]'\n        mock_urlretrieve.return_value = None\n        with patch(\"builtins.open\", mock_open(read_data=sample_data)):\n            expected_df = pd.DataFrame(\n                [\n                    {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n                    {\"name\": \"Bob\", \"age\": 30, \"city\": \"San Francisco\"},\n                ]\n            )\n            result_df = task_func(url)\n            pd.testing.assert_frame_equal(result_df, expected_df)\n        mock_urlretrieve.assert_called_once_with(url, \"downloaded_file.json\")\n        mock_remove.assert_called_once_with(\"downloaded_file.json\")\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"os.remove\")\n    def test_sample_2(self, mock_remove, mock_urlretrieve):\n        \"\"\"Test that the function returns the correct DataFrame for a given JSON file.\"\"\"\n        url = \"http://example.com/sample_2.json\"\n        sample_data = '[{\"product\": \"Laptop\", \"price\": 1000}, {\"product\": \"Mouse\", \"price\": 20}, {\"product\": \"Keyboard\", \"price\": 50}]'\n        mock_urlretrieve.return_value = None\n        with patch(\"builtins.open\", mock_open(read_data=sample_data)):\n            expected_df = pd.DataFrame(\n                [\n                    {\"product\": \"Laptop\", \"price\": 1000},\n                    {\"product\": \"Mouse\", \"price\": 20},\n                    {\"product\": \"Keyboard\", \"price\": 50},\n                ]\n            )\n            result_df = task_func(url)\n            pd.testing.assert_frame_equal(result_df, expected_df)\n        mock_urlretrieve.assert_called_once_with(url, \"downloaded_file.json\")\n        mock_remove.assert_called_once_with(\"downloaded_file.json\")\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"os.remove\")\n    def test_empty_json(self, mock_remove, mock_urlretrieve):\n        \"\"\"Test that the function returns an empty DataFrame for an empty JSON file.\"\"\"\n        url = \"http://example.com/empty.json\"\n        sample_data = \"[]\"\n        mock_urlretrieve.return_value = None\n        with patch(\"builtins.open\", mock_open(read_data=sample_data)):\n            expected_df = pd.DataFrame()\n            result_df = task_func(url)\n            pd.testing.assert_frame_equal(result_df, expected_df)\n        mock_urlretrieve.assert_called_once_with(url, \"downloaded_file.json\")\n    @patch(\"urllib.request.urlretrieve\")\n    def test_invalid_url(self, mock_urlretrieve):\n        \"\"\"Test that the function raises an exception when the URL is invalid.\"\"\"\n        url = \"http://example.com/non_existent.json\"\n        mock_urlretrieve.side_effect = Exception(\"URL retrieval failed\")\n        with self.assertRaises(Exception):\n            task_func(url)\n        mock_urlretrieve.assert_called_once_with(url, \"downloaded_file.json\")\n    @patch(\"urllib.request.urlretrieve\")\n    @patch(\"os.remove\")\n    def test_invalid_json(self, mock_remove, mock_urlretrieve):\n        \"\"\"Test that the function raises an exception when the JSON file is invalid.\"\"\"\n        url = \"http://example.com/invalid.json\"\n        sample_data = \"invalid json content\"\n        mock_urlretrieve.return_value = None\n        with patch(\n            \"builtins.open\", mock_open(read_data=sample_data)\n        ), self.assertRaises(Exception):\n            task_func(url)\n        mock_urlretrieve.assert_called_once_with(url, \"downloaded_file.json\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts phone numbers from a given URL or local file and saves them to a specified file in JSON format.\nThe function should output with:\n    list: A list of strings, each representing a found phone number.\nYou should write self-contained code starting with:\n```\nimport bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n```",
        "gt": "import bs4\nimport requests\nimport re\nimport json\ndef task_func(url: str, output_path: str) -> list:\n    HEADERS = {'User-Agent': 'Mozilla/5.0'}\n    PHONE_REGEX = r\"\\+\\d{1,3}?\\s?\\(?\\d{1,4}?\\)?\\s?\\d{1,4}?\\s?\\d{1,9}\"\n\n    # Handling local files separately\n    if url.startswith(\"file://\"):\n        with open(url[7:], 'r') as file:\n            text = file.read()\n    else:\n        response = requests.get(url, headers=HEADERS)\n        soup = bs4.BeautifulSoup(response.text, 'html.parser')\n        text = soup.get_text()\n\n    phone_numbers = re.findall(PHONE_REGEX, text)\n\n    with open(output_path, 'w') as f:\n        json.dump(phone_numbers, f)\n\n    return phone_numbers",
        "test": "import unittest\nimport json\nimport os\nimport tempfile\nfrom shutil import rmtree\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to store the HTML files and output\n        self.test_dir = tempfile.mkdtemp()\n        self.test_files = {\n            'test_page_1.html': \"<html><body>Phone: +1234567890</body></html>\",\n            'test_page_2.html': \"<html><body>Call us: +9876543210 or +1122334455</body></html>\",\n            'test_page_3.html': \"<html><body>No phone number here!</body></html>\",\n            'test_page_4.html': \"<html><body>Contact: +919876543210</body></html>\",\n            'test_page_5.html': \"<html><body>Numbers: +14151234567, +13171234567</body></html>\",\n        }\n        # Write test content to files in the temporary directory\n        for filename, content in self.test_files.items():\n            with open(os.path.join(self.test_dir, filename), 'w') as f:\n                f.write(content)\n    def tearDown(self):\n        # Remove the temporary directory and all its contents\n        rmtree(self.test_dir)\n    def test_phone_numbers_page_1(self):\n        \"\"\" Test extraction from test_page_1 with a single phone number \"\"\"\n        filename = 'test_page_1.html'\n        expected_numbers = [\"+1234567890\"]\n        self.run_test_case(filename, expected_numbers)\n    def test_phone_numbers_page_2(self):\n        \"\"\" Test extraction from test_page_2 with multiple phone numbers \"\"\"\n        filename = 'test_page_2.html'\n        expected_numbers = [\"+9876543210\", \"+1122334455\"]\n        self.run_test_case(filename, expected_numbers)\n    def test_phone_numbers_page_3(self):\n        \"\"\" Test extraction from test_page_3 where no phone numbers are present \"\"\"\n        filename = 'test_page_3.html'\n        expected_numbers = []\n        self.run_test_case(filename, expected_numbers)\n    def test_phone_numbers_page_4(self):\n        \"\"\" Test extraction from test_page_4 with one phone number \"\"\"\n        filename = 'test_page_4.html'\n        expected_numbers = [\"+919876543210\"]\n        self.run_test_case(filename, expected_numbers)\n    def test_phone_numbers_page_5(self):\n        \"\"\" Test extraction from test_page_5 with multiple phone numbers \"\"\"\n        filename = 'test_page_5.html'\n        expected_numbers = [\"+14151234567\", \"+13171234567\"]\n        self.run_test_case(filename, expected_numbers)\n    def run_test_case(self, filename, expected_numbers):\n        \"\"\" Helper method to run individual test cases \"\"\"\n        url = f\"file://{os.path.join(self.test_dir, filename)}\"\n        output_path = os.path.join(self.test_dir, f'output_{filename}')\n        result = task_func(url, output_path)\n        self.assertEqual(result, expected_numbers)\n        with open(output_path, 'r') as f:\n            saved_numbers = json.load(f)\n        self.assertEqual(saved_numbers, expected_numbers)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a histogram and a probability density function (PDF) plot for a specified normal distribution. This function draws n_samples from a normal distribution defined by mean (mu) and standard deviation (sigma), plots a histogram of the samples, and overlays the PDF of the normal distribution. The histogram's density is normalized, and the PDF is plotted with a red line with linewidth=2.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object with the histogram and PDF plotted.\n    samples (numpy.ndarray): Generated sample data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\ndef task_func(n_samples=1000, mu=0, sigma=1, random_seed=0):\n    if n_samples <= 0 or sigma <= 0:\n        raise ValueError(\"Invalid n_samples or sigma\")\n    np.random.seed(random_seed)\n    plt.figure()\n    samples = np.random.normal(mu, sigma, n_samples)\n    _, _, _ = plt.hist(samples, 30, density=True)\n    ax = plt.gca()\n    ax.plot(\n        np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000),\n        norm.pdf(np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000), mu, sigma),\n        linewidth=2,\n        color=\"r\",\n    )\n    return ax, samples",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.default_seed = 42\n        self.large_n_samples = 100000\n        self.small_n_samples = 100\n        self.zero_n_samples = 0\n        self.negative_n_samples = -100\n        self.default_mu = 0\n        self.default_sigma = 1\n        self.large_sigma = 5\n        self.small_sigma = 0.2\n        self.zero_sigma = 0\n        self.negative_sigma = -1\n        self.custom_mu = 5\n        self.custom_sigma = 2\n    def test_case_1(self):\n        # Test data generation correctness\n        mu_test = 3\n        sigma_test = 2\n        n_samples_test = 10000\n        random_seed_test = 42\n        _, samples = task_func(\n            n_samples=n_samples_test,\n            mu=mu_test,\n            sigma=sigma_test,\n            random_seed=random_seed_test,\n        )\n        # Calculate sample mean and standard deviation\n        sample_mean = np.mean(samples)\n        sample_std = np.std(samples)\n        # Verify sample mean and standard deviation are close to mu and sigma within a tolerance\n        self.assertAlmostEqual(\n            sample_mean,\n            mu_test,\n            places=1,\n            msg=\"Sample mean does not match expected mean.\",\n        )\n        self.assertAlmostEqual(\n            sample_std,\n            sigma_test,\n            places=1,\n            msg=\"Sample standard deviation does not match expected sigma.\",\n        )\n    def test_case_2(self):\n        # Default parameters\n        ax, _ = task_func(random_seed=self.default_seed)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.patches), 30)\n    def test_case_3(self):\n        # Custom parameters: small number of samples, custom mean and standard deviation\n        ax, _ = task_func(\n            n_samples=self.small_n_samples,\n            mu=self.custom_mu,\n            sigma=self.custom_sigma,\n            random_seed=self.default_seed,\n        )\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.patches), 30)\n    def test_case_4(self):\n        # Large number of samples\n        ax, _ = task_func(n_samples=self.large_n_samples, random_seed=self.default_seed)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.patches) >= 30)\n    def test_case_5(self):\n        # Small number of samples\n        ax, _ = task_func(n_samples=self.small_n_samples, random_seed=self.default_seed)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.patches) <= 30)\n    def test_case_6(self):\n        # Large standard deviation\n        ax, _ = task_func(sigma=self.large_sigma, random_seed=self.default_seed)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.patches), 30)\n    def test_case_7(self):\n        # Small standard deviation\n        ax, _ = task_func(sigma=self.small_sigma, random_seed=self.default_seed)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.patches), 30)\n    def test_case_8(self):\n        # Invalid negative standard deviation\n        with self.assertRaises(ValueError):\n            task_func(sigma=self.negative_sigma)\n    def test_case_9(self):\n        # Invalid zero standard deviation\n        with self.assertRaises(Exception):\n            task_func(sigma=self.zero_sigma)\n    def test_case_10(self):\n        # Invalid zero samples\n        with self.assertRaises(Exception):\n            task_func(n_samples=self.zero_n_samples)\n    def test_case_11(self):\n        # Invalid negative samples\n        with self.assertRaises(ValueError):\n            task_func(n_samples=self.negative_n_samples)\n    def test_case_12(self):\n        # Reproducibility with same seed\n        ax1, sample1 = task_func(random_seed=self.default_seed)\n        ax2, sample2 = task_func(random_seed=self.default_seed)\n        self.assertEqual(ax1.patches[0].get_height(), ax2.patches[0].get_height())\n        self.assertTrue((sample1 == sample2).all())\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace values in a DataFrame with a dictionary mapping and optionally record histograms for specified columns.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    DataFrame: The DataFrame with replaced values. The columns are in the format of 'col1', 'col2', etc.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(df, dct, columns=None, plot_histograms=False):\n    \n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    # Replace values using dictionary mapping\n    df_replaced = df.replace(dct)\n    \n    # Plot a histogram for each specified column\n    if plot_histograms and columns:\n        for column in columns:\n            if column in df_replaced:\n                df_replaced[column].plot.hist(bins=50)\n                plt.title(column)\n\n    return df_replaced",
        "test": "import pandas as pd\nimport unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_basic_functionality(self):\n        df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        dct = {1: 'a', 2: 'b', 3: 'c', 4: 'd'}\n        expected_df = pd.DataFrame({'col1': ['a', 'b'], 'col2': ['c', 'd']})\n        result_df = task_func(df, dct)\n        pd.testing.assert_frame_equal(result_df, expected_df)\n        plt.close()\n    def test_complex_dataframe(self):\n        df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8], 'col3': [9, 10, 11, 12]})\n        dct = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l'}\n        expected_df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'], 'col2': ['e', 'f', 'g', 'h'], 'col3': ['i', 'j', 'k', 'l']})\n        result_df = task_func(df, dct)\n        pd.testing.assert_frame_equal(result_df, expected_df)\n        plt.close()\n    def test_empty_dataframe(self):\n        df = pd.DataFrame()\n        dct = {1: 'a', 2: 'b'}\n        result_df = task_func(df, dct)\n        pd.testing.assert_frame_equal(result_df, df)\n        plt.close()\n    def test_columns_not_in_dataframe(self):\n        df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        dct = {1: 'a', 2: 'b', 3: 'c', 4: 'd'}\n        result_df = task_func(df, dct, columns=['col3', 'col4'], plot_histograms=True)\n        pd.testing.assert_frame_equal(result_df, df.replace(dct))\n        plt.close()\n    def test_histogram_plotting(self):\n        df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        dct = {1: 'a', 2: 'b', 3: 'c', 4: 'd'}\n        result_df = task_func(df, dct, columns=['col3', 'col4'], plot_histograms=True)\n        # Since actual plot inspection is not feasible, assume histograms are correctly plotted if no errors are raised\n        pd.testing.assert_frame_equal(result_df, df.replace(dct))\n        plt.close()\n    def test_case_non_df(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\", {})\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads an image from the specified URL, converts it to grayscale, and generates a histogram of its grayscale values.\nThe function should raise the exception for: ValueError: If the URL is invalid or if there's an error downloading the image. Error message will specify the download issue. IOError: If there's an error in opening or processing the downloaded image. Error message will specify the processing issue.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object of the generated histogram.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n```",
        "gt": "import requests\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(url: str) -> \"matplotlib.axes._axes.Axes\":\n    response = None  # Initialize response to None\n    # Validate the URL\n    if not isinstance(url, str) or not url:\n        raise ValueError(\"Invalid URL provided.\")\n\n    # Download the image with error handling\n    try:\n        response = requests.get(url, stream=True, timeout=10)\n        response.raise_for_status()\n        img = Image.open(response.raw).convert(\"L\")\n    except requests.RequestException as e:\n        raise ValueError(f\"Error downloading the image: {e}\") from e\n    except IOError as e:\n        raise IOError(f\"Error processing the image: {e}\") from e\n    finally:\n        if response:  # Check if response is not None before closing\n            response.close()\n\n    # Convert the image to a numpy array\n    img_array = np.array(img)\n\n    # Create the histogram and return the Axes object\n    _, ax = plt.subplots()\n    ax.hist(img_array.ravel(), bins=256, color=\"gray\", alpha=0.7)\n    ax.set_title(\"Grayscale Histogram\")\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock, Mock\nimport requests\nimport matplotlib\nfrom PIL import Image\nimport io\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def create_mock_image(self):\n        \"\"\"\n        Creates a mock grayscale image in memory.\n        \"\"\"\n        img = Image.new(\"L\", (100, 100), color=\"gray\")\n        img_byte_arr = io.BytesIO()\n        img.save(img_byte_arr, format=\"JPEG\")\n        img_byte_arr.seek(0)  # Important: move to the start of the BytesIO object\n        return img_byte_arr\n    @patch(\"requests.get\")\n    def test_valid_image_url(self, mock_get):\n        \"\"\"\n        Test if the function correctly processes a valid image URL and returns a matplotlib Axes object with the correct title.\n        \"\"\"\n        mock_img = self.create_mock_image()\n        mock_get.return_value = Mock(ok=True)\n        mock_get.return_value.raw = mock_img\n        ax = task_func(\"https://www.google.com/images/srpr/logo11w.png\")\n        self.assertIsInstance(\n            ax,\n            matplotlib.axes._axes.Axes,\n            \"Return type should be matplotlib.axes._axes.Axes\",\n        )\n        self.assertEqual(\n            ax.get_title(),\n            \"Grayscale Histogram\",\n            \"Histogram should have the title 'Grayscale Histogram'\",\n        )\n    @patch(\"requests.get\")\n    def test_invalid_image_url(self, mock_get):\n        \"\"\"\n        Test if the function raises a ValueError when provided with an invalid URL.\n        \"\"\"\n        mock_get.side_effect = requests.exceptions.RequestException\n        with self.assertRaises(ValueError):\n            task_func(\"invalid_url\")\n    @patch(\"requests.get\")\n    def test_histogram_bins(self, mock_get):\n        \"\"\"\n        Test if the histogram generated by the function contains the correct number of bins.\n        \"\"\"\n        mock_img = self.create_mock_image()\n        mock_get.return_value = Mock(ok=True)\n        mock_get.return_value.raw = mock_img\n        ax = task_func(\"https://www.google.com/images/srpr/logo11w.png\")\n        n, bins, _ = ax.hist([], bins=256)\n        self.assertEqual(len(bins), 257, \"There should be 257 bin edges for 256 bins\")\n    @patch(\"requests.get\")\n    def test_histogram_data_range(self, mock_get):\n        \"\"\"\n        Test if the data range of the histogram is appropriate for a grayscale image (0 to 255).\n        \"\"\"\n        mock_img = self.create_mock_image()\n        mock_get.return_value = Mock(ok=True)\n        mock_get.return_value.raw = mock_img\n        ax = task_func(\"https://www.google.com/images/srpr/logo11w.png\")\n        n, bins, _ = ax.hist([], bins=256)\n        self.assertTrue(\n            bins[0] >= 0 and bins[-1] <= 255, \"Data range should be between 0 and 255\"\n        )\n    @patch(\"requests.get\")\n    def test_empty_url(self, mock_get):\n        \"\"\"\n        Test if the function raises a ValueError when provided with an empty URL string.\n        \"\"\"\n        mock_get.side_effect = requests.exceptions.RequestException\n        with self.assertRaises(ValueError):\n            task_func(\"\")\n    @patch(\"requests.get\")\n    @patch(\"PIL.Image.open\")\n    def test_ioerror_image_processing(self, mock_image_open, mock_get):\n        \"\"\"\n        Test if the function raises an IOError when there is an error in processing the image.\n        \"\"\"\n        # Mock requests.get to return a valid response\n        mock_get.return_value = MagicMock(ok=True)\n        mock_get.return_value.raw = MagicMock()\n        # Mock PIL.Image.open to raise IOError\n        mock_image_open.side_effect = IOError(\"Mocked IOError\")\n        with self.assertRaises(IOError) as context:\n            task_func(\"https://www.example.com/image.jpg\")\n        self.assertEqual(\n            str(context.exception), \"Error processing the image: Mocked IOError\"\n        )\n    def tearDown(self):\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame with simulated monthly sales data for various product categories, ensuring reproducibility through the use of a random seed.\nNote that: Notes: The function sets the random seed at the beginning of execution to ensure that the generated sales data is the same for any given seed value. The sales data for each category is generated for each month, creating a comprehensive report that spans all specified categories and months.\nThe function should raise the exception for: ValueError: If either 'categories' or 'months' is not provided as a list or if either is an empty list.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with three columns: 'Month', 'Category', and 'Sales'. The 'Sales' values are floating-point numbers in the range [100, 501), generated by the formula: randint(100, 500) + uniform(0, 1), ensuring sales values are diverse yet consistent upon repeated executions with the same seed.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n```",
        "gt": "import pandas as pd\nfrom random import randint, uniform, seed\ndef task_func(categories=None, months=None, random_seed=42):\n\n    if categories is None:\n        categories = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Beauty & Personal Care']\n    if months is None:\n        months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    if not isinstance(categories, list) or not categories:\n        raise ValueError(\"Invalid 'categories': must be a non-empty list.\")\n    if not isinstance(months, list) or not months:\n        raise ValueError(\"Invalid 'months': must be a non-empty list.\")\n\n    seed(random_seed)  # Setting the seed for reproducibility\n    sales_data = []\n\n    for month in months:\n        for category in categories:\n            sales = randint(100, 500) + uniform(0, 1)\n            sales_data.append([month, category, sales])\n\n    sales_df = pd.DataFrame(sales_data, columns=['Month', 'Category', 'Sales'])\n    return sales_df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_reproducibility(self):\n        df1 = task_func(random_seed=42)\n        df2 = task_func(random_seed=42)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_dataframe_structure(self):\n        df = task_func()\n        self.assertEqual(list(df.columns), ['Month', 'Category', 'Sales'])\n        self.assertEqual(len(df), 60)  # 12 months * 5 categories\n    def test_invalid_categories(self):\n        with self.assertRaises(ValueError):\n            task_func(categories=\"Not a list\")\n    def test_invalid_months(self):\n        with self.assertRaises(ValueError):\n            task_func(months=123)\n    def test_custom_categories_and_months(self):\n        custom_categories = ['A', 'B', 'C']\n        custom_months = ['Jan', 'Feb']\n        df = task_func(categories=custom_categories, months=custom_months)\n        self.assertEqual(len(df), len(custom_categories) * len(custom_months))\n        self.assertTrue(set(df['Category']).issubset(custom_categories))\n        self.assertTrue(set(df['Month']).issubset(custom_months))\n    def test_values(self):\n        df = task_func()\n        df_list = df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(df_list))\n        \n        expect = ['January,Electronics,427.11133106816567', 'January,Clothing,479.2750293183691', 'January,Home & Kitchen,214.13953792852516', 'January,Books,152.67669948742292', 'January,Beauty & Personal Care,379.0869388326294', 'February,Electronics,316.0317826794818', 'February,Clothing,147.2186379748036', 'February,Home & Kitchen,358.60201872905', 'February,Books,387.19883765068664', 'February,Beauty & Personal Care,432.70132497359026', 'March,Electronics,314.2204406220407', 'March,Clothing,401.2781907082307', 'March,Home & Kitchen,103.75880736712976', 'March,Books,181.69813939498823', 'March,Beauty & Personal Care,274.27787134167164', 'April,Electronics,210.95721307220677', 'April,Clothing,272.1022102765198', 'April,Home & Kitchen,294.09671637683346', 'April,Books,276.6037260313669', 'April,Beauty & Personal Care,122.72973178669382', 'May,Electronics,374.1248261628532', 'May,Clothing,293.07880019807845', 'May,Home & Kitchen,250.829404664253', 'May,Books,416.8854517479368', 'May,Beauty & Personal Care,285.5773521452568', 'June,Electronics,460.0695551488237', 'June,Clothing,438.22789827565157', 'June,Home & Kitchen,248.98522152066076', 'June,Books,219.86648366675527', 'June,Beauty & Personal Care,294.27797360311007', 'July,Electronics,425.83411042664073', 'July,Clothing,183.37018096711688', 'July,Home & Kitchen,207.6701751743777', 'July,Books,459.9366545877125', 'July,Beauty & Personal Care,431.07140250957855', 'August,Electronics,425.1711386481981', 'August,Clothing,473.2448109251514', 'August,Home & Kitchen,336.37945544175767', 'August,Books,427.68816195843334', 'August,Beauty & Personal Care,212.68461425098988', 'September,Electronics,493.77599991154625', 'September,Clothing,217.8218025940068', 'September,Home & Kitchen,261.4011647870223', 'September,Books,133.21098284358632', 'September,Beauty & Personal Care,390.87636762647264', 'October,Electronics,261.21262654405416', 'October,Clothing,355.39563190106065', 'October,Home & Kitchen,429.4588518525874', 'October,Books,235.1396303195255', 'October,Beauty & Personal Care,481.56136813416316', 'November,Electronics,234.74701381165227', 'November,Clothing,319.8978228836025', 'November,Home & Kitchen,304.3619964437136', 'November,Books,170.50952629367646', 'November,Beauty & Personal Care,146.75578215753373', 'December,Electronics,156.15284131934825', 'December,Clothing,181.79207936436296', 'December,Home & Kitchen,316.596409030732', 'December,Books,297.3816192865065', 'December,Beauty & Personal Care,339.5291143450991']\n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a matrix of specified shape and random numbers within a specified range. Generate a list of all possible number pairs (all possible combinations of two numbers which are in the matrix) in the matrix. Calculate the sum of the products of all pairs. >>> task_func((5, 4), seed=1) (4401, array([[6, 9, 6, 1], [1, 2, 8, 7], [3, 5, 6, 3], [5, 3, 5, 8], [8, 2, 8, 1]]))\nThe function should raise the exception for: ValueError: If high <= low\nThe function should output with:\n    int: The sum of products of all possible number pairs within the generated matrix.\n    np.array: The generated matrix.\nYou should write self-contained code starting with:\n```\nfrom functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n```",
        "gt": "from functools import reduce\nfrom itertools import combinations\nimport numpy as np\ndef task_func(shape=(3, 3), low=1, high=10, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    if high <= low:\n        raise ValueError(\"The 'high' parameter must be greater than 'low'.\")\n\n    matrix = np.random.randint(low, high, shape)\n    values = matrix.flatten()\n\n    all_pairs = list(combinations(values, 2))\n\n    sum_of_products = reduce(lambda a, b: a + b, [np.prod(pair) for pair in all_pairs])\n\n    return sum_of_products, matrix",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def _calculate_sum_of_product_pairs(self, matrix):\n        values = matrix.flatten()\n        all_pairs = list(combinations(values, 2))\n        sum_of_products = reduce(lambda a, b: a + b, [np.prod(pair) for pair in all_pairs])\n        return sum_of_products\n    def test_case_1(self):\n        # Testing with default parameters\n        result, matrix = task_func(seed=1)\n        self.assertAlmostEqual(result, self._calculate_sum_of_product_pairs(matrix))\n    def test_case_2(self):\n        # Testing with a specific seed for reproducibility\n        seed = 42\n        result1, matrix1 = task_func(seed=seed)\n        result2, matrix2 = task_func(seed=seed)\n        self.assertEqual(result1, result2)\n        self.assertEqual(list(matrix1.flatten()), list(matrix2.flatten()))\n    def test_case_3(self):\n        # Testing with a different matrix shape\n        shape = (4, 4)\n        result, matrix = task_func(shape=shape, seed=1)\n        self.assertAlmostEqual(result, self._calculate_sum_of_product_pairs(matrix))\n    def test_case_4(self):\n        # Testing with different number ranges\n        low, high = 10, 20\n        result, matrix = task_func(low=low, high=high, seed=12)\n        val = matrix.flatten()\n        self.assertTrue(((val >= low) & (val < high)).all())\n        self.assertAlmostEqual(result, self._calculate_sum_of_product_pairs(matrix))\n    def test_case_5(self):\n        # Testing the scenario where the random number range is invalid (high <= low)\n        with self.assertRaises(ValueError):\n            task_func(low=5, high=5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Introduces a delay of 'delay_time' seconds in a specified number of separate threads and returns the thread completion messages. >>> task_func(1, 10) ['Delay in thread 0 completed', 'Delay in thread 1 completed', 'Delay in thread 2 completed', 'Delay in thread 3 completed', 'Delay in thread 4 completed', 'Delay in thread 5 completed', 'Delay in thread 6 completed', 'Delay in thread 7 completed', 'Delay in thread 8 completed', 'Delay in thread 9 completed']\nThe function should output with:\n    list: A list of strings containing the completion messages of the threads.\n    The completion message looks as follow:\n    'Delay in thread x completed'\nYou should write self-contained code starting with:\n```\nimport time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n```",
        "gt": "import time\nimport threading\ndef task_func(delay_time: float = 1.0, num_threads: int = 5):\n\n    results = []\n\n    def delay():\n        time.sleep(delay_time)\n        results.append(f'Delay in thread {threading.current_thread().name} completed')\n\n    for i in range(num_threads):\n        t = threading.Thread(target=delay, name=str(i))\n        t.start()\n        t.join()  # Ensure that the thread completes before moving to the next\n\n    return results",
        "test": "import unittest\nfrom faker import Faker\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        start = time.time()\n        result = task_func()\n        end = time.time()\n        exec_time = end - start\n        self.assertAlmostEqual(exec_time, 5, places=0)\n        self.assertEqual(len(result), 5)\n    def test_case_2(self):\n        start = time.time()\n        result = task_func(0.2, 1)\n        end = time.time()\n        exec_time = end - start\n        self.assertAlmostEqual(exec_time, 0.2, places=1)\n        self.assertEqual(len(result), 1)\n    def test_case_3(self):\n        delay = 0.1\n        threads = 10\n        start = time.time()\n        result = task_func(delay, threads)\n        end = time.time()\n        exec_time = end - start\n        self.assertAlmostEqual(exec_time, delay*threads, places=0)\n        self.assertEqual(len(result), 10)\n    def test_case_4(self):\n        result = task_func(num_threads=0)\n        self.assertEqual(len(result), 0)\n    def test_case_5(self):\n        'test for exact return string'\n        fake = Faker()\n        num_threads = fake.random_int(min=1, max=20)\n        result = task_func(num_threads=num_threads)\n        self.assertEqual(len(result), num_threads)\n        for i in range(num_threads):\n            self.assertIn(f'Delay in thread {i} completed', result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a nested list of menu items, this function flattens the list and returns a Pandas DataFrame detailing the count of each individual menu item with index name 'MenuItem'.\nThe function should output with:\n    DataFrame: A pandas DataFrame with menu items as indices and a 'Count' column showing the count of each menu item.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n```",
        "gt": "from collections import Counter\nimport pandas as pd\ndef task_func(list_of_menuitems):\n    # Flattening the list using list comprehension\n    flat_list = [item for sublist in list_of_menuitems for item in sublist]\n    counter = Counter(flat_list)\n\n    # Creating the DataFrame\n    df = pd.DataFrame.from_dict(counter, orient='index', columns=['Count'])\n    df.index.name = 'MenuItem'\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_normal_functionality(self):\n        \"\"\"Test the function with typical nested lists.\"\"\"\n        input_list = [['apple', 'banana'], ['apple'], ['banana', 'orange']]\n        expected_df = pd.DataFrame({'Count': [2, 2, 1]}, index=['apple', 'banana', 'orange'])\n        expected_df.index.name = 'MenuItem'\n        pd.testing.assert_frame_equal(task_func(input_list), expected_df)\n    def test_empty_list(self):\n        \"\"\"Test the function with an empty list.\"\"\"\n        expected_df = pd.DataFrame(columns=['Count'])\n        expected_df.index.name = 'MenuItem'\n        pd.testing.assert_frame_equal(task_func([]), expected_df)\n    def test_single_level_list(self):\n        \"\"\"Test with a non-nested, single-level list.\"\"\"\n        input_list = [['apple', 'banana', 'apple']]\n        expected_df = pd.DataFrame({'Count': [2, 1]}, index=['apple', 'banana'])\n        expected_df.index.name = 'MenuItem'\n        pd.testing.assert_frame_equal(task_func(input_list), expected_df)\n    def test_uniform_list(self):\n        \"\"\"Test with a list where all sublists contain the same item.\"\"\"\n        input_list = [['apple'], ['apple'], ['apple']]\n        expected_df = pd.DataFrame({'Count': [3]}, index=['apple'])\n        expected_df.index.name = 'MenuItem'\n        pd.testing.assert_frame_equal(task_func(input_list), expected_df)\n    def test_duplicate_items_across_sublists(self):\n        \"\"\"Ensure items appearing in multiple sublists are counted correctly.\"\"\"\n        input_list = [['apple', 'banana'], ['banana', 'banana', 'apple']]\n        expected_df = pd.DataFrame({'Count': [2, 3]}, index=['apple', 'banana'])\n        expected_df.index.name = 'MenuItem'\n        pd.testing.assert_frame_equal(task_func(input_list), expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find all combinations of columns from a given DataFrame so that the absolute correlation between them is greater than a certain threshold.\nThe function should output with:\n    corr_combinations (list): A list of tuples where each tuple contains two column names.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom itertools import combinations\n# Constants\nMIN_PERCENTAGE = 0.75\ndef task_func(data, cols, percentage):\n```",
        "gt": "import pandas as pd\nfrom itertools import combinations\n# Constants\nMIN_PERCENTAGE = 0.75\ndef task_func(data, cols, percentage):\n    if not 0 <= percentage <= 1:\n        raise ValueError('Percentage must be between 0 and 1')\n    df = pd.DataFrame(data, columns=cols)\n    corr_matrix = df.corr().abs()\n    columns = corr_matrix.columns\n    corr_combinations = []\n\n    for col1, col2 in combinations(columns, 2):\n        if corr_matrix.loc[col1, col2] > percentage:\n            corr_combinations.append((col1, col2))\n\n    return corr_combinations",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func([[5.1, 5.0, 1.4], [4.9, 4.8, 1.4], [4.7, 4.6, 2.0]], ['x', 'y', 'z'], 0.9), [('x', 'y')])\n    def test_case_2(self):\n        self.assertEqual(task_func([[5.1, 5.0, 1.4], [4.9, 4.8, 1.4], [4.7, 4.6, 2.0]], ['x', 'y', 'z'], 0.5), [('x', 'y'), ('x', 'z'), ('y', 'z')])\n    def test_case_3(self):\n        self.assertEqual(task_func([[5.1, 5.0, 1.4], [4.9, 4.8, 1.4], [4.7, 4.6, 2.0]], ['x', 'y', 'z'], 0.1), [('x', 'y'), ('x', 'z'), ('y', 'z')])\n    def test_case_4(self):\n        self.assertEqual(task_func([[5.1, 5.0, 1.4], [4.9, 4.8, 1.4], [4.7, 4.6, 2.0]], ['x', 'y', 'z'], 0.0), [('x', 'y'), ('x', 'z'), ('y', 'z')])\n    def test_case_5(self):\n        self.assertEqual(task_func([[5.1, 5.0, 1.4], [4.9, 4.8, 1.4], [4.7, 4.6, 2.0]], ['x', 'y', 'z'], 1.0), [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a normal distribution using a 1000 samples, indicating the mean and standard deviation with a color bar.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object of the plotted distribution.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\ndef task_func(mu, sigma, seed=0):\n    # Set the random seed\n    np.random.seed(seed)\n    # Generate samples from the normal distribution\n    samples = np.random.normal(mu, sigma, 1000)\n\n    # Generate a KDE plot\n    mappable = sns.kdeplot(samples, fill=True)\n\n    # Add a colorbar to the plot\n    plt.colorbar(mappable=mappable.collections[0])\n\n    return mappable",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ax = task_func(0, 1)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.collections) > 0, \"The plot should have data.\")\n        # Check if the colorbar is present\n        self.assertTrue(ax.get_figure().colorbar is not None)\n        \n    def test_case_2(self):\n        ax = task_func(2, 0.5)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.collections) > 0, \"The plot should have data.\")\n        # Test the KDE plot data\n        self.assertTrue(len(ax.collections[0].get_offsets()) > 0)\n        \n    def test_case_3(self):\n        ax = task_func(-2, 2)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.collections) > 0, \"The plot should have data.\")\n        \n    def test_case_4(self):\n        ax = task_func(5, 0.1)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.collections) > 0, \"The plot should have data.\")\n        \n    def test_case_5(self):\n        ax = task_func(-5, 5)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(len(ax.collections) > 0, \"The plot should have data.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract names from a string that aren't enclosed by square brackets, tokenize the names into words, and count the frequency of each word. Finally, fit a mixture of num_gaussians 1-D Gaussian distributions to the word frequencies and return the means and variances of the fitted Gaussians.\nThe function should raise the exception for: ValueError: If num_gaussians is less than or equal to 0. Exception: If num_gaussians is greater than the number of unique words.\nThe function should output with:\n    dict: A dictionary with the frequency of each word.\nYou should write self-contained code starting with:\n```\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n```",
        "gt": "import re\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.mixture import GaussianMixture\ndef task_func(text, num_gaussians=1, seed=42):\n    np.random.seed(seed)\n    names = re.findall(r'(.*?)(?:\\[.*?\\]|$)', text)\n    words = ' '.join(names).split()\n    word_freqs = Counter(words)\n    if num_gaussians <= 0:\n        raise ValueError('Number of Gaussians must be greater than 0.')\n    if len(word_freqs) < num_gaussians:\n        raise Exception('Number of Gaussians must be less than or equal to the number of unique words.')\n\n    mixture = GaussianMixture(n_components=num_gaussians)\n    mixture.fit([[freq] for freq in word_freqs.values()])\n    means = mixture.means_\n    return dict(word_freqs), means",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        text = \"John Doe [1234 Elm St, Springfield, IL 12345]Jane Smith [5678 Maple Dr, Anytown, CA 67890]\"\n        result, _ = task_func(text)\n        expected = {'John': 1, 'Doe': 1, 'Jane': 1, 'Smith': 1}\n        self.assertDictEqual(result, expected)\n    def test_case_2(self):\n        text = \"Alice [7890 Oak Ln, Someplace, TX 23456]Bob Charlie Bob [2345 Birch Rd, Otherplace, NY 34567]\"\n        result, means = task_func(text, 2)\n        expected = {'Alice': 1, 'Bob': 2, 'Charlie': 1}\n        self.assertDictEqual(result, expected)\n        self.assertAlmostEquals(means[0][0], 2.00, places=2)\n        self.assertAlmostEquals(means[1][0], 1.00, places=2)\n    def test_case_3(self):\n        text = \"Eve [3456 Cedar St, Thisplace, WA 45678]\"\n        self.assertRaises(Exception, task_func, text)\n    def test_case_4(self):\n        text = \"Frank Grace Holly [4567 Pine Pl, Thatplace, NV 56789]\"\n        result, _ = task_func(text)\n        expected = {'Frank': 1, 'Grace': 1, 'Holly': 1}\n        self.assertDictEqual(result, expected)\n    def test_case_5(self):\n        text = \"Ivy Jack [5678 Spruce Way, Hereplace, ME 67890]Katherine [6789 Fir Blvd, Thereplace, VT 78901]Leo\"\n        result, _ = task_func(text)\n        expected = {'Ivy': 1, 'Jack': 1, 'Katherine': 1, 'Leo': 1}\n        self.assertDictEqual(result, expected)\n        # Long test case\n        long_text = \"Antony [2345 Elm St, Thiscity, CA 34567]Barbara [3456 Oak Dr, Thatcity, NY 45678]\" + \\\n                    \"Barbara [4567 Maple Ave, Othercity, TX 56789]Diana [5678 Birch Rd, Newcity, WA 67890]\" + \\\n                    \"Edward [6789 Cedar Ln, Oldcity, NV 78901]Antony [7890 Pine St, Anytown, ME 89012]\" + \\\n                    \"George [8901 Spruce Dr, Someplace, VT 90123]Helen [9012 Fir Ave, Anywhere, MD 01234]\" + \\\n                    \"Ian [0123 Elm Blvd, Nowhere, WI 12345]Jessica [1234 Oak Way, Everywhere, IL 23456]\" + \\\n                    \"Kevin [2345 Maple Pl, Somewhere, CA 34567]Laura [3456 Birch St, Thisplace, NY 45678]\" + \\\n                    \"Michael [4567 Cedar Dr, Thatplace, TX 56789]Barbara [5678 Pine Ave, Otherplace, WA 67890]\" + \\\n                    \"Oliver [6789 Spruce Rd, Newplace, NV 78901]Patricia [7890 Fir St, Oldplace, ME 89012]\" + \\\n                    \"Quentin [8901 Elm Dr, Anyplace, VT 90123]Rachel [9012 Oak Ln, Somecity, MD 01234]\" + \\\n                    \"Samuel [0123 Maple Dr, Thatcity, WI 12345]Antony [1234 Birch St, Othercity, IL 23456]\" + \\\n                    \"Ursula [2345 Cedar Ave, Newcity, CA 34567]Victor [3456 Pine Rd, Oldcity, NY 45678]\" + \\\n                    \"Wendy [4567 Spruce St, Anytown, TX 56789]John [5678 Fir Dr, Someplace, WA 67890]\" + \\\n                    \"Zachary [6789 Elm Way, Anywhere, NV 78901]Zachary [7890 Oak Pl, Nowhere, ME 89012]\"\n        result, means = task_func(long_text, 2)\n        self.assertAlmostEquals(means[0][0], 1.05, places=2)\n        self.assertAlmostEquals(means[1][0], 3.00, places=2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the sub-sequence of a dictionary, x, with the minimum total length, where the keys are letters and the values are their lengths.\nThe function should output with:\n    list: The subsequence with the minimum total length.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport math\ndef task_func(x):\n```",
        "gt": "import itertools\nimport math\ndef task_func(x):\n    min_length = math.inf\n    min_subseq = []\n\n    for r in range(1, len(x) + 1):\n        for subseq in itertools.combinations(x.items(), r):\n            length = sum(length for letter, length in subseq)\n            if length < min_length:\n                min_length = length\n                min_subseq = [letter for letter, length in subseq]\n\n    return min_subseq",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3}), ['a'])\n    def test_case_2(self):\n        self.assertEqual(sorted(task_func({'a': 1, 'b': -2, 'c': -5, 'd': 4})), sorted(['b', 'c']))\n    def test_case_3(self):\n        self.assertEqual(task_func({'a': 1, 'b': 2, 'c': 3, 'd': 4}), ['a'])\n    def test_case_4(self):\n        self.assertEqual(sorted(task_func({'a': -1, 'b': 2, 'c': 3, 'd': 4, 'e': -5})), sorted(['a', 'e']))\n    def test_case_5(self):\n        self.assertEqual(sorted(task_func({'a': -1, 'b': -2, 'c': -3, 'd': 4, 'e': 5})), sorted(['a', 'b', 'c']))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the skewness of the last column of the dataframe.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame or has no columns.\nThe function should output with:\n    float: The skewness of the last column of the dataframe.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom scipy.stats import skew\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty pandas DataFrame.\")\n\n    last_col = df.columns[-1]\n    skewness = skew(df[last_col].dropna())  # dropna() to handle NaN values\n\n    return skewness",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd \nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n        self.df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n    def test_skewness_calculation(self):\n        skewness = task_func(self.df)\n        # print(skewness)\n        self.assertIsInstance(skewness, float)\n        self.assertAlmostEqual(-0.1670862308059806, skewness)\n    def test_invalid_input_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_with_nan_values(self):\n        self.df.iloc[::10, -1] = np.nan\n        skewness = task_func(self.df)\n        self.assertIsInstance(skewness, float)\n    def test_single_column_df(self):\n        df_single_col = pd.DataFrame(self.df.iloc[:, 0])\n        skewness = task_func(df_single_col)\n        self.assertIsInstance(skewness, float)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract all string representations of dictionaries from a text file using regular expressions and convert them to Python dictionaries. >>> f_1008(\"another_sample.txt\") [{'name': 'John', 'age': 30}, {'name': 'Jane', 'age': 25}]\nThe function should output with:\n    list: A list of dictionaries. Each dictionary is parsed from the text file using regular expressions.\nYou should write self-contained code starting with:\n```\nimport ast\nimport re\ndef task_func(text_file: str) -> list:\n```",
        "gt": "import ast\nimport re\ndef task_func(text_file: str) -> list:\n    with open(text_file, 'r') as file:\n        text = file.read()\n\n    # Updated regex pattern to handle nested dictionaries more robustly\n    pattern = re.compile(r\"\\{[^{}]*\\{[^{}]*\\}[^{}]*\\}|\\{[^{}]*\\}\")\n    matches = pattern.findall(text)\n\n    results = [ast.literal_eval(match) for match in matches]\n\n    return results",
        "test": "import unittest\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'testdir_task_func'\n        os.makedirs(self.test_dir, exist_ok=True)\n        \n        f = open(self.test_dir+\"/sample.txt\",\"w\")\n        f.write(\"{'key1': 'value1'}\\n{'key2': 'value2'}\")\n        f.close()\n        f = open(self.test_dir+\"/another_sample.txt\",\"w\")\n        f.write(\"{'name': 'John', 'age': 30}\\n{'name': 'Jane', 'age': 25}\")\n        f.close()\n        f = open(self.test_dir+\"/nested_dicts.txt\",\"w\")\n        f.write(\"{'outer': {'inner': 'value'}}\")\n        f.close()\n        f = open(self.test_dir+\"/empty.txt\",\"w\")\n        f.close()\n        \n        \n        f = open(self.test_dir+\"/no_dicts.txt\",\"w\")\n        f.close()\n        \n    def tearDown(self):\n        # Clean up the test directory\n        shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        result = task_func(self.test_dir+\"/sample.txt\")\n        self.assertEqual(len(result), 2)\n        self.assertEqual(result[0], {'key1': 'value1'})\n        self.assertEqual(result[1], {'key2': 'value2'})\n    def test_case_2(self):\n        result = task_func(self.test_dir+\"/another_sample.txt\")\n        self.assertEqual(len(result), 2)\n        self.assertEqual(result[0], {'name': 'John', 'age': 30})\n        self.assertEqual(result[1], {'name': 'Jane', 'age': 25})\n    def test_case_3(self):\n        result = task_func(self.test_dir+\"/empty.txt\")\n        self.assertEqual(len(result), 0)\n    def test_case_4(self):\n        result = task_func(self.test_dir+\"/no_dicts.txt\")\n        self.assertEqual(len(result), 0)\n    def test_case_5(self):\n        result = task_func(self.test_dir+\"/nested_dicts.txt\")\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0], {'outer': {'inner': 'value'}})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a list of pandas DataFrames, each created from a sublist in 'list_of_lists'. Each DataFrame has columns named as per the elements of the sublist, and each column is filled with randomly shuffled values from 'POSSIBLE_VALUES'.\nNote that: The length of each DataFrame's columns is equal to the length of 'POSSIBLE_VALUES'. Each column in the DataFrame has the same shuffled order of 'POSSIBLE_VALUES'.\nThe function should output with:\n    list of pandas.DataFrame: A list where each element is a DataFrame with columns as specified\n    in 'list_of_lists', and each column contains shuffled values from 'POSSIBLE_VALUES'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom random import shuffle\n# Constants\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n```",
        "gt": "import pandas as pd\nfrom random import shuffle\n# Constants\nPOSSIBLE_VALUES = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\ndef task_func(list_of_lists):\n    dataframes = []\n\n    for list_ in list_of_lists:\n        df_dict = {col: POSSIBLE_VALUES.copy() for col in list_}\n        for col in df_dict:\n            shuffle(df_dict[col])\n        df = pd.DataFrame(df_dict)\n        dataframes.append(df)\n\n    return dataframes",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func function.\"\"\"\n    def test_dataframe_count(self):\n        \"\"\"Test number of dataframes returned.\"\"\"\n        random.seed(0)\n        input_data = [[\"x\", \"y\"], [\"a\", \"b\", \"c\"], [\"m\"]]\n        dfs = task_func(input_data)\n        self.assertEqual(len(dfs), len(input_data))\n    def test_dataframe_columns(self):\n        \"\"\"Test each dataframe has correct columns.\"\"\"\n        random.seed(1)\n        input_data = [[\"x\", \"y\"], [\"a\", \"b\", \"c\"], [\"m\"]]\n        dfs = task_func(input_data)\n        for idx, df in enumerate(dfs):\n            self.assertListEqual(list(df.columns), input_data[idx])\n    def test_dataframe_values(self):\n        \"\"\"Test values in each dataframe column are from the POSSIBLE_VALUES list.\"\"\"\n        random.seed(2)\n        input_data = [[\"x\", \"y\"], [\"a\", \"b\", \"c\"], [\"m\"]]\n        dfs = task_func(input_data)\n        for df in dfs:\n            for col in df.columns:\n                self.assertTrue(all(val in POSSIBLE_VALUES for val in df[col].values))\n    def test_empty_input(self):\n        \"\"\"Test function with an empty list of lists.\"\"\"\n        random.seed(3)\n        dfs = task_func([])\n        self.assertEqual(len(dfs), 0)\n    def test_single_list_input(self):\n        \"\"\"Test function with a single list input.\"\"\"\n        random.seed(4)\n        input_data = [[\"x\", \"y\", \"z\"]]\n        dfs = task_func(input_data)\n        self.assertEqual(len(dfs), 1)\n        self.assertListEqual(list(dfs[0].columns), input_data[0])\n        self.assertTrue(all(val in POSSIBLE_VALUES for val in dfs[0][\"x\"].values))\n        self.assertTrue(all(val in POSSIBLE_VALUES for val in dfs[0][\"y\"].values))\n        self.assertTrue(all(val in POSSIBLE_VALUES for val in dfs[0][\"z\"].values))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Performs the following operations on the input dictionary 'data_dict': 1. Adds a key \"a\" with a value of 1. 2. Conducts statistical analysis on its values (mean, median, mode), by rounding the mean to 2 decimal places. 3. Normalizes the values using MinMaxScaler to a range of (0, 1). 4. Plots a histogram of the normalized values, with the title \"Histogram of Normalized Values\", and x labels \"Value\" and y labels \"Frequency\".\nThe function should output with:\n    tuple: A tuple containing:\n    dict: The processed dictionary with key \"a\" added.\n    dict: A dictionary containing statistical properties (mean, median, mode).\n    matplotlib.axes.Axes: The histogram plot of normalized values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\ndef task_func(data_dict):\n    # Constants\n    SCALER_RANGE = (0, 1)\n\n    # Add the key 'a' with value 1\n    data_dict.update(dict(a=1))\n\n    # Convert the values to a numpy array\n    values = np.array(list(data_dict.values()))\n\n    # Perform statistical analysis\n    mean = round(np.mean(values), 2)\n    median = np.median(values)\n    mode_value, _ = stats.mode(values)\n\n    # Normalize the values\n    scaler = MinMaxScaler(feature_range=SCALER_RANGE)\n    normalized_values = scaler.fit_transform(values.reshape(-1, 1))\n\n    # Plot a histogram of the normalized values\n    fig, ax = plt.subplots()\n    ax.hist(normalized_values, bins=10, edgecolor='black')\n    ax.set_title(\"Histogram of Normalized Values\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    return data_dict, {\"mean\": mean, \"median\": median, \"mode\": mode_value}, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data_dict = {'key1': 2, 'key2': 4}\n        modified_data, stats, plot = task_func(data_dict)\n        self.assertEqual(modified_data, {'key1': 2, 'key2': 4, 'a': 1})\n        self.assertEqual(stats['mean'], 2.33)\n        self.assertEqual(stats['median'], 2.0)\n        self.assertEqual(stats['mode'], 1)\n        self.assertEqual(plot.get_title(), \"Histogram of Normalized Values\")\n        self.assertEqual(plot.get_xlabel(), \"Value\")\n        self.assertEqual(plot.get_ylabel(), \"Frequency\")\n    def test_case_2(self):\n        data_dict = {}\n        modified_data, stats, plot = task_func(data_dict)\n        self.assertEqual(modified_data, {'a': 1})\n        self.assertEqual(stats['mean'], 1.0)\n        self.assertEqual(stats['median'], 1.0)\n        self.assertEqual(stats['mode'], 1)\n        \n    def test_case_3(self):\n        data_dict = {'key1': 10, 'key2': 20, 'key3': 30}\n        modified_data, stats, plot = task_func(data_dict)\n        self.assertEqual(stats['mean'], 15.25)\n        self.assertEqual(stats['median'], 15.0)\n        self.assertEqual(stats['mode'], 1)\n        \n    def test_case_4(self):\n        data_dict = {'key1': -5, 'key2': -10}\n        modified_data, stats, plot = task_func(data_dict)\n        self.assertEqual(stats['mean'], -4.67)\n        self.assertEqual(stats['median'], -5.0)\n        self.assertEqual(stats['mode'], -10)\n        \n    def test_case_5(self):\n        data_dict = {'key1': 0, 'key2': 0, 'key3': 0, 'key4': 0}\n        modified_data, stats, plot = task_func(data_dict)\n        self.assertEqual(stats['mean'], 0.2)\n        self.assertEqual(stats['median'], 0.0)\n        self.assertEqual(stats['mode'], 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a password that mirrors the structure of the given text by replacing alphabetic characters with random ascii lowercase letters, digits with random single-digit numbers, spaces wth either a random digit or random lowercase letter at equal probabilities, and leaving other characters unchanged.\nNote that: This function does not handle high Unicode characters and focuses only on ASCII values.\nThe function should raise the exception for: ValueError: If the input text is empty.\nThe function should output with:\n    str: The generated password.\nYou should write self-contained code starting with:\n```\nimport string\nimport random\ndef task_func(text, seed=None):\n```",
        "gt": "import string\nimport random\ndef task_func(text, seed=None):\n    if seed is not None:\n        random.seed(seed)\n    if not text:\n        raise ValueError(\"text cannot be empty.\")\n    password = \"\"\n    for char in text:\n        random_lowercase = random.choice(string.ascii_lowercase)\n        random_digit = random.choice(string.digits)\n        if char.isalpha():\n            password += random_lowercase\n        elif char.isdigit():\n            password += random_digit\n        elif char == \" \":\n            if random.random() < 0.5:\n                password += random_lowercase\n            else:\n                password += random_digit\n        else:\n            password += char\n    return password",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        result = task_func(\"Hello123\", seed=1)\n        self.assertEqual(len(result), 8)\n        for i, char in enumerate(\"Hello123\"):\n            if char.isalpha():\n                self.assertTrue(result[i].isalpha())\n            elif char.isdigit():\n                self.assertTrue(result[i].isdigit())\n    def test_case_2(self):\n        # Test basic case with alphabet only\n        result = task_func(\"ABC\", seed=2)\n        self.assertEqual(len(result), 3)\n        self.assertTrue(all(char.isalpha() for char in result))\n    def test_case_3(self):\n        # Test basic case with digit only\n        result = task_func(\"123\", seed=3)\n        self.assertEqual(len(result), 3)\n        self.assertTrue(all(char.isdigit() for char in result))\n    def test_case_4(self):\n        # Test basic case with whitespace, alphabet, number, special char\n        text = \"Hello, world!\"\n        result = task_func(text, seed=4)\n        self.assertEqual(len(result), 13)\n        for i, char in enumerate(text):\n            result_char = result[i]\n            if char.isalpha():\n                self.assertTrue(result_char.isalpha())\n            elif char.isdigit():\n                self.assertTrue(result_char.isdigit())\n            elif char == \" \":\n                self.assertTrue(result_char.isalnum())\n            else:\n                self.assertEqual(result[i], char)\n    def test_case_5(self):\n        # Test handling empty string\n        with self.assertRaises(Exception):\n            task_func(\"\", seed=5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Execute a specified python code with a given timeout. If the script execution exceeds the timeout, it is terminated. >>> task_func('/pathto/LongRunningScript.py', 30) 'Terminating process due to timeout.' Raise: - The code will raise FileNotFoundError if the file is not exist.\nNote that: If the script was terminated due to timeout it will return \"Script executed successfully.\", otherwise \"Terminating process due to timeout.\"\nThe function should output with:\n    str: A message indicating if the code was terminated due to timeout or executed successfully. The message is either \"Script executed successfully.\" or \"Terminating process due to timeout.\"\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n```",
        "gt": "import subprocess\nimport os\nimport threading\ndef task_func(script_path: str, timeout: int = 60) -> str:\n    def target():\n        subprocess.call(['python', script_path])\n\n    thread = threading.Thread(target=target)\n    thread.start()\n\n    thread.join(timeout)\n\n    if thread.is_alive():\n        os.system(f'pkill -f \"{script_path}\"')\n        thread.join()\n        return 'Terminating process due to timeout.'\n    else:\n        return 'Script executed successfully.'",
        "test": "import unittest\nfrom unittest.mock import patch\nimport time\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'testdir_task_func'\n        os.makedirs(self.test_dir, exist_ok=True)\n        f = open(self.test_dir+\"/script4.py\",\"w\")\n        f.write(\"print('Hello from script4')\")\n        f.close()\n        f = open(self.test_dir+\"/script1.py\",\"w\")\n        f.write(\"import time\\ntime.sleep(10)\\nprint('waiting')\")\n        f.close()\n        f = open(self.test_dir+\"/script2.py\",\"w\")\n        f.close()\n        f = open(self.test_dir+\"/script3.py\",\"w\")\n        f.write(\"import time\\ntime.sleep(62)\\nprint('waiting')\")\n        f.close()\n        \n        self.temp_dir = 'testdir_f_947/temp_dir'\n        os.makedirs(self.temp_dir, exist_ok=True)\n        \n    def tearDown(self):\n        # Clean up the test directory\n        shutil.rmtree(self.test_dir)\n    \n    @patch('subprocess.call', return_value=None)\n    def test_case_1(self, mock_subprocess):\n        # Test with a short-running script\n        result = task_func('/path/to/short_script.py', 10)\n        self.assertEqual(result, 'Script executed successfully.')\n    \n    def test_case_2(self):\n        # Test with a long-running script and short timeout\n        result = task_func(self.test_dir+\"/script1.py\", 3)\n        self.assertEqual(result, 'Terminating process due to timeout.')\n    @patch('subprocess.call', return_value=None)\n    def test_case_3(self, mock_subprocess):\n        # Test default timeout behavior\n        result = task_func('/path/to/short_script.py')\n        self.assertEqual(result, 'Script executed successfully.')\n    def test_case_4(self):\n        # Test with a long-running script and long timeout\n        result = task_func(self.test_dir+\"/script1.py\", 20)\n        self.assertEqual(result, 'Script executed successfully.')\n    def test_case_5(self):\n        # Test with a long-running script and default timeout\n        result = task_func(self.test_dir+\"/script3.py\")\n        self.assertEqual(result, 'Terminating process due to timeout.')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the files with filenames that contain \"like\" or \"what\" in a directory, create a new subdirectory called \"Interesting Files\" and move those files to the new subdirectory.\nThe function should output with:\n    List of files moved\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(directory):\n```",
        "gt": "import re\nimport os\nimport shutil\ndef task_func(directory):\n    pattern = re.compile(r'(like|what)', re.IGNORECASE)\n    interesting_files = [file for file in os.listdir(directory) if pattern.search(file)]\n\n    if not os.path.exists(os.path.join(directory, 'Interesting Files')):\n        os.mkdir(os.path.join(directory, 'Interesting Files'))\n\n    for file in interesting_files:\n        shutil.move(os.path.join(directory, file), os.path.join(directory, 'Interesting Files'))\n\n    return interesting_files",
        "test": "import doctest\nimport unittest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a clean test environment before each test\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.test_directory = f\"{self.base_tmp_dir}/test\"\n        if not os.path.exists(self.test_directory):\n            os.makedirs(self.test_directory)\n        self.test_files = [\n            \"file_with_like.txt\",\n            \"another_file_with_what.doc\",\n            \"file_without_keywords.jpg\",\n            \"LIKE_in_caps.pdf\",\n            \"hidden_what_in_name.whatever\",\n            \"no_keyword.png\"\n        ]\n        for file in self.test_files:\n            with open(os.path.join(self.test_directory, file), 'w') as f:\n                f.write(\"Dummy content for testing.\")\n        if os.path.exists(os.path.join(self.test_directory, \"Interesting Files\")):\n            shutil.rmtree(os.path.join(self.test_directory, \"Interesting Files\"))\n    def tearDown(self):\n        if os.path.exists(self.test_directory):\n            shutil.rmtree(self.test_directory)\n    def test_caae_1(self):\n        \"\"\"Test if only files with 'like' or 'what' in their names are moved.\"\"\"\n        expected_files = [\"file_with_like.txt\", \"another_file_with_what.doc\", \"LIKE_in_caps.pdf\", \"hidden_what_in_name.whatever\"]\n        moved_files = task_func(self.test_directory)\n        self.assertCountEqual(moved_files, expected_files)\n    def test_caae_2(self):\n        \"\"\"Test if 'Interesting Files' directory is created.\"\"\"\n        task_func(self.test_directory)\n        self.assertTrue(os.path.exists(os.path.join(self.test_directory, \"Interesting Files\")))\n    def test_caae_3(self):\n        \"\"\"Test that files without 'like' or 'what' in their names are not moved.\"\"\"\n        task_func(self.test_directory)\n        remaining_files = os.listdir(self.test_directory)\n        expected_remaining = [\"file_without_keywords.jpg\", \"no_keyword.png\"]\n        self.assertCountEqual(remaining_files, expected_remaining + [\"Interesting Files\"])\n    def test_caae_4(self):\n        \"\"\"Test the case insensitivity of the keyword matching.\"\"\"\n        expected_files = [\"LIKE_in_caps.pdf\"]\n        moved_files = task_func(self.test_directory)\n        self.assertIn(\"LIKE_in_caps.pdf\", moved_files)\n    def test_caae_5(self):\n        \"\"\"Test the function with an empty directory (should handle gracefully).\"\"\"\n        empty_dir = os.path.join(self.test_directory, \"empty_dir\")\n        os.makedirs(empty_dir, exist_ok=True)\n        result = task_func(empty_dir)\n        self.assertEqual(result, [])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a bar chart to visualize the frequency of each letter in a flattened list formed by multiple repetitions of the original list. Each repetition of the list is associated with a different color in the chart.\nNote that: Generate a bar chart for the frequency of letters, where each letter's frequency is determined by its number of repetitions. Each letter's bar in the chart is colored according to the specified color. The length of the list `colors` should match the number of repetitions of `letters`. The lists 'letters' and 'colors' cannot be empty.\nThe function should raise the exception for: ValueError: If the lengths of the input lists do not match or if any list is empty.\nThe function should output with:\n    Returns the Matplotlib Axes object representing the created bar chart, with the x-axis labeled 'Letters', y-axis labeled 'Frequency', and title 'Frequency of Letters'.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(letters, repetitions, colors):\n    if len(letters) != len(repetitions) or len(letters) != len(colors) or len(letters) == 0:\n        raise ValueError(\"All lists must be the same length and non-empty.\")\n        \n    # Count the frequency of each letter based on repetitions\n    counts = np.array(repetitions)\n    \n    # Create the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(letters, counts, color=colors)\n    ax.set_xlabel('Letters')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Letters')\n    \n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_basic_input(self):\n        ax = task_func(['A', 'B', 'C'], [3, 5, 2], ['red', 'green', 'blue'])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Frequency of Letters\")\n        self.assertEqual(ax.get_xlabel(), \"Letters\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        expected_colors = ['red', 'green', 'blue']\n        for patch, expected_color in zip(ax.patches, expected_colors):\n            self.assertEqual(patch.get_facecolor(), plt.cm.colors.to_rgba(expected_color))\n        expected_counts = [3, 5, 2]\n        for patch, expected_count in zip(ax.patches, expected_counts):\n            self.assertEqual(patch.get_height(), expected_count)\n    \n    def test_invalid_input_length(self):\n        with self.assertRaises(ValueError):\n            task_func(['A', 'B'], [3], ['red', 'green'])\n    \n    def test_empty_lists(self):\n        with self.assertRaises(ValueError):\n            task_func([], [], [])\n    \n    def test_single_letter(self):\n        ax = task_func(['Z'], [1], ['purple'])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Frequency of Letters\")\n        self.assertEqual(ax.get_xlabel(), \"Letters\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        self.assertEqual(ax.patches[0].get_facecolor(), plt.cm.colors.to_rgba('purple'))\n        self.assertEqual(ax.patches[0].get_height(), 1)\n    \n    def test_multiple_repetitions(self):\n        ax = task_func(['D', 'E', 'F'], [10, 20, 15], ['cyan', 'magenta', 'yellow'])\n        self.assertIsInstance(ax, plt.Axes)\n        expected_counts = [10, 20, 15]\n        for patch, expected_count in zip(ax.patches, expected_counts):\n            self.assertEqual(patch.get_height(), expected_count)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Archives all processed files from a source directory to a target directory. The function identifies processed files by the '_processed' suffix in the filename.\nThe function should output with:\n    str: The path to the created archive.\nYou should write self-contained code starting with:\n```\nimport zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n```",
        "gt": "import zipfile\nimport os\nimport re\nimport shutil\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \n    # Create directories if they don't exist\n    os.makedirs(source_dir, exist_ok=True)\n    os.makedirs(target_dir, exist_ok=True)\n    \n    archive_path = os.path.join(target_dir, archive_name)\n    \n    with zipfile.ZipFile(archive_path, 'w') as archive:\n        for file in os.listdir(source_dir):\n            if re.search(r'_processed$', os.path.splitext(file)[0]):\n                archive.write(os.path.join(source_dir, file), arcname=file)\n                shutil.move(os.path.join(source_dir, file), target_dir)\n                \n    return archive_path",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup test directories\n        self.source_dir = 'task_func_data/'\n        self.target_dir = 'task_func_data_target/'\n        \n        # Remove any existing test directories to start fresh\n        if os.path.exists(self.source_dir):\n            shutil.rmtree(self.source_dir)\n        if os.path.exists(self.target_dir):\n            shutil.rmtree(self.target_dir)\n        # Create new test directories\n        os.makedirs(self.source_dir)\n        os.makedirs(self.target_dir)\n    def tearDown(self):\n        # Clean up test directories after each test case\n        if os.path.exists(self.source_dir):\n            shutil.rmtree(self.source_dir)\n        if os.path.exists(self.target_dir):\n            shutil.rmtree(self.target_dir)\n    \n    def test_case_1(self):\n        # Create some test files in the source directory, some with '_processed' suffix\n        test_files = ['file1.txt', 'file2_processed.txt']\n        for file in test_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write(f\"This is {file}\")\n        \n        # Archive processed files\n        archive_path = task_func(self.source_dir, self.target_dir)\n        \n        # Check if the archive contains the correct file\n        with zipfile.ZipFile(archive_path, 'r') as archive:\n            self.assertIn('file2_processed.txt', archive.namelist())\n            \n    def test_case_2(self):\n        # Create some test files in the source directory without '_processed' suffix\n        test_files = ['file1.txt', 'file3.txt']\n        for file in test_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write(f\"This is {file}\")\n        \n        # Archive processed files\n        archive_path = task_func(self.source_dir, self.target_dir)\n        \n        # Check if the archive is empty\n        with zipfile.ZipFile(archive_path, 'r') as archive:\n            self.assertEqual(len(archive.namelist()), 0)\n            \n    def test_case_3(self):\n        # Source directory is empty\n        archive_path = task_func(self.source_dir, self.target_dir)\n        \n        # Check if the archive is empty\n        with zipfile.ZipFile(archive_path, 'r') as archive:\n            self.assertEqual(len(archive.namelist()), 0)\n    def test_case_4(self):\n        # Create some test files in the source directory, some with '_processed' suffix\n        test_files = ['file1.txt', 'file2_processed.txt']\n        for file in test_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write(f\"This is {file}\")\n                \n        # Archive processed files with a custom archive name\n        custom_archive_name = 'custom_archive.zip'\n        archive_path = task_func(self.source_dir, self.target_dir, custom_archive_name)\n        \n        # Check if the custom archive name is used\n        self.assertTrue(custom_archive_name in archive_path)\n        \n    def test_case_5(self):\n        # Check the return value for correct archive path\n        archive_path = task_func(self.source_dir, self.target_dir)\n        expected_path = os.path.join(self.target_dir, 'archive.zip')\n        self.assertEqual(archive_path, expected_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a pandas DataFrame with random values based on lists 'a' and 'b', and plot it as a bar chart. List 'a' sets the DataFrame's row indices, while the length of list 'b' determines the number of columns using predefined names from the 'COLUMNS = ['A', 'B', 'C', 'D', 'E']' list. Data Structure: - Uses pandas DataFrame to structure the data.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\ndef task_func(a, b):\n    if not a or not b:  # Check if either list is empty\n        fig, ax = plt.subplots()  # Creates a blank plot\n        plt.close(fig)  # Close the plot window to prevent it from showing empty plots\n        return ax\n\n    # Use np.random.seed for reproducibility if needed\n    np.random.seed(0)\n    # Ensure column names from b are used only up to the length of b\n    selected_columns = COLUMNS[:len(b)]\n    df = pd.DataFrame(np.random.randn(len(a), len(b)), index=a, columns=selected_columns)\n    ax = df.plot(kind='bar')\n    plt.show()\n    return ax",
        "test": "import unittest\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_non_empty_lists(self):\n        \"\"\"Test with valid non-empty lists.\"\"\"\n        ax = task_func([1, 2, 3], ['A', 'B', 'C'])\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_empty_a_list(self):\n        \"\"\"Test with an empty 'a' list.\"\"\"\n        ax = task_func([], ['A', 'B', 'C'])\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_empty_b_list(self):\n        \"\"\"Test with an empty 'b' list.\"\"\"\n        ax = task_func([1, 2, 3], [])\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_both_lists_empty(self):\n        \"\"\"Test with both 'a' and 'b' lists empty.\"\"\"\n        ax = task_func([], [])\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n    def test_a_list_longer_than_columns(self):\n        \"\"\"Test with 'a' list having more elements than predefined columns.\"\"\"\n        ax = task_func([1, 2, 3, 4, 5, 6], ['A', 'B'])\n        self.assertIsInstance(ax, matplotlib.axes.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate an SQLite database to a given file path with random user data. The user data consists of a table named 'users' with columns: - id (integer): Used as Primary Key. numbering of entries starting at 0. - name (string): name of the user. sampled from 'users' - age (int): age of the user, where 20 <= age <= 60. - country (string): sampled from 'countries' The number of entries in the database is determined by num_entries. >>> path = task_func('test.db', num_entries=3, random_seed=2, users=['Simon', 'Albert']) >>> conn = sqlite3.connect('test.db') >>> c = conn.cursor() >>> c.execute(\"SELECT * FROM users\") >>> c.fetchall() [(1, 'Simon', 25, 'USA'), (2, 'Viola', 30, 'Canada'), (3, 'Viola', 58, 'UK')] >>> c.execute(\"PRAGMA table_info(users)\") >>> c.fetchall() [(0, 'id', 'INTEGER', 0, None, 1), (1, 'name', 'TEXT', 0, None, 0), (2, 'age', 'INTEGER', 0, None, 0), (3, 'country', 'TEXT', 0, None, 0)]\nThe function should output with:\n    str: The file path of the generated SQLite database.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport random\ndef task_func(db_path,\n          num_entries,\n          users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          random_seed=None):\n```",
        "gt": "import sqlite3\nimport random\ndef task_func(db_path,\n          num_entries,\n          users=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],\n          countries=['USA', 'UK', 'Canada', 'Australia', 'India'],\n          random_seed=None):\n    random.seed(random_seed)\n\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n\n    c.execute('''\n        CREATE TABLE users\n        (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, country TEXT)\n    ''')\n\n    for _ in range(num_entries):\n        user = random.choice(users)\n        age = random.randint(20, 60)\n        country = random.choice(countries)\n        c.execute('INSERT INTO users (name, age, country) VALUES (?, ?, ?)', (user, age, country))\n\n    conn.commit()\n    conn.close()\n\n    return db_path",
        "test": "import unittest\nimport sqlite3\nfrom faker import Faker\nimport os\nimport tempfile\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    default_users = ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\n    default_countries = ['USA', 'UK', 'Canada', 'Australia', 'India']\n    def setUp(self):\n        self.fake = Faker()\n        self.temp_dir = tempfile.mkdtemp()  # Create a temporary directory for our databases\n    def test_rng(self):\n        db_path1 = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\"))\n        output_path1 = task_func(db_path1, 45, random_seed=12)\n        db_path2 = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\"))\n        output_path2 = task_func(db_path2, 45, random_seed=12)\n        df1 = self._load_table_as_df(db_path=output_path1)\n        df2 = self._load_table_as_df(db_path=output_path2)\n        pd.testing.assert_frame_equal(df1, df2, check_dtype=False)\n    def test_case_1(self):\n        # Test with default users and 5 entries\n        db_path = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\"))\n        output_path = task_func(db_path, 5, random_seed=1)\n        self.assertEqual(db_path, output_path)\n        self.assertTrue(self._validate_db_structure(db_path))\n        self.assertEqual(self._get_db_entries_count(db_path), 5)\n        df = self._load_table_as_df(db_path=db_path)\n        self.assertTrue(set(df['name'].to_list()).issubset(self.default_users))\n        self.assertTrue(set(df['country'].to_list()).issubset(self.default_countries))\n        expected = pd.DataFrame({\n            'id': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5},\n            'name': {0: 'Bob', 1: 'Charlie', 2: 'Dave', 3: 'Bob', 4: 'Alice'},\n            'age': {0: 56, 1: 27, 2: 50, 3: 26, 4: 44},\n            'country': {0: 'USA',\n            1: 'Australia',\n            2: 'Australia',\n            3: 'Australia',\n            4: 'Australia'}\n        })\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False)\n    def test_case_2(self):\n        # Test with custom users and 10 entries\n        db_path = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\"))\n        custom_users = ['Simon', 'Albert', 'Viola', 'Lisa', 'Monica']\n        output_path = task_func(db_path, 10, custom_users, random_seed=2)\n        self.assertEqual(db_path, output_path)\n        self.assertTrue(self._validate_db_structure(db_path))\n        self.assertEqual(self._get_db_entries_count(db_path), 10)\n        df = self._load_table_as_df(db_path=db_path)\n        self.assertTrue(set(df['name'].to_list()).issubset(custom_users))\n        self.assertTrue(set(df['country'].to_list()).issubset(self.default_countries))\n        expected = pd.DataFrame({\n            'id': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10},\n            'name': {0: 'Simon',\n            1: 'Viola',\n            2: 'Viola',\n            3: 'Monica',\n            4: 'Albert',\n            5: 'Monica',\n            6: 'Lisa',\n            7: 'Simon',\n            8: 'Lisa',\n            9: 'Lisa'},\n            'age': {0: 25, 1: 30, 2: 58, 3: 22, 4: 47, 5: 43, 6: 52, 7: 21, 8: 40, 9: 53},\n            'country': {0: 'USA',\n            1: 'Canada',\n            2: 'UK',\n            3: 'India',\n            4: 'Australia',\n            5: 'India',\n            6: 'Canada',\n            7: 'Canada',\n            8: 'Australia',\n            9: 'UK'}\n        })\n        pd.testing.assert_frame_equal(df, expected, check_dtype=False)\n    def test_case_3(self):\n        # Test with 0 entries\n        db_path = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\"))\n        output_path = task_func(db_path, 0, random_seed=3)\n        self.assertEqual(db_path, output_path)\n        self.assertTrue(self._validate_db_structure(db_path))\n        self.assertEqual(self._get_db_entries_count(db_path), 0)\n    def test_case_4(self):\n        # Test with a large number of entries (1000 entries) and custom countries\n        db_path = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\"))\n        custom_countries = ['test', 'hi', 'abc']\n        output_path = task_func(db_path, 1000, countries=custom_countries, random_seed=4)\n        self.assertEqual(db_path, output_path)\n        self.assertTrue(self._validate_db_structure(db_path))\n        self.assertEqual(self._get_db_entries_count(db_path), 1000)\n        df = self._load_table_as_df(db_path=db_path)\n        self.assertTrue(set(df['country'].to_list()).issubset(custom_countries))\n        self.assertTrue(set(df['name'].to_list()).issubset(self.default_users))\n    def test_case_5(self):\n        # Test with special characters in file path and 15 entries\n        db_path = os.path.join(self.temp_dir, self.fake.file_name(extension=\"db\").replace(\"/\", \"//\"))\n        output_path = task_func(db_path, 15, random_seed=55)\n        self.assertEqual(db_path, output_path)\n        self.assertTrue(self._validate_db_structure(db_path))\n        self.assertEqual(self._get_db_entries_count(db_path), 15)\n        df = self._load_table_as_df(db_path=db_path)\n        self.assertTrue(set(df['name'].to_list()).issubset(self.default_users))\n    def _validate_db_structure(self, db_path):\n        \"\"\"Validate if the DB has the correct structure.\"\"\"\n        conn = sqlite3.connect(db_path)\n        c = conn.cursor()\n        c.execute(\"PRAGMA table_info(users)\")\n        columns = [column[1] for column in c.fetchall()]\n        conn.close()\n        expected_columns = ['id', 'name', 'age', 'country']\n        return set(columns) == set(expected_columns)\n    def _get_db_entries_count(self, db_path):\n        \"\"\"Return the number of entries in the DB.\"\"\"\n        conn = sqlite3.connect(db_path)\n        c = conn.cursor()\n        c.execute(\"SELECT COUNT(*) FROM users\")\n        count = c.fetchone()[0]\n        conn.close()\n        return count\n    \n    def _load_table_as_df(self, db_path):\n        \"\"\"return sql table as dataframe\"\"\"\n        conn = sqlite3.connect(db_path)\n        df = pd.read_sql_query(\"SELECT * FROM users\", conn)\n        return df",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace a random substring (a sequence of characters between two commas or at the beginning/end of the string) in a list of strings with a random string (comprising ascii lowercase characters) with the same length as the substituted characters.\nThe function should output with:\n    DataFrame: A pandas DataFrame with two columns - 'Original String' and 'Modified String'.\n    'Original String' contains the original strings from the input list, and 'Modified String'\n    contains the modified strings where a random substring has been replaced.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n```",
        "gt": "import random\nimport string\nimport pandas as pd\ndef task_func(data_list, seed=0):\n    random.seed(seed)\n\n    df = pd.DataFrame(data_list, columns=[\"Original String\"])\n\n    modified_strings = []\n    for s in data_list:\n        s = s.strip()\n        if not s:\n            modified_strings.append(s)\n            continue\n        substrings = [ss.strip() for ss in s.split(\",\")]\n        replace_idx = random.randint(0, len(substrings) - 1)\n        random_string = \"\".join(\n            random.choices(string.ascii_lowercase, k=len(substrings[replace_idx]))\n        )\n        substrings[replace_idx] = random_string\n        modified_string = \", \".join(substrings)\n        modified_strings.append(modified_string)\n\n    df[\"Modified String\"] = modified_strings\n\n    return df",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a typical input list\n        input_data = [\"lamp, bag, mirror\", \"table, chair, bag, lamp\"]\n        result = task_func(input_data, seed=0)\n        self.assertTrue(all(item in input_data for item in result[\"Original String\"]))\n        self.assertNotEqual(\n            result[\"Original String\"].tolist(), result[\"Modified String\"].tolist()\n        )\n    def test_case_2(self):\n        # Test with a single-item list\n        input_data = [\"lamp, bag, mirror\"]\n        result = task_func(input_data, seed=0)\n        self.assertTrue(all(item in input_data for item in result[\"Original String\"]))\n        self.assertNotEqual(\n            result[\"Original String\"].tolist(), result[\"Modified String\"].tolist()\n        )\n    def test_case_3(self):\n        # Test with a list of varied length strings\n        input_data = [\"lamp, chair\", \"table, mirror, bag\", \"desk, bed\"]\n        result = task_func(input_data, seed=0)\n        self.assertTrue(all(item in input_data for item in result[\"Original String\"]))\n        self.assertNotEqual(\n            result[\"Original String\"].tolist(), result[\"Modified String\"].tolist()\n        )\n    def test_case_4(self):\n        # Test with an empty list\n        input_data = []\n        result = task_func(input_data, seed=0)\n        self.assertEqual(len(result), 0)\n    def test_case_5(self):\n        # Test with a list of empty strings\n        input_data = [\"\", \"\", \"\"]\n        result = task_func(input_data, seed=0)\n        self.assertEqual(result[\"Original String\"].tolist(), [\"\", \"\", \"\"])\n        self.assertEqual(result[\"Modified String\"].tolist(), [\"\", \"\", \"\"])\n    def test_case_6(self):\n        # Test with strings that have no commas\n        input_data = [\"lamps\", \"table\"]\n        result = task_func(input_data, seed=1)\n        self.assertTrue(\n            all(len(modified) == 5 for modified in result[\"Modified String\"])\n        )\n    def test_case_7(self):\n        # Test with strings that contain multiple identical substrings\n        input_data = [\"lamp, lamp, lamp\"]\n        result = task_func(input_data, seed=2)\n        self.assertNotEqual(result[\"Original String\"][0], result[\"Modified String\"][0])\n        self.assertTrue(\n            any(sub != \"lamp\" for sub in result[\"Modified String\"][0].split(\", \"))\n        )\n    def test_case_8(self):\n        # Test with mixed case input strings\n        input_data = [\"Lamp, Bag, Mirror\"]\n        result = task_func(input_data, seed=4)\n        self.assertNotEqual(\n            result[\"Original String\"].tolist(), result[\"Modified String\"].tolist()\n        )\n        self.assertTrue(\n            any(char.islower() for char in result[\"Modified String\"][0])\n        )  # Ensure replacement is in lowercase\n    def test_case_9(self):\n        # Test effect of different seeds on output\n        input_data = [\"lamp, bag, mirror\"]\n        result_seed_0a = task_func(input_data, seed=0)\n        result_seed_0b = task_func(input_data, seed=0)\n        result_seed_5 = task_func(input_data, seed=5)\n        self.assertEqual(\n            result_seed_0a[\"Modified String\"][0], result_seed_0b[\"Modified String\"][0]\n        )\n        self.assertNotEqual(\n            result_seed_0a[\"Modified String\"][0], result_seed_5[\"Modified String\"][0]\n        )\n    def test_case_10(self):\n        # Test case sensitivity\n        input_data = [\"Lamp, Bag, Mirror\"]\n        result = task_func(input_data, seed=3)\n        original_items = [\n            item.lower() for item in result[\"Original String\"][0].split(\", \")\n        ]\n        modified_items = [item for item in result[\"Modified String\"][0].split(\", \")]\n        self.assertTrue(\n            any(mod_item not in original_items for mod_item in modified_items),\n            \"Modified string should contain a lowercase random replacement not present in the original string\",\n        )\n    def test_case_11(self):\n        # Test whitespaces (i.e. make sure leading/trailing whitespaces are removed in processing substrings)\n        input_data = [\"  lamp, bag   ,mirror  \"]\n        result = task_func(input_data, seed=3)\n        modified = result[\"Modified String\"][0].split(\", \")\n        self.assertTrue(\n            all(item.strip() == item for item in modified),\n            \"All items in the modified string should have leading and trailing whitespaces removed\",\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyzes a list of numerical data, identifies values greater than the average, and counts how many values are greater than a specified value. Additionally, plots the histogram of the sorted numbers.\nNote that: If the data list is empty, the function returns an empty numpy.ndarray and a count of 0. This ensures the function's output remains consistent and predictable even with no input data.\nThe function should output with:\n    numpy.ndarray: An array of values from the data that are greater than the average.\n    int: The number of values in the data that are greater than the given value.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n```",
        "gt": "import numpy as np\nimport bisect\nimport statistics\nimport matplotlib.pyplot as plt\ndef task_func(data, value):\n    if not data:  # Handle empty data list\n        return np.array([]), 0\n\n    data = np.array(data)\n    avg = statistics.mean(data)\n    greater_avg = data[data > avg]\n\n    data.sort()\n    bpoint = bisect.bisect_right(data, value)\n    num_greater_value = len(data) - bpoint\n\n    plt.hist(data, bins=10)\n    plt.show()\n\n    return greater_avg, num_greater_value",
        "test": "import unittest\nfrom unittest.mock import patch\nimport numpy as np\nimport statistics\nclass TestCases(unittest.TestCase):\n    def test_return_types(self):\n        \"\"\"Ensure the function returns a numpy.ndarray and an integer.\"\"\"\n        data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        result = task_func(data, 5)\n        self.assertIsInstance(result[0], np.ndarray, \"First return value should be an ndarray\")\n        self.assertIsInstance(result[1], int, \"Second return value should be an int\")\n    def test_greater_than_average(self):\n        \"\"\"Verify the returned array contains only values greater than the average of the data list.\"\"\"\n        data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        result = task_func(data, 5)\n        self.assertTrue(all(val > statistics.mean(data) for val in result[0]), \"All returned values should be greater than the data's average\")\n    def test_count_greater_than_value(self):\n        \"\"\"Check if the function correctly counts the number of values greater than the specified value.\"\"\"\n        data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        _, count = task_func(data, 5)\n        self.assertEqual(count, 5, \"The count of values greater than 5 should be 5\")\n    def test_empty_data(self):\n        \"\"\"Ensure the function handles an empty data list correctly.\"\"\"\n        data = []\n        result = task_func(data, 5)\n        self.assertEqual(len(result[0]), 0, \"The returned array should be empty for empty input data\")\n        self.assertEqual(result[1], 0, \"The count should be 0 for empty input data\")\n    def test_small_data_set(self):\n        \"\"\"Test functionality with a small data set.\"\"\"\n        data = [2, 3, 4]\n        result = task_func(data, 3)\n        self.assertTrue(all(val > statistics.mean(data) for val in result[0]), \"All returned values should be greater than the average in a small data set\")\n        self.assertEqual(result[1], 1, \"The count of values greater than 3 should be 1 in a small data set\")\n    @patch('matplotlib.pyplot.show')\n    def test_plotting_mocked(self, mock_show):\n        \"\"\"Ensure the function triggers a plot display.\"\"\"\n        data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        _ = task_func(data, 5)\n        mock_show.assert_called_once()\n    def test_with_floats_and_boundary_value(self):\n        \"\"\"Test function with floating point numbers and a boundary value exactly equal to one of the data points.\"\"\"\n        data = [1.5, 2.5, 3.5, 4.5, 5.5]\n        greater_avg, count = task_func(data, 3.5)\n        self.assertTrue(all(val > statistics.mean(data) for val in greater_avg), \"All returned values should be greater than the average with floats\")\n        self.assertEqual(count, 2, \"The count of values greater than 3.5 should be 2, including boundary conditions\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform a linear regression analysis on a given DataFrame.\nThe function should output with:\n    score (float): The R-squared score of the model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target):\n```",
        "gt": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(df, target):\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    \n    model = LinearRegression()\n    model.fit(X, y)\n\n    return model.score(X, y)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame([[0, 1, 2], [3, 4, 5], [6, 7, 8]], columns = ['x', 'y', 'z'])\n        r_squared = task_func(df, 'z')\n        self.assertEqual(r_squared, 1.0)\n        \n    def test_case_2(self):\n        df = pd.DataFrame([[-1, 1, 2], [3, 4, 5], [6, 7, 8]], columns = ['x', 'y', 'z'])\n        r_squared = task_func(df, 'z')\n        self.assertEqual(r_squared, 1.0)\n    \n    def test_case_3(self):\n        df = pd.DataFrame([[0, 0, 0], [1, 1, 1], [2, 2, 2]], columns = ['x', 'y', 'z'])\n        r_squared = task_func(df, 'z')\n        self.assertEqual(r_squared, 1.0)\n    def test_case_4(self):\n        df = pd.DataFrame([[0, 0, 9], [1, 1, 35], [2, 2, 78]], columns = ['x', 'y', 'z'])\n        r_squared = task_func(df, 'z')\n        self.assertFalse(r_squared == 1.0)\n    def test_case_5(self):\n        df = pd.DataFrame([[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2]], columns = ['x', 'y', 'z', 'w'])\n        r_squared = task_func(df, 'w')\n        self.assertEqual(r_squared, 1.0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a pandas DataFrame with random numeric values, run KMeans clusters on the data and return the labels.\nThe function should output with:\n    labels (np.array): The labels from the KMeans clustering.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    # Perform clustering\n    scaler = StandardScaler()\n    df_std = scaler.fit_transform(df.values)\n    \n    # Convert standardized values back to a DataFrame using pd\n    df_std = pd.DataFrame(df_std, columns=df.columns)\n    \n    # Perform clustering with sklearn's KMeans\n    kmeans = KMeans(n_clusters=3, random_state=0).fit(df_std)\n    labels = kmeans.labels_  # The labels are directly a numpy array\n    \n    return labels",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = pd.DataFrame(np.random.rand(500, 2) * 100, columns=['A', 'B'])\n        labels = task_func(df)\n        self.assertEqual(len(labels), 500)\n        self.assertTrue(np.all(np.isin(labels, [0, 1, 2])))\n    def test_case_2(self):\n        df = pd.DataFrame(np.random.rand(10, 2) * 100, columns=['A', 'B'])\n        labels = task_func(df)\n        self.assertEqual(len(labels), 10)\n        self.assertTrue(np.all(np.isin(labels, [0, 1, 2])))\n    def test_case_3(self):\n        df = pd.DataFrame(np.random.rand(5, 4) * 100, columns=['A', 'B', 'C', 'D'])\n        labels = task_func(df)\n        self.assertEqual(len(labels), 5)\n        self.assertTrue(np.all(np.isin(labels, [0, 1, 2])))\n    def test_case_4(self):\n        df = pd.DataFrame(np.random.rand(20, 3) * 100, columns=['A', 'B', 'C'])\n        labels = task_func(df)\n        self.assertEqual(len(labels), 20)\n        self.assertTrue(np.all(np.isin(labels, [0, 1, 2])))\n    def test_case_5(self):\n        df = pd.DataFrame(np.random.rand(42, 1) * 100, columns=['A'])\n        labels = task_func(df)\n        self.assertEqual(len(labels), 42)\n        self.assertTrue(np.all(np.isin(labels, [0, 1, 2])))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all subsets of a given size from a tuple and draw a histogram of the sums of the subsets. Additionally, return the Axes object of the plotted histogram and the combinations of the subsets and their sums.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object of the plotted histogram.\n    list: List of all the combinations of subsets.\n    list: List of the sums of all the subsets.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n```",
        "gt": "import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(elements, subset_size):\n    combinations = list(itertools.combinations(elements, subset_size))\n    sums = [sum(combination) for combination in combinations]\n    ax = plt.hist(sums, bins=np.arange(min(sums), max(sums) + 2) - 0.5, rwidth=0.8, align='left')\n    return plt.gca(), combinations, sums",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with a tuple of size 10 and subset size 2\n        ax, combs, sums = task_func((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2)\n        self.assertIsInstance(ax, plt.Axes)  # Check if the return type is correct\n        # Test the combinations and sums\n        self.assertEqual(len(combs), 45)\n        self.assertEqual(len(sums), 45)\n    def test_case_2(self):\n        # Testing with a tuple of size 5 and subset size 3\n        ax, combs, sums = task_func((2, 4, 6, 8, 10), 3)\n        self.assertIsInstance(ax, plt.Axes)\n        # Test the combinations and sums\n        self.assertEqual(len(combs), 10)\n        self.assertEqual(len(sums), 10)\n    def test_case_3(self):\n        # Testing with an empty tuple\n        ax, combs, sums = task_func((), 0)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_4(self):\n        # Testing with negative numbers in the tuple\n        ax, combs, sums = task_func((-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5), 2)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_5(self):\n        # Testing with a subset size of 0\n        ax, combs, sums = task_func((1, 2, 3, 4, 5), 2)\n        self.assertIsInstance(ax, plt.Axes)\n        # Test the combinations and sums\n        self.assertEqual(combs, [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)])\n        self.assertEqual(sums, [3, 4, 5, 6, 5, 6, 7, 7, 8, 9])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a category distribution within a specified range and return as a DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame that has two columns: 'Category' (category names) and 'Count' (count of each category).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\n# Constants\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n```",
        "gt": "import pandas as pd\nimport random\n# Constants\nCATEGORIES = ['A', 'B', 'C', 'D', 'E']\ndef task_func(value_range=(0, 100)):\n\n    distribution = {category: random.randint(*value_range) for category in CATEGORIES}\n    df = pd.DataFrame(list(distribution.items()), columns=['Category', 'Count'])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nimport random\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test if the function returns a DataFrame.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertIsInstance(result, pd.DataFrame)\n    def test_columns(self):\n        \"\"\"Test if the DataFrame has the correct columns.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertListEqual(list(result.columns), ['Category', 'Count'])\n    def test_value_range_default(self):\n        \"\"\"Test if the 'Count' values are within the default range.\"\"\"\n        random.seed(0)\n        result = task_func()\n        for count in result['Count']:\n            self.assertTrue(0 <= count <= 100)\n    def test_value_range_custom(self):\n        \"\"\"Test if the 'Count' values are within a custom range.\"\"\"\n        random.seed(0)\n        test_range = (10, 50)\n        result = task_func(value_range=test_range)\n        for count in result['Count']:\n            self.assertTrue(test_range[0] <= count <= test_range[1])\n    def test_number_of_rows(self):\n        \"\"\"Test if the DataFrame contains the expected number of rows.\"\"\"\n        random.seed(0)\n        result = task_func()\n        self.assertEqual(len(result), len(CATEGORIES))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the similarity values between two texts based on the cosine similarity and the Levenshtein ratio. The texts are first cleaned by removing all non-alphanumeric characters except spaces and converted to lowercase. Cosine similarity is computed based on term frequency in each text. The Levenshtein ratio is computed using the 'ratio' function from the 'python-Levenshtein' library, which measures the similarity of two strings as a number between 0 and 1.\nThe function should output with:\n    tuple: A tuple containing the cosine similarity and Levenshtein ratio as floats.\n    cosine similarity (float): The cosine similarity ranges from 0 to 1,\n    where 1 means identical term frequency, and 0 indicates no common terms.\n    levenshtein_ratio (float): The Levenshtein ratio also ranges from 0 to 1,\n    where 1 means the strings are identical, and 0 means they are completely different.\nYou should write self-contained code starting with:\n```\nimport re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n```",
        "gt": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\ndef task_func(text1, text2):\n    # Clean and lowercase the texts\n    text1 = ALPHANUMERIC.sub(' ', text1).lower()\n    text2 = ALPHANUMERIC.sub(' ', text2).lower()\n\n    # Calculate term frequency vectors\n    vec1 = Counter(text1.split())\n    vec2 = Counter(text2.split())\n\n    # Compute cosine similarity\n    intersection = set(vec1.keys()) & set(vec2.keys())\n    numerator = sum([vec1[x] * vec2[x] for x in intersection])\n\n    sum1 = sum([vec1[x]**2 for x in vec1.keys()])\n    sum2 = sum([vec2[x]**2 for x in vec2.keys()])\n    denominator = np.sqrt(sum1) * np.sqrt(sum2)\n\n    if not denominator:\n        cosine_similarity = 0.0\n    else:\n        cosine_similarity = float(numerator) / denominator\n\n    # Calculate Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    return cosine_similarity, levenshtein_ratio",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def test_case_identical_strings(self):\n        self.assertEqual(task_func(\"test\", \"test\"), (1.0, 1.0))\n    def test_case_different_strings(self):\n        self.assertEqual(task_func(\"test\", \"different\"), (0.0, 0.3076923076923077))  # Adjusted expected value\n    def test_case_empty_strings(self):\n        self.assertEqual(task_func(\"\", \"\"), (0.0, 1.0))  # Adjusted expected value; Empty strings are considered identical\n    def test_case_similar_strings(self):\n        self.assertEqual(task_func(\"hello world\", \"hola mundo\"), (0.0, 0.38095238095238093))  # Adjusted expected value\n    def test_case_numerical_strings(self):\n        cosine_similarity, levenshtein_ratio = task_func(\"123\", \"321\")\n        self.assertEqual(cosine_similarity, 0.0)  # This comparison is fine with assertEqual since it's an exact match.\n        self.assertAlmostEqual(levenshtein_ratio, 0.3333333, places=7)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Removes a random comma-separated value (treated as a \"substring\") from each string in a list and returns a pandas DataFrame containing the original and modified strings.\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns 'Original String' and 'Modified String'.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n```",
        "gt": "import pandas as pd\nimport re\nimport random\ndef task_func(data_list, seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame([s.strip() for s in data_list], columns=[\"Original String\"])\n\n    modified_strings = []\n    for s in data_list:\n        substrings = re.split(\", \", s)\n        random_substring = random.choice(substrings)\n        modified_s = (\n            s.replace(\", \" + random_substring, \"\")\n            if \", \" + random_substring in s\n            else s.replace(random_substring + \", \", \"\")\n        )\n        modified_strings.append(modified_s)\n\n    df[\"Modified String\"] = modified_strings\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.columns = [\"Original String\", \"Modified String\"]\n    def test_case_1(self):\n        # Test basic case\n        input_data = [\"apple, orange, banana\", \"car, bike, plane\"]\n        result = task_func(input_data, seed=42)\n        self._test_dataframe(result, input_data)\n    def test_case_2(self):\n        # Test single character\n        input_data = [\"a, b, c, d, e\", \"f, g, h, i, j\"]\n        result = task_func(input_data, seed=42)\n        self._test_dataframe(result, input_data)\n    def test_case_3(self):\n        # Test single numeric characters\n        input_data = [\"1, 2, 3\", \"4, 5, 6, 7\"]\n        result = task_func(input_data, seed=42)\n        self._test_dataframe(result, input_data)\n    def test_case_4(self):\n        # Test with an empty list\n        input_data = []\n        result = task_func(input_data, seed=42)\n        self.assertTrue(result.empty)\n    def test_case_5(self):\n        # Test with strings without commas\n        input_data = [\"apple\", \"car\"]\n        result = task_func(input_data, seed=42)\n        # Ensure dataframe has correct columns\n        self.assertListEqual(list(result.columns), self.columns)\n        # Ensure 'Modified String' is the same as 'Original String' for single values\n        for orig, mod in zip(result[\"Original String\"], result[\"Modified String\"]):\n            self.assertEqual(orig.strip(), mod)\n    def test_case_6(self):\n        # Test strings with leading and trailing spaces\n        input_data = [\" apple, orange, banana \", \" car, bike, plane\"]\n        expected_data = [\"apple, orange, banana\", \"car, bike, plane\"]\n        result = task_func(input_data, seed=42)\n        self._test_dataframe(result, expected_data)\n    def test_case_7(self):\n        # Test strings where the same value appears multiple times\n        input_data = [\"apple, apple, banana\", \"car, car, bike, plane\"]\n        result = task_func(input_data, seed=42)\n        # Special case where substrings might be duplicated\n        for orig, mod in zip(result[\"Original String\"], result[\"Modified String\"]):\n            diff = len(orig.split(\", \")) - len(mod.split(\", \"))\n            self.assertTrue(diff in [0, 1])  # Either no change or one substring removed\n    def test_case_8(self):\n        # Test reproducibility with the same seed\n        input_data = [\"apple, orange, banana\", \"car, bike, plane\"]\n        result1 = task_func(input_data, seed=42)\n        result2 = task_func(input_data, seed=42)\n        pd.testing.assert_frame_equal(result1, result2)\n    def test_case_9(self):\n        # Test difference with different seeds\n        input_data = [\"apple, orange, banana\", \"car, bike, plane\"]\n        result1 = task_func(input_data, seed=42)\n        result2 = task_func(input_data, seed=43)\n        self.assertFalse(result1.equals(result2))\n    def _test_dataframe(self, df, input_data):\n        # Ensure dataframe has correct columns\n        self.assertListEqual(list(df.columns), self.columns)\n        # Ensure 'Modified String' has one less substring than 'Original String'\n        for orig, mod in zip(df[\"Original String\"], df[\"Modified String\"]):\n            self.assertTrue(orig in input_data)  # Ensure original string is from input\n            self.assertEqual(len(orig.split(\", \")) - 1, len(mod.split(\", \")))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a CSV file on a specific file path with fake personal data. The personal data consists of the following columns: - Name: random names generated with faker - Age: random age values: 20<=age<=60 - Address: random adresses generated with faker - Email: random email adresses generated with faker Newlines '\\n' in the generated addresses get replaced with ', '. The number of rows in the CSV file is determined by num_rows. >>> path = task_func('test.csv', 5, random_seed=12) >>> with open(path, 'r') as file: >>>     reader = csv.reader(file) >>>     rows = list(reader) >>> print(rows) [ ['Name', 'Age', 'Address', 'Email'], ['Matthew Estrada', '50', '7479 Angela Shore, South Michael, MA 28059', 'johnstonjames@example.net'], ['Gabrielle Sullivan', '37', '83167 Donna Dale, Nicoleside, GA 91836', 'peterswilliam@example.org'], ['Jason Carlson', '53', '013 Kelly Lake Suite 414, West Michael, NY 75635', 'anthonycarson@example.com'], ['Alexander Lowe', '42', '183 Christian Harbor, South Joshuastad, PA 83984', 'palmermicheal@example.com'], ['John Benjamin', '29', '8523 Rhonda Avenue, Rosemouth, HI 32166', 'masonjohn@example.org'] ]\nThe function should raise the exception for: ValueError: If num_rows is not an integer >= 0.\nThe function should output with:\n    str: The file path of the generated CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n```",
        "gt": "import csv\nimport random\nfrom faker import Faker\ndef task_func(file_path, num_rows, random_seed=None):\n\n    if num_rows < 0 or not isinstance(num_rows, int):\n        raise ValueError('num_rows should be an integer >=0.')\n\n    fake = Faker()\n    fake.seed_instance(random_seed)\n    random.seed(random_seed)\n    with open(file_path, 'w', newline='') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerow(['Name', 'Age', 'Address', 'Email'])\n        for _ in range(num_rows):\n            name = fake.name()\n            age = random.randint(20, 60)\n            address = fake.address().replace('\\n', ', ')\n            email = fake.email()\n            writer.writerow([name, age, address, email])\n    return file_path",
        "test": "import unittest\nimport csv\nimport os\nfrom faker import Faker\nimport tempfile\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.fake = Faker()\n        self.folder_path = tempfile.mkdtemp()\n        self.file_path = os.path.join(self.folder_path, 'test.csv')\n    def test_rng(self):\n        res_path1 = task_func(os.path.join(self.folder_path, 'test1.csv'), 45, random_seed=42)\n        res_path2 = task_func(os.path.join(self.folder_path, 'test2.csv'), 45, random_seed=42)\n        with open(res_path1, 'r') as file:\n            reader = csv.reader(file)\n            rows1 = list(reader)\n        with open(res_path2, 'r') as file:\n            reader = csv.reader(file)\n            rows2 = list(reader)\n        self.assertEqual(rows1, rows2)\n    def test_case_1(self):\n        num_rows = 10\n        result_path = task_func(self.file_path, num_rows, random_seed=12)\n        self.assertTrue(os.path.exists(result_path))\n        with open(result_path, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            self.assertEqual(len(rows), num_rows + 1)\n        \n        expected = [['Name', 'Age', 'Address', 'Email'],\n            ['Matthew Estrada',\n            '50',\n            '7479 Angela Shore, South Michael, MA 28059',\n            'johnstonjames@example.net'],\n            ['Gabrielle Sullivan',\n            '37',\n            '83167 Donna Dale, Nicoleside, GA 91836',\n            'peterswilliam@example.org'],\n            ['Jason Carlson',\n            '53',\n            '013 Kelly Lake Suite 414, West Michael, NY 75635',\n            'anthonycarson@example.com'],\n            ['Alexander Lowe',\n            '42',\n            '183 Christian Harbor, South Joshuastad, PA 83984',\n            'palmermicheal@example.com'],\n            ['John Benjamin',\n            '29',\n            '8523 Rhonda Avenue, Rosemouth, HI 32166',\n            'masonjohn@example.org'],\n            ['Dr. Kathy Johnson',\n            '44',\n            '138 Burns Knoll Suite 727, Christinaton, KY 43754',\n            'nbush@example.net'],\n            ['David Vega',\n            '20',\n            '462 James Mountains, New Ashleyview, WV 05639',\n            'freynolds@example.com'],\n            ['Lauren Bailey',\n            '43',\n            '202 Lauren Cliffs Suite 836, Lake Michaelport, KY 90824',\n            'hhowell@example.org'],\n            ['Mercedes Long',\n            '50',\n            '5152 Jennifer Inlet Apt. 652, East Tonymouth, NM 24011',\n            'contrerasmatthew@example.org'],\n            ['Anne Walker', '37', 'USNV Ramirez, FPO AE 90740', 'hphillips@example.org']\n        ]\n        self.assertEqual(rows, expected)\n        os.remove(result_path)\n    def test_case_2(self):\n        # 0 rows\n        num_rows = 0\n        result_path = task_func(self.file_path, num_rows)\n        self.assertTrue(os.path.exists(result_path))\n        with open(result_path, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            self.assertEqual(len(rows), num_rows + 1)\n        os.remove(result_path)\n    def test_case_3(self):\n        # large amount of rows\n        num_rows = 1000\n        result_path = task_func(self.file_path, num_rows)\n        self.assertTrue(os.path.exists(result_path))\n        df = pd.read_csv(result_path)\n        self.assertTrue(df['Age'].between(20, 60, inclusive='both').all())\n        self.assertTrue(df.shape == (1000, 4))\n        os.remove(result_path)\n    def test_case_4(self):\n        #negative rows\n        self.assertRaises(Exception, task_func, self.file_path, -2)\n        self.assertRaises(Exception, task_func, self.file_path, 1.2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Creates a histogram of the pixel values of a grayscale image.\nNote that: The function assumes the image is in grayscale format. The histogram array is 1D with a size of 256, where each index corresponds to a pixel value, and the value at each index represents the count of pixels in the image with that pixel value.\nThe function should raise the exception for: FileNotFoundError: If the specified image file does not exist. ValueError: If the image file is not a valid image.\nThe function should output with:\n    np.ndarray: A 1D numpy array representing the histogram of the image, with 256 bins corresponding to\n    the pixel values in the range [0, 256). Each entry in the array represents the frequency of a pixel value\n    in the grayscale image.\nYou should write self-contained code starting with:\n```\nimport cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n```",
        "gt": "import cv2\nimport os\nimport numpy as np\ndef task_func(image_file: str) -> np.ndarray:\n    if not os.path.exists(image_file):\n        raise FileNotFoundError(f\"The file {image_file} does not exist.\")\n\n    img = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)\n    if img is None:\n        raise ValueError(\"Invalid image file.\")\n\n    histogram, _ = np.histogram(img.ravel(), bins=256, range=[0,256])\n    \n    return histogram",
        "test": "import unittest\nimport numpy as np\nimport cv2\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a dummy grayscale image for testing\n        self.dummy_image_path = 'dummy_image.png'\n        np.random.seed(48)\n        dummy_image = np.random.randint(0, 256, (10, 10), dtype=np.uint8)\n        cv2.imwrite(self.dummy_image_path, dummy_image)\n        \n        self.dummy_image_path_zero = 'dummy_image_zero.png'\n        self.dummy_image_path_max = 'dummy_image_max.png'\n        # Create an all-zero grayscale image\n        zero_image = np.zeros((10, 10), dtype=np.uint8)\n        cv2.imwrite(self.dummy_image_path_zero, zero_image)\n        # Create an all-max-value grayscale image\n        max_image = np.full((10, 10), 255, dtype=np.uint8)\n        cv2.imwrite(self.dummy_image_path_max, max_image)\n    def tearDown(self):\n        # Cleanup the dummy image\n        os.remove(self.dummy_image_path)\n        os.remove(self.dummy_image_path_zero)\n        os.remove(self.dummy_image_path_max)\n    def test_histogram_output(self):\n        histogram = task_func(self.dummy_image_path)\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(histogram.tolist()))\n        self.assertEqual(histogram.shape, (256,))\n        self.assertTrue(np.all(histogram >= 0))\n        \n        expect = [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 3, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 2, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        \n        self.assertEqual(histogram.tolist(), expect, \"DataFrame contents should match the expected output\")\n    def test_nonexistent_image_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent_image.png')\n    def test_invalid_image_file(self):\n        with open('invalid_image.txt', 'w') as file:\n            file.write(\"This is not an image file.\")\n        with self.assertRaises(ValueError):\n            task_func('invalid_image.txt')\n        os.remove('invalid_image.txt')\n    def test_histogram_values(self):\n        histogram = task_func(self.dummy_image_path)\n        self.assertTrue(np.sum(histogram) == 100)  # 10x10 pixels\n    \n    def test_all_zero_image_histogram(self):\n        histogram = task_func(self.dummy_image_path_zero)\n        self.assertEqual(histogram[0], 100, \"All pixels should be at value 0\")\n        self.assertTrue(np.all(histogram[1:] == 0), \"No pixels should be present at other values\")\n    def test_all_max_value_image_histogram(self):\n        histogram = task_func(self.dummy_image_path_max)\n        self.assertEqual(histogram[-1], 100, \"All pixels should be at maximum value 255\")\n        self.assertTrue(np.all(histogram[:-1] == 0), \"No pixels should be present at other values\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a sales report from a DataFrame, excluding duplicate customer names. The report includes total sales and the most popular sales category.\nNote that: The function would return the first category in alphabetical order for \"Most Popular Category' in the case of tie\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    dict: A dictionary with keys 'Total Sales' (sum of sales) and 'Most Popular Category' (most frequent category).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport collections\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport collections\ndef task_func(df):\n    \n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    df = df.drop_duplicates(subset='Customer')\n    total_sales = df['Sales'].sum()\n    popular_category = collections.Counter(df['Category']).most_common(1)[0][0]\n    return {'Total Sales': total_sales, 'Most Popular Category': popular_category}",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_regular(self):\n        data = pd.DataFrame([\n            {'Customer': 'John', 'Category': 'Electronics', 'Sales': 500},\n            {'Customer': 'Mary', 'Category': 'Home', 'Sales': 300},\n            {'Customer': 'Peter', 'Category': 'Beauty', 'Sales': 400},\n            {'Customer': 'Nick', 'Category': 'Sports', 'Sales': 600}\n        ])\n        expected_output = {'Total Sales': 1800, 'Most Popular Category': 'Electronics'}\n        self.assertEqual(task_func(data), expected_output)\n    def test_case_with_duplicates(self):\n        data = pd.DataFrame([\n            {'Customer': 'John', 'Category': 'Electronics', 'Sales': 500},\n            {'Customer': 'John', 'Category': 'Fashion', 'Sales': 200},\n            {'Customer': 'Mary', 'Category': 'Home', 'Sales': 300},\n            {'Customer': 'Peter', 'Category': 'Beauty', 'Sales': 400}\n        ])\n        expected_output = {'Total Sales': 1200, 'Most Popular Category': 'Electronics'}\n        self.assertEqual(task_func(data), expected_output)\n    def test_case_empty(self):\n        data = pd.DataFrame([\n            {'Customer': 'John', 'Category': 'Electronics', 'Sales': 500},\n            {'Customer': 'Mary', 'Category': 'Home', 'Sales': 300}\n        ])\n        expected_output = {'Total Sales': 800, 'Most Popular Category': 'Electronics'}\n        self.assertEqual(task_func(data), expected_output)\n    def test_case_unique_customers(self):\n        data = pd.DataFrame([\n            {'Customer': 'John', 'Category': 'Electronics', 'Sales': 500},\n            {'Customer': 'Mary', 'Category': 'Home', 'Sales': 300}\n        ])\n        expected_output = {'Total Sales': 800, 'Most Popular Category': 'Electronics'}\n        self.assertEqual(task_func(data), expected_output)\n    def test_case_tie_categories(self):\n        data = pd.DataFrame([\n            {'Customer': 'John', 'Category': 'Electronics', 'Sales': 500},\n            {'Customer': 'Mary', 'Category': 'Home', 'Sales': 300},\n            {'Customer': 'Nick', 'Category': 'Home', 'Sales': 200},\n            {'Customer': 'Alice', 'Category': 'Electronics', 'Sales': 300}\n        ])\n        # In case of a tie, the first category in alphabetical order will be chosen\n        expected_output = {'Total Sales': 1300, 'Most Popular Category': 'Electronics'}\n        self.assertEqual(task_func(data), expected_output)\n    def test_case_6(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a histogram subplot of a list of numbers.\nNote that: This function generates a histogram plot using Matplotlib. The plot title is set to 'Histogram'. The x-axis label is set to 'Number'. The y-axis label is set to 'Frequency'. The color of the histogram bars is randomly selected from a predefined set of colors.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The axes object representing the histogram plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport random\n# Constants\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport random\n# Constants\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\ndef task_func(number_list, bins):\n\n    fig, ax = plt.subplots()\n    color = random.choice(COLORS)  # Randomly select color from the COLORS constant\n    ax.hist(number_list, bins=bins, color=color)\n    ax.set_title('Histogram')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport random\n# Test data (this could be in a separate file or generated dynamically in real-world scenarios)\ntest_data = {'small_dataset': [8, 8, 10, 2, 6, 8, 10, 2, 6, 7], 'large_dataset': [4, 9, 42, 79, 5, 60, 27, 58, 34, 61, 44, 68, 1, 78, 93, 11, 100, 69, 89, 45, 43, 7, 54, 31, 75, 64, 20, 93, 93, 95, 33, 19, 2, 6, 49, 18, 95, 62, 36, 52, 48, 61, 78, 61, 48, 17, 79, 4, 54, 63, 64, 37, 79, 22, 3, 24, 42, 1, 59, 25, 15, 53, 81, 86, 2, 34, 71, 80, 11, 36, 90, 37, 80, 48, 35, 66, 13, 57, 13, 16, 32, 42, 48, 96, 92, 60, 4, 14, 45, 45, 52, 88, 49, 71, 91, 77, 17, 27, 34, 18, 88, 41, 18, 65, 58, 18, 62, 77, 2, 5, 22, 2, 47, 39, 5, 17, 87, 85, 54, 7, 97, 32, 62, 92, 10, 45, 66, 58, 61, 25, 46, 10, 70, 60, 41, 5, 78, 79, 64, 36, 71, 45, 9, 11, 85, 51, 53, 71, 47, 88, 45, 37, 92, 72, 35, 70, 66, 28, 76, 97, 34, 13, 36, 88, 80, 86, 41, 91, 23, 2, 51, 61, 44, 50, 37, 90, 76, 45, 45, 51, 6, 12, 92, 16, 30, 74, 55, 58, 57, 77, 15, 51, 17, 48, 96, 89, 79, 16, 66, 30, 86, 53, 13, 61, 12, 66, 13, 94, 98, 82, 58, 19, 75, 22, 32, 24, 5, 49, 75, 16, 58, 36, 33, 79, 7, 58, 100, 54, 42, 74, 30, 52, 8, 68, 43, 97, 28, 47, 6, 51, 54, 62, 82, 4, 18, 82, 43, 72, 64, 97, 62, 90, 54, 1, 60, 27, 27, 42, 83, 100, 85, 73, 13, 5, 2, 96, 65, 28, 51, 28, 17, 35, 36, 71, 14, 53, 18, 23, 71, 85, 6, 1, 61, 68, 52, 9, 66, 37, 70, 91, 65, 59, 91, 55, 34, 86, 4, 48, 56, 55, 31, 21, 88, 41, 27, 81, 13, 34, 30, 42, 35, 94, 50, 82, 54, 4, 70, 52, 19, 38, 57, 89, 9, 35, 77, 79, 98, 29, 73, 92, 54, 38, 14, 71, 49, 15, 70, 16, 25, 79, 74, 76, 70, 7, 37, 36, 92, 51, 92, 37, 57, 10, 51, 3, 20, 66, 38, 1, 56, 15, 8, 46, 47, 75, 89, 24, 18, 84, 78, 66, 16, 76, 36, 58, 22, 96, 56, 22, 64, 9, 24, 74, 87, 50, 82, 1, 7, 73, 96, 91, 31, 61, 59, 95, 82, 92, 3, 37, 24, 22, 3, 54, 29, 52, 32, 82, 87, 42, 45, 4, 26, 96, 59, 42, 69, 51, 74, 25, 70, 90, 52, 30, 51, 69, 21, 8, 8, 65, 86, 26, 19, 61, 37, 58, 3, 21, 100, 7, 59, 5, 69, 38, 30, 11, 48, 9, 11, 7, 20, 46, 86, 63, 98, 51, 82, 51, 22, 18, 10, 34, 98, 54, 22, 51, 46, 54, 14, 79, 74, 84, 38, 25, 16, 28, 19, 100, 94, 87, 54, 81, 7, 56, 7, 7, 6, 1, 81, 40, 99, 88, 21, 28, 79, 74, 67, 16, 89, 17, 87, 86, 39, 75, 91, 87, 33, 25, 68, 25, 58, 96, 61, 92, 39, 50, 36, 30, 23, 28, 82, 52, 28, 23, 92, 17, 46, 62, 69, 80, 14, 96, 44, 98, 77, 39, 92, 69, 7, 22, 50, 12, 25, 76, 26, 34, 35, 99, 66, 97, 44, 79, 41, 41, 41, 41, 28, 17, 49, 79, 47, 56, 77, 27, 50, 6, 41, 59, 19, 15, 27, 58, 25, 62, 51, 12, 57, 38, 81, 88, 67, 82, 37, 8, 94, 77, 92, 88, 98, 59, 25, 9, 38, 48, 43, 23, 51, 11, 92, 32, 45, 46, 38, 54, 32, 45, 22, 65, 5, 66, 80, 84, 6, 80, 65, 14, 81, 19, 77, 7, 24, 46, 34, 53, 36, 48, 46, 81, 72, 55, 33, 66, 68, 34, 5, 14, 91, 35, 59, 61, 51, 92, 87, 10, 24, 33, 9, 89, 8, 28, 99, 4, 41, 56, 39, 25, 27, 80, 35, 28, 86, 21, 61, 73, 19, 68, 98, 70, 40, 89, 12, 31, 55, 92, 4, 52, 14, 13, 5, 91, 41, 56, 36, 70, 39, 51, 51, 39, 42, 39, 32, 84, 77, 31, 42, 46, 36, 59, 20, 30, 87, 3, 71, 34, 3, 43, 31, 81, 75, 53, 65, 77, 43, 92, 77, 46, 62, 24, 71, 80, 33, 10, 72, 75, 24, 79, 9, 20, 9, 58, 9, 72, 17, 15, 49, 82, 20, 39, 39, 29, 81, 42, 72, 60, 91, 6, 81, 85, 15, 38, 79, 60, 24, 20, 58, 97, 100, 34, 74, 66, 56, 55, 8, 61, 79, 86, 94, 75, 23, 53, 60, 71, 95, 47, 82, 98, 45, 3, 16, 53, 15, 100, 42, 37, 76, 59, 19, 40, 88, 8, 9, 42, 53, 83, 37, 86, 84, 3, 37, 14, 3, 66, 43, 22, 22, 3, 21, 94, 29, 13, 49, 30, 4, 3, 4, 2, 83, 41, 92, 21, 64, 50, 66, 39, 88, 29, 81, 8, 19, 41, 46, 50, 53, 41, 50, 74, 32, 22, 50, 21, 37, 3, 78, 7, 37, 97, 5, 50, 64, 1, 17, 43, 52, 52, 82, 47, 20, 66, 16, 51, 63, 92, 83, 53, 61, 99, 61, 37, 41, 63, 7, 8, 93, 7, 45, 74, 2, 68, 16, 12, 93, 99, 32, 32, 68, 9, 39, 67, 81, 6, 23, 30, 67, 49, 40, 6, 29, 29, 95, 88, 64, 54, 24, 16, 80, 24, 26, 56, 44, 20, 35, 93, 49, 5, 33, 1, 40, 94, 18, 73, 44, 85, 98, 25, 24, 84, 75, 68, 48, 96, 5, 81, 13, 90, 37, 26, 9, 52, 31, 88, 46, 40, 8, 63, 65, 50, 74, 86, 100, 86, 66, 24, 35, 95, 80, 30, 49, 16, 57, 14, 80, 28, 13, 28, 71, 3, 2, 94, 24, 43, 8, 53, 86, 25, 75, 59, 59, 48, 71, 19, 34, 72, 4, 17, 2, 60, 51, 21, 9, 32, 29, 25, 81, 32, 37, 93, 93, 65, 52, 48, 96, 78], 'uniform_dataset': [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 'empty_dataset': [], 'mixed_dataset': [30, 40, 20, 1, 20, 50, 1, 50, 20, 20, 1, 50, 20, 50, 10, 10, 1, 20, 20, 20, 20, 20, 1, 1, 40, 30, 30, 30, 30, 50, 1, 10, 40, 1, 30, 20, 40, 30, 50, 20, 50, 30, 40, 20, 20, 10, 40, 10, 50, 20]}\nCOLORS = ['#00bfbf', '#000000', '#0000ff']\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        random.seed(0)\n        ax = task_func(test_data[\"small_dataset\"], 5)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Histogram\")\n        self.assertEqual(ax.get_xlabel(), \"Number\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        # Convert RGBA tuple to color code\n        color_code = mcolors.rgb2hex(ax.patches[0].get_facecolor())\n        # Check color\n        self.assertIn(color_code, COLORS)\n        self.assertTrue(ax.patches[3].get_height() > ax.patches[0].get_height())\n        plt.close()\n    def test_case_2(self):\n        random.seed(0)\n        ax = task_func(test_data[\"large_dataset\"], 10)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Histogram\")\n        self.assertEqual(ax.get_xlabel(), \"Number\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        plt.close()\n    def test_case_3(self):\n        random.seed(0)\n        ax = task_func(test_data[\"uniform_dataset\"], 3)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Histogram\")\n        self.assertEqual(ax.get_xlabel(), \"Number\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        all_height = []\n        for i in ax.patches:\n            all_height.append(i.get_height())\n        self.assertIn(len(test_data['uniform_dataset']), all_height)\n        plt.close()\n    def test_case_4(self):\n        random.seed(0)\n        ax = task_func(test_data[\"empty_dataset\"], 5)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Histogram\")\n        self.assertEqual(ax.get_xlabel(), \"Number\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        for i in ax.patches:\n            self.assertEqual(i.get_height(), 0)\n        plt.close()\n    def test_case_5(self):\n        random.seed(0)\n        ax = task_func(test_data[\"mixed_dataset\"], 6)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Histogram\")\n        self.assertEqual(ax.get_xlabel(), \"Number\")\n        self.assertEqual(ax.get_ylabel(), \"Frequency\")\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Rollback the update of a directory by restoring it from a backup. Constants: - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'. >>> task_func('/tmp/nonexistent') 'Backup directory /tmp/backup does not exist. Cannot rollback update.'\nNote that: This function will return the restored directory path on successful rollback, or an error message otherwise.\nThe function should output with:\n    directory (str): The restored directory path if successful, otherwise an error message.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n```",
        "gt": "import os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef task_func(directory):\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport os\nimport shutil\nclass TestCases(unittest.TestCase):\n    @patch('os.listdir')\n    @patch('os.path.exists')\n    @patch('shutil.rmtree')\n    @patch('shutil.copytree')\n    def test_successful_rollback(self, mock_copytree, mock_rmtree, mock_exists, mock_listdir):\n        mock_exists.side_effect = lambda x: True if x == BACKUP_DIR else False\n        mock_listdir.return_value = ['backup1']\n        result = task_func('/tmp/my_data')\n        self.assertEqual(result, '/tmp/my_data')\n        mock_copytree.assert_called_once()\n    @patch('os.listdir')\n    @patch('os.path.exists')\n    def test_no_backup_directory(self, mock_exists, mock_listdir):\n        mock_exists.return_value = False\n        result = task_func('/tmp/my_data')\n        self.assertEqual(result, 'Backup directory /tmp/backup does not exist. Cannot rollback update.')\n    @patch('os.listdir')\n    @patch('os.path.exists')\n    def test_no_backups_in_backup_directory(self, mock_exists, mock_listdir):\n        mock_exists.return_value = True\n        mock_listdir.return_value = []\n        result = task_func('/tmp/my_data')\n        self.assertEqual(result, 'No backups found in /tmp/backup. Cannot rollback update.')\n    @patch('os.listdir')\n    @patch('os.path.exists')\n    @patch('shutil.rmtree')\n    @patch('shutil.copytree')\n    def test_directory_does_not_exist(self, mock_copytree, mock_rmtree, mock_exists, mock_listdir):\n        mock_exists.side_effect = lambda x: True if x == BACKUP_DIR else False\n        mock_listdir.return_value = ['backup1']\n        result = task_func('/tmp/nonexistent')\n        self.assertEqual(result, '/tmp/nonexistent')\n        mock_copytree.assert_called_once()\n    @patch('os.listdir')\n    @patch('os.path.exists')\n    @patch('shutil.rmtree')\n    @patch('shutil.copytree')\n    def test_erroneous_backup_content(self, mock_copytree, mock_rmtree, mock_exists, mock_listdir):\n        mock_exists.return_value = True\n        mock_listdir.return_value = ['corrupt_backup']\n        mock_copytree.side_effect = Exception(\"Corruption detected\")\n        with self.assertRaises(Exception) as context:\n            task_func('/tmp/my_data')\n        self.assertTrue('Corruption detected' in str(context.exception))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random set of floating-point numbers, truncate each value to 3 decimal places, and return them in a DataFrame. The number of data points to generate can be specified. If zero, returns an empty DataFrame.\nNote that: This function use 'Value' for the column name in returned DataFrame\nThe function should output with:\n    DataFrame: A pandas DataFrame containing one column 'Value' with the generated data. Empty if n_data_points is 0.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\n# Constants\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n```",
        "gt": "import pandas as pd\nimport random\n# Constants\nN_DATA_POINTS = 10000\nMIN_VALUE = 0.0\nMAX_VALUE = 10.0\ndef task_func(n_data_points=N_DATA_POINTS):\n    if n_data_points == 0:\n        return pd.DataFrame(columns=['Value'])\n    \n    data = [round(random.uniform(MIN_VALUE, MAX_VALUE), 3) for _ in range(n_data_points)]\n    data_df = pd.DataFrame(data, columns=['Value'])\n\n    return data_df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        random.seed(0)\n        result = task_func()\n        self.assertIsInstance(result, pd.DataFrame)\n    def test_data_points_count(self):\n        random.seed(0)\n        result = task_func()\n        self.assertEqual(len(result), 10000)\n    def test_value_range(self):\n        random.seed(0)\n        result = task_func()\n        within_range = result['Value'].apply(lambda x: 0.0 <= x <= 10.0)\n        self.assertTrue(within_range.all())\n    def test_value_truncation(self):\n        random.seed(0)\n        result = task_func()\n        correctly_truncated = result['Value'].apply(lambda x: len(str(x).split('.')[1]) <= 3 if '.' in str(x) else True)\n        self.assertTrue(correctly_truncated.all())\n    def test_empty_data_frame(self):\n        random.seed(0)\n        result = task_func(n_data_points=0)\n        self.assertTrue(result.empty)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a histogram of the specified attribute from a list of objects and return the histogram plot. Constants: - NUM_BINS (int): Number of bins to use in the histogram, set to 30 by default.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The histogram plot of the attribute values, with the title 'Histogram of attribute values', x-axis labeled 'Attribute Value', and y-axis labeled 'Count'.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\n# Sample data\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n```",
        "gt": "import random\nimport matplotlib.pyplot as plt\n# Sample data\nclass Object:\n    value = 0\n    def __init__(self, value=None):\n        if value is None:\n            self.value = random.gauss(0, 1)\n        else:\n            self.value = value\ndef task_func(obj_list, attr, num_bins=30, seed=0):\n    # Set random seed\n    random.seed(seed)\n    attr_values = [getattr(obj, attr) for obj in obj_list]\n\n    # Generate histogram\n    fig, ax = plt.subplots()\n    ax.hist(attr_values, bins=num_bins, alpha=0.5)\n    ax.set_title('Histogram of attribute values')\n    ax.set_xlabel('Attribute Value')\n    ax.set_ylabel('Count')\n\n    return ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input 1: Simple list of objects with integer values from 0 to 9\n        random.seed(1)\n        obj_list = [Object(value=i) for i in range(10)]\n        ax = task_func(obj_list, 'value')\n        \n        # Assertions\n        self.assertIsInstance(ax, plt.Axes, \"Returned object is not a valid Axes object.\")\n        self.assertEqual(ax.get_title(), 'Histogram of attribute values', \"Histogram title is incorrect.\")\n        self.assertEqual(ax.get_xlabel(), 'Attribute Value', \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), 'Count', \"Y-axis label is incorrect.\")\n        self.assertEqual(sum([p.get_height() for p in ax.patches]), len(obj_list), \"Histogram data points do not match input list size.\")\n    def test_case_2(self):\n        # Input 2: List of objects with random Gaussian values\n        random.seed(2)\n        obj_list = [Object() for _ in range(100)]\n        ax = task_func(obj_list, 'value', seed=77)\n        \n        # Assertions\n        self.assertIsInstance(ax, plt.Axes, \"Returned object is not a valid Axes object.\")\n        self.assertEqual(ax.get_title(), 'Histogram of attribute values', \"Histogram title is incorrect.\")\n        self.assertEqual(ax.get_xlabel(), 'Attribute Value', \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), 'Count', \"Y-axis label is incorrect.\")\n        self.assertEqual(sum([p.get_height() for p in ax.patches]), len(obj_list), \"Histogram data points do not match input list size.\")\n        # Check axis data\n        self.assertAlmostEqual(ax.get_xlim()[0], -3.933336166652307, delta=0.1, msg=\"X-axis lower limit is incorrect.\")\n        \n    def test_case_3(self):\n        # Input 3: List of objects with fixed value\n        random.seed(3)\n        obj_list = [Object(value=5) for _ in range(50)]\n        ax = task_func(obj_list, 'value', seed=4)\n        \n        # Assertions\n        self.assertIsInstance(ax, plt.Axes, \"Returned object is not a valid Axes object.\")\n        self.assertEqual(ax.get_title(), 'Histogram of attribute values', \"Histogram title is incorrect.\")\n        self.assertEqual(ax.get_xlabel(), 'Attribute Value', \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), 'Count', \"Y-axis label is incorrect.\")\n        self.assertEqual(sum([p.get_height() for p in ax.patches]), len(obj_list), \"Histogram data points do not match input list size.\")\n    def test_case_4(self):\n        # Input 4: Empty list\n        obj_list = []\n        ax = task_func(obj_list, 'value')\n        \n        # Assertions\n        self.assertIsInstance(ax, plt.Axes, \"Returned object is not a valid Axes object.\")\n        self.assertEqual(ax.get_title(), 'Histogram of attribute values', \"Histogram title is incorrect.\")\n        self.assertEqual(ax.get_xlabel(), 'Attribute Value', \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), 'Count', \"Y-axis label is incorrect.\")\n        self.assertEqual(sum([p.get_height() for p in ax.patches]), 0, \"Histogram data points do not match input list size.\")\n        # Check axis data\n        self.assertAlmostEqual(ax.get_xlim()[0], -0.05, msg=\"X-axis limits are incorrect.\", delta=0.01)\n        self.assertAlmostEqual(ax.get_xlim()[1], 1.05, msg=\"X-axis limits are incorrect.\", delta=0.01)\n        self.assertAlmostEqual(ax.get_ylim()[0], -0.05, msg=\"Y-axis limits are incorrect.\", delta=0.01)\n        self.assertAlmostEqual(ax.get_ylim()[1], 0.05, msg=\"Y-axis limits are incorrect.\", delta=0.01)\n    def test_case_5(self):\n        # Input 5: Large list of objects\n        random.seed(5)\n        obj_list = [Object(value=random.gauss(0, 5)) for _ in range(1000)]\n        ax = task_func(obj_list, 'value')\n        \n        # Assertions\n        self.assertIsInstance(ax, plt.Axes, \"Returned object is not a valid Axes object.\")\n        self.assertEqual(ax.get_title(), 'Histogram of attribute values', \"Histogram title is incorrect.\")\n        self.assertEqual(ax.get_xlabel(), 'Attribute Value', \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), 'Count', \"Y-axis label is incorrect.\")\n        self.assertEqual(sum([p.get_height() for p in ax.patches]), len(obj_list), \"Histogram data points do not match input list size.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a number from one base to another, signs it with a private RSA key, and encodes the signed number in base64 using a custom alphabet.\nNote that: The function assumes that the provided number can be successfully converted from the specified source base to the target base. The RSA private key must be generated and provided to sign the converted number. The custom alphabet for base64 encoding allows for flexibility in encoding schemes.\nThe function should output with:\n    str: The base64-encoded signed number.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\ndef task_func(num, from_base, to_base, private_key, alphabet):\n```",
        "gt": "import numpy as np\nimport base64\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\ndef task_func(num, from_base, to_base, private_key, alphabet):\n    base64_table = np.array(list(alphabet))\n    n = int(num, from_base)\n    \n    new_num = ''\n    while n > 0:\n        n, m = divmod(n, to_base)\n        new_num += base64_table[m]\n\n    num = new_num[::-1]\n    data = bytes(num, 'utf-8')\n    signed_num = private_key.sign(\n        data,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n    base64_encoded = base64.b64encode(signed_num)\n\n    return base64_encoded.decode()",
        "test": "import unittest\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nimport base64\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Generate a test RSA private key\n        self.private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n            backend=default_backend()\n        )\n        self.alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\"\n    def test_base_conversion_and_signing(self):\n        \"\"\"Test base conversion and signing output is a base64 string\"\"\"\n        encoded = task_func('A1', 16, 8, self.private_key, self.alphabet)\n        self.assertIsInstance(encoded, str)\n    def test_different_numbers_produce_different_output(self):\n        \"\"\"Test that different numbers produce different signed output\"\"\"\n        encoded1 = task_func('A1', 16, 8, self.private_key, self.alphabet)\n        encoded2 = task_func('FF', 16, 8, self.private_key, self.alphabet)\n        self.assertNotEqual(encoded1, encoded2)\n    def test_task_func_return_type(self):\n        \"\"\"Ensure task_func returns a string.\"\"\"\n        result = task_func('A1', 16, 8, self.private_key, self.alphabet)\n        self.assertIsInstance(result, str, \"task_func should return a string\")\n    def test_invalid_base_conversion_raises_value_error(self):\n        \"\"\"Test that invalid base conversion raises a ValueError\"\"\"\n        with self.assertRaises(ValueError):\n            task_func('G', 16, 8, self.private_key, self.alphabet)\n    def test_output_is_base64_encoded(self):\n        \"\"\"Test that the output is properly base64 encoded\"\"\"\n        encoded = task_func('1', 10, 2, self.private_key, self.alphabet)\n        self.assertTrue(self.is_base64(encoded), \"Output should be valid base64.\")\n    @staticmethod\n    def is_base64(s):\n        \"\"\"Utility function to check if a string is base64 encoded.\"\"\"\n        try:\n            base64.b64decode(s)\n            return True\n        except ValueError:\n            return False",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze a list of fitness data, calculate the sum, the mean, the minimum, the maximum of a certain column and draw a line chart. Additionally, validate that the numeric values for steps, calories burned, and distance walked are non-negative.\nThe function should raise the exception for: KeyError: If the specified column is not valid. ValueError: If the data list is empty or if any of the numeric values for steps, calories burned, and distance walked are negative.\nThe function should output with:\n    tuple: A tuple containing:\n    dict: A dictionary with the sum, mean, min, max of the column.\n    matplotlib.axes.Axes: The Axes object of the plotted line chart. The line\n    chart will have Date on its x-axis, the column value\n    on its y-axis, and title Line Chart of (column).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    COLUMNS = [\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"]\n    if column not in COLUMNS:\n        raise KeyError(f\"{column} is not a valid column. Choose from {COLUMNS}.\")\n\n    if not data:\n        raise ValueError(\"No data to plot.\")\n    df = pd.DataFrame(data, columns=COLUMNS)\n    if df[[\"Steps\", \"Calories Burned\", \"Distance Walked\"]].lt(0).any().any():\n        raise ValueError(\n            \"Numeric values for steps, calories burned, and distance walked must be non-negative.\"\n        )\n\n    column_data = df[column]\n    result = {\n        \"sum\": np.sum(column_data),\n        \"mean\": np.mean(column_data),\n        \"min\": np.min(column_data),\n        \"max\": np.max(column_data),\n    }\n\n    ax = df.plot.line(x=\"Date\", y=column)\n    ax.set_ylabel(column)\n    plt.title(f\"Line Chart of {column}\")\n\n    return result, ax",
        "test": "import unittest\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = [\n            [datetime(2022, 1, 1), 5000, 200, 3.5],\n            [datetime(2022, 1, 2), 5500, 220, 4.0],\n            [datetime(2022, 1, 3), 6000, 240, 4.5],\n        ]\n        stats, ax = task_func(\"Steps\", data)\n        self.assertEqual(\n            stats, {\"sum\": 16500, \"mean\": 5500.0, \"min\": 5000, \"max\": 6000}\n        )\n        self.assertEqual(ax.get_title(), \"Line Chart of Steps\")\n    def test_case_2(self):\n        data = [\n            [datetime(2022, 1, 1), 5000, 250, 3.5],\n            [datetime(2022, 1, 2), 5500, 275, 4.0],\n            [datetime(2022, 1, 3), 6000, 300, 4.5],\n        ]\n        stats, ax = task_func(\"Calories Burned\", data)\n        self.assertEqual(stats, {\"sum\": 825, \"mean\": 275.0, \"min\": 250, \"max\": 300})\n        self.assertEqual(ax.get_title(), \"Line Chart of Calories Burned\")\n    def test_case_3(self):\n        data = [\n            [datetime(2022, 1, i), 5000 + i * 100, 250 + i * 10, 3.5 + i * 0.1]\n            for i in range(1, 11)\n        ]\n        stats, ax = task_func(\"Distance Walked\", data)\n        self.assertEqual(stats, {\"sum\": 40.5, \"mean\": 4.05, \"min\": 3.6, \"max\": 4.5})\n        self.assertEqual(ax.get_title(), \"Line Chart of Distance Walked\")\n    def test_case_4(self):\n        # Test handling zeros\n        data = [\n            [datetime(2022, 1, 1), 0, 0, 0],\n            [datetime(2022, 1, 2), 0, 0, 0],\n            [datetime(2022, 1, 3), 0, 0, 0],\n        ]\n        stats, ax = task_func(\"Steps\", data)\n        self.assertEqual(stats, {\"sum\": 0, \"mean\": 0.0, \"min\": 0, \"max\": 0})\n        self.assertEqual(ax.get_title(), \"Line Chart of Steps\")\n    def test_case_5(self):\n        # Test larger values\n        data = [\n            [datetime(2022, 1, 1), 100000, 10000, 1000],\n            [datetime(2022, 1, 2), 100000, 10000, 1000],\n            [datetime(2022, 1, 3), 100000, 10000, 1000],\n        ]\n        stats, ax = task_func(\"Calories Burned\", data)\n        self.assertEqual(\n            stats, {\"sum\": 30000, \"mean\": 10000.0, \"min\": 10000, \"max\": 10000}\n        )\n        self.assertEqual(ax.get_title(), \"Line Chart of Calories Burned\")\n    def test_case_6(self):\n        # Test invalid column names\n        data = [[datetime(2022, 1, 1), 5000, 200, 3.5]]\n        with self.assertRaises(Exception):\n            task_func(\"Invalid Column\", data)\n    def test_case_7(self):\n        # Test negative values\n        data = [[datetime(2022, 1, 1), -5000, 200, 3.5]]\n        with self.assertRaises(ValueError):\n            task_func(\"Steps\", data)\n    def test_case_8(self):\n        # Test single row\n        data = [[datetime(2022, 1, 1), 5000, 200, 3.5]]\n        stats, _ = task_func(\"Steps\", data)\n        self.assertEqual(stats, {\"sum\": 5000, \"mean\": 5000.0, \"min\": 5000, \"max\": 5000})\n    def test_case_9(self):\n        # Test non-sequential dates\n        data = [\n            [datetime(2022, 1, 3), 6000, 240, 4.5],\n            [datetime(2022, 1, 1), 5000, 200, 3.5],\n            [datetime(2022, 1, 2), 5500, 220, 4.0],\n        ]\n        stats, _ = task_func(\"Steps\", data)\n        # Check data order doesn't affect calculation\n        expected_stats = {\"sum\": 16500, \"mean\": 5500.0, \"min\": 5000, \"max\": 6000}\n        self.assertEqual(stats, expected_stats)\n    def test_case_10(self):\n        # Test empty data\n        data = []\n        with self.assertRaises(Exception):\n            task_func(\"Steps\", data)\n    def test_case_11(self):\n        # Test to ensure plot title and axis labels are correctly set\n        data = [\n            [datetime(2022, 1, 1), 5000, 200, 3.5],\n            [datetime(2022, 1, 2), 5500, 220, 4.0],\n            [datetime(2022, 1, 3), 6000, 240, 4.5],\n        ]\n        _, ax = task_func(\"Steps\", data)\n        self.assertEqual(ax.get_title(), \"Line Chart of Steps\")\n        self.assertEqual(ax.get_xlabel(), \"Date\")\n        self.assertEqual(ax.get_ylabel(), \"Steps\")\n    def test_case_12(self):\n        # Test to verify if the correct data points are plotted\n        data = [\n            [datetime(2022, 1, 1), 100, 50, 1.0],\n            [datetime(2022, 1, 2), 200, 100, 2.0],\n        ]\n        _, ax = task_func(\"Distance Walked\", data)\n        lines = ax.get_lines()\n        _, y_data = lines[0].get_data()\n        expected_y = np.array([1.0, 2.0])\n        np.testing.assert_array_equal(y_data, expected_y)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Writes a list of tuples to a CSV file. Each tuple in the 'data' list represents a row in the CSV file, with each element of the tuple corresponding to a cell in the row. If a tuple contains fewer elements than there are headers, the missing elements are filled with None. >>> task_func([('test', 123, 2), (3, -3, -15), ('hallo', 1, -2)], 'data.csv', ['test1', 'test2', 'test3']) '/user/data/data.csv' #full path depends on os and individual folder structure >>> with open('data.csv', 'r', newline='') as csvfile: >>>     reader = csv.reader(csvfile) >>>     for row in reader: >>>         print(row) ['test1', 'test2', 'test3'] ['test', '123', '2'] ['3', '-3', '-15'] ['hallo', '1', '-2'] ['1', 'hi', 'hello']\nThe function should raise the exception for: ValueError: If 'file_path' is None.\nThe function should output with:\n    str: The absolute path of the saved CSV file.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\ndef task_func(data, file_path, headers):\n```",
        "gt": "import csv\nimport os\ndef task_func(data, file_path, headers):\n    if file_path is None:\n        raise ValueError(\"The file path is invalid.\")\n\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(headers)\n        for row in data:\n            if len(row) < len(headers):\n                row += (None,) * (len(headers) - len(row))\n            writer.writerow(row)\n    return os.path.abspath(file_path)",
        "test": "import unittest\nfrom faker import Faker\nimport os\nimport shutil\nimport csv\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = \"test_files\"\n        os.makedirs(self.test_dir, exist_ok=True)\n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n    def test_valid_data(self):\n        fake = Faker()\n        data = [(fake.name(), str(fake.random_int(min=20, max=90)), fake.job()) for _ in range(10)]\n        headers = ['Name', 'Age', 'Occupation']\n        file_path = os.path.join(self.test_dir, 'test_valid.csv')\n        result_path = task_func(data, file_path, headers)\n        self.assertTrue(os.path.exists(result_path))\n        with open(result_path, newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            header_row = next(reader)\n            self.assertEqual(header_row, headers)\n            for i, row in enumerate(reader):\n                self.assertEqual(tuple(row), data[i])\n    def test_empty_data(self):\n        fake = Faker()\n        data = []\n        headers = ['Name', 'Age', 'Occupation']\n        file_path = os.path.join(self.test_dir, 'test_empty.csv')\n        result_path = task_func(data, file_path, headers)\n        self.assertTrue(os.path.exists(result_path))\n        with open(result_path, newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            header_row = next(reader)\n            self.assertEqual(header_row, headers)\n            with self.assertRaises(StopIteration):\n                next(reader)\n    def test_incomplete_tuples(self):\n        fake = Faker()\n        data = [(fake.name(), ), (fake.name(), str(fake.random_int(min=20, max=90)))]\n        headers = ['Name', 'Age', 'Occupation']\n        file_path = os.path.join(self.test_dir, 'test_incomplete.csv')\n        result_path = task_func(data, file_path, headers)\n        self.assertTrue(os.path.exists(result_path))\n        with open(result_path, newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            header_row = next(reader)\n            self.assertEqual(header_row, headers)\n            for row in reader:\n                self.assertTrue(all(value or value == '' for value in row))\n    def test_file_overwrite(self):\n        fake = Faker()\n        data_initial = [(fake.name(), str(fake.random_int(min=20, max=90)), fake.job())]\n        headers = ['Name', 'Age', 'Occupation']\n        file_path = os.path.join(self.test_dir, 'test_overwrite.csv')\n        task_func(data_initial, file_path, headers)\n        data_new = [(fake.name(), str(fake.random_int(min=20, max=90)), fake.job()) for _ in range(5)]\n        result_path = task_func(data_new, file_path, headers)\n        self.assertTrue(os.path.exists(result_path))\n        with open(result_path, newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            header_row = next(reader)\n            self.assertEqual(header_row, headers)\n            content = list(reader)\n            self.assertEqual(len(content), len(data_new))\n            self.assertNotEqual(content[0], data_initial[0])\n    def test_invalid_file_path(self):\n        fake = Faker()\n        data = [(fake.name(), str(fake.random_int(min=20, max=90)), fake.job())]\n        headers = ['Name', 'Age', 'Occupation']\n        file_path = None\n        with self.assertRaises(Exception):\n            task_func(data, file_path, headers)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the total appearances of all keys in all JSON files in the specified directory and return a dictionary with the keys from the JSON files as keys and their respective counts as values.\nThe function should output with:\n    dict: A dictionary with the keys from the JSON files as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n```",
        "gt": "import collections\nimport json\nimport os\ndef task_func(directory_path: str) -> dict:\n    key_counts = collections.defaultdict(int)\n\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            file_path = os.path.join(directory_path, filename)\n            with open(file_path, 'r') as json_file:\n                data = json.load(json_file)\n                for key in data.keys():\n                    key_counts[key] += 1\n\n    return dict(key_counts)",
        "test": "import unittest\nimport shutil\nimport tempfile\nimport doctest\n# Create a temporary directory for testing\nTEST_DIR_PATH = tempfile.mkdtemp()\ndef setup_test_directory():\n    \"\"\"\n    Set up a directory with multiple JSON files for testing purposes.\n    \"\"\"\n    if os.path.exists(TEST_DIR_PATH):\n        shutil.rmtree(TEST_DIR_PATH)\n    os.makedirs(TEST_DIR_PATH)\n    json_files_data = [\n        {'name': 'John', 'age': 25, 'address': '123 Main St'},\n        {'name': 'Doe', 'age': 30},\n        {'name': 'Jane', 'email': 'jane@example.com'},\n        {'title': 'Mr', 'name': 'Smith'},\n        {'name': 'Eva', 'email': 'eva@example.com', 'address': '456 Elm St'}\n    ]\n    \n    for idx, data in enumerate(json_files_data):\n        with open(os.path.join(TEST_DIR_PATH, f\"sample_{idx}.json\"), 'w') as f:\n            json.dump(data, f)\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        setup_test_directory()\n    def tearDown(self):\n        if os.path.exists(TEST_DIR_PATH):\n            shutil.rmtree(TEST_DIR_PATH)\n    def test_case_1(self):\n        # Test with 5 JSON files containing various keys\n        expected_result = {'name': 5, 'age': 2, 'address': 2, 'email': 2, 'title': 1}\n        result = task_func(TEST_DIR_PATH)\n        self.assertDictEqual(result, expected_result)\n    def test_case_2(self):\n        # Test with a non-existent directory path\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"/non/existent/path/\")\n    \n    def test_case_3(self):\n        # Test with a directory that doesn't have any JSON files\n        os.makedirs(f\"{TEST_DIR_PATH}/empty_directory/\")\n        result = task_func(f\"{TEST_DIR_PATH}/empty_directory/\")\n        self.assertDictEqual(result, {})\n    def test_case_4(self):\n        # Test with JSON files having nested keys (nested keys should not be counted)\n        with open(os.path.join(TEST_DIR_PATH, \"sample_nested.json\"), 'w') as f:\n            json.dump({'person': {'name': 'John', 'age': 30}}, f)\n        expected_result = {'name': 5, 'age': 2, 'address': 2, 'email': 2, 'title': 1, 'person': 1}\n        result = task_func(TEST_DIR_PATH)\n        result = {k: v for k, v in sorted(result.items(), key=lambda item: item[1], reverse=True)}\n        self.assertDictEqual(result, expected_result)\n    def test_case_5(self):\n        # Test with an empty JSON file (should not change the count of keys)\n        with open(os.path.join(TEST_DIR_PATH, \"sample_empty.json\"), 'w') as f:\n            json.dump({}, f)\n        expected_result = {'name': 5, 'age': 2, 'address': 2, 'email': 2, 'title': 1}\n        result = task_func(TEST_DIR_PATH)\n        result = {k: v for k, v in sorted(result.items(), key=lambda item: item[1], reverse=True)}\n        self.assertDictEqual(result, expected_result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a backup of a directory and clean the directory afterwards.\nNote that: The function will return the backup directory path and a list of errors (if any).\nThe function should output with:\n    tuple: A tuple containing:\n    str: The backup directory path.\n    list: A list of any errors encountered during the operation (empty list if no errors).\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    return \"/fake/backup/path\"\ndef task_func(directory):\n```",
        "gt": "import os\nimport shutil\n# Constants\nBACKUP_DIR = '/tmp/backup'\ndef get_unique_backup_dir():\n    return \"/fake/backup/path\"\ndef task_func(directory):\n    errors = []\n    if not os.path.exists(directory):\n        errors.append(f\"Directory does not exist: {directory}\")\n        return None, errors\n\n    if not os.path.exists(directory):\n        errors.append(f\"Directory does not exist: {directory}\")\n        return None, errors\n\n    try:\n        if not os.path.exists(BACKUP_DIR):\n            os.makedirs(BACKUP_DIR)\n\n        backup_dir = get_unique_backup_dir()\n        os.makedirs(backup_dir)\n        shutil.copytree(directory, os.path.join(backup_dir, os.path.basename(directory)))\n        try:\n            shutil.rmtree(directory)  # Deleting contents after backup\n        except PermissionError as e:\n            errors.append(f\"Permission denied: {e}\")\n            shutil.copytree(os.path.join(backup_dir, os.path.basename(directory)), directory)  # Restore original if cleanup fails\n        os.makedirs(directory, exist_ok=True)  # Recreating the original directory\n    except Exception as e:\n        errors.append(str(e))\n\n    return \"/fake/backup/path\", errors\n    \n    try:\n        shutil.copytree(directory, os.path.join(backup_dir, os.path.basename(directory)))\n        shutil.rmtree(directory)  # Deleting contents after backup\n        os.makedirs(directory)  # Recreating the original directory\n    except Exception as e:\n        errors.append(str(e))\n\n    return backup_dir, errors",
        "test": "import os\nimport shutil\nimport unittest\nfrom unittest import TestCase, main\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    @patch('os.makedirs')\n    @patch('shutil.copytree')\n    @patch('shutil.rmtree')\n    @patch('os.listdir', return_value=['data.json'])\n    @patch('os.path.exists', return_value=True)\n    def test_backup_and_clean(self, mock_exists, mock_listdir, mock_rmtree, mock_copytree, mock_makedirs):\n        backup_dir, errors = task_func('/fake/source')\n        mock_copytree.assert_called_once()\n        self.assertFalse(errors)\n    @patch('os.listdir', return_value=[])\n    @patch('os.path.exists', return_value=False)\n    def test_no_files_to_move(self, mock_exists, mock_listdir):\n        backup_dir, errors = task_func('/fake/source')\n        self.assertIn('Directory does not exist: /fake/source', errors)\n    @patch('os.makedirs')\n    @patch('shutil.copytree', side_effect=shutil.Error(\"Copy failed\"))\n    @patch('shutil.rmtree')\n    @patch('os.listdir', return_value=['data.json'])\n    @patch('os.path.exists', return_value=True)\n    def test_backup_failure(self, mock_exists, mock_listdir, mock_rmtree, mock_copytree, mock_makedirs):\n        backup_dir, errors = task_func('/fake/source')\n        self.assertIsNotNone(errors)\n        self.assertIn(\"Copy failed\", errors)\n    @patch('os.makedirs')\n    @patch('shutil.copytree')\n    @patch('shutil.rmtree', side_effect=PermissionError(\"Permission denied\"))\n    @patch('os.listdir', return_value=['data.json'])\n    @patch('os.path.exists', return_value=True)\n    def test_cleanup_failure(self, mock_exists, mock_listdir, mock_rmtree, mock_copytree, mock_makedirs):\n        backup_dir, errors = task_func('/fake/source')\n        self.assertTrue(any(\"Permission denied\" in error for error in errors))\n    @patch(__name__ + '.get_unique_backup_dir')  # Patch using the current module name\n    @patch('os.makedirs')\n    @patch('shutil.copytree')\n    @patch('shutil.rmtree')\n    @patch('os.listdir', return_value=['large_data.json', 'large_data_2.json'])\n    @patch('os.path.exists', return_value=True)\n    def test_large_files_backup(self, mock_exists, mock_listdir, mock_rmtree, mock_copytree, mock_makedirs, mock_unique_backup_dir):\n        # Mock the unique backup directory function to return a predictable result\n        expected_backup_dir = '/fake/backup/path'\n        mock_unique_backup_dir.return_value = expected_backup_dir\n        # Simulate the function call\n        backup_dir, errors = task_func('/fake/source')\n        # Assertions to verify the functionality\n        mock_copytree.assert_called_once()\n        self.assertFalse(errors)\n        self.assertEqual(backup_dir, expected_backup_dir)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Counts the number of words, characters, and unique characters in a given text.\nNote that: This function considers whitespace-separated substrings as words. When counting characters, this function excludes whitespace and special characters (i.e. string.punctuation).\nThe function should output with:\n    tuple: A tuple containing three integers: the number of words,\n    the number of characters,\n    the number of unique characters.\nYou should write self-contained code starting with:\n```\nimport string\nimport re\ndef task_func(text: str) -> tuple:\n```",
        "gt": "import string\nimport re\ndef task_func(text: str) -> tuple:\n    words = text.split()\n    chars = re.sub(\"\\s\", \"\", re.sub(f\"[{string.punctuation}]\", \"\", text))\n\n    return len(words), len(chars), len(set(chars))",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test simple text without any punctuation.\n        result = task_func(\"Hello world\")\n        self.assertEqual(result, (2, 10, 7))\n    def test_case_2(self):\n        # Test simple text that includes punctuation.\n        result = task_func(\"Hello, world!\")\n        self.assertEqual(result, (2, 10, 7))\n    def test_case_3(self):\n        # Test single word and no punctuation.\n        result = task_func(\"Hello\")\n        self.assertEqual(result, (1, 5, 4))\n    def test_case_4(self):\n        # Test single word that includes punctuation.\n        result = task_func(\"Hello!\")\n        self.assertEqual(result, (1, 5, 4))\n    def test_case_5(self):\n        # Test empty string.\n        result = task_func(\"\")\n        self.assertEqual(result, (0, 0, 0))\n    def test_case_6(self):\n        # Test text with numbers and punctuation.\n        result = task_func(\"There are 4 numbers here: 1, 2, 3, and 4.\")\n        self.assertEqual(result, (10, 27, 15))\n    def test_case_7(self):\n        # Test text with only whitespace and punctuation.\n        result = task_func(\"     , , !\")\n        self.assertEqual(result, (3, 0, 0))\n    def test_case_8(self):\n        # Test text with multiple spaces between words.\n        result = task_func(\"Multiple    spaces    here\")\n        self.assertEqual(result, (3, 18, 12))\n    def test_case_9(self):\n        # Test a long text.\n        long_text = \"This is a longer text designed to test the function's ability to handle more complex input, including a variety of characters and spaces.\"\n        result = task_func(long_text)\n        self.assertEqual(result, (23, 112, 22))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Remove a column from a data dictionary if it exists, and then plot the remaining data if it contains numeric data.\nThe function should output with:\n    df (pd.DataFrame): The modified DataFrame after removing the specified column.\n    ax (matplotlib.axes._axes.Axes or None): The plot of the modified DataFrame if there's\n    numeric data to plot, otherwise None.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\ndef task_func(data, column=\"c\"):\n```",
        "gt": "import pandas as pd\nimport numpy as np\ndef task_func(data, column=\"c\"):\n    df = pd.DataFrame(data)\n    if column in df.columns:\n        df = df.drop(columns=column)\n\n    # If there's no numeric data, return None for the plot.\n    if df.empty or not np.any(df.dtypes.apply(pd.api.types.is_numeric_dtype)):\n        return df, None\n\n    ax = df.plot()\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Scenario: DataFrame with columns 'a', 'b', and 'c'.\n        np.random.seed(0)\n        data = {\n                \"a\": np.random.randn(10),\n                \"b\": np.random.randn(10),\n                \"c\": np.random.randn(10),\n            }\n        df = pd.DataFrame(\n            data\n        )\n        modified_df, ax = task_func(data)  # Remove default column 'c'.\n        # Assert column 'c' removal and plot data verification.\n        self.assertNotIn(\"c\", modified_df.columns)\n        plotted_data = [line.get_ydata() for line in ax.get_lines()]\n        self.assertTrue(\n            all(\n                [\n                    np.array_equal(data, modified_df[col].values)\n                    for data, col in zip(plotted_data, modified_df.columns)\n                ]\n            )\n        )\n    def test_case_2(self):\n        # Scenario: DataFrame with columns 'a' and 'b' (no 'c').\n        np.random.seed(0)\n        data = {\"a\": np.random.randn(10), \"b\": np.random.randn(10)}\n        df = pd.DataFrame(data)\n        modified_df, ax = task_func(data)\n        # Assert that the modified DataFrame remains unchanged and plot is generated.\n        self.assertEqual(list(df.columns), list(modified_df.columns))\n        self.assertIsNotNone(ax)\n    def test_case_3(self):\n        # Scenario: Empty DataFrame\n        data = {}\n        df = pd.DataFrame(data)\n        modified_df, ax = task_func(data)\n        # Assert empty DataFrame and no plot.\n        self.assertTrue(modified_df.empty)\n        self.assertIsNone(ax)\n    def test_case_4(self):\n        # Scenario: DataFrame with single non-numeric column 'c'.\n        data = {\"c\": [\"apple\", \"banana\", \"cherry\"]}\n        df = pd.DataFrame(data)\n        modified_df, ax = task_func(data)\n        # Assert empty DataFrame after 'c' removal and no plot.\n        self.assertTrue(modified_df.empty)\n        self.assertIsNone(ax)\n    def test_case_5(self):\n        np.random.seed(0)\n        # Scenario: DataFrame with columns 'a', 'b', 'c', and non-numeric column 'd'.\n        data = {\n                \"a\": np.random.randn(10),\n                \"b\": np.random.randn(10),\n                \"c\": np.random.randn(10),\n                \"d\": [\n                    \"apple\",\n                    \"banana\",\n                    \"cherry\",\n                    \"date\",\n                    \"fig\",\n                    \"grape\",\n                    \"honeydew\",\n                    \"kiwi\",\n                    \"lime\",\n                    \"mango\",\n                ],\n            }\n        df = pd.DataFrame(\n            data\n        )\n        modified_df, ax = task_func(data)\n        # Assert column 'c' removal and plot data verification excluding non-numeric column 'd'.\n        self.assertNotIn(\"c\", modified_df.columns)\n        plotted_data = [line.get_ydata() for line in ax.get_lines()]\n        self.assertTrue(\n            all(\n                [\n                    np.array_equal(data, modified_df[col].values)\n                    for data, col in zip(plotted_data, modified_df.columns)\n                    if col != \"d\"\n                ]\n            )\n        )\n    def test_case_6(self):\n        # Scenario: Remove specified column.\n        np.random.seed(0)\n        data = {\n                \"a\": np.random.randn(10),\n                \"b\": np.random.randn(10),\n            }\n        df = pd.DataFrame(\n            data\n        )\n        modified_df, ax = task_func(df, column=\"a\")\n        self.assertNotIn(\"a\", modified_df.columns)\n        plotted_data = [line.get_ydata() for line in ax.get_lines()]\n        self.assertTrue(\n            all(\n                [\n                    np.array_equal(data, modified_df[col].values)\n                    for data, col in zip(plotted_data, modified_df.columns)\n                ]\n            )\n        )\n    def test_case_7(self):\n        # Scenario: Only non-numeric columns.\n        data = {\n                \"a\": [\"apple\", \"banana\"],\n                \"b\": [\"cherry\", \"date\"],\n                \"c\": [\"fig\", \"grape\"],\n            }\n        df = pd.DataFrame(\n            data\n        )\n        modified_df, ax = task_func(data)\n        self.assertNotIn(\"c\", modified_df.columns)\n        pd.testing.assert_frame_equal(df[[\"a\", \"b\"]], modified_df)\n        self.assertEqual(ax, None)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all possible combinations (with replacement) of three letters from the alphabet and save them in a pandas DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame with each row representing a unique combination of three letters.\nYou should write self-contained code starting with:\n```\nimport itertools\nimport string\nimport pandas as pd\ndef task_func():\n```",
        "gt": "import itertools\nimport string\nimport pandas as pd\ndef task_func():\n    LETTERS = list(string.ascii_lowercase)\n    combinations = list(itertools.product(LETTERS, repeat=3))\n\n    df = pd.DataFrame(combinations, columns=[\"Letter 1\", \"Letter 2\", \"Letter 3\"])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nfrom itertools import product\nimport string\nclass TestCases(unittest.TestCase):\n    \"\"\"Tests for the function task_func.\"\"\"\n    def test_combinations(self):\n        \"\"\"\n        Test if the function generates the correct combinations with replacement.\n        \"\"\"\n        correct_combinations = list(product(string.ascii_lowercase, repeat=3))\n        result_df = task_func()\n        result_combinations = [tuple(row) for row in result_df.values]\n        self.assertEqual(\n            result_combinations,\n            correct_combinations,\n            \"The combinations are not correct.\",\n        )\n    def test_columns(self):\n        \"\"\"\n        Test if the DataFrame has the correct column names.\n        \"\"\"\n        result_df = task_func()\n        self.assertEqual(\n            list(result_df.columns),\n            [\"Letter 1\", \"Letter 2\", \"Letter 3\"],\n            \"Column names are not correct.\",\n        )\n    def test_shape(self):\n        \"\"\"\n        Test if the shape of the DataFrame is correct.\n        \"\"\"\n        result_df = task_func()\n        self.assertEqual(\n            result_df.shape,\n            (26**3, 3),\n            \"Shape of the DataFrame is not correct.\",\n        )\n    def test_data_type(self):\n        \"\"\"\n        Test if all DataFrame columns contain strings.\n        \"\"\"\n        result_df = task_func()\n        for col in result_df.columns:\n            self.assertTrue(\n                result_df[col].apply(lambda x: isinstance(x, str)).all(),\n                f\"Column {col} does not contain all strings.\",\n            )\n    def test_no_duplicates(self):\n        \"\"\"\n        Test if there are no duplicate combinations in the DataFrame.\n        \"\"\"\n        result_df = task_func()\n        result_combinations = [tuple(row) for row in result_df.values]\n        self.assertEqual(\n            len(result_combinations),\n            len(set(result_combinations)),\n            \"Found duplicate combinations.\",\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Finds the row indices in a numpy array where the first cell matches target_value \"332\" Performs statistical analysis on these indices and plots their distribution. Return 'N/A' for all stats if no target value found.\nThe function should output with:\n    tuple: A tuple with mean, variance, skewness, and kurtosis of the indices, or\n    'N/A' if statistical analysis cannot be performed.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Constants\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Constants\nTARGET_VALUE = '332'\nARRAY = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '332']])\ndef task_func(target_value=TARGET_VALUE, array=ARRAY):\n    indices = np.where(array[:, 0] == target_value)[0]\n\n    # Check if statistical analysis is possible\n    if len(indices) < 2:\n        # Not enough data for meaningful statistical analysis\n        plt.hist(indices, bins='auto')  # Plotting can still occur\n        plt.show()\n        return (np.mean(indices), 'N/A', 'N/A', 'N/A') if indices.size else ('N/A', 'N/A', 'N/A', 'N/A')\n\n    # Perform statistical analysis\n    mean = np.mean(indices)\n    variance = np.var(indices)\n    skewness = stats.skew(indices)\n    kurtosis = stats.kurtosis(indices)\n\n    # Plot the distribution\n    plt.hist(indices, bins='auto')\n    plt.title('Distribution of Indices')\n    plt.xlabel('Indices')\n    plt.ylabel('Frequency')\n    plt.show()\n\n    return mean, variance, skewness, kurtosis",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_statistics_and_plot(self):\n        \"\"\"Test the statistical analysis and plotting.\"\"\"\n        result = task_func()\n        self.assertIsInstance(result, tuple, \"The result should be a tuple.\")\n        self.assertEqual(len(result), 4, \"The tuple should contain four elements.\")\n        # Check that mean and variance are numbers or 'N/A'\n        self.assertTrue(isinstance(result[0], (float, int)) or result[0] == 'N/A', \"Mean should be a number or 'N/A'.\")\n        self.assertTrue(isinstance(result[1], (float, int)) or result[1] == 'N/A', \"Variance should be a number or 'N/A'.\")\n    def test_empty_array(self):\n        \"\"\"Test with an array that has no matching target value.\"\"\"\n        ARRAY1 = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['33', '33', '2'], ['33', '22', '3']])\n        result = task_func(array=ARRAY1)\n        self.assertEqual(result, ('N/A', 'N/A', 'N/A', 'N/A'), \"Should return 'N/A' for all stats if no target value found.\")\n    def test_single_match(self):\n        \"\"\"Test with an array that has exactly one matching target value.\"\"\"\n        ARRAY2 = np.array([['0', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['33', '22', '3']])\n        result = task_func(array=ARRAY2)\n        self.assertEqual(len(result), 4, \"The tuple should contain four elements.\")\n        self.assertNotEqual(result[0], 'N/A', \"Mean should not be 'N/A' for a single match.\")\n        self.assertEqual(result[1], 'N/A', \"Variance should be 'N/A' for a single match.\")\n    def test_multiple_matches(self):\n        \"\"\"Test with an array that has multiple matching target values.\"\"\"\n        global ARRAY\n        ARRAY = np.array([['332', '1', '2'], ['a', 'bb', 'ccc'], ['332', '33', '2'], ['332', '22', '3']])\n        result = task_func()\n        self.assertNotEqual(result, ('N/A', 'N/A', 'N/A', 'N/A'), \"Should not return 'N/A' for all stats if multiple targets found.\")\n    def test_non_uniform_distribution(self):\n        \"\"\"Test with an array that results in a non-uniform distribution of target value indices.\"\"\"\n        global ARRAY\n        # Ensure a clear non-uniform distribution of indices\n        ARRAY = np.array(\n            [['332', 'x', 'y'], ['a', 'bb', 'ccc'], ['b', '22', '3'], ['332', '33', '2'], ['332', '44', '5']])\n        result = task_func()\n        # Validate statistical analysis was performed\n        self.assertIsInstance(result, tuple, \"The result should be a tuple.\")\n        self.assertEqual(len(result), 4, \"The tuple should contain four elements.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Executes a script to produce a CSV, reads the CSV, and plots a bar graph from the data. This function runs the provided script, which should generate a CSV file at the specified output path. The CSV must have exactly two columns. It then reads this CSV into a DataFrame and plots a bar graph, setting the first column as the x-axis labels and the second column as the bar heights. It will raise ValueError if the script fails to execute, or if the produced CSV is not valid.\nThe function should raise the exception for: ValueError: If the script fails to execute, the CSV is invalid, or the CSV does not contain exactly 2 columns.\nThe function should output with:\n    df (pd.DataFrame): DataFrame containing the data from the CSV.\n    ax (matplotlib.axes._axes.Axes): Axes object of the plotted bar graph.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport pandas as pd\ndef task_func(script_path, output_file_path):\n```",
        "gt": "import subprocess\nimport pandas as pd\ndef task_func(script_path, output_file_path):\n    try:\n        subprocess.run([script_path], check=True)\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        raise ValueError(\n            \"Error occurred while executing the script or script not found\"\n        )\n\n    df = pd.read_csv(output_file_path)\n\n    if len(df.columns) != 2:\n        raise ValueError(\"CSV file must contain exactly 2 columns\")\n\n    ax = df.plot(kind=\"bar\", x=df.columns[0], legend=False)\n    ax.set_xlabel(df.columns[0])\n\n    return df, ax",
        "test": "import unittest\nimport os\nimport tempfile\n# import matplotlib\n# Force matplotlib to not use any Xwindows backend.\n# matplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.script_path = os.path.join(self.temp_dir.name, \"script.sh\")\n        self.output_path = os.path.join(self.temp_dir.name, \"output.csv\")\n        self.valid_csv_content = [\n            f'echo \"Name,Value\" > {self.output_path}\\n',\n            f'echo \"A,1\" >> {self.output_path}\\n',\n            f'echo \"B,2\" >> {self.output_path}\\n',\n            f'echo \"C,3\" >> {self.output_path}\\n',\n        ]\n    def tearDown(self):\n        self.temp_dir.cleanup()\n        plt.close(\"all\")\n    def _create_script(self, lines):\n        with open(self.script_path, \"w\") as file:\n            file.write(\"#!/bin/bash\\n\")\n            file.writelines(lines)\n        os.chmod(self.script_path, 0o755)\n    def _validate_y_tick_labels(self, ax, df):\n        plt.gcf().canvas.draw()  # In older versions, need to force matplotlib to render\n        y_tick_labels = [\n            float(label.get_text())\n            for label in ax.get_yticklabels()\n            if label.get_text()\n        ]\n        self.assertTrue(\n            all(\n                y_tick_labels[i] <= y_tick_labels[i + 1]\n                for i in range(len(y_tick_labels) - 1)\n            ),\n            \"Y-tick labels are not in increasing order\",\n        )\n        self.assertTrue(\n            min(y_tick_labels) <= df[df.columns[1]].min() <= max(y_tick_labels)\n            and min(y_tick_labels) <= df[df.columns[1]].max() <= max(y_tick_labels),\n            \"Y-tick labels do not cover the range of the data\",\n        )\n    def test_case_1(self):\n        # Test plot generation\n        self._create_script(self.valid_csv_content)\n        df, ax = task_func(self.script_path, self.output_path)\n        expected_labels = df.iloc[:, 0].tolist()\n        x_tick_labels = [tick.get_text() for tick in ax.get_xticklabels()]\n        # Expected return object type\n        self.assertIsInstance(ax, plt.Axes)\n        # Expected number of bars\n        self.assertEqual(len(ax.patches), df.shape[0])\n        # x-tick labels match the first column of the DataFrame\n        self.assertListEqual(x_tick_labels, expected_labels)\n        self._validate_y_tick_labels(ax, df)\n    def test_case_2(self):\n        # Test basic csv\n        expected_columns = [\"Name\", \"Value\"]\n        expected_data = {\"Name\": [\"A\", \"B\", \"C\"], \"Value\": [1, 2, 3]}\n        self._create_script(self.valid_csv_content)\n        df, ax = task_func(self.script_path, self.output_path)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (3, 2))\n        self._validate_y_tick_labels(ax, df)\n        self.assertListEqual(df.columns.tolist(), expected_columns)\n        for column, expected_values in expected_data.items():\n            self.assertTrue(all(df[column] == expected_values))\n    def test_case_3(self):\n        # Test handling of script execution failure\n        self._create_script([\"exit 1\\n\"])\n        with self.assertRaises(ValueError):\n            task_func(self.script_path, self.output_path)\n    def test_case_4(self):\n        # Test handling of files with too many columns\n        content = [\n            f'echo \"Name,Value,Extra\" > {self.output_path}\\n',\n            f'echo \"A,1,Ignore\" >> {self.output_path}\\n',\n            f'echo \"B,2,Ignore\" >> {self.output_path}\\n',\n        ]\n        self._create_script(content)\n        with self.assertRaises(ValueError):\n            task_func(self.script_path, self.output_path)\n    def test_case_5(self):\n        # Test handling of files with too few columns\n        content = [\n            f'echo \"Name\" > {self.output_path}\\n',\n            f'echo \"A\" >> {self.output_path}\\n',\n            f'echo \"B\" >> {self.output_path}\\n',\n        ]\n        self._create_script(content)\n        with self.assertRaises(ValueError):\n            task_func(self.script_path, self.output_path)\n    def test_case_6(self):\n        # Test handling of empty file\n        content = [f\"> {self.output_path}\\n\"]\n        self._create_script(content)\n        with self.assertRaises(ValueError):\n            task_func(self.script_path, self.output_path)\n    def test_case_7(self):\n        # Test handling non-numeric values\n        content = [\n            f'echo \"Name,Value\" > {self.output_path}\\n',\n            f'echo \"A,NonNumeric\" >> {self.output_path}\\n',\n            f'echo \"B,2\" >> {self.output_path}\\n',\n        ]\n        self._create_script(content)\n        with self.assertRaises(TypeError):\n            task_func(self.script_path, self.output_path)\n    def test_case_8(self):\n        # Test handling missing values\n        content = [\n            f'echo \"Name,Value\" > {self.output_path}\\n',\n            f'echo \"A,\" >> {self.output_path}\\n',\n            f'echo \"B,2\" >> {self.output_path}\\n',\n        ]\n        self._create_script(content)\n        df, _ = task_func(self.script_path, self.output_path)\n        self.assertTrue(df.isnull().values.any())\n        self.assertEqual(df.shape, (2, 2))\n    def test_case_9(self):\n        # Handle handling of non-exitent script\n        with self.assertRaises(ValueError):\n            task_func(\n                os.path.join(self.temp_dir.name, \"invalid_script_nonexist.sh\"),\n                self.output_path,\n            )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates random data points to plot bar charts for each in a given list of plot names, then saves them in a specified directory. This function takes a list of plot names, for each generating 10 random data points in [0, 1) to create a bar chart, then saves the bar charts as .png files in the specified directory, creating the directory if it does not exist. >>> task_func(['First Plot', 'Second Plot'], './another_folder/') ['First_Plot.png', 'Second_Plot.png']\nNote that: This function deduplicates mystrings while maintaining its original order. Random data points for bar charts are generated in the range [0, 1). Each bar chart contains 10 data points.\nThe function should raise the exception for: FileNotFoundError: If the provided directory path does not exist and cannot be created.\nThe function should output with:\n    list: Names of the files where the plots are saved. Each file corresponds to a title from `mystrings`.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport os\ndef task_func(mystrings, folder_path, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n\n    saved_plots = []\n    processed_names = set()\n\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path, exist_ok=True)\n\n    for name in mystrings:\n        if name in processed_names:\n            continue\n        data = np.random.rand(10)\n        plt.bar(range(len(data)), data)\n        plt.title(name)\n        file_name = name.replace(\" \", \"_\") + \".png\"\n        plt.savefig(os.path.join(folder_path, file_name))\n        saved_plots.append(file_name)\n        processed_names.add(name)\n\n    return saved_plots",
        "test": "import unittest\nimport os\nimport matplotlib.pyplot as plt\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = 'test_images'\n        \n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n    def test_case_1(self):\n        # Test with a list of two plot names\n        output = task_func([\"Plot 1\", \"Plot 2\"], self.test_dir, seed=1)\n        expected = [\"Plot_1.png\", \"Plot_2.png\"]\n        self.assertEqual(output, expected)\n        for file_name in expected:\n            self.assertTrue(os.path.exists(os.path.join(self.test_dir, file_name)))\n    def test_case_2(self):\n        # Test directory creation if not exists\n        path = os.path.join(self.test_dir, \"foo\", \"bar\", \"temp\")\n        self.assertFalse(os.path.exists(path))\n        output = task_func([\"Test A\", \"Test B\", \"Test C\"], path, seed=2)\n        expected = [\"Test_A.png\", \"Test_B.png\", \"Test_C.png\"]\n        self.assertEqual(output, expected)\n        for file_name in expected:\n            self.assertTrue(os.path.exists(os.path.join(path, file_name)))\n    def test_case_3(self):\n        # Test with an empty list of plot names to ensure no files are created.\n        output = task_func([], self.test_dir, seed=3)\n        self.assertEqual(output, [])\n        self.assertEqual(len(os.listdir(self.test_dir)), 0)\n    def test_case_4(self):\n        # Test with a list of plot names containing special characters.\n        output = task_func([\"Test@A\", \"Test#B\", \"Test&C\"], self.test_dir, seed=4)\n        expected = [\"Test@A.png\", \"Test#B.png\", \"Test&C.png\"]\n        self.assertEqual(output, expected)\n        for file_name in expected:\n            self.assertTrue(os.path.exists(os.path.join(self.test_dir, file_name)))\n    def test_case_5(self):\n        # Test with a single-element list of plot names, ensuring the function can handle minimal input.\n        output = task_func([\"Single Plot\"], self.test_dir, seed=5)\n        expected = [\"Single_Plot.png\"]\n        self.assertEqual(output, expected)\n        for file_name in expected:\n            self.assertTrue(os.path.exists(os.path.join(self.test_dir, file_name)))\n    def test_case_6(self):\n        # Test with name deduplication\n        output = task_func([\"Single Plot\"] * 5, self.test_dir, seed=6)\n        expected = [\"Single_Plot.png\"]\n        self.assertEqual(output, expected)\n        for file_name in expected:\n            self.assertTrue(os.path.exists(os.path.join(self.test_dir, file_name)))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Visualize a 2D numeric array (matrix) as a heatmap using matplotlib, specifying a cmap for the color mapping and interpolation to control the pixel rendering.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object with the heatmap of th 'hot' colormap.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(matrix):\n    df = pd.DataFrame(matrix)\n\n    fig, ax = plt.subplots()\n    ax.imshow(df, cmap='hot', interpolation='nearest')\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        ax = task_func(matrix)\n        \n        # Asserting the return type\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        \n        # Asserting the colormap used\n        self.assertEqual(ax.images[0].get_cmap().name, 'hot')\n    def test_case_2(self):\n        matrix = np.array([[10, 20], [30, 40]])\n        ax = task_func(matrix)\n        \n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.images[0].get_cmap().name, 'hot')\n    def test_case_3(self):\n        matrix = np.array([[1, 1], [1, 1], [1, 1]])\n        ax = task_func(matrix)\n        \n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.images[0].get_cmap().name, 'hot')\n    def test_case_4(self):\n        matrix = np.array([[1]])\n        ax = task_func(matrix)\n        \n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.images[0].get_cmap().name, 'hot')\n    def test_case_5(self):\n        matrix = np.random.rand(5, 5)  # Random 5x5 matrix\n        ax = task_func(matrix)\n        \n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.images[0].get_cmap().name, 'hot')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the occurrence of a particular key in all json files in a specified directory and return a dictionary with the values of the specified key and their counts. >>> task_func(json_files_path=directory, key='product') {'apple': 1, 'banana': 1}\nThe function should output with:\n    dict: A dictionary with values of the key as keys and their counts as values.\nYou should write self-contained code starting with:\n```\nimport os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n```",
        "gt": "import os\nimport json\nfrom collections import Counter\ndef task_func(json_files_path='./json_files/', key='name'):\n    key_values = []\n\n    for filename in os.listdir(json_files_path):\n        if filename.endswith('.json'):\n            file_path = os.path.join(json_files_path, filename)\n            with open(file_path, 'r') as json_file:\n                data = json.load(json_file)\n                if key in data:\n                    key_values.append(data[key])\n\n    return dict(Counter(key_values))",
        "test": "import unittest\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.mock_data_directory = tempfile.mkdtemp()\n        \n        # Create mock data\n        mock_data = [\n            {'name': 'John', 'city': 'New York'},\n            {'name': 'Jane', 'city': 'Los Angeles'},\n            {'name': 'John', 'city': 'New York'},\n            {'name': 'Alice', 'city': 'Chicago'},\n            {'name': 'Bob', 'city': 'New York'},\n            {'name': 'Alice', 'city': 'Chicago'},\n            {'name': 'Alice', 'city': 'Chicago'},\n            {'city': 'Los Angeles'},\n            {'city': 'Chicago'},\n            {'city': 'New York'},\n            {'city': 'New York'},\n            {'city': 'New York'},\n        ]\n        \n        for i, data in enumerate(mock_data):\n            with open(f\"{self.mock_data_directory}/{i}.json\", 'w') as file:\n                json.dump(data, file)\n    \n    def test_case_1(self):\n        # Test with mock data directory and 'name' key\n        result = task_func(self.mock_data_directory, 'name')\n        \n        # To verify the result, we need to read all JSON files and count the occurrences of the 'name' key values\n        expected_counts = []\n        for filename in os.listdir(self.mock_data_directory):\n            if filename.endswith('.json'):\n                with open(os.path.join(self.mock_data_directory, filename), 'r') as file:\n                    data = json.load(file)\n                    if 'name' in data:\n                        expected_counts.append(data['name'])\n                        \n        expected_result = dict(Counter(expected_counts))\n        \n        self.assertDictEqual(result, expected_result)\n    def test_case_2(self):\n        # Test with a non-existent key\n        result = task_func(self.mock_data_directory, 'non_existent_key')\n        self.assertDictEqual(result, {})\n    def test_case_3(self):\n        # Test with another key present in our mock data ('city' in this case)\n        result = task_func(self.mock_data_directory, 'city')\n        \n        # To verify the result, we need to read all JSON files and count the occurrences of the 'city' key values\n        expected_counts = []\n        for filename in os.listdir(self.mock_data_directory):\n            if filename.endswith('.json'):\n                with open(os.path.join(self.mock_data_directory, filename), 'r') as file:\n                    data = json.load(file)\n                    if 'city' in data:\n                        expected_counts.append(data['city'])\n                        \n        expected_result = dict(Counter(expected_counts))\n        \n        self.assertDictEqual(result, expected_result)\n    def test_case_4(self):\n        # Test with a directory that doesn't contain any JSON files\n        empty_directory = f\"{self.mock_data_directory}/empty_directory/\"\n        os.makedirs(empty_directory, exist_ok=True)\n        \n        result = task_func(empty_directory, 'name')\n        self.assertDictEqual(result, {})\n    def test_case_5(self):\n        # Test with a directory that doesn't exist\n        non_existent_directory = f\"{self.mock_data_directory}/non_existent_directory/\"\n        \n        with self.assertRaises(FileNotFoundError):\n            task_func(non_existent_directory, 'name')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Uncompress a gzip-compressed hexadecimal string and decrypt the result to UTF-8.\nThe function should output with:\n    decoded_string (str): The decoded and decompressed string in UTF-8 format, or an error message.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n```",
        "gt": "import binascii\nimport io\nimport gzip\ndef task_func(compressed_hex):\n    try:\n        compressed_bytes = binascii.unhexlify(compressed_hex)\n        decompressed_bytes = gzip.GzipFile(fileobj=io.BytesIO(compressed_bytes)).read()\n        decoded_string = decompressed_bytes.decode('utf-8')\n        return decoded_string\n    except gzip.BadGzipFile as e:\n        return \"Error during decompression: \" + str(e)",
        "test": "import unittest\nimport binascii\nimport io\nimport gzip\ndef generate_compressed_hex(original_string):\n    \"\"\"\n    Helper function to generate a gzip-compressed hexadecimal string from an original string.\n    \"\"\"\n    compressed_bytes = gzip.compress(original_string.encode('utf-8'))\n    compressed_hex = binascii.hexlify(compressed_bytes).decode('utf-8')\n    return compressed_hex\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        # Test with the word \"HELLO\"\n        compressed_hex = generate_compressed_hex(\"HELLO\")\n        self.assertEqual(task_func(compressed_hex), \"HELLO\")\n    def test_2(self):\n        # Test with a single character \"A\"\n        compressed_hex = generate_compressed_hex(\"A\")\n        self.assertEqual(task_func(compressed_hex), \"A\")\n    def test_3(self):\n        # Test with numbers \"12345\"\n        compressed_hex = generate_compressed_hex(\"12345\")\n        self.assertEqual(task_func(compressed_hex), \"12345\")\n    def test_4(self):\n        # Test with special characters \"!@#\"\n        compressed_hex = generate_compressed_hex(\"!@#\")\n        self.assertEqual(task_func(compressed_hex), \"!@#\")\n    def test_5(self):\n        # Test with an empty string\n        compressed_hex = generate_compressed_hex(\"\")\n        self.assertEqual(task_func(compressed_hex), \"\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Splits a list in the 'Value' column of a DataFrame into several columns, scales these columns using StandardScaler, and optionally returned the scaled data using a bar chart. The 'Date' column is converted to datetime and used as the index in the plot.\nNote that: This function use \"Scaled Values Over Time\" for the plot title. This function use \"Date\" and \"Scaled Value\" as the xlabel and ylabel respectively.\nThe function should raise the exception for: This function will raise KeyError if the DataFrame does not have the 'Date' and 'Value' columns.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the 'Date' column and additional columns for each element in the original 'Value' list,\n    where these columns contain the scaled values.\n    Axes (optional): A matplotlib Axes object containing the bar chart, returned if 'plot' is True.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nCOLUMNS = ['Date', 'Value']\ndef task_func(df, plot=False):\n    df['Date'] = pd.to_datetime(df['Date'])\n    df = pd.concat([df['Date'], df['Value'].apply(pd.Series)], axis=1)\n    \n    scaler = StandardScaler()\n    df.iloc[:,1:] = scaler.fit_transform(df.iloc[:,1:])\n    \n    if plot:\n        plt.figure()\n        ax = df.set_index('Date').plot(kind='bar', stacked=True)\n        plt.title('Scaled Values Over Time')\n        plt.xlabel('Date')\n        plt.ylabel('Scaled Value')\n        return df, ax\n\n    \n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_normal_case(self):\n        # Normal case with valid DataFrame\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        result= task_func(df)\n        self.assertEqual(result.shape, (2, 4))  # Checking if the DataFrame has the correct shape\n        plt.close()\n    def test_varying_length_lists(self):\n        # DataFrame where 'Value' contains lists of varying lengths\n        df = pd.DataFrame([['2021-01-01', [8, 10]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        result = task_func(df)\n        self.assertEqual(result.shape, (2, 4))  # The function should handle varying lengths\n        plt.close()\n    def test_varying_length_list_2(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        result = task_func(df)\n        self.assertEqual(result.empty, False)  \n        plt.close()\n    def test_missing_columns(self):\n        # DataFrame missing 'Value' column\n        df = pd.DataFrame([['2021-01-01'], ['2021-01-02']], columns=['Date'])\n        with self.assertRaises(KeyError):\n            task_func(df)  # Expecting a KeyError due to missing 'Value' column\n        plt.close()\n    def test_empty(self):\n        df = pd.DataFrame()\n        with self.assertRaises(KeyError):\n            task_func(df)  \n        plt.close()\n    def test_plot_attributes(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        _, ax = task_func(df, True)\n        self.assertEqual(ax.get_title(), 'Scaled Values Over Time')\n        self.assertEqual(ax.get_xlabel(), 'Date')\n        self.assertEqual(ax.get_ylabel(), 'Scaled Value')\n        plt.close()\n    def test_plot_point(self):\n        df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value'])\n        result, ax = task_func(df, True)\n        list_result = []\n        for column in result:\n            if column != \"Date\":\n                columnSeriesObj = result[column]\n                list_result.extend(columnSeriesObj.values)\n        bar_heights = [rect.get_height() for rect in ax.patches]\n        self.assertListEqual(bar_heights, list_result)\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Move all files with a particular extension from one directory to another.\nThe function should output with:\n    files_moved (int): The number of files moved.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n```",
        "gt": "import os\nimport shutil\ndef task_func(src_dir, dest_dir, extension):\n    files_moved = 0\n\n    for file_name in os.listdir(src_dir):\n        if file_name.endswith(extension):\n            shutil.move(os.path.join(src_dir, file_name), os.path.join(dest_dir, file_name))\n            files_moved += 1\n\n    return files_moved",
        "test": "import os\nimport shutil\nimport tempfile\nimport unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.src_dir = tempfile.mkdtemp()\n        self.dest_dir = tempfile.mkdtemp()\n    def tearDown(self):\n        shutil.rmtree(self.src_dir)\n        shutil.rmtree(self.dest_dir)\n    def test_case_1(self):\n        # Testing with .txt files to ensure correct number of .txt files are moved\n        file_names = [\"file1.txt\", \"file2.txt\", \"file3.doc\", \"file4.txt\", \"file5.png\"]\n        for fname in file_names:\n            open(os.path.join(self.src_dir, fname), 'a').close()\n        moved_files_count = task_func(self.src_dir, self.dest_dir, \".txt\")\n        self.assertEqual(moved_files_count, 3)\n    def test_case_2(self):\n        # Testing with .doc files to ensure correct number of .doc files are moved\n        file_names = [\"file1.doc\", \"file2.doc\", \"file3.doc\", \"file4.doc\"]\n        for fname in file_names:\n            open(os.path.join(self.src_dir, fname), 'a').close()\n        moved_files_count = task_func(self.src_dir, self.dest_dir, \".doc\")\n        self.assertEqual(moved_files_count, 4)\n    def test_case_3(self):\n        # Testing with no matching files to ensure zero files are moved\n        file_names = [\"file1.png\", \"file2.jpg\", \"file3.jpeg\"]\n        for fname in file_names:\n            open(os.path.join(self.src_dir, fname), 'a').close()\n        moved_files_count = task_func(self.src_dir, self.dest_dir, \".txt\")\n        self.assertEqual(moved_files_count, 0)\n    def test_case_4(self):\n        # Testing with empty source directory to ensure zero files are moved\n        moved_files_count = task_func(self.src_dir, self.dest_dir, \".txt\")\n        self.assertEqual(moved_files_count, 0)\n    def test_case_5(self):\n        # Testing with mixed file extensions to ensure correct number of .txt files are moved\n        file_names = [\"file1.txt\", \"file2.txt\", \"file3.doc\", \"file4.jpeg\", \"file5.txt\", \"file6.png\"]\n        for fname in file_names:\n            open(os.path.join(self.src_dir, fname), 'a').close()\n        moved_files_count = task_func(self.src_dir, self.dest_dir, \".txt\")\n        self.assertEqual(moved_files_count, 3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Loads a DLL file from a given filepath, calculates its MD5 and SHA256 hashes, and prints these hashes in hexadecimal format. This function is a demonstration of file handling, usage of the hashlib library for hash calculations, and binascii for hexadecimal conversion. Note that the actual operations performed on the loaded DLL are limited to hash calculation.\nThe function should output with:\n    str: The actual name of the loaded DLL file.\nYou should write self-contained code starting with:\n```\nimport ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n```",
        "gt": "import ctypes\nimport hashlib\nimport binascii\ndef task_func(filepath):\n    lib = ctypes.CDLL(filepath)\n\n    with open(filepath, 'rb') as f:\n        data = f.read()\n\n    md5_hash = hashlib.md5(data).digest()\n    print(f'MD5 Hash: {binascii.hexlify(md5_hash).decode()}')\n\n    sha256_hash = hashlib.sha256(data).digest()\n    print(f'SHA256 Hash: {binascii.hexlify(sha256_hash).decode()}')\n\n    return lib._name",
        "test": "import unittest\nfrom unittest.mock import patch\nimport tempfile\nimport os\nimport sys\nfrom io import StringIO\nimport binascii\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary DLL file\n        self.temp_file = tempfile.NamedTemporaryFile(suffix='.dll', delete=False)\n        self.filepath = self.temp_file.name\n        # Redirect stdout to capture print statements\n        self.original_stdout = sys.stdout\n        sys.stdout = StringIO()\n    def test_file_existence(self):\n        self.assertTrue(os.path.exists(self.filepath))\n    def test_invalid_file_path(self):\n        with self.assertRaises(OSError):\n            task_func('invalid_path.dll')\n    @patch('ctypes.CDLL')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open, read_data=b'test data')\n    @patch('hashlib.md5')\n    @patch('hashlib.sha256')\n    def test_dll_name_returned(self, mock_sha256, mock_md5, mock_open, mock_cdll):\n        \"\"\"Test if the function returns the name of the loaded DLL file.\"\"\"\n        mock_md5.return_value.digest.return_value = b'\\x93\\x15\\x98\\x3f\\xcd\\xb4\\xcc\\xcb\\x28\\x7b\\xcc\\xdb\\xdd\\x4e\\x8a\\x45'  # Mock MD5 digest\n        mock_sha256.return_value.digest.return_value = b'\\xd7\\xa8\\xfb\\x48\\xd2\\x8d\\x1d\\x73\\xa0\\x34\\x6b\\xbf\\x40\\x41\\xdf\\x98\\xc2\\x50\\x1d\\x4a\\xe4\\x88\\x9b\\x93\\x4f\\xaa\\x63\\xf7\\xaf\\x67\\xe9\\xb1'  # Mock SHA256 digest\n        mock_cdll.return_value._name = 'test.dll'\n        dll_name = task_func(self.filepath)  # Replace 'task_func_module.task_func' with the actual path to your task_func function\n        self.assertEqual(dll_name, 'test.dll')\n    @patch('ctypes.CDLL')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open, read_data=b'test data')\n    @patch('hashlib.md5')\n    def test_md5_hash_printed(self, mock_md5, mock_open, mock_cdll):\n        \"\"\"Test if the MD5 hash is correctly calculated and printed.\"\"\"\n        expected_hash = b'\\x93\\x15\\x98\\x3f\\xcd\\xb4\\xcc\\xcb\\x28\\x7b\\xcc\\xdb\\xdd\\x4e\\x8a\\x45'\n        mock_md5.return_value.digest.return_value = expected_hash\n        with patch('builtins.print') as mock_print:\n            task_func('path/to/test.dll')\n            expected_md5_output = f'MD5 Hash: {binascii.hexlify(expected_hash).decode()}'\n            mock_print.assert_any_call(expected_md5_output)\n    @patch('ctypes.CDLL')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open, read_data=b'test data')\n    @patch('hashlib.sha256')\n    def test_sha256_hash_printed(self, mock_sha256, mock_open, mock_cdll):\n        \"\"\"Test if the SHA256 hash is correctly calculated and printed.\"\"\"\n        expected_hash = b'\\xd7\\xa8\\xfb\\x48\\xd2\\x8d\\x1d\\x73\\xa0\\x34\\x6b\\xbf\\x40\\x41\\xdf\\x98\\xc2\\x50\\x1d\\x4a\\xe4\\x88\\x9b\\x93\\x4f\\xaa\\x63\\xf7\\xaf\\x67\\xe9\\xb1'\n        mock_sha256.return_value.digest.return_value = expected_hash\n        with patch('builtins.print') as mock_print:\n            task_func('path/to/test.dll')\n            expected_sha256_output = f'SHA256 Hash: {binascii.hexlify(expected_hash).decode()}'\n            mock_print.assert_any_call(expected_sha256_output)\n    def tearDown(self):\n        os.remove(self.filepath)\n        sys.stdout = self.original_stdout",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random sine wave function and draw it on a provided matplotlib polar subplot 'ax'. The function randomly selects a color from a predefined list and sets a random position for radial labels.\nThe function should output with:\n    str: The color code (as a string) of the plotted function.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\n# Constants\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n```",
        "gt": "import numpy as np\nimport random\n# Constants\nCOLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\ndef task_func(ax):\n\n    x = np.linspace(0, 2 * np.pi, 1000)\n    y = np.sin(random.randint(1, 10)*x)\n\n    color = random.choice(COLORS)\n    ax.plot(x, y, color=color)\n    ax.set_rlabel_position(random.randint(0, 180))\n\n    return color",
        "test": "import matplotlib.pyplot as plt\nimport unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_color_returned(self):\n        random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        color = task_func(ax)\n        self.assertIn(color, ['b', 'g', 'r', 'c', 'm', 'y', 'k'])\n        plt.close()\n    def test_random_color(self):\n        random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        colors = set(task_func(ax) for _ in range(10))\n        self.assertTrue(len(colors) > 1)\n        plt.close()\n    def test_plot_exists(self):\n        random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        task_func(ax)\n        self.assertTrue(len(ax.lines) > 0)\n        plt.close()\n    def test_plot_properties(self):\n        random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        color = task_func(ax)\n        line = ax.lines[0]\n        self.assertEqual(line.get_color(), color)\n        plt.close()\n    def test_label_position(self):\n        random.seed(0)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        task_func(ax)\n        position = ax.get_rlabel_position()\n        self.assertTrue(position>1.0)\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts and visualizes numerical data from a JSON structure based on a specified path of keys.\nThe function should raise the exception for: KeyError: If a specified key is not found. ValueError: If no numeric data is found, or the data string is empty or corrupted.\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure showing a boxplot of the data values.\nYou should write self-contained code starting with:\n```\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n```",
        "gt": "import json\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\ndef task_func(json_data: str, key_path: list):\n    try:\n        data = json.loads(json_data)\n        for key in key_path:\n            data = data[key]\n        values = np.fromstring(data, sep=\",\")\n\n        if values.size == 0:\n            raise ValueError(\"No numeric data found or empty data string.\")\n        df = pd.DataFrame(values, columns=[\"Values\"])\n\n        fig, ax = plt.subplots()\n        sns.boxplot(data=df, ax=ax)\n        return fig\n\n    except json.decoder.JSONDecodeError as e:\n        raise ValueError(f\"Input malformed: {e}\")\n    except KeyError as e:\n        raise KeyError(f\"Key error occurred: {e}\")\n    except ValueError as e:\n        raise ValueError(f\"Value error occurred: {e}\")",
        "test": "import unittest\nimport warnings\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_correct_data_extraction(self):\n        \"\"\"Tests correct extraction and visualization from valid JSON data.\"\"\"\n        json_data = '{\"level1\":{\"level2\":{\"data\":\"1,2,3,4\"}}}'\n        key_path = [\"level1\", \"level2\", \"data\"]\n        fig = task_func(json_data, key_path)\n        self.assertIsInstance(fig, plt.Figure)\n    def test_missing_key_error(self):\n        \"\"\"Tests response to missing key in JSON data.\"\"\"\n        json_data = '{\"level1\":{}}'\n        key_path = [\"level1\", \"level2\", \"data\"]\n        with self.assertRaises(KeyError):\n            task_func(json_data, key_path)\n    def test_corrupted_json(self):\n        \"\"\"Tests response to malformed data.\"\"\"\n        key_path = [\"level1\", \"level2\", \"data\"]\n        for x in [\"{'level1':{}}\", '{\"level1\":{\"level' \"invalid\", \"\"]:\n            with self.assertRaises(ValueError):\n                task_func(x, key_path)\n    def test_empty_data_value_error(self):\n        \"\"\"Tests response to empty numeric data.\"\"\"\n        json_data = '{\"level1\":{\"level2\":{\"data\":\"\"}}}'\n        key_path = [\"level1\", \"level2\", \"data\"]\n        with self.assertRaises(ValueError):\n            task_func(json_data, key_path)\n    def test_non_numeric_data_value_error(self):\n        \"\"\"Tests response to non-numeric data.\"\"\"\n        json_data = '{\"level1\":{\"level2\":{\"data\":\"a,b,c\"}}}'\n        key_path = [\"level1\", \"level2\", \"data\"]\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            with self.assertRaises(ValueError):\n                task_func(json_data, key_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a list of IP addresses, this function returns a dictionary mapping each valid IP address to its respective hostname. If the hostname cannot be determined, the value will be None.\nThe function should output with:\n    dict: A dictionary with IP addresses as keys and their hostnames as values. If the hostname cannot be determined,\n    the value will be None.\nYou should write self-contained code starting with:\n```\nimport re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n```",
        "gt": "import re\nimport socket\ndef task_func(ip_addresses: list) -> dict:\n\n    \n    IP_REGEX = r'[0-9]+(?:\\.[0-9]+){3}'\n    hostnames = {}\n    for ip in ip_addresses:\n        if re.match(IP_REGEX, ip):\n            try:\n                hostname = socket.gethostbyaddr(ip)[0]\n                hostnames[ip] = hostname\n            except (socket.herror, socket.gaierror):\n                hostnames[ip] = None\n    return hostnames",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result = task_func(['8.8.8.8', '8.8.4.4'])\n        expected = {'8.8.8.8': 'dns.google', '8.8.4.4': 'dns.google'}\n        self.assertDictEqual(result, expected)\n    def test_case_2(self):\n        result = task_func(['8.8.4.4'])\n        expected = {'8.8.4.4': 'dns.google'}\n        self.assertDictEqual(result, expected)\n    def test_case_3(self):\n        result = task_func(['256.256.256.256'])\n        expected = {'256.256.256.256': None}\n        self.assertDictEqual(result, expected)\n    def test_case_4(self):\n        result = task_func([])\n        expected = {}\n        self.assertDictEqual(result, expected)\n    def test_case_5(self):\n        result = task_func(['1.1.1.1', '2.2.2.2'])\n        expected_keys = ['1.1.1.1', '2.2.2.2']\n        self.assertListEqual(list(result.keys()), expected_keys)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Determine the outlier indices in a 1D numpy array based on the Z score. First a normal distribution is fitted to the data, the mean and standard deviation is used to calculate the z scores of each datapoint. If the absolute z score of a datapoint is larger than threshold it is considered an outlier and its index is recorded. If the standard deviation is 0, an empty list is returned as outliers. >>> data = np.array([-10, 3, 5, 5, 5, 5, 5, 7, 20]) >>> outliers, mean, var = task_func(data, threshold=4) >>> print(outliers) [] >>> print(mean) 5.0 >>> print(var) 50.888888888888886\nThe function should output with:\n    list: The indices of outliers in the data where Z score > threshold. Empty if standard deviation is 0\n    float: The mean of the fitted normal distribution.\n    float: The variance of the fitted normal distribution.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n```",
        "gt": "import numpy as np\nfrom scipy.stats import norm\ndef task_func(data: np.ndarray, threshold: float = 2.0) -> list:\n    # Calculate the z-scores\n    mean, std_dev = norm.fit(data)\n    if std_dev == 0:\n        return [], mean, std_dev**2\n    z_scores = (data - mean) / std_dev\n    outliers = np.where(np.abs(z_scores) > threshold)\n\n    return list(outliers[0]), mean, std_dev**2",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = np.array([1, 2, 3, 4, 5, 6, 100])\n        result, mean, var = task_func(data)\n        self.assertEqual(result, [6])\n        self.assertAlmostEqual(mean, 17.2, delta=0.1)\n        self.assertAlmostEqual(var, 1142.78, delta=0.1)\n    def test_case_2(self):\n        data = np.array([1, 2, 3, 4, 5, 6, 7])\n        result, mean, var = task_func(data)\n        self.assertEqual(result, [])\n        self.assertAlmostEqual(mean, 4, delta=0.1)\n        self.assertAlmostEqual(var, 4, delta=0.1)\n    def test_case_3(self):\n        data = np.array([5, 5, 5, 5, 5])\n        result, mean, var = task_func(data)\n        self.assertEqual(result, [])\n        self.assertAlmostEqual(mean, 5, delta=0.1)\n        self.assertAlmostEqual(var, 0, delta=0.1)\n    def test_case_4(self):\n        from faker import Faker\n        fake = Faker()\n        fake.seed_instance(12)\n        data = np.array([fake.random_int(min=0, max=100) for _ in range(10000)])\n        result, mean, var = task_func(data)\n        self.assertEqual(len(result), 0)\n        self.assertAlmostEqual(mean, 50.28, delta=0.1)\n        self.assertAlmostEqual(var, 842.86, delta=0.1)\n    def test_case_5(self):\n        data = np.array([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 50])\n        result, mean, var = task_func(data, threshold=0.5)\n        self.assertEqual(result, [0, 1, 2, 11])\n        self.assertAlmostEqual(mean, 4.17, delta=0.1)\n        self.assertAlmostEqual(var, 200.14, delta=0.1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Run an R script and return the start time, end time, decoded stdout, and decoded stderr as a dictionary.\nThe function should output with:\n    dict: A dictionary containing the start time, end time, stdout, and stderr of the script run.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n```",
        "gt": "import subprocess\nimport shlex\nfrom datetime import datetime\ndef task_func(script_path: str) -> dict:\n    start_time = datetime.now()\n    process = subprocess.Popen(shlex.split(f\"/usr/bin/Rscript --vanilla {script_path}\"),\n                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    end_time = datetime.now()\n\n    log_details = {\n        'Start Time': str(start_time),\n        'End Time': str(end_time),\n        'Stdout': stdout.decode('utf-8'),\n        'Stderr': stderr.decode('utf-8')\n    }\n    \n    return log_details",
        "test": "import unittest\nfrom unittest.mock import patch, Mock\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.Popen')\n    def test_case_1(self, mock_subprocess):\n        mock_process = Mock()\n        mock_process.communicate.return_value = (b\"Script output here...\", b\"Any errors here...\")\n        mock_subprocess.return_value = mock_process\n        \n        result = task_func(\"/path/to/script.r\")\n        \n        self.assertIn('Start Time', result)\n        self.assertIn('End Time', result)\n        self.assertEqual(result['Stdout'], \"Script output here...\")\n        self.assertEqual(result['Stderr'], \"Any errors here...\")\n    \n    @patch('subprocess.Popen')\n    def test_case_2(self, mock_subprocess):\n        mock_process = Mock()\n        mock_process.communicate.return_value = (b\"Another output...\", b\"\")\n        mock_subprocess.return_value = mock_process\n        \n        result = task_func(\"/path/to/different_script.r\")\n        \n        self.assertIn('Start Time', result)\n        self.assertIn('End Time', result)\n        self.assertEqual(result['Stdout'], \"Another output...\")\n        self.assertEqual(result['Stderr'], \"\")\n    \n    @patch('subprocess.Popen')\n    def test_case_3(self, mock_subprocess):\n        mock_process = Mock()\n        mock_process.communicate.return_value = (b\"\", b\"An error occurred...\")\n        mock_subprocess.return_value = mock_process\n        \n        result = task_func(\"/path/to/erroneous_script.r\")\n        \n        self.assertIn('Start Time', result)\n        self.assertIn('End Time', result)\n        self.assertEqual(result['Stdout'], \"\")\n        self.assertEqual(result['Stderr'], \"An error occurred...\")\n    @patch('subprocess.Popen')\n    def test_case_4(self, mock_subprocess):\n        mock_process = Mock()\n        mock_process.communicate.return_value = (b\"Script output for case 4...\", b\"\")\n        mock_subprocess.return_value = mock_process\n        \n        result = task_func(\"/path/to/script_4.r\")\n        \n        self.assertIn('Start Time', result)\n        self.assertIn('End Time', result)\n        self.assertEqual(result['Stdout'], \"Script output for case 4...\")\n        self.assertEqual(result['Stderr'], \"\")\n    \n    @patch('subprocess.Popen')\n    def test_case_5(self, mock_subprocess):\n        mock_process = Mock()\n        mock_process.communicate.return_value = (b\"\", b\"Error for case 5...\")\n        mock_subprocess.return_value = mock_process\n        \n        result = task_func(\"/path/to/erroneous_script_5.r\")\n        \n        self.assertIn('Start Time', result)\n        self.assertIn('End Time', result)\n        self.assertEqual(result['Stdout'], \"\")\n        self.assertEqual(result['Stderr'], \"Error for case 5...\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalize the data and visualize it using a heatmap. This function takes a pandas DataFrame, normalizes the data to a range [0, 1], and then visualizes this normalized data using a seaborn heatmap.  The heatmap uses the \"YlGnBu\" colormap to represent normalized values and includes a color bar labeled \"Normalized Value\" to indicate the range of data values. It returns both the normalized data and the heatmap plot.\nThe function should output with:\n    pd.DataFrame: Normalized data.\n    plt.Axes: Heatmap plot of the normalized data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, plt.Axes):\n    # Normalizing the data\n    scaler = MinMaxScaler()\n    normalized_data = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)\n\n    # Plotting heatmap\n    plt.figure(figsize=(10, 8))\n    ax = sns.heatmap(\n        normalized_data, cmap=\"YlGnBu\", cbar_kws={\"label\": \"Normalized Value\"}\n    )\n\n    return normalized_data, ax",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        # default columns used for testing, but function is not limited to these options\n        self.expected_columns = [\n            \"Feature1\",\n            \"Feature2\",\n            \"Feature3\",\n            \"Feature4\",\n            \"Feature5\",\n        ]\n    def _check_data_structure(self, data, expected_columns):\n        self.assertIsInstance(data, pd.DataFrame)\n        for col in data.columns:\n            self.assertIn(col, expected_columns)\n    def _check_data_value(self, data):\n        # Check if values in normalized data are between 0 and 1\n        # (allowing a small margin for precision issues)\n        self.assertTrue(((data.values >= -1e-10) & (data.values <= 1.00000001)).all())\n    def _check_heatmap(self, ax):\n        # Test visualization\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.collections), 1)  # 1 heatmap\n        cbar = ax.collections[0].colorbar\n        self.assertTrue(cbar is not None)\n        self.assertTrue(cbar.ax.get_ylabel(), \"Normalized Value\")\n        self.assertEqual(ax.collections[0].cmap.name, \"YlGnBu\")\n    def test_case_1(self):\n        # Test with random data\n        data = pd.DataFrame(\n            np.random.rand(100, 5),\n            columns=self.expected_columns,\n        )\n        normalized_data, ax = task_func(data)\n        self._check_data_structure(normalized_data, self.expected_columns)\n        self._check_data_value(normalized_data)\n        self._check_heatmap(ax)\n    def test_case_2(self):\n        # Test with data having all zeros\n        data = pd.DataFrame(\n            np.zeros((100, 5)),\n            columns=self.expected_columns,\n        )\n        normalized_data, ax = task_func(data)\n        self._check_data_structure(normalized_data, self.expected_columns)\n        self._check_heatmap(ax)\n        # Check if all values in normalized data are zero\n        self.assertTrue((normalized_data.values == 0).all())\n    def test_case_3(self):\n        # Test with data having incremental values\n        data = pd.DataFrame(\n            np.arange(500).reshape(100, 5),\n            columns=self.expected_columns,\n        )\n        normalized_data, ax = task_func(data)\n        self._check_data_structure(normalized_data, self.expected_columns)\n        self._check_data_value(normalized_data)\n        self._check_heatmap(ax)\n    def test_case_4(self):\n        # Test with data having decremental values\n        data = pd.DataFrame(\n            np.arange(500, 0, -1).reshape(100, 5),\n            columns=self.expected_columns,\n        )\n        normalized_data, ax = task_func(data)\n        self._check_data_structure(normalized_data, self.expected_columns)\n        self._check_data_value(normalized_data)\n        self._check_heatmap(ax)\n    def test_case_5(self):\n        # Test single valid column\n        data = pd.DataFrame(np.random.rand(100, 1), columns=[\"Feature1\"])\n        normalized_data, ax = task_func(data)\n        self._check_data_structure(normalized_data, [\"Feature1\"])\n        self._check_data_value(normalized_data)\n        self._check_heatmap(ax)\n    def test_case_6(self):\n        # Test should fail when inputs are invalid - string column\n        data = pd.DataFrame(\n            {\"Feature1\": np.random.rand(100), \"Feature2\": [\"string\"] * 100}\n        )\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_case_7(self):\n        # Test should fail when inputs are invalid - empty dataframe\n        data = pd.DataFrame()\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Removes a column from a given data dictionary and creates a heatmap of the correlation matrix of the remaining data. Non-numeric columns are excluded from the heatmap. If the data is empty or has no numeric columns, the function returns None.\nThe function should output with:\n    matplotlib.axes._axes.Axes or None: The Axes object of the heatmap\n    or None if the heatmap is not generated.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\ndef task_func(data, column=\"c\"):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\ndef task_func(data, column=\"c\"):\n    df = pd.DataFrame(data)\n    if column in df.columns:\n        df = df.drop(columns=column)\n\n    df = df.select_dtypes(include=[\"number\"])\n\n    if df.empty:\n        return None\n\n    return sns.heatmap(df.corr())",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nclass TestCases(unittest.TestCase):\n    def _assert_heatmap_matches_corr(self, ax, corr):\n        # Helper function to assert that the heatmap matches the correlation matrix\n        heatmap_data = ax.collections[0].get_array().data\n        np.testing.assert_array_almost_equal(\n            heatmap_data, corr.values.flatten(), decimal=2\n        )\n    def test_case_1(self):\n        # Input: DataFrame with column \"c\".\n        data = {\n                \"a\": list(range(10)),\n                \"b\": list(range(10)),\n                \"c\": list(range(10)),\n            }\n        df = pd.DataFrame(\n            data\n        )\n        ax = task_func(data)\n        # Assert that column \"c\" is not in the heatmap\n        self.assertNotIn(\"c\", [col.get_text() for col in ax.get_xticklabels()])\n        # Check plotted value correctness\n        self._assert_heatmap_matches_corr(ax, df.drop(columns=[\"c\"]).corr())\n    def test_case_2(self):\n        # Input: DataFrame without column \"c\".\n        data = {\"a\": list(range(10)), \"b\": list(range(10))}\n        df = pd.DataFrame(data)\n        ax = task_func(data)\n        # Assert that columns \"a\" and \"b\" are in the heatmap\n        self.assertIn(\"a\", [col.get_text() for col in ax.get_xticklabels()])\n        self.assertIn(\"b\", [col.get_text() for col in ax.get_xticklabels()])\n        # Check plotted value correctness\n        self._assert_heatmap_matches_corr(ax, df.corr())\n    def test_case_3(self):\n        # Input: DataFrame with column \"c\", but we specify another column to remove\n        data = {\n                \"a\": list(range(10)),\n                \"b\": list(range(10)),\n                \"c\": list(range(10)),\n            }\n        df = pd.DataFrame(\n            data\n        )\n        ax = task_func(data, column=\"b\")\n        # Assert that column \"b\" is not in the heatmap\n        self.assertNotIn(\"b\", [col.get_text() for col in ax.get_xticklabels()])\n        # Assert that other columns are in the heatmap\n        self.assertIn(\"a\", [col.get_text() for col in ax.get_xticklabels()])\n        self.assertIn(\"c\", [col.get_text() for col in ax.get_xticklabels()])\n        # Check plotted value correctness\n        self._assert_heatmap_matches_corr(ax, df.drop(columns=[\"b\"]).corr())\n    def test_case_4(self):\n        # Input: DataFrame with non-numeric columns and column \"c\".\n        data = {\n                \"a\": list(range(4)),\n                \"b\": [\"low\", \"medium\", \"high\", \"medium\"],\n                \"c\": [\"apple\", \"banana\", \"cherry\", \"dates\"],\n            }\n        df = pd.DataFrame(\n            data\n        )\n        ax = task_func(data)\n        # Assert that only numeric column \"a\" is in the heatmap\n        self.assertIn(\"a\", [col.get_text() for col in ax.get_xticklabels()])\n        self.assertNotIn(\"b\", [col.get_text() for col in ax.get_xticklabels()])\n        self.assertNotIn(\"c\", [col.get_text() for col in ax.get_xticklabels()])\n    def test_case_5(self):\n        # Input: DataFrame with missing values and column \"c\".\n        np.random.seed(0)\n        data = {\n                \"a\": np.random.choice([1, np.nan], 100),\n                \"b\": np.random.choice([2, np.nan], 100),\n                \"c\": np.random.choice([3, np.nan], 100),\n            }\n        df = pd.DataFrame(\n            data\n        )\n        ax = task_func(data)\n        # Assert that columns \"a\" and \"b\" are in the heatmap and column \"c\" is not\n        self.assertIn(\"a\", [col.get_text() for col in ax.get_xticklabels()])\n        self.assertIn(\"b\", [col.get_text() for col in ax.get_xticklabels()])\n        self.assertNotIn(\"c\", [col.get_text() for col in ax.get_xticklabels()])\n    def test_case_6(self):\n        # Input: Empty DataFrame.\n        data = {}\n        df = pd.DataFrame(data)\n        ax = task_func(data)\n        # Assert that the function returns None for an empty DataFrame\n        self.assertIsNone(ax)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates RSA public and private keys and uses Fernet symmetric encryption to encrypt the contents of a specified file. The Fernet key is then encrypted with the public RSA key. The encrypted file contents and the encrypted Fernet key are saved in separate files. This method demonstrates a hybrid encryption approach where symmetric encryption is used for the file contents and asymmetric encryption for the encryption key.\nThe function should output with:\n    PublicKey: The RSA public key.\n    str: The filename of the encrypted file.\n    str: The filename of the file containing the encrypted Fernet key.\nYou should write self-contained code starting with:\n```\nimport rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n```",
        "gt": "import rsa\nfrom cryptography.fernet import Fernet\nfrom base64 import b64encode\ndef task_func(file_path):\n    (pub_key, priv_key) = rsa.newkeys(512)\n    fernet_key = Fernet.generate_key()\n    fernet = Fernet(fernet_key)\n\n    with open(file_path, 'rb') as f:\n        data = f.read()\n        encrypted_data = fernet.encrypt(data)\n\n    encrypted_file = file_path + '.encrypted'\n    with open(encrypted_file, 'wb') as f:\n        f.write(encrypted_data)\n\n    encrypted_fernet_key = rsa.encrypt(fernet_key, pub_key)\n    encrypted_key_file = 'fernet_key.encrypted'\n    with open(encrypted_key_file, 'wb') as f:\n        f.write(b64encode(encrypted_fernet_key))\n\n    return pub_key, encrypted_file, encrypted_key_file",
        "test": "import unittest\nfrom cryptography.fernet import Fernet\nimport os\nimport rsa\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a test file\n        self.test_file = 'test_file.txt'\n        with open(self.test_file, 'w') as f:\n            f.write(\"This is a test file.\")\n    def test_file_encryption(self):\n        pub_key, encrypted_file, _ = task_func(self.test_file)\n        self.assertTrue(os.path.exists(encrypted_file))\n    def test_encrypted_key_file_creation(self):\n        pub_key, _, encrypted_key_file = task_func(self.test_file)\n        self.assertTrue(os.path.exists(encrypted_key_file))\n    def test_public_key_type(self):\n        pub_key, _, _ = task_func(self.test_file)\n        self.assertIsInstance(pub_key, rsa.PublicKey)\n    def test_encrypted_file_size(self):\n        _, encrypted_file, _ = task_func(self.test_file)\n        original_size = os.path.getsize(self.test_file)\n        encrypted_size = os.path.getsize(encrypted_file)\n        self.assertTrue(encrypted_size > original_size)\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"non_existent_file.txt\")\n    def tearDown(self):\n        # Clean up created files\n        os.remove(self.test_file)\n        encrypted_file = self.test_file + '.encrypted'\n        if os.path.exists(encrypted_file):\n            os.remove(encrypted_file)\n        if os.path.exists('fernet_key.encrypted'):\n            os.remove('fernet_key.encrypted')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a random string of a specified length with uppercase letters and digits, compress it with zlib, and then encode the compressed string in base64.\nThe function should output with:\n    str: The compressed string in base64.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n```",
        "gt": "import random\nimport string\nimport base64\nimport zlib\ndef task_func(string_length=100):\n    # Generate a random string\n    random_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=string_length))\n    \n    # Compress the string\n    compressed_string = zlib.compress(random_string.encode('utf-8'))\n    \n    # Encode the compressed string in base64\n    encoded_compressed_string = base64.b64encode(compressed_string)\n\n    return encoded_compressed_string.decode('utf-8')",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        random.seed(1)\n        result = task_func()\n        self.assertEqual(result, 'eJwFwUEOhCAMAMAvLVBXONJooGqkUCDa/z/EmR3M0epjNwQ2sSr5P8a+3pkxcyPK9YwwnhRgv1RXdu85F5CJZEvq+t4sVkpD1DBLkmA6kPhRj+6jdcvPyeAPdLQbtg==')\n    def test_case_2(self):\n        random.seed(0)\n        result = task_func(50)\n        self.assertEqual(result, 'eJwzMQzwCvY38g4KMwv2Ngz3MrM0NvMxMIsMdAkIM7MIMvUyCnGM8jeOdAwy9fQxdQ/1tAAAVX8NdQ==')\n    def test_case_3(self):\n        random.seed(42)\n        result = task_func(200)\n        self.assertEqual(result, 'eJwFwVkCQCAQANArRZs+WzCTJIyU+x/Ee81GZF2F4uC20Agqt/zbl2kPQVTOyGTir3w+h5vHsL05Q9StrmzJpj1dDOhSBC1TO9QZ8YlVHWDu4MI7Fp8NTcJ+nWKbyznJeK9Kbq0uA41kk9WSJy+ncPlhmC+KsgAxSKaVe8a9IvgXlfDYYdbPNfI1lHKybsKxS1zPsqEukpwRP8dcNyU=')\n    def test_case_4(self):\n        random.seed(10)\n        result = task_func(10)\n        self.assertEqual(result, 'eJwLDQj1MDaOcAv2AQAQIQLm')\n    def test_case_5(self):\n        random.seed(1)\n        result = task_func(1)\n        self.assertEqual(result, 'eJxzBQAARgBG')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Randomly generate a pandas DataFrame with specified ranges and length, and calculate the cumulative distribution function (CDF).\nNote that: DataFrame columns are defined by the COLUMNS constant.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the calculated cumulative distribution function (CDF).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n```",
        "gt": "import numpy as np\nimport pandas as pd\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\ndef task_func(length, min_value = 0, max_value = 100):\n\n    # Generate random data and create a DataFrame\n    data = np.random.randint(min_value, max_value, size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Calculate the cumulative distribution function (CDF) for each column\n    df = df.apply(lambda x: x.value_counts().sort_index().cumsum())\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        np.random.seed(0)\n        df = task_func(100, 0, 1)\n        self.assertEqual(df.shape[0], 1)\n        self.assertEqual(list(df.columns), ['Column1', 'Column2', 'Column3', 'Column4', 'Column5'])\n    def test_case_2(self):\n        np.random.seed(0)\n        min_value = 0\n        max_value = 1\n        length = 10\n        cdf = task_func(length, min_value, max_value)\n        self.assertEqual(cdf.iloc[0]['Column1'], 10)\n    def test_case_3(self):\n        np.random.seed(0)\n        df = task_func(100)\n        #self.assertEqual(df.shape[0], 100)\n        self.assertEqual(list(df.columns), ['Column1', 'Column2', 'Column3', 'Column4', 'Column5'])\n    def test_case_4(self):\n        np.random.seed(0)\n        df = task_func(100, 50, 100)\n        self.assertEqual(list(df.columns), ['Column1', 'Column2', 'Column3', 'Column4', 'Column5'])\n        for column in df.columns:\n            self.assertTrue(all(df[column].diff().dropna() >= 0))\n    def test_case_5(self):\n        np.random.seed(0)\n        df  = task_func(0)\n        self.assertEqual(df.shape[0], 0)\n        self.assertEqual(list(df.columns), ['Column1', 'Column2', 'Column3', 'Column4', 'Column5'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract recepient email address and names from JSON-formatted string and send the names in an email. The sent message should be in the format 'Subject: Extracted Names\\n\\nName1\\nName2\\n...'.\nThe function should output with:\n    list: A list of extracted names.\nYou should write self-contained code starting with:\n```\nimport json\nimport smtplib\n# Constants\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n```",
        "gt": "import json\nimport smtplib\n# Constants\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your.email@gmail.com\"\nEMAIL_PASSWORD = \"your.password\"\ndef task_func(input_data=None, smtp_server=SMTP_SERVER, smtp_port=SMTP_PORT, email_address=EMAIL_ADDRESS, email_password=EMAIL_PASSWORD, smtp=None):\n     \n    if input_data is None:\n        return []\n\n    # Parse input JSON data\n    try:\n        data = json.loads(input_data)\n        recipient_email = data.get('recipient')\n        names = data.get('names', [])\n    except (json.JSONDecodeError, ValueError):\n        return []\n\n    if not recipient_email or not names:\n        return []\n\n    message = 'Subject: Extracted Names\\n\\n' + '\\n'.join(names)\n    \n    if smtp:\n        server = smtp(smtp_server, smtp_port)\n    else:\n        server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(email_address, email_password)\n    server.sendmail(email_address, recipient_email, message)\n    server.quit()\n    return names",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport smtplib\nclass TestCases(unittest.TestCase):\n    @patch('smtplib.SMTP')\n    def test_f225(self, mock_smtp):\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        \n        # Call the function\n        result = task_func('{\"recipient\": \"recipient@example.com\", \"names\": [\"Josie Smith\", \"Mugsy Dog Smith\"]}')\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert the return value\n        self.assertEqual(result, ['Josie Smith', 'Mugsy Dog Smith'])\n    @patch('smtplib.SMTP')\n    def test_f225_subject(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        \n        # Call the function\n        result = task_func('{\"recipient\": \"names@gmail.com\", \"names\": [\"Josie Smith\", \"Mugsy Dog Smith\"]}')\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert that starttls, login, sendmail, and quit were called on the SMTP instance\n        mock_smtp_instance.login.assert_called_once_with('your.email@gmail.com', 'your.password')\n        mock_smtp_instance.sendmail.assert_called_once_with('your.email@gmail.com', 'names@gmail.com', 'Subject: Extracted Names\\n\\nJosie Smith\\nMugsy Dog Smith')\n        \n        # Assert the return value\n        self.assertEqual(result, ['Josie Smith', 'Mugsy Dog Smith'])\n    \n    @patch('smtplib.SMTP')\n    def test_no_names(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        # Custom input text with no names\n        custom_text = '{\"recipient\": \"names@gmail.com\", \"names\": []}'\n        \n        # Call the function with custom input\n        result = task_func(input_data=custom_text)\n        # Assert the return value\n        self.assertEqual(result, [])\n    @patch('smtplib.SMTP')\n    def test_recepient(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        # Custom input text with no names\n        custom_text = '{\"recipient\": \"change@gmail.com\", \"names\": []}'\n        \n        # Call the function with custom input\n        result = task_func(input_data=custom_text)\n        \n        # Assert the return value\n        self.assertEqual(result, [])\n    @patch('smtplib.SMTP')\n    def test_login(self, mock_smtp):\n        # Create a MagicMock instance to replace the SMTP instance\n        mock_smtp_instance = MagicMock()\n        mock_smtp.return_value = mock_smtp_instance\n        # Custom input text with no names\n        custom_text = '{\"recipient\": \"change@gmail.com\", \"names\": [\"Name 1\", \"Name 2\"]}'\n        \n        # Call the function with custom input\n        result = task_func(input_data=custom_text, email_address=\"your.email.change@gmail.com\", email_password=\"your.password.change\")\n        \n        # Assert that SMTP was called with the right parameters\n        mock_smtp.assert_called_once_with('smtp.gmail.com', 587)\n        # Assert that starttls, login, sendmail, and quit were called on the SMTP instance\n        mock_smtp_instance.login.assert_called_once_with('your.email.change@gmail.com', 'your.password.change')\n        # Assert the return value\n        self.assertEqual(result, [\"Name 1\", \"Name 2\"])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Moves all files from a specified root directory (ROOT_DIR) to a target directory (DEST_DIR) if they match a specific hash value (SPECIFIC_HASH). The function calculates the MD5 hash of each file in ROOT_DIR and moves it if the hash matches SPECIFIC_HASH.\nNote that: The function assumes the existence of the root directory. The existence of DEST_DIR is ensured by the function.\nThe function should output with:\n    int: The number of files moved to the target directory.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n```",
        "gt": "import os\nimport shutil\nimport glob\nimport hashlib\ndef task_func(ROOT_DIR, DEST_DIR, SPECIFIC_HASH):\n    files_moved = 0\n\n    os.makedirs(DEST_DIR, exist_ok=True)\n    for filename in glob.glob(os.path.join(ROOT_DIR, '*')):\n        if not os.path.exists(filename) or os.path.isdir(filename):\n            continue\n        with open(filename, 'rb') as f:\n            file_hash = hashlib.md5(f.read()).hexdigest()\n        if file_hash == SPECIFIC_HASH:\n            shutil.move(filename, DEST_DIR)\n            files_moved += 1\n    return files_moved",
        "test": "import unittest\nimport tempfile\nimport shutil\nimport os\nimport hashlib\nfrom pathlib import Path\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for ROOT_DIR and DEST_DIR\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.root_dir = Path(self.temp_dir.name, 'root')\n        self.dest_dir = Path(self.temp_dir.name, 'dest')\n        self.root_dir.mkdir()\n        self.dest_dir.mkdir()\n        \n        # Create a dummy file in ROOT_DIR\n        file_content = \"This is a dummy file.\"\n        self.dummy_file_path = self.root_dir / 'dummy_file.txt'\n        with open(self.dummy_file_path, 'w') as f:\n            f.write(file_content)\n        # Calculate the hash value for the dummy file\n        self.dummy_file_hash = hashlib.md5(file_content.encode('utf-8')).hexdigest()\n    def tearDown(self):\n        # Cleanup the temporary directory\n        self.temp_dir.cleanup()\n    @patch('shutil.move')\n    def test_file_moved_with_matching_hash(self, mock_move):\n        \"\"\"Test that a file is moved when its hash matches the specified hash.\"\"\"\n        result = task_func(str(self.root_dir), str(self.dest_dir), self.dummy_file_hash)\n        \n        self.assertEqual(result, 1)\n        mock_move.assert_called_once()\n    def test_no_file_moved_with_non_matching_hash(self):\n        \"\"\"Test no files are moved if hash doesn't match.\"\"\"\n        result = task_func(str(self.root_dir), str(self.dest_dir), 'non_matching_hash')\n        \n        self.assertEqual(result, 0)\n        # Since we're not mocking shutil.move, we verify by checking the files in DEST_DIR\n        self.assertEqual(len(list(self.dest_dir.iterdir())), 0)\n    def test_dest_dir_created(self):\n        \"\"\"Test that destination directory is created if it doesn't exist.\"\"\"\n        shutil.rmtree(self.dest_dir)  # Remove the dest_dir to test its recreation\n        task_func(str(self.root_dir), str(self.dest_dir), 'any_hash')\n        \n        self.assertTrue(self.dest_dir.exists())\n    def test_no_files_to_move(self):\n        \"\"\"Test the function when there are no files to move.\"\"\"\n        os.remove(self.dummy_file_path)  # Remove the dummy file to simulate no files to move\n        result = task_func(str(self.root_dir), str(self.dest_dir), 'any_hash')\n        self.assertEqual(result, 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a list of dictionaries from a JSON file, calculate the mean and median for each key (ignoring non-numeric or missing values), and convert the results into a Pandas DataFrame.\nThe function should output with:\n    df (pd.DataFrame): A DataFrame indexed and sorted by the variable names (keys) from the\n    input data, containing columns 'mean' and 'median'.\nYou should write self-contained code starting with:\n```\nimport json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n```",
        "gt": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\ndef task_func(input_file=\"data.json\"):\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    all_keys = set().union(*(d.keys() for d in data))\n    stats = defaultdict(list)\n    for d in data:\n        for key in all_keys:\n            value = d.get(key, np.nan)\n            if isinstance(value, (int, float)):\n                stats[key].append(value)\n            else:\n                stats[key].append(np.nan)\n\n    result = {\n        k: {\"mean\": np.nanmean(v), \"median\": np.nanmedian(v)} for k, v in stats.items()\n    }\n    df = pd.DataFrame(result).transpose().sort_index()\n\n    return df",
        "test": "import unittest\nimport numpy as np\nimport tempfile\nimport json\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.test_data_paths = []\n        test_data = [\n            [{\"a\": 2, \"b\": 3, \"c\": 4}],  # Test data for test_case_1\n            [{\"a\": 1}],  # Test data for test_case_2\n            [{\"a\": 1.5}, {\"b\": None}],  # Test data for test_case_3\n            [],  # Test data for test_case_4\n            [{\"a\": 1.5, \"c\": 4}, {\"b\": None}],  # Test data for test_case_5\n        ]\n        for idx, data in enumerate(test_data, start=1):\n            path = self.temp_dir.name + f\"/test_data_{idx}.json\"\n            with open(path, \"w\") as f:\n                json.dump(data, f)\n            self.test_data_paths.append(path)\n    def test_case_1(self):\n        # Basic test\n        df = task_func(self.test_data_paths[0])\n        self.assertListEqual(df.index.tolist(), [\"a\", \"b\", \"c\"])\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 2.0)\n        self.assertAlmostEqual(df.loc[\"a\", \"median\"], 2.0)\n    def test_case_2(self):\n        # Test with a single key\n        df = task_func(self.test_data_paths[1])\n        self.assertListEqual(df.index.tolist(), [\"a\"])\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 1.0)\n        self.assertAlmostEqual(df.loc[\"a\", \"median\"], 1.0)\n    def test_case_3(self):\n        # Test with missing values to ensure handling of NaN\n        df = task_func(self.test_data_paths[2])\n        self.assertListEqual(df.index.tolist(), [\"a\", \"b\"])\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 1.5)\n        self.assertAlmostEqual(df.loc[\"a\", \"median\"], 1.5)\n        self.assertTrue(np.isnan(df.loc[\"b\", \"mean\"]))\n        self.assertTrue(np.isnan(df.loc[\"b\", \"median\"]))\n    def test_case_4(self):\n        # Test empty dataframe creation from an empty input file\n        df = task_func(self.test_data_paths[3])\n        self.assertEqual(df.shape[0], 0)\n    def test_case_5(self):\n        # Test handling of mixed data, including valid values and NaN\n        df = task_func(self.test_data_paths[4])\n        self.assertListEqual(df.index.tolist(), [\"a\", \"b\", \"c\"])\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 1.5)\n        self.assertAlmostEqual(df.loc[\"a\", \"median\"], 1.5)\n        self.assertTrue(np.isnan(df.loc[\"b\", \"mean\"]))\n        self.assertTrue(np.isnan(df.loc[\"b\", \"median\"]))\n        self.assertAlmostEqual(df.loc[\"c\", \"mean\"], 4.0)\n        self.assertAlmostEqual(df.loc[\"c\", \"median\"], 4.0)\n    def test_case_6(self):\n        # Test with mixed types in values\n        data = [{\"a\": 5, \"b\": \"text\", \"c\": 7}, {\"a\": \"more text\", \"b\": 4, \"c\": None}]\n        path = self.temp_dir.name + \"/test_data_6.json\"\n        with open(path, \"w\") as f:\n            json.dump(data, f)\n        df = task_func(path)\n        self.assertListEqual(df.index.tolist(), [\"a\", \"b\", \"c\"])\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 5.0)\n        self.assertAlmostEqual(df.loc[\"c\", \"mean\"], 7.0)\n        self.assertAlmostEqual(df.loc[\"b\", \"mean\"], 4.0)\n    def test_case_7(self):\n        # Test a larger dataset with missing values\n        data = [{\"a\": i, \"b\": i * 2 if i % 2 == 0 else None} for i in range(1, 101)]\n        path = self.temp_dir.name + \"/test_data_7.json\"\n        with open(path, \"w\") as f:\n            json.dump(data, f)\n        df = task_func(path)\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 50.5)\n        self.assertAlmostEqual(\n            df.loc[\"b\", \"mean\"], np.mean([2 * i for i in range(2, 101, 2)])\n        )\n    def test_case_8(self):\n        # Test with all non-numeric values for a key\n        data = [\n            {\"a\": \"text\", \"b\": \"more text\"},\n            {\"a\": \"even more text\", \"b\": \"still more text\"},\n        ]\n        path = self.temp_dir.name + \"/test_data_8.json\"\n        with open(path, \"w\") as f:\n            json.dump(data, f)\n        df = task_func(path)\n        self.assertTrue(np.isnan(df.loc[\"a\", \"mean\"]))\n        self.assertTrue(np.isnan(df.loc[\"b\", \"mean\"]))\n    def test_case_9(self):\n        # Test varying numbers of missing and non-numeric values\n        data = [\n            {\"a\": 10, \"b\": 20, \"c\": \"ignore\"},\n            {\"a\": None, \"b\": 25, \"c\": 30},\n            {\"a\": 5, \"b\": \"ignore\", \"c\": \"ignore\"},\n        ]\n        path = self.temp_dir.name + \"/test_data_9.json\"\n        with open(path, \"w\") as f:\n            json.dump(data, f)\n        df = task_func(path)\n        self.assertAlmostEqual(df.loc[\"a\", \"mean\"], 7.5)\n        self.assertAlmostEqual(df.loc[\"b\", \"mean\"], 22.5)\n        self.assertAlmostEqual(df.loc[\"c\", \"mean\"], 30.0)\n    def tearDown(self):\n        self.temp_dir.cleanup()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a given JSON data into a Pandas DataFrame and plots a histogram of a specified column. The function handles non-numeric columns by converting them to categorical type and then to numeric codes. It also checks if the specified column exists in the DataFrame. - The histogram's title is set to 'Histogram of <column_name>'. - The histogram's x-label are set to the name of the specified column. Exceptions: - ValueError: Raised if the specified column name does not exist in the DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame created from the input JSON data.\n    Axes: A matplotlib Axes object showing the histogram plot of the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data, column_name=\"target_column\"):\n    df = pd.DataFrame(data)\n\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the DataFrame.\")\n\n    if not pd.api.types.is_numeric_dtype(df[column_name]):\n        df[column_name] = df[column_name].astype(\"category\").cat.codes\n\n    _, ax = plt.subplots()\n    df[column_name].hist(ax=ax)\n    ax.set_title(f\"Histogram of {column_name}\")\n    ax.set_xlabel(column_name)\n    return df, ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        # Sample data for testing\n        self.sample_data = [\n            {\"userId\": 1, \"id\": 1, \"title\": \"A\", \"completed\": False},\n            {\"userId\": 1, \"id\": 2, \"title\": \"B\", \"completed\": True},\n            {\"userId\": 2, \"id\": 3, \"title\": \"A\", \"completed\": False},\n            {\"userId\": 2, \"id\": 4, \"title\": \"B\", \"completed\": True},\n            {\"userId\": 3, \"id\": 5, \"title\": \"A\", \"completed\": False},\n            {\"userId\": 3, \"id\": 6, \"title\": \"B\", \"completed\": True},\n            {\"userId\": 3, \"id\": 7, \"title\": \"B\", \"completed\": True},\n        ]\n    def test_normal_case(self):\n        \"\"\"Test if the function returns correct DataFrame and histogram for a valid column.\"\"\"\n        df, ax = task_func(self.sample_data, \"userId\")\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(len(df), len(self.sample_data))\n        self.assertEqual(ax.get_title(), \"Histogram of userId\")\n        self.assertEqual(ax.get_xlabel(), \"userId\")\n    def test_non_existent_column(self):\n        \"\"\"Test if the function raises an error for a non-existent column.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(self.sample_data, \"non_existent_column\")\n    def test_empty_data(self):\n        \"\"\"Test the function with empty data.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([], \"userId\")\n    def test_non_numeric_data(self):\n        \"\"\"Test the function with a non-numeric column.\"\"\"\n        df, ax = task_func(self.sample_data, \"title\")\n        self.assertTrue(pd.api.types.is_numeric_dtype(df[\"title\"]))\n        self.assertEqual(ax.get_title(), \"Histogram of title\")\n        self.assertEqual(ax.get_xlabel(), \"title\")\n    def test_duplicate_values(self):\n        \"\"\"Test the function with a column that has duplicate values.\"\"\"\n        df, ax = task_func(self.sample_data, \"title\")\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertEqual(ax.get_title(), \"Histogram of title\")\n        self.assertEqual(ax.get_xlabel(), \"title\")\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Pandas DataFrame from a list of tuples, each representing a row. Tuples of unequal lengths are allowed, and missing elements are filled with None. Optionally, missing numeric values can be filled with random data. >>> data = [('Mango', 20), ('Apple', ), ('Banana', )] >>> df = task_func(data, columns=['Fruit', 'Quantity'], fill_missing=False, seed=42) >>> print(df) Fruit  Quantity 0   Mango      20.0 1   Apple       NaN 2  Banana       NaN\nThe function should output with:\n    DataFrame: A pandas DataFrame with specified columns.\n    Missing elements are represented as None or filled with random data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n```",
        "gt": "import pandas as pd\nimport random\ndef task_func(data, columns=['Name', 'Age', 'Occupation'], fill_missing=False, num_range=(0, 100), seed=None):\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        for col in df.columns:\n            if df[col].dtype in ['float64', 'int64']:\n                df[col] = df[col].apply(lambda x: random.randint(*num_range) if pd.isnull(x) else x)\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_basic_functionality(self):\n        # Testing basic functionality with complete data for each column\n        data = [('John', 25, 'Engineer'), ('Alice', 30, 'Doctor')]\n        df = task_func(data)\n        expected_df = pd.DataFrame(data, columns=['Name', 'Age', 'Occupation'])\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_uneven_tuples(self):\n        # Handling tuples of uneven length, missing elements should be filled with None\n        data = [('John', 25, 'Engineer'), ('Alice', 30, 'Doctor'), ('Bob', )]\n        df = task_func(data)\n        expected_df = pd.DataFrame([['John', 25, 'Engineer'], ['Alice', 30, 'Doctor'], ['Bob', None, None]], columns=['Name', 'Age', 'Occupation'])\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_custom_columns(self):\n        # Specifying custom column names\n        data = [('Mango', 20), ('Apple', 30)]\n        df = task_func(data, columns=['Fruit', 'Quantity'])\n        expected_df = pd.DataFrame(data, columns=['Fruit', 'Quantity'])\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_empty_list(self):\n        # Providing an empty list, resulting in an empty DataFrame with only the specified columns\n        data = []\n        df = task_func(data)\n        expected_df = pd.DataFrame(columns=['Name', 'Age', 'Occupation'])\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_all_none(self):\n        # All elements missing for a particular record\n        data = [('John', 25, 'Engineer'), (None, None, None)]\n        df = task_func(data)\n        expected_df = pd.DataFrame([['John', 25, 'Engineer'], [None, None, None]], columns=['Name', 'Age', 'Occupation'])\n        pd.testing.assert_frame_equal(df, expected_df)\n    def test_random_fill(self):\n        # Testing random data filling functionality\n        data = [('John', 25, None), (None, None, None)]\n        df = task_func(data, fill_missing=True, num_range=(1, 100), seed=42)\n        # Check if missing values are filled and if the filled values are within the specified range\n        self.assertTrue(df.loc[0, 'Occupation'] is None)\n        self.assertTrue(df.loc[1, 'Name'] is None)\n        self.assertTrue(df.loc[1, 'Age'] is not None and 1 <= df.loc[1, 'Age'] <= 100)\n    def test_seed_reproducibility(self):\n        # Testing if the seed parameter provides reproducible results\n        data = [('John', None, None)]\n        df1 = task_func(data, fill_missing=True, num_range=(1, 100), seed=42)\n        df2 = task_func(data, fill_missing=True, num_range=(1, 100), seed=42)\n        pd.testing.assert_frame_equal(df1, df2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate 'n' random articles with titles, URLs, IDs, categories, and views, and return them as a DataFrame. Views are generated by sampling from a poisson distribution with lambda=1000. >>> df = task_func(3, categories=['A', 'B'], domain='test.de', random_seed=12) >>> print(df) title          title_url  id category  views 0  Article 0  test.de/Article_0   0        B    963 1  Article 1  test.de/Article_1   1        B    977 2  Article 2  test.de/Article_2   2        B   1048\nThe function should output with:\n    DataFrame: A pandas DataFrame with columns: 'title', 'title_url', 'id', 'category', 'views'.\nYou should write self-contained code starting with:\n```\nimport random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n          domain=\"samplewebsite.com\",\n          categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n          random_seed=None):\n```",
        "gt": "import random\nimport pandas as pd\nimport numpy as np\ndef task_func(n,\n          domain=\"samplewebsite.com\",\n          categories=['Sports', 'Technology', 'Health', 'Science', 'Business'],\n          random_seed=None):\n    random.seed(random_seed)\n    np.random.seed(random_seed)\n\n    data = []\n    for _ in range(n):\n        title = f\"Article {_}\"\n        title_url = f\"{domain}/Article_{_}\"\n        id = _\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        data.append({'title': title, 'title_url': title_url, 'id': id, 'category': category, 'views': views})\n\n    df = pd.DataFrame(data)\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_rng(self):\n        'test rng reproducability'\n        df1 = task_func(300, random_seed=42)\n        df2 = task_func(300, random_seed=42)\n        self.assertTrue(pd.testing.assert_frame_equal(df1, df2) is None)\n    \n    def test_case_1(self):\n        'default params'\n        df = task_func(400, random_seed=10)\n        self.assertEqual(len(df), 400)\n        self.assertTrue(df['title_url'].str.startswith(\"samplewebsite.com/Article_\").all())\n        self.assertEqual(len(df['id'].unique()), 400)\n        self.assertTrue(df['category'].isin(['Sports', 'Technology', 'Health', 'Science', 'Business']).all())\n        self.assertTrue(df['views'].dtype, int)\n    def test_case_2(self):\n        'custom params'\n        df = task_func(330, domain=\"testdomain.com\", categories=['A', 'B', 'C'])\n        self.assertEqual(len(df), 330)\n        self.assertTrue(df['title_url'].str.startswith(\"testdomain.com/Article_\").all())\n        self.assertEqual(len(df['id'].unique()), 330)\n        self.assertTrue(df['category'].isin(['A', 'B', 'C']).all())\n        self.assertTrue(df['views'].dtype, int)\n    def test_case_3(self):\n        '0 articles'\n        df = task_func(0)\n        self.assertEqual(len(df), 0)\n    def test_case_4(self):\n        df = task_func(1000, random_seed=1)\n        self.assertEqual(len(df), 1000)\n        self.assertEqual(len(df['id'].unique()), 1000)\n        self.assertTrue(df['views'].dtype, int)\n    def test_case_5(self):\n        df = task_func(7, domain=\"anotherdomain.com\", random_seed=3)\n        self.assertEqual(len(df), 7)\n        self.assertTrue(df['title_url'].str.startswith(\"anotherdomain.com/Article_\").all())\n        self.assertEqual(len(df['id'].unique()), 7)\n        self.assertTrue(df['category'].isin(['Sports', 'Technology', 'Health', 'Science', 'Business']).all())\n        self.assertTrue(df['views'].dtype, int)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze the given list of logs for the occurrence of errors and calculate the average time of occurrence of errors.\nThe function should output with:\n    list: A list of times when errors occurred.\n    time: The average time of occurrence of these errors.\nYou should write self-contained code starting with:\n```\nimport re\nfrom datetime import time\ndef task_func(logs: list):\n```",
        "gt": "import re\nfrom datetime import time\ndef task_func(logs: list):\n    \n    error_times = []\n    total_time = 0\n\n    for log in logs:\n        if \"ERROR\" in log:\n            time_match = re.search(r'(\\d{2}):(\\d{2}):\\d{2}', log)\n            if time_match:\n                hour, minute = map(int, time_match.groups())\n                error_times.append(time(hour, minute))\n                total_time += hour * 60 + minute\n\n    if error_times:\n        avg_hour = (total_time // len(error_times)) // 60\n        avg_minute = (total_time // len(error_times)) % 60\n        avg_time = time(avg_hour, avg_minute)\n    else:\n        avg_time = time(0, 0)\n\n    return error_times, avg_time",
        "test": "import unittest\nfrom datetime import time\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        logs = ['2021-06-15 09:45:00 ERROR: Failed to connect to database',\n                '2021-06-15 10:15:00 WARNING: Low disk space',\n                '2021-06-15 10:35:00 INFO: Backup completed successfully']\n        result = task_func(logs)\n        self.assertEqual(result, ([time(9, 45)], time(9, 45)))\n    def test_case_2(self):\n        logs = ['2021-06-15 08:45:00 ERROR: Failed to authenticate',\n                '2021-06-15 09:15:00 ERROR: Failed to connect to database',\n                '2021-06-15 10:35:00 INFO: Backup completed successfully']\n        result = task_func(logs)\n        self.assertEqual(result, ([time(8, 45), time(9, 15)], time(9, 0)))\n    def test_case_3(self):\n        logs = ['2021-06-15 07:45:00 INFO: Backup started',\n                '2021-06-15 08:15:00 WARNING: Low memory',\n                '2021-06-15 09:35:00 INFO: Backup completed successfully']\n        result = task_func(logs)\n        self.assertEqual(result, ([], time(0, 0)))\n    def test_case_4(self):\n        logs = []\n        result = task_func(logs)\n        self.assertEqual(result, ([], time(0, 0)))\n    def test_case_5(self):\n        logs = ['2021-06-15 09:45:00 ERROR: Failed to connect to database',\n                '2021-06-15 10:15:00 WARNING: Low disk space',\n                '2021-06-15 11:45:00 ERROR: Failed to authenticate']\n        result = task_func(logs)\n        self.assertEqual(result, ([time(9, 45), time(11, 45)], time(10, 45)))\n    def test_case_invalid_format(self):\n        logs = ['Invalid log format',\n                'Another invalid log format',\n                'Yet another invalid log format']\n        result = task_func(logs)\n        self.assertEqual(result, ([], time(0, 0)))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate two arrays of random integers and draw a line diagram with the maximum values of the respective elements of the two arrays. Set 'Maximum Values' on its y-axis.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object with the plot.\nYou should write self-contained code starting with:\n```\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n```",
        "gt": "from random import randint\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(array_length=100):\n    array1 = np.array([randint(1, 100) for _ in range(array_length)])\n    array2 = np.array([randint(1, 100) for _ in range(array_length)])\n\n    max_values = np.maximum(array1, array2)\n\n    fig, ax = plt.subplots()\n    ax.plot(max_values)\n    ax.set_ylabel('Maximum Values')\n    \n    return ax",
        "test": "import unittest\nfrom matplotlib.axes import Axes\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        ax = task_func(50)\n        self.assertIsInstance(ax, Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 50)\n    def test_standard_functionality(self):\n        \"\"\"Test the function with default array length.\"\"\"\n        ax = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n    def test_zero_length_array(self):\n        \"\"\"Test the function with zero array length.\"\"\"\n        ax = task_func(0)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(len(ax.lines[0].get_ydata()), 0)  # Expect no data points in the plot\n    def test_non_default_length_array(self):\n        \"\"\"Test the function with non-default array lengths.\"\"\"\n        lengths = [50, 200]\n        for length in lengths:\n            ax = task_func(length)\n            self.assertIsInstance(ax, plt.Axes)\n            self.assertEqual(len(ax.lines[0].get_ydata()), length)\n    def test_plot_output(self):\n        \"\"\"Verify the plot is generated and is of correct type.\"\"\"\n        ax = task_func()\n        self.assertTrue(hasattr(ax, 'figure'), \"Plot does not have associated figure attribute\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots a heatmap of a given 2D numerical array and prints the sum of each row. The heatmap's color range is set based on the minimum and maximum values in the array.\nNote that: The function calculates the sum of each row and prints these values. The heatmap is plotted based on the original array with its color range set from the minimum to the maximum value in the array.\nThe function should output with:\n    ax (matplotlib.axes.Axes): The Axes object with the plotted heatmap.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\ndef task_func(arr):\n```",
        "gt": "import numpy as np\nimport seaborn as sns\ndef task_func(arr):\n    row_sums = arr.sum(axis=1)\n    vmax = np.max(arr)  # Set vmax to the maximum value in the array\n    vmin = np.min(arr)  # Set vmin to the minimum value in the array\n    ax = sns.heatmap(\n        arr, annot=True, vmax=vmax, vmin=vmin\n    )  # Include both vmin and vmax in the heatmap call\n    ax.set_title(\"Heatmap of the 2D Array\")\n\n    return ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the function task_func.\"\"\"\n    def tearDown(self):\n        plt.clf()\n    def test_scenario_1(self):\n        \"\"\"Scenario 1: Testing with a 2D array created by adding row and column indices.\"\"\"\n        arr = np.array([[i + j for i in range(3)] for j in range(5)])\n        expected_vmax = np.max(arr)  # Calculate the expected vmax\n        ax = task_func(arr)\n        self.assertEqual(ax.get_title(), \"Heatmap of the 2D Array\")\n        self.assertEqual(ax.collections[0].colorbar.vmax, expected_vmax)\n    def test_scenario_2(self):\n        \"\"\"Scenario 2: Testing with a 2D array where each column has identical values based on the column index.\"\"\"\n        arr = np.array([[i for i in range(3)] for j in range(5)])\n        expected_vmax = np.max(arr)  # Calculate the expected vmax\n        ax = task_func(arr)\n        self.assertEqual(ax.get_title(), \"Heatmap of the 2D Array\")\n        self.assertEqual(ax.collections[0].colorbar.vmax, expected_vmax)\n    def test_scenario_3(self):\n        \"\"\"Scenario 3: Testing with a 2D array where each row has identical values based on the row index.\"\"\"\n        arr = np.array([[j for i in range(3)] for j in range(5)])\n        expected_vmax = np.max(arr)  # Calculate the expected vmax\n        ax = task_func(arr)\n        self.assertEqual(ax.get_title(), \"Heatmap of the 2D Array\")\n        self.assertEqual(ax.collections[0].colorbar.vmax, expected_vmax)\n    def test_scenario_4(self):\n        \"\"\"Scenario 4: Testing with a 2D array of zeros.\"\"\"\n        arr = np.zeros((5, 3))\n        expected_vmax = np.max(arr)  # Calculate the expected vmax\n        ax = task_func(arr)\n        self.assertEqual(ax.get_title(), \"Heatmap of the 2D Array\")\n        self.assertAlmostEqual(\n            ax.collections[0].colorbar.vmax, expected_vmax, delta=0.2\n        )\n    def test_scenario_5(self):\n        \"\"\"Scenario 5: Testing with a 2D array of ones.\"\"\"\n        arr = np.ones((5, 3))\n        expected_vmax = np.max(arr)  # Calculate the expected vmax\n        ax = task_func(arr)\n        self.assertEqual(ax.get_title(), \"Heatmap of the 2D Array\")\n        self.assertAlmostEqual(\n            ax.collections[0].colorbar.vmax, expected_vmax, delta=0.2\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "The function creates an HTTP POST request handler for processing incoming data. The data is expected to be in JSON format with a key 'data'. The handler responds with a 200 success message if the data is valid, or an error message otherwise.\nNote that: Notes: If the 'Content-Type' header is not 'application/json', the server responds with a 400 Bad Request status and a JSON object: {\"status\": \"error\", \"message\": \"Content-Type header is not application/json\"}. If the received JSON object does not contain a 'data' key, the response is a 400 Bad Request with a JSON object: {\"status\": \"error\", \"message\": \"No data received\"}. For successfully processed requests, the server responds with a 200 OK status and a JSON object: {\"status\": \"success\", \"message\": \"Data received successfully.\"}.\nThe function should output with:\n    class: A class that is a subclass of http.server.BaseHTTPRequestHandler, designed to handle HTTP POST requests.\nYou should write self-contained code starting with:\n```\nimport cgi\nimport http.server\nimport json\ndef task_func():\n```",
        "gt": "import cgi\nimport http.server\nimport json\ndef task_func():\n    class PostRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n            \n            # Define error response directly within the method\n            error_response = {\n                'status': 'error',\n                'message': ''  # This will be modified based on the error condition\n            }\n            \n            if ctype != 'application/json':\n                self.send_response(400)\n                self.end_headers()\n                error_response['message'] = 'Content-Type header is not application/json'\n                self.wfile.write(json.dumps(error_response).encode())\n                return\n\n            length = int(self.headers.get('content-length'))\n            message = json.loads(self.rfile.read(length))\n            \n            if 'data' not in message:\n                self.send_response(400)\n                self.end_headers()\n                error_response['message'] = 'No data received'\n                self.wfile.write(json.dumps(error_response).encode())\n                return\n\n            # Define success response directly within the method\n            success_response = {\n                'status': 'success',\n                'message': 'Data received successfully.'\n            }\n            \n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(success_response).encode())\n\n    return PostRequestHandler",
        "test": "import unittest\nimport requests_mock\nimport requests\n# Constants\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\nclass TestCases(unittest.TestCase):\n    @requests_mock.mock()\n    def test_invalid_content_type_header(self, m):\n        # Mock the POST request to return a 400 status code for invalid content type\n        m.post(\"http://testserver/\", status_code=400, json=ERROR_RESPONSE)\n        response = requests.post(\"http://testserver/\", headers={\"Content-Type\": \"text/plain\"})\n        self.assertEqual(response.json(), ERROR_RESPONSE)\n        self.assertEqual(response.status_code, 400)\n    @requests_mock.mock()\n    def test_missing_data_in_request(self, m):\n        # Mock the POST request to return a 400 status code for missing 'data' key\n        m.post(\"http://testserver/\", status_code=400, json=ERROR_RESPONSE)\n        response = requests.post(\"http://testserver/\", json={\"wrong_key\": \"value\"})\n        self.assertEqual(response.json(), ERROR_RESPONSE)\n        self.assertEqual(response.status_code, 400)\n    @requests_mock.mock()\n    def test_valid_post_request(self, m):\n        m.post(\"http://testserver/\", text=json.dumps(SUCCESS_RESPONSE))\n        response = requests.post(\"http://testserver/\", json={\"data\": \"value\"})\n        self.assertEqual(response.json(), SUCCESS_RESPONSE)\n        self.assertEqual(response.status_code, 200)\n    @requests_mock.mock()\n    def test_response_content_type(self, m):\n        # Mock the POST request and explicitly set the 'Content-Type' header\n        headers = {'Content-Type': 'application/json'}\n        m.post(\"http://testserver/\", json=SUCCESS_RESPONSE, headers=headers)\n        response = requests.post(\"http://testserver/\", json={\"data\": \"value\"})\n        self.assertEqual(response.headers[\"Content-Type\"], \"application/json\")\n    @requests_mock.mock()\n    def test_incorrect_http_method(self, m):\n        m.get(\"http://testserver/\", status_code=405)\n        response = requests.get(\"http://testserver/\")\n        self.assertEqual(response.status_code, 405)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads a text file from a specified URL, processes the text to count the frequency of each word, and then plots a bar chart showing the ten most frequently occurring words.\nNote that: The function assumes the URL points to a plain text file and may not handle binary files or non-text content correctly. Words are identified using a basic regular expression and are case-sensitive. The function does not remove common stopwords; all words are counted as is. Requires internet access to download the file from the URL.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    Counter: A Counter object from the collections module, containing word frequencies in the text.\n    Axes: A matplotlib Axes object that represents the plotted bar chart of the ten most common words.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n```",
        "gt": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\ndef task_func(url):\n    with urllib.request.urlopen(url) as response:\n        text = response.read().decode()\n        words = re.findall(r\"\\b\\w+\\b\", text)\n        word_freq = Counter(words)\n        top_words = word_freq.most_common(10)\n\n        _, ax = plt.subplots()\n        ax.bar([word[0] for word in top_words], [word[1] for word in top_words])\n        ax.set_title(\"Top 10 Most Common Words\")\n        ax.set_xlabel(\"Words\")\n        ax.set_ylabel(\"Frequency\")\n\n        return word_freq, ax",
        "test": "import unittest\nfrom unittest.mock import patch\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    @patch(\"urllib.request.urlopen\")\n    def test_word_frequencies(self, mock_urlopen):\n        \"\"\"Test that the function returns the correct word frequencies.\"\"\"\n        # Mock the response data\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            b\"OpenAI OpenAI OpenAI benefits\"\n        )\n        word_freq, ax = task_func(\"http://example.com\")\n        self.assertIsInstance(word_freq, Counter)\n        self.assertEqual(word_freq[\"OpenAI\"], 3)\n        self.assertEqual(word_freq[\"benefits\"], 1)\n        self.assertIsNotNone(ax)\n    @patch(\"urllib.request.urlopen\")\n    def test_empty_file(self, mock_urlopen):\n        \"\"\"Test that the function returns an empty Counter object for an empty file.\"\"\"\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = b\"\"\n        word_freq, ax = task_func(\"http://example.com\")\n        self.assertIsInstance(word_freq, Counter)\n        self.assertEqual(len(word_freq), 0)\n        self.assertIsNotNone(ax)\n    @patch(\"urllib.request.urlopen\")\n    def test_non_text_file(self, mock_urlopen):\n        \"\"\"Test that the function raises an error for a non-text file.\"\"\"\n        # Simulate a case where the URL does not point to a text file\n        mock_urlopen.side_effect = Exception(\"Non-text file error\")\n        with self.assertRaises(Exception):\n            task_func(\"http://example.com\")\n    @patch(\"urllib.request.urlopen\")\n    def test_special_characters(self, mock_urlopen):\n        \"\"\"Test that the function counts special characters as words.\"\"\"\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            b\"1234567890\"\n        )\n        word_freq, ax = task_func(\"http://example.com\")\n        self.assertIsInstance(word_freq, Counter)\n        self.assertEqual(word_freq[\"1234567890\"], 1)\n        self.assertIsNotNone(ax)\n    @patch(\"urllib.request.urlopen\")\n    def test_large_input(self, mock_urlopen):\n        \"\"\"Test that the function can handle a large input.\"\"\"\n        # Mock a large input\n        mock_text = \" \".join([\"OpenAI\"] * 10000)\n        mock_urlopen.return_value.__enter__.return_value.read.return_value = (\n            mock_text.encode()\n        )\n        word_freq, ax = task_func(\"http://example.com\")\n        self.assertIsInstance(word_freq, Counter)\n        self.assertEqual(word_freq[\"OpenAI\"], 10000)\n        self.assertIsNotNone(ax)\n    def tearDown(self):\n        plt.clf()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Determines if a specific subset of data is stationary by filtering rows where column_b bigger than 50 and column_c equal to 900. Data is considered to be stationary if the p_value returned by the Augmented Dickey-Fuller test is smaller than 0.05. If column_a is empty after filtering or if its values are constant, True is returned.\nThe function should output with:\n    bool: True if the data in column_a (after filtering based on column_b and column_c) is stationary, False otherwise.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n```",
        "gt": "import pandas as pd\nfrom statsmodels.tsa.stattools import adfuller\ndef task_func(df: pd.DataFrame, column_a: str, column_b: str, column_c: str) -> bool:\n    # Filter rows based on column_b and column_c\n    filtered_df = df[(df[column_b] > 50) & (df[column_c] == 900)]\n\n    if filtered_df[column_a].nunique() <= 1:\n        return True\n\n    # If dataframe is empty after filtering, return False\n    if filtered_df.empty:\n        return True\n\n    # Perform Augmented Dickey-Fuller test\n    adf_result = adfuller(filtered_df[column_a])\n    p_value = adf_result[1]\n    return p_value <= 0.05",
        "test": "import unittest\nimport os\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create DataFrame in setUp for test isolation\n        self.data = pd.DataFrame({\n            'A': list(range(100)),\n            'B': [x * 2 for x in range(100)],\n            'C': [900 if x % 2 == 0 else 800 for x in range(100)]\n        })\n    def test_constant_value(self):\n        # All values in column A are constant after filtering\n        self.data['A'] = 5\n        result = task_func(self.data, 'A', 'B', 'C')\n        self.assertTrue(result, \"Should be True as data is constant.\")\n    def test_empty_after_filter(self):\n        # After filtering, no rows remain\n        result = task_func(self.data[self.data['B'] > 1000], 'A', 'B', 'C')\n        self.assertTrue(result, \"Should be True as no data remains after filter.\")\n    def test_non_stationary_data(self):\n        # Test a clearly non-stationary dataset\n        result = task_func(self.data, 'A', 'B', 'C')\n        self.assertFalse(result, \"Should be False as data is non-stationary.\")\n    def test_stationary_data(self):\n        # Test a stationary dataset\n        self.data['A'] = 5\n        result = task_func(self.data, 'A', 'B', 'C')\n        self.assertTrue(result, \"Should be True as data is stationary.\")\n    def test_edge_case_small_dataset(self):\n        # Test a very small dataset\n        small_data = pd.DataFrame({\n            'A': [1, 1],\n            'B': [60, 70],\n            'C': [900, 900]\n        })\n        result = task_func(small_data, 'A', 'B', 'C')\n        self.assertTrue(result, \"Should be True due to small dataset size or no variation.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a performance report DataFrame for teams, detailing goals and penalties. For each team, the function fetches goal and penalty counts, calculates 'Penalties Cost' using a random multiplier from a predefined list, and computes a 'Performance Score' as the non-negative difference between goals and penalties. Return a Dataframe with colomns 'Team', 'Goals', 'Penalties', 'Penalties Cost' and 'Performance Score'.\nThe function should output with:\n    pd.DataFrame: DataFrame with Team, Goals, Penalties, Penalties Cost, Performance Score.\nYou should write self-contained code starting with:\n```\nfrom random import choice\nimport numpy as np\nimport pandas as pd\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n```",
        "gt": "from random import choice\nimport numpy as np\nimport pandas as pd\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTIES_COSTS = [100, 200, 300, 400, 500]\ndef task_func(goals, penalties, teams=TEAMS, penalties_costs=PENALTIES_COSTS):\n    report_data = []\n    for team in teams:\n        team_goals = goals.get(team, 0)\n        team_penalties = penalties.get(team, 0)\n        penalties_cost = team_penalties * choice(penalties_costs)\n        performance_score = np.max([0, team_goals - team_penalties])\n        report_data.append({\n            'Team': team,\n            'Goals': team_goals,\n            'Penalties': team_penalties,\n            'Penalties Cost': penalties_cost,\n            'Performance Score': performance_score\n        })\n\n    report_df = pd.DataFrame(report_data)\n    return report_df",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    @patch(__name__ + '.choice', return_value=400)\n    def test_goals_greater_than_penalties(self, mock_choice):\n        goals = {'Team A': 4, 'Team B': 2, 'Team C': 0, 'Team D': 0, 'Team E': 0}\n        penalties = {'Team A': 1, 'Team B': 1, 'Team C': 0, 'Team D': 0, 'Team E': 0}\n        expected_data = {\n            'Team': TEAMS,\n            'Goals': [4, 2, 0, 0, 0],\n            'Penalties': [1, 1, 0, 0, 0],\n            'Penalties Cost': [400, 400, 0, 0, 0],  # Mocked value is reflected here\n            'Performance Score': [3, 1, 0, 0, 0]  # Assuming Performance Score is Goals - Penalties\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(goals, penalties)\n        pd.testing.assert_frame_equal(result_df.reset_index(drop=True), expected_df.reset_index(drop=True))\n    @patch(__name__ + '.choice', return_value=200)\n    def test_some_teams_missing(self, mock_choice):\n        goals = {'Team A': 2, 'Team E': 5}\n        penalties = {'Team A': 0, 'Team E': 3}\n        expected_data = {\n            'Team': TEAMS,\n            'Goals': [2, 0, 0, 0, 5],\n            'Penalties': [0, 0, 0, 0, 3],\n            'Penalties Cost': [0, 0, 0, 0, 600],\n            'Performance Score': [2, 0, 0, 0, 2]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(goals, penalties)\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    @patch(__name__ + '.choice', return_value=500)\n    def test_penalties_greater_than_goals(self, mock_choice):\n        goals = {'Team B': 1, 'Team D': 2}\n        penalties = {'Team B': 3, 'Team D': 5}\n        expected_data = {\n            'Team': TEAMS,\n            'Goals': [0, 1, 0, 2, 0],\n            'Penalties': [0, 3, 0, 5, 0],\n            'Penalties Cost': [0, 1500, 0, 2500, 0],\n            'Performance Score': [0, 0, 0, 0, 0]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(goals, penalties)\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    @patch(__name__ + '.choice', return_value=300)\n    def test_all_teams_penalty(self, mock_choice):\n        goals = {'Team A': 0, 'Team B': 0, 'Team C': 0, 'Team D': 0, 'Team E': 0}\n        penalties = {'Team A': 2, 'Team B': 1, 'Team C': 3, 'Team D': 1, 'Team E': 4}\n        expected_penalties_cost = [penalty * mock_choice.return_value for penalty in penalties.values()]\n        expected_data = {\n            'Team': list(goals.keys()),  # The list of teams from the goals dictionary keys\n            'Goals': list(goals.values()),  # The list of goals from the goals dictionary values\n            'Penalties': list(penalties.values()),  # The list of penalties from the penalties dictionary values\n            'Penalties Cost': expected_penalties_cost,\n            'Performance Score': [0] * len(TEAMS)  # A list of zeros for performance score\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(goals, penalties)\n        pd.testing.assert_frame_equal(result_df.reset_index(drop=True), expected_df.reset_index(drop=True))\n    @patch(__name__ + '.choice', return_value=100)\n    def test_empty_goals_and_penalties(self, mock_choice):\n        goals = {}\n        penalties = {}\n        expected_data = {\n            'Team': TEAMS,\n            'Goals': [0, 0, 0, 0, 0],\n            'Penalties': [0, 0, 0, 0, 0],\n            'Penalties Cost': [0, 0, 0, 0, 0],\n            'Performance Score': [0, 0, 0, 0, 0]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(goals, penalties)\n        pd.testing.assert_frame_equal(result_df, expected_df)\n    @patch(__name__ + '.choice', return_value=300)\n    def test_no_penalties(self, mock_choice):\n        goals = {'Team A': 3, 'Team B': 2}\n        penalties = {'Team A': 0, 'Team B': 0}\n        expected_data = {\n            'Team': ['Team A', 'Team B'] + ['Team C', 'Team D', 'Team E'],\n            'Goals': [3, 2] + [0, 0, 0],\n            'Penalties': [0, 0] + [0, 0, 0],\n            'Penalties Cost': [0, 0] + [0, 0, 0],\n            'Performance Score': [3, 2] + [0, 0, 0]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(goals, penalties)\n        pd.testing.assert_frame_equal(result_df, expected_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform exploratory data analysis on a dataframe. This function converts the 'date' column to an ordinal format, creates a correlation matrix, and generates a pair plot of the dataframe. The title of the plot is 'Correlation Matrix'.\nThe function should raise the exception for: ValueError: If the dataframe is empty, if required columns are missing, or if 'date' column is not in datetime format.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object for the correlation matrix heatmap.\n    seaborn.axisgrid.PairGrid: The PairGrid object for the pair plot.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df):\n    if df.empty or not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"DataFrame must be non-empty and contain 'group', 'date', and 'value' columns.\")\n    \n    if not pd.api.types.is_datetime64_any_dtype(df['date']):\n        raise ValueError(\"'date' column must be in datetime format.\")\n\n    try:\n        df['date'] = df['date'].apply(lambda x: x.toordinal())\n        df_numeric = df.drop(columns=['group'])\n        correlation_matrix = df_numeric.corr()\n\n        heatmap_fig = plt.figure(figsize=(8, 6))\n        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n        plt.title('Correlation Matrix')\n\n        pairplot_grid = sns.pairplot(df)\n\n        return heatmap_fig, pairplot_grid\n\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")",
        "test": "import unittest\nimport numpy as np \nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.valid_df = pd.DataFrame({\n            \"group\": [\"A\", \"A\", \"A\", \"B\", \"B\"],\n            \"date\": pd.to_datetime([\"2022-01-02\", \"2022-01-13\", \"2022-02-01\", \"2022-02-23\", \"2022-03-05\"]),\n            \"value\": [10, 20, 16, 31, 56],\n        })\n    def test_valid_input(self):\n        heatmap_fig, pairplot_grid = task_func(self.valid_df)\n        self.assertIsInstance(heatmap_fig, plt.Figure)\n        self.assertIsInstance(pairplot_grid, sns.axisgrid.PairGrid)\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_missing_columns(self):\n        incomplete_df = self.valid_df.drop(columns=['date'])\n        with self.assertRaises(ValueError):\n            task_func(incomplete_df)\n    def test_invalid_date_column(self):\n        invalid_df = self.valid_df.copy()\n        invalid_df['date'] = \"not a date\"\n        with self.assertRaises(ValueError):\n            task_func(invalid_df)\n    def test_plot_titles(self):\n        heatmap_fig, pairplot_grid = task_func(self.valid_df)\n        self.assertEqual(heatmap_fig.axes[0].get_title(), 'Correlation Matrix')\n    \n    def test_value_consistency(self):\n        df = self.valid_df.copy()\n        df['date'] = df['date'].apply(lambda x: x.toordinal())\n        df_numeric = df.drop(columns=['group'])\n        heatmap_fig, _ = task_func(self.valid_df)\n        # Retrieve the correlation matrix data from the heatmap and reshape it\n        heatmap_data = heatmap_fig.axes[0].collections[0].get_array().data\n        heatmap_data_reshaped = heatmap_data.reshape(df_numeric.corr().shape)\n        expected_corr_matrix = df_numeric.corr().values\n        # Compare the reshaped data in the heatmap with the expected correlation matrix\n        np.testing.assert_array_almost_equal(heatmap_data_reshaped, expected_corr_matrix)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of each letter in a list after repeating it a given number of times.\nThe function should output with:\n    Returns a dictionary where the keys are the letters and the values are their frequencies.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n```",
        "gt": "from collections import Counter\nimport itertools\ndef task_func(letters: list, repetitions: int) -> dict:\n    # Create a flattened list by repeating the original list\n    flattened_list = list(itertools.chain(*[letters for _ in range(repetitions)]))\n    \n    # Count the occurrences of each letter in the flattened list\n    counts = dict(Counter(flattened_list))\n    \n    return counts",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        result = task_func(['A', 'B', 'C'], 2)\n        expected = {'A': 2, 'B': 2, 'C': 2}\n        self.assertEqual(result, expected)\n        \n    def test_case_2(self):\n        result = task_func(['A', 'B'], 3)\n        expected = {'A': 3, 'B': 3}\n        self.assertEqual(result, expected)\n        \n    def test_case_3(self):\n        result = task_func([], 2)\n        expected = {}\n        self.assertEqual(result, expected)\n        \n    def test_case_4(self):\n        result = task_func(['A', 'B', 'A'], 2)\n        expected = {'A': 4, 'B': 2}\n        self.assertEqual(result, expected)\n        \n    def test_case_5(self):\n        result = task_func(['A'], 0)\n        expected = {}\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Visualize the distribution of stock closing prices using both a box plot and a histogram within a single figure. This function is designed to help understand the spread, central tendency, and the distribution shape of stock closing prices.\nNote that: The tile of the box plot is set to 'Box Plot of Closing Prices' and the title of the histogram is set to 'Histogram of Closing Prices'.\nThe function should output with:\n    tuple: A tuple containing two matplotlib.axes._axes.Axes objects: the first for the boxplot\n    and the second for the histogram.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(df: pd.DataFrame) -> tuple:\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n    \n    boxplot_ax = sns.boxplot(x=df['closing_price'], ax=axes[0])\n    boxplot_ax.set_title('Box Plot of Closing Prices')\n    \n    histplot_ax = sns.histplot(df['closing_price'], kde=True, ax=axes[1])\n    histplot_ax.set_title('Histogram of Closing Prices')\n    \n    plt.tight_layout()\n    plt.close(fig)  # Prevent automatic figure display within Jupyter notebooks or interactive environments.\n    \n    return boxplot_ax, histplot_ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Assuming the function task_func is defined in the same script, otherwise import it appropriately.\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        df = pd.DataFrame({\n            'closing_price': [100, 101, 102, 103, 104, 150]\n        })\n        boxplot_ax, histplot_ax = task_func(df)\n        \n        self.assertIsInstance(boxplot_ax, plt.Axes)\n        self.assertIsInstance(histplot_ax, plt.Axes)\n        \n        self.assertEqual(boxplot_ax.get_title(), 'Box Plot of Closing Prices')\n        self.assertEqual(histplot_ax.get_title(), 'Histogram of Closing Prices')\n        \n        self.assertEqual(histplot_ax.get_xlabel(), 'closing_price')\n        self.assertIn('Count', histplot_ax.get_ylabel())  # Check if 'Count' is part of the ylabel\n            \n    def test_empty_df(self):\n        df = pd.DataFrame({'closing_price': []})\n        boxplot_ax, histplot_ax = task_func(df)\n        \n        self.assertIsInstance(boxplot_ax, plt.Axes)\n        self.assertIsInstance(histplot_ax, plt.Axes)\n        # Instead of checking if the plot \"has data,\" we ensure that it exists and does not raise an error.\n        self.assertIsNotNone(boxplot_ax, \"Boxplot should be created even with empty data.\")\n        self.assertIsNotNone(histplot_ax, \"Histogram should be created even with empty data.\")\n    def test_invalid_column(self):\n        df = pd.DataFrame({'price': [100, 101, 102]})\n        with self.assertRaises(KeyError):\n            task_func(df)\n    def test_single_value_df(self):\n        df = pd.DataFrame({'closing_price': [100]})\n        boxplot_ax, histplot_ax = task_func(df)\n        \n        self.assertIsInstance(boxplot_ax, plt.Axes)\n        self.assertIsInstance(histplot_ax, plt.Axes)\n        self.assertTrue(boxplot_ax.has_data(), \"Boxplot should handle a single value dataframe.\")\n        self.assertTrue(histplot_ax.has_data(), \"Histogram should handle a single value dataframe.\")\n    def test_large_values_df(self):\n        df = pd.DataFrame({'closing_price': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]})\n        boxplot_ax, histplot_ax = task_func(df)\n        \n        self.assertIsInstance(boxplot_ax, plt.Axes)\n        self.assertIsInstance(histplot_ax, plt.Axes)\n        self.assertTrue(boxplot_ax.has_data(), \"Boxplot should handle large values.\")\n        self.assertTrue(histplot_ax.has_data(), \"Histogram should handle large values.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Filters rows in a dictionary where the 'Name' column values start with a specified letter. First, convert the dict to a DataFrame and then filter rows in this DataFrame.\nThe function should output with:\n    pd.Series: A Series of filtered 'Name' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(data, letter):\n```",
        "gt": "import pandas as pd\nimport time\n# Constants\nLETTERS = list('abcdefghijklmnopqrstuvwxyz')\ndef task_func(data, letter):\n    df = pd.DataFrame(data)\n    start_time = time.time()\n    regex = f'^{letter}'\n    filtered_df = df[df['Name'].str.contains(regex, case=False, regex=True)]\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return filtered_df['Name'].value_counts()",
        "test": "### Unit Tests\nfrom random import choice, randint\nimport unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Generate a DataFrame for testing.\"\"\"\n        self.df = {'Name': [choice(LETTERS) + 'name' + str(randint(1, 100)) for _ in range(100)]}\n    def test_filter_letter_a(self):\n        \"\"\"Test filtering by letter 'a'.\"\"\"\n        result = task_func(self.df, 'a')\n        all_start_with_a = all(name.startswith('a') for name in result.index)\n        self.assertTrue(all_start_with_a)\n    def test_filter_returns_series(self):\n        \"\"\"Test that the function returns a pandas Series.\"\"\"\n        result = task_func(self.df, 'b')\n        self.assertIsInstance(result, pd.Series)\n    def test_series_sorted_by_value_counts(self):\n        \"\"\"Test that the Series is sorted by value counts.\"\"\"\n        result = task_func(self.df, 'c')\n        self.assertTrue(result.equals(result.sort_values(ascending=False)))\n    def test_nonexistent_letter(self):\n        \"\"\"Test filtering by a letter not present.\"\"\"\n        # Use a fixed DataFrame with known values that do not start with 'z'\n        df = pd.DataFrame({'Name': ['Apple', 'Banana', 'Cherry', 'Date']})\n        result = task_func(df, 'z')\n        # Expecting the length of the result to be 0 since no names start with 'z'\n        self.assertEqual(len(result), 0)\n    def test_case_insensitivity(self):\n        \"\"\"Test case insensitivity of the filter.\"\"\"\n        df = pd.DataFrame({'Name': ['Apple', 'apple', 'banana', 'Banana']})\n        result = task_func(df, 'a')\n        self.assertEqual(sum(result), 2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates an RSA public and private key pair and saves the private key in a file after encrypting it with a password using AES encryption. Returns the public key and the filename of the encrypted private key, along with encryption details for testing. The name of the output file is a in the format of \"private_key_<number>.txt\", where <number> is a the hex representation of the 8 randomly generated bytes.\nThe function should output with:\n    rsa.PublicKey: The RSA public key.\n    str: The filename where the encrypted private key is stored.\n    bytes: The encryption password, for testing decryption.\n    bytes: The encryption nonce, for testing decryption.\nYou should write self-contained code starting with:\n```\nimport rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n```",
        "gt": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\ndef task_func():\n    (pub_key, priv_key) = rsa.newkeys(512)\n    password = get_random_bytes(16)\n\n    cipher = AES.new(password, AES.MODE_EAX)\n    nonce = cipher.nonce\n    priv_key_encrypted, tag = cipher.encrypt_and_digest(priv_key.save_pkcs1())\n\n    priv_key_encrypted = b64encode(priv_key_encrypted).decode('utf-8')\n\n    filename = f'private_key_{os.urandom(8).hex()}.txt'\n    with open(filename, 'w') as f:\n        f.write(priv_key_encrypted)\n\n    return pub_key, filename, password, nonce",
        "test": "import unittest\nimport os\nimport rsa\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom base64 import b64decode\nclass TestCases(unittest.TestCase):\n    filenames = []\n    def test_return_type(self):\n        pub_key, filename, _, _ = task_func()\n        self.assertIsInstance(pub_key, rsa.PublicKey)\n        self.assertIsInstance(filename, str)\n        self.filenames.append(filename)\n    def test_file_creation(self):\n        _, filename, _, _ = task_func()\n        self.assertTrue(os.path.exists(filename))\n        self.filenames.append(filename)\n    def test_file_content(self):\n        _, filename, _, _ = task_func()\n        with open(filename, 'r') as f:\n            content = f.read()\n            self.assertTrue(content)\n        self.filenames.append(filename)\n    def test_key_size(self):\n        pub_key, filename, _, _ = task_func()\n        self.assertEqual(pub_key.n.bit_length(), 512)\n        self.filenames.append(filename)\n    def test_unique_file_per_call(self):\n        _, filename1, _, _ = task_func()\n        _, filename2, _, _ = task_func()\n        self.assertNotEqual(filename1, filename2)\n        self.filenames.extend([filename1, filename2])\n    def test_encryption_decryption(self):\n        pub_key, filename, password, nonce = task_func()\n        self.filenames.append(filename)\n        with open(filename, 'r') as f:\n            encrypted_key = b64decode(f.read())\n        cipher = AES.new(password, AES.MODE_EAX, nonce=nonce)\n        decrypted_key = cipher.decrypt(encrypted_key)\n        # Attempt to load the decrypted private key to verify its integrity\n        priv_key = rsa.PrivateKey.load_pkcs1(decrypted_key)\n        self.assertIsInstance(priv_key, rsa.PrivateKey)\n    def tearDown(self):\n        for filename in self.filenames:\n            if os.path.exists(filename):\n                os.remove(filename)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a sample from a normal distribution with a given mean and a standard deviation and plot the histogram together with the probability density function. Returns the Axes object representing the plot and the empirical mean and standard deviation of the sample.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): Axes object with the plotted histogram and normal PDF, with the title format of 'Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$'.\n    float: The empirical mean of the sample.\n    float: The empirical standard deviation of the sample.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\ndef task_func(mu=0, sigma=1, sample_size=1000, seed=0):\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    \n    fig, ax = plt.subplots()\n    ax.hist(sample, bins=30, density=True, alpha=0.5, label='Sample Histogram')\n    \n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, p, 'k', linewidth=2, label='Normal PDF')\n    \n    ax.set_title(\"Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$\" % (mu, sigma))\n    ax.legend()    \n    return ax, np.mean(sample), np.std(sample)",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ax, _, _ = task_func()\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Normal Distribution with $\\\\mu = 0.00, \\\\sigma = 1.00$\")\n    def test_case_2(self):\n        ax, mean, std = task_func(mu=5, sigma=2, sample_size=500, seed=42)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Normal Distribution with $\\\\mu = 5.00, \\\\sigma = 2.00$\")\n        self.assertAlmostEqual(mean, 5.0136, places=3)\n    def test_case_3(self):\n        ax, mean, std = task_func(mu=-3, sigma=5, sample_size=2000, seed=23)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Normal Distribution with $\\\\mu = -3.00, \\\\sigma = 5.00$\")\n        self.assertAlmostEqual(std, 4.978, places=3)\n    def test_case_4(self):\n        ax, _, _ = task_func(mu=1, sigma=0.5, sample_size=100)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Normal Distribution with $\\\\mu = 1.00, \\\\sigma = 0.50$\")\n    def test_case_5(self):\n        ax, mean, std = task_func(mu=10, sigma=0.1, sample_size=1500)\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertEqual(ax.get_title(), \"Normal Distribution with $\\\\mu = 10.00, \\\\sigma = 0.10$\")\n        self.assertAlmostEqual(mean, 9.998, places=3)\n        self.assertAlmostEqual(std, 0.09804, places=3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize specified numeric columns in a dataframe.\nThe function should raise the exception for: ValueError: If 'df' is not a DataFrame, 'cols' is not a list, or columns in 'cols' don't exist in 'df'.\nThe function should output with:\n    DataFrame: The dataframe with standardized columns.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df, cols):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a pandas DataFrame.\")\n    if not isinstance(cols, list) or not all(isinstance(col, str) for col in cols):\n        raise ValueError(\"cols must be a list of column names.\")\n    if not all(col in df.columns for col in cols):\n        raise ValueError(\"All columns in cols must exist in the dataframe.\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    return df",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd \nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.df = pd.DataFrame({\n            'A': np.random.normal(0, 1, 1000), \n            'B': np.random.exponential(1, 1000), \n            'C': np.random.randint(0, 100, 1000)\n        })\n    def test_standardized_columns(self):\n        standardized_df = task_func(self.df, ['A', 'B'])\n        self.assertAlmostEqual(standardized_df['A'].mean(), 0, places=1)\n        self.assertAlmostEqual(standardized_df['A'].std(), 1, places=1)\n        self.assertAlmostEqual(standardized_df['B'].mean(), 0, places=1)\n        self.assertAlmostEqual(standardized_df['B'].std(), 1, places=1)\n        df_list = standardized_df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        with open('df_contents.txt', 'w') as file:\n            file.write(str(df_list))\n    def test_invalid_input_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\", ['A', 'B'])\n    def test_invalid_input_cols(self):\n        with self.assertRaises(ValueError):\n            task_func(self.df, 'A')\n    def test_nonexistent_column(self):\n        with self.assertRaises(ValueError):\n            task_func(self.df, ['A', 'NonexistentColumn'])\n    def test_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame(), ['A', 'B'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a pandas DataFrame with two columns, \"Random Numbers\" and \"Moving Average,\" filled with random integers and their moving average, respectively. Additionally, this function plots a histogram of the \"Random Numbers\" column. No Parameters.\nThe function should output with:\n    pd.DataFrame: A DataFrame with two columns:\n    \"Random Numbers\": Contains a list of randomly generated integers.\n    \"Moving Average\": Contains the moving average of the random integers,\n    calculated over a window that includes the current\n    and previous 5 integers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nRANGE = 10000  # The range within which random numbers are generated\nSIZE = 1000  # The number of random numbers to generate\nBIN_WIDTH = 100  # The width of bins for the histogram\ndef task_func():\n```",
        "gt": "import pandas as pd\nimport random\nimport statistics\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Constants\nRANGE = 10000  # The range within which random numbers are generated\nSIZE = 1000  # The number of random numbers to generate\nBIN_WIDTH = 100  # The width of bins for the histogram\ndef task_func():\n    numbers = [random.randint(0, RANGE) for _ in range(SIZE)]\n    moving_avg = [statistics.mean(numbers[max(0, i - 5):i + 1]) for i in range(SIZE)]\n\n    df = pd.DataFrame({\n        'Random Numbers': numbers,\n        'Moving Average': moving_avg\n    })\n\n    plt.hist(df['Random Numbers'],\n             bins=np.arange(min(df['Random Numbers']), max(df['Random Numbers']) + BIN_WIDTH, BIN_WIDTH))\n    plt.title('Histogram of Random Numbers')\n    plt.xlabel('Random Numbers')\n    plt.ylabel('Frequency')\n    plt.show()\n\n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_dataframe_shape(self):\n        \"\"\"Test that the DataFrame has the correct shape.\"\"\"\n        df = task_func()\n        self.assertEqual(df.shape, (SIZE, 2))\n    def test_random_numbers_range(self):\n        \"\"\"Test that the random numbers fall within the specified range.\"\"\"\n        df = task_func()\n        self.assertTrue(df['Random Numbers'].between(0, RANGE).all())\n    def test_moving_average_calculation(self):\n        \"\"\"Test that the moving average is correctly calculated.\"\"\"\n        df = task_func()\n        # Assuming moving average calculation correctness check for the first few entries\n        for i in range(6):  # Check the first 6 entries for a window of 6 elements\n            expected_avg = statistics.mean(df['Random Numbers'].iloc[max(0, i - 5):i + 1])\n            self.assertEqual(df['Moving Average'].iloc[i], expected_avg, \"Moving average calculation mismatch.\")\n    def test_columns_existence(self):\n        \"\"\"Ensure both required columns exist in the DataFrame.\"\"\"\n        df = task_func()\n        self.assertIn('Random Numbers', df.columns)\n        self.assertIn('Moving Average', df.columns)\n    def test_non_empty_dataframe(self):\n        \"\"\"Check that the DataFrame is not empty.\"\"\"\n        df = task_func()\n        self.assertFalse(df.empty)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a random string of length between `min_length` and `max_length`, inclusive, using characters from `letters`, and evaluates its similarity to the provided string `s`. A similarity score of 0.5 or higher considered 'similar'.\nThe function should output with:\n    tuple: A tuple containing the generated string and a boolean indicating whether it's\n    considered similar to `s` based on the similarity threshold.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n```",
        "gt": "import numpy as np\nimport random\nfrom difflib import SequenceMatcher\ndef task_func(s, min_length, max_length, letters):\n    string_length = np.random.randint(min_length, max_length+1)\n    generated_s = ''.join(random.choice(letters) for _ in range(string_length))\n\n    # Check similarity\n    similarity = SequenceMatcher(None, s, generated_s).ratio()\n    is_similar = similarity >= 0.5\n\n    return generated_s, is_similar",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Set up common parameters for all tests\n        self.s = 'example'\n        self.min_length = 5\n        self.max_length = 10\n        self.letters = 'abcdefghijklmnopqrstuvwxyz'\n    def test_length_of_generated_string(self):\n        generated_s, _ = task_func(self.s, self.min_length, self.max_length, self.letters)\n        self.assertTrue(self.min_length <= len(generated_s) <= self.max_length)\n    def test_similarity_boolean(self):\n        _, is_similar = task_func(self.s, self.min_length, self.max_length, self.letters)\n        self.assertIsInstance(is_similar, bool)\n    def test_empty_string(self):\n        s = ''\n        generated_s, is_similar = task_func(s, self.min_length, self.max_length, self.letters)\n        self.assertTrue(isinstance(generated_s, str))\n        self.assertTrue(isinstance(is_similar, bool))\n    def test_non_string_input(self):\n        with self.assertRaises(TypeError):\n            task_func(123, self.min_length, self.max_length, self.letters)\n    def test_large_string_input(self):\n        s = 'a' * 100\n        generated_s, is_similar = task_func(s, self.min_length, self.max_length, self.letters)\n        self.assertTrue(isinstance(generated_s, str))\n        self.assertTrue(isinstance(is_similar, bool))\n    def test_specific_letters(self):\n        # Test using a different set of letters to ensure functionality is consistent with varied inputs\n        letters = 'abc'\n        generated_s, _ = task_func(self.s, self.min_length, self.max_length, letters)\n        self.assertTrue(all(c in letters for c in generated_s))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts matches from all text files in a specified directory based on a regular expression pattern. It captures whatever is between parentheses as a single match, and any character outside the parentheses as individual matches in the string.\nThe function should output with:\n    dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nfrom pathlib import Path\nimport glob\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n```",
        "gt": "import re\nimport os\nfrom pathlib import Path\nimport glob\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n\n    return match_dict",
        "test": "import unittest\nimport shutil\nimport doctest\nimport tempfile\nclass TestCases(unittest.TestCase):\n    regex_pattern = r'\\(.+?\\)'\n    def setUp(self) -> None:\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.temp_dir = f\"{self.base_tmp_dir}/test\"\n        if not os.path.exists(self.temp_dir):\n            os.mkdir(self.temp_dir)\n    def tearDown(self) -> None:\n        if os.path.exists(self.base_tmp_dir):\n            shutil.rmtree(self.base_tmp_dir)\n    def test_case_1(self):\n        # Test with the first sample directory\n        input_text = {\n            \"file1.txt\": ['world', 'H', 'e', 'l', 'l', 'o', ' ', '!', ' '],\n            \"file2.txt\": ['Greetings', ' ', 'e', 'v', 'e', 'r', 'y', 'o', 'n', 'e', '.'],\n            \"file3.txt\": ['test', 'S', 'i', 'm', 'p', 'l', 'e', ' ', ' ', 'f', 'i', 'l', 'e', '.']\n        }\n        expected = {\n            \"file1.txt\": [],\n            \"file2.txt\": [],\n            \"file3.txt\": []\n        }\n        for file_name, content in input_text.items():\n            with open(os.path.join(self.temp_dir, file_name), \"w\") as file:\n                file.write(''.join(content))\n        result = task_func(self.temp_dir, self.regex_pattern)\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        # Test with an empty directory\n        result = task_func(self.temp_dir, self.regex_pattern)\n        self.assertEqual(result, {})\n    def test_case_3(self):\n        # Test with a directory containing a text file with no matches\n        with open(os.path.join(self.temp_dir, \"file4.txt\"), \"w\") as file:\n            file.write(\"No matches here!\")\n        result = task_func(self.temp_dir, self.regex_pattern)\n        self.assertEqual(result, {'file4.txt': []})\n    \n    def test_case_4(self):\n        # Test with a directory containing a text file with multiple matches\n        with open(os.path.join(self.temp_dir, \"file5.txt\"), \"w\") as file:\n            file.write(\"(A)(B)(C)(D)\")\n        result = task_func(self.temp_dir, self.regex_pattern)\n        self.assertEqual(result, {\"file5.txt\": ['(A)', '(B)', '(C)', '(D)']})\n    \n    def test_case_5(self):\n        # Test with a directory containing a text file with special characters\n        with open(os.path.join(self.temp_dir, \"file6.txt\"), \"w\") as file:\n            file.write(\"Special (characters) like #, $, %\")\n        result = task_func(self.temp_dir, self.regex_pattern)\n        self.assertEqual(result, {\"file6.txt\": ['(characters)']})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a pandas Series of random dates within a specified date range, including both start_date and end_date, with an optional seed for reproducibility. The function creates a series of dates randomly selected between the specified start and end dates, inclusive. It allows specifying a seed for the random number generator to ensure reproducible results, making it suitable for simulations or tests requiring consistency.\nNote that: The start_date and end_date are inclusive, meaning both dates are considered as potential values in the generated series. The default seed value is 42, ensuring that results are reproducible by default unless a different seed is specified by the user.\nThe function should raise the exception for: ValueError: If 'start_date' or 'end_date' is not a datetime.datetime instance, or if 'start_date' is later than 'end_date'.\nThe function should output with:\n    pandas.Series: A Series object containing random dates within the specified range, with each\n    date being a datetime.datetime object. The series length matches the number of days in the\n    specified range.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n```",
        "gt": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \n    if not all(isinstance(date, datetime) for date in [start_date, end_date]):\n        raise ValueError(\"start_date and end_date must be datetime.datetime objects.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must not be later than end_date.\")\n\n    random_seed(seed)\n\n    num_days = (end_date - start_date).days\n    dates = pd.Series([start_date + timedelta(days=randint(0, num_days)) for _ in range(num_days)])\n    return dates",
        "test": "import unittest\nfrom datetime import datetime\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_reproducibility_with_seed(self):\n        seed_value = 42\n        dates1 = task_func(seed=seed_value)\n        dates2 = task_func(seed=seed_value)\n        pd.testing.assert_series_equal(dates1, dates2)\n        \n        df_list = dates1.astype(str).tolist()\n            \n        expect = ['2020-11-23', '2020-02-27', '2020-01-13', '2020-05-20', '2020-05-05', '2020-04-24', '2020-03-12', '2020-02-22', '2020-12-12', '2020-10-06', '2020-02-14', '2020-10-29', '2020-08-04', '2020-01-17', '2020-01-16', '2020-02-17', '2020-04-21', '2020-04-29', '2020-09-15', '2020-11-04', '2020-01-14', '2020-10-14', '2020-04-11', '2020-11-28', '2020-12-25', '2020-10-06', '2020-08-02', '2020-04-22', '2020-08-17', '2020-10-28', '2020-05-22', '2020-01-04', '2020-03-22', '2020-12-23', '2020-08-04', '2020-06-23', '2020-05-22', '2020-03-20', '2020-04-20', '2020-06-21', '2020-02-22', '2020-02-17', '2020-07-13', '2020-02-19', '2020-07-02', '2020-06-25', '2020-11-05', '2020-05-15', '2020-01-23', '2020-08-23', '2020-10-01', '2020-03-04', '2020-07-12', '2020-02-10', '2020-10-09', '2020-05-30', '2020-11-17', '2020-11-12', '2020-07-04', '2020-10-22', '2020-04-08', '2020-12-26', '2020-02-05', '2020-01-24', '2020-12-04', '2020-04-26', '2020-05-28', '2020-02-10', '2020-04-29', '2020-02-21', '2020-07-13', '2020-05-22', '2020-08-20', '2020-11-21', '2020-07-05', '2020-03-24', '2020-07-08', '2020-06-30', '2020-04-17', '2020-12-09', '2020-05-16', '2020-12-25', '2020-12-15', '2020-11-27', '2020-02-06', '2020-11-07', '2020-11-21', '2020-03-28', '2020-09-30', '2020-05-05', '2020-03-24', '2020-08-24', '2020-07-13', '2020-05-18', '2020-11-23', '2020-12-18', '2020-10-12', '2020-04-22', '2020-12-16', '2020-06-15', '2020-01-29', '2020-04-27', '2020-01-17', '2020-06-10', '2020-07-24', '2020-05-17', '2020-02-03', '2020-04-18', '2020-10-17', '2020-06-10', '2020-04-18', '2020-12-01', '2020-09-12', '2020-07-21', '2020-11-25', '2020-08-22', '2020-03-14', '2020-05-15', '2020-03-12', '2020-05-06', '2020-10-14', '2020-10-02', '2020-05-14', '2020-10-26', '2020-08-07', '2020-10-25', '2020-07-23', '2020-07-04', '2020-04-22', '2020-03-11', '2020-09-17', '2020-09-09', '2020-02-16', '2020-01-25', '2020-02-26', '2020-03-19', '2020-11-17', '2020-03-22', '2020-12-14', '2020-08-04', '2020-11-01', '2020-02-02', '2020-07-16', '2020-07-14', '2020-11-01', '2020-08-27', '2020-09-27', '2020-05-08', '2020-10-10', '2020-01-06', '2020-12-14', '2020-02-28', '2020-12-15', '2020-10-01', '2020-05-16', '2020-11-24', '2020-06-23', '2020-02-27', '2020-05-30', '2020-08-10', '2020-03-21', '2020-08-20', '2020-01-02', '2020-05-14', '2020-09-13', '2020-04-01', '2020-09-16', '2020-02-24', '2020-11-16', '2020-06-01', '2020-11-23', '2020-09-16', '2020-11-07', '2020-04-11', '2020-03-19', '2020-07-10', '2020-03-23', '2020-10-03', '2020-09-28', '2020-01-01', '2020-11-02', '2020-06-14', '2020-09-07', '2020-01-10', '2020-02-27', '2020-07-04', '2020-06-06', '2020-05-02', '2020-01-30', '2020-05-03', '2020-10-17', '2020-02-10', '2020-02-13', '2020-09-05', '2020-02-05', '2020-09-29', '2020-03-05', '2020-03-06', '2020-12-03', '2020-08-31', '2020-10-08', '2020-03-25', '2020-05-15', '2020-09-27', '2020-11-06', '2020-08-04', '2020-04-18', '2020-10-03', '2020-12-19', '2020-04-12', '2020-12-31', '2020-06-08', '2020-07-23', '2020-12-09', '2020-11-28', '2020-07-10', '2020-08-12', '2020-09-21', '2020-08-19', '2020-03-02', '2020-05-06', '2020-04-25', '2020-02-02', '2020-06-22', '2020-01-11', '2020-10-28', '2020-10-10', '2020-04-27', '2020-10-28', '2020-04-22', '2020-01-04', '2020-02-06', '2020-12-28', '2020-11-19', '2020-01-31', '2020-04-27', '2020-02-04', '2020-01-17', '2020-06-18', '2020-02-06', '2020-09-20', '2020-05-01', '2020-05-22', '2020-12-08', '2020-09-05', '2020-04-19', '2020-10-03', '2020-03-08', '2020-10-19', '2020-10-22', '2020-08-30', '2020-05-04', '2020-08-30', '2020-07-27', '2020-04-07', '2020-02-18', '2020-02-19', '2020-12-03', '2020-08-08', '2020-06-30', '2020-08-04', '2020-07-29', '2020-08-27', '2020-01-28', '2020-12-10', '2020-11-30', '2020-11-26', '2020-02-20', '2020-02-01', '2020-07-25', '2020-06-22', '2020-02-25', '2020-05-07', '2020-04-08', '2020-04-07', '2020-10-01', '2020-08-17', '2020-03-12', '2020-08-04', '2020-04-03', '2020-05-22', '2020-08-24', '2020-05-07', '2020-02-08', '2020-08-14', '2020-10-08', '2020-02-20', '2020-01-26', '2020-11-29', '2020-10-03', '2020-01-08', '2020-02-17', '2020-05-01', '2020-03-26', '2020-07-27', '2020-09-05', '2020-09-03', '2020-04-19', '2020-07-24', '2020-01-31', '2020-03-25', '2020-07-13', '2020-01-02', '2020-07-18', '2020-05-15', '2020-08-20', '2020-05-26', '2020-08-04', '2020-12-22', '2020-10-11', '2020-12-04', '2020-09-06', '2020-03-20', '2020-04-07', '2020-05-31', '2020-04-21', '2020-01-30', '2020-10-23', '2020-10-04', '2020-02-01', '2020-06-09', '2020-01-30', '2020-01-26', '2020-10-26', '2020-09-01', '2020-09-14', '2020-09-28', '2020-03-21', '2020-01-30', '2020-09-17', '2020-02-11', '2020-04-05', '2020-02-05', '2020-10-31', '2020-02-04', '2020-12-11', '2020-04-30', '2020-07-25', '2020-03-02', '2020-10-18', '2020-05-06', '2020-10-23', '2020-10-31', '2020-01-21', '2020-11-13', '2020-02-11', '2020-08-02', '2020-12-02', '2020-10-25', '2020-10-16', '2020-09-24', '2020-06-10', '2020-05-13', '2020-04-14', '2020-12-08', '2020-06-09', '2020-05-02', '2020-05-15', '2020-07-21', '2020-03-08', '2020-12-09', '2020-11-26', '2020-06-02', '2020-08-22', '2020-06-10']\n        \n        self.assertEqual(df_list, expect, \"DataFrame contents should match the expected output\")\n        \n    def test_series_length(self):\n        start_date = datetime(2020, 1, 1)\n        end_date = datetime(2020, 1, 10)\n        dates = task_func(start_date, end_date)\n        self.assertEqual(len(dates), (end_date - start_date).days)\n    def test_invalid_date_types(self):\n        with self.assertRaises(ValueError):\n            task_func('2020-01-01', datetime(2020, 12, 31))\n        with self.assertRaises(ValueError):\n            task_func(datetime(2020, 1, 1), '2020-12-31')\n    def test_start_date_after_end_date(self):\n        with self.assertRaises(ValueError):\n            task_func(datetime(2020, 12, 31), datetime(2020, 1, 1))\n    def test_return_type(self):\n        dates = task_func()\n        self.assertIsInstance(dates, pd.Series)\n    def test_date_within_range(self):\n        start_date = datetime(2020, 1, 1)\n        end_date = datetime(2020, 1, 5)\n        dates = task_func(start_date, end_date)\n        for date in dates:\n            self.assertTrue(start_date <= date <= end_date)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Predicts categories based on 'Age' and 'Score' in a given DataFrame using a Random Forest Classifier. Rows with duplicate 'Name' entries are dropped before the prediction. The function uses a Random Forest Classifier from sklearn to make predictions and evaluates the model using accuracy.\nThe function should raise the exception for: The function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    float: The accuracy of the prediction as a float value.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ndef task_func(df, test_size=0.2, random_state=42):\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    \n    df = df.drop_duplicates(subset='Name')\n\n    X = df[['Age', 'Score']]\n    y = df['Category']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    model = RandomForestClassifier(random_state=random_state)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n\n    accuracy = accuracy_score(y_test, predictions)\n\n    return accuracy",
        "test": "import unittest\nimport pandas as pd\nfrom faker import Faker\nimport random\nclass TestCases(unittest.TestCase):\n    # Helper function to generate test data\n    def generate_test_data(self, num_records):\n        random.seed(0)\n        fake = Faker()\n        data = []\n        for _ in range(num_records):\n            record = {\n                'Name': fake.name(),\n                'Age': random.randint(18, 70),\n                'Score': random.randint(50, 100),\n                'Category': fake.job()\n            }\n            data.append(record)\n        return pd.DataFrame(data)\n    \n    def test_basic_data(self):\n        data = self.generate_test_data(10)\n        accuracy = task_func(data)\n        self.assertIsInstance(accuracy, float)\n        self.assertGreaterEqual(accuracy, 0)\n        self.assertLessEqual(accuracy, 1)\n    def test_more_data(self):\n        data = self.generate_test_data(20)\n        accuracy = task_func(data)\n        self.assertEqual(accuracy, 0)\n    def test_large_data(self):\n        data = self.generate_test_data(100)\n        accuracy = task_func(data)\n        self.assertIsInstance(accuracy, float)\n    def test_single_record(self):\n        data = pd.DataFrame([{'Name': 'James', 'Age': 30, 'Score': 85, 'Category': 'Electronics'},\n            {'Name': 'Bob', 'Age': 20, 'Score': 75, 'Category': 'Home'},\n            {'Name': 'Nick', 'Age': 40, 'Score': 90, 'Category': 'Electronics'},\n            {'Name': 'Amy', 'Age': 60, 'Score': 95, 'Category': 'Home'}])\n        accuracy = task_func(data)\n        self.assertEqual(accuracy, 0)\n    def test_moderate_size_data(self):\n        data = self.generate_test_data(20)\n        accuracy = task_func(data)\n        self.assertIsInstance(accuracy, float)\n    \n    def test_case_non_df(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Plots the correlation matrix from numeric columns in a DataFrame and returns a DataFrame where the numeric columns are standardized to have mean 0 and variance 1.\nNote that: Notes: Only numeric columns are considered for the heatmap. Non-numeric columns are ignored.\nThe function should raise the exception for: ValueError: If the DataFrame is empty or if no numeric columns are present.\nThe function should output with:\n    pandas.DataFrame: Standardized DataFrame.\n    matplotlib.figure.Figure: Figure object containing the heatmap of the correlation matrix.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n```",
        "gt": "import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df):\n    numeric_df = df.select_dtypes(include=[np.number])\n    if numeric_df.empty:\n        raise ValueError(\"No numeric columns present\")\n\n    correlation = numeric_df.corr()\n    fig, ax = plt.subplots()\n    sns.heatmap(correlation, ax=ax)\n\n    numeric_cols = numeric_df.columns\n    scaler = StandardScaler()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n    return df, fig",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case with integer values\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        standardized_df, fig = task_func(df)\n        self.assertTrue(np.allclose(standardized_df.mean(), 0))\n        self.assertTrue(np.allclose(standardized_df.std(ddof=0), 1))\n        self.assertTrue(isinstance(fig, plt.Figure))\n    def test_case_2(self):\n        # Test case with float values\n        df = pd.DataFrame({\"X\": [1.1, 2.2, 3.3], \"Y\": [4.4, 5.5, 6.6]})\n        standardized_df, fig = task_func(df)\n        self.assertTrue(np.allclose(standardized_df.mean(), 0))\n        self.assertTrue(np.allclose(standardized_df.std(ddof=0), 1))\n        self.assertTrue(isinstance(fig, plt.Figure))\n    def test_case_3(self):\n        # Test case with negative values\n        df = pd.DataFrame({\"A\": [-1, -2, -3], \"B\": [-4, -5, -6]})\n        standardized_df, fig = task_func(df)\n        self.assertTrue(np.allclose(standardized_df.mean(), 0))\n        self.assertTrue(np.allclose(standardized_df.std(ddof=0), 1))\n        self.assertTrue(isinstance(fig, plt.Figure))\n    def test_case_4(self):\n        # Test case with single column\n        df = pd.DataFrame({\"A\": [1, 2, 3]})\n        standardized_df, fig = task_func(df)\n        self.assertTrue(np.allclose(standardized_df.mean(), 0))\n        self.assertTrue(np.allclose(standardized_df.std(ddof=0), 1))\n        self.assertTrue(isinstance(fig, plt.Figure))\n    def test_case_5(self):\n        # Test proper exception handling - no numeric columns\n        df = pd.DataFrame({\"A\": [\"apple\", \"banana\", \"cherry\"]})\n        with self.assertRaises(ValueError):\n            task_func(df)\n    def test_case_6(self):\n        # Test proper exception handling - empty dataframe\n        df = pd.DataFrame()\n        with self.assertRaises(ValueError):\n            task_func(df)\n    def test_case_7(self):\n        # Test ignoring non-numeric columns\n        df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [\"x\", \"y\", \"z\"], \"C\": [4.5, 5.5, 6.5]})\n        standardized_df, fig = task_func(df)\n        self.assertTrue(\"B\" in standardized_df.columns)\n        self.assertTrue(np.allclose(standardized_df[[\"A\", \"C\"]].mean(), 0))\n        self.assertTrue(np.allclose(standardized_df[[\"A\", \"C\"]].std(ddof=0), 1))\n        self.assertIsInstance(fig, plt.Figure)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a Pandas DataFrame into a dictionary of generator objects in which each generator generates a sequence of tuples that contain a unique name and the corresponding average score for that name. >>> df_sample = pd.DataFrame({ ...     'Name': ['Micky', 'Donald', 'Girl'], ...     'Score': [25.2, 9, -1] ... }) >>> gen_dict = task_func(df_sample) >>> {key: next(value) for key, value in gen_dict.items()} {'Donald': ('Donald', 9.0), 'Girl': ('Girl', -1.0), 'Micky': ('Micky', 25.2)}\nThe function should raise the exception for: ValueError: If the DataFrame does not have the 'Name' and 'Score' columns.\nThe function should output with:\n    dict: A dictionary of generator objects. Each generator generates a tuple\n    containing a unique name and the corresponding average score for that name.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n```",
        "gt": "import pandas as pd\nfrom statistics import mean\ndef task_func(df: pd.DataFrame) -> dict:\n\n    if 'Name' not in df.columns or 'Score' not in df.columns:\n        raise ValueError('The DataFram should have the columns \"Name\" and \"Score\".')\n\n    grouped = df.groupby('Name')\n    result_dict = {}\n    for name, group in grouped:\n        avg_score = mean(group['Score'])\n        result_dict[name] = iter([(name, avg_score)])\n\n    return result_dict",
        "test": "import unittest\nimport pandas as pd\nfrom statistics import mean\nfrom faker import Faker\nfake = Faker()\nclass TestCases(unittest.TestCase):\n    def test_case_wrong_columns(self):\n        df_sample1 = pd.DataFrame({\n            'A': ['Tom', 'Nick', 'John', 'Tom', 'John'],\n            'Score': [85, 79, 90, 88, 82]\n        })\n        self.assertRaises(Exception, task_func, df_sample1)\n    \n    def test_case_1(self):\n        df_test = pd.DataFrame({\n            'Name': ['Tom', 'Nick', 'John'],\n            'Score': [85, 79, 90]\n        })\n        gen_dict = task_func(df_test)\n        expected_result = {\n            'John': ('John', 90),\n            'Nick': ('Nick', 79),\n            'Tom': ('Tom', 85)\n        }\n        self.assertDictEqual({key: next(value) for key, value in gen_dict.items()}, expected_result)\n    \n    def test_case_2(self):\n        df_test = pd.DataFrame({\n            'Name': ['Tom', 'Nick', 'John', 'Tom', 'John'],\n            'Score': [85, 79, 90, 88, 82]\n        })\n        gen_dict = task_func(df_test)\n        expected_result = {\n            'John': ('John', 86),\n            'Nick': ('Nick', 79),\n            'Tom': ('Tom', 86.5)\n        }\n        self.assertDictEqual({key: next(value) for key, value in gen_dict.items()}, expected_result)\n    \n    def test_case_3(self):\n        df_test = pd.DataFrame({\n            'Name': ['Tom', 'Nick', 'John', 'Anna', 'Elsa'],\n            'Score': [85, 79, 90, 88, 82]\n        })\n        gen_dict = task_func(df_test)\n        expected_result = {\n            'Anna': ('Anna', 88),\n            'Elsa': ('Elsa', 82),\n            'John': ('John', 90),\n            'Nick': ('Nick', 79),\n            'Tom': ('Tom', 85)\n        }\n        self.assertDictEqual({key: next(value) for key, value in gen_dict.items()}, expected_result)\n    \n    def test_case_4(self):\n        names = [fake.first_name() for _ in range(10)]\n        scores = [fake.random_int(min=50, max=100) for _ in range(10)]\n        df_test = pd.DataFrame({\n            'Name': names,\n            'Score': scores\n        })\n        gen_dict = task_func(df_test)\n        grouped = df_test.groupby('Name')\n        expected_result = {name: (name, mean(group['Score'])) for name, group in grouped}\n        self.assertDictEqual({key: next(value) for key, value in gen_dict.items()}, expected_result)\n    \n    def test_case_5(self):\n        df_test = pd.DataFrame({\n            'Name': [],\n            'Score': []\n        })\n        gen_dict = task_func(df_test)\n        self.assertDictEqual(gen_dict, {})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Encrypts a message with a symmetric encryption key using Fernet encryption, and then encode the encrypted message using base64.\nThe function should output with:\n    str: The base64 encoded encrypted message. The message is first encrypted using Fernet encryption,\n    then the result is base64 encoded.\nYou should write self-contained code starting with:\n```\nimport base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n```",
        "gt": "import base64\nfrom cryptography.fernet import Fernet\ndef task_func(message, encryption_key):\n    fernet = Fernet(base64.urlsafe_b64encode(encryption_key.encode()))\n    encrypted_message = fernet.encrypt(message.encode())\n    return base64.b64encode(encrypted_message).decode()",
        "test": "import unittest\nimport base64\nfrom cryptography.fernet import Fernet\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a basic message and a valid encryption key.\n        result = task_func('Hello, World!', '01234567890123456789012345678901')\n        self.assertIsInstance(result, str)\n        self.assertNotEqual(result, 'Hello, World!')\n    def test_case_2(self):\n        # Test with an empty message and a valid encryption key.\n        result = task_func('', '01234567890123456789012345678901')\n        self.assertIsInstance(result, str)\n        self.assertNotEqual(result, '')\n    def test_case_3(self):\n        # Test with a numeric message and a valid encryption key.\n        result = task_func('1234567890', '01234567890123456789012345678901')\n        self.assertIsInstance(result, str)\n        self.assertNotEqual(result, '1234567890')\n    def test_case_4(self):\n        # Test with a long message and a valid encryption key.\n        long_message = 'A' * 500\n        result = task_func(long_message, '01234567890123456789012345678901')\n        self.assertIsInstance(result, str)\n        self.assertNotEqual(result, long_message)\n    def test_case_5(self):\n        # Test with a basic message and an incorrectly formatted encryption key.\n        with self.assertRaises(ValueError):\n            task_func('Hello, World!', '0123456789')\n    def test_case_6(self):\n        # Test with a non-base64 but correct length key.\n        with self.assertRaises(Exception):\n            task_func('Hello, World!', '01234567890123456789012345678901'*2)  # Not base64-encoded",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Splits a file path by a specified delimiter, retaining the delimiter in the output, and computes the hash of each component if it is a file.\nThe function should output with:\n    list[tuple]: A list of tuples, where each tuple contains a path component and its hash (if it's a file).\n    If the component is not a file, its hash will be None.\nYou should write self-contained code starting with:\n```\nimport os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n```",
        "gt": "import os\nimport re\nimport hashlib\ndef task_func(path, delimiter):\n    path_components = re.split(f'({delimiter})', path)\n    hashes = []\n\n    for component in path_components:\n        if not component:  # Remove empty components\n            continue\n        if component != delimiter and os.path.isfile(component):\n            with open(component, 'rb') as f:\n                hashes.append(hashlib.sha256(f.read()).hexdigest())\n        else:\n            hashes.append(None)\n\n    return list(zip(path_components, hashes))",
        "test": "import unittest\nimport os\nimport tempfile\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup a temporary directory and files for testing\n        self.test_dir = tempfile.mkdtemp()\n        self.test_file1 = os.path.join(self.test_dir, 'file1.txt')\n        self.test_file2 = os.path.join(self.test_dir, 'file2.txt')\n        with open(self.test_file1, 'w') as f:\n            f.write('Hello World')\n        with open(self.test_file2, 'w') as f:\n            f.write('Goodbye World')\n    def tearDown(self):\n        # Remove temporary files and directory after testing\n        os.remove(self.test_file1)\n        os.remove(self.test_file2)\n        os.rmdir(self.test_dir)\n    def test_simple_path_without_files(self):\n        # Test splitting a path without any files\n        result = task_func(\"Docs/src/\", \"/\")\n        expected = [('Docs', None), ('/', None), ('src', None), ('/', None)]\n        self.assertEqual(result, expected)\n    def test_path_with_file_but_no_hashing(self):\n        # Test splitting a path with a file, assuming file does not exist for hashing\n        result = task_func(\"Docs/src/file.txt\", \"/\")\n        expected = [('Docs', None), ('/', None), ('src', None), ('/', None), ('file.txt', None)]\n        self.assertEqual(result, expected)\n    def test_complex_path_with_no_files(self):\n        # Test a more complex path with multiple directories and no files\n        result = task_func(\"Dir1/file1/Dir2/file2.txt\", \"/\")\n        expected = [('Dir1', None), ('/', None), ('file1', None), ('/', None), ('Dir2', None), ('/', None), ('file2.txt', None)]\n        self.assertEqual(result, expected)\n    def test_path_with_non_standard_delimiter(self):\n        # Test path splitting using a non-standard delimiter\n        result = task_func(f\"Dir1-file1-{self.test_file1}-file2.txt\", \"-\")\n        expected = [('Dir1', None), ('-', None), ('file1', None), ('-', None), (self.test_file1, hashlib.sha256(open(self.test_file1, 'rb').read()).hexdigest()), ('-', None), ('file2.txt', None)]\n        self.assertEqual(result, expected)\n    def test_empty_path(self):\n        # Test an empty path string\n        result = task_func(\"\", \"/\")\n        expected = []\n        self.assertEqual(result, expected)\n    def test_path_with_existing_files(self):\n        # Test a path with existing files to check hashing\n        path = f\"{self.test_file1}####{self.test_file2}\"\n        result = task_func(path, \"####\")\n        expected = [(self.test_file1, hashlib.sha256(open(self.test_file1, 'rb').read()).hexdigest()),\n                    ('####', None),\n                    (self.test_file2, hashlib.sha256(open(self.test_file2, 'rb').read()).hexdigest())]\n        print(result)\n        print(expected)\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create n random text files in a specific directory, write a random string to each file, and then reset the cursor to the beginning of each file.\nThe function should output with:\n    directory (str): The directory in which the files were generated.\nYou should write self-contained code starting with:\n```\nimport os\nimport random\ndef task_func(directory, n_files):\n```",
        "gt": "import os\nimport random\ndef task_func(directory, n_files):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    for i in range(n_files):\n        filename = os.path.join(directory, f\"file_{i+1}.txt\")\n\n        with open(filename, 'w') as file:\n            file.write(str(random.randint(1, 100)))\n            file.seek(0)\n\n    return directory",
        "test": "import unittest\nimport shutil\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        random.seed(42)\n        \n    def tearDown(self):\n        shutil.rmtree('./source', ignore_errors=True)\n        shutil.rmtree('./src', ignore_errors=True)\n        shutil.rmtree('./s', ignore_errors=True)\n    \n    def test_case_1(self):\n        directory = task_func('./source', 10)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 10)\n        for file in os.listdir(directory):\n            self.assertEqual(file.split('.')[-1], 'txt')\n        \n    def test_case_2(self):\n        directory = task_func('./src', 1)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 1)\n        for file in os.listdir(directory):\n            self.assertEqual(file.split('.')[-1], 'txt')        \n        \n    def test_case_3(self):\n        directory = task_func('./s', 100)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 100)\n        for file in os.listdir(directory):\n            self.assertEqual(file.split('.')[-1], 'txt')        \n        \n    def test_case_4(self):\n        directory = task_func('./s', 0)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 0)\n        for file in os.listdir(directory):\n            self.assertEqual(file.split('.')[-1], 'txt')        \n        \n    def test_case_5(self):\n        directory = task_func('./source', 1)\n        self.assertTrue(os.path.exists(directory))\n        self.assertEqual(len(os.listdir(directory)), 1)\n        for file in os.listdir(directory):\n            self.assertEqual(file.split('.')[-1], 'txt')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a text as input, the function should split it into multiple sentences and build a dictionary where each key is associated with a sentence and the corresponding value is the number of words in the sentence. The function returns a pandas Series built from the dictionary. - The keys of the dictionary (which correspond to the Index of the pandas Series) should be named \"Sentence 1\", \"Sentence 2\" etc. - When counting the words in a sentence, do not consider those included in the constant STOPWORDS. - Do not consider empty sentences.\nThe function should output with:\n    pandas.core.series.Series: A pandas Series each sentence and its number of words that are not in STOPWORDS.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n```",
        "gt": "import re\nimport pandas as pd\nSTOPWORDS = [\"Those\", \"are\", \"the\", \"words\", \"to\", \"ignore\"]\ndef task_func(text):\n    sentences = re.split(r\"\\.\\s*\", text)\n    sentence_counts = {}\n\n    for i, sentence in enumerate(sentences):\n        if sentence.strip() == \"\":\n            continue\n        words = re.split(r\"\\s+\", sentence.lower())\n        words = [word for word in words if word not in STOPWORDS]\n        sentence_counts[f\"Sentence {i+1}\"] = len(words)\n\n    sentence_counts = pd.Series(sentence_counts)\n    return sentence_counts",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        text = \"This is a sample sentence. This sentence contains sample words.\"\n        expected_output = pd.Series({\"Sentence 1\": 5, \"Sentence 2\": 4})\n        result = task_func(text)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_2(self):\n        text = \"Hello. My name is Marc. I'm here to help. How can I assist you today?\"\n        expected_output = pd.Series(\n            {\"Sentence 1\": 1, \"Sentence 2\": 4, \"Sentence 3\": 3, \"Sentence 4\": 6}\n        )\n        result = task_func(text)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_3(self):\n        text = \"This is a test. Stopwords are words which do not contain important meaning.\"\n        expected_output = pd.Series({\"Sentence 1\": 4, \"Sentence 2\": 7})\n        result = task_func(text)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_4(self):\n        text = \"Hello! How are you? I'm fine, thanks.\"\n        expected_output = pd.Series(\n            {\"Sentence 1\": 6}\n        )  # Only the last sentence is split by a period\n        result = task_func(text)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_5(self):\n        text = \"\"\n        expected_output = pd.Series()\n        result = task_func(text)\n        pd.testing.assert_series_equal(result, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates all possible combinations of the provided numbers in a given list for each possible length. For each combination, it computes the product of the numbers in the combination. It then computes the logarithm of each product and sums these logarithms to produce the final result.\nThe function should output with:\n    float: The sum of the logarithms of the products of all combinations of numbers.\nYou should write self-contained code starting with:\n```\nimport math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n```",
        "gt": "import math\nimport itertools\nfrom functools import reduce\ndef task_func(numbers):\n    sum_log_products = 0\n\n    for r in range(1, len(numbers) + 1):\n        combinations = itertools.combinations(numbers, r)\n        for combination in combinations:\n            product = reduce(lambda x, y: x * y, combination)\n            sum_log_products += math.log(product)\n\n    return sum_log_products",
        "test": "import unittest\nimport math\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test that the function returns a float with a non-empty list.\"\"\"\n        result = task_func([2, 3, 5])\n        self.assertIsInstance(result, float)\n    def test_specific_case(self):\n        \"\"\"Test the function with a specific simplified case.\"\"\"\n        numbers = [2, 3]\n        expected_result = math.log(2) + math.log(3) + math.log(2 * 3)\n        result = task_func(numbers)\n        self.assertAlmostEqual(result, expected_result)\n    def test_empty_list(self):\n        \"\"\"Test the function's behavior with an empty list of numbers.\"\"\"\n        numbers = []\n        expected_result = 0  # Logarithm of 1 (product of empty set) is 0\n        result = task_func(numbers)\n        self.assertEqual(result, expected_result)\n    def test_large_list(self):\n        \"\"\"Test the function with a larger list of numbers.\"\"\"\n        numbers = [1, 2, 3, 4, 5]  # Example larger list\n        result = task_func(numbers)\n        self.assertIsInstance(result, float)\n        self.assertGreaterEqual(result, 0)  # Logarithm of positive numbers should be >= 0\n    def test_single_number_list(self):\n        \"\"\"Test the function with a list containing a single number.\"\"\"\n        numbers = [5]\n        expected_result = math.log(5)  # Logarithm of the single number\n        result = task_func(numbers)\n        self.assertAlmostEqual(result, expected_result)\n    def test_negative_numbers(self):\n        \"\"\"Test the function's behavior with a list containing negative numbers.\"\"\"\n        numbers = [-1, -2, -3]\n        with self.assertRaises(ValueError):\n            task_func(numbers)  # math.log should raise a ValueError for negative input",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Download a text file from the specified url and search for occurrences of the word \"ERROR.\"\nThe function should output with:\n    occurrences (int): The number of occurrences of the word 'ERROR'.\nYou should write self-contained code starting with:\n```\nimport urllib.request\nimport os\nimport re\n# Constants\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n```",
        "gt": "import urllib.request\nimport os\nimport re\n# Constants\nTARGET_FILE = 'downloaded_file.txt'\nSEARCH_PATTERN = r'\\bERROR\\b'\ndef task_func(url):\n    TARGET_FILE = 'downloaded_file.txt'\n    SEARCH_PATTERN = r'\\bERROR\\b'\n\n    urllib.request.urlretrieve(url, TARGET_FILE)\n\n    with open(TARGET_FILE, 'r') as f:\n        data = f.read()\n    occurrences = len(re.findall(SEARCH_PATTERN, data))\n\n    os.remove(TARGET_FILE)\n\n    return occurrences",
        "test": "import unittest\nfrom unittest.mock import patch, mock_open\nclass TestCases(unittest.TestCase):\n    @patch('urllib.request.urlretrieve')\n    @patch('builtins.open', new_callable=mock_open, read_data='ERROR\\nOK\\nERROR')\n    @patch('os.remove')\n    def test_sample1(self, mock_remove, mock_file, mock_urlretrieve):\n        mock_urlretrieve.return_value = ('mock/path/to/file.txt', {'mock': 'headers'})\n        result = task_func('http://example.com/log.txt')\n        self.assertEqual(result, 2)  # Expecting 2 occurrences of 'ERROR'\n    \n    @patch('urllib.request.urlretrieve')\n    @patch('builtins.open', new_callable=mock_open, read_data='OK\\nFINE\\nGOOD')\n    @patch('os.remove')\n    def test_sample2(self, mock_remove, mock_file, mock_urlretrieve):\n        result = task_func('http://example.com/log.txt')\n        self.assertEqual(result, 0)  # Expecting 0 occurrences of 'ERROR'\n    @patch('urllib.request.urlretrieve')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('os.remove')\n    def test_sample3(self, mock_remove, mock_file, mock_urlretrieve):\n        mock_file.return_value.read.return_value = \"ERROR\\nERROR\\nERROR\\nERROR\\nERROR\"\n        mock_urlretrieve.return_value = ('mock/path/to/file.txt', {'mock': 'headers'})\n        result = task_func('http://example.com/log.txt')\n        self.assertEqual(result, 5)  # Expecting 5 occurrences of 'ERROR'\n    @patch('urllib.request.urlretrieve')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('os.remove')\n    def test_mixed_case_errors(self, mock_remove, mock_file, mock_urlretrieve):\n        mock_file.return_value.read.return_value = \"Error\\nerror\\nERROR\"\n        mock_urlretrieve.return_value = ('mock/path/to/file.txt', {'mock': 'headers'})\n        result = task_func('http://example.com/log.txt')\n        self.assertEqual(result, 1)  # Expecting 1 occurrence of 'ERROR' (case-sensitive)\n    @patch('urllib.request.urlretrieve')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('os.remove')\n    def test_large_file(self, mock_remove, mock_file, mock_urlretrieve):\n        mock_file.return_value.read.return_value = \"ERROR\\n\" * 5001\n        mock_urlretrieve.return_value = ('mock/path/to/file.txt', {'mock': 'headers'})\n        result = task_func('http://example.com/log.txt')\n        self.assertEqual(result, 5001)  # Expecting 5001 occurrences of 'ERROR'",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts a 2D list into a pandas DataFrame and applies PCA for dimensionality reduction. This function creates a DataFrame from the provided 2D list and then applies PCA to reduce the dataset to its two main components. The function uses a fixed random seed to ensure reproducibility.\nThe function should output with:\n    pd.DataFrame: The original data in DataFrame format.\n    np.ndarray: The data after PCA transformation.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\ndef task_func(array: list, random_seed: int = 42) -> (pd.DataFrame, np.ndarray):\n    df = pd.DataFrame(array)\n\n    pca = PCA(n_components=2, random_state=random_seed)\n    transformed_data = pca.fit_transform(df)\n\n    return df, transformed_data",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic 2-row dataset\n        data = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (2, 2))\n    def test_case_2(self):\n        # Test basic 3-row dataset\n        data = [[10, 20, 30, 40, 50], [60, 70, 80, 90, 100], [110, 120, 130, 140, 150]]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (3, 2))\n    def test_case_3(self):\n        # Test mix of positive, negative, zero values\n        data = [[-1, -2, -3, -4, -5], [5, 6, 7, 8, 9], [0, 0, 0, 0, 0]]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (3, 2))\n    def test_case_4(self):\n        # Test 4-row dataset with incremental pattern\n        data = [\n            [5, 15, 25, 35, 45],\n            [55, 65, 75, 85, 95],\n            [105, 115, 125, 135, 145],\n            [155, 165, 175, 185, 195],\n        ]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (4, 2))\n    def test_case_5(self):\n        # Test uniform rows\n        data = [[10, 10, 10, 10, 10], [20, 20, 20, 20, 20], [30, 30, 30, 30, 30]]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (3, 2))\n    def test_case_6(self):\n        # Test single row (should fail since it's < n_components)\n        with self.assertRaises(ValueError):\n            data = [[1, 2, 3, 4, 5]]\n            task_func(data)\n    def test_case_7(self):\n        # Test large numbers\n        data = [[1000000000, 2000000000], [-1000000000, -2000000000]]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (2, 2))\n    def test_case_8(self):\n        # Test correctness of PCA\n        data = [[2, 3], [3, 4], [5, 6]]\n        _, transformed_data = task_func(data)\n        # Using the sklearn PCA output as the expected transformation\n        expected = np.array(\n            [\n                [-1.88561808e00, 1.93816421e-16],\n                [-4.71404521e-01, 3.32511118e-16],\n                [2.35702260e00, 2.21555360e-16],\n            ]\n        )\n        \n        # Check if either the original or the sign-flipped version matches\n        flipped = -expected\n        self.assertTrue(\n            np.allclose(transformed_data, expected, atol=0.1) or np.allclose(transformed_data, flipped, atol=0.1),\n            \"The PCA results do not match the expected values considering possible sign flips.\"\n        )\n    def test_case_9(self):\n        # Test floats\n        data = [[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]]\n        df, transformed_data = task_func(data)\n        expected_df = pd.DataFrame(data)\n        self.assertTrue(df.equals(expected_df))\n        self.assertEqual(transformed_data.shape, (3, 2))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads and extracts a ZIP file from a specified URL to a given directory.\nThe function should raise the exception for: Network Issues or Invalid URL: Returns \"Error: Unable to download the file from the provided URL.\" if there are issues in reaching the URL or downloading the file. Incorrect File Type: Returns \"Error: The URL does not point to a ZIP file.\" if the downloaded file's content type is not 'application/zip'. Corrupt ZIP File: Returns \"Error: The downloaded file is not a valid ZIP file.\" if the downloaded file is a ZIP file but is corrupt or cannot be extracted. General Exceptions: Catches and reports any other exceptions (like runtime errors) that occur during the process with a specific error message, formatted as \"Error: [exception message]\".\nThe function should output with:\n    str: Path to the directory containing the extracted contents. If an error occurs, a descriptive\n    message is returned. The message starts with \"Error: \".\n    If the specific descrption is either \"The URL does not point to a ZIP file.\",\n    or \"The downloaded file is not a valid ZIP file.\", or \"Unable to download the file from the provided URL.\".\nYou should write self-contained code starting with:\n```\nimport os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n```",
        "gt": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    if not os.path.exists(download_path):\n        os.makedirs(download_path)\n\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n\n        # Verify content type\n        if \"application/zip\" not in response.headers.get(\"Content-Type\", \"\"):\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        file_name = os.path.join(download_path, os.path.basename(url))\n\n        with open(file_name, \"wb\") as f:\n            f.write(response.content)\n\n        extract_path = os.path.splitext(file_name)[0]\n\n        if not os.path.exists(extract_path):\n            os.makedirs(extract_path)\n\n        with ZipFile(file_name, \"r\") as zip_ref:\n            zip_ref.extractall(extract_path)\n\n        return extract_path\n\n    except requests.RequestException:\n        return \"Error: Unable to download the file from the provided URL.\"\n    except BadZipFile:\n        return \"Error: The downloaded file is not a valid ZIP file.\"\n    except RuntimeError as e:\n        return f\"Error: {str(e)}\"",
        "test": "import unittest\nfrom unittest.mock import patch\nimport shutil\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"requests.get\")\n    def test_non_zip_content(self, mock_get):\n        \"\"\"Test a valid ZIP URL.\"\"\"\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.headers = {\"Content-Type\": \"application/zip\"}\n        mock_get.return_value.content = b\"1\"\n        url = \"https://valid-url.com/sample.zip\"\n        result = task_func(url)\n    @patch(\"requests.get\")\n    def test_invalid_url(self, mock_get):\n        \"\"\"Test an invalid URL.\"\"\"\n        mock_get.side_effect = requests.RequestException()\n        url = \"https://invalid-url.com/sample.zip\"\n        result = task_func(url)\n        self.assertEqual(\n            result,\n            \"Error: Unable to download the file from the provided URL.\",\n        )\n    @patch(\"requests.get\")\n    def test_non_zip_content(self, mock_get):\n        \"\"\"Test a URL that does not point to a ZIP file.\"\"\"\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.headers = {\"Content-Type\": \"text/plain\"}\n        mock_get.return_value.content = b\"Not a ZIP file\"\n        url = \"https://valid-url.com/not-a-zip.txt\"\n        result = task_func(url)\n        self.assertEqual(result, \"Error: The URL does not point to a ZIP file.\")\n    @patch(\"requests.get\")\n    def test_download_invald_zip_file(self, mock_get):\n        \"\"\"Test a URL that points to a ZIP file, but the file is invalid.\"\"\"\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.headers = {\"Content-Type\": \"application/zip\"}\n        mock_get.return_value.content = b\"Some ZIP content\"\n        url = \"https://valid-zip-url.com/sample.zip\"\n        custom_path = \"mnt/data/custom_path/\"\n        result = task_func(url, custom_path)\n        self.assertEqual(result, \"Error: The downloaded file is not a valid ZIP file.\")\n    @patch(\"requests.get\")\n    def test_general_error(self, mock_get):\n        \"\"\"Test a general error.\"\"\"\n        mock_get.side_effect = RuntimeError(\"Unexpected error\")\n        url = \"https://error-url.com/error.zip\"\n        result = task_func(url)\n        self.assertTrue(result.startswith(\"Error: Unexpected error\"))\n    def tearDown(self):\n        # Cleanup the test directories\n        dirs_to_remove = [\"mnt/data\", \"mnt\"]\n        for dir_path in dirs_to_remove:\n            if os.path.exists(dir_path):\n                shutil.rmtree(dir_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert the input dic of list to DataFrame and searcher in this DataFrame for rows with cells equal to the provided target_value. It then plots the count of such rows per column.\nThe function should output with:\n    tuple: A tuple containing:\n    A pandas Series with counts of the target value per column.\n    A matplotlib Axes object representing the plot (None if dataframe is empty).\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport time\ndef task_func(df, target_value):\n```",
        "gt": "import pandas as pd\nimport time\ndef task_func(df, target_value):\n    start_time = time.time()\n    # Convert dataframe to string type for uniform comparison\n    dataframe = pd.DataFrame(df)\n    dataframe = dataframe.astype(str)\n    \n    counts = dataframe.apply(lambda x: (x == target_value).sum())\n\n    # Check if DataFrame is empty\n    if not dataframe.empty:\n        ax = counts.plot(kind='bar')\n    else:\n        ax = None\n    end_time = time.time()  # End timing\n    cost = f\"Operation completed in {end_time - start_time} seconds.\"\n    return counts, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test case with default example data\n        df = {\n            'Column1': ['0', 'a', '332', '33'],\n            'Column2': ['1', 'bb', '33', '22'],\n            'Column3': ['2', 'ccc', '2', '332']\n        }\n        counts, ax = task_func(df, '332')\n        self.assertEqual(counts['Column1'], 1)\n        self.assertEqual(counts['Column2'], 0)\n        self.assertEqual(counts['Column3'], 1)\n    def test_case_2(self):\n        # Test case with no occurrences of the target value\n        df = {\n            'Column1': ['0', 'a', '331', '33'],\n            'Column2': ['1', 'bb', '33', '22'],\n            'Column3': ['2', 'ccc', '2', '331']\n        }\n        counts, ax = task_func(df, '332')\n        self.assertEqual(counts['Column1'], 0)\n        self.assertEqual(counts['Column2'], 0)\n        self.assertEqual(counts['Column3'], 0)\n    def test_case_3(self):\n        # Test case with multiple occurrences of the target value in a single column\n        df = {\n            'Column1': ['332', 'a', '332', '33'],\n            'Column2': ['1', '332', '332', '22'],\n            'Column3': ['2', '332', '2', '332']\n        }\n        counts, ax = task_func(df, '332')\n        self.assertEqual(counts['Column1'], 2)\n        self.assertEqual(counts['Column2'], 2)\n        self.assertEqual(counts['Column3'], 2)\n    def test_case_4(self):\n        # Test case with an empty DataFrame\n        df = pd.DataFrame()\n        counts, ax = task_func(df, '332')\n        self.assertEqual(len(counts), 0)\n    def test_case_5(self):\n        # Test case with different data types in the DataFrame\n        df = {\n            'Column1': [0, 'a', 332, '33'],\n            'Column2': [1.0, 'bb', 33.0, 22.2],\n            'Column3': [2, 'ccc', 2, 332]\n        }\n        counts, ax = task_func(df, '332')\n        self.assertEqual(counts['Column1'], 1)\n        self.assertEqual(counts['Column2'], 0)\n        self.assertEqual(counts['Column3'], 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a JSON object from employee data based on given department codes and their employee counts.\nNote that: The keys are department codes (from the list: ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']) and the values are lists of employee levels ('Junior', 'Mid', 'Senior') in that department.\nThe function should output with:\n    str: A JSON object representing employee levels for each department.\nYou should write self-contained code starting with:\n```\nimport collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n```",
        "gt": "import collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\ndef task_func(department_data):\n    level_data = collections.defaultdict(list)\n    \n    for prefix, num_employees in department_data.items():\n        if prefix not in PREFICES:\n            continue\n\n        for _ in range(num_employees):\n            level = random.choice(LEVELS)\n            level_data[prefix].append(level)\n\n    return json.dumps(level_data)",
        "test": "import unittest\nimport collections\nimport random\nimport json\n# Constants\nPREFICES = ['EMP$$', 'MAN$$', 'DEV$$', 'HR$$']\nLEVELS = ['Junior', 'Mid', 'Senior']\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        random.seed(0)\n        input_data = {'EMP$$': 5, 'MAN$$': 3, 'DEV$$': 4, 'HR$$': 2}\n        output_data = task_func(input_data)\n        parsed_output = json.loads(output_data)\n        \n        for key, value in input_data.items():\n            self.assertIn(key, parsed_output)\n            self.assertEqual(len(parsed_output[key]), value)\n            for level in parsed_output[key]:\n                self.assertIn(level, LEVELS)\n    \n    def test_case_2(self):\n        random.seed(0)\n        input_data = {'EMP$$': 10}\n        output_data = task_func(input_data)\n        parsed_output = json.loads(output_data)\n        \n        self.assertEqual(len(parsed_output), 1)\n        self.assertEqual(len(parsed_output['EMP$$']), 10)\n        for level in parsed_output['EMP$$']:\n            self.assertIn(level, LEVELS)\n    \n    def test_case_3(self):\n        random.seed(0)\n        input_data = {'MAN$$': 6, 'DEV$$': 7}\n        output_data = task_func(input_data)\n        parsed_output = json.loads(output_data)\n        \n        self.assertEqual(len(parsed_output), 2)\n        self.assertEqual(len(parsed_output['MAN$$']), 6)\n        self.assertEqual(len(parsed_output['DEV$$']), 7)\n        for level in parsed_output['MAN$$']:\n            self.assertIn(level, LEVELS)\n        for level in parsed_output['DEV$$']:\n            self.assertIn(level, LEVELS)\n    \n    def test_case_4(self):\n        random.seed(0)\n        input_data = {'HR$$': 3}\n        output_data = task_func(input_data)\n        parsed_output = json.loads(output_data)\n        \n        self.assertEqual(len(parsed_output), 1)\n        self.assertEqual(len(parsed_output['HR$$']), 3)\n        for level in parsed_output['HR$$']:\n            self.assertIn(level, LEVELS)\n    \n    def test_case_5(self):\n        random.seed(0)\n        input_data = {}\n        output_data = task_func(input_data)\n        parsed_output = json.loads(output_data)\n        self.assertEqual(len(parsed_output), 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sorts a numeric 2D numpy array in ascending order and finds all unique combinations of two elements from the sorted array.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    1. numpy.array: A 1D array with all elements of the input array sorted in ascending order.\n    2. list: A list of tuples, each containing a pair of elements from the sorted array, representing all unique combinations taken two at a time.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\ndef task_func(matrix):\n```",
        "gt": "import numpy as np\nimport itertools\ndef task_func(matrix):\n    sorted_array = np.sort(matrix, axis=None)\n    \n    combinations = list(itertools.combinations(sorted_array, 2))\n    \n    return sorted_array, combinations",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Checks sorting and combination generation for a small 2x2 matrix.\n        matrix = np.array([[1, 3], [2, 4]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([1, 2, 3, 4])))\n        self.assertEqual(combinations, [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])\n    def test_case_2(self):\n        # Verifies function correctness with a different 2x2 matrix with non-sequential numbers.\n        matrix = np.array([[5, 6], [3, 4]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([3, 4, 5, 6])))\n        self.assertEqual(combinations, [(3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)])\n    def test_case_3(self):\n        # Tests handling of a single element matrix.\n        matrix = np.array([[10]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([10])))\n        self.assertEqual(combinations, [])\n    def test_case_4(self):\n        # Checks correct ordering and combination creation for a descending sorted matrix.\n        matrix = np.array([[9, 8], [7, 6]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([6, 7, 8, 9])))\n        self.assertEqual(combinations, [(6, 7), (6, 8), (6, 9), (7, 8), (7, 9), (8, 9)])\n    def test_case_5(self):\n        # Verifies proper function operation on a 2x3 matrix.\n        matrix = np.array([[1, 2, 3], [4, 5, 6]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([1, 2, 3, 4, 5, 6])))\n        self.assertEqual(combinations, [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)])\n    def test_empty_matrix(self):\n        # Ensures that an empty matrix is handled correctly.\n        matrix = np.array([[]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([])))\n        self.assertEqual(combinations, [])\n    def test_matrix_with_repeated_elements(self):\n        # Tests the function's behavior with repeated elements.\n        matrix = np.array([[2, 2], [2, 2]])\n        sorted_array, combinations = task_func(matrix)\n        self.assertTrue(np.array_equal(sorted_array, np.array([2, 2, 2, 2])))\n        self.assertEqual(combinations, [(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with random values within a specified range. This function creates a matrix of given dimensions filled with random values between 0 and 1 and returns it as a Pandas DataFrame. Users have the option to set a random seed for reproducible results.\nThe function should output with:\n    DataFrame: A Pandas DataFrame containing the generated random values.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(rows, columns, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    df = pd.DataFrame(matrix)\n    \n    return df",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        self.seed = 42\n    def test_case_1(self):\n        df = task_func(3, 2, seed=self.seed)\n        self.assertEqual(df.shape, (3, 2))\n        self.assertTrue((df >= 0).all().all())\n        self.assertTrue((df <= 1).all().all())\n        \n    def test_case_2(self):\n        df = task_func(5, 5, seed=self.seed)\n        self.assertEqual(df.shape, (5, 5))\n        self.assertTrue((df >= 0).all().all())\n        self.assertTrue((df <= 1).all().all())\n        \n    def test_case_3(self):\n        df = task_func(1, 1, seed=self.seed)\n        self.assertEqual(df.shape, (1, 1))\n        self.assertTrue((df >= 0).all().all())\n        self.assertTrue((df <= 1).all().all())\n        \n    def test_case_4(self):\n        df = task_func(4, 3, seed=self.seed)\n        self.assertEqual(df.shape, (4, 3))\n        self.assertTrue((df >= 0).all().all())\n        self.assertTrue((df <= 1).all().all())\n        \n    def test_case_5(self):\n        df = task_func(2, 2, seed=self.seed)\n        self.assertEqual(df.shape, (2, 2))\n        self.assertTrue((df >= 0).all().all())\n        self.assertTrue((df <= 1).all().all())",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Enhances 'my_list' by appending the number 12, then generates a list of random integers based on the sum of elements in 'my_list', limited by 'size'. It measures the time taken for this process and plots a histogram of the generated random numbers. The size of the random numbers list is determined by the sum of the numbers in 'my_list', with an upper limit set by 'size'. The random integers are within the range 1 to 100, inclusive. The histogram plots the distribution of the random numbers generated, with the number range (1-100) on the x-axis and the count (frequency) of each number on the y-axis.\nThe function should raise the exception for: TypeError: If 'my_list' is not a list. ValueError: If 'my_list' contains elements that are not numeric (int or float).\nThe function should output with:\n    tuple: A tuple containing the time taken to generate the list (in seconds, as a float) and\n    the matplotlib Axes object for the histogram. The histogram's x-axis is labeled 'Number',\n    representing the range of random integers, and the y-axis is labeled 'Frequency', representing\n    the frequency of each integer in the generated list.\nYou should write self-contained code starting with:\n```\nfrom random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n```",
        "gt": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\ndef task_func(my_list, size=100, seed=100):\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(item, (int, float)) for item in my_list):\n        raise ValueError(\"All elements in 'my_list' must be numbers.\")\n    random_seed(seed)\n    my_list.append(12)\n\n    total_size = min(sum(my_list), size)\n\n    start_time = time.time()\n    random_list = [randint(1, 100) for _ in range(total_size)]\n    end_time = time.time()\n\n    fig, ax = plt.subplots()\n    ax.hist(random_list, bins=20)\n    ax.set_title('Histogram of Random Numbers')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n\n    return end_time - start_time, ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_output_types(self):\n        my_list = [1, 2, 3]\n        time_taken, ax = task_func(my_list)\n        self.assertIsInstance(time_taken, float)\n        self.assertIsInstance(ax, plt.Axes)\n        bar_heights = [rect.get_height() for rect in ax.containers[0]]\n        expect = [2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0]\n        \n        self.assertEqual(bar_heights, expect, \"DataFrame contents should match the expected output\")\n    def test_invalid_input_type(self):\n        with self.assertRaises(TypeError):\n            task_func(\"not a list\")\n    def test_invalid_list_elements(self):\n        with self.assertRaises(ValueError):\n            task_func([1, 2, 'three'])\n    def test_plot_title(self):\n        my_list = [1, 2, 3]\n        _, ax = task_func(my_list)\n        self.assertEqual(ax.get_title(), 'Histogram of Random Numbers')\n    def test_time_measurement(self):\n        my_list = [1, 2, 3]\n        time_taken, _ = task_func(my_list)\n        self.assertGreaterEqual(time_taken, 0)\n    def test_size_limit(self):\n        my_list = [30, 40, 50]  # Sum is 122, but limit is 100\n        _, ax = task_func(my_list)\n        import numpy as np\n        n, _ = np.histogram([randint(1, 100) for _ in range(100)], bins=20)\n        self.assertEqual(len(n), 20)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Find the N largest absolute differences between the corresponding elements of two specified columns in a DataFrame, perform a t-Test on the elements with these differences, and return the calculated p-value. >>> df = pd.DataFrame({ ...    'col1': [1, 3, 4, 70], ...    'col2': [2, 3, 5, 1] ...     }) >>> p_value = task_func(df, 'col1', 'col2', N=5) >>> print(p_value) 0.3590111759771484\nThe function should raise the exception for: ValueError: If specified columns are not in the provided DataFrame. ValueError: If N is <= 1.\nThe function should output with:\n    float: The p-value resulting from the t-Test on the elements with the N largest differences.\nYou should write self-contained code starting with:\n```\nimport heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n```",
        "gt": "import heapq\nfrom scipy import stats\ndef task_func(df, col1, col2, N=10):\n    if N <= 1:\n        raise ValueError(f\"N should be greater than 1. Received N={N}.\")\n\n    # Ensure provided columns exist in the dataframe\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Columns {col1} or {col2} not found in the DataFrame.\")\n    \n    # Extract values from the specified columns\n    l1 = df[col1].values\n    l2 = df[col2].values\n    \n    # Find the indices of the N largest differences\n    largest_diff_indices = heapq.nlargest(N, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n    \n    # Perform the t-Test and return the p-value\n    _, p_value = stats.ttest_ind(l1[largest_diff_indices], l2[largest_diff_indices])\n    return p_value",
        "test": "import unittest\nfrom faker import Faker\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_N(self):\n        # test with different values for N\n        data = {\n            'col1': [10, 20, 30, 40, 50],\n            'col2': [10, 20, 3000, 40, 50]  # Only one large difference\n        }\n        df = pd.DataFrame(data)\n        p_value = task_func(df, 'col1', 'col2', N=4)\n        self.assertGreater(p_value, 0.1)  # Expecting a high p-value as only one value differs significantly\n        self.assertRaises(Exception, task_func, df, 'col1', 'col2', N=1)\n    def test_wrong_columns(self):\n        # test with wrong columns\n        data = {\n            'col1': [1, 2, 3, 4, 5],\n            'col2': [2, 3, 4, 5, 6]\n        }\n        df = pd.DataFrame(data)\n        self.assertRaises(Exception, task_func, df, 'a', 'col2')\n        self.assertRaises(Exception, task_func, df, 'col1', 'a')\n        self.assertRaises(Exception, task_func, df, 'a', 'b')\n        \n            \n    def test_case_1(self):\n        # Test case with small numerical differences in columns\n        data = {\n            'col1': [1, 2, 3, 4, 5],\n            'col2': [2, 3, 4, 5, 6]\n        }\n        df = pd.DataFrame(data)\n        p_value = task_func(df, 'col1', 'col2')\n        self.assertGreater(p_value, 0.05)  # Expecting a high p-value due to small differences\n    def test_case_2(self):\n        # Test case with larger numerical differences in columns\n        data = {\n            'col1': [100, 200, 300, 400, 500],\n            'col2': [10, 20, 30, 40, 50]\n        }\n        df = pd.DataFrame(data)\n        p_value = task_func(df, 'col1', 'col2')\n        self.assertLess(p_value, 0.05)  # Expecting a low p-value due to large differences\n    def test_case_3(self):\n        # Test case with random data from Faker\n        fake = Faker()\n        data = {\n            'col1': [fake.random_int(min=0, max=1000) for _ in range(10)],\n            'col2': [fake.random_int(min=0, max=1000) for _ in range(10)]\n        }\n        df = pd.DataFrame(data)\n        p_value = task_func(df, 'col1', 'col2')\n        # No specific assertion for random data, just checking if function executes without errors\n    def test_case_4(self):\n        # Test case with identical columns (expecting a high p-value)\n        data = {\n            'col1': [10, 20, 30, 40, 50],\n            'col2': [10, 20, 30, 40, 50]\n        }\n        df = pd.DataFrame(data)\n        p_value = task_func(df, 'col1', 'col2')\n        self.assertAlmostEqual(p_value, 1., places=2)  # Expecting a high p-value as columns are identical\n    def test_case_5(self):\n        # Test case with only one differing value in columns\n        data = {\n            'col1': [10, 20, 30, 40, 50],\n            'col2': [10, 20, 3000, 40, 50]  # Only one large difference\n        }\n        df = pd.DataFrame(data)\n        p_value = task_func(df, 'col1', 'col2')\n        self.assertGreater(p_value, 0.1)  # Expecting a high p-value as only one value differs significantly",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Rename all files in the specified directory by removing all special characters, punctuation marks, and spaces, using regular expressions. The function keeps alphanumeric characters and removes the rest.\nThe function should output with:\n    list[str]: A list containing the new names of all files after renaming.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n```",
        "gt": "import re\nimport os\nimport glob\ndef task_func(dir_path: str) -> list:\n    new_names = []\n    for file_path in glob.glob(os.path.join(dir_path, '*')):\n        base_name = os.path.basename(file_path)\n        new_name = re.sub('[^A-Za-z0-9]+', '', base_name)\n        new_path = os.path.join(dir_path, new_name)\n        os.rename(file_path, new_path)\n        new_names.append(new_name)\n    return new_names",
        "test": "import unittest\nfrom pathlib import Path\nimport shutil\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        self.temp_dir = Path(\"temp_test_dir\")\n        self.temp_dir.mkdir(parents=True, exist_ok=True)\n    \n    def tearDown(self):\n        shutil.rmtree(self.temp_dir)\n    \n    def test_special_characters_removal(self):\n        test_files = [\"file@1.txt\", \"file_#2.txt\", \"file$ 3.txt\"]\n        for file_name in test_files:\n            (self.temp_dir / file_name).touch()\n        \n        expected_names = [\"file1txt\", \"file2txt\", \"file3txt\"]\n        new_file_names = task_func(str(self.temp_dir))\n        \n        self.assertListEqual(sorted(new_file_names), sorted(expected_names))\n    \n    def test_alphanumeric_names(self):\n        test_files = [\"file1.txt\", \"file2.txt\", \"file3.txt\"]\n        for file_name in test_files:\n            (self.temp_dir / file_name).touch()\n        \n        expected_names = [\"file1txt\", \"file2txt\", \"file3txt\"]\n        new_file_names = task_func(str(self.temp_dir))\n        \n        self.assertListEqual(sorted(new_file_names), sorted(expected_names))\n    \n    def test_empty_directory(self):\n        expected_names = []\n        new_file_names = task_func(str(self.temp_dir))\n        \n        self.assertListEqual(new_file_names, expected_names)\n    \n    def test_only_special_characters(self):\n        test_files = [\"@@@.txt\", \"###.txt\", \"$$$ .txt\"]\n        for file_name in test_files:\n            (self.temp_dir / file_name).touch()\n        \n        expected_names = [\"txt\", \"txt\", \"txt\"]\n        new_file_names = task_func(str(self.temp_dir))\n        \n        self.assertListEqual(sorted(new_file_names), sorted(expected_names))\n    \n    def test_mixed_characters(self):\n        test_files = [\"f@ile_1.txt\", \"file# 2.txt\", \"fi$le 3.txt\"]\n        for file_name in test_files:\n            (self.temp_dir / file_name).touch()\n        \n        expected_names = [\"file1txt\", \"file2txt\", \"file3txt\"]\n        new_file_names = task_func(str(self.temp_dir))\n        \n        self.assertListEqual(sorted(new_file_names), sorted(expected_names))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for specified categories.\nThe function should raise the exception for: ValueError: If the number of columns exceeds the number of available categories.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(rows=5, cols=5):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(rows=5, cols=5):\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.use('Agg')\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        # Cleanup any opened figures in matplotlib\n        plt.close('all')\n    def test_case_1(self):\n        ax = task_func(5, 5)\n        self.assertEqual(len(ax.patches), 25)  # 5 bars with 5 segments each, each segment represents a stacked part\n    def test_case_2(self):\n        ax = task_func(7, 3)\n        self.assertEqual(len(ax.patches), 21)  # 7 bars with 3 segments each\n    def test_case_3(self):\n        ax = task_func(10, 2)\n        self.assertEqual(len(ax.patches), 20)  # 10 bars with 2 segments each\n    def test_case_4(self):\n        with self.assertRaises(ValueError):  # Testing for more columns than categories\n            ax = task_func(5, 6)\n    def test_case_5(self):\n        ax = task_func(3, 1)\n        self.assertEqual(len(ax.patches), 3)  # 3 bars with 1 segment each",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the TF-IDF score of the words in a list of documents.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with words as columns and documents as rows, containing the TF-IDF scores.\nYou should write self-contained code starting with:\n```\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n```",
        "gt": "from nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\ndef task_func(documents):\n    vectorizer = TfidfVectorizer(tokenizer=word_tokenize)\n    tfidf_matrix = vectorizer.fit_transform(documents)\n    tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return tfidf_df",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        docs = ['This is the first document.', 'This document is the second document.']\n        tfidf = task_func(docs)\n        self.assertTrue(isinstance(tfidf, pd.DataFrame))\n        self.assertEqual(tfidf.shape[0], 2)\n        self.assertIn('first', tfidf.columns)\n        self.assertIn('second', tfidf.columns)\n        self.assertNotIn('third', tfidf.columns)\n    def test_case_2(self):\n        docs = ['And this is the third one.', 'Is this the first document?']\n        tfidf = task_func(docs)\n        self.assertTrue(isinstance(tfidf, pd.DataFrame))\n        self.assertEqual(tfidf.shape[0], 2)\n        self.assertIn('first', tfidf.columns)\n        self.assertNotIn('second', tfidf.columns)\n        self.assertIn('third', tfidf.columns)\n    def test_case_3(self):\n        docs = ['Hello world!', 'Machine learning is fun.']\n        tfidf = task_func(docs)\n        self.assertTrue(isinstance(tfidf, pd.DataFrame))\n        self.assertEqual(tfidf.shape[0], 2)\n        self.assertIn('hello', tfidf.columns)\n        self.assertIn('world', tfidf.columns)\n        self.assertIn('machine', tfidf.columns)\n    def test_case_4(self):\n        docs = ['Natural Language Processing.', 'Deep learning and neural networks.']\n        tfidf = task_func(docs)\n        self.assertTrue(isinstance(tfidf, pd.DataFrame))\n        self.assertEqual(tfidf.shape[0], 2)\n        self.assertIn('natural', tfidf.columns)\n        self.assertIn('processing', tfidf.columns)\n        self.assertIn('deep', tfidf.columns)\n    def test_case_5(self):\n        docs = ['Data science is a field.', 'It involves statistics and algorithms.']\n        tfidf = task_func(docs)\n        self.assertTrue(isinstance(tfidf, pd.DataFrame))\n        self.assertEqual(tfidf.shape[0], 2)\n        self.assertIn('data', tfidf.columns)\n        self.assertIn('science', tfidf.columns)\n        self.assertIn('statistics', tfidf.columns)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create and draw a sine wave with random frequency, amplitude and phase shift. The return ax object has 'Random Sine Wave' title, 'Time' on the x axis and 'Amplitude' on the y axis.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The axis object of the generated sine wave plot.\nYou should write self-contained code starting with:\n```\nimport math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n```",
        "gt": "import math\nfrom random import randint\nimport matplotlib.pyplot as plt\ndef task_func():\n    x = [i/100 for i in range(1000)]\n    frequency = randint(1, 5)\n    amplitude = randint(1, 5)\n    phase_shift = randint(0, 360)\n\n    y = [amplitude * math.sin(2 * math.pi * frequency * (xi + phase_shift)) for xi in x]\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.grid(True)\n    \n    return ax  # Return the axis object for testing",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Random Sine Wave')\n        self.assertEqual(ax.get_xlabel(), 'Time')\n        self.assertEqual(ax.get_ylabel(), 'Amplitude')\n        \n    def test_case_2(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Random Sine Wave')\n        self.assertEqual(ax.get_xlabel(), 'Time')\n        self.assertEqual(ax.get_ylabel(), 'Amplitude')\n        \n    def test_case_3(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Random Sine Wave')\n        self.assertEqual(ax.get_xlabel(), 'Time')\n        self.assertEqual(ax.get_ylabel(), 'Amplitude')\n        \n    def test_case_4(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Random Sine Wave')\n        self.assertEqual(ax.get_xlabel(), 'Time')\n        self.assertEqual(ax.get_ylabel(), 'Amplitude')\n        \n    def test_case_5(self):\n        ax = task_func()\n        self.assertEqual(ax.get_title(), 'Random Sine Wave')\n        self.assertEqual(ax.get_xlabel(), 'Time')\n        self.assertEqual(ax.get_ylabel(), 'Amplitude')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a DataFrame of stock prices for a specified number of days in the past using random data.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing random stock prices for the specified number of days.\n    Prices are floats in [0.0,1.0).\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    np.random.seed(random_seed)\n\n    if not isinstance(days_in_past, int) or days_in_past <= 0:\n        raise ValueError(\"days_in_past must be a positive integer.\")\n    if not stock_names or not all(isinstance(name, str) for name in stock_names):\n        raise ValueError(\"stock_names must be a list of strings and cannot be empty.\")\n\n    dates = pd.date_range(end=datetime.now().date(), periods=days_in_past)\n    prices = np.random.rand(days_in_past, len(stock_names)) * 100\n    df = pd.DataFrame(prices, columns=stock_names, index=dates)\n\n    return df",
        "test": "import unittest\nfrom datetime import datetime\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    DAYS_IN_PAST = 7\n    STOCK_NAMES = [\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"]\n    def test_case_1(self):\n        # Test with default DAYS_IN_PAST value and random seed\n        df = task_func(random_seed=42)\n        self.assertEqual(\n            df.shape[0],\n            self.DAYS_IN_PAST,\n            \"Number of rows should be equal to days_in_past.\",\n        )\n        self.assertEqual(\n            list(df.columns), self.STOCK_NAMES, \"Columns should match STOCK_NAMES.\"\n        )\n        self.assertEqual(\n            df.index[-1].date(),\n            datetime.now().date(),\n            \"Last date should be today's date.\",\n        )\n        self.assertTrue(\n            all(df.applymap(lambda x: isinstance(x, (int, float)))),\n            \"All values should be numeric.\",\n        )\n    def test_case_2(self):\n        # Test with 1 day in the past (Today's stock prices) and random seed\n        df = task_func(1, random_seed=42)\n        self.assertEqual(df.shape[0], 1, \"Number of rows should be 1.\")\n        self.assertEqual(\n            list(df.columns), self.STOCK_NAMES, \"Columns should match STOCK_NAMES.\"\n        )\n        self.assertEqual(\n            df.index[-1].date(),\n            datetime.now().date(),\n            \"Last date should be today's date.\",\n        )\n        self.assertTrue(\n            all(df.applymap(lambda x: isinstance(x, (int, float)))),\n            \"All values should be numeric.\",\n        )\n    def test_case_3(self):\n        # Test with 10 days in the past and random seed\n        df = task_func(10, random_seed=42)\n        self.assertEqual(df.shape[0], 10, \"Number of rows should be 10.\")\n        self.assertEqual(\n            list(df.columns), self.STOCK_NAMES, \"Columns should match STOCK_NAMES.\"\n        )\n        self.assertEqual(\n            df.index[-1].date(),\n            datetime.now().date(),\n            \"Last date should be today's date.\",\n        )\n        self.assertTrue(\n            all(df.applymap(lambda x: isinstance(x, (int, float)))),\n            \"All values should be numeric.\",\n        )\n    def test_case_4(self):\n        # Test invalid days in the past\n        with self.assertRaises(ValueError):\n            task_func(days_in_past=-1)\n        with self.assertRaises(ValueError):\n            task_func(days_in_past=0)\n        with self.assertRaises(ValueError):\n            task_func(days_in_past=2.5)\n    def test_case_5(self):\n        # Test empty and invalid stock names\n        with self.assertRaises(ValueError):\n            task_func(stock_names=[])\n        with self.assertRaises(ValueError):\n            task_func(stock_names=[\"AAPL\", 123, None])\n    def test_case_6(self):\n        # Test random seed\n        df1a = task_func(random_seed=42)\n        df1b = task_func(random_seed=42)\n        df2 = task_func(random_seed=99)\n        pd.testing.assert_frame_equal(df1a, df1b)\n        self.assertFalse(df1a.equals(df2))\n        self.assertFalse(df1b.equals(df2))\n    def test_case_7(self):\n        # Test larger days_in_the_past\n        df = task_func(days_in_past=366)\n        self.assertEqual(df.shape[0], 366)\n    def test_case_8(self):\n        # Test single stock name\n        df = task_func(stock_names=[\"ABC\"])\n        self.assertTrue(\"ABC\" in df.columns)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate an array of random 3D dots in the range [0, 1) for each dimension and draw them in a 3D scatter plot.\nThe function should output with:\n    tuple: A tuple containing:\n    points (ndarray): A numpy ndarray of shape (n_points, 3) with the coordinates of the points.\n    plot (Axes3D): A 3D scatter plot of the generated points.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(n_points=100, random_seed=None):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(n_points=100, random_seed=None):\n    np.random.seed(random_seed)\n    points = np.random.random((n_points, 3))\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection=\"3d\")\n    ax.scatter(points[:, 0], points[:, 1], points[:, 2])\n\n    return points, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test default parameters - values\n        points, _ = task_func()\n        self.assertEqual(points.shape, (100, 3))\n        self.assertTrue(\n            (points >= 0).all() and (points < 1).all(),\n            \"All points should be in the range [0, 1)\",\n        )\n    def test_case_2(self):\n        # Test default parameters - plot\n        _, plot = task_func()\n        self.assertTrue(isinstance(plot, Axes3D))\n    def test_case_3(self):\n        # Test controlling number of points\n        points1, _ = task_func(n_points=1)\n        points10, _ = task_func(n_points=10)\n        points100, _ = task_func(n_points=100)\n        self.assertEqual(points1.shape, (1, 3))\n        self.assertEqual(points10.shape, (10, 3))\n        self.assertEqual(points100.shape, (100, 3))\n    def test_case_4(self):\n        # Test random seed\n        points1, _ = task_func(random_seed=42)\n        points2, _ = task_func(random_seed=42)\n        self.assertTrue(\n            np.array_equal(points1, points2),\n            \"The points should be identical for the same seed\",\n        )\n    def test_case_5(self):\n        # Test handling invalid inputs\n        with self.assertRaises(ValueError):\n            task_func(-1)\n        for invalid in [0.5, \"invalid\", None, []]:\n            with self.assertRaises(TypeError):\n                task_func(invalid)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a DataFrame with a given number of rows (N) and 3 columns: \"x\" and \"y\" with random values, and \"category\" with random categories from a given CATEGORIES list. Each category is guaranteed to appear at least once if N is greater than or equal to the number of categories, otherwise it is randomly sampled without replacement from CATEGORIES. Finally, draw a scatter plot of \"x\" vs \"y,\" colored by \"category\".\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The generated DataFrame.\n    Axes: The Axes object of the scatter plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    np.random.seed(seed)\n\n    if N < len(CATEGORIES):\n        all_categories = np.random.choice(CATEGORIES, N, replace=False)\n    else:\n        guaranteed_categories = np.array(CATEGORIES)\n        remaining_categories = np.random.choice(CATEGORIES, N - len(CATEGORIES))\n        all_categories = np.concatenate([guaranteed_categories, remaining_categories])\n        np.random.shuffle(all_categories)\n\n    df = pd.DataFrame(\n        {\"x\": np.random.rand(N), \"y\": np.random.rand(N), \"category\": all_categories}\n    )\n\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        ax.scatter(\n            df[df[\"category\"] == category][\"x\"],\n            df[df[\"category\"] == category][\"y\"],\n            label=category,\n        )\n\n    return df, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test default parameter\n        df, ax = task_func()\n        self.assertEqual(df.shape, (100, 3))\n        self.assertSetEqual(set(df[\"category\"]), {\"A\", \"B\", \"C\", \"D\", \"E\"})\n        self.assertListEqual(list(df.columns), [\"x\", \"y\", \"category\"])\n        self.assertTrue(df[\"x\"].between(0, 1).all())\n        self.assertTrue(df[\"y\"].between(0, 1).all())\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        # Test custom parameters\n        df, ax = task_func(N=50, CATEGORIES=[\"X\", \"Y\"])\n        self.assertEqual(df.shape, (50, 3))\n        self.assertSetEqual(set(df[\"category\"]), {\"X\", \"Y\"})\n        self.assertListEqual(list(df.columns), [\"x\", \"y\", \"category\"])\n        self.assertTrue(df[\"x\"].between(0, 1).all())\n        self.assertTrue(df[\"y\"].between(0, 1).all())\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_3(self):\n        # Test N specifically\n        for N in [5, 10, 50, 200]:\n            df, _ = task_func(N=N)\n            self.assertEqual(df.shape, (N, 3))\n    def test_case_4(self):\n        # Test categories specifically\n        for C in [[\"APPLE\", \"BANANA\"], [\"carrot\", \"dragonfruit\", \"eggplant\"], [\"F\"]]:\n            df, _ = task_func(CATEGORIES=C)\n            self.assertSetEqual(set(df[\"category\"]), set(C))\n    def test_case_5(self):\n        # Test random seed\n        df1, _ = task_func(seed=0)\n        df2, _ = task_func(seed=0)\n        df3, _ = task_func(seed=1)\n        pd.testing.assert_frame_equal(df1, df2)\n        self.assertFalse(df1.equals(df3))\n    def test_case_6(self):\n        # Test handling empty dataframe\n        df, _ = task_func(N=0, CATEGORIES=[])\n        self.assertEqual(df.shape, (0, 3))\n        self.assertListEqual(list(df[\"category\"]), [])\n    def test_case_7(self):\n        # Test handing more categories than data points\n        df, _ = task_func(N=3, CATEGORIES=[\"A\", \"B\", \"C\", \"D\"])\n        self.assertEqual(len(df), 3)\n        self.assertEqual(len(set(df[\"category\"])), 3)\n    def test_case_8(self):\n        # Test single category\n        df, _ = task_func(N=50, CATEGORIES=[\"X\"])\n        self.assertTrue((df[\"category\"] == \"X\").all())\n    def test_case_9(self):\n        # Test other category types\n        df, _ = task_func(N=50, CATEGORIES=[1, 2, 3])\n        self.assertSetEqual(set(df[\"category\"]), {1, 2, 3})\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a list containing random strings of lowercase letters. Each string's length varies from 1 to `max_length`. An optional seed can be set for the random number generator for reproducible results.\nNote that: The function utilizes the `random.choices` function to generate random strings and combines them into a list.\nThe function should raise the exception for: ValueError: If max_length is smaller than 1.\nThe function should output with:\n    list: A list containing random strings. Each string is a random combination of lowercase letters,\n    and their lengths will vary from 1 to `max_length`.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n```",
        "gt": "import random\nimport string\ndef task_func(max_length, n_samples, seed=None):\n    # Handling negative input\n    if max_length < 1:\n        raise ValueError(\"max_length must be larger than or equal to 1.\")\n\n    # Constants within the function for better encapsulation\n    LETTERS = string.ascii_lowercase\n\n    # Setting the seed for the random number generator for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    all_combinations = []\n\n    for i in range(n_samples):\n        random_length = random.randint(1, max_length)\n        combination = ''.join(random.choices(LETTERS, k=random_length))\n        all_combinations.append(combination)\n\n\n    # Simplifying the reduction using native functionality\n    return all_combinations",
        "test": "\"\"\"\nThis script contains tests for the function task_func.\nEach test checks a specific aspect of the function's behavior.\n\"\"\"\nimport unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_length_and_content(self):\n        \"\"\"Test the length of the output and whether it contains valid strings.\"\"\"\n        seed = 1  # for reproducibility\n        max_length = 5\n        result = task_func(max_length, n_samples=10, seed=seed)\n        \n        # All outputs should be strings\n        self.assertTrue(all(isinstance(item, str) for item in result))\n        # All strings should be of length <= max_length and > 0\n        self.assertTrue(all(1 <= len(item) <= max_length for item in result))\n        expected = ['ou', 'g', 'tmjf', 'avlt', 's', 'sfy', 'aao', 'rzsn', 'yoir', 'yykx']\n        self.assertCountEqual(result, expected)\n    def test_randomness(self):\n        \"\"\"Test that setting a seed produces reproducible results.\"\"\"\n        seed = 2\n        result1 = task_func(3, seed=seed, n_samples=100)\n        result2 = task_func(3, seed=seed, n_samples=100)\n        self.assertEqual(result1, result2)  # results should be same with same seed\n    def test_varying_length(self):\n        \"\"\"Test with varying n to check the function's robustness with different input sizes.\"\"\"\n        seed = 3\n        for n in range(1, 15):  # testing multiple sizes\n            result = task_func(n, seed=seed, n_samples=10)\n            self.assertTrue(all(1 <= len(item) <= n for item in result))\n    def test_negative_input(self):\n        \"\"\"Test how the function handles negative input. It should handle it gracefully.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func(-1, n_samples=22)  # negative numbers shouldn't be allowed\n    def test_zero_length(self):\n        \"\"\"Test how the function handles zero input. It should handle it gracefully or according to its specification.\"\"\"\n        self.assertRaises(ValueError, task_func, 0, n_samples=5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scale the input field to the range [0, 1] and display it as a DataFrame.\nNote that: The return DataFrame use 'Scaled Values' as the column name.\nThe function should output with:\n    DataFrame: A pandas DataFrame of the scaled array.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n```",
        "gt": "from sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\ndef task_func(l):\n\n    scaler = MinMaxScaler()\n    l_scaled = scaler.fit_transform(l.reshape(-1, 1))\n    df = pd.DataFrame(l_scaled, columns=['Scaled Values'])\n    return df",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        l1 = np.array([10, 20, 30, 40, 50])\n        expected_df1 = pd.DataFrame({'Scaled Values': [0.0, 0.25, 0.5, 0.75, 1.0]})\n        self.assertTrue(task_func(l1).equals(expected_df1))\n    \n    def test_case_2(self):\n        l2 = np.array([-10, 0, 10])\n        expected_df2 = pd.DataFrame({'Scaled Values': [0.0, 0.5, 1.0]})\n        self.assertTrue(task_func(l2).equals(expected_df2))\n    \n    def test_case_3(self):\n        l3 = np.array([5, 5, 5])\n        expected_df3 = pd.DataFrame({'Scaled Values': [0.0, 0.0, 0.0]})\n        self.assertTrue(task_func(l3).equals(expected_df3))\n        \n    def test_case_4(self):\n        l4 = np.array([100])\n        expected_df4 = pd.DataFrame({'Scaled Values': [0.0]})\n        self.assertTrue(task_func(l4).equals(expected_df4))\n    \n    def test_case_5(self):\n        l5 = np.array([10, 50, 30, 40, 20])\n        expected_df5 = pd.DataFrame({'Scaled Values': [0.0, 1.0, 0.5, 0.75, 0.25]})\n        self.assertTrue(task_func(l5).equals(expected_df5))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Reads a CSV file and processes its date-related data. The function performs several key tasks such as checking for the file's existence, validating the presence of a specified date column, converting date values to datetime objects, filtering rows based on the current date, and sorting the resulting data. The function handles special cases, like an empty CSV file, by returning an empty DataFrame and raises exceptions for specific error scenarios like missing files or columns.\nThe function should raise the exception for: FileNotFoundError: If the specified CSV file is not found at the given path. ValueError: If the specified column is not present in the CSV file.\nThe function should output with:\n    pandas\n    os\n    datetime.datetime\n    pandas.errors.EmptyDataError\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n```",
        "gt": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"The file {csv_file_path} does not exist.\")\n\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n\n    if column_name not in df.columns:\n        raise ValueError(f\"The column {column_name} is not found in the file.\")\n\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    current_date = datetime.now().date()\n    df = df[df[column_name].dt.date >= current_date]\n    df = df.sort_values(by=column_name)\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nfrom io import StringIO\nfrom datetime import datetime, timedelta\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def setUp(self):\n        # Set future dates for the test data\n        future_date_1 = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n        future_date_2 = (datetime.now() + timedelta(days=2)).strftime(\"%Y-%m-%d\")\n        future_date_3 = (datetime.now() + timedelta(days=3)).strftime(\"%Y-%m-%d\")\n        # Create mock data with the correct column names and future dates\n        self.valid_csv_data = f\"\"\"Date,Value\\n{future_date_1},100\\n{future_date_2},150\\n{future_date_3},50\"\"\"\n        self.valid_csv_path = \"valid.csv\"\n        with open(self.valid_csv_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(self.valid_csv_data)\n        # Set today's date as a string for comparison in tests\n        self.today_str = datetime.now().strftime(\"%Y-%m-%d\")\n    def tearDown(self):\n        # Remove created file\n        if os.path.exists(self.valid_csv_path):\n            os.remove(self.valid_csv_path)\n    def test_valid_input(self):\n        \"\"\"Test case for valid input CSV file and column name.\"\"\"\n        df = task_func(self.valid_csv_path, \"Date\")\n        self.assertFalse(df.empty)\n        self.assertTrue(all(df[\"Date\"] >= pd.to_datetime(self.today_str)))\n    def test_file_not_found(self):\n        \"\"\"Test case for non-existing CSV file.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func(\"non_existing.csv\", \"Date\")\n    def test_column_not_found(self):\n        \"\"\"Test case for CSV file without the specified column.\"\"\"\n        invalid_csv_data = StringIO(\n            \"\"\"\n        NotDate,Value\n        2023-12-10,100\n        2023-12-11,150\n        \"\"\"\n        )\n        invalid_csv_path = \"invalid.csv\"\n        pd.read_csv(invalid_csv_data).to_csv(invalid_csv_path, index=False)\n        with self.assertRaises(ValueError):\n            task_func(invalid_csv_path, \"Date\")\n        os.remove(invalid_csv_path)\n    def test_empty_file(self):\n        \"\"\"Test case for an empty CSV file.\"\"\"\n        empty_csv_path = \"empty.csv\"\n        with open(empty_csv_path, \"w\", encoding=\"utf-8\") as f:\n            pass  # Create an empty file\n        df = task_func(empty_csv_path, \"Date\")\n        self.assertTrue(df.empty)\n        os.remove(empty_csv_path)\n    def test_no_future_dates(self):\n        \"\"\"Test case where all dates in the CSV file are in the past.\"\"\"\n        past_csv_data = \"\"\"Date,Value\\n2020-01-01,100\\n2020-01-02,150\"\"\"\n        past_csv_path = \"past.csv\"\n        with open(past_csv_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(past_csv_data)\n        df = task_func(past_csv_path, \"Date\")\n        self.assertTrue(df.empty)\n        os.remove(past_csv_path)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze and visualize statistical properties of a specified weather data column. This function calculates the sum, mean, minimum, and maximum values of a specified column in the given data. It also generates a histogram plot of the data in the column. The dataset is expected to be a list of weather observations, where each observation includes date, temperature, humidity, wind speed, and precipitation values. If the provided data list is empty, resulting in an empty DataFrame, the function handles it by setting: - The 'mean' value to np.nan. - The 'min' value to np.inf. - The 'max' value to -np.inf.\nThe function should output with:\n    result (dict): A dictionary containing:\n    'sum': Sum of the values in the specified column.\n    'mean': Mean of the values in the specified column.\n    'min': Minimum value in the specified column.\n    'max': Maximum value in the specified column.\n    'plot': A matplotlib BarContainer object of the histogram plot for the specified column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(column, data):\n    COLUMNS = [\"Date\", \"Temperature\", \"Humidity\", \"Wind Speed\", \"Precipitation\"]\n    df = pd.DataFrame(data, columns=COLUMNS)\n    column_data = df[column]\n\n    result = {\n        \"sum\": np.sum(column_data),\n        \"mean\": np.nan if df.empty else np.mean(column_data),\n        \"min\": np.inf if df.empty else np.min(column_data),\n        \"max\": -np.inf if df.empty else np.max(column_data),\n    }\n\n    _, _, ax = plt.hist(column_data)\n    plt.title(f\"Histogram of {column}\")\n\n    result[\"plot\"] = ax\n\n    return result",
        "test": "import unittest\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data = [\n            [datetime(2022, 1, 1), -5, 80, 10, 0],\n            [datetime(2022, 1, 2), -3, 85, 12, 0.5],\n            [datetime(2022, 1, 3), -2, 83, 15, 0],\n            [datetime(2022, 1, 4), -1, 82, 13, 0.2],\n            [datetime(2022, 1, 5), 0, 80, 11, 0.1],\n        ]\n    def test_case_1(self):\n        # Testing the 'Temperature' column\n        result = task_func(\"Temperature\", self.data)\n        self.assertEqual(result[\"sum\"], -11)\n        self.assertEqual(result[\"mean\"], -2.2)\n        self.assertEqual(result[\"min\"], -5)\n        self.assertEqual(result[\"max\"], 0)\n        self.assertIsInstance(result[\"plot\"], matplotlib.container.BarContainer)\n    def test_case_2(self):\n        # Testing the 'Humidity' column\n        result = task_func(\"Humidity\", self.data)\n        self.assertEqual(result[\"sum\"], 410)\n        self.assertEqual(result[\"mean\"], 82)\n        self.assertEqual(result[\"min\"], 80)\n        self.assertEqual(result[\"max\"], 85)\n        self.assertIsInstance(result[\"plot\"], matplotlib.container.BarContainer)\n    def test_case_3(self):\n        # Testing the 'Wind Speed' column\n        result = task_func(\"Wind Speed\", self.data)\n        self.assertEqual(result[\"sum\"], 61)\n        self.assertEqual(result[\"mean\"], 12.2)\n        self.assertEqual(result[\"min\"], 10)\n        self.assertEqual(result[\"max\"], 15)\n        self.assertIsInstance(result[\"plot\"], matplotlib.container.BarContainer)\n    def test_case_4(self):\n        # Testing the 'Precipitation' column\n        result = task_func(\"Precipitation\", self.data)\n        self.assertAlmostEqual(result[\"sum\"], 0.8, places=6)\n        self.assertAlmostEqual(result[\"mean\"], 0.16, places=6)\n        self.assertAlmostEqual(result[\"min\"], 0, places=6)\n        self.assertAlmostEqual(result[\"max\"], 0.5, places=6)\n        self.assertIsInstance(result[\"plot\"], matplotlib.container.BarContainer)\n    def test_case_5(self):\n        # Testing with empty data\n        result = task_func(\"Temperature\", [])\n        self.assertTrue(np.isnan(result[\"mean\"]))\n        self.assertEqual(result[\"sum\"], 0)\n        self.assertTrue(\n            np.isinf(result[\"min\"]) and result[\"min\"] > 0\n        )  # Checking for positive infinity for min\n        self.assertTrue(\n            np.isinf(result[\"max\"]) and result[\"max\"] < 0\n        )  # Checking for negative infinity for max\n        self.assertIsInstance(result[\"plot\"], matplotlib.container.BarContainer)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Select a random person from a dataset of people and their attributes (name, age, city) provided as a global variable DATA. Add a UTC timestamp to the person's data which is passed as an argument utc_datetime 'timestamp'. Finally, encode that person's data as a JSON string.\nThe function should output with:\n    str: The person's data encoded as a JSON string.\nYou should write self-contained code starting with:\n```\nimport json\nimport random\n# Constants\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n```",
        "gt": "import json\nimport random\n# Constants\nDATA = [\n    {'name': 'John', 'age': 30, 'city': 'New York'},\n    {'name': 'Peter', 'age': 35, 'city': 'London'},\n    {'name': 'Susan', 'age': 25, 'city': 'Sydney'},\n    {'name': 'Alice', 'age': 28, 'city': 'Paris'},\n    {'name': 'Bob', 'age': 40, 'city': 'Tokyo'},\n    {'name': 'Charlie', 'age': 22, 'city': 'Beijing'},\n    {'name': 'David', 'age': 33, 'city': 'Mumbai'},\n    {'name': 'Eve', 'age': 27, 'city': 'Berlin'},\n    {'name': 'Frank', 'age': 32, 'city': 'Moscow'},\n    {'name': 'Grace', 'age': 29, 'city': 'Rome'}\n]\ndef task_func(utc_datetime, seed=0):\n    random.seed(seed)\n    # Choose a random person\n    person = random.choice(DATA)\n    person['timestamp'] = utc_datetime.isoformat()\n    \n    # Encode the person's data as a JSON string\n    person_json_str = json.dumps(person)\n    \n    return person_json_str",
        "test": "import unittest\nimport pytz\nimport doctest\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        utc_time = datetime(2023, 6, 15, 12, 0, 0, tzinfo=pytz.UTC)\n        person_json_str = task_func(utc_time)\n        person_data = json.loads(person_json_str)\n        \n        # Assert that the returned data has the expected fields and timestamp\n        self.assertIn('name', person_data)\n        self.assertIn('age', person_data)\n        self.assertIn('city', person_data)\n        self.assertIn('timestamp', person_data)\n        self.assertEqual(person_data['timestamp'], '2023-06-15T12:00:00+00:00')\n        \n    def test_case_2(self):\n        utc_time = datetime(2022, 5, 10, 10, 30, 0, tzinfo=pytz.UTC)\n        person_json_str = task_func(utc_time)\n        person_data = json.loads(person_json_str)\n        \n        # Assert that the returned data has the expected fields and timestamp\n        self.assertIn('name', person_data)\n        self.assertIn('age', person_data)\n        self.assertIn('city', person_data)\n        self.assertIn('timestamp', person_data)\n        self.assertEqual(person_data['timestamp'], '2022-05-10T10:30:00+00:00')\n        # Test with seed\n        self.assertEqual(person_data['name'], 'David')\n        self.assertEqual(person_data['age'], 33)\n        self.assertEqual(person_data['city'], 'Mumbai')\n        \n    def test_case_3(self):\n        # Test with current UTC time\n        utc_time = datetime.utcnow().replace(tzinfo=pytz.UTC)\n        person_json_str = task_func(utc_time)\n        person_data = json.loads(person_json_str)\n        \n        # Assert that the returned data has the expected fields and current timestamp\n        self.assertIn('name', person_data)\n        self.assertIn('age', person_data)\n        self.assertIn('city', person_data)\n        self.assertIn('timestamp', person_data)\n        \n    def test_case_4(self):\n        utc_time = datetime(2021, 1, 1, 0, 0, 0, tzinfo=pytz.UTC)\n        person_json_str = task_func(utc_time, seed=101)\n        person_data = json.loads(person_json_str)\n        \n        # Assert that the returned data has the expected fields and timestamp\n        self.assertIn('name', person_data)\n        self.assertIn('age', person_data)\n        self.assertIn('city', person_data)\n        self.assertIn('timestamp', person_data)\n        self.assertEqual(person_data['timestamp'], '2021-01-01T00:00:00+00:00')\n        # Test with seed\n        self.assertEqual(person_data['name'], 'Grace')\n        self.assertEqual(person_data['age'], 29)\n        self.assertEqual(person_data['city'], 'Rome')\n        \n    def test_case_5(self):\n        utc_time = datetime(2020, 2, 29, 15, 45, 0, tzinfo=pytz.UTC)  # Leap year date\n        person_json_str = task_func(utc_time)\n        person_data = json.loads(person_json_str)\n        \n        # Assert that the returned data has the expected fields and timestamp\n        self.assertIn('name', person_data)\n        self.assertIn('age', person_data)\n        self.assertIn('city', person_data)\n        self.assertIn('timestamp', person_data)\n        self.assertEqual(person_data['timestamp'], '2020-02-29T15:45:00+00:00')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Makes an HTTPS GET request to a specified server and path, and retrieves the response.\nThe function should raise the exception for: ssl.SSLError: If there is an SSL handshake error.\nThe function should output with:\n    str: The response body from the server as a string.\nYou should write self-contained code starting with:\n```\nimport socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n```",
        "gt": "import socket\nimport ssl\nimport http.client\ndef task_func(SERVER_NAME, SERVER_PORT, path):\n    context = ssl.create_default_context()\n\n    with socket.create_connection((SERVER_NAME, SERVER_PORT)) as sock:\n        with context.wrap_socket(sock, server_hostname=SERVER_NAME) as ssock:\n            conn = http.client.HTTPSConnection(SERVER_NAME, SERVER_PORT, context=context)\n            conn.request('GET', path)\n            response = conn.getresponse()\n            return response.read().decode()",
        "test": "import unittest\nfrom unittest.mock import patch\nimport http.client\nimport ssl\nimport socket\nclass TestCases(unittest.TestCase):\n    @patch('http.client.HTTPSConnection')\n    def test_return_type(self, mock_conn):\n        \"\"\" Test that the function returns a string. \"\"\"\n        mock_conn.return_value.getresponse.return_value.read.return_value = b'Server Response'\n        result = task_func('www.example.com', 443, '/test/path')\n        self.assertIsInstance(result, str)\n    @patch('http.client.HTTPSConnection')\n    def test_different_paths(self, mock_conn):\n        \"\"\" Test the function with different request paths. \"\"\"\n        mock_conn.return_value.getresponse.return_value.read.return_value = b'Server Response'\n        result = task_func('www.example.com', 443, '/another/path')\n        self.assertIsInstance(result, str)\n    @patch('http.client.HTTPSConnection')\n    def test_connection_error_handling(self, mock_conn):\n        \"\"\" Test handling of connection errors. \"\"\"\n        mock_conn.side_effect = http.client.HTTPException('Connection error')\n        with self.assertRaises(http.client.HTTPException):\n            task_func('www.example.com', 443, '/error/path')\n    @patch('http.client.HTTPSConnection')\n    def test_response_content(self, mock_conn):\n        \"\"\" Test the content of the response. \"\"\"\n        mock_conn.return_value.getresponse.return_value.read.return_value = b'Expected Content'\n        result = task_func('www.example.com', 443, '/content/path')\n        self.assertEqual(result, 'Expected Content')\n    @patch('socket.create_connection')\n    @patch('http.client.HTTPSConnection')\n    def test_ssl_handshake_error_handling(self, mock_conn, mock_socket):\n        \"\"\" Test handling of SSL handshake errors. \"\"\"\n        mock_socket.side_effect = ssl.SSLError('SSL handshake failed')\n        with self.assertRaises(ssl.SSLError):\n            task_func('badssl.com', 443, '/test/path')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Run a Python script as a process with predefined arguments. By default, waits for the process to complete. If wait is False, the function returns None. Raise: - ValueError: If the script does not exist. - subprocess.CalledProcessError: If the script raises an exception.\nThe function should output with:\n    int: The return code of the subprocess. If 'wait' is False, returns None.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n```",
        "gt": "import subprocess\nimport os\nimport sys\nimport time\ndef task_func(script_path, wait=True, *args):\n    # Check if script exists\n    if not os.path.isfile(script_path):\n        raise ValueError(f\"Script '{script_path}' does not exist.\")\n\n    # Run script in a background process\n    process = subprocess.Popen(\n        [sys.executable, script_path, *args], \n        stderr=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n    )\n    if \"Exception\" in str(process.communicate()[1]):\n        raise subprocess.CalledProcessError(process.returncode, process.args)\n\n    # Wait for the process to complete if 'wait' is True\n    if wait:\n        while process.poll() is None:\n            time.sleep(1)\n        return process.returncode\n    else:\n        return None",
        "test": "import unittest\nimport shutil\nimport doctest\nimport tempfile\n# Define the test cases\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        script1_content = \"\"\"import sys;sys.exit(0);\"\"\"\n        # 2. A script that exits with code 1\n        script2_content = \"\"\"import sys;sys.exit(1);\"\"\"\n        # 3. A script that prints arguments passed to it and exits with code 0\n        script3_content = \"\"\"import sys;print(\" \".join(sys.argv[1:]));sys.exit(0);\"\"\"\n        # 4. A script that sleeps for 2 seconds before exiting with code 0\n        script4_content = \"\"\"import sys;import time;time.sleep(2);sys.exit(0);\"\"\"\n        # 5. A script that raises an exception (to test unexpected behavior)\n        script5_content = \"\"\"raise Exception(\"Dummy exception\");\"\"\"\n        self.base_tmp_dir = tempfile.mkdtemp()\n        self.base_dir = f\"{self.base_tmp_dir}/test\"\n        os.makedirs(self.base_dir, exist_ok=True)\n        # Saving these scripts to the file system\n        self.script_paths = [\n            f\"{self.base_dir}/script1.py\", \n            f\"{self.base_dir}/script2.py\", \n            f\"{self.base_dir}/script3.py\", \n            f\"{self.base_dir}/script4.py\", \n            f\"{self.base_dir}/script5.py\"\n        ]\n        script_contents = [script1_content, script2_content, script3_content, script4_content, script5_content]\n        for path, content in zip(self.script_paths, script_contents):\n            with (\n                open(path, \"w\") \n                if os.path.exists(path) \n                else open(path, \"x\")\n            ) as file:\n                file.write(content)\n    def tearDown(self):\n        shutil.rmtree(f\"{self.base_dir}\")\n    def test_case_1(self):\n        # Testing script1.py that should exit with code 0\n        return_code = task_func(self.script_paths[0])\n        self.assertEqual(return_code, 0)\n    def test_case_2(self):\n        # Testing script2.py that should exit with code 1\n        return_code = task_func(self.script_paths[1])\n        self.assertEqual(return_code, 1)\n    \n    def test_case_3(self):\n        # Testing script3.py with arguments\n        # As the function doesn't capture the stdout, we only check the return code\n        return_code = task_func(self.script_paths[2], True, 'arg1', 'arg2')\n        self.assertEqual(return_code, 0)\n    def test_case_4(self):\n        # Testing script4.py that sleeps for 2 seconds\n        # Using the wait parameter to not wait for completion\n        return_code = task_func(self.script_paths[3], False)\n        self.assertIsNone(return_code)  # Should return None as we are not waiting\n    def test_case_5(self):\n        # Testing script5.py that raises an exception\n        # This will test how the function handles unexpected behavior\n        with self.assertRaises(subprocess.CalledProcessError):\n            task_func(self.script_paths[4])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Search for matches with a specified regex pattern in a given column of a CSV file and optionally return a random sample of these matches. The random sampling is implemented by generating a random list of integers which are used as indices. The number of generated indices is given by sample_size.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing either all the rows with matches or a random sample of them.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport pandas as pd\nimport random\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n```",
        "gt": "import pandas as pd\nimport pandas as pd\nimport random\ndef task_func(csv_file, column_name='data', pattern='\\d+[xX]', sample_size=None, seed=42):\n    df = pd.read_csv(csv_file)\n    matches = df[df[column_name].str.contains(pattern, na=False)]\n\n    if sample_size is not None:\n        random.seed(seed)  # Set the seed for reproducibility\n        sample_size = min(sample_size, len(matches))  # Ensure sample size is not greater than the number of matches\n        sampled_indices = random.sample(range(len(matches)), sample_size)  # Randomly select indices\n        matches = matches.iloc[sampled_indices]  # Select rows corresponding to sampled indices\n\n    return matches",
        "test": "import unittest\nimport pandas as pd\nimport tempfile\nimport shutil\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to store the test CSV files\n        self.test_dir = tempfile.mkdtemp()\n        self.test_file = os.path.join(self.test_dir, \"test_data.csv\")\n        # Create a sample DataFrame\n        data = {\n            \"data\": [\"123x good\", \"no match here\", \"456X bad\", \"789x good\", \"ABC\"],\n            \"other_column\": [\"data1\", \"data2\", \"data3\", \"data4\", \"data5\"]\n        }\n        self.df = pd.DataFrame(data)\n        self.df.to_csv(self.test_file, index=False)\n    def tearDown(self):\n        # Remove temporary directory after the test\n        shutil.rmtree(self.test_dir)\n    def test_default_parameters(self):\n        result = task_func(self.test_file)\n        expected_data = {\n            \"data\": [\"123x good\", \"456X bad\", \"789x good\"],\n            \"other_column\": [\"data1\", \"data3\", \"data4\"]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        pd.testing.assert_frame_equal(result.reset_index(drop=True), expected_df)\n    def test_custom_column(self):\n        with self.assertRaises(KeyError):\n            task_func(self.test_file, column_name=\"nonexistent_column\")\n    def test_custom_pattern(self):\n        result = task_func(self.test_file, pattern='\\d+X')\n        expected_data = {\n            \"data\": [\"456X bad\"],\n            \"other_column\": [\"data3\"]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        pd.testing.assert_frame_equal(result.reset_index(drop=True), expected_df)\n    def test_sample_size(self):\n        result = task_func(self.test_file, sample_size=2, seed=42)\n        self.assertEqual(len(result), 2)\n    def test_no_matches(self):\n        result = task_func(self.test_file, pattern=\"nope\")\n        self.assertTrue(result.empty)\n    def test_sample_size_larger_than_matches(self):\n        result = task_func(self.test_file, sample_size=10)\n        self.assertEqual(len(result), 3)  # Only three matches exist\n    def test_zero_sample_size(self):\n        result = task_func(self.test_file, sample_size=0)\n        self.assertTrue(result.empty)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Serializes a dictionary to a JSON string, compresses it using zlib, and then encodes the compressed data with base64.\nThe function should output with:\n    str: A base64 encoded string that represents the zlib-compressed JSON string of the dictionary.\nYou should write self-contained code starting with:\n```\nimport base64\nimport json\nimport zlib\ndef task_func(data_dict):\n```",
        "gt": "import base64\nimport json\nimport zlib\ndef task_func(data_dict):\n    json_str = json.dumps(data_dict)\n    compressed = zlib.compress(json_str.encode())\n    return base64.b64encode(compressed).decode()",
        "test": "import unittest\nimport json\nimport zlib\nimport base64\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a simple dictionary containing string values.\n        data = {'key1': 'value1', 'key2': 'value2'}\n        result = task_func(data)\n        self.assertIsInstance(result, str)\n        decompressed_data = json.loads(zlib.decompress(base64.b64decode(result)).decode())\n        self.assertEqual(decompressed_data, data)\n    def test_case_2(self):\n        # Test with an empty dictionary.\n        data = {}\n        result = task_func(data)\n        self.assertIsInstance(result, str)\n        decompressed_data = json.loads(zlib.decompress(base64.b64decode(result)).decode())\n        self.assertEqual(decompressed_data, data)\n    def test_case_3(self):\n        # Test with a dictionary containing mixed types (string and integers).\n        data = {'name': 'John', 'age': 30, 'city': 'New York'}\n        result = task_func(data)\n        self.assertIsInstance(result, str)\n        decompressed_data = json.loads(zlib.decompress(base64.b64decode(result)).decode())\n        self.assertEqual(decompressed_data, data)\n    def test_case_4(self):\n        # Test with a nested dictionary containing lists of dictionaries.\n        data = {'users': [{'id': 1, 'name': 'Alice'}, {'id': 2, 'name': 'Bob'}]}\n        result = task_func(data)\n        self.assertIsInstance(result, str)\n        decompressed_data = json.loads(zlib.decompress(base64.b64decode(result)).decode())\n        self.assertEqual(decompressed_data, data)\n    def test_case_5(self):\n        # Test with a dictionary containing multiple integer values.\n        data = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n        result = task_func(data)\n        self.assertIsInstance(result, str)\n        decompressed_data = json.loads(zlib.decompress(base64.b64decode(result)).decode())\n        self.assertEqual(decompressed_data, data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Decode a hexadecimal string from the 'q' query parameter of a URL. This function extracts the 'q' query parameter from the given URL, assumes it is a hexadecimal string, and decodes it into a UTF-8 string. If the hexadecimal string is invalid or cannot be decoded into a valid UTF-8 string, None is returned.\nThe function should output with:\n    str or None: The decoded string if the 'q' parameter exists and is a valid hexadecimal, otherwise None.\nYou should write self-contained code starting with:\n```\nimport binascii\nimport urllib.parse\ndef task_func(url):\n```",
        "gt": "import binascii\nimport urllib.parse\ndef task_func(url):\n    try:\n        parsed_url = urllib.parse.urlparse(url)\n        query = urllib.parse.parse_qs(parsed_url.query).get(\"q\", [None])[0]\n        return binascii.unhexlify(query).decode(\"utf-8\") if query else None\n    except (binascii.Error, UnicodeDecodeError):\n        return None",
        "test": "import unittest\nimport binascii\nimport urllib.parse\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def test_valid_hex_string(self):\n        \"\"\"Test with a valid hex string in query parameter.\"\"\"\n        url = \"https://www.example.com?q=4a4b4c\"\n        self.assertEqual(task_func(url), \"JKL\")\n    def test_no_query_parameter(self):\n        \"\"\"Test with no query parameter.\"\"\"\n        url = \"https://www.example.com\"\n        self.assertIsNone(task_func(url))\n    def test_invalid_hex_string(self):\n        \"\"\"Test with an invalid hex string in query parameter.\"\"\"\n        url = \"https://www.example.com?q=4a4b4c4d4\"\n        self.assertIsNone(\n            task_func(url)\n        )  # Updated to assertIsNone as the function now handles the exception\n    def test_valid_hex_non_utf8(self):\n        \"\"\"Test with a valid hex string that is not valid UTF-8.\"\"\"\n        url = \"https://www.example.com?q=80\"\n        self.assertIsNone(\n            task_func(url)\n        )  # Updated to assertIsNone due to the handling of UnicodeDecodeError\n    def test_multiple_query_parameters(self):\n        \"\"\"Test with multiple query parameters.\"\"\"\n        url = \"https://www.example.com?a=123&q=4a4b4c&b=456\"\n        self.assertEqual(task_func(url), \"JKL\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Train a simple linear regression model based on the given data and evaluate the model by calculating the mean square error. The data should be structured with 'Hours' as independent variables and 'Scores' as dependent variables. The function set the random set when dividing the train and test data to 42 and the test set size is 0.2\nThe function should output with:\n    float: The mean squared error between the actual scores and predicted scores based on the test split.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n    df = pd.DataFrame(data)\n    \n    X = df[['Hours']]\n    y = df['Scores']\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    predictions = model.predict(X_test)\n    \n    mse = np.mean((y_test - predictions) ** 2)\n    \n    return mse",
        "test": "import unittest\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n# Helper function\ndef calculate_mse(data):\n    df = pd.DataFrame(data)\n    X = df[['Hours']]\n    y = df['Scores']\n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    # Create and fit the model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    # Make predictions\n    predictions = model.predict(X_test)\n    # Calculate MSE\n    mse = np.mean((y_test - predictions) ** 2)\n    \n    return mse\nclass TestCases(unittest.TestCase):\n    \n    def test_with_typical_data(self):\n        # Checks if MSE computed by task_func matches that computed by calculate_mse from a typical dataset\n        data = {\n            'Hours': [2.5, 5.1, 3.2, 8.5, 3.5],\n            'Scores': [21, 47, 27, 75, 30],\n        }\n        mse_main = task_func(data)\n        mse_helper = calculate_mse(data)\n        self.assertIsInstance(mse_main, float)\n        self.assertAlmostEqual(mse_main, mse_helper, places=5)\n    def test_with_varied_data_size(self):\n        # Verifies function handles different sizes of data inputs and results match between task_func and calculate_mse\n        data = {\n            'Hours': [2.5, 5.1, 3.2, 8.5, 3.5, 1.5, 9.2],\n            'Scores': [21, 47, 27, 75, 30, 20, 88],\n        }\n        mse_main = task_func(data)\n        mse_helper = calculate_mse(data)\n        self.assertIsInstance(mse_main, float)\n        self.assertAlmostEqual(mse_main, mse_helper, places=5)\n    def test_with_minimum_data(self):\n        # Tests the function's handling of minimal data to ensure MSE calculation is consistent between both methods\n        data = {\n            'Hours': [2.5, 2],\n            'Scores': [21, 2],\n        }\n        mse_main = task_func(data)\n        mse_helper = calculate_mse(data)\n        self.assertIsInstance(mse_main, float)\n        self.assertAlmostEqual(mse_main, mse_helper, places=5)\n    def test_with_empty_data(self):\n        # Ensures that providing empty data raises an error in both task_func and calculate_mse\n        data = {'Hours': [], 'Scores': []}\n        with self.assertRaises(ValueError):\n            task_func(data)\n        with self.assertRaises(ValueError):\n            calculate_mse(data)\n    def test_with_specific_known_value(self):\n        # Asserts that MSE matches a known value and is consistent between task_func and calculate_mse\n        data = {\n            'Hours': [2.5, 5.1, 3.2, 8.5, 3.5, 1.5, 9.2, 5.5, 8.3, 2.7],\n            'Scores': [21, 47, 27, 75, 30, 20, 88, 60, 81, 25],\n        }\n        mse_main = task_func(data)\n        mse_helper = calculate_mse(data)\n        self.assertAlmostEqual(mse_main, 6.182284986260905, places=5)\n        self.assertAlmostEqual(mse_main, mse_helper, places=5)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Traverses a given directory recursively to count files by specified extensions.\nNote that: This function counts files in a case-sensitive manner.\nThe function should raise the exception for: OSError: If the specified directory does not exist.\nThe function should output with:\n    Counter: An object containing counts of files for each of the specified extensions.\nYou should write self-contained code starting with:\n```\nimport os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n```",
        "gt": "import os\nimport glob\nfrom collections import Counter\ndef task_func(directory, extensions=[\".txt\", \".docx\", \".xlsx\", \".csv\"], keep_zero=True):\n    if not os.path.exists(directory):\n        raise OSError(\"directory must exist.\")\n\n    counter = Counter()\n\n    for suffix in extensions:\n        count = len(\n            glob.glob(os.path.join(directory, \"**\", \"*\" + suffix), recursive=True)\n        )\n        if count:\n            counter[suffix] += count\n        else:\n            if keep_zero:\n                counter[suffix] += count\n    return counter",
        "test": "import unittest\nfrom collections import Counter\nfrom tempfile import TemporaryDirectory\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = TemporaryDirectory()\n    def tearDown(self):\n        self.temp_dir.cleanup()\n    def create_test_files(self, directory, file_list):\n        for file_name in file_list:\n            with open(os.path.join(directory, file_name), \"w\") as f:\n                f.write(\"Test\")\n    def test_case_1(self):\n        # Test basic case with default extensions\n        file_names = [\"file1.txt\", \"file2.docx\", \"file3.xlsx\", \"file4.csv\", \"file5.txt\"]\n        self.create_test_files(self.temp_dir.name, file_names)\n        result = task_func(self.temp_dir.name)\n        expected = Counter({\".txt\": 2, \".docx\": 1, \".xlsx\": 1, \".csv\": 1})\n        self.assertEqual(result, expected)\n    def test_case_2(self):\n        # Test empty directory\n        result = task_func(self.temp_dir.name)\n        expected = Counter({\".txt\": 0, \".docx\": 0, \".xlsx\": 0, \".csv\": 0})\n        self.assertEqual(result, expected)\n    def test_case_3(self):\n        # Test error handling - non-existent directory\n        with self.assertRaises(OSError):\n            task_func(\"/path/to/nonexistent/directory\")\n    def test_case_4(self):\n        # Test ignoring unspecified extensions\n        file_names = [\"file1.pdf\", \"file2.png\", \"file3.txt\"]\n        self.create_test_files(self.temp_dir.name, file_names)\n        result = task_func(self.temp_dir.name)\n        expected = Counter({\".txt\": 1, \".docx\": 0, \".xlsx\": 0, \".csv\": 0})\n        self.assertEqual(result, expected)\n    def test_case_5(self):\n        # Test nested folders\n        nested_dir_path = os.path.join(self.temp_dir.name, \"nested\")\n        os.makedirs(nested_dir_path)\n        file_names = [\"nested_file1.txt\", \"nested_file2.xlsx\"]\n        self.create_test_files(nested_dir_path, file_names)\n        result = task_func(self.temp_dir.name)\n        expected = Counter({\".txt\": 1, \".xlsx\": 1, \".docx\": 0, \".csv\": 0})\n        self.assertEqual(result, expected)\n    def test_case_6(self):\n        # Test custom extensions\n        file_names = [\"image.jpeg\", \"video.mp4\", \"document.pdf\"]\n        self.create_test_files(self.temp_dir.name, file_names)\n        result = task_func(\n            self.temp_dir.name, extensions=[\".jpeg\", \".mp4\"], keep_zero=False\n        )\n        expected = Counter({\".jpeg\": 1, \".mp4\": 1})\n        self.assertEqual(result, expected)\n    def test_case_7(self):\n        # Test custom extensions\n        file_names = [\"file1.txt\", \"file2.docx\"]\n        self.create_test_files(self.temp_dir.name, file_names)\n        result = task_func(self.temp_dir.name, keep_zero=False)\n        expected = Counter(\n            {\".txt\": 1, \".docx\": 1}\n        )  # .xlsx and .csv are omitted because their count is 0 and keep_zero is False\n        self.assertEqual(result, expected)\n    def test_case_8(self):\n        # Test case sensitivity\n        file_names = [\"file1.txt\", \"file1.tXt\", \"fiLE.txt\", \"fiLE.TXt\"]\n        self.create_test_files(self.temp_dir.name, file_names)\n        result = task_func(self.temp_dir.name, extensions=[\".txt\"])\n        expected = Counter({\".txt\": 2})\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze the salary distribution within the department with code 'EMPXX'. Generate random salaries for each employee and create a histogram. - For the department of interest, randomly generate as many salaries as its number of employees. - Make sure that the salary is within SALARY_RANGE. - The histogram title should be 'Salary Distribution in EMPXX Department' - The x-label should be set to 'Salary' - The y-label should be set to 'Number of Employees'\nThe function should output with:\n    matplotlib.axes._axes.Axes: Axes object representing the histogram.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\n# Constants\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n```",
        "gt": "import random\nimport matplotlib.pyplot as plt\n# Constants\nSALARY_RANGE = (20000, 100000)\ndef task_func(dict1):\n    emp_salaries = []\n\n    for prefix, num_employees in dict1.items():\n        if not prefix.startswith('EMPXX'):\n            continue\n\n        for _ in range(num_employees):\n            salary = random.randint(*SALARY_RANGE)\n            emp_salaries.append(salary)\n\n    plt.hist(emp_salaries, bins=10, alpha=0.5)\n    plt.title('Salary Distribution in EMPXX Department')\n    plt.xlabel('Salary')\n    plt.ylabel('Number of Employees')\n    return plt.gca()",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        random.seed(42)\n        d = {'EMPXX': 10, 'MANXX': 5, 'DEVXX': 8, 'HRXX': 7}\n        ax = task_func(d)\n        self.assertEqual(ax.get_title(), 'Salary Distribution in EMPXX Department')\n        self.assertEqual(ax.get_xlabel(), 'Salary')\n        self.assertEqual(ax.get_ylabel(), 'Number of Employees')\n    def test_case_2(self):\n        random.seed(42)\n        d = {'EMPXX': 5, 'MANXX': 2, 'DEVXX': 3, 'HRXX': 4}\n        ax = task_func(d)\n        self.assertEqual(ax.get_title(), 'Salary Distribution in EMPXX Department')\n        self.assertEqual(ax.get_xlabel(), 'Salary')\n        self.assertEqual(ax.get_ylabel(), 'Number of Employees')\n    def test_case_3(self):\n        random.seed(42)\n        d = {'EMPXX': 3, 'MANXX': 1, 'DEVXX': 1, 'HRXX': 7}\n        ax = task_func(d)\n        self.assertEqual(ax.get_title(), 'Salary Distribution in EMPXX Department')\n        self.assertEqual(ax.get_xlabel(), 'Salary')\n        self.assertEqual(ax.get_ylabel(), 'Number of Employees')\n    def test_case_4(self):\n        random.seed(42)\n        d = {'EMPXX': 6, 'MANXX': 7, 'DEVXX': 2, 'HRXX': 1}\n        ax = task_func(d)\n        self.assertEqual(ax.get_title(), 'Salary Distribution in EMPXX Department')\n        self.assertEqual(ax.get_xlabel(), 'Salary')\n        self.assertEqual(ax.get_ylabel(), 'Number of Employees')\n    def test_case_5(self):\n        random.seed(42)\n        d = {'EMPXX': 1, 'MANXX': 1, 'DEVXX': 1, 'HRXX': 1}\n        ax = task_func(d)\n        self.assertEqual(ax.get_title(), 'Salary Distribution in EMPXX Department')\n        self.assertEqual(ax.get_xlabel(), 'Salary')\n        self.assertEqual(ax.get_ylabel(), 'Number of Employees')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a list of random pairs of adjacent letters from the given word. The number of such pairs will be equal to the length of the constant POSSIBLE_LETTERS.\nThe function should raise the exception for: ValueError: If the input contains non-letter characters.\nThe function should output with:\n    list: A list of random pairs of adjacent letters from the word. If the word has fewer than 2 letters, returns a list of empty strings based on POSSIBLE_LETTERS length.\nYou should write self-contained code starting with:\n```\nimport random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n```",
        "gt": "import random\nimport string\nPOSSIBLE_LETTERS = ['a', 'b', 'c']\ndef task_func(word):\n    if not all(char in string.ascii_letters for char in word):\n        raise ValueError(\"Input must only contain letters.\")\n    \n    if len(word) < 2:\n        return ['' for _ in range(len(POSSIBLE_LETTERS))]\n    \n    pairs = [''.join(x) for x in zip(word, word[1:])]\n    random_pairs = [random.choice(pairs) for _ in range(len(POSSIBLE_LETTERS))]\n\n    return random_pairs",
        "test": "import unittest\nimport random\n# Assuming the function is correctly imported from its script\n# from task_func import task_func  \nclass TestCases(unittest.TestCase):\n    def test_with_valid_input(self):\n        random.seed(0)\n        result = task_func('abcdef')\n        self.assertEqual(len(result), 3, \"Output list should have length 3\")\n        valid_pairs = ['ab', 'bc', 'cd', 'de', 'ef']\n        for pair in result:\n            self.assertIn(pair, valid_pairs, f\"Pair '{pair}' is not a valid adjacent pair in 'abcdef'\")\n    def test_single_character(self):\n        random.seed(42)\n        result = task_func('a')\n        expected = ['', '', '']\n        self.assertEqual(result, expected, \"Should return list of empty strings for a single character\")\n    def test_empty_string(self):\n        random.seed(55)\n        result = task_func('')\n        expected = ['', '', '']\n        self.assertEqual(result, expected, \"Should return list of empty strings for an empty string\")\n    def test_non_letter_input(self):\n        random.seed(0)\n        with self.assertRaises(ValueError):\n            task_func('123')\n    def test_long_input(self):\n        random.seed(5)\n        result = task_func('abcdefghijklmnopqrstuvwxyz')\n        all_pairs = [''.join(x) for x in zip('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'[1:])]\n        for pair in result:\n            self.assertIn(pair, all_pairs, f\"Pair '{pair}' is not a valid adjacent pair in the alphabet\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform KMeans clustering on a list of data points with 2D coordinates and return the cluster labels. The function takes a list of tuples, each containing an identifier and its 2D coordinates. It applies KMeans clustering to categorize the points. >>> data = [('T1', 1, 1), ('T2', 1, 1.1), ('T2', 1.1, 1), ('C1', 400, 400), ('C2', 401, 401), ('B1', 35, 35)] >>> labels = task_func(data, n_clusters=3, random_state=42) >>> print(labels) [0 0 0 1 1 2]\nThe function should output with:\n    ndarray: A numpy array with the cluster labels for each item.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n```",
        "gt": "import numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(data, n_clusters=2, random_state=0):\n    items, x_values, y_values = zip(*data)\n    coordinates = np.array(list(zip(x_values, y_values)))\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state).fit(coordinates)\n    labels = kmeans.labels_\n\n    return labels",
        "test": "import unittest\nimport warnings\nimport numpy as np\nfrom faker import Faker\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with a basic dataset and default parameters\n        data = [('A', 1, 1), ('B', 2, 2), ('C', 300, 300), ('D', 400, 400)]\n        expected_labels = np.array([0, 0, 1, 1])  # Assuming 2 clusters and certain random_state\n        labels = task_func(data, random_state=1)\n        np.testing.assert_array_equal(labels, expected_labels)\n    def test_case_2(self):\n        # Testing with different number of clusters\n        data = [('A', 1, 1), ('B', 2, 2), ('C', 3, 3), ('D', 4, 4)]\n        n_clusters = 4\n        labels = task_func(data, n_clusters=n_clusters)\n        unique_labels = np.unique(labels)\n        self.assertEqual(len(unique_labels), n_clusters)\n    def test_case_3(self):\n        # Testing with identical points (expecting a single cluster)\n        data = [('A', 1, 1), ('B', 1, 1), ('C', 1, 1), ('D', 1, 1)]\n        expected_labels = np.array([0, 0, 0, 0])  # All items are in the same cluster\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            labels = task_func(data, n_clusters=2, random_state=1)\n        np.testing.assert_array_equal(labels, expected_labels)\n    def test_case_4(self):\n        # Testing with an empty dataset (expecting an exception)\n        data = []\n        with self.assertRaises(ValueError):\n            task_func(data)  # Should raise an exception because KMeans cannot cluster an empty dataset\n    def test_case_5(self):\n        # Testing with non-numeric data (expecting an exception)\n        data = [('A', 'foo', 'bar'), ('B', 'baz', 'qux')]\n        with self.assertRaises(ValueError):\n            task_func(data)  # Should raise an exception because coordinates must be numeric\n    def test_big_data(self):\n        fake = Faker()\n        num = 1000\n        name = [fake.first_name() for _ in range(num)]\n        x = [fake.random_int() for _ in range(num)]\n        y = [fake.random_int() for _ in range(num)]\n        data = list(zip(name, x, y))\n        labels = task_func(data, n_clusters=10, random_state=12)\n        unique_labels = np.unique(labels)\n        self.assertEqual(len(unique_labels), 10)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Look for files that match the pattern of the regular expression '(? <! Distillr)\\\\\\\\ AcroTray\\\\.exe' in the directory 'C:\\\\ SomeDir\\\\'. If found, write these file paths to a configuration file.\nThe function should output with:\n    str: Path to the created configuration file.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n```",
        "gt": "import re\nimport os\nimport shutil\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))\n            moved_files_count += 1\n\n    return moved_files_count",
        "test": "import unittest\nimport os\nimport tempfile\nimport configparser\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory for source and target\n        self.source_dir = tempfile.mkdtemp()\n        self.target_dir = tempfile.mkdtemp()\n        # Files that should match the pattern and be moved\n        self.valid_files = ['test1.txt', 'document1.doc', 'file1.docx', 'test2.txt', 'notes1.docx']\n        for file in self.valid_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write(\"Dummy content\")\n        # Files that should not match the pattern and remain\n        self.invalid_files = ['image1.png', 'script.js', 'data.csv', 'test.tmp', 'archive.zip']\n        for file in self.invalid_files:\n            with open(os.path.join(self.source_dir, file), 'w') as f:\n                f.write(\"Dummy content\")\n    def tearDown(self):\n        # Clean up by removing directories\n        shutil.rmtree(self.source_dir)\n        shutil.rmtree(self.target_dir)\n    def test_valid_files_moved(self):\n        # Test that all valid files are moved\n        moved_files_count = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(moved_files_count, len(self.valid_files), \"Not all valid files were moved.\")\n    def test_invalid_files_not_moved(self):\n        # Test that invalid files are not moved\n        task_func(self.source_dir, self.target_dir)\n        remaining_files = os.listdir(self.source_dir)\n        self.assertListEqual(sorted(remaining_files), sorted(self.invalid_files), \"Invalid files were moved.\")\n    def test_no_files_to_move(self):\n        # Test with no files matching the pattern\n        # Clean source directory from valid files\n        for file in self.valid_files:\n            os.remove(os.path.join(self.source_dir, file))\n        moved_files_count = task_func(self.source_dir, self.target_dir)\n        self.assertEqual(moved_files_count, 0, \"Files were moved when none should have.\")\n    def test_pattern_specificity(self):\n        # Test with a more specific pattern that should only match .docx files\n        moved_files_count = task_func(self.source_dir, self.target_dir, r'\\b[A-Za-z0-9]+\\.(docx)\\b')\n        expected_count = sum(1 for f in self.valid_files if f.endswith('.docx'))\n        self.assertEqual(moved_files_count, expected_count, \"Pattern did not correctly filter files.\")\n    def test_target_directory_creation(self):\n        # Test that the target directory is created if it does not exist\n        shutil.rmtree(self.target_dir)  # Ensure target directory is deleted\n        moved_files_count = task_func(self.source_dir, self.target_dir)\n        self.assertTrue(os.path.exists(self.target_dir), \"Target directory was not created.\")\n        self.assertEqual(moved_files_count, len(self.valid_files), \"Files were not moved correctly when target directory was initially absent.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the frequency of each value of the given attribute from a list of objects. This function returns a pandas Dataframe containing frequency count of the specified attribute from the objects in the list. The DataFrame consist of two columns ('attribute' and 'count'), which contain the attribute and its specific count respectively. If no attributes are found, an empty DataFrame is returned. >>> class ExampleObject: ...     def __init__(self, animal, shape): ...         self.animal = animal ...         self.shape = shape ... >>> obj_list = [ExampleObject('tiger', 'Square'), ExampleObject('leopard', 'Circle'), ExampleObject('cat', 'Rectangle'), ExampleObject('elephant', 'Rectangle')] >>> count = task_func(obj_list, 'shape') >>> print(count) attribute  count 0     Square      1 1     Circle      1 2  Rectangle      2\nThe function should output with:\n    collections.Counter: The frequency count of each value of the attribute.\nYou should write self-contained code starting with:\n```\nimport collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n```",
        "gt": "import collections\nimport pandas as pd\ndef task_func(obj_list, attr):\n    attr_values = [getattr(obj, attr) for obj in obj_list]\n    count = collections.Counter(attr_values)\n    if len(count.keys()) == 0:\n        return pd.DataFrame()\n\n    df = pd.DataFrame.from_dict(count, orient='index').reset_index()\n    df = df.rename(columns={'index':'attribute', 0:'count'})\n    return df",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    class ExampleObject:\n        def __init__(self, color, shape):\n            self.color = color\n            self.shape = shape\n    def test_case_1(self):\n        obj_list = [\n            self.ExampleObject('Red', 'Square'),\n            self.ExampleObject('Green', 'Circle'),\n            self.ExampleObject('Red', 'Rectangle')\n        ]\n        result = task_func(obj_list, 'color')\n        expected = pd.DataFrame({\n            'attribute': ['Red', 'Green'],\n            'count': [2, 1]\n        })\n        pd.testing.assert_frame_equal(result.sort_index(), expected)\n    def test_case_2(self):\n        obj_list = [\n            self.ExampleObject('Red', 'Square'),\n            self.ExampleObject('Green', 'Circle'),\n            self.ExampleObject('Red', 'Square')\n        ]\n        result = task_func(obj_list, 'shape')\n        expected = pd.DataFrame({\n            'attribute': ['Square', 'Circle'],\n            'count': [2, 1]\n        })\n        pd.testing.assert_frame_equal(result.sort_index(), expected)\n    def test_case_3(self):\n        obj_list = []\n        result = task_func(obj_list, 'color')\n        self.assertTrue(result.empty)\n    def test_case_4(self):\n        obj_list = [\n            self.ExampleObject('Red', 'Square'),\n            self.ExampleObject('Red', 'Square'),\n            self.ExampleObject('Red', 'Square')\n        ]\n        result = task_func(obj_list, 'color')\n        expected = pd.DataFrame({\n            'attribute': ['Red'],\n            'count': [3]\n        })\n        pd.testing.assert_frame_equal(result.sort_index(), expected)\n    def test_case_5(self):\n        obj_list = [\n            self.ExampleObject('Red', 'Square'),\n            self.ExampleObject('Green', 'Circle'),\n            self.ExampleObject('Blue', 'Triangle')\n        ]\n        result = task_func(obj_list, 'shape')\n        expected = pd.DataFrame({\n            'attribute': ['Square', 'Circle', 'Triangle'],\n            'count': [1, 1, 1]\n        })\n        pd.testing.assert_frame_equal(result.sort_index(), expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts and converts data from a specified HTML table based on the given 'table_id' on a webpage into a Pandas DataFrame. If the table is present but contains no data rows (i.e., no <tr> tags), the function returns an empty DataFrame. Example of ValueError: >>> task_func('https://example.com/data.html', 'nonexistent_table') ValueError: Table with the specified ID not found. Example of empty table: >>> task_func('https://example.com/emptytable.html', 'empty_table') DataFrame: Empty DataFrame Columns: [] Index: []\nNote that: Notes: The function raises an HTTPError for unsuccessful HTTP requests, which includes scenarios like network problems or non-2xx HTTP responses. A ValueError is raised specifically when the HTML table with the specified ID is not present in the webpage's content, indicating either an incorrect ID or the absence of the table. If the located table has no rows, indicated by the absence of <tr> tags, an empty DataFrame is returned. This is useful for handling tables that are structurally present in the HTML but are devoid of data.\nThe function should raise the exception for: requests.exceptions.HTTPError: If the HTTP request fails (e.g., due to connection issues or a non-successful status code like 404 or 500). ValueError: If no table with the specified 'table_id' is found on the webpage. The error message will be \"Table with the specified ID not found.\"\nThe function should output with:\n    df (pd.DataFrame): A DataFrame containing the data extracted from the specified HTML table.\n    If the table is found but has no rows (<tr> elements), an empty DataFrame is returned.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n```",
        "gt": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\ndef task_func(url, table_id):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n    except requests.exceptions.HTTPError as e:\n        raise e\n\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    table = soup.find(\"table\", {\"id\": table_id})\n\n    if table is None:\n        raise ValueError(\"Table with the specified ID not found.\")\n\n    # Check if the table is empty (no rows)\n    if not table.find_all(\"tr\"):\n        return pd.DataFrame()\n\n    df = pd.read_html(StringIO(str(table)))[0]\n\n    return df",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"requests.get\")\n    def test_successful_scrape(self, mock_get):\n        \"\"\"Test a successful scrape.\"\"\"\n        mock_html_content = \"\"\"\n            <html>\n            <body>\n                <table id=\"table0\">\n                    <tr><th>Name</th><th>Age</th></tr>\n                    <tr><td>Alice</td><td>25</td></tr>\n                    <tr><td>Bob</td><td>30</td></tr>\n                </table>\n            </body>\n            </html>\n        \"\"\"\n        # Mock the response\n        mock_response = MagicMock()\n        mock_response.text = mock_html_content\n        mock_get.return_value = mock_response\n        # Test\n        df = task_func(\"http://example.com\", \"table0\")\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertGreater(len(df), 0)\n        self.assertIn(\"Name\", df.columns)\n        self.assertIn(\"Age\", df.columns)\n    @patch(\"requests.get\")\n    def test_table_not_found(self, mock_get):\n        \"\"\"Test table not found.\"\"\"\n        mock_html_content = \"<html><body></body></html>\"\n        mock_response = MagicMock()\n        mock_response.text = mock_html_content\n        mock_get.return_value = mock_response\n        # Test\n        with self.assertRaises(ValueError):\n            task_func(\"http://example.com\", \"non_existent_table\")\n    @patch(\"requests.get\")\n    def test_network_error(self, mock_get):\n        \"\"\"Test network error.\"\"\"\n        mock_get.side_effect = requests.exceptions.ConnectionError\n        with self.assertRaises(requests.exceptions.ConnectionError):\n            task_func(\"http://example.com\", \"table0\")\n    @patch(\"requests.get\")\n    def test_http_error(self, mock_get):\n        \"\"\"Test HTTP error.\"\"\"\n        mock_get.return_value.raise_for_status.side_effect = (\n            requests.exceptions.HTTPError\n        )\n        # Test\n        with self.assertRaises(requests.exceptions.HTTPError):\n            task_func(\"http://example.com\", \"table0\")\n    @patch(\"requests.get\")\n    def test_empty_table(self, mock_get):\n        # Mock HTML content with an empty table\n        mock_html_content = \"\"\"\n            <html>\n            <body>\n                <table id=\"table0\"></table>\n            </body>\n            </html>\n        \"\"\"\n        # Mock the response\n        mock_response = MagicMock()\n        mock_response.text = mock_html_content\n        mock_get.return_value = mock_response\n        # Test\n        df = task_func(\"http://example.com\", \"table0\")\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(len(df), 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Downloads and extracts a zip file from a specified URL.\nNote that: the status message will contain \"Error\" when: Network-related exceptions are raised if the download fails. File-related exceptions are raised if there is an issue with file handling or extraction.\nThe function should output with:\n    tuple: A tuple containing a status message and a list of filenames in the unzipped directory, or an empty list if extraction fails.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n```",
        "gt": "import requests\nfrom pathlib import Path\nimport zipfile\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\ndef task_func(url, filename):\n    try:\n        # Download the file\n        response = requests.get(url, stream=True, timeout=5)\n        if response.status_code == 200:\n            filepath = DOWNLOAD_DIR / filename\n            filepath.parent.mkdir(parents=True, exist_ok=True)\n\n            with open(filepath, \"wb\") as handle:\n                for data in response.iter_content():\n                    handle.write(data)\n\n            # Unzip the file\n            zip_dir = ZIP_DIR / filename[:-4]\n            zip_dir.mkdir(parents=True, exist_ok=True)\n\n            with zipfile.ZipFile(filepath, \"r\") as zip_ref:\n                zip_ref.extractall(zip_dir)\n\n            return \"Download and extraction successful\", [\n                file.name for file in zip_dir.iterdir()\n            ]\n        return (\n            f\"Download failed: HTTP status code {response.status_code}\",\n            [],\n        )\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {e}\", []\n    except zipfile.BadZipFile as e:\n        return f\"Error: Invalid zip file: {e}\", []",
        "test": "import unittest\nfrom unittest.mock import MagicMock, patch\nimport shutil\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def test_successful_download_and_extraction(self):\n        \"\"\"Test a successful download and extraction.\"\"\"\n        result = task_func(\n            # \"https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-zip-file.zip\",\n            \"https://drive.google.com/uc?export=download&id=1MRyf-bpPYb7hT3Oj4ZK35O-fzM2_HZ7A\",\n            \"test.zip\",\n        )\n        self.assertIn(\"Download and extraction successful\", result[0])\n        self.assertTrue(len(result[1]) > 0)\n    @patch(\"requests.get\")\n    def test_invalid_url(self, mock_get):\n        \"\"\"Test an invalid URL.\"\"\"\n        mock_get.return_value.status_code = 404\n        result = task_func(\"http://invalidurl.com/file.zip\", \"test.zip\")\n        self.assertIn(\"Download failed\", result[0])\n        self.assertEqual(result[1], [])\n    @patch(\"requests.get\")\n    def test_non_200_http_response(self, mock_get):\n        \"\"\"Test a non-200 HTTP response.\"\"\"\n        mock_get.return_value.status_code = 404\n        result = task_func(\"http://example.com/file.zip\", \"test.zip\")\n        self.assertIn(\"Download failed\", result[0])\n        self.assertEqual(result[1], [])\n    @patch(\"requests.get\")\n    def test_network_error(self, mock_get):\n        \"\"\"Test a network error.\"\"\"\n        mock_get.side_effect = requests.exceptions.ConnectionError\n        result = task_func(\"http://example.com/file.zip\", \"test.zip\")\n        self.assertIn(\"Error\", result[0])\n        self.assertEqual(result[1], [])\n    @patch(\"builtins.open\", new_callable=MagicMock)\n    @patch(\"requests.get\")\n    @patch(\"zipfile.ZipFile\")\n    def test_corrupted_zip_file(self, mock_zip, mock_get, mock_open):\n        \"\"\"Test a corrupted zip file.\"\"\"\n        # Mock the response to simulate a successful download\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_response.iter_content = MagicMock(return_value=[b\"data\"])\n        mock_get.return_value = mock_response\n        # Mock the zipfile to raise a BadZipFile exception\n        mock_zip.side_effect = zipfile.BadZipFile\n        # Run the function\n        result = task_func(\"http://example.com/corrupted.zip\", \"corrupted.zip\")\n        # Check that the result indicates an error related to zip file extraction\n        self.assertIn(\"Error\", result[0])\n        self.assertIsInstance(result[1], list)\n        self.assertEqual(len(result[1]), 0)\n    @patch(\"requests.get\")\n    def test_request_exception(self, mock_get):\n        \"\"\"Test a network error.\"\"\"\n        # Mock the requests.get to raise a RequestException\n        mock_get.side_effect = requests.exceptions.RequestException\n        # Run the function with a sample URL and filename\n        result = task_func(\"http://example.com/file.zip\", \"test.zip\")\n        # Check that the result indicates an error related to the network request\n        self.assertIn(\"Error\", result[0])\n        self.assertIsInstance(result[1], list)\n        self.assertEqual(len(result[1]), 0)\n    def tearDown(self):\n        shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)\n        shutil.rmtree(ZIP_DIR, ignore_errors=True)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a histogram of scores and a boxplot of scores by country from a pandas DataFrame. It considers only unique names for both plots. >>> print(task_func(\"not a dataframe\")) Invalid input\nNote that: The function would return \"Invalid input\" string if the input is invalid (e.g., does not contain the required 'Name' key). The histogram of scores has a title \"Histogram of Scores\". The boxplot of scores has a title \"Boxplot of Scores by Country\".\nThe function should output with:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and boxplot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n# Constants\nCOLUMNS = ['Name', 'Age', 'Country', 'Score']\ndef task_func(df):\n    \n    if not isinstance(df, pd.DataFrame):\n        return \"Invalid input\"\n    \n    try:\n        df = df.drop_duplicates(subset='Name')\n\n        fig = plt.figure(figsize=(10, 5))\n\n        plt.subplot(1, 2, 1)\n        sns.histplot(df['Score'], bins=10)\n        plt.title('Histogram of Scores')\n\n        plt.subplot(1, 2, 2)\n        sns.boxplot(x='Country', y='Score', data=df)\n        plt.title('Boxplot of Scores by Country')\n\n        plt.tight_layout()\n\n        return fig\n    except Exception as e:\n        return \"Invalid input\"",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_valid_dataframe(self):\n        # Test with a valid DataFrame with unique and duplicate 'Name' entries\n        data = pd.DataFrame([\n            {'Name': 'James', 'Age': 30, 'Country': 'USA', 'Score': 85},\n            {'Name': 'James', 'Age': 35, 'Country': 'USA', 'Score': 90},\n            {'Name': 'Lily', 'Age': 28, 'Country': 'Canada', 'Score': 92},\n            {'Name': 'Sam', 'Age': 40, 'Country': 'UK', 'Score': 88},\n            {'Name': 'Nick', 'Age': 50, 'Country': 'Australia', 'Score': 80}\n        ])\n        fig = task_func(data)\n        # Retrieve axes from the figure\n        axes = fig.get_axes()\n        # Assert titles\n        self.assertEqual(axes[0].get_title(), 'Histogram of Scores')\n        self.assertEqual(axes[1].get_title(), 'Boxplot of Scores by Country')\n        \n        # Assert data points in the boxplot\n        for idx, country in enumerate(data['Country']):\n            # Filter collection corresponding to the country\n            for collection in axes[1].collections:\n                if collection.get_label() == country:\n                    self.assertIn(data['Score'][idx], collection.get_offsets()[:, 1])\n                    break  # Exit inner loop once found\n    def test_empty_dataframe(self):\n        # Test with an empty DataFrame\n        data = pd.DataFrame([])\n        result = task_func(data)\n        self.assertEqual(result, \"Invalid input\")\n    def test_missing_columns(self):\n        # Test with a DataFrame missing required columns\n        data = pd.DataFrame([\n            {'Name': 'James', 'Age': 30, 'Score': 85},\n            {'Name': 'Lily', 'Age': 28, 'Score': 92}\n        ])\n        result = task_func(data)\n        self.assertEqual(result, \"Invalid input\")\n    def test_non_dataframe_input(self):\n        # Test with a non-DataFrame input\n        data = \"not a dataframe\"\n        result = task_func(data)\n        self.assertEqual(result, \"Invalid input\")\n    def test_plot_attributes(self):\n        # Test if the plot contains the correct title, x-axis, y-axis, and data points\n        data = pd.DataFrame([\n            {'Name': 'James', 'Age': 30, 'Country': 'USA', 'Score': 85},\n            {'Name': 'Nick', 'Age': 50, 'Country': 'Australia', 'Score': 80}\n        ])\n        fig = task_func(data)\n        # Retrieve axes from the figure\n        axes = fig.get_axes()\n        # Assert titles\n        self.assertEqual(axes[0].get_title(), 'Histogram of Scores')\n        self.assertEqual(axes[1].get_title(), 'Boxplot of Scores by Country')\n        \n        # Assert data points in the boxplot\n        for idx, country in enumerate(data['Country']):\n            # Filter collection corresponding to the country\n            for collection in axes[1].collections:\n                if collection.get_label() == country:\n                    self.assertIn(data['Score'][idx], collection.get_offsets()[:, 1])\n                    break  # Exit inner loop once found",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts logging information such as message type, timestamp, and the message itself from a log file and stores the data in a CSV format. This utility is ideal for converting plain text logs into a more s tructured format that can be easily analyzed. The log is the format of 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE'.\nThe function should raise the exception for: ValueError: If the timestamp in any log entry is invalid or if no valid log entries are found.\nThe function should output with:\n    str: The file path to the newly created CSV file which contains the structured log data.\nYou should write self-contained code starting with:\n```\nimport re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n```",
        "gt": "import re\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(log_file):\n    log_pattern = r'(ERROR|INFO): \\[\\s*(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\s*\\] - (.*)'\n    parsed_data = []\n\n    with open(log_file, 'r') as file:\n        for line in file:\n            line = line.strip()\n            match = re.match(log_pattern, line)\n            if match:\n                log_type, timestamp, message = match.groups()\n                # Validate timestamp\n                try:\n                    datetime.strptime(timestamp, \"%Y-%m-%d %H:%M:%S\")\n                except ValueError:\n                    raise ValueError(f\"Invalid timestamp format: {timestamp}\")\n                parsed_data.append([log_type, timestamp, message.strip()])\n\n    if not parsed_data:\n        raise ValueError(\"No valid log entries found.\")\n\n    df = pd.DataFrame(parsed_data, columns=['Type', 'Timestamp', 'Message'])\n    output_csv_path = 'log_data.csv'\n    df.to_csv(output_csv_path, index=False)\n    return output_csv_path",
        "test": "import unittest\nimport os\nimport pandas as pd\nfrom unittest.mock import mock_open, patch\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.sample_log_file = 'test_server.log'\n        with open(self.sample_log_file, 'w') as log_file:\n            log_file.write(\"ERROR: [2023-03-23 15:00:00] - Sample error message\\n\")\n            log_file.write(\"INFO: [2023-03-23 15:05:00] - Sample info message\\n\")\n    def tearDown(self):\n        # Clean up: Remove the generated CSV file if it exists\n        if os.path.exists('log_data.csv'):\n            os.remove('log_data.csv')\n        if os.path.exists(self.sample_log_file):\n            os.remove(self.sample_log_file)\n    def test_log_to_csv_content(self):\n        expected_df = pd.DataFrame({\n            'Type': ['ERROR', 'INFO'],\n            'Timestamp': ['2023-03-23 15:00:00', '2023-03-23 15:05:00'],\n            'Message': ['Sample error message', 'Sample info message']\n        })\n        generated_csv_path = task_func(self.sample_log_file)\n        self.assertTrue(os.path.exists(generated_csv_path), \"CSV file was not created.\")\n        generated_df = pd.read_csv(generated_csv_path)\n        pd.testing.assert_frame_equal(expected_df, generated_df)\n    def test_no_log_entries(self):\n        with patch('builtins.open', mock_open(read_data=\"\")) as mock_file:\n            with self.assertRaises(ValueError):\n                task_func('empty.log')\n    def test_incorrect_format_log(self):\n        incorrect_format = \"Wrong format line without proper log prefix\"\n        with patch('builtins.open', mock_open(read_data=incorrect_format)):\n            with self.assertRaises(ValueError):\n                task_func('incorrect.log')\n    def test_partial_correct_log(self):\n        partial_log_content = \"ERROR: [2023-03-23 15:00:00] - Correct message\\nThis is not a correct log format\\n\"\n        with open(self.sample_log_file, 'w') as log_file:\n            log_file.write(partial_log_content)\n        generated_csv_path = task_func(self.sample_log_file)\n        self.assertTrue(os.path.exists(generated_csv_path), \"CSV file was not created for partial correct log.\")\n        generated_df = pd.read_csv(generated_csv_path)\n        self.assertEqual(len(generated_df), 1, \"Only one correct log entry should be parsed.\")\n    def test_malformed_timestamp(self):\n        malformed_content = \"ERROR: [2023-00-23 15:00:00] - Malformed timestamp\"\n        with patch('builtins.open', mock_open(read_data=malformed_content)):\n            with self.assertRaises(ValueError):\n                task_func('malformed.log')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Shuffle the columns of a given numpy array and train a Random Forest Classifier on the shuffled data.\nThe function should output with:\n    sklearn.ensemble.RandomForestClassifier: A trained Random Forest Classifier on the shuffled feature data.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\ndef task_func(\n    feature_array,\n    target_array,\n    feature_names=[\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"],\n    target_name=\"target\",\n    seed=None,\n):\n    if seed is not None:\n        np.random.seed(seed)\n\n    shuffled_array = feature_array.copy()\n    np.random.shuffle(shuffled_array.T)\n\n    df = pd.DataFrame(shuffled_array, columns=feature_names)\n    df[target_name] = target_array\n\n    clf = RandomForestClassifier()\n    clf.fit(df[feature_names], df[target_name])\n\n    return clf",
        "test": "import unittest\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        array = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n        target = np.array([0, 1])\n        clf = task_func(array, target, seed=42)\n        self.assertIsInstance(clf, RandomForestClassifier)\n        self.assertTrue(len(clf.feature_importances_) > 0)\n        self.assertEqual(set(np.unique(target)), set(clf.classes_))\n        with warnings.catch_warnings():\n            # Temporarily suppress warning - clf prefers named array\n            warnings.simplefilter(\"ignore\", category=UserWarning)\n            predictions = clf.predict(array)\n        np.testing.assert_array_equal(\n            predictions,\n            target,\n            \"The model's predictions do not match the expected target values.\",\n        )\n    def test_case_2(self):\n        # Test identical features\n        array = np.ones((10, 5))\n        target = np.zeros(10)\n        clf = task_func(array, target)\n        self.assertTrue(len(clf.feature_importances_) > 0)\n    def test_case_3(self):\n        # Test all unique targets\n        array = np.array([[i] * 5 for i in range(10)])\n        target = np.arange(10)\n        clf = task_func(array, target)\n        self.assertEqual(len(np.unique(target)), len(clf.classes_))\n    def test_case_4(self):\n        # Test random seed reproducibility\n        np.random.seed(0)\n        array = np.random.rand(10, 5)\n        target = np.random.randint(0, 2, 10)\n        clf1 = task_func(array, target, seed=42)\n        clf2 = task_func(array, target, seed=42)\n        self.assertEqual(\n            clf1.feature_importances_.tolist(), clf2.feature_importances_.tolist()\n        )\n    def test_case_5(self):\n        # Test negative features\n        array = np.array([[-1, -2, -3, -4, -5], [-6, -7, -8, -9, -10]])\n        target = np.array([0, 1])\n        clf = task_func(array, target)\n        self.assertTrue(len(clf.feature_importances_) > 0)\n    def test_case_6(self):\n        # Test single feature array\n        array = np.arange(10).reshape(-1, 1)\n        target = np.array([0, 1] * 5)\n        feature_names = [\"f1\"]\n        clf = task_func(array, target, feature_names)\n        self.assertTrue(len(clf.feature_importances_) > 0)\n    def test_case_7(self):\n        # Test exception handling for incompatible shapes among arrays\n        array = np.array([[1, 2, 3], [4, 5, 6]])\n        target = np.array([0, 1, 2])\n        with self.assertRaises(ValueError):\n            task_func(array, target)\n    def test_case_8(self):\n        # Test exception handling for incompatible feature_names vs array shape\n        array = np.array([[1, 2, 3], [4, 5, 6]])  # 2x3 array\n        target = np.array([0, 1])\n        incorrect_feature_names = [\"f1\", \"f2\"]  # Only 2 names for a 3-column array\n        with self.assertRaises(ValueError):\n            task_func(array, target, feature_names=incorrect_feature_names)\n    def test_case_9(self):\n        # Test custom feature names\n        array = np.array([[7, 8], [9, 10]])\n        target = np.array([0, 1])\n        custom_feature_names = [\"custom1\", \"custom2\"]\n        clf = task_func(array, target, feature_names=custom_feature_names)\n        self.assertEqual(clf.feature_importances_.size, len(custom_feature_names))\n    def test_case_10(self):\n        # Test custom target name\n        array = np.array([[11, 12, 13, 14, 15], [16, 17, 18, 19, 20]])\n        target = np.array([1, 0])\n        custom_target_name = \"custom_target\"\n        clf = task_func(array, target, target_name=custom_target_name)\n        # Check if the model was trained successfully\n        self.assertTrue(len(clf.feature_importances_) > 0)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Aggregate the values of the same keys from a nested dictionary and remove the \"ele\" key. For each remaining key take the sine.\nThe function should output with:\n    dict: A dictionary with aggregated values.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport math\ndef task_func(nested_dict):\n```",
        "gt": "from collections import Counter\nimport math\ndef task_func(nested_dict):\n    counter = Counter()\n    for sub_dict in nested_dict.values():\n        counter.update(sub_dict)\n\n    counter.pop('ele', None)\n\n    return {k: math.sin(v) for k,v in counter.items()}",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(task_func({\n            'dict1': {'ale': 1, 'ele': 2, 'ile': 3},\n            'dict2': {'ele': 4, 'ole': 5, 'ule': 6},\n            'dict3': {'ile': 7, 'ale': 8, 'ele': 9}\n        }), {'ale': math.sin(9), 'ile': math.sin(10), 'ole': math.sin(5), 'ule': math.sin(6)})\n    def test_case_2(self):\n        self.assertEqual(task_func({\n            'aaa': {'zzz': 1, 'yyy': 2, 'xxx': 3},\n            'bbb': {'yyy': 4, 'xxx': 5, 'www': 6},\n            'ccc': {'xxx': 7, 'www': 8, 'ele': 9},\n            'ddd': {'www': 10, 'ele': 11, 'zzz': 12}\n        }), {'zzz': math.sin(13), 'yyy': math.sin(6), 'xxx': math.sin(15), 'www': math.sin(24)})\n    def test_case_3(self):\n        self.assertEqual(task_func({\n            'x': {'a': 1, 'b': 2, 'c': 3},\n            'y': {'b': 4, 'c': 5, 'd': 6},\n            'z': {'c': 7, 'd': 8, 'e': 9}\n        }), {'a': math.sin(1), 'b': math.sin(6), 'c': math.sin(15), 'd': math.sin(14), 'e': math.sin(9)})\n    def test_case_4(self):\n        self.assertEqual(task_func({\n            'x': {'a': 1, 'b': 2, 'c': 3},\n            'y': {'b': 4, 'c': 5, 'd': 6},\n            'z': {'c': 7, 'd': 8, 'ele': 9}\n        }), {'a': math.sin(1), 'b': math.sin(6), 'c': math.sin(15), 'd': math.sin(14)})\n    def test_case_5(self):\n        self.assertEqual(task_func({\n            1: {1: 1, 2: 2, 3: 3},\n            2: {2: 4, 3: 5, 4: 6},\n            3: {3: 7, 4: 8, 5: 9}\n        }), {1: math.sin(1), 2: math.sin(6), 3: math.sin(15), 4: math.sin(14), 5: math.sin(9)})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a circle with a given radius on the polar chart 'ax' and set radial ticks. This function manipulates plot data using matplotlib.\nNote that: If the radius is negative this function will raise ValueError. If 'ax' is not a polar plot this function will raise TypeError.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The modified Axes object with the circle plotted.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(ax, radius):\n    if radius < 0:\n        raise ValueError('Radius must be non-negative')\n    if not isinstance(ax, plt.PolarAxes):\n        raise TypeError('ax must be a polar plot')\n\n    theta = np.linspace(0, 2 * np.pi, 1000)\n    ax.plot(theta, radius * np.ones_like(theta))\n    ax.set_rlabel_position(radius * 45)\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_polar_plot(self):\n        '''Test if the function plots on a polar plot.'''\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        result_ax = task_func(ax, 1.0)\n        self.assertIsInstance(result_ax, plt.PolarAxes)\n        plt.close()\n    def test_circle_radius(self):\n        '''Test if the circle is drawn with the correct radius.'''\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        radius = 2.0\n        result_ax = task_func(ax, radius)\n        for line in result_ax.get_lines():\n            self.assertTrue(np.allclose(line.get_ydata(), radius))\n        plt.close()\n    def test_negative_radius(self):\n        '''Test handling of negative radius.'''\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        with self.assertRaises(ValueError):\n            task_func(ax, -1.0)\n        plt.close()\n    def test_non_polar_plot(self):\n        '''Test handling of non-polar plot input.'''\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        with self.assertRaises(TypeError):\n            task_func(ax, 1.0)\n        plt.close()\n    def test_zero_radius(self):\n        '''Test handling of zero radius.'''\n        fig = plt.figure()\n        ax = fig.add_subplot(111, polar=True)\n        radius = 0.0\n        result_ax = task_func(ax, radius)\n        for line in result_ax.get_lines():\n            self.assertTrue(np.allclose(line.get_ydata(), radius))\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a random walk of a specified length. A random walk is a path that consists of a series of random steps on some mathematical space. In this case, the steps are either +1 or -1, chosen with equal probability.\nThe function should raise the exception for: ValueError: If `length` is negative.\nThe function should output with:\n    np.array: A numpy array representing the positions of the walk at each step. Starts at 0.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n```",
        "gt": "import numpy as np\nimport random\ndef task_func(length=10000, seed=0):\n    if length < 0:\n        raise ValueError(\"length must be a non-negative integer\")\n    random.seed(seed)\n    steps = [1 if random.random() > 0.5 else -1 for _ in range(length)]\n    walk = np.cumsum([0] + steps)  # Starts at 0\n    return walk",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        random.seed(42)  # Setting seed for reproducibility\n    def test_default_length(self):\n        walk = task_func(seed=42)\n        self.assertEqual(len(walk), 10001)  # Includes starting point\n    def test_custom_length(self):\n        walk = task_func(5000, seed=42)\n        self.assertEqual(len(walk), 5001)  # Includes starting point\n    def test_first_step_zero(self):\n        walk = task_func(1, seed=42)\n        self.assertEqual(walk[0], 0)  # First position should be 0\n    def test_negative_length(self):\n        with self.assertRaises(ValueError):\n            task_func(-1)\n    def test_output_type(self):\n        walk = task_func(5, seed=42)\n        self.assertEqual(walk.tolist(), [0, 1, 0, -1, -2, -1])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Normalizes specified columns of a DataFrame using min-max scaling. Constants: - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\nThe function should output with:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndef task_func(data, columns):\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    \n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n\n    return df_copy",
        "test": "import unittest\nimport pandas as pd\nfrom pandas.testing import assert_frame_equal\nfrom sklearn.preprocessing import MinMaxScaler\nimport sys\n# Import the function task_func from the refined_function.py file\nsys.path.append('/mnt/data/')\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input: DataFrame with two columns 'a' and 'b' with integer values\n        # Output: DataFrame with 'a' and 'b' normalized\n        data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n        expected_df = pd.DataFrame({'a': [0.0, 0.5, 1.0], 'b': [0.0, 0.5, 1.0]})\n        result_df = task_func(data, ['a', 'b'])\n        assert_frame_equal(expected_df, result_df)\n    def test_case_2(self):\n        # Input: DataFrame with one column 'x' with float values\n        # Output: DataFrame with 'x' normalized\n        data = {'x': [1.1, 2.2, 3.3]}\n        expected_df = pd.DataFrame({'x': [0.0, 0.5, 1.0]})\n        result_df = task_func(data, ['x'])\n        assert_frame_equal(expected_df, result_df)\n    def test_case_3(self):\n        # Input: DataFrame with multiple columns, but only one column 'y' to normalize\n        # Output: DataFrame with 'y' normalized, other columns unchanged\n        data = {'y': [10, 20, 30], 'z': [1, 2, 3]}\n        expected_df = pd.DataFrame({'y': [0.0, 0.5, 1.0], 'z': [1, 2, 3]})\n        result_df = task_func(data, ['y'])\n        assert_frame_equal(expected_df, result_df)\n    def test_case_4(self):\n        # Input: DataFrame with negative numbers in column 'm'\n        # Output: DataFrame with 'm' normalized\n        data = {'m': [-1, 0, 1]}\n        expected_df = pd.DataFrame({'m': [0.0, 0.5, 1.0]})\n        result_df = task_func(data, ['m'])\n        assert_frame_equal(expected_df, result_df)\n    def test_case_5(self):\n        # Input: DataFrame with all zeros in column 'n'\n        # Output: DataFrame with 'n' normalized (all zeros)\n        data = {'n': [0, 0, 0]}\n        expected_df = pd.DataFrame({'n': [0.0, 0.0, 0.0]})\n        result_df = task_func(data, ['n'])\n        assert_frame_equal(expected_df, result_df)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Inspects a given function 'f' and returns its specifications, including the function's name, whether it is a lambda function, its arguments, defaults, and annotations. This method utilizes the inspect and types modules to introspect function properties.\nThe function should output with:\n    dict: A dictionary containing details about the function, such as its name, if it's a lambda function,\n    arguments, default values, and annotations.\nYou should write self-contained code starting with:\n```\nimport inspect\nimport types\ndef task_func(f):\n```",
        "gt": "import inspect\nimport types\ndef task_func(f):\n    spec = inspect.getfullargspec(f)\n\n    return {\n        'function_name': f.__name__,\n        'is_lambda': isinstance(f, types.LambdaType),\n        'args': spec.args,\n        'defaults': spec.defaults,\n        'annotations': spec.annotations\n    }",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_regular_function(self):\n        def test_func(a, b=1): pass\n        result = task_func(test_func)\n        self.assertEqual(result['function_name'], 'test_func')\n        self.assertListEqual(result['args'], ['a', 'b'])\n        self.assertTupleEqual(result['defaults'], (1,))\n    def test_lambda_function(self):\n        lambda_func = lambda x, y=2: x + y\n        result = task_func(lambda_func)\n        self.assertTrue(result['is_lambda'])\n    def test_no_arguments(self):\n        def test_func(): pass\n        result = task_func(test_func)\n        self.assertEqual(len(result['args']), 0)\n    def test_annotations(self):\n        def test_func(a: int, b: str = 'hello') -> int: pass\n        result = task_func(test_func)\n        self.assertIn('a', result['annotations'])\n        self.assertIn('return', result['annotations'])\n    def test_defaults_none(self):\n        def test_func(a, b=None): pass\n        result = task_func(test_func)\n        self.assertIsNone(result['defaults'][0])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Stops all running processes with a specific name.\nNote that: The function sends a termination signal to the processes and waits for 1 second. There is no guarantee that all processes will have terminated within this time.\nThe function should output with:\n    int: The number of processes stopped. If no processes are found, returns 0.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n```",
        "gt": "import subprocess\nimport os\nimport signal\nimport time\ndef task_func(process_name: str) -> int:\n    # Find all processes with the given name, and get their PIDs\n    try:\n        pids = subprocess.check_output(['pgrep', '-f', process_name]).decode().split('\\n')[:-1] \n    except subprocess.CalledProcessError:\n        pids = []\n\n    # Send SIGTERM signal to each process\n    for pid in pids:\n        os.kill(int(pid), signal.SIGTERM)\n\n    # Wait for processes to stop\n    time.sleep(1)\n\n    return len(pids)",
        "test": "import unittest\nfrom unittest.mock import patch\nimport doctest\nclass TestCases(unittest.TestCase):\n    @patch('subprocess.check_output')\n    @patch('os.kill')\n    def test_case_1(self, mock_os_kill, mock_subprocess_check_output):\n        # Mock the subprocess output to simulate 3 processes with the name 'python'\n        mock_subprocess_check_output.return_value = b'1234\\n5678\\n91011\\n'\n        \n        result = task_func('python')\n        self.assertEqual(result, 3)\n    @patch('subprocess.check_output')\n    @patch('os.kill')\n    def test_case_2(self, mock_os_kill, mock_subprocess_check_output):\n        # Mock the subprocess output to simulate no processes with the name 'java'\n        mock_subprocess_check_output.return_value = b''\n        \n        result = task_func('java')\n        self.assertEqual(result, 0)\n    @patch('subprocess.check_output')\n    @patch('os.kill')\n    def test_case_3(self, mock_os_kill, mock_subprocess_check_output):\n        # Mock the subprocess output to simulate 2 processes with the name 'node'\n        mock_subprocess_check_output.return_value = b'1234\\n5678\\n'\n        \n        result = task_func('node')\n        self.assertEqual(result, 2)\n    @patch('subprocess.check_output')\n    @patch('os.kill')\n    def test_case_4(self, mock_os_kill, mock_subprocess_check_output):\n        # Mock the subprocess output to simulate 1 process with the name 'ruby'\n        mock_subprocess_check_output.return_value = b'1234\\n'\n        \n        result = task_func('ruby')\n        self.assertEqual(result, 1)\n    @patch('subprocess.check_output')\n    @patch('os.kill')\n    def test_case_5(self, mock_os_kill, mock_subprocess_check_output):\n        # Mock the subprocess output to simulate 4 processes with the name 'go'\n        mock_subprocess_check_output.return_value = b'1234\\n5678\\n91011\\n1213\\n'\n        \n        result = task_func('go')\n        self.assertEqual(result, 4)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Combine a list of dictionaries with possibly differing keys (student names) into a single dictionary, calculate the average score for each student, and return a bar chart of average student scores with student on the x-axis and average score on the y-axis. This function handles data with varying dictionary lengths and missing keys by averaging available scores, ignoring None. If there is any negative score, the function raises ValueError. Bar colors can be: 'red', 'yellow', 'green', 'blue', 'purple'.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes or None): A bar chart showing the 'Average Student Scores', with\n    'Student' on the x-axis and 'Average Score' on the y-axis.\n    If data is empty, return None.\nYou should write self-contained code starting with:\n```\nimport collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import collections\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    if not data:\n        return None\n\n    combined_dict = {}\n    for d in data:\n        for k, v in d.items():\n            if v is None:\n                continue\n            elif v < 0:\n                raise ValueError(\"Scores must be non-negative.\")\n            if k in combined_dict:\n                combined_dict[k].append(v)\n            else:\n                combined_dict[k] = [v]\n\n    avg_scores = {k: sum(v) / len(v) for k, v in combined_dict.items()}\n    avg_scores = collections.OrderedDict(sorted(avg_scores.items()))\n    labels, values = zip(*avg_scores.items())\n\n    fig, ax = plt.subplots()\n    ax.bar(labels, values, color=[\"red\", \"yellow\", \"green\", \"blue\", \"purple\"])\n    ax.set_title(\"Average Student Scores\")\n    ax.set_xlabel(\"Student\")\n    ax.set_ylabel(\"Average Score\")\n\n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def _check_plot_structure(self, ax):\n        # Assert type of returned object\n        self.assertIsInstance(ax, plt.Axes)\n        # Check plot title, x-label, y-label\n        self.assertEqual(ax.get_title(), \"Average Student Scores\")\n        self.assertEqual(ax.get_xlabel(), \"Student\")\n        self.assertEqual(ax.get_ylabel(), \"Average Score\")\n    def test_case_1(self):\n        # Test multiple users multiple data points\n        data = [\n            {\"John\": 5, \"Jane\": 10, \"Joe\": 7},\n            {\"John\": 6, \"Jane\": 8, \"Joe\": 10},\n            {\"John\": 5, \"Jane\": 9, \"Joe\": 8},\n            {\"John\": 7, \"Jane\": 10, \"Joe\": 9},\n        ]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar heights (average scores)\n        for bar, label in zip(ax.containers[0], [\"Jane\", \"Joe\", \"John\"]):\n            if label == \"Jane\":\n                self.assertEqual(bar.get_height(), 9.25)\n            elif label == \"Joe\":\n                self.assertEqual(bar.get_height(), 8.5)\n            elif label == \"John\":\n                self.assertEqual(bar.get_height(), 5.75)\n    def test_case_2(self):\n        # Test same user multiple data points\n        data = [{\"John\": 5}, {\"John\": 6}, {\"John\": 7}, {\"John\": 8}]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar heights (average scores)\n        for bar, _ in zip(ax.containers[0], [\"John\"]):\n            self.assertEqual(bar.get_height(), 6.5)\n    def test_case_3(self):\n        # Test with multiple students and one data point each\n        data = [{\"John\": 10}, {\"Jane\": 15}, {\"Joe\": 20}]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar heights match the single data point for each student\n        expected_scores = {\"Jane\": 15, \"Joe\": 20, \"John\": 10}\n        for bar, label in zip(ax.containers[0], expected_scores.keys()):\n            self.assertEqual(bar.get_height(), expected_scores[label])\n    def test_case_4(self):\n        # Test multiple users multiple data points different lengths\n        data = [{\"Jane\": 10, \"Joe\": 7}, {\"Joe\": 10}, {\"Jane\": 9, \"John\": 8}]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar heights (average scores)\n        for bar, label in zip(ax.containers[0], [\"Jane\", \"Joe\"]):\n            if label == \"Jane\":\n                self.assertAlmostEqual(bar.get_height(), 9.5, places=2)\n            elif label == \"Joe\":\n                self.assertAlmostEqual(bar.get_height(), 8.5, places=2)\n    def test_case_5(self):\n        # Test handling None\n        data = [\n            {\"Jane\": 10, \"Joe\": 7},\n            {\"Joe\": 10, \"Jane\": None, \"John\": None},\n            {\"Jane\": 9, \"John\": 8},\n            {\"Joe\": None},\n        ]\n        ax = task_func(data)\n        self._check_plot_structure(ax)  # Results should be same as test_case_4\n        for bar, label in zip(ax.containers[0], [\"Jane\", \"Joe\"]):\n            if label == \"Jane\":\n                self.assertAlmostEqual(bar.get_height(), 9.5, places=2)\n            elif label == \"Joe\":\n                self.assertAlmostEqual(bar.get_height(), 8.5, places=2)\n    def test_case_6(self):\n        # Test only one data point with multiple students\n        data = [{\"John\": 5, \"Jane\": 10}]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar heights (average scores)\n        for bar, label in zip(ax.containers[0], [\"Jane\", \"John\"]):\n            if label == \"Jane\":\n                self.assertEqual(bar.get_height(), 10)\n            elif label == \"John\":\n                self.assertEqual(bar.get_height(), 5)\n    def test_case_7(self):\n        # Test empty input\n        data = []\n        ax = task_func(data)\n        self.assertIsNone(ax)\n    def test_case_8(self):\n        # Test with data containing negative scores\n        data = [{\"John\": -2, \"Jane\": 3}, {\"John\": -4, \"Jane\": 5}]\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_case_9(self):\n        # Test with a larger dataset\n        data = [{\"John\": i} for i in range(1000)]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar height for the large dataset (average should be close to 499.5)\n        self.assertAlmostEqual(\n            next(iter(ax.containers[0])).get_height(), 499.5, places=2\n        )\n    def test_case_10(self):\n        # Test with some negative scores mixed with positive ones\n        data = [{\"John\": 5, \"Jane\": -1}, {\"John\": -2, \"Jane\": 2}]\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_case_11(self):\n        # Test with all scores as 0\n        data = [{\"John\": 0, \"Jane\": 0}, {\"John\": 0, \"Jane\": 0}]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check bar heights are 0 for all students\n        for bar, label in zip(ax.containers[0], [\"Jane\", \"John\"]):\n            self.assertEqual(bar.get_height(), 0)\n    def test_case_12(self):\n        # Test with some dictionaries being empty\n        data = [{\"John\": 5}, {}, {\"Jane\": 10}]\n        ax = task_func(data)\n        self._check_plot_structure(ax)\n        # Check that the empty dictionary does not affect the output\n        expected_scores = {\"Jane\": 10, \"John\": 5}\n        for bar, label in zip(ax.containers[0], expected_scores.keys()):\n            self.assertEqual(bar.get_height(), expected_scores[label])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert elements in 'T1' to integers and create a list of random integers. The size of the list is the sum of the integers in `T1`. Calculate and return the mean, median, and mode of the list.\nThe function should raise the exception for: statistics.StatisticsError if T1 is empty\nThe function should output with:\n    tuple: A tuple containing the mean, median, and mode of the generated list of random integers.\n    The mean and median are floats, and the mode is an integer. The calculations use the generated\n    list whose size is determined by the sum of converted integers from `T1`.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n```",
        "gt": "import numpy as np\nimport itertools\nimport random\nimport statistics\ndef task_func(T1, RANGE=100):\n    if len(T1) <= 0:\n        raise statistics.StatisticsError\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_nums = sum(flattened_list)\n    random_nums = [random.randint(0, RANGE) for _ in range(total_nums)]\n    mean = np.mean(random_nums)\n    median = np.median(random_nums)\n    mode = statistics.mode(random_nums)\n    return mean, median, mode",
        "test": "import unittest\nimport numpy as np\nimport statistics\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    @patch('random.randint', return_value=50)\n    def test_case_1(self, mock_randint):\n        \"\"\"Tests with small numbers and default range.\"\"\"\n        T1 = (('1', '2'), ('2', '3'), ('3', '4'))\n        mean, median, mode = task_func(T1)\n        total_elements = sum(map(int, sum(T1, ())))\n        self.assertEqual(total_elements, 15)  # Check if the total_elements calculation is correct\n        self.assertTrue(isinstance(mean, float))\n        self.assertTrue(isinstance(median, float))\n        self.assertTrue(isinstance(mode, int))\n    @patch('random.randint', return_value=50)\n    def test_case_2(self, mock_randint):\n        \"\"\"Tests with mid-range numbers and default range.\"\"\"\n        T1 = (('1', '2', '3'), ('4', '5'), ('6', '7', '8', '9'))\n        mean, median, mode = task_func(T1)\n        self.assertEqual(mean, 50.0)\n        self.assertEqual(median, 50.0)\n        self.assertEqual(mode, 50)\n    @patch('random.randint', return_value=25)\n    def test_case_3(self, mock_randint):\n        \"\"\"Tests with adjusted range to 50, checks new bounds.\"\"\"\n        T1 = (('1', '2', '3'), ('4', '5'), ('6', '7', '8', '9'))\n        mean, median, mode = task_func(T1, RANGE=50)\n        self.assertEqual(mean, 25.0)\n        self.assertEqual(median, 25.0)\n        self.assertEqual(mode, 25)\n    @patch('random.randint', return_value=75)\n    def test_case_4(self, mock_randint):\n        \"\"\"Tests with minimal input of single-digit numbers.\"\"\"\n        T1 = (('1',), ('2',), ('3',))\n        mean, median, mode = task_func(T1)\n        self.assertEqual(mean, 75.0)\n        self.assertEqual(median, 75.0)\n        self.assertEqual(mode, 75)\n    @patch('random.randint', return_value=10)\n    def test_case_5(self, mock_randint):\n        \"\"\"Tests with larger numbers, focusing on correct type checking.\"\"\"\n        T1 = (('10', '20', '30'), ('40', '50'), ('60', '70', '80', '90'))\n        mean, median, mode = task_func(T1)\n        self.assertEqual(mean, 10.0)\n        self.assertEqual(median, 10.0)\n        self.assertEqual(mode, 10)\n    def test_empty_input(self):\n        \"\"\"Tests behavior with an empty tuple input.\"\"\"\n        T1 = ()\n        with self.assertRaises(statistics.StatisticsError):\n            mean, median, mode = task_func(T1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Hashes the specified request data with BLAKE3 and then converts it into a hexadecimal representation. Additionally, generates an MD5 hash of the BLAKE3 hash for demonstration purposes (not for security). BLAKE3 is a cryptographic hash function that is much faster than MD5 and SHA-1, while providing high security.\nThe function should output with:\n    tuple:\n    str: The hexadecimal representation of the BLAKE3 hash of the request data.\n    str: An MD5 hash of the hexadecimal BLAKE3 representation, for demonstration.\nYou should write self-contained code starting with:\n```\nimport json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n```",
        "gt": "import json\nimport hashlib\nimport blake3\ndef task_func(req_data):\n    # Convert request data to json string\n    json_req_data = json.dumps(req_data)\n    # Hash the request data using BLAKE3 and get hexadecimal representation directly\n    blake3_hex = blake3.blake3(json_req_data.encode('utf-8')).hexdigest()\n    # Use hashlib for generating an MD5 hash of the BLAKE3 hex representation (for demonstration)\n    md5_hash = hashlib.md5(blake3_hex.encode('utf-8')).hexdigest()\n\n    return blake3_hex, md5_hash",
        "test": "import unittest\nimport blake3\nimport hashlib\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up common test data.\"\"\"\n        self.req_data = {'key': 'value'}\n        self.empty_data = {}\n        self.diff_data1 = {'data': 'test1'}\n        self.diff_data2 = {'data': 'test2'}\n    def compute_hex_md5(self):        \n        \"Helper to compute the blake3 hex and md5\"\n        # Compute BLAKE3 hash\n        json_req_data = json.dumps(self.diff_data1)\n        blake3_hex = blake3.blake3(json_req_data.encode('utf-8')).hexdigest()\n        # Compute MD5 hash of the BLAKE3 hex representation\n        md5_hash = hashlib.md5(blake3_hex.encode('utf-8')).hexdigest()\n        return blake3_hex, md5_hash\n    def test_return_types(self):\n        \"\"\"Ensure the function returns a tuple of strings.\"\"\"\n        blake3_hash, md5_hash = task_func(self.req_data)\n        self.assertIsInstance(blake3_hash, str)\n        self.assertIsInstance(md5_hash, str)\n    \n    def test_blake3_length(self):\n        \"\"\"Test the length of the BLAKE3 hash.\"\"\"\n        blake3_hash, _ = task_func(self.req_data)\n        self.assertEqual(len(blake3_hash), 64)\n    def test_md5_length(self):\n        \"\"\"Test the length of the MD5 hash.\"\"\"\n        _, md5_hash = task_func(self.req_data)\n        self.assertEqual(len(md5_hash), 32)\n    def test_empty_data_hashes(self):\n        \"\"\"Test function with empty data produces valid hashes.\"\"\"\n        blake3_hash, md5_hash = task_func(self.empty_data)\n        self.assertEqual(len(blake3_hash), 64)\n        self.assertEqual(len(md5_hash), 32)\n    def test_different_data_different_hashes(self):\n        \"\"\"Test that different data results in different BLAKE3 and MD5 hashes.\"\"\"\n        blake3_hash1, md5_hash1 = task_func(self.diff_data1)\n        blake3_hash2, md5_hash2 = task_func(self.diff_data2)\n        self.assertNotEqual(blake3_hash1, blake3_hash2)\n        self.assertNotEqual(md5_hash1, md5_hash2)\n    def test_consistent_hash_with_same_input(self):\n        \"\"\"Test that hashing the same data multiple times results in the same hashes.\"\"\"\n        blake3_hash1, md5_hash1 = task_func(self.req_data)\n        blake3_hash2, md5_hash2 = task_func(self.req_data)\n        self.assertEqual(blake3_hash1, blake3_hash2)\n        self.assertEqual(md5_hash1, md5_hash2)\n    def test_known_data_hash_correctness(self):\n        \"\"\"Test the correctness of BLAKE3 and MD5 hashes for a known input.\"\"\"\n        # Known input and expected BLAKE3 hash\n        expected_blake3_hex, expected_md5_of_blake3 = self.compute_hex_md5()\n        \n        # Compute the actual hashes\n        blake3_hex, md5_hex = task_func(self.diff_data1)\n        \n        # Verify both hashes match expectations\n        self.assertEqual(blake3_hex, expected_blake3_hex, \"BLAKE3 hash does not match expected value.\")\n        self.assertEqual(md5_hex, expected_md5_of_blake3, \"MD5 hash of BLAKE3 hash does not match expected value.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the product of a matrix \"P\" and a 3D tensor \"T\" with numpy and then visualize the result in 3D with matplotlib. The product of the matrix and tensor is based on the Einstein summation.\nNote that: This function only accepts numpy matrices/arrays.\nThe function should output with:\n    tuple:\n    result (numpy.ndarray): The product of matrix P and tensor T with shape (N, 3).\n    ax (mpl_toolkits.mplot3d.axes3d.Axes3D): The 3D visualization of the result.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(P, T):\n    if not (isinstance(P, np.ndarray) and isinstance(T, np.ndarray)):\n        raise TypeError(\"Expected inputs to be numpy arrays\")\n\n    # Compute the matrix-tensor product to ensure the result has the desired shape\n    result = np.einsum(\"ij,jkl->ik\", P, T)\n\n    # Visualize the result in 3D\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection=\"3d\")\n    ax.scatter(result[:, 0], result[:, 1], result[:, 2])\n\n    # Return the result and the 3D visualization\n    return result, ax",
        "test": "import unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.test_P = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.test_T = np.random.rand(3, 3, 3)\n    def check_result_correctness(self, P, T, result):\n        # Manually compute the expected result for the matrix-tensor product\n        expected_result = np.einsum(\"ij,jkl->ik\", P, T)\n        return np.allclose(result, expected_result)\n    def test_case_1(self):\n        # Test output visualization\n        _, ax = task_func(self.test_P, self.test_T)\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        # Test result correctness\n        result, _ = task_func(self.test_P, self.test_T)\n        self.assertTrue(self.check_result_correctness(self.test_P, self.test_T, result))\n        self.assertEqual(result.shape, (self.test_P.shape[0], 3))\n    def test_case_3(self):\n        # Test with zeros and negative values\n        P = np.array([[0, 0, 0]])\n        T = np.random.rand(3, 3, 3) - 0.5\n        result, _ = task_func(P, T)\n        self.assertTrue(np.all(result == 0))\n    def test_case_4(self):\n        # Test with non-numeric data\n        P = np.array([[\"a\", \"b\", \"c\"], [1, 2, 3]])\n        with self.assertRaises(Exception):\n            task_func(P, self.test_T)\n    def test_case_5(self):\n        # Test incompatible shapes\n        P = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(Exception):\n            task_func(P, self.test_T)\n    def test_case_6(self):\n        # Test incompatible input types\n        with self.assertRaises(Exception):\n            task_func([1, 2], [2, 1])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Filters the input DataFrame based on specified 'Age' and 'Height' conditions and applies KMeans clustering. - If the filtered dataframe has less than 3  columns, add to it a column 'Cluster' with 0 for each row. - Otherwise, do a KMeans clustering (by Age and Height) with 3 clusters and add a column 'Cluster' to the dataframe which corresponds to the cluster index of the cluster to which each row belongs to. - Plot a scatter plot of the 'Age' and 'height' and colored by the cluster indices. - the xlabel should be 'Age', the ylabel 'Height' and the title 'KMeans Clustering based on Age and Height'.\nThe function should output with:\n    DataFrame: The filtered dataframe with the new column.\n    matplotlib.axes.Axes: The Axes object of the plotted data. If no KMeans was done, returns None.\nYou should write self-contained code starting with:\n```\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n```",
        "gt": "from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\ndef task_func(df, age: int, height: int):\n    # Filter the DataFrame based on given conditions\n    selected_df = df[(df[\"Age\"] > age) & (df[\"Height\"] < height)].copy()\n\n    # Apply KMeans clustering only if there are at least 3 rows in the filtered data\n    if len(selected_df) >= 3:\n        kmeans = KMeans(n_clusters=3)\n        selected_df[\"Cluster\"] = kmeans.fit_predict(selected_df[[\"Age\", \"Height\"]])\n\n        # Visualize the clusters\n        plt.figure(figsize=(10, 5))\n        plt.scatter(selected_df[\"Age\"], selected_df[\"Height\"], c=selected_df[\"Cluster\"])\n        plt.xlabel(\"Age\")\n        plt.ylabel(\"Height\")\n        plt.title(\"KMeans Clustering based on Age and Height\")\n        ax = plt.gca()\n        return selected_df, ax\n    else:\n        selected_df[\"Cluster\"] = 0\n        return selected_df, None",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        data = {\n            \"Age\": [25, 30, 35, 40, 45],\n            \"Height\": [160, 155, 170, 165, 150],\n            \"Weight\": [60, 65, 70, 75, 80],\n        }\n        df = pd.DataFrame(data)\n        result, ax = task_func(df, 28, 165)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue(\"Cluster\" in result.columns)\n        self.assertListEqual(result[\"Cluster\"].tolist(), [0, 0])\n        self.assertTrue(max(result.loc[:, \"Cluster\"]) < 3)\n        self.assertEqual(len(result), 2)\n        self.assertIsNone(ax)\n    def test_case_2(self):\n        data = {\n            \"Age\": [20, 25, 30, 35, 40],\n            \"Height\": [150, 155, 160, 165, 170],\n            \"Weight\": [55, 60, 65, 70, 75],\n        }\n        df = pd.DataFrame(data)\n        result, ax = task_func(df, 30, 160)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue(\"Cluster\" in result.columns or len(result) < 3)\n        self.assertEqual(len(result), 0)\n        self.assertIsNone(ax)\n    def test_case_3(self):\n        data = {\n            \"Age\": [29, 30, 35, 40, 75],\n            \"Height\": [140, 155, 170, 165, 210],\n            \"Weight\": [60, 65, 70, 75, 70],\n        }\n        df = pd.DataFrame(data)\n        result, ax = task_func(df, 28, 220)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue(\"Cluster\" in result.columns or len(result) < 3)\n        self.assertEqual(len(result), 5)\n        self.assertEqual(ax.get_xlabel(), \"Age\")\n        self.assertEqual(ax.get_ylabel(), \"Height\")\n        self.assertEqual(ax.get_title(), \"KMeans Clustering based on Age and Height\")\n    def test_case_4(self):\n        data = {\n            \"Age\": [25, 30, 35, 40, 45],\n            \"Height\": [160, 155, 170, 165, 150],\n            \"Weight\": [60, 65, 70, 75, 80],\n        }\n        df = pd.DataFrame(data)\n        result, ax = task_func(df, 28, 180)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue(\"Cluster\" in result.columns)\n        self.assertTrue(max(result.loc[:, \"Cluster\"]) < 3)\n        self.assertEqual(len(result), 4)\n    def test_case_5(self):\n        data = {\n            \"Age\": [25, 30, 35, 40, 45],\n            \"Height\": [160, 155, 170, 165, 150],\n            \"Weight\": [60, 65, 70, 75, 80],\n        }\n        df = pd.DataFrame(data)\n        result, ax = task_func(df, 24, 165)\n        self.assertTrue(isinstance(result, pd.DataFrame))\n        self.assertTrue(\"Cluster\" in result.columns)\n        self.assertTrue(max(result.loc[:, \"Cluster\"]) < 3)\n        self.assertEqual(len(result), 3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Splits a given file path by a specific delimiter and computes disk usage for each directory component. >>> task_func('a/b', '/') [('a', {'total': 300, 'used': 150, 'free': 150}), ('b', {'total': 400, 'used': 200, 'free': 200})]\nThe function should raise the exception for: ValueError: If the 'path' is empty, not a string, or contain invalid components. FileNotFoundError: If the 'path' does not exist in the filesystem.\nThe function should output with:\n    list: A list of tuples where each tuple contains a path component and its disk usage as a dictionary.\n    The disk usage dictionary contains keys 'total', 'used', and 'free'.\nYou should write self-contained code starting with:\n```\nimport os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n```",
        "gt": "import os\nimport shutil\ndef task_func(path, delimiter=\"/\"):\n    if not path or not isinstance(path, str):\n        raise ValueError(\"Path must be a non-empty string\")\n    if not os.path.exists(path):\n        raise FileNotFoundError(f\"Path '{path}' does not exist\")\n\n    path_components = path.strip(delimiter).split(delimiter)\n    if not all(path_components):\n        raise ValueError(\"Path contains invalid components\")\n\n    results = []\n    for index, component in enumerate(path_components):\n        sub_path = delimiter.join(path_components[: index + 1])\n        if not sub_path.startswith(delimiter):\n            sub_path = delimiter + sub_path\n        usage = shutil.disk_usage(sub_path)\n        results.append(\n            (component, {\"total\": usage.total, \"used\": usage.used, \"free\": usage.free})\n        )\n\n    return results",
        "test": "import unittest\nfrom collections import namedtuple\nfrom unittest.mock import patch\nimport tempfile\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        DiskUsage = namedtuple(\"DiskUsage\", [\"total\", \"used\", \"free\"])\n        # Setup realistic disk usage values for different directories\n        self.mock_usage_root = DiskUsage(500000000000, 300000000000, 200000000000)\n        self.mock_usage_docs = DiskUsage(100000000000, 50000000000, 50000000000)\n        self.mock_usage_src = DiskUsage(50000000000, 25000000000, 25000000000)\n        self.mock_usage_home = DiskUsage(200000000000, 100000000000, 100000000000)\n    def disk_usage_side_effect(self, path):\n        # Helper for mocking\n        if path.endswith(\"src\"):\n            return self.mock_usage_src\n        elif path.endswith(\"Docs\"):\n            return self.mock_usage_docs\n        elif path == \"/home\":\n            return self.mock_usage_home\n        return self.mock_usage_root\n    @patch(\"os.path.exists\")\n    def test_nonexist_path(self, mock_exists):\n        # Test function should raise error if path does not exist\n        mock_exists.return_value = True\n        with tempfile.TemporaryDirectory() as tmpdirname:\n            non_exist_path = os.path.join(tmpdirname, \"nonexist\")\n            with self.assertRaises(FileNotFoundError):\n                task_func(non_exist_path)\n    def test_invalid_path(self):\n        # Test function should raise error if path is not valid\n        with self.assertRaises(ValueError):\n            task_func(\"\")\n        with self.assertRaises(ValueError):\n            task_func(123)\n    @patch(\"os.path.exists\")\n    @patch(\"shutil.disk_usage\")\n    def test_varied_path(self, mock_disk_usage, mock_exists):\n        # Test functionality\n        mock_exists.return_value = True\n        mock_disk_usage.side_effect = self.disk_usage_side_effect\n        result = task_func(\"Docs/src\")\n        expected = [\n            (\n                \"Docs\",\n                {\n                    \"total\": self.mock_usage_docs.total,\n                    \"used\": self.mock_usage_docs.used,\n                    \"free\": self.mock_usage_docs.free,\n                },\n            ),\n            (\n                \"src\",\n                {\n                    \"total\": self.mock_usage_src.total,\n                    \"used\": self.mock_usage_src.used,\n                    \"free\": self.mock_usage_src.free,\n                },\n            ),\n        ]\n        self.assertEqual(result, expected)\n    @patch(\"os.path.exists\")\n    @patch(\"shutil.disk_usage\")\n    def test_deep_nested_path(self, mock_disk_usage, mock_exists):\n        # Test nested paths\n        mock_exists.return_value = True\n        mock_disk_usage.return_value = self.mock_usage_src\n        deep_path = \"Docs/src/Projects/Python/Example\"\n        result = task_func(deep_path)\n        expected = [\n            (\"Docs\", self.mock_usage_src._asdict()),\n            (\"src\", self.mock_usage_src._asdict()),\n            (\"Projects\", self.mock_usage_src._asdict()),\n            (\"Python\", self.mock_usage_src._asdict()),\n            (\"Example\", self.mock_usage_src._asdict()),\n        ]\n        self.assertEqual(result, expected)\n    @patch(\"os.path.exists\")\n    @patch(\"shutil.disk_usage\")\n    def test_single_directory(self, mock_disk_usage, mock_exists):\n        # Test function works on single directory\n        mock_exists.return_value = True\n        mock_disk_usage.return_value = self.mock_usage_home\n        result = task_func(\"home\")\n        expected = [(\"home\", self.mock_usage_home._asdict())]\n        self.assertEqual(result, expected)\n    @patch(\"os.path.exists\")\n    @patch(\"shutil.disk_usage\")\n    def test_path_with_multiple_delimiters(self, mock_disk_usage, mock_exists):\n        # Test should fail if there is an invalid path component\n        mock_exists.return_value = True\n        mock_disk_usage.side_effect = lambda path: {\n            \"/Docs\": self.mock_usage_docs,\n            \"/Docs/src\": self.mock_usage_src,\n        }.get(path, self.mock_usage_root)\n        with self.assertRaises(ValueError):\n            result = task_func(\"Docs//src\")\n            expected = [\n                (\"Docs\", self.mock_usage_docs._asdict()),\n                (\"\", {\"total\": 0, \"used\": 0, \"free\": 0}),\n                (\"src\", self.mock_usage_src._asdict()),\n            ]\n            self.assertEqual(result, expected)\n    @patch(\"os.path.exists\")\n    @patch(\"shutil.disk_usage\")\n    def test_path_with_trailing_delimiter(self, mock_disk_usage, mock_exists):\n        # Test should handle trailing delimiter\n        mock_exists.return_value = True\n        mock_disk_usage.side_effect = lambda path: {\n            \"/Docs\": self.mock_usage_docs,\n            \"/Docs/src\": self.mock_usage_src,\n        }.get(path, self.mock_usage_root)\n        result = task_func(\"Docs/src/\")\n        expected = [\n            (\"Docs\", self.mock_usage_docs._asdict()),\n            (\"src\", self.mock_usage_src._asdict()),\n        ]\n        self.assertEqual(result, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function plots a bar chart of monthly data values for a single year, with 'month' on the x-axis and 'value' on the y-axis.\nThe function should output with:\n    Axes object: A matplotlib.axes.Axes object representing the plot, with the title formatted as 'Monthly Data for yyyy', x label as 'Month', and y label as 'Value'.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n```",
        "gt": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndef task_func(data):\n    # Handle empty data\n    if not data.strip():\n        raise ValueError(\"The provided data string is empty.\")\n\n    data_entries = data.split(',')\n    months_data = [d.split('-')[1] for d in data_entries]\n    unique_years = {d.split('-')[0] for d in data_entries}\n\n    # Check if the data is from the same year\n    if len(unique_years) != 1:\n        raise ValueError(\"The provided data contains entries from multiple years.\")\n\n    # Extract data and convert to DataFrame\n    data = [d.rsplit('-', 1) for d in data_entries]\n    data = [(datetime.strptime(d[0], '%Y-%m').strftime('%B'), int(d[1])) for d in data]\n    df = pd.DataFrame(data, columns=['Month', 'Value'])\n    df = df.set_index('Month')\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(df.index, df['Value'])\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Monthly Data for {list(unique_years)[0]}\")\n    plt.xticks(rotation='vertical')\n    plt.close(fig)  # Close the figure to prevent it from being displayed here\n    \n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_basic_functionality(self):\n        data = '2022-01-100,2022-02-200,2022-03-150'\n        ax = task_func(data)\n        self.assertEqual(ax.get_xlabel(), \"Month\", \"X-axis label is incorrect.\")\n        self.assertEqual(ax.get_ylabel(), \"Value\", \"Y-axis label is incorrect.\")\n        self.assertEqual(ax.get_title(), \"Monthly Data for 2022\", \"Title of the plot is incorrect.\")\n        self.assertEqual(len(ax.patches), 3, \"Number of bars plotted is incorrect.\")\n    def test_full_year_data(self):\n        data = '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-05-250,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650'\n        ax = task_func(data)\n        self.assertEqual(len(ax.patches), 12, \"Number of bars plotted is incorrect.\")\n    def test_partial_year_data(self):\n        data = '2022-01-100,2022-02-200,2022-03-150'\n        ax = task_func(data)\n        self.assertEqual(len(ax.patches), 3, \"Number of bars plotted is incorrect.\")\n    def test_incorrect_data_format(self):\n        data = '2022-01-100,2022-02-200,2023-03-150'\n        with self.assertRaises(ValueError, msg=\"Function should raise ValueError for data from multiple years.\"):\n            ax = task_func(data)\n    def test_empty_data(self):\n        data = ''\n        with self.assertRaises(ValueError, msg=\"Function should raise ValueError for empty data.\"):\n            ax = task_func(data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Compares two files to determine if they are identical by computing and comparing their MD5 hash values. This method is effective for checking if two files have exactly the same content. Assuming 'file1.gz' and 'file3.txt' contain different content, >>> task_func('file1.gz', 'file3.txt') False\nThe function should raise the exception for: FileNotFoundError: if either file_path1 or file_path2 does not exist.\nThe function should output with:\n    bool: Returns True if the MD5 hashes of the files match (indicating identical content), False otherwise.\nYou should write self-contained code starting with:\n```\nimport hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n```",
        "gt": "import hashlib\nimport io\nimport os\ndef task_func(file_path1, file_path2):\n    if not os.path.exists(file_path1) or not os.path.exists(file_path2):\n        raise FileNotFoundError(\"File not found! Please specify a valid filepath\")\n\n    with io.open(file_path1, 'rb') as file1, io.open(file_path2, 'rb') as file2:\n        file1_hash = hashlib.md5(file1.read()).hexdigest()\n        file2_hash = hashlib.md5(file2.read()).hexdigest()\n\n    return file1_hash == file2_hash",
        "test": "import unittest\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test environment by creating test files.\"\"\"\n        # Create files with predefined content for testing\n        with open('file1.gz', 'wb') as f:\n            f.write(b'Test content for file1 and file2.')  # Identical content for file1 and file2\n        with open('file2.gz', 'wb') as f:\n            f.write(b'Test content for file1 and file2.')  # Identical to file1\n        with open('file3.txt', 'wb') as f:\n            f.write(b'Different content for file3.')  # Different content\n    def tearDown(self):\n        \"\"\"Clean up by removing the test files after each test.\"\"\"\n        os.remove('file1.gz')\n        os.remove('file2.gz')\n        os.remove('file3.txt')\n    def test_identical_files(self):\n        \"\"\"Test that identical files are recognized as such.\"\"\"\n        self.assertTrue(task_func('file1.gz', 'file2.gz'))\n    def test_different_files(self):\n        \"\"\"Test that files with different contents are recognized as such.\"\"\"\n        self.assertFalse(task_func('file1.gz', 'file3.txt'))\n    def test_first_file_not_exist(self):\n        \"\"\"Test the behavior when the first file does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent1.gz', 'file2.gz')\n    def test_second_file_not_exist(self):\n        \"\"\"Test the behavior when the second file does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('file1.gz', 'nonexistent2.txt')\n    def test_both_files_not_exist(self):\n        \"\"\"Test the behavior when both files do not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent1.gz', 'nonexistent2.txt')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function draws a histogram to visualize the frequency distribution of numeric values provided in a string format, with 'Value' on the x-axis, 'Frequency' on the y-axis and 'Histogram of Values' as the title.\nNote that: Notes: The histogram uses bins calculated as `np.arange(data.min(), data.max()+2) - 0.5`.\nThe function should output with:\n    ax (matplotlib.axes._axes.Axes): The Axes object of the created histogram.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    data = data.split('-')\n    data = [int(d) for d in data]\n    df = pd.DataFrame(data, columns=['Values'])\n    \n    plt.figure(figsize=(10, 6))\n    ax = plt.gca()  # Get current Axes\n    ax.hist(df['Values'], bins=np.arange(df['Values'].min(), df['Values'].max()+2) - 0.5, edgecolor='black')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Values')\n    ax.set_xticks(sorted(list(set(data))))  # Set x-ticks based on unique data values\n    plt.show()\n    \n    return ax",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = '1-2-3-4-5'\n        ax = task_func(data)\n        self.assertEqual(ax.get_title(), 'Histogram of Values')\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n        self.assertListEqual(list(ax.get_xticks()), [1, 2, 3, 4, 5])\n    def test_case_2(self):\n        data = '5-5-5-5-5'\n        ax = task_func(data)\n        self.assertEqual(ax.get_title(), 'Histogram of Values')\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n        self.assertListEqual(list(ax.get_xticks()), [5])\n    def test_case_3(self):\n        data = '7'\n        ax = task_func(data)\n        self.assertEqual(ax.get_title(), 'Histogram of Values')\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n        self.assertListEqual(list(ax.get_xticks()), [7])\n    def test_case_4(self):\n        data = '2-8-4-10-1'\n        ax = task_func(data)\n        self.assertEqual(ax.get_title(), 'Histogram of Values')\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n        self.assertListEqual(sorted(list(ax.get_xticks())), [1, 2, 4, 8, 10])\n    def test_case_5(self):\n        data = '1-50-100-150'\n        ax = task_func(data)\n        self.assertEqual(ax.get_title(), 'Histogram of Values')\n        self.assertEqual(ax.get_xlabel(), 'Value')\n        self.assertEqual(ax.get_ylabel(), 'Frequency')\n        self.assertListEqual(sorted(list(ax.get_xticks())), [1, 50, 100, 150])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a histogram of the data from a DataFrame column of the pandas after converting the data into a specific format, and return the matplotlib Axes object. Additional Notes: The title of the plot should be 'Date Distribution'. The y label should be named with 'Frequency'.\nThe function should raise the exception for: ValueError: If 'data' is not a DataFrame, 'date_format' is not a string, 'country' is not in 'country_codes', or 'country_codes' is not a dictionary.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plotted histogram.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom datetime import datetime\ndef task_func(data, date_format, country, country_codes=None):\n```",
        "gt": "import pandas as pd\nfrom datetime import datetime\ndef task_func(data, date_format, country, country_codes=None):\n    default_country_codes = {\n        'Russia': 'ru_RU',\n        'Germany': 'de_DE',\n        'France': 'fr_FR',\n        'Spain': 'es_ES',\n        'Italy': 'it_IT'\n    }\n\n    if country_codes is None:\n        country_codes = default_country_codes\n\n    if not isinstance(data, pd.DataFrame) or not isinstance(date_format, str) or not isinstance(country_codes, dict):\n        raise ValueError(\"Invalid input types.\")\n    if country not in country_codes:\n        raise ValueError(f\"Country '{country}' not found in country codes.\")\n\n    try:\n        data['parsed_dates'] = data['dates'].apply(lambda x: datetime.strptime(x, date_format).date())\n    except ValueError:\n        raise ValueError(\"Date format mismatch.\")\n\n    ax = data['parsed_dates'].hist()\n    ax.set(title='Date Distribution', ylabel='Frequency')\n    return ax",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.axes\nimport numpy as np\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.data = pd.DataFrame({'dates': ['01/01/2000', '01/02/2000', '02/03/2000', '04/05/2000', '06/07/2000']})\n    def test_valid_data(self):\n        ax = task_func(self.data, '%d/%m/%Y', 'Russia')\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.get_title(), 'Date Distribution')\n    def test_non_existing_country(self):\n        with self.assertRaises(ValueError):\n            task_func(self.data, '%d/%m/%Y', 'Mars')\n    def test_invalid_data_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"Not a DataFrame\", '%d/%m/%Y', 'Russia')\n    def test_invalid_date_format_type(self):\n        with self.assertRaises(ValueError):\n            task_func(self.data, 123, 'Russia')\n    def test_custom_country_codes(self):\n        custom_codes = {'Mars': 'en_US'}\n        ax = task_func(self.data, '%d/%m/%Y', 'Mars', country_codes=custom_codes)\n        self.assertEqual(ax.get_title(), 'Date Distribution')\n    \n    def test_histogram_values(self):\n        ax = task_func(self.data, '%d/%m/%Y', 'Russia')\n        # Convert dates to datetime objects for frequency calculation\n        converted_dates = pd.to_datetime(self.data['dates'], format='%d/%m/%Y')\n        expected_counts = [1, 1, 0, 1, 0, 0, 1, 0, 0, 1]\n    \n        # Get actual histogram data\n        n, bins, patches = ax.hist(converted_dates)\n        # Compare the actual frequencies with the expected frequencies\n        np.testing.assert_array_almost_equal(n, expected_counts)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a list of lists into a list of integers, apply the KMeans clustering, and return a scatter plot 'matplotlib.axes.Axes' with data points color-coded by their cluster.\nThe function should output with:\n    matplotlib.axes.Axes: An Axes object representing the scatter plot.\nYou should write self-contained code starting with:\n```\nfrom itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(L):\n```",
        "gt": "from itertools import chain\nimport numpy as np\nfrom sklearn.cluster import KMeans\ndef task_func(L):\n    # Constants\n    N_CLUSTERS = 3\n\n    data = list(chain(*L))\n    data = np.array(data).reshape(-1, 1)\n\n    kmeans = KMeans(n_clusters=N_CLUSTERS).fit(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(data, [0]*len(data), c=kmeans.labels_.astype(float))\n    \n    return ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        ax = task_func([[1, 2, 3], [50, 60, 70], [100, 110, 120]])\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_2(self):\n        ax = task_func([[1, 5], [2, 6], [3, 7]])\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_3(self):\n        ax = task_func([[10, 20, 30, 40], [15, 25, 35, 45]])\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_4(self):\n        ax = task_func([[1000, 2000], [3000, 4000], [5000, 6000]])\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_5(self):\n        ax = task_func([[-1, -2, -3], [-50, -60, -70], [-100, -110, -120]])\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sorts the input list in ascending order based on the degree value of its elements, and then calculates the mean, median, and mode of both the sorted list and the same for the magnitude of the fast fourier transform of the degree values upto the nearest integer.\nThe function should output with:\n    tuple: A tuple containing the rounded mean, median and mode of the sorted list along with those\n    for the magnitude of the fast fourier transform of the degree values.\nYou should write self-contained code starting with:\n```\nimport math\nimport statistics\nimport numpy as np\ndef task_func(input_list):\n```",
        "gt": "import math\nimport statistics\nimport numpy as np\ndef task_func(input_list):\n    fft = np.abs(np.fft.fft([math.degrees(x) for x in input_list]))\n    sorted_list = sorted(input_list, key=lambda x: (math.degrees(x), x))\n    mean = statistics.mean(sorted_list)\n    median = statistics.median(sorted_list)\n    mode = statistics.mode(sorted_list)\n    mean_fft = round(statistics.mean(fft))\n    median_fft = round(statistics.median(fft))\n    mode_fft = round(statistics.mode(fft))\n    return (mean, median, mode, mean_fft, median_fft, mode_fft)",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        input_data = [30, 45, 60, 90, 180]\n        result = task_func(input_data)\n        self.assertEqual(result, (81, 60, 30, 10712, 8460, 8460))\n        \n    def test_case_2(self):\n        input_data = [0, 90, 180, 270, 360]\n        result = task_func(input_data)\n        self.assertEqual(result, (180, 180, 0, 24508, 21932, 21932))\n        \n    def test_case_3(self):\n        input_data = [10, 20, 30, 40, 50]\n        result = task_func(input_data)\n        self.assertEqual(result, (30, 30, 10, 3296, 2437, 2437))\n        \n    def test_case_4(self):\n        input_data = [15, 30, 45, 60, 75, 90, 105, 120, 135, 150]\n        result = task_func(input_data)\n        self.assertEqual(result[:5], (82.5, 82.5, 15, 11366, 6311))\n        \n    def test_case_5(self):\n        input_data = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n        result = task_func(input_data)\n        self.assertEqual(result, (32.5, 32.5, 5, 4718, 2431, 6641))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize a 2D data matrix, calculate the mean value of each row and then visualize the distribution of the mean values with an histogram. - Each row of the matrix represent a data point, its length is the same as that of FEATURE_NAMES. - The plot title should be 'Distribution of Means'.\nThe function should output with:\n    tuple: A tuple containing:\n    pandas.DataFrame: A DataFrame containing the standardized data and the mean of each row.\n    Its column names should be FEATURE_NAMES and 'Mean'.\n    matplotlib.axes.Axes: The histogram plot of the distribution of means.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n# Constants\nFEATURE_NAMES = [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\"]\ndef task_func(data_matrix):\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data_matrix)\n    df = pd.DataFrame(standardized_data, columns=FEATURE_NAMES)\n    df[\"Mean\"] = df.mean(axis=1)\n    plt.figure(figsize=(10, 5))\n    ax = df[\"Mean\"].plot(kind=\"hist\", title=\"Distribution of Means\")\n    return df, ax",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        data = np.array([[6, 8, 1, 3, 4], [-1, 0, 3, 5, 1]])\n        df, ax = task_func(data)\n        # Check the dataframe structure and values\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(\n            list(df.columns),\n            [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\", \"Mean\"],\n        )\n        self.assertAlmostEqual(df[\"Mean\"].iloc[0], 0.2)\n        self.assertAlmostEqual(df[\"Mean\"].iloc[1], -0.2)\n        # Check the histogram plot\n        self.assertEqual(ax.get_title(), \"Distribution of Means\")\n        self.assertIsNotNone(ax.patches)  # Check if histogram bars exist\n    def test_case_2(self):\n        data = np.array([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]])\n        df, ax = task_func(data)\n        # Check the dataframe structure and values\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(\n            list(df.columns),\n            [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\", \"Mean\"],\n        )\n        self.assertAlmostEqual(df[\"Mean\"].iloc[0], 0.0)\n        self.assertAlmostEqual(df[\"Mean\"].iloc[1], 0.0)\n        # Check the histogram plot\n        self.assertEqual(ax.get_title(), \"Distribution of Means\")\n        self.assertIsNotNone(ax.patches)  # Check if histogram bars exist\n    def test_case_3(self):\n        data = np.array([[1, 7, 9, 4, 2], [8, 3, 5, 6, 10]])\n        df, ax = task_func(data)\n        # Check the dataframe structure and values\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(\n            list(df.columns),\n            [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\", \"Mean\"],\n        )\n        self.assertAlmostEqual(df[\"Mean\"].iloc[0], -0.2)\n        self.assertAlmostEqual(df[\"Mean\"].iloc[1], 0.2)\n        # Check the histogram plot\n        self.assertEqual(ax.get_title(), \"Distribution of Means\")\n        self.assertIsNotNone(ax.patches)  # Check if histogram bars exist\n    def test_case_4(self):\n        data = np.array(\n            [\n                [16, 3, 1, 9, 20],\n                [2, 12, 13, 8, 17],\n                [2, 4, 5, 11, 19],\n                [15, 7, 6, 14, 18],\n            ]\n        )\n        df, ax = task_func(data)\n        # Check the dataframe structure and values\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(\n            list(df.columns),\n            [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\", \"Mean\"],\n        )\n        # Check the histogram plot\n        self.assertEqual(ax.get_title(), \"Distribution of Means\")\n        self.assertIsNotNone(ax.patches)  # Check if histogram bars exist\n        # Expected output\n        FEATURE_NAMES = [\n            \"Feature 1\",\n            \"Feature 2\",\n            \"Feature 3\",\n            \"Feature 4\",\n            \"Feature 5\",\n        ]\n        scaler = StandardScaler()\n        expected_data = scaler.fit_transform(data)\n        np.testing.assert_array_equal(df.loc[:, FEATURE_NAMES].values, expected_data)\n    def test_case_5(self):\n        data = np.array(\n            [\n                [1, 2, 3, 4, 5],\n                [6, 7, 8, 9, 10],\n                [11, 12, 13, 14, 15],\n                [16, 17, 18, 19, 20],\n                [21, 22, 23, 24, 25],\n            ]\n        )\n        df, ax = task_func(data)\n        # Check the dataframe structure and values\n        self.assertTrue(isinstance(df, pd.DataFrame))\n        self.assertListEqual(\n            list(df.columns),\n            [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\", \"Mean\"],\n        )\n        # Check the histogram plot\n        self.assertEqual(ax.get_title(), \"Distribution of Means\")\n        self.assertIsNotNone(ax.patches)  # Check if histogram bars exist\n        # Expected output\n        FEATURE_NAMES = [\n            \"Feature 1\",\n            \"Feature 2\",\n            \"Feature 3\",\n            \"Feature 4\",\n            \"Feature 5\",\n        ]\n        scaler = StandardScaler()\n        expected_data = scaler.fit_transform(data)\n        np.testing.assert_array_equal(df.loc[:, FEATURE_NAMES].values, expected_data)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Read a CSV file of pandas, reverse the order of the lines and write the inverted lines back into the file. Then move the cursor back to the beginning of the file. The header should not be inverted and the file may be empty.\nThe function should output with:\n    filename (str): The name of the CSV file.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport os\ndef task_func(filename):\n```",
        "gt": "import pandas as pd\nimport os\ndef task_func(filename):\n    if not os.path.exists(filename):\n        return filename\n\n    # Check if empty\n    with open(filename, 'r') as file:\n        if not file.read(1):\n            return filename\n\n    df = pd.read_csv(filename)\n    df = df.iloc[::-1]\n    df.to_csv(filename, index=False)\n\n    with open(filename, 'r+') as file:\n        file.seek(0)\n\n    return filename",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def base(self, filename, contents, expected):\n        # Create file\n        with open(filename, 'w') as f:\n            f.write(contents)\n        # Run function\n        task_func(filename)\n        # Check file\n        with open(filename, 'r') as f:\n            self.assertEqual(f.read().strip(), expected.strip())\n        # Remove file\n        os.remove(filename)\n    def test_case_1(self):\n        self.base('file.csv', 'a,b,c\\n1,2,3\\n4,5,6\\n7,8,9', 'a,b,c\\n7,8,9\\n4,5,6\\n1,2,3')\n    def test_case_2(self):\n        self.base('file.csv', 'a,b,c\\n1,2,3\\n4,5,6', 'a,b,c\\n4,5,6\\n1,2,3')\n    def test_case_3(self):\n        self.base('file.csv', 'a,b,c\\n1,2,3', 'a,b,c\\n1,2,3')\n    def test_case_4(self):\n        self.base('file.csv', 'a,b,c', 'a,b,c')\n    def test_case_5(self):\n        self.base('file.csv', '', '')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform the feature selection with SelectKBest (k=2) and return a heatmap of the feature correlations.\nThe function should output with:\n    tuple: A tuple containing:\n    list: A list of the selected features.\n    Axes: A heatmap showing the correlation between the selected features.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\ndef task_func(df1, df2):\n```",
        "gt": "import pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif\nimport seaborn as sns\ndef task_func(df1, df2):\n    # Merge dataframes based on 'id'\n    df = pd.merge(df1, df2, on=\"id\")\n\n    # Separate features and target\n    features = df1.columns.drop(\"id\")\n    X = df[features]\n    y = df[\"target\"]\n\n    # Select top 2 features\n    selector = SelectKBest(f_classif, k=2)\n    X_new = selector.fit_transform(X, y)\n\n    selected_features = [x for x, y in zip(features, selector.get_support()) if y]\n\n    # Draw heatmap\n    heatmap = sns.heatmap(\n        pd.DataFrame(X_new, columns=selected_features).corr(), annot=True\n    )\n\n    return selected_features, heatmap",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def tearDown(self):\n        plt.close(\"all\")\n    def test_case_1(self):\n        # Dataset with clear distinction between features\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3, 4, 5],\n                \"feature1\": [5.5, 6.7, 7.8, 8.9, 9.0],\n                \"feature2\": [1.1, 2.2, 3.3, 4.4, 5.5],\n                \"feature3\": [0.5, 1.5, 2.5, 3.5, 4.5],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3, 4, 5], \"target\": [1, 0, 1, 0, 1]})\n        # Calling the function and asserting results\n        selected_features, ax = task_func(df1, df2)\n        self.assertListEqual(selected_features, [\"feature1\", \"feature3\"])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(ax.has_data())\n    def test_case_2(self):\n        # Dataset with features having moderate correlation\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1.2, 3.4, 5.6],\n                \"feature2\": [2.3, 4.5, 6.7],\n                \"feature3\": [3.4, 5.6, 7.8],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [4.5, 6.7, 8.9]})\n        # Calling the function and asserting results\n        selected_features, ax = task_func(df1, df2)\n        self.assertListEqual(selected_features, [\"feature2\", \"feature3\"])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(ax.has_data())\n    def test_case_3(self):\n        # Dataset with balanced target values\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3, 4],\n                \"feature1\": [2.5, 3.5, 4.5, 5.5],\n                \"feature2\": [6.6, 7.7, 8.8, 9.9],\n                \"feature3\": [10.1, 11.1, 12.1, 13.1],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3, 4], \"target\": [0, 1, 0, 1]})\n        # Calling the function and asserting results\n        selected_features, ax = task_func(df1, df2)\n        self.assertListEqual(selected_features, [\"feature2\", \"feature3\"])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(ax.has_data())\n    def test_case_4(self):\n        # Smaller dataset\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2],\n                \"feature1\": [3.3, 4.4],\n                \"feature2\": [5.5, 6.6],\n                \"feature3\": [7.7, 8.8],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2], \"target\": [1, 0]})\n        # Calling the function and asserting results\n        selected_features, ax = task_func(df1, df2)\n        self.assertListEqual(selected_features, [\"feature2\", \"feature3\"])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(ax.has_data())\n    def test_case_5(self):\n        # Dataset with different feature correlations\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [10, 20, 30],\n                \"feature2\": [40, 50, 60],\n                \"feature3\": [70, 80, 90],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [1, 0, 1]})\n        # Calling the function and asserting results\n        selected_features, ax = task_func(df1, df2)\n        self.assertListEqual(selected_features, [\"feature2\", \"feature3\"])\n        self.assertIsInstance(ax, plt.Axes)\n        self.assertTrue(ax.has_data())\n    def test_case_6(self):\n        # Test handling errors - no \"id\"\n        df1 = pd.DataFrame(\n            {\n                \"feature1\": [10, 20, 30],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [1, 0, 1]})\n        with self.assertRaises(KeyError):\n            task_func(df1, df2)\n    def test_case_7(self):\n        # Test handling errors - wrong types\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [\"a\", \"b\", 3],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2, 3], \"target\": [1, 0, 1]})\n        with self.assertRaises(ValueError):\n            task_func(df1, df2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Combine a list of dictionaries with the same keys (fruit names) into a single pandas dataframe where NA/NaN values are filled with 0, then generate a line chart of sales. The chart should have title 'Fruit Sales over Time', x-axis 'Time', and y-axis 'Sales Quantity'.\nThe function should output with:\n    matplotlib.axes._axes.Axes: The generated plot's Axes object.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    df = pd.DataFrame(data)\n    df.fillna(0, inplace=True)\n    for fruit in df.columns:\n        plt.plot(df[fruit], label=fruit)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Sales Quantity\")\n    plt.title(\"Fruit Sales over Time\")\n    plt.legend()\n    return plt.gca()",
        "test": "import unittest\nimport matplotlib\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data = [{\"apple\": 10}, {\"banana\": 15, \"cherry\": 12}]\n        ax = task_func(data)\n        # Test default plot values\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertTrue(isinstance(ax.lines[0], matplotlib.lines.Line2D))\n        self.assertEqual(ax.get_title(), \"Fruit Sales over Time\")\n        self.assertEqual(ax.get_xlabel(), \"Time\")\n        self.assertEqual(ax.get_ylabel(), \"Sales Quantity\")\n    def test_case_2(self):\n        # Test flat input\n        data = [{\"apple\": 11, \"banana\": 15, \"cherry\": 12, \"durian\": 10}]\n        ax = task_func(data)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(len(ax.lines), len(data[0]))\n        for i, (fruit_name, fruit_quantity) in enumerate(data[0].items()):\n            self.assertEqual(ax.lines[i]._label, fruit_name)\n            self.assertEqual(ax.lines[i]._y, fruit_quantity)\n            self.assertIsInstance(ax.lines[i], matplotlib.lines.Line2D)\n    def test_case_3(self):\n        data = [\n            {\"apple\": 15},\n            {\"apple\": 2, \"banana\": 11, \"cherry\": 8},\n        ]\n        ax = task_func(data)\n        # Test data correctness\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(len(ax.lines), 3)\n        self.assertEqual(ax.lines[0]._label, \"apple\")\n        self.assertEqual(ax.lines[0]._y.tolist(), [15, 2])\n        self.assertEqual(ax.lines[1]._label, \"banana\")\n        self.assertEqual(ax.lines[1]._y.tolist(), [0, 11])\n        self.assertEqual(ax.lines[2]._label, \"cherry\")\n        self.assertEqual(ax.lines[2]._y.tolist(), [0, 8])\n    def test_case_4(self):\n        # Test one fruit only\n        data = [{\"apple\": 10}, {\"apple\": 12}, {\"apple\": 15}]\n        ax = task_func(data)\n        self.assertTrue(isinstance(ax, plt.Axes))\n        self.assertEqual(len(ax.lines), 1)\n        self.assertEqual(ax.lines[0]._label, \"apple\")\n        self.assertEqual(ax.lines[0]._y.tolist(), [10, 12, 15])\n    def test_case_5(self):\n        # Test that function fails with unexpected data values\n        with self.assertRaises(ValueError):\n            task_func(\"\")\n        with self.assertRaises(ValueError):\n            task_func(1)\n        # Test that function fails with unexpected data types\n        with self.assertRaises(TypeError):\n            task_func([\"apple\", 10, \"banana\", 10])\n        with self.assertRaises(TypeError):\n            task_func([{\"apple\": \"10\"}, {\"cherry\": 10}])\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace spaces in given words with underscores, then plots the frequency of each unique word.\nNote that: Notes: All operations are case-insensitive. The frequency plot displays each unique word on the x-axis in the order they appear after modification with its corresponding frequency on the y-axis.\nThe function should raise the exception for: ValueError: If the input text is empty.\nThe function should output with:\n    matplotlib.axes.Axes: The Axes object of the plot.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\ndef task_func(mystrings, text):\n\n    if not text:\n        raise ValueError(\"text cannot be empty.\")\n\n    for word in mystrings:\n        text = re.sub(word, word.replace(\" \", \"_\"), text, flags=re.IGNORECASE)\n\n    word_counts = Counter(text.split())\n\n    words, frequencies = zip(*word_counts.items())\n    indices = np.arange(len(word_counts))\n\n    fig, ax = plt.subplots()\n    ax.bar(indices, frequencies)\n    ax.set_xticks(indices)\n    ax.set_xticklabels(words)\n\n    return ax",
        "test": "import unittest\nimport matplotlib.axes\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        ax = task_func([\"hello\"], \"Hello world!\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        xtick_labels = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertTrue(\"hello\" in xtick_labels)\n        self.assertTrue(\"world!\" in xtick_labels)\n        self.assertEqual(ax.patches[0].get_height(), 1)\n    def test_case_2(self):\n        # Test underscore on basic case\n        ax = task_func([\"hello world\"], \"Hello world!\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertEqual(ax.get_xticklabels()[0].get_text(), \"hello_world!\")\n        self.assertEqual(ax.patches[0].get_height(), 1)\n    def test_case_3(self):\n        # Test no mystrings\n        ax = task_func([], \"Hello world!\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        xtick_labels = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertTrue(\"Hello\" in xtick_labels)\n        self.assertTrue(\"world!\" in xtick_labels)\n        self.assertEqual(ax.patches[0].get_height(), 1)\n    def test_case_4(self):\n        # Test basic case with\n        large_text = \"Lorem ipsum dolor sit amet \" * 10\n        ax = task_func([\"Lorem ipsum\"], large_text)\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        xtick_labels = [label.get_text() for label in ax.get_xticklabels()]\n        self.assertTrue(\"Lorem_ipsum\" in xtick_labels)\n    def test_case_5(self):\n        # Tests basic functionality with simple replacement and plotting.\n        ax = task_func([\"hello world\"], \"Hello world!\")\n        self.assertIsInstance(ax, matplotlib.axes.Axes)\n        self.assertIn(\n            \"hello_world!\", [label.get_text() for label in ax.get_xticklabels()]\n        )\n        self.assertEqual(ax.patches[0].get_height(), 1)\n    def test_case_6(self):\n        # Ensures case insensitivity in replacements.\n        ax = task_func([\"Hello World\"], \"hello world! Hello world!\")\n        self.assertIn(\n            \"Hello_World!\", [label.get_text() for label in ax.get_xticklabels()]\n        )\n        self.assertEqual(ax.patches[0].get_height(), 2)\n    def test_case_7(self):\n        # Tests behavior when no replacements should occur.\n        ax = task_func([\"not in text\"], \"Hello world!\")\n        self.assertNotIn(\n            \"not_in_text\", [label.get_text() for label in ax.get_xticklabels()]\n        )\n    def test_case_8(self):\n        # Tests function behavior with empty strings and lists.\n        with self.assertRaises(Exception):\n            task_func([], \"\")\n    def test_case_9(self):\n        # Tests functionality with special characters and numbers in `mystrings` and `text`.\n        ax = task_func([\"test 123\", \"#$%!\"], \"Test 123 is fun. #$%!\")\n        self.assertIn(\"test_123\", [label.get_text() for label in ax.get_xticklabels()])\n        self.assertIn(\"#$%!\", [label.get_text() for label in ax.get_xticklabels()])\n    def test_case_10(self):\n        # Tests handling of duplicates in `mystrings`.\n        ax = task_func([\"duplicate\", \"duplicate\"], \"duplicate Duplicate DUPLICATE\")\n        self.assertIn(\"duplicate\", [label.get_text() for label in ax.get_xticklabels()])\n        self.assertEqual(ax.patches[0].get_height(), 3)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Replace certain values in a DataFrame with a dictionary mapping and calculate the Pearson correlation coefficient between each pair of columns.\nNote that: This function operates on DataFrames containing numeric or categorical data that can be replaced with numeric values, as correlation calculations require numeric data. This function using pearson method to calculate the correlation matrix.\nThe function should raise the exception for: This function will raise a ValueError is input df is not a DataFrame.\nThe function should output with:\n    DataFrame: A DataFrame with the correlation coefficients between each pair of columns. The format of the DataFrame is a square matrix with column and index labels matching the columns of the input DataFrame.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n```",
        "gt": "import pandas as pd\nimport numpy as np\n# Constants\nCOLUMNS = ['column1', 'column2', 'column3', 'column4', 'column5']\ndef task_func(df, dct):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    # Replace values using dictionary mapping\n    df = df.replace(dct)\n    \n    # Calculate the correlation matrix\n    correlation_matrix = np.corrcoef(df.values, rowvar=False)\n    \n    return pd.DataFrame(correlation_matrix, columns=df.columns, index=df.columns)",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with simple numeric DataFrame\n        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n        dct = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n        result = task_func(df, dct)\n        self.assertTrue(result.shape == (2, 2))\n    def test_case_2(self):\n        # Test with DataFrame containing NaN values\n        df = pd.DataFrame({'A': [1, 2, None], 'B': [4, None, 6]})\n        dct = {1: 10, 2: 20, 4: 40, 6: 60}\n        result = task_func(df, dct)\n        self.assertTrue(result.isna().sum().sum() > 0)\n    def test_case_3(self):\n        # Test with DataFrame containing negative values\n        df = pd.DataFrame({'A': [-1, -2, -3], 'B': [-4, -5, -6]})\n        dct = {-1: 1, -2: 2, -3: 3, -4: 4, -5: 5, -6: 6}\n        result = task_func(df, dct)\n        self.assertTrue(result.shape == (2, 2))\n    def test_case_4(self):\n        # Test with DataFrame containing mixed data types\n        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n        dct = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5}\n        result = task_func(df, dct)\n        self.assertTrue(result.shape == (2, 2))\n    def test_case_5(self):\n        # Test with larger DataFrame\n        df = pd.DataFrame({'A': range(10), 'B': range(10, 20), 'C': range(20, 30)})\n        dct = {i: i + 1 for i in range(30)}\n        result = task_func(df, dct)\n        self.assertTrue(result.shape == (3, 3))\n    def test_case_6(self):\n        with self.assertRaises(ValueError):\n            task_func(\"non_df\", {})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a counter from a list \"l\" and move the first 3 elements to the end of the list.\nThe function should output with:\n    counter (collections.Counter): A frequency counter that maps elements from the input list to their frequencies in the first 30 elements of the cycled, shuffled list.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport random\nfrom itertools import cycle\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l):\n```",
        "gt": "from collections import Counter\nimport random\nfrom itertools import cycle\n# Constants\nELEMENTS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\ndef task_func(l):\n    if not l:  # Check if the list is empty\n        return Counter()  # Return an empty counter if the list is empty\n\n    random.shuffle(l)\n    l_cycled = cycle(l)\n    counter = Counter(next(l_cycled) for _ in range(30))\n    keys = list(counter.keys())\n    counter = Counter({k: counter[k] for k in keys[3:] + keys[:3]})\n    \n    return counter",
        "test": "import unittest\nfrom collections import Counter\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test Description: Testing with a list of unique string elements\n        # Input: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n        # Expected Output: A Counter object with 30 elements, all unique elements of the input should be present\n        input_data = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n        result = task_func(input_data)\n        self.assertIsInstance(result, Counter, \"The result should be a Counter object\")\n        self.assertEqual(sum(result.values()), 30, \"The total count should be 30\")\n        self.assertEqual(len(result), len(set(input_data)), \"All unique elements should be present in the result\")\n    def test_case_2(self):\n        # Test Description: Testing with a list of unique integer elements\n        # Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        # Expected Output: A Counter object with 30 elements, all unique elements of the input should be present\n        input_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        result = task_func(input_data)\n        self.assertIsInstance(result, Counter, \"The result should be a Counter object\")\n        self.assertEqual(sum(result.values()), 30, \"The total count should be 30\")\n        self.assertEqual(len(result), len(set(input_data)), \"All unique elements should be present in the result\")\n    def test_case_3(self):\n        # Test Description: Testing with a list with repeated elements\n        # Input: ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']\n        # Expected Output: A Counter object with 30 elements, two unique elements should be present ('A' and 'B')\n        input_data = ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']\n        result = task_func(input_data)\n        self.assertIsInstance(result, Counter, \"The result should be a Counter object\")\n        self.assertEqual(sum(result.values()), 30, \"The total count should be 30\")\n        self.assertEqual(len(result), 2, \"The result should contain two unique elements for repeated input\")\n    def test_empty_list(self):\n        input_data = []\n        result = task_func(input_data)\n        self.assertIsInstance(result, Counter, \"The result should be a Counter object even for an empty list\")\n        self.assertEqual(len(result), 0, \"The result should be an empty Counter for an empty input list\")\n    def test_case_5(self):\n        # Test Description: Testing with a list of mixed data types\n        # Input: ['A', 2, 'C', 4, 'E', 6, 'G', 8, 'I', 10]\n        # Expected Output: A Counter object with 30 elements\n        input_data = ['A', 2, 'C', 4, 'E', 6, 'G', 8, 'I', 10]\n        result = task_func(input_data)\n        self.assertIsInstance(result, Counter, \"The result should be a Counter object when input has mixed types\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a dictionary in which keys are random letters and values are lists of random integers. The dictionary is then sorted by the mean of the values in descending order, demonstrating the use of the statistics library.\nThe function should output with:\n    dict: The sorted dictionary with letters as keys and lists of integers as values, sorted by their mean values.\nYou should write self-contained code starting with:\n```\nimport random\nimport statistics\ndef task_func(LETTERS):\n```",
        "gt": "import random\nimport statistics\ndef task_func(LETTERS):\n    random_dict = {k: [random.randint(0, 100) for _ in range(random.randint(1, 10))] for k in LETTERS}\n    sorted_dict = dict(sorted(random_dict.items(), key=lambda item: statistics.mean(item[1]), reverse=True))\n    return sorted_dict",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def setUp(self):\n        # Setting up a common letters array and sorted dictionary for use in all tests\n        self.letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n        self.sorted_dict = task_func(self.letters)\n    def test_case_1(self):\n        # Check if the function returns a dictionary\n        self.assertIsInstance(self.sorted_dict, dict, \"The function should return a dictionary.\")\n    def test_case_2(self):\n        # Ensure all keys in the sorted dictionary are within the provided letters\n        all_letters = all([key in self.letters for key in self.sorted_dict.keys()])\n        self.assertTrue(all_letters, \"All keys of the dictionary should be letters.\")\n        \n    def test_case_3(self):\n        # Ensure all values are lists of integers\n        all_lists = all([isinstance(val, list) and all(isinstance(i, int) for i in val) for val in self.sorted_dict.values()])\n        self.assertTrue(all_lists, \"All values of the dictionary should be lists of integers.\")\n        \n    def test_case_4(self):\n        # Check if the dictionary is sorted by the mean values in descending order\n        means = [statistics.mean(val) for val in self.sorted_dict.values()]\n        self.assertTrue(all(means[i] >= means[i + 1] for i in range(len(means) - 1)), \"The dictionary should be sorted in descending order based on the mean of its values.\")\n    \n    def test_case_5(self):\n        # Check if the dictionary includes all provided letters as keys\n        self.assertEqual(set(self.sorted_dict.keys()), set(self.letters), \"The dictionary should have all provided letters as keys.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert a list of time strings from UTC to a specified timezone and return a DataFrame. The function processes each UTC time string in the given list, converts it to the specified timezone, and stores the results in a DataFrame.\nNote that: The function assumes that the input times are in UTC.\nThe function should output with:\n    pandas.DataFrame: A DataFrame with two columns: 'Original Time'\n    containing the UTC times and 'Converted Time' containing the times converted to the target timezone.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pandas as pd\n# For Python versions lower than 3.9, use 'pytz' instead of 'zoneinfo'\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n```",
        "gt": "from datetime import datetime\nimport pandas as pd\n# For Python versions lower than 3.9, use 'pytz' instead of 'zoneinfo'\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\nTIME_FORMAT = \"%d/%m/%y %H:%M:%S.%f\"\ndef task_func(time_strings, target_tz):\n    data = []\n\n    for time_string in time_strings:\n        utc_time = datetime.strptime(time_string, TIME_FORMAT)\n        converted_time = utc_time.replace(tzinfo=ZoneInfo(\"UTC\")).astimezone(\n            ZoneInfo(target_tz)\n        )\n        data.append([time_string, converted_time.strftime(TIME_FORMAT)])\n\n    df = pd.DataFrame(data, columns=[\"Original Time\", \"Converted Time\"])\n    return df",
        "test": "import unittest\ntry:\n    from zoneinfo import ZoneInfo\nexcept ImportError:\n    from pytz import timezone as ZoneInfo\n# Test cases\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func\"\"\"\n    def test_conversion_from_utc(self):\n        \"\"\"Test conversion from UTC to Eastern Standard Time.\"\"\"\n        time_strings = [\"01/01/21 00:00:00.000\", \"01/01/21 12:00:00.000\"]\n        df = task_func(time_strings, \"America/New_York\")\n        expected = [\"31/12/20 19:00:00.000000\", \"01/01/21 07:00:00.000000\"]\n        self.assertEqual(list(df[\"Converted Time\"]), expected)\n    def test_conversion_from_non_utc(self):\n        \"\"\"Test conversion from Eastern Standard Time to India Standard Time.\"\"\"\n        time_strings = [\"01/01/21 00:00:00.000\", \"01/01/21 12:00:00.000\"]\n        df = task_func(time_strings, \"Asia/Kolkata\")\n        expected = [\"01/01/21 05:30:00.000000\", \"01/01/21 17:30:00.000000\"]\n        self.assertEqual(list(df[\"Converted Time\"]), expected)\n    def test_empty_list(self):\n        \"\"\"Test empty list.\"\"\"\n        df = task_func([], \"America/New_York\")\n        self.assertEqual(len(df), 0)\n    def test_invalid_time_string(self):\n        \"\"\"Test invalid time string.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func([\"invalid_time_string\"], \"America/New_York\")\n    def test_non_standard_time_format(self):\n        \"\"\"Test handling of non-standard time format.\"\"\"\n        time_strings = [\"2021-01-01 00:00:00\"]\n        with self.assertRaises(ValueError):\n            task_func(time_strings, \"America/New_York\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a pie chart of the number of unique values in a given DataFrame column with an optional title.\nNote that: Each unique value in the column is represented by a slice in the pie chart with a unique color from a predefined set. The pie chart can have a title if specified.\nThe function should raise the exception for: The input df must be DataFrame, not be empty, and must contain the specified column, if it is not, the function will raise ValueError.\nThe function should output with:\n    Axes: A matplotlib axes object representing the pie chart.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Constants for pie chart colors\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\n# Constants for pie chart colors\nCOLORS = ['r', 'g', 'b', 'y', 'm']\ndef task_func(df, col, title=None):\n\n    # Ensure that the DataFrame is not empty and the specified column exists\n    if not isinstance(df, pd.DataFrame) or df.empty or col not in df.columns:\n        raise ValueError(\"The DataFrame is empty or the specified column does not exist.\")\n\n    # Compute the value counts for the specified column\n    value_counts = df[col].value_counts()\n\n    # Plot the pie chart with an optional title\n    ax = value_counts.plot(kind='pie', colors=COLORS[:len(value_counts)], autopct='%1.1f%%')\n    if title:\n        plt.title(title)\n\n    return ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup fake data for testing\n        self.df = pd.DataFrame({\n            'fruit': ['apple', 'banana', 'orange', 'apple', 'banana', 'banana'],\n            'quantity': [10, 15, 5, 10, 15, 15]\n        })\n    def test_valid_input(self):\n        # Test with valid input and column\n        ax = task_func(self.df, 'fruit')\n        self.assertIsInstance(ax, plt.Axes)\n        plt.close()\n    def test_nonexistent_column(self):\n        # Test with a nonexistent column\n        with self.assertRaises(Exception):\n            task_func(self.df, 'color')\n        plt.close()\n    def test_empty_dataframe(self):\n        # Test with an empty DataFrame\n        with self.assertRaises(Exception):\n            task_func(pd.DataFrame(), 'fruit')\n        plt.close()\n    def test_pie_chart_title(self):\n        # Test with a title for the pie chart\n        title = \"Distribution of Fruits\"\n        ax = task_func(self.df, 'fruit', title=title)\n        self.assertEqual(ax.get_title(), title)\n        plt.close()\n    def test_numeric_data(self):\n        # Test with numeric data\n        ax = task_func(self.df, 'quantity')\n        self.assertIsInstance(ax, plt.Axes)\n        plt.close()\n        \n    def test_color_length(self):\n        # Test if the number of colors matches the number of unique values\n        ax = task_func(self.df, 'fruit')\n        try:\n            self.assertEqual(3 <= len(ax.patches) <= 5, True)\n        except:\n            self\n        plt.close()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Appends a randomly selected integer between 0 and 100 to the given list 'my_list' and returns a numpy array of random floating-point numbers. The size of the returned array is equal to the sum of the numbers in the modified list.\nThe function should output with:\n    numpy.ndarray: An array of random floating-point numbers. The length of the array\n    is equal to the sum of the integers in 'my_list' after a random\n    number has been appended.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport random\ndef task_func(my_list):\n```",
        "gt": "import numpy as np\nimport random\ndef task_func(my_list):\n    random_number = random.randint(0, 100)\n    my_list.append(random_number)\n\n    size = sum(my_list)\n    random_array = np.random.rand(size)\n\n    return random_array",
        "test": "import unittest\nfrom unittest.mock import patch\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\" Test that the function returns a numpy array. \"\"\"\n        result = task_func([1, 2, 3])\n        self.assertIsInstance(result, np.ndarray)\n    @patch('random.randint', return_value=50)\n    def test_array_size(self, mock_randint):\n        \"\"\" Test that the returned array has the correct size. \"\"\"\n        input_list = [1, 2, 3]\n        expected_size = sum(input_list) + 50  # The function adds a mocked random number to the list\n        result = task_func(input_list)\n        self.assertEqual(len(result), expected_size)\n    @patch('random.randint', return_value=50)\n    def test_list_modification(self, mock_randint):\n        \"\"\" Test that the input list is modified correctly with a mocked random value. \"\"\"\n        input_list = [1, 2, 3]\n        task_func(input_list)\n        self.assertIn(50, input_list)  # Asserting the list contains the mocked random value\n    @patch('random.randint', return_value=50)\n    def test_empty_list(self, mock_randint):\n        \"\"\" Test the function with an empty list and a mocked random addition. \"\"\"\n        result = task_func([])\n        self.assertEqual(len(result), 50)  # Expecting the array size to be equal to the mocked random number\n    @patch('numpy.random.rand')\n    @patch('random.randint', return_value=50)\n    def test_mock_random_array(self, mock_randint, mock_rand):\n        \"\"\" Test the function with mocks of randint and np.random.rand to control the randomness. \"\"\"\n        mock_rand.return_value = np.array([0.5] * 53)  # Setting the mock array size to 53\n        input_list = [1, 2]\n        result = task_func(input_list)\n        mock_rand.assert_called_once_with(53)  # Assert that np.random.rand is called with the size after adding 50\n        np.testing.assert_array_equal(result, np.array([0.5] * 53))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Execute a list of shell commands read from a CSV file and save the outputs in separate files. Each command's output is written to a unique file in the specified output directory. If a command fails, the error message along with the exit code is appended to the respective output file.\nThe function should raise the exception for: FileNotFoundError: If the commands_file_path does not exist.\nThe function should output with:\n    list of str: A list of paths to the output files created in the output directory, each named as\n    'command_X_output.txt', where X is the command index. If a command execution fails,\n    the output file will contain a descriptive error message and the exit code.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n```",
        "gt": "import subprocess\nimport csv\nimport os\ndef task_func(commands_file_path, output_dir_path):\n    # Check if commands_file_path exists\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"File '{commands_file_path}' not found.\")\n    \n    # Check if output_dir_path exists, if not, create it\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n    \n    # Read commands from the CSV file\n    with open(commands_file_path, 'r') as f:\n        reader = csv.reader(f)\n        commands = [cmd[0] for cmd in list(reader)]\n    \n    output_files = []\n    for i, command in enumerate(commands):\n        output_file = f'{output_dir_path}/command_{i+1}_output.txt'\n        with open(output_file, 'w') as f:\n            ret_code = subprocess.call(command, shell=True, stdout=f, stderr=subprocess.STDOUT)\n            if ret_code != 0:\n                f.write(f\"\\nError executing command, exited with code {ret_code}\")\n        output_files.append(output_file)\n\n    return output_files",
        "test": "import unittest\nimport tempfile\nimport shutil\nimport os\nimport csv\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Setup temporary directories for outputs and inputs\n        self.temp_dir = tempfile.mkdtemp()\n        self.output_dir_path = tempfile.mkdtemp()\n    def tearDown(self):\n        # Remove temporary directories after each test\n        shutil.rmtree(self.temp_dir)\n        shutil.rmtree(self.output_dir_path)\n    def test_successful_command_execution(self):\n        # Create a CSV file with valid commands\n        commands_path = os.path.join(self.temp_dir, \"valid_commands.csv\")\n        with open(commands_path, \"w\", newline='') as file:\n            writer = csv.writer(file)\n            writer.writerow([\"echo Hello\"])\n        result = task_func(commands_path, self.output_dir_path)\n        self.assertEqual(len(result), 1)\n        with open(os.path.join(self.output_dir_path, result[0]), \"r\") as f:\n            content = f.read()\n            self.assertIn(\"Hello\", content)\n    def test_file_not_found(self):\n        # Testing for FileNotFoundError with an invalid file path\n        with self.assertRaises(FileNotFoundError):\n            task_func(os.path.join(self.temp_dir, \"nonexistent.csv\"), self.output_dir_path)\n    def test_invalid_command(self):\n        # Create a CSV file with an invalid command\n        commands_path = os.path.join(self.temp_dir, \"invalid_command.csv\")\n        with open(commands_path, \"w\", newline='') as file:\n            writer = csv.writer(file)\n            writer.writerow([\"invalid_command_xyz\"])\n        result = task_func(commands_path, self.output_dir_path)\n        self.assertEqual(len(result), 1)\n        with open(os.path.join(self.output_dir_path, result[0]), \"r\") as f:\n            content = f.read()\n            self.assertIn(\"invalid_command_xyz\", content)\n            self.assertIn(\"not found\", content)\n    def test_empty_csv_file(self):\n        # Test with an empty CSV file\n        empty_commands_path = os.path.join(self.temp_dir, \"empty.csv\")\n        with open(empty_commands_path, \"w\", newline='') as file:\n            pass\n        result = task_func(empty_commands_path, self.output_dir_path)\n        self.assertEqual(len(result), 0)\n    def test_mixed_commands(self):\n        # Test with a mix of valid and invalid commands\n        commands_path = os.path.join(self.temp_dir, \"mixed_commands.csv\")\n        with open(commands_path, \"w\", newline='') as file:\n            writer = csv.writer(file)\n            writer.writerow([\"echo Mixed Commands\"])\n            writer.writerow([\"invalid_command_abc\"])\n        result = task_func(commands_path, self.output_dir_path)\n        self.assertEqual(len(result), 2)\n        with open(os.path.join(self.output_dir_path, result[1]), \"r\") as f:\n            content = f.read()\n            self.assertIn(\"invalid_command_abc\", content)\n            self.assertIn(\"not found\", content)\n    \n    def test_command_failure_with_specific_exit_code(self):\n        # Prepare a CSV with a command guaranteed to fail and return a specific exit code\n        commands_path = os.path.join(self.temp_dir, \"failing_commands.csv\")\n        with open(commands_path, \"w\", newline='') as file:\n            writer = csv.writer(file)\n            writer.writerow([\"exit 1\"])\n        \n        result = task_func(commands_path, self.output_dir_path)\n        self.assertEqual(len(result), 1)\n        with open(os.path.join(self.output_dir_path, result[0]), \"r\") as f:\n            content = f.read()\n            self.assertIn(\"Error executing command\", content)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform DBSCAN clustering on the data by transforming it into a DataFrame and recording the clusters in a new column named 'Cluster'. Please choose the parameters eps=3 and min_samples=2.\nThe function should output with:\n    df (DataFrame): The DataFrame with a new 'Cluster' column.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n```",
        "gt": "import pandas as pd\nfrom sklearn.cluster import DBSCAN\ndef task_func(data, cols):\n    df = pd.DataFrame(data, columns=cols)\n    dbscan = DBSCAN(eps=3, min_samples=2)\n    df['Cluster'] = dbscan.fit_predict(df)\n    return df",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        df = task_func([[5.1, 3.5], [4.9, 3.0], [4.7, 3.2]], ['x', 'y'])\n        print(df)\n        self.assertTrue('Cluster' in df.columns)\n        self.assertTrue(np.array_equal(df['Cluster'], np.array([0, 0, 0])))\n    def test_case_2(self):\n        df = task_func([[1, 2], [3, 4], [5, 6]], ['x', 'y'])\n        self.assertTrue('Cluster' in df.columns)\n        self.assertTrue(np.array_equal(df['Cluster'], np.array([0, 0, 0])))\n    def test_case_3(self):\n        df = task_func([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]], ['x', 'y'])\n        self.assertTrue('Cluster' in df.columns)\n        self.assertTrue(np.array_equal(df['Cluster'], np.array([0, 0, 0, 1, 1, -1])))\n    def test_case_4(self):\n        df = task_func([[1, 2, 3], [2, 2, 2], [2, 3, 4], [8, 7, 6], [8, 8, 8], [25, 80, 100]], ['x', 'y', 'z'])\n        self.assertTrue('Cluster' in df.columns)\n        self.assertTrue(np.array_equal(df['Cluster'], np.array([0, 0, 0, 1, 1, -1])))\n    def test_case_5(self):\n        df = task_func([[-1, -2], [-2, -2], [-2, -3], [-8, -7], [-8, -8], [-25, -80]], ['x', 'y'])\n        self.assertTrue('Cluster' in df.columns)\n        self.assertTrue(np.array_equal(df['Cluster'], np.array([0, 0, 0, 1, 1, -1])))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Serializes an object into a JSON string with support for complex data types like Enum. The function uses a custom JSONEncoder to handle Enum types by converting them to their names or values. Serialize a simple dictionary. >>> task_func({'name': 'Alice', 'age': 30}) '{\"name\": \"Alice\", \"age\": 30}'\nThe function should output with:\n    str: The serialized JSON string of the object.\nYou should write self-contained code starting with:\n```\nimport json\nfrom enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\ndef task_func(my_obj):\n```",
        "gt": "import json\nfrom enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\ndef task_func(my_obj):\n    class EnumEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name  # or obj.value, depending on the requirement\n            return json.JSONEncoder.default(self, obj)\n    return json.dumps(my_obj, cls=EnumEncoder)",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_enum_serialization(self):\n        # Test serialization of a dictionary containing an Enum to check if the Enum is properly converted to its name.\n        obj = {'color': Color.RED}\n        result = task_func(obj)\n        self.assertIn('\"color\": \"RED\"', result)\n    def test_multiple_enum_serialization(self):\n        # Test serialization of a dictionary with a list of Enums to verify if all Enums are correctly serialized by their names.\n        obj = {'colors': [Color.RED, Color.GREEN, Color.BLUE]}\n        result = task_func(obj)\n        self.assertIn('\"colors\": [\"RED\", \"GREEN\", \"BLUE\"]', result)\n    def test_no_enum_serialization(self):\n        # Test serialization of a simple dictionary without Enums to ensure basic JSON serialization functionality is unaffected.\n        obj = {'name': 'Bob', 'age': 25}\n        result = task_func(obj)\n        self.assertEqual(result, '{\"name\": \"Bob\", \"age\": 25}')\n    def test_nested_enum_serialization(self):\n        # Test serialization of a nested dictionary containing an Enum to ensure deep serialization handles Enums correctly.\n        obj = {'person': {'name': 'Alice', 'favorite_color': Color.BLUE}}\n        result = task_func(obj)\n        self.assertIn('\"favorite_color\": \"BLUE\"', result)\n    def test_empty_object_serialization(self):\n        # Test serialization of an empty dictionary to verify the encoder handles empty objects correctly.\n        obj = {}\n        result = task_func(obj)\n        self.assertEqual(result, '{}')\n    def test_direct_enum_serialization(self):\n        # Test direct serialization of an Enum instance\n        result = task_func(Color.GREEN)\n        self.assertEqual(result, '\"GREEN\"')\n    def test_complex_nested_structures(self):\n        # Test serialization of complex nested structures including Enum\n        obj = {'people': [{'name': 'Alice', 'favorite_color': Color.BLUE}, {'name': 'Bob', 'favorite_color': Color.RED}]}\n        result = task_func(obj)\n        self.assertIn('\"favorite_color\": \"BLUE\"', result)\n        self.assertIn('\"favorite_color\": \"RED\"', result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a json file with a number of n randomly selected words from a constant list named WORDS.\nThe function should output with:\n    str: The name of the json file generated.\nYou should write self-contained code starting with:\n```\nfrom collections import Counter\nimport json\nimport random\n# Constants\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n```",
        "gt": "from collections import Counter\nimport json\nimport random\n# Constants\nWORDS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\ndef task_func(n, file_name, seed=77):\n    random.seed(seed)\n    if n < 1 or n > len(WORDS):\n        raise ValueError('n must be greater than 0')\n    random.shuffle(WORDS)\n    selected_words = WORDS[:n]\n    counts = Counter(selected_words)\n\n    with open(file_name, 'w') as f:\n        json.dump(dict(counts), f)\n\n    return file_name",
        "test": "import unittest\nimport os\nimport doctest\nclass TestCases(unittest.TestCase):\n    file_name = \"word_counts.json\"\n    def tearDown(self) -> None:\n        if os.path.exists(self.file_name):\n            os.remove(self.file_name)\n    def test_case_1(self):\n        # Test with n = 3\n        self.file_name = task_func(3, self.file_name)\n        self.assertTrue(os.path.exists(self.file_name))\n        with open(self.file_name, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(len(data), 3)\n        \n    def test_case_2(self):\n        # Test with n = 5\n        self.file_name = task_func(5, self.file_name, 29)\n        self.assertTrue(os.path.exists(self.file_name))\n        with open(self.file_name, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(len(data), 5)\n        # Test if the counts are correct\n        self.assertEqual(data['honeydew'], 1)\n        self.assertEqual(data['elderberry'], 1)\n        self.assertEqual(data['grape'], 1)\n        self.assertEqual(data['cherry'], 1)\n        self.assertEqual(data['banana'], 1)\n        \n    def test_case_3(self):\n        # Test with n less than 1\n        with self.assertRaises(ValueError):\n            task_func(0, self.file_name)\n            \n    def test_case_4(self):\n        # Test with n greater than length of WORDS list\n        with self.assertRaises(ValueError):\n            task_func(100, self.file_name)\n            \n    def test_case_5(self):\n        # Test with n equal to length of WORDS list\n        self.file_name = task_func(\n            len(\n                ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\n            ),\n            self.file_name\n        )\n        self.assertTrue(os.path.exists(self.file_name))\n        with open(self.file_name, 'r') as f:\n            data = json.load(f)\n        self.assertEqual(\n            len(data), \n            len(\n                ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\n            )\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Create a Django HttpResponse with JSON data, and include a UUID in the HTTP headers to track requests.\nThe function should output with:\n    HttpResponse: A Django HttpResponse with JSON data and UUID.\nYou should write self-contained code starting with:\n```\nfrom django.http import HttpResponse\nimport uuid\ndef task_func(data):\n```",
        "gt": "from django.http import HttpResponse\nimport uuid\ndef task_func(data):\n\n    response = HttpResponse(data, content_type='application/json')\n\n    # Generate a UUID\n    request_uuid = uuid.uuid4()\n\n    # Add the UUID to the response headers\n    response['UUID'] = str(request_uuid)\n\n    return response",
        "test": "import unittest\nimport json\nfrom django.conf import settings\nif not settings.configured:\n    settings.configure(DEBUG=True)\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Testing with a simple JSON data\n        input_data = json.dumps({\"key\": \"value\"})\n        response = task_func(input_data)\n        self.assertEqual(response.content.decode('utf-8'), input_data)\n        self.assertIn('UUID', response)\n        \n    def test_case_2(self):\n        # Testing with an empty JSON data\n        input_data = json.dumps({})\n        response = task_func(input_data)\n        self.assertEqual(response.content.decode('utf-8'), input_data)\n        self.assertIn('UUID', response)\n        \n    def test_case_3(self):\n        # Testing with a more complex JSON data\n        input_data = json.dumps({\"users\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Doe\", \"age\": 25}]})\n        response = task_func(input_data)\n        self.assertEqual(response.content.decode('utf-8'), input_data)\n        self.assertIn('UUID', response)\n    def test_case_4(self):\n        # Testing with JSON data containing special characters\n        input_data = json.dumps({\"description\": \"This is a sample data with special characters: !@#%^&*()_-+={[]}\"})\n        response = task_func(input_data)\n        self.assertEqual(response.content.decode('utf-8'), input_data)\n        self.assertIn('UUID', response)\n    def test_case_5(self):\n        # Testing with JSON data containing numeric values\n        input_data = json.dumps({\"numbers\": [1, 2, 3, 4, 5]})\n        response = task_func(input_data)\n        self.assertEqual(response.content.decode('utf-8'), input_data)\n        self.assertIn('UUID', response)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a dataset with a single feature and a target variable. The target is computed from the feature using a linear relation. In addition some gaussian noise (random samples from normal distributioin), scaled by noise_strength, is added to the target. The dataset is split into training and test sets. Then a linear regression model is adjusted to the training set and the R-squared score is calculated on the test set.\nThe function should raise the exception for: ValueError: If test set size is smaller than 2.\nThe function should output with:\n    float: The R-squared score of the fitted model on the test set.\n    LinearRegression: The trained linear regression model.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n```",
        "gt": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\ndef task_func(num_samples=500, noise_strength=1, random_seed=None, test_size=0.2):\n\n    if num_samples * test_size < 2:\n        raise ValueError(\"Test set should contain at least 2 samples. num_samples * testsize >=2\")\n\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    X = np.random.rand(num_samples, 1)\n    y = 2*X.squeeze() + 1 + np.random.randn(num_samples) * noise_strength\n\n    X_train, X_test, y_train, y_test = train_test_split(\n                                            X, y,\n                                            test_size=test_size,\n                                            random_state=random_seed\n                                            )\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    r_squared = model.score(X_test, y_test)\n\n    return r_squared, model",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        'rng reproducability'\n        r_squared1, _ = task_func(random_seed=42)\n        r_squared2, _ = task_func(random_seed=42)\n        self.assertEqual(r_squared1, r_squared2)\n    def test_case_2(self):\n        'default params'\n        r_squared, model = task_func(num_samples=1000)\n        self.assertTrue(0 <= r_squared <= 1)\n        self.assertTrue(isinstance(model, LinearRegression))\n        \n    def test_case_3(self):\n        'noise strength'\n        r_squared, model = task_func(noise_strength=0, random_seed=24)\n        self.assertAlmostEqual(r_squared, 1)\n        self.assertTrue(isinstance(model, LinearRegression))\n    def test_case_4(self):\n        'test set too small'\n        self.assertRaises(Exception, task_func, {'num_samples': 10, 'test_size': 0.1})\n    def test_case_5(self):\n        r_squared, model = task_func(num_samples=1000, noise_strength=1000, random_seed=24, test_size=0.3)\n        self.assertTrue(r_squared < 0.2)\n        self.assertTrue(isinstance(model, LinearRegression))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze a column of a pandas DataFrame, find the values that are larger than the average, and count the number of values that are larger than a given value.\nThe function should raise the exception for: ValueError: If the column does not exist in the DataFrame or value is not a number.\nThe function should output with:\n    tuple: A tuple containing (numpy.ndarray, int, matplotlib.axes.Axes).\n    The numpy array contains values greater than the average.\n    The int is the number of values greater than the given value.\n    The Axes object is for the generated histogram plot.\nYou should write self-contained code starting with:\n```\nimport bisect\nimport statistics\ndef task_func(df, column, value):\n```",
        "gt": "import bisect\nimport statistics\ndef task_func(df, column, value):\n    if column not in df.columns:\n        raise ValueError(f\"Column '{column}' does not exist in DataFrame\")\n    if not isinstance(value, (int, float)):\n        raise ValueError(\"Value must be a number\")\n\n    data = df[column].values\n    avg = statistics.mean(data)\n    greater_avg = data[data > avg]\n    \n    data.sort()\n    bpoint = bisect.bisect_right(data, value)\n    num_greater_value = len(data) - bpoint\n    \n    ax = df.hist(column=column, bins=10)[0][0]\n    # plt.show()\n    \n    return greater_avg, num_greater_value, ax",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.df = pd.DataFrame({'A': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})\n    def test_valid_input(self):\n        greater_avg, num_greater, ax = task_func(self.df, 'A', 5)\n        self.assertTrue(len(greater_avg) > 0)\n        self.assertTrue(num_greater >= 0)\n    def test_invalid_column(self):\n        with self.assertRaises(ValueError):\n            task_func(self.df, 'B', 5)\n    def test_invalid_value_type(self):\n        with self.assertRaises(ValueError):\n            task_func(self.df, 'A', 'five')\n    def test_empty_dataframe(self):\n        empty_df = pd.DataFrame()\n        with self.assertRaises(ValueError):\n            task_func(empty_df, 'A', 5)\n    def test_no_values_greater_than_average(self):\n        constant_df = pd.DataFrame({'A': [1, 1, 1, 1, 1]})\n        greater_avg, num_greater, ax = task_func(constant_df, 'A', 5)\n        self.assertEqual(len(greater_avg), 0)\n        self.assertEqual(num_greater, 0)\n    \n    def test_norma_value(self):\n        greater_avg, num_greater, ax = task_func(self.df, 'A', 5)\n        \n        self.assertEqual([6, 7, 8, 9, 10], list(greater_avg), \"list contents should match the expected output\")\n        self.assertEqual(num_greater, 5, \"value should match the expected output\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Converts an Excel file (.xls or .xlsx) to a CSV file by reading the contents of the Excel file and writing them to a new CSV file with the same name but a different extension. Allows specifying separate paths for the Excel file source and the CSV file destination.\nNote that: This function assumes the active sheet is the one to be converted.\nThe function should output with:\n    str: The name of the created CSV file.\nYou should write self-contained code starting with:\n```\nimport os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n```",
        "gt": "import os\nimport csv\nfrom openpyxl import load_workbook\ndef task_func(file_name, excel_file_path, csv_file_path) -> str:\n\n    excel_file = os.path.join(excel_file_path, file_name)\n    # Check if the Excel file exists\n    if not os.path.isfile(excel_file):\n        raise FileNotFoundError(f\"[Errno 2] No such file or directory: '{excel_file}'\")\n\n    workbook = load_workbook(filename=excel_file, read_only=True)\n    sheet = workbook.active\n\n    data = [[cell.value for cell in row] for row in sheet.iter_rows()]\n\n    csv_file_name = os.path.splitext(file_name)[0] + '.csv'\n    csv_file = os.path.join(csv_file_path, csv_file_name)\n\n    with open(csv_file, 'w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n\n    return csv_file_name",
        "test": "import unittest\nfrom unittest.mock import patch\nimport tempfile\nimport shutil\nfrom pathlib import Path\nimport openpyxl\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory\n        self.test_dir = tempfile.mkdtemp()\n        self.mock_excel_path = Path(self.test_dir)\n        self.mock_csv_path = Path(self.test_dir)\n    def tearDown(self):\n        # Remove the directory after the test\n        shutil.rmtree(self.test_dir)\n    def create_temp_excel_file(self, file_name: str):\n        \"\"\"Helper function to create a temporary Excel file for testing.\"\"\"\n        workbook = openpyxl.Workbook()\n        worksheet = workbook.active\n        worksheet['A1'] = 'Hello'\n        worksheet['B1'] = 'World'\n        temp_file_path = self.mock_excel_path / file_name\n        workbook.save(filename=temp_file_path)\n        return temp_file_path\n    def test_successful_conversion(self):\n        \"\"\"Test that an Excel file is successfully converted to a CSV file.\"\"\"\n        excel_file_name = 'test.xlsx'\n        self.create_temp_excel_file(excel_file_name)\n        result = task_func(excel_file_name, str(self.mock_excel_path), str(self.mock_csv_path))\n        self.assertEqual(result, 'test.csv')\n    @patch('openpyxl.load_workbook')\n    def test_return_type(self, mock_load_workbook):\n        \"\"\"Ensure the function returns a string indicating the CSV file name.\"\"\"\n        excel_file_name = 'test.xlsx'\n        temp_file_path = self.create_temp_excel_file(excel_file_name)\n        mock_load_workbook.return_value.active.iter_rows.return_value = iter([])\n        result = task_func(excel_file_name, str(self.mock_excel_path), str(self.mock_csv_path))\n        self.assertIsInstance(result, str)\n    def test_file_not_found(self):\n        \"\"\"Check that FileNotFoundError is raised when the Excel file does not exist.\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            task_func('nonexistent.xlsx', str(self.mock_excel_path), str(self.mock_csv_path))\n    def test_csv_file_creation(self):\n        \"\"\"Test that a CSV file is created with the expected content from the Excel file.\"\"\"\n        excel_file_name = 'test.xlsx'\n        self.create_temp_excel_file(excel_file_name)\n        # Call the function under test\n        csv_file_name = task_func(excel_file_name, str(self.mock_excel_path), str(self.mock_csv_path))\n        csv_file_path = self.mock_csv_path / csv_file_name\n        # Check if the CSV file was actually created\n        self.assertTrue(os.path.exists(csv_file_path), f\"CSV file was not created: {csv_file_path}\")\n        # Check the content of the created CSV file\n        expected_content = [['Hello', 'World']]  # Adjust this based on the actual content of your Excel file\n        with open(csv_file_path, newline='', encoding='utf-8') as csv_file:\n            reader = csv.reader(csv_file)\n            actual_content = list(reader)\n            self.assertEqual(actual_content, expected_content, \"CSV file content does not match expected content.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extract all texts that are not enclosed in square brackets from the given string and plot a frequency distribution of the words. Also return the top_n most common words in the frequency distribution as a dictionary.\nThe function should output with:\n    Axes: A matplotlib Axes object representing the frequency distribution plot.\n    dict: A dictionary containing the top_n most common words and their frequencies.\nYou should write self-contained code starting with:\n```\nimport re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\ndef task_func(example_str, top_n=30):\n```",
        "gt": "import re\nimport matplotlib.pyplot as plt\nfrom nltk.probability import FreqDist\ndef task_func(example_str, top_n=30):\n    text = ' '.join(re.findall('(.*?)\\\\[.*?\\\\]', example_str))\n    words = text.split()\n    fdist = FreqDist(words)\n\n    if top_n > len(fdist):\n        top_n = len(fdist)\n    # Initialize a fresh plot for the frequency distribution but do not show it\n    plt.figure()\n    ax = fdist.plot(top_n, cumulative=False, show=False)\n    plt.close()\n\n    top_n_words = dict(fdist.most_common(top_n))\n    return ax, top_n_words",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        example_str = \"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003] Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\"\n        ax, top_n_words = task_func(example_str)\n        self.assertIsInstance(ax, plt.Axes, \"The returned object is not of type plt.Axes.\")\n        # Test the number of words in the plot\n        self.assertEqual(len(ax.get_xticklabels()), 4, \"The number of words in the plot is not 30.\")\n        # Test the top_n_words dictionary\n        self.assertEqual(top_n_words, {'Smith': 2, 'Josie': 1, 'Mugsy': 1, 'Dog': 1}, \"The top_n_words dictionary is incorrect.\")\n    def test_case_2(self):\n        example_str = \"Hello [1234 STREET, CITY, STATE 12345] World [5678 LANE, TOWN, PROVINCE 67890]\"\n        ax, _ = task_func(example_str)\n        self.assertIsInstance(ax, plt.Axes, \"The returned object is not of type plt.Axes.\")\n    def test_case_3(self):\n        example_str = \"[IGNORE THIS] This is a simple test string [ANOTHER IGNORE]\"\n        ax, top_n_words = task_func(example_str, top_n=5)\n        self.assertIsInstance(ax, plt.Axes, \"The returned object is not of type plt.Axes.\")\n        # Test the histogram data\n        #self.assertEqual(len(ax.patches), 5, \"The number of words in the plot is not 5.\")\n        # Test the top_n_words dictionary\n        self.assertEqual(top_n_words, {'This': 1, 'is': 1, 'a': 1, 'simple': 1, 'test': 1}, \"The top_n_words dictionary is incorrect.\")\n    \n    def test_case_4(self):\n        example_str = \"[BEGIN] Testing the function with different [MIDDLE] types of input strings [END]\"\n        ax, _ = task_func(example_str)\n        self.assertIsInstance(ax, plt.Axes, \"The returned object is not of type plt.Axes.\")\n    \n    def test_case_5(self):\n        example_str = \"Example without any brackets so all words should be considered.\"\n        ax, _ = task_func(example_str)\n        self.assertIsInstance(ax, plt.Axes, \"The returned object is not of type plt.Axes.\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate random numeric data across a specified range for a given number of categories and visualize it with a stacked bar chart. >>> fig = task_func(num_labels=3, data_range=(1, 10)) >>> fig.show()  # This will display the figure with three labels and data range from 1 to 10\nThe function should output with:\n    matplotlib.figure.Figure: A Figure object containing the stacked bar chart of the generated data.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef task_func(num_labels=5, data_range=(0, 1)):\n    np.random.seed(0)\n    columns = [f'Label{i + 1}' for i in range(num_labels)]\n    data = pd.DataFrame(np.random.uniform(data_range[0], data_range[1], size=(num_labels, num_labels)), columns=columns)\n\n    fig, ax = plt.subplots()\n\n    data.plot(kind='bar', stacked=True, ax=ax)\n\n    return fig",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)  # Fixing the seed for the sake of determinism in tests\n    @patch('matplotlib.pyplot.subplots')\n    @patch('pandas.DataFrame.plot')\n    def test_default_parameters(self, mock_plot, mock_subplots):\n        \"\"\"Test using default parameters.\"\"\"\n        # Mock figure and axes creation\n        mock_fig = MagicMock()\n        mock_ax = MagicMock()\n        mock_subplots.return_value = (mock_fig, mock_ax)\n        # Call the function\n        fig = task_func()\n        # Assertions to ensure plot was called correctly\n        mock_plot.assert_called_once()\n        mock_plot.assert_called_with(kind='bar', stacked=True, ax=mock_ax)\n        self.assertIsInstance(fig, MagicMock)\n    @patch('matplotlib.pyplot.subplots')\n    @patch('pandas.DataFrame.plot')\n    def test_custom_parameters(self, mock_plot, mock_subplots):\n        \"\"\"Test with custom parameters.\"\"\"\n        # Mock figure and axes creation\n        mock_fig = MagicMock()\n        mock_ax = MagicMock()\n        mock_subplots.return_value = (mock_fig, mock_ax)\n        # Call the function with custom parameters\n        num_labels = 4\n        data_range = (1, 10)\n        fig = task_func(num_labels=num_labels, data_range=data_range)\n        # Assertions to ensure plot was called correctly\n        mock_plot.assert_called_once()\n        mock_plot.assert_called_with(kind='bar', stacked=True, ax=mock_ax)\n        self.assertIsInstance(fig, MagicMock)\n    @patch('matplotlib.pyplot.subplots')\n    @patch('pandas.DataFrame.plot')\n    def test_custom_data_range(self, mock_plot, mock_subplots):\n        \"\"\"Test with a custom data range.\"\"\"\n        data_range = (10, 20)\n        mock_fig = MagicMock()\n        mock_ax = MagicMock()\n        mock_subplots.return_value = (mock_fig, mock_ax)\n        # Call the function with a custom data range\n        fig = task_func(data_range=data_range)\n        # Assertions to ensure plot was called correctly\n        mock_plot.assert_called_once()\n        mock_plot.assert_called_with(kind='bar', stacked=True, ax=mock_ax)\n        self.assertIsInstance(fig, MagicMock)\n    @patch('matplotlib.pyplot.subplots')\n    @patch('pandas.DataFrame.plot')\n    def test_combined_parameters(self, mock_plot, mock_subplots):\n        \"\"\"Test with combined custom parameters.\"\"\"\n        num_labels = 7\n        data_range = (5, 15)\n        mock_fig = MagicMock()\n        mock_ax = MagicMock()\n        mock_subplots.return_value = (mock_fig, mock_ax)\n        # Call the function with custom number of labels and data range\n        fig = task_func(num_labels=num_labels, data_range=data_range)\n        # Assertions to ensure plot was called correctly\n        mock_plot.assert_called_once()\n        mock_plot.assert_called_with(kind='bar', stacked=True, ax=mock_ax)\n        self.assertIsInstance(fig, MagicMock)\n    def test_generate_data_structure(self):\n        \"\"\"Test the structure and range of generated data\"\"\"\n        num_labels = 4\n        data_range = (10, 20)\n        columns = [f'Label{i + 1}' for i in range(num_labels)]\n        df = pd.DataFrame(np.random.uniform(data_range[0], data_range[1], size=(num_labels, num_labels)),\n                          columns=columns)\n        # Check correct number of labels (columns)\n        self.assertEqual(len(df.columns), num_labels)\n        # Check correct number of entries (rows)\n        self.assertEqual(len(df), num_labels)\n        # Check all values are within specified range\n        for value in df.values.flatten():\n            self.assertTrue(data_range[0] <= value <= data_range[1])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random RGB image and view it.\nThe function should raise the exception for: ValueError: If range_low is not less than range_high.\nThe function should output with:\n    ax (matplotlib.axes.Axes): Axes object of the plot.\n    image (numpy.ndarray): The numpy array of the generated image.\nYou should write self-contained code starting with:\n```\nimport random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n```",
        "gt": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high.\")\n\n    random.seed(seed)\n    np.random.seed(seed)\n    image = np.zeros(image_size, dtype=np.uint8)\n\n    for i in range(image_size[0]):\n        for j in range(image_size[1]):\n            for k in range(image_size[2]):\n                image[i, j, k] = random.randint(range_low, range_high)\n\n    fig, ax = plt.subplots()\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.set_title('Random RGB Image')\n    return ax, image",
        "test": "# Unit Tests\nimport unittest\nimport random \nimport numpy as np \nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_image_size_and_type(self):\n        _, image = task_func(image_size=(20, 20, 3))\n        self.assertEqual(image.shape, (20, 20, 3), \"Image size is incorrect\")\n        self.assertTrue(image.dtype == np.uint8, \"Image type is incorrect\")\n        \n        random.seed(42)\n        np.random.seed(42)\n  \n        expect = [[[57, 12, 140], [125, 114, 71], [52, 44, 216], [16, 15, 47], [111, 119, 13], [101, 214, 112], [229, 142, 3], [81, 216, 174], [142, 79, 110], [172, 52, 47], [194, 49, 183], [176, 135, 22], [235, 63, 193], [40, 150, 185], [98, 35, 23], [116, 148, 40], [119, 51, 194], [142, 232, 186], [83, 189, 181], [107, 136, 36]], [[87, 125, 83], [236, 194, 138], [112, 166, 28], [117, 16, 161], [205, 137, 33], [108, 161, 108], [255, 202, 234], [73, 135, 71], [126, 134, 219], [204, 185, 112], [70, 252, 46], [24, 56, 78], [81, 216, 32], [197, 195, 239], [128, 5, 58], [136, 174, 57], [150, 222, 80], [232, 1, 134], [91, 54, 152], [101, 78, 191]], [[82, 0, 165], [250, 9, 57], [185, 157, 122], [29, 123, 40], [43, 248, 35], [64, 65, 243], [84, 135, 216], [108, 102, 159], [204, 191, 224], [231, 61, 126], [115, 32, 173], [10, 117, 112], [3, 36, 30], [117, 34, 16], [169, 36, 121], [142, 248, 109], [67, 242, 124], [242, 208, 97], [48, 49, 220], [181, 216, 210]], [[239, 27, 50], [31, 206, 173], [55, 127, 98], [97, 229, 71], [216, 93, 142], [236, 127, 38], [226, 50, 25], [7, 47, 121], [85, 208, 248], [246, 109, 205], [30, 84, 194], [1, 199, 135], [232, 146, 216], [249, 79, 97], [151, 111, 29], [31, 160, 29], [25, 244, 80], [29, 41, 95], [35, 34, 120], [206, 61, 126]], [[20, 41, 214], [161, 133, 104], [160, 122, 135], [202, 67, 153], [234, 161, 37], [4, 234, 51], [37, 109, 135], [67, 178, 35], [125, 189, 145], [80, 224, 154], [4, 153, 53], [68, 135, 59], [54, 79, 139], [144, 107, 175], [104, 135, 250], [128, 26, 47], [216, 141, 22], [1, 170, 66], [134, 82, 226], [218, 4, 57]], [[38, 76, 18], [189, 75, 220], [65, 21, 157], [186, 20, 183], [107, 127, 52], [181, 208, 79], [121, 83, 90], [211, 12, 91], [170, 210, 127], [136, 81, 55], [195, 19, 240], [113, 102, 235], [179, 156, 116], [114, 12, 98], [204, 168, 142], [35, 142, 179], [204, 169, 14], [59, 133, 91], [135, 19, 55], [222, 176, 160]], [[223, 59, 197], [97, 130, 22], [223, 0, 100], [186, 220, 35], [169, 160, 63], [153, 158, 209], [167, 206, 151], [65, 98, 215], [194, 89, 154], [207, 0, 155], [146, 107, 220], [164, 238, 226], [226, 109, 242], [86, 43, 145], [171, 47, 120], [158, 115, 101], [75, 12, 23], [125, 243, 37], [233, 212, 99], [196, 253, 204]], [[124, 75, 2], [54, 217, 112], [90, 237, 25], [127, 62, 233], [68, 237, 162], [226, 218, 228], [81, 243, 230], [132, 126, 141], [248, 122, 140], [225, 39, 146], [120, 139, 171], [163, 41, 70], [77, 118, 196], [78, 109, 32], [212, 208, 169], [238, 212, 31], [105, 215, 199], [10, 194, 244], [3, 180, 152], [199, 214, 112]], [[249, 112, 139], [223, 248, 14], [199, 172, 207], [84, 239, 65], [13, 201, 13], [42, 219, 69], [236, 93, 25], [133, 194, 167], [108, 232, 167], [172, 194, 142], [215, 129, 41], [240, 9, 26], [179, 114, 35], [20, 15, 126], [102, 10, 78], [122, 64, 242], [58, 111, 238], [131, 188, 85], [58, 83, 159], [55, 13, 159]], [[192, 203, 101], [38, 124, 52], [154, 61, 21], [177, 219, 189], [35, 174, 6], [215, 250, 54], [221, 185, 235], [78, 222, 90], [138, 247, 238], [223, 137, 165], [125, 44, 142], [230, 124, 237], [194, 172, 14], [253, 166, 93], [249, 108, 181], [132, 174, 143], [141, 5, 97], [43, 123, 208], [250, 123, 243], [251, 229, 8]], [[47, 150, 113], [207, 124, 156], [188, 242, 176], [217, 169, 180], [232, 138, 156], [128, 118, 61], [98, 161, 61], [94, 98, 110], [247, 141, 144], [51, 99, 151], [116, 184, 91], [154, 7, 64], [140, 23, 27], [149, 64, 251], [52, 6, 145], [240, 245, 225], [174, 94, 26], [129, 244, 58], [33, 205, 251], [37, 27, 77]], [[76, 155, 43], [127, 60, 213], [115, 194, 230], [226, 152, 219], [156, 30, 50], [106, 108, 135], [41, 80, 122], [88, 38, 80], [1, 209, 230], [240, 149, 16], [118, 147, 144], [232, 36, 119], [135, 101, 217], [58, 115, 76], [136, 72, 36], [30, 84, 157], [147, 224, 63], [239, 155, 206], [139, 252, 224], [41, 20, 221]], [[165, 128, 13], [46, 117, 10], [137, 20, 89], [240, 226, 142], [92, 223, 251], [46, 240, 178], [209, 170, 164], [53, 82, 168], [210, 253, 147], [205, 18, 232], [45, 161, 129], [165, 59, 206], [0, 236, 211], [27, 96, 185], [255, 226, 26], [104, 136, 67], [147, 224, 248], [62, 14, 122], [81, 159, 7], [208, 47, 115]], [[58, 236, 60], [78, 255, 149], [139, 212, 247], [241, 124, 233], [74, 196, 97], [69, 35, 141], [212, 174, 136], [1, 144, 152], [250, 76, 228], [247, 176, 170], [193, 233, 164], [96, 122, 196], [119, 210, 22], [162, 242, 195], [197, 77, 253], [18, 64, 169], [51, 225, 51], [233, 7, 73], [209, 79, 38], [240, 135, 173]], [[203, 41, 168], [194, 162, 249], [18, 35, 120], [147, 116, 46], [222, 50, 51], [227, 85, 153], [14, 23, 166], [28, 150, 183], [191, 220, 74], [125, 210, 92], [87, 89, 40], [195, 123, 254], [73, 118, 236], [130, 235, 130], [4, 238, 147], [80, 37, 226], [176, 153, 217], [128, 233, 154], [101, 196, 247], [54, 121, 195]], [[183, 151, 151], [11, 202, 140], [4, 25, 254], [146, 117, 180], [112, 97, 128], [70, 49, 20], [158, 225, 17], [186, 67, 46], [151, 167, 212], [89, 102, 67], [187, 139, 84], [131, 246, 151], [173, 58, 239], [38, 72, 115], [203, 187, 46], [202, 7, 135], [63, 232, 188], [134, 195, 190], [55, 119, 241], [12, 167, 113]], [[32, 237, 154], [209, 59, 71], [23, 19, 155], [252, 59, 49], [120, 69, 198], [232, 189, 214], [79, 212, 50], [250, 208, 143], [16, 189, 111], [227, 227, 120], [185, 50, 188], [183, 31, 203], [141, 97, 62], [232, 46, 108], [10, 25, 170], [124, 64, 105], [35, 106, 110], [119, 168, 75], [1, 141, 74], [66, 128, 89]], [[56, 13, 67], [7, 183, 121], [165, 8, 89], [135, 26, 64], [215, 58, 32], [243, 229, 185], [55, 231, 113], [22, 154, 234], [15, 31, 245], [205, 218, 55], [251, 227, 37], [41, 164, 75], [33, 64, 140], [166, 195, 150], [232, 220, 50], [58, 110, 220], [231, 116, 211], [173, 232, 204], [212, 48, 160], [218, 160, 130]], [[191, 78, 242], [34, 46, 43], [47, 221, 49], [190, 66, 30], [168, 62, 210], [181, 216, 26], [147, 159, 180], [53, 108, 79], [246, 114, 55], [179, 188, 58], [142, 115, 219], [13, 136, 14], [92, 139, 158], [173, 179, 3], [92, 73, 205], [35, 72, 15], [46, 110, 192], [214, 232, 174], [80, 189, 159], [166, 43, 26]], [[79, 80, 25], [41, 139, 226], [217, 248, 226], [212, 139, 110], [58, 176, 220], [56, 145, 249], [157, 23, 112], [202, 28, 3], [104, 154, 108], [70, 130, 148], [167, 61, 3], [254, 220, 89], [66, 194, 117], [181, 36, 203], [21, 223, 9], [235, 39, 160], [219, 207, 213], [148, 58, 207], [10, 166, 87], [235, 185, 45]]]\n        self.assertEqual(image.tolist(), expect, \"DataFrame contents should match the expected output\")\n    def test_random_seed_reproducibility(self):\n        _, image1 = task_func(seed=42)\n        _, image2 = task_func(seed=42)\n        self.assertTrue(np.array_equal(image1, image2), \"Images with same seed should be identical\")\n    def test_range_values(self):\n        _, image = task_func(range_low=100, range_high=200)\n        self.assertTrue(image.min() >= 100 and image.max() <= 200, \"Image pixel values are outside specified range\")\n    def test_error_on_invalid_range(self):\n        with self.assertRaises(ValueError):\n            task_func(range_low=255, range_high=0)\n    def test_return_types(self):\n        ax, image = task_func()\n        self.assertIsInstance(ax, plt.Axes, \"Returned ax is not a matplotlib Axes instance\")\n        self.assertIsInstance(image, np.ndarray, \"Returned image is not a numpy array\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform linear regression to \"x,\" \"y,\" against \"z\" from a list of dictionaries \"d.\" >>> data = [{'x': 4, 'y': 20, 'z': 10}, {'x': 5, 'y': 25, 'z': 15}, {'x': 6, 'y': 5, 'z': 20}] >>> model = task_func(data, target='y') >>> isinstance(model, LinearRegression) True\nThe function should output with:\n    LinearRegression: A LinearRegression model.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n```",
        "gt": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndef task_func(d, target='z'):\n    df = pd.DataFrame(d)\n    predictors = [k for k in df.columns if k != target]\n\n    X = df[predictors]\n    y = df[target]\n\n    model = LinearRegression().fit(X, y)\n\n    return model",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_basic_regression(self):\n        data = [{'x': 1, 'y': 10, 'z': 5}, {'x': 3, 'y': 15, 'z': 6}, {'x': 2, 'y': 1, 'z': 7}]\n        model = task_func(data)\n        self.assertIsInstance(model, LinearRegression)\n        self.assertEqual(len(model.coef_), 2)\n    def test_negative_values(self):\n        data = [{'x': -1, 'y': -10, 'z': -5}, {'x': -3, 'y': -15, 'z': -6}, {'x': -2, 'y': -1, 'z': -7}]\n        model = task_func(data)\n        self.assertIsInstance(model, LinearRegression)\n        self.assertEqual(len(model.coef_), 2)\n    \n    def test_zero_values(self):\n        data = [{'x': 0, 'y': 0, 'z': 0}, {'x': 0, 'y': 0, 'z': 0}, {'x': 0, 'y': 0, 'z': 0}]\n        model = task_func(data)\n        self.assertIsInstance(model, LinearRegression)\n        self.assertEqual(len(model.coef_), 2)\n    \n    def test_different_target(self):\n        data = [{'x': 1, 'y': 10, 'z': 5}, {'x': 3, 'y': 15, 'z': 6}, {'x': 2, 'y': 1, 'z': 7}]\n        model = task_func(data, target='y')\n        self.assertIsInstance(model, LinearRegression)\n        self.assertEqual(len(model.coef_), 2)\n    \n    def test_single_predictor(self):\n        data = [{'x': 1, 'z': 5}, {'x': 3, 'z': 6}, {'x': 2, 'z': 7}]\n        model = task_func(data, target='z')\n        self.assertIsInstance(model, LinearRegression)\n        self.assertEqual(len(model.coef_), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform Principal Component Analysis (PCA) on the dataframe and visualize the two main components.\nThe function should raise the exception for: ValueError: If the input is not a DataFrame, or if the DataFrame is empty.\nThe function should output with:\n    DataFrame: A pandas DataFrame with the principal components named 'Principal Component 1' and 'Principal Component 2'.\n    Axes: A Matplotlib Axes object representing the scatter plot of the two principal components. The plot includes:\n    Title: '2 Component PCA'\n    X-axis label: 'Principal Component 1'\n    Y-axis label: 'Principal Component 2'\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n```",
        "gt": "import pandas as pd\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\ndef task_func(df):\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    pca = PCA(n_components=2)\n    principal_components = pca.fit_transform(df)\n\n    pca_df = pd.DataFrame(data=principal_components, columns=['Principal Component 1', 'Principal Component 2'])\n\n    fig, ax = plt.subplots()\n    ax.scatter(pca_df['Principal Component 1'], pca_df['Principal Component 2'])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('2 Component PCA')\n\n    return pca_df, ax",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n        \n    def test_return_types(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        pca_df, ax = task_func(df)\n        self.assertIsInstance(pca_df, pd.DataFrame)\n        self.assertIsInstance(ax, plt.Axes)\n        df_list = pca_df.apply(lambda row: ','.join(row.values.astype(str)), axis=1).tolist()\n        expect = ['-13.610180281686779,36.44721199193204', '54.40050504687483,-22.08830947385322', '53.290672923391526,19.898200550170877', '-5.838062157770876,-41.496605164774465', '-53.21056178179435,-6.7930062349134515', '-44.061886187661926,-30.26929206755502', '-33.38668139161531,0.2552130859489897', '42.255766328331084,13.739000535024472', '6.029899810881003,15.126238793255917', '-18.384663806486895,-23.117183027938218', '17.000034894438222,5.940521054610546', '-60.98474060274173,-21.94655052613455', '-30.00040461300892,18.450912244913084', '-27.820112695627206,44.198551124848585', '21.640482233430532,42.827012832167476', '21.27682410219371,28.918723887000585', '-6.426505623035057,-30.06591045527269', '-11.820945264130339,12.934284948939736', '-37.93307224338836,-64.21332912709326', '-29.83733474784538,24.643368440288672', '31.177462497011778,27.951751630043795', '4.163378868131486,47.948877633664104', '39.466441761424804,-31.84126770945458', '33.46694547443355,34.986280788336444', '-13.419491344759962,39.536680403381986', '-27.449385998856247,2.326064334907882', '10.153378864987577,-37.42419694285016', '20.506332029367186,51.13871157458237', '15.479166813559896,-74.77051810727116', '-57.57615058127615,1.9487900993388594', '-26.28549929067824,-9.65224302392506', '28.87232875337196,-51.516178606375064', '-21.369932342462864,-34.1236876316218', '-10.606417996694866,-24.82414729954915', '68.74958300244347,18.816565469782933', '5.579297552982031,-17.677003191776734', '-21.341966358559443,4.735975870591118', '-5.860887616205186,12.519691151114444', '37.21768187909752,-14.039591194450889', '49.55165019654304,13.908325957765262', '-4.109823681478022,41.18095690997478', '-18.300419558723313,-40.56436386765031', '12.97814603859903,-29.84604839728002', '-6.506242870125811,33.44213945007128', '7.505109890855539,-14.249083056889246', '-26.99501720264034,-40.656443040125', '45.453529299057095,6.609269644757153', '43.79745816650168,48.66782572175226', '7.676376328527824,-55.529326002382895', '-36.585551589106444,-29.46960291192543', '2.6859086882920256,-20.946872012051397', '11.579319461434466,2.5153864773509023', '55.65592970891825,-20.57057269653286', '1.3120328752605257,4.833318905811497', '-66.85919589343598,-21.075315868673822', '-37.314605233768106,20.103748957710636', '-11.022351981248699,-12.253094718104157', '-35.890162916537804,75.92254310123329', '0.53667516622158,-33.56379772599969', '-10.956580788988687,2.694011504501463', '-26.643240831906112,16.27972355916017', '43.96533676049477,-32.97055341038151', '-42.552908807033326,47.31748220762675', '32.03341655049094,43.71683520153914', '-40.72528773476276,61.217583717153836', '23.734199718309124,4.642277267288987', '38.089253264176364,-0.5061650349672543', '-4.583397633889209,20.013141375057923', '-63.74373365434338,25.377057283508336', '33.902236715160406,21.630704685022035', '6.155388132598106,-45.93243697925512', '52.008505649077165,16.555012713476824', '-0.18435306886596514,-9.693856193910898', '-42.94165871339571,-13.297676348950137', '-51.35787421418141,8.196312826088189', '0.5434319974521136,0.24151904201080152', '14.133309129080612,-2.0678582975907136', '33.78108321347497,8.564486971124488', '13.07575726872196,44.0566337280887', '56.11471908089624,-0.06620431371651866', '27.017702255899717,-17.13919197733164', '-16.676726628569483,27.557565811529475', '-9.174097986026135,-27.752306755006675', '-6.124717633062933,-37.10319119462639', '6.841151020609539,-36.03494866860251', '-33.71096275749417,35.839301962584926', '-33.490515349711494,-10.213343702797827', '-3.270829570273045,-46.33176027759562', '-25.77282461526263,19.258518945937205', '19.15474665121042,41.0229034285221', '4.328634342877976,-48.53841855483938', '37.26577616545747,-21.838309778324763', '-56.74309813743457,12.457783909615435', '46.88891827433472,32.764991917828794', '49.153097685617915,-16.86188317717609', '17.674964710773796,30.321628721965062', '-17.175251345113725,12.970994233380647', '14.486399874990791,-53.79024894129019', '-21.72778895012001,16.325058069552753', '-11.442244844483053,-26.771778965048394']\n        \n        self.assertEqual(len(df_list), len(expect), \"DataFrame size contents should match the expected output\")\n        for a, b in zip(df_list, expect):\n            a1, a2 = str(a).split(',')\n            b1, b2 = str(b).split(',')\n            try:\n                self.assertAlmostEqual(float(a1), float(b1), places=7)\n                self.assertAlmostEqual(float(a2), float(b2), places=7)\n            except:\n                self.assertAlmostEqual(float(a1), -float(b1), places=7)\n                self.assertAlmostEqual(float(a2), -float(b2), places=7)\n    def test_invalid_input_empty_dataframe(self):\n        with self.assertRaises(ValueError):\n            task_func(pd.DataFrame())\n    def test_invalid_input_type(self):\n        with self.assertRaises(ValueError):\n            task_func(\"not a dataframe\")\n    def test_pca_columns(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        pca_df, _ = task_func(df)\n        self.assertTrue(all(col in pca_df.columns for col in ['Principal Component 1', 'Principal Component 2']))\n    def test_plot_labels(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        _, ax = task_func(df)\n        self.assertEqual(ax.get_title(), '2 Component PCA')\n        self.assertEqual(ax.get_xlabel(), 'Principal Component 1')\n        self.assertEqual(ax.get_ylabel(), 'Principal Component 2')\n    def test_pca_dataframe_structure(self):\n        df = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list('ABCD'))\n        pca_df, _ = task_func(df)\n        self.assertEqual(pca_df.shape[1], 2)  # Should have 2 principal components",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the number of files in a directory that contain a specific word.\nThe function should output with:\n    count (int): The number of files that contain the given word.\nYou should write self-contained code starting with:\n```\nimport re\nimport os\nimport glob\ndef task_func(directory, word):\n```",
        "gt": "import re\nimport os\nimport glob\ndef task_func(directory, word):\n    count = 0\n    # Pattern to match word boundaries and ignore case, handling punctuation\n    pattern = re.compile(r'\\b' + re.escape(word) + r'\\b', re.IGNORECASE)\n    for filename in glob.glob(os.path.join(directory, '*.*')):\n        with open(filename, 'r', encoding='utf-8') as f:\n            text = f.read()\n            if pattern.search(text):\n                count += 1\n    return count",
        "test": "import unittest\nfrom pyfakefs.fake_filesystem_unittest import TestCase\nclass TestCases(TestCase):\n    def setUp(self):\n        self.setUpPyfakefs()\n        self.directory = '/mnt/data/documents'\n        self.fs.create_dir(self.directory)\n        self.fs.create_file('/mnt/data/documents/apple.txt', contents='Apple is great.')\n        self.fs.create_file('/mnt/data/documents/word.txt', contents='This file contains the word. Word is important. Word up!')\n        self.fs.create_file('/mnt/data/documents/banana.txt', contents='Banana is yellow.')\n        self.fs.create_file('/mnt/data/documents/orange.txt', contents='Orange is sweet.')\n        self.fs.create_file('/mnt/data/documents/grape.txt', contents='I like grapes. Grapes are nice.')\n    def test_1(self):\n        result = task_func(self.directory, 'apple')\n        self.assertEqual(result, 1) \n    def test_2(self):\n        result = task_func(self.directory, 'word')\n        self.assertEqual(result, 1)  # Ensuring 3 files contain the word \"word\" \n    def test_3(self):\n        result = task_func(self.directory, 'banana')\n        self.assertEqual(result, 1)  # Should be 1 file that contains \"banana\" multiple times\n    def test_4(self):\n        result = task_func(self.directory, 'orange')\n        self.assertEqual(result, 1)  # 1 file contains the word \"orange\"\n    def test_5(self):\n        result = task_func(self.directory, 'grapes')\n        self.assertEqual(result, 1)  # Ensuring 1 file contains the word \"grape\"",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function parses HTML table data from a specified URL or local file and stores it into an SQLite database. The function handles different scenarios for fetching, processing, and storing data.\nNote that: Notes: The function is designed to replace the table \"my_table\" in the specified SQLite database with new data each time it is called. If the HTML content does not contain a table or if the table is empty, the function will return 0, indicating no rows were parsed and stored. This function relies on the 'requests', 'lxml', 'pandas', and 'sqlite3' libraries for its operations.\nThe function should raise the exception for: requests.RequestException: This exception is raised if there is a network issue in accessing the URL. This includes scenarios like connection errors, timeouts, and HTTP errors. sqlite3.DatabaseError: This exception is raised in case of issues connecting to, or writing to, the SQLite database. This includes issues like invalid database names, write permissions, or SQL execution errors.\nThe function should output with:\n    int: The number of rows in the parsed HTML table.\nYou should write self-contained code starting with:\n```\nimport requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n```",
        "gt": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    try:\n        if webpage_url.startswith(\"file://\"):\n            with open(webpage_url[7:], \"r\", encoding=\"utf-8\") as file:\n                content = file.read()\n        else:\n            response = requests.get(webpage_url, timeout=5)\n            response.raise_for_status()\n            content = response.content\n\n        tree = html.fromstring(content)\n        rows = tree.xpath(\"//tr\")\n        data = [\n            [cell.text_content().strip() for cell in row.xpath(\".//td\")] for row in rows\n        ]\n\n        # Create DataFrame\n        df = pd.DataFrame(data)\n        if df.empty:\n            return 0\n\n        # Store data in database\n        conn = None\n        try:\n            conn = sqlite3.connect(database_name)\n            df.to_sql(\"my_table\", conn, if_exists=\"replace\", index=False)\n        finally:\n            if conn:\n                conn.close()\n\n        return len(df)\n\n    except requests.RequestException as e:\n        raise requests.RequestException(f\"Error accessing URL {webpage_url}: {e}\")\n    except sqlite3.DatabaseError as e:\n        raise sqlite3.DatabaseError(f\"Database error with {database_name}: {e}\")",
        "test": "import unittest\nfrom unittest.mock import patch, MagicMock\nimport requests\nimport sqlite3\nimport os\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"requests.get\")\n    def test_valid_webpage_url(self, mock_get):\n        \"\"\"\n        Test processing HTML table data from a valid webpage URL.\n        \"\"\"\n        mock_response = MagicMock()\n        mock_response.content = (\n            b\"<html><body><table><tr><td>1</td></tr></table></body></html>\"\n        )\n        mock_response.status_code = 200\n        mock_get.return_value = mock_response\n        result = task_func(\"http://example.com\")\n        self.assertEqual(result, 1)\n    @patch(\n        \"builtins.open\",\n        new_callable=unittest.mock.mock_open,\n        read_data=\"<html><body><table><tr><td>1</td></tr></table></body></html>\",\n    )\n    def test_local_file_url(self, mock_file):\n        \"\"\"\n        Test processing HTML table data from a local file.\n        \"\"\"\n        result = task_func(\"file:///path/to/file.html\")\n        self.assertEqual(result, 1)\n    @patch(\"requests.get\")\n    def test_invalid_url(self, mock_get):\n        \"\"\"\n        Test function behavior with an invalid URL.\n        \"\"\"\n        mock_get.side_effect = requests.RequestException(\"mocked request exception\")\n        with self.assertRaises(requests.RequestException):\n            task_func(\"http://invalid-url.com\")\n    @patch(\"requests.get\")\n    def test_empty_table(self, mock_get):\n        \"\"\"\n        Test handling an HTML page with an empty table.\n        \"\"\"\n        mock_response = MagicMock()\n        mock_response.content = b\"<html><body><table></table></body></html>\"\n        mock_response.status_code = 200\n        mock_get.return_value = mock_response\n        result = task_func(\"http://example.com/empty\")\n        self.assertEqual(result, 0)\n    @patch(\"requests.get\")\n    @patch(\"sqlite3.connect\")\n    def test_database_error(self, mock_connect, mock_get):\n        \"\"\"\n        Test function behavior when encountering a database error.\n        \"\"\"\n        # Mock the response from requests.get\n        mock_response = MagicMock()\n        mock_response.content = (\n            b\"<html><body><table><tr><td>Data</td></tr></table></body></html>\"\n        )\n        mock_response.status_code = 200\n        mock_get.return_value = mock_response\n        # Simulate a database error\n        mock_connect.side_effect = sqlite3.DatabaseError(\"mocked database error\")\n        # Expect a DatabaseError to be raised\n        with self.assertRaises(sqlite3.DatabaseError):\n            task_func(\"http://example.com\", \"faulty_database.db\")\n    def tearDown(self):\n        \"\"\"Remove the database file with retries.\"\"\"\n        if os.path.exists(\"my_database.db\"):\n            os.remove(\"my_database.db\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Merge two dataframes on the 'id' column and then scale the numeric features. This function merges two dataframes via outer join on the 'id' column, and scales the merged dataframe's numeric features from df1 to have a mean of 0 and standard deviation of 1. It also returns a pair plot of the scaled features from df1.\nThe function should output with:\n    merged_df (pd.DataFrame): The partially scaled and merged dataframe.\n    pair_plot (seaborn.axisgrid.PairGrid): Pair plot of the scaled dataframe.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n```",
        "gt": "import pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(df1, df2):\n    merged_df = pd.merge(df1, df2, on=\"id\", how=\"outer\")\n\n    # Select only numeric columns from df1 (excluding 'id')\n    numeric_features_df1 = df1.select_dtypes(\n        include=[\"float64\", \"int64\"]\n    ).columns.tolist()\n    if \"id\" in numeric_features_df1:\n        numeric_features_df1.remove(\"id\")\n\n    # Scale only the numeric features of df1\n    if not merged_df.empty and numeric_features_df1:\n        scaler = StandardScaler()\n        merged_df[numeric_features_df1] = scaler.fit_transform(\n            merged_df[numeric_features_df1]\n        )\n\n    # Pair plot only for the numeric features of df1\n    pair_plot = None\n    if numeric_features_df1:\n        pair_plot = sns.pairplot(merged_df[numeric_features_df1])\n\n    return merged_df, pair_plot",
        "test": "import unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Standard data merging on 'id' and checking scaled values\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1.2, 3.4, 5.6],\n                \"feature2\": [2.3, 4.5, 6.7],\n                \"feature3\": [3.4, 5.6, 7.8],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 2, 3], \"feature4\": [4.5, 6.7, 8.9], \"feature5\": [5.6, 7.8, 9.0]}\n        )\n        scaled_df, _ = task_func(df1, df2)\n        self.assertEqual(\n            list(scaled_df.columns),\n            [\"id\", \"feature1\", \"feature2\", \"feature3\", \"feature4\", \"feature5\"],\n        )\n        self.assertAlmostEqual(scaled_df[\"feature1\"].mean(), 0, places=5)\n    def test_case_2(self):\n        # Random data merging and checking scaled values\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 3, 5],\n                \"feature1\": [10, 20, 30],\n                \"feature2\": [5, 15, 25],\n                \"feature3\": [6, 16, 26],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 5, 3], \"feature4\": [7, 17, 27], \"feature5\": [8, 18, 28]}\n        )\n        scaled_df, _ = task_func(df1, df2)\n        self.assertAlmostEqual(scaled_df[\"feature2\"].std(), 1.224745, places=5)\n    def test_case_3(self):\n        # Negative values and merging on 'id' and checking scaled values\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [-1, -2, -3],\n                \"feature2\": [-5, -6, -7],\n                \"feature3\": [-8, -9, -10],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 2, 3], \"feature4\": [-11, -12, -13], \"feature5\": [-14, -15, -16]}\n        )\n        scaled_df, _ = task_func(df1, df2)\n        self.assertAlmostEqual(scaled_df[\"feature3\"].max(), 1.224745, places=5)\n    def test_case_4(self):\n        # Zero values and checking if scaled values remain zero\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3, 4],\n                \"feature1\": [0, 0, 0, 0],\n                \"feature2\": [0, 0, 0, 0],\n                \"feature3\": [0, 0, 0, 0],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 2, 3, 4], \"feature4\": [0, 0, 0, 0], \"feature5\": [0, 0, 0, 0]}\n        )\n        scaled_df, _ = task_func(df1, df2)\n        self.assertAlmostEqual(scaled_df[\"feature1\"].min(), 0, places=5)\n    def test_case_5(self):\n        # Large values and checking scaled min values\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2],\n                \"feature1\": [1000, 2000],\n                \"feature2\": [500, 1500],\n                \"feature3\": [100, 200],\n            }\n        )\n        df2 = pd.DataFrame({\"id\": [1, 2], \"feature4\": [10, 20], \"feature5\": [1, 2]})\n        scaled_df, _ = task_func(df1, df2)\n        self.assertAlmostEqual(scaled_df[\"feature2\"].min(), -1, places=5)\n    def test_case_6(self):\n        # Testing the plot's attributes\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1, 2, 3],\n                \"feature2\": [4, 5, 6],\n                \"feature3\": [7, 8, 9],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 2, 3], \"feature4\": [10, 11, 12], \"feature5\": [13, 14, 15]}\n        )\n        _, pair_plot = task_func(df1, df2)\n        # Checking if the pair plot has the expected attributes\n        self.assertEqual(\n            len(pair_plot.axes), 3\n        )  # Because we have 3 valid features in df1\n        self.assertIn(\"feature1\", pair_plot.data.columns)\n        self.assertIn(\"feature2\", pair_plot.data.columns)\n        self.assertIn(\"feature3\", pair_plot.data.columns)\n    def test_case_7(self):\n        # Testing with empty dataframes\n        df1 = pd.DataFrame(columns=[\"id\", \"feature1\", \"feature2\", \"feature3\"])\n        df2 = pd.DataFrame(columns=[\"id\", \"feature4\", \"feature5\"])\n        scaled_df, _ = task_func(df1, df2)\n        self.assertTrue(scaled_df.empty)\n    def test_case_8(self):\n        # Testing with NaN values in the dataframes\n        df1 = pd.DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"feature1\": [1, 2, None],\n                \"feature2\": [4, None, 6],\n                \"feature3\": [7, 8, 9],\n            }\n        )\n        df2 = pd.DataFrame(\n            {\"id\": [1, 2, 3], \"feature4\": [10, 11, 12], \"feature5\": [13, 14, 15]}\n        )\n        scaled_df, _ = task_func(df1, df2)\n        self.assertTrue(scaled_df.isnull().any().any())  # Checking if NaN values exist\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Filters a pandas DataFrame based on the values of specific rows, and performs a chi-square independence test on the first two columns. The function filters rows based on the following criteria: Keep only rows where: The value of the second column: df['second'] > larger and The value of the third column: df['third'] == equal After filtering a conigency table of the first two columns is computed, which is then used in the chi2 independence test. The p_value of the test is returned. >>> df = pd.DataFrame({ ...     'test': ['A', 'b', 'b', 'a', 'c', 'd'], ...     'hi': [45, 2, 2, 3, 4, 4], ...     'column3': [50, 50, 50, 50, 50, 50, ] ... }) >>> task_func(df, ['test', 'hi', 'column3'], larger=2, equal=50) 0.23810330555354436\nThe function should raise the exception for: ValueError: If there's insufficient data for the test (no rows meeting the criteria). ValueError: If the number of specified columns is not 3. ValueError: If the specified columns are not contained in df.\nThe function should output with:\n    float: The p-value from the chi-square independence test, indicating the statistical significance.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n```",
        "gt": "import pandas as pd\nfrom scipy.stats import chi2_contingency\ndef task_func(df, columns=['A', 'B', 'C'], larger=50, equal=900):\n    if len(columns) != 3:\n        raise ValueError(\"Exactly three columns should be specified.\")\n    \n    for column in columns:\n        if column not in df.columns:\n            raise ValueError('The specified columns should exist in the DataFrame.')\n    \n    col_categorical, col_numerical, col_filter = columns\n\n    # Filtering the data based on the specified conditions\n    selected = df[(df[col_numerical] > larger) & (df[col_filter] == equal)][[col_categorical, col_numerical]]\n\n    # Creating a contingency table for the chi-square test\n    contingency_table = pd.crosstab(selected[col_categorical], selected[col_numerical])\n    \n    # Check if the contingency table is empty (no data meeting the criteria)\n    if contingency_table.size == 0:\n        raise ValueError(\"Insufficient data - no matching data for the applied conditions.\")\n    \n    # Performing the chi-square test\n    _, p_value, _, _ = chi2_contingency(contingency_table)\n    \n    return p_value",
        "test": "import unittest\nimport pandas as pd\nimport faker\nclass TestCases(unittest.TestCase):\n    def test_column_not_in_df(self):\n        fake = faker.Faker()\n        fake.seed_instance(42)\n        rows = 10\n        data = pd.DataFrame(\n            {\n                'A': [fake.name() for i in range(rows)],\n                'B': [81 for i in range(rows)],\n                'D': [900 for i in range(rows)] \n            }\n        )\n        self.assertRaises(Exception, task_func, data)\n    def test_column_number(self):\n        fake = faker.Faker()\n        fake.seed_instance(42)\n        rows = 10\n        data = pd.DataFrame(\n            {\n                'A': [fake.name() for i in range(rows)],\n                'B': [81 for i in range(rows)],\n                'C': [900 for i in range(rows)] \n            }\n        )\n        self.assertRaises(Exception, task_func, data, ['A'])\n        self.assertRaises(Exception, task_func, data, ['A', 'B', 'C', 'D'])\n    def test_no_data_after_filer(self):\n        fake = faker.Faker()\n        fake.seed_instance(42)\n        rows = 10\n        data = pd.DataFrame(\n            {\n                'A': [fake.name() for i in range(rows)],\n                'B': [20 for i in range(rows)],\n                'C': [901 for i in range(rows)] \n            }\n        )\n        self.assertRaises(Exception, task_func, data)\n    def test_medium_dataframe(self):\n        # Test with a medium-sized dataframe (50 rows)\n        fake = faker.Faker()\n        fake.seed_instance(12)\n        rows = 50\n        data = pd.DataFrame(\n            {\n                'A': [fake.name() for i in range(rows)],\n                'B': [fake.random_int(0, 100) for i in range(rows)],\n                'C': [fake.random_int(899, 901) for i in range(rows)] \n            }\n        )        \n        p_value = task_func(data)\n        self.assertAlmostEqual(p_value, 0.23, places=1)\n    def test_large_dataframe(self):\n        # Test with a large dataframe (1000 rows)\n        fake = faker.Faker()\n        fake.seed_instance(21)\n        rows = 1000\n        data = pd.DataFrame(\n            {\n                'A': [fake.name() for i in range(rows)],\n                'B': [fake.random_int(0, 100) for i in range(rows)],\n                'C': [fake.random_int(800, 950) for i in range(rows)] \n            }\n        )        \n        p_value = task_func(data)\n        self.assertAlmostEqual(p_value, 0.22, places=1)\n    def test_very_large_dataframe(self):\n        data = pd.DataFrame(\n            {\n                'A': ['a', 'a', 'a', 'a', 'a'],\n                'B': [70, 70, 70, 70, 70],\n                'C': [900, 900, 900, 900, 900] \n            }\n        )\n        p_value = task_func(data)\n        self.assertAlmostEqual(p_value, 1.0, places=1)\n    def test_huge_dataframe(self):\n        # different column names\n        fake = faker.Faker()\n        fake.seed_instance(21)\n        rows = 1000\n        data = pd.DataFrame(\n            {\n                'test': [fake.name() for i in range(rows)],\n                'five': [fake.random_int(21, 150) for i in range(rows)],\n                '1': [fake.random_int(821, 950) for i in range(rows)] \n            }\n        )        \n        p_value = task_func(data, columns=['test', 'five', '1'])\n        self.assertAlmostEqual(p_value, 0.22, places=1)\n    def test_diff_filter(self):\n        # different filter values\n        fake = faker.Faker()\n        fake.seed_instance(21)\n        rows = 1000\n        data = pd.DataFrame(\n            {\n                'test': [fake.name() for i in range(rows)],\n                'five': [fake.random_int(21, 150) for i in range(rows)],\n                '1': [fake.random_int(19, 21) for i in range(rows)] \n            }\n        )        \n        p_value = task_func(data, columns=['test', 'five', '1'], larger=100, equal=20)\n        self.assertAlmostEqual(p_value, 0.35, places=1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Execute a list of bash scripts with a specified delay between each script.\nThe function should raise the exception for: ValueError: If the delay is negative or no scripts are provided.\nThe function should output with:\n    list: A list of timestamps indicating the start time of each script execution.\nYou should write self-contained code starting with:\n```\nimport subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n```",
        "gt": "import subprocess\nimport os\nimport time\nfrom datetime import datetime\ndef task_func(script_dir, scripts, delay):\n    if delay < 0:\n        raise ValueError(\"delay cannot be negative.\")\n    if not scripts:\n        raise ValueError(\"No scripts provided.\")\n    start_times = []\n    for script in scripts:\n        script_path = os.path.join(script_dir, script)\n        start_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        start_times.append(start_time)\n\n        result = subprocess.call(script_path, shell=True)\n        if result != 0:\n            raise FileNotFoundError(f\"Script not found: {script_path}\")\n\n        time.sleep(delay)\n    return start_times",
        "test": "import unittest\nimport tempfile\nimport os\nfrom datetime import datetime\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Create a temporary directory to store scripts\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.script_dir = self.temp_dir.name\n    def tearDown(self):\n        # Clean up the temporary directory\n        self.temp_dir.cleanup()\n    def create_temp_script(self, script_content):\n        # Helper function to create a temporary script file with the given content\n        fd, path = tempfile.mkstemp(dir=self.script_dir, suffix=\".sh\")\n        with os.fdopen(fd, \"w\") as f:\n            f.write(\"#!/bin/bash\\n\")\n            f.write(script_content)\n        os.chmod(path, 0o755)\n        return os.path.basename(path)\n    def test_case_1(self):\n        # Testing with a single script and delay of 1 second\n        script_name = self.create_temp_script(\"echo 'Test'\")\n        scripts = [script_name]\n        delay = 1\n        start_times = task_func(self.script_dir, scripts, delay)\n        self.assertEqual(len(start_times), 1)\n        self.assertTrue(\n            isinstance(datetime.strptime(start_times[0], \"%Y-%m-%d %H:%M:%S\"), datetime)\n        )\n    def test_case_2(self):\n        # Testing with multiple scripts and a longer delay\n        script_names = [\n            self.create_temp_script(\"echo 'Test'\"),\n            self.create_temp_script(\"echo 'Test 2'\"),\n        ]\n        delay = 2\n        start_times = task_func(self.script_dir, script_names, delay)\n        self.assertTrue(2 <= len(start_times) )\n        time_diff = datetime.strptime(\n            start_times[1], \"%Y-%m-%d %H:%M:%S\"\n        ) - datetime.strptime(start_times[0], \"%Y-%m-%d %H:%M:%S\")\n        self.assertTrue(2 <= time_diff.seconds<= 3)\n    def test_case_3(self):\n        # Testing with an invalid script path\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.script_dir, [\"this-doesn't-exist\"], 1)\n    def test_case_4(self):\n        # Testing with no scripts (empty list)\n        with self.assertRaises(Exception):\n            task_func(self.script_dir, [], 1)\n    def test_case_5(self):\n        # Testing with zero delay\n        script_names = [\n            self.create_temp_script(\"echo 'Test'\"),\n            self.create_temp_script(\"echo 'Test 2'\"),\n        ]\n        delay = 0\n        start_times = task_func(self.script_dir, script_names, delay)\n        self.assertEqual(len(start_times), 2)\n    def test_case_6(self):\n        # Test handling invalid delay\n        script_names = [\n            self.create_temp_script(\"echo 'Test'\"),\n            self.create_temp_script(\"echo 'Test 2'\"),\n        ]\n        with self.assertRaises(Exception):\n            task_func(self.script_dir, script_names, -1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Convert elements in 'T1' to integers and create a Pandas DataFrame with random numbers. The number of columns in the DataFrame is determined by the sum of the integers in 'T1', and the number of rows is defined by the 'row_num' parameter. >>> df = task_func(('1', ('1', '3')), row_num=2, seed=32) >>> print(df) Col_1  Col_2  Col_3  Col_4  Col_5 0     87     43      5     54     62 1     88     19     71     89      3 >>> T1 = (('1', '12'), ('1', '-12')) >>> df = task_func(T1, row_num=6, seed=21) >>> print(df) Col_1  Col_2 0     73     79 1     56      4 2     48     35 3     60     98 4     74     72 5     63     44\nThe function should output with:\n    DataFrame: A pandas DataFrame with random numbers.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n```",
        "gt": "import pandas as pd\nimport numpy as np\nimport itertools\ndef task_func(T1, row_num=50, seed=None):\n    np.random.seed(seed)\n    int_list = [list(map(int, x)) for x in T1]\n    flattened_list = list(itertools.chain(*int_list))\n    total_cols = sum(flattened_list)\n\n    data = np.random.randint(0, 100, size=(row_num, total_cols))\n    df = pd.DataFrame(data, columns=[f'Col_{i+1}' for i in range(total_cols)])\n\n    return df",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def test_rng(self):\n        T1 = (('13', '17', '18', '21', '32'))\n        df1 = task_func(T1, row_num=50, seed=2022)\n        df2 = task_func(T1, row_num=50, seed=2022)\n        pd.testing.assert_frame_equal(df1, df2)\n        df4 = task_func(T1, row_num=50, seed=12)\n        try:\n            pd.testing.assert_frame_equal(df1, df4)\n        except AssertionError:\n            pass\n        else:\n            raise AssertionError('frames are equal but should not be')\n    def test_case_1(self):\n        T1 = (('13', '17', '18', '21', '32'), ('07', '11', '13', '14', '28'), ('01', '05', '06', '08', '15', '16'))\n        df = task_func(T1, row_num=50, seed=2022)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (50, sum([13, 17, 18, 21, 32, 7, 11, 13, 14, 28, 1, 5, 6, 8, 15, 16])))\n    def test_case_2(self):\n        T1 = (('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9'))\n        df = task_func(T1, row_num=50, seed=2022)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (50, sum([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    def test_case_3(self):\n        T1 = (('10', '20', '30'), ('40', '50', '60'), ('70', '80', '90'))\n        df = task_func(T1, row_num=70, seed=2022)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (70, sum([10, 20, 30, 40, 50, 60, 70, 80, 90])))\n    def test_case_4(self):\n        T1 = ()\n        df = task_func(T1, row_num=50, seed=2022)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (50, 0))\n    def test_case_5(self):\n        T1 = (('1', '2', '3'), (), ('7', '8', '9'))\n        df = task_func(T1, row_num=50, seed=21)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(df.shape, (50, sum([1, 2, 3, 7, 8, 9])))\n    def test_non_int(self):\n        a = (('1', '2.45'))\n        self.assertRaises(Exception, task_func, a, 120, 21)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the word lengths.\nThe function should output with:\n    dict: A dictionary of mean, median, and mode of word lengths.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n```",
        "gt": "import numpy as np\nimport pandas as pd\ndef task_func(df, letter):\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n\n    return statistics",
        "test": "import unittest\nimport random\nfrom string import ascii_lowercase\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        word_list = []\n        num = 1000\n        for _ in range(num):\n            length = random.randint(3, 10)\n            word = ''.join(random.choice(ascii_lowercase) for _ in range(length))\n            word_list.append(word)\n        self.df = {'Word': word_list}\n    def test_case_1(self):\n        result = task_func(self.df, 'a')\n        self.assertIn('mean', result)\n        self.assertIn('median', result)\n        self.assertIn('mode', result)\n    def test_case_2(self):\n        result = task_func(self.df, 'z')\n        self.assertIn('mean', result)\n        self.assertIn('median', result)\n        self.assertIn('mode', result)\n    def test_case_3(self):\n        result = task_func(self.df, 'm')\n        self.assertIn('mean', result)\n        self.assertIn('median', result)\n        self.assertIn('mode', result)\n    def test_case_4(self):\n        result = task_func(self.df, 'f')\n        self.assertIn('mean', result)\n        self.assertIn('median', result)\n        self.assertIn('mode', result)\n    def test_case_5(self):\n        result = task_func(self.df, 't')\n        self.assertIn('mean', result)\n        self.assertIn('median', result)\n        self.assertIn('mode', result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean, median, and standard deviation of the data from a specific column in an Excel file.\nThe function should raise the exception for: FileNotFoundError: If the Excel file does not exist at the specified path. ValueError: If the specified column is not found in the Excel file.\nThe function should output with:\n    dict: A dictionary with the mean, median, and standard deviation.\nYou should write self-contained code starting with:\n```\nimport os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n```",
        "gt": "import os\nimport pandas as pd\nimport numpy as np\ndef task_func(excel_file_path, file_name, column_name):\n    excel_file = os.path.join(excel_file_path, file_name)\n    if not os.path.exists(excel_file):\n        raise FileNotFoundError(f\"No file found at {excel_file}\")\n\n    df = pd.read_excel(excel_file)\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the Excel file.\")\n\n    mean = np.mean(df[column_name])\n    median = np.median(df[column_name])\n    std_dev = np.std(df[column_name])\n\n    return {'mean': mean, 'median': median, 'std_dev': std_dev}",
        "test": "import unittest\nimport pandas as pd\nimport os\ndef create_dummy_file(data_dir, file_name):\n    os.makedirs(data_dir, exist_ok=True)\n    # Creating a dummy Excel file\n    data = {'Sales': [100, 200, 150, 300, 250]}\n    df = pd.DataFrame(data)\n    df.to_excel(data_dir + file_name, index=False, engine='openpyxl')\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.test_data_dir = './test_data/'\n        os.makedirs(self.test_data_dir, exist_ok=True)\n        # Creating a dummy Excel file\n        data = {'Sales': [100, 200, 150, 300, 250]}\n        df = pd.DataFrame(data)\n        df.to_excel(self.test_data_dir + 'test_file.xlsx', index=False)\n    def tearDown(self):\n        os.remove(self.test_data_dir + 'test_file.xlsx')\n        os.rmdir(self.test_data_dir)\n    def test_normal_functionality(self):\n        stats = task_func(self.test_data_dir, 'test_file.xlsx', 'Sales')\n        self.assertEqual(stats['mean'], 200)\n        self.assertEqual(stats['median'], 200)\n        self.assertAlmostEqual(stats['std_dev'], 70.71067811865476)\n    def test_non_existent_file(self):\n        with self.assertRaises(FileNotFoundError):\n            task_func(self.test_data_dir, 'non_existent.xlsx', 'Sales')\n    def test_invalid_column_name(self):\n        with self.assertRaises(ValueError):\n            task_func(self.test_data_dir, 'test_file.xlsx', 'NonexistentColumn')\n    def test_empty_excel_file(self):\n        empty_df = pd.DataFrame()\n        empty_df.to_excel(self.test_data_dir + 'empty.xlsx', index=False)\n        with self.assertRaises(ValueError):\n            task_func(self.test_data_dir, 'empty.xlsx', 'Sales')\n        os.remove(self.test_data_dir + 'empty.xlsx')\n    def test_file_with_different_data_types(self):\n        data = {'Sales': [100, 'two hundred', 150, 300, '250']}\n        df = pd.DataFrame(data)\n        df.to_excel(self.test_data_dir + 'mixed_data.xlsx', index=False)\n        with self.assertRaises(TypeError):\n            task_func(self.test_data_dir, 'mixed_data.xlsx', 'Sales')\n        os.remove(self.test_data_dir + 'mixed_data.xlsx')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sort the given list in ascending order based on the degree value of its elements, calculate the cumulative sum of the sorted list, and draw a line chart of the cumulative sum.\nThe function should output with:\n    tuple: A tuple containing:\n    numpy array: The cumulative sum of the sorted list.\n    matplotlib.axes._axes.Axes: The Axes object of the plotted line chart.\nYou should write self-contained code starting with:\n```\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n```",
        "gt": "import math\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef task_func(list_input):\n    sorted_list = sorted(list_input, key=lambda x: (math.degrees(x), x))\n    cumsum = np.cumsum(sorted_list)\n    \n    # Plotting the line chart\n    ax = plt.plot(cumsum)[0].axes\n    ax.set_title(\"Cumulative Sum Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    \n    return cumsum, ax",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        cumsum, ax = task_func([10, 20, 30])\n        self.assertListEqual(list(cumsum), [10, 30, 60])\n        self.assertEqual(ax.get_title(), 'Cumulative Sum Plot')\n        self.assertEqual(ax.get_xlabel(), 'Index')\n        self.assertEqual(ax.get_ylabel(), 'Cumulative Sum')\n    def test_case_2(self):\n        cumsum, ax = task_func([5, 15, 25])\n        self.assertListEqual(list(cumsum), [5, 20, 45])\n        self.assertEqual(ax.get_title(), 'Cumulative Sum Plot')\n        self.assertEqual(ax.get_xlabel(), 'Index')\n        self.assertEqual(ax.get_ylabel(), 'Cumulative Sum')\n    def test_case_3(self):\n        cumsum, ax = task_func([])\n        self.assertListEqual(list(cumsum), [])\n        self.assertEqual(ax.get_title(), 'Cumulative Sum Plot')\n        self.assertEqual(ax.get_xlabel(), 'Index')\n        self.assertEqual(ax.get_ylabel(), 'Cumulative Sum')\n    def test_case_4(self):\n        cumsum, ax = task_func([1, 2, 3, 4, 5])\n        self.assertListEqual(list(cumsum), [1, 3, 6, 10, 15])\n        self.assertEqual(ax.get_title(), 'Cumulative Sum Plot')\n        self.assertEqual(ax.get_xlabel(), 'Index')\n        self.assertEqual(ax.get_ylabel(), 'Cumulative Sum')\n    def test_case_5(self):\n        cumsum, ax = task_func([5])\n        self.assertListEqual(list(cumsum), [5])\n        self.assertEqual(ax.get_title(), 'Cumulative Sum Plot')\n        self.assertEqual(ax.get_xlabel(), 'Index')\n        self.assertEqual(ax.get_ylabel(), 'Cumulative Sum')",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mean, the median, and the mode(s) of the age of the employees in the department \"EMP$$.\" Generate random ages for each employee within the range [22, 60].\nThe function should output with:\n    tuple: A tuple of mean, median, and a list of mode(s) of employee ages.\nYou should write self-contained code starting with:\n```\nimport random\nimport statistics\n# Constants\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n```",
        "gt": "import random\nimport statistics\n# Constants\nAGE_RANGE = (22, 60)\ndef task_func(dict1):\n    emp_ages = []\n    \n    for prefix, num_employees in dict1.items():\n        if not prefix.startswith('EMP$$'):\n            continue\n\n        for _ in range(num_employees):\n            age = random.randint(*AGE_RANGE)\n            emp_ages.append(age)\n\n    # If no employees in EMP$$ department\n    if not emp_ages:\n        return 0, 0, []\n    \n    mean_age = statistics.mean(emp_ages)\n    median_age = statistics.median(emp_ages)\n    mode_age = statistics.multimode(emp_ages)\n\n    return mean_age, median_age, mode_age",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        random.seed(0)\n        # Input: 10 employees in \"EMP$$\" department\n        d = {'EMP$$': 10}\n        mean_age, median_age, mode_age = task_func(d)\n        \n        # Checks\n        self.assertTrue(22 <= mean_age <= 60)\n        self.assertTrue(22 <= median_age <= 60)\n        self.assertTrue(all(22 <= age <= 60 for age in mode_age))\n    \n    def test_case_2(self):\n        random.seed(0)\n        # Input: Different number of employees in multiple departments\n        d = {'EMP$$': 10, 'MAN$$': 5, 'DEV$$': 8, 'HR$$': 7}\n        mean_age, median_age, mode_age = task_func(d)\n        \n        # Checks\n        self.assertTrue(22 <= mean_age <= 60)\n        self.assertTrue(22 <= median_age <= 60)\n        self.assertTrue(all(22 <= age <= 60 for age in mode_age))\n    \n    def test_case_3(self):\n        random.seed(0)\n        # Input: No employees in \"EMP$$\" department\n        d = {'MAN$$': 5, 'DEV$$': 8, 'HR$$': 7}\n        mean_age, median_age, mode_age = task_func(d)\n        \n        # Checks\n        self.assertEqual(mean_age, 0)\n        self.assertEqual(median_age, 0)\n        self.assertEqual(mode_age, [])\n    \n    def test_case_4(self):\n        random.seed(0)\n        # Input: Large number of employees in \"EMP$$\" department to increase likelihood of multiple modes\n        d = {'EMP$$': 1000}\n        mean_age, median_age, mode_age = task_func(d)\n        \n        # Checks\n        self.assertTrue(22 <= mean_age <= 60)\n        self.assertTrue(22 <= median_age <= 60)\n        self.assertTrue(all(22 <= age <= 60 for age in mode_age))\n    \n    def test_case_5(self):\n        random.seed(0)\n        # Input: Only one employee in \"EMP$$\" department\n        d = {'EMP$$': 1}\n        mean_age, median_age, mode_age = task_func(d)\n        \n        # Checks\n        self.assertTrue(22 <= mean_age <= 60)\n        self.assertEqual(mean_age, median_age)\n        self.assertEqual([mean_age], mode_age)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a list of 10 randomly picked strings from all possible strings of a given length from the provided series of characters, using a specific seed for reproducibility. >>> task_func(2, 123, alphabets=['x', 'y', 'z']) ['xz', 'xz', 'zx', 'xy', 'yx', 'zx', 'xy', 'xx', 'xy', 'xx']\nThe function should output with:\n    list: A list of generated strings.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n```",
        "gt": "import numpy as np\nfrom itertools import product\nimport string\ndef task_func(length, seed=None, alphabets=list(string.ascii_lowercase)):\n    np.random.seed(seed)\n    all_combinations = [''.join(p) for p in product(alphabets, repeat=length)]\n    return np.random.choice(all_combinations, size=10).tolist()",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_rng(self):\n        output1 = task_func(2, 123)\n        output2 = task_func(2, 123)\n        self.assertCountEqual(output1, output2)\n    \n    def test_case_1(self):\n        output = task_func(2, 123)\n        self.assertEqual(len(output), 10)\n        self.assertTrue(all(len(word) == 2 for word in output))\n        self.assertTrue(all(word.islower() for word in output))\n        expected = ['tq', 'ob', 'os', 'mk', 'du', 'ar', 'wx', 'ec', 'et', 'vx']\n        self.assertCountEqual(output, expected)\n        \n    def test_case_2(self):\n        output = task_func(3, 456)\n        self.assertEqual(len(output), 10)\n        self.assertTrue(all(len(word) == 3 for word in output))\n        self.assertTrue(all(word.islower() for word in output))\n        expected = ['axp', 'xtb', 'pwx', 'rxv', 'soa', 'rkf', 'cdp', 'igv', 'ruh', 'vmz']\n        self.assertCountEqual(output, expected)\n        \n    def test_case_3(self):\n        output = task_func(2, 789, alphabets=['x', 'y', 'z'])\n        self.assertEqual(len(output), 10)\n        self.assertTrue(all(len(word) == 2 for word in output))\n        self.assertTrue(all(letter in ['x', 'y', 'z'] for word in output for letter in word))\n        expected = ['yx', 'xz', 'xy', 'yx', 'yy', 'zz', 'yy', 'xy', 'zz', 'xx']\n        self.assertCountEqual(output, expected)\n    def test_case_4(self):\n        output = task_func(1, 100)\n        self.assertEqual(len(output), 10)\n        self.assertTrue(all(len(word) == 1 for word in output))\n        self.assertTrue(all(word.islower() for word in output))\n        expected = ['i', 'y', 'd', 'h', 'x', 'p', 'q', 'k', 'u', 'c']\n        self.assertCountEqual(output, expected)\n        \n    def test_case_5(self):\n        output = task_func(4, 200, alphabets=['a', 'b'])\n        self.assertEqual(len(output), 10)\n        self.assertTrue(all(len(word) == 4 for word in output))\n        self.assertTrue(all(letter in ['a', 'b'] for word in output for letter in word))\n        expected = ['baba', 'baab', 'aaaa', 'abaa', 'baba', 'abbb', 'bbaa', 'bbbb', 'baab', 'bbba']\n        self.assertCountEqual(output, expected)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Count the non-stop words in a sentence without the last word.\nThe function should output with:\n    count (int): The count of non-stopwords.\nYou should write self-contained code starting with:\n```\nimport re\nimport string\ndef task_func(content):\n```",
        "gt": "import re\nimport string\ndef task_func(content):\n    STOPWORDS = set([\n        \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \n        \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \n        \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \n        \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \n        \"these\", \"those\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \n        \"has\", \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\", \"an\", \"the\", \"and\", \n        \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \n        \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \n        \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \n        \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\"\n    ])\n\n    content = content.split(' ')\n    if len(content) > 1:\n        content = content[:-1]\n    else:\n        content = []\n    words = [word.strip(string.punctuation).lower() for word in re.split(r'\\W+', ' '.join(content)) if word]\n    non_stopwords = [word for word in words if word not in STOPWORDS]\n    count = len(non_stopwords)\n\n    return count",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test with a mix of stopwords and non-stopwords\n        self.assertEqual(task_func('this is an example content'), 1)\n    def test_case_2(self):\n        # Test with all stopwords except the last word\n        self.assertEqual(task_func('this is an the of'), 0)\n    def test_case_3(self):\n        # Test with no stopwords\n        self.assertEqual(task_func('example content programming'), 2)\n    def test_case_4(self):\n        # Test with punctuation\n        self.assertEqual(task_func('example, content; programming, python.'), 3)\n    def test_case_5(self):\n        # Test with an empty string\n        self.assertEqual(task_func(''), 0)\n    def test_case_6(self):\n        # Test with a single non-stopword\n        self.assertEqual(task_func('content'), 0)\n    def test_case_7(self):\n        # Test with a single stopword\n        self.assertEqual(task_func('the'), 0)\n    def test_case_8(self):\n        # Test with a mix and uppercase letters\n        self.assertEqual(task_func('This IS an Example Content'), 1)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate all permutations of a given list of numbers and calculate the sum of the factorials of each number in each permutation. If an empty list is given, the function returns empty lists. >>> fac, perm = task_func([0, 4]) >>> print(fac) [25, 25] >>> print(perm) [(0, 4), (4, 0)]\nThe function should raise the exception for: TypeError: If numbers is not a list of integers. ValueError: If input numbers are negative.\nThe function should output with:\n    list of int: A list containing the sums of the factorials of each number\n    in each permutation.\n    list of list of int: A list containing all permutations of numbers.\nYou should write self-contained code starting with:\n```\nfrom functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n```",
        "gt": "from functools import reduce\nfrom itertools import permutations\nimport math\ndef task_func(numbers):\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers should be a list of integers.\")\n    \n    if not all(isinstance(number, int) for number in numbers):\n        raise TypeError(\"numbers should be a list of integers.\")\n    \n    if not all(number >= 0 for number in numbers):\n        raise ValueError(\"each number in numbers should be non negative.\")\n\n    if len(numbers) == 0:\n        return [], []\n\n    all_permutations = list(permutations(numbers))\n    sums = [reduce(lambda a, b: a + b, [math.factorial(n) for n in permutation]) for permutation in all_permutations]\n    return sums, all_permutations",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        result, perm = task_func([1, 2])\n        expected = [3, 3]\n        expected_perm = [(2, 1), (1, 2)]\n        self.assertEqual(result, expected)\n        self.assertCountEqual(perm, expected_perm)\n    def test_case_2(self):\n        result, perm = task_func([1, 2, 3])\n        expected = [9, 9, 9, 9, 9, 9]\n        expected_perm = [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n        self.assertEqual(result, expected)\n        self.assertCountEqual(perm, expected_perm)\n    def test_case_3(self):\n        result, perm = task_func([1])\n        expected = [1]\n        expected_perm = [(1,)]\n        self.assertEqual(result, expected)\n        self.assertCountEqual(perm, expected_perm)\n    def test_case_4(self):\n        result, perm = task_func([])\n        expected = []\n        expected_perm = []\n        self.assertEqual(result, expected)\n        self.assertCountEqual(perm, expected_perm)\n    def test_case_5(self):\n        'wrong input'\n        self.assertRaises(Exception, task_func, 'a')\n        self.assertRaises(Exception, task_func, 1)\n        self.assertRaises(Exception, task_func, {})\n        self.assertRaises(Exception, task_func, -1.2)\n        self.assertRaises(Exception, task_func, [1.2, 1, 4])\n        self.assertRaises(Exception, task_func, [1, 'a', 4])\n        self.assertRaises(Exception, task_func, [1, 2, 4, 5, 7, 9, -1])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "This function takes a pandas DataFrame and standardizes its features using sklearn's StandardScaler, which standardizes features by removing the mean and scaling to unit variance. After standardization, it draws a histogram for each feature with 20 bins.\nThe function should output with:\n    standardized_data (pd.DataFrame): The standardized data.\n    axes_list (list): A list of matplotlib Axes objects representing the histograms for each feature.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n```",
        "gt": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(data: pd.DataFrame) -> (pd.DataFrame, list):\n    FEATURES = [\"Feature1\", \"Feature2\", \"Feature3\", \"Feature4\", \"Feature5\"]\n\n    scaler = StandardScaler()\n    data_standardized = pd.DataFrame(\n        scaler.fit_transform(data[FEATURES]), columns=FEATURES\n    )\n\n    axes_list = []\n    for feature in FEATURES:\n        fig, ax = plt.subplots()\n        ax.hist(data_standardized[feature], bins=20, alpha=0.5)\n        ax.set_title(\"Histogram of {}\".format(feature))\n        axes_list.append(ax)\n\n    return data_standardized, axes_list",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        self.columns = [\"Feature1\", \"Feature2\", \"Feature3\", \"Feature4\", \"Feature5\"]\n        np.random.seed(0)\n    def test_case_1(self):\n        # Test basic case\n        data = pd.DataFrame(\n            np.random.rand(100, 5),\n            columns=self.columns,\n        )\n        self.standardized_data_test(data)\n    def test_case_2(self):\n        # Test standardizing different distribution\n        data = pd.DataFrame(\n            np.random.exponential(scale=1.0, size=(100, 5)),\n            columns=self.columns,\n        )\n        self.standardized_data_test(data)\n    def test_case_3(self):\n        # Test standardizing data combined from different distributions\n        data_1 = np.random.rand(100, 3)\n        data_2 = np.random.exponential(scale=1.0, size=(100, 2))\n        data = pd.DataFrame(\n            np.hstack((data_1, data_2)),\n            columns=self.columns,\n        )\n        self.standardized_data_test(data)\n    def test_case_4(self):\n        # Test the function with highly skewed data\n        data = pd.DataFrame(\n            np.random.chisquare(df=1, size=(100, 5)),\n            columns=self.columns,\n        )\n        standardized_data, _ = task_func(data)\n        self.assertTrue(np.isclose(standardized_data.std().values, 1, atol=1e-1).all())\n    def test_case_5(self):\n        # Test function with a dataframe that has only one row\n        data = pd.DataFrame(\n            {\n                \"Feature1\": [0.1],\n                \"Feature2\": [0.2],\n                \"Feature3\": [0.3],\n                \"Feature4\": [0.4],\n                \"Feature5\": [0.5],\n            }\n        )\n        _, axes_list = task_func(data)\n        self.assertEqual(len(axes_list), 5)\n    def test_case_6(self):\n        # Test with columns having identical values across all rows.\n        data = pd.DataFrame(\n            {\n                \"Feature1\": [0.1] * 100,\n                \"Feature2\": [0.2] * 100,\n                \"Feature3\": [0.3] * 100,\n                \"Feature4\": [0.4] * 100,\n                \"Feature5\": [0.5] * 100,\n            }\n        )\n        standardized_data, _ = task_func(data)\n        # Identical values become NaN after standardization because variance is 0\n        expected_zeros = pd.DataFrame(\n            0,\n            index=np.arange(100),\n            columns=self.columns,\n        )\n        self.assertTrue(np.isclose(standardized_data, expected_zeros).all().all())\n    def test_case_7(self):\n        # Test with additional columns not in the expected FEATURES set\n        data = pd.DataFrame(\n            np.random.rand(100, 7),\n            columns=self.columns\n            + [\n                \"Extra1\",\n                \"Extra2\",\n            ],\n        )\n        _, axes_list = task_func(data)\n        self.assertEqual(len(axes_list), 5)\n    def test_case_8(self):\n        # Test with missing columns from the expected FEATURES set\n        data = pd.DataFrame(\n            np.random.rand(100, 3), columns=[\"Feature1\", \"Feature2\", \"Feature3\"]\n        )\n        with self.assertRaises(KeyError):\n            task_func(data)\n    def test_case_9(self):\n        # Test should fail when there is invalid input - empty dataframe\n        data = pd.DataFrame()\n        with self.assertRaises(KeyError):\n            task_func(data)\n    def test_case_10(self):\n        # Test should fail when there is invalid input - NaN\n        data = pd.DataFrame(\n            {\n                \"Feature1\": [np.nan, 0.2, 0.3],\n                \"Feature2\": [0.1, np.nan, 0.3],\n                \"Feature3\": [0.2, 0.2, np.nan],\n                \"Feature4\": [np.nan, 0.4, 0.5],\n                \"Feature5\": [0.5, 0.6, np.nan],\n            }\n        )\n        standardized_data, _ = task_func(data)\n        self.assertTrue(standardized_data.isnull().any().any())\n    def test_case_11(self):\n        # Test should fail when there is invalid input - inf\n        data = pd.DataFrame(\n            {\n                \"Feature1\": [np.inf, 0.2, 0.3],\n                \"Feature2\": [0.1, -np.inf, 0.3],\n                \"Feature3\": [0.2, 0.2, np.inf],\n                \"Feature4\": [-np.inf, 0.4, 0.5],\n                \"Feature5\": [0.5, 0.6, -np.inf],\n            }\n        )\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_case_12(self):\n        # Test the function with non-numeric columns.\n        data = pd.DataFrame(\n            {\n                \"Feature1\": [\"a\", \"b\", \"c\"],\n                \"Feature2\": [\"d\", \"e\", \"f\"],\n                \"Feature3\": [\"g\", \"h\", \"i\"],\n                \"Feature4\": [\"j\", \"k\", \"l\"],\n                \"Feature5\": [\"m\", \"n\", \"o\"],\n            }\n        )\n        with self.assertRaises(ValueError):\n            task_func(data)\n    def test_case_13(self):\n        # Function should fail if more than expected number of features (5)\n        data = pd.DataFrame(np.random.rand(100, 50))\n        with self.assertRaises(KeyError):\n            task_func(data)\n    def standardized_data_test(self, data):\n        np.random.seed(0)\n        standardized_data, axes_list = task_func(data)\n        # Check if the data is standardized (mean ~ 0 and standard deviation ~ 1)\n        self.assertTrue(np.isclose(standardized_data.mean().values, 0, atol=1e-2).all())\n        self.assertTrue(np.isclose(standardized_data.std().values, 1, atol=1e-1).all())\n        # Check the number of returned histograms\n        self.assertEqual(len(axes_list), 5)\n        # Check if each histogram is correctly titled\n        for ax, feature in zip(axes_list, self.columns):\n            self.assertEqual(ax.get_title(), f\"Histogram of {feature}\")\n        # Check if histograms have the right number of bins\n        for ax in axes_list:\n            self.assertEqual(len(ax.patches), 20)\n    def tearDown(self):\n        plt.close(\"all\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Analyze the weekday distribution in a list of date strings. Implemented by dateutil.parser. This function takes a list of date strings in \"yyyy-mm-dd\" format, calculates the weekday for each date, and returns a distribution of the weekdays.\nThe function should output with:\n    Series: A pandas Series of the weekday distribution, where the index represents\n    the weekdays (from Monday to Sunday) and the values represent the counts\n    of each weekday in the provided list.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\ndef task_func(dates_str_list):\n    DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    weekdays = [parse(date_str).weekday() for date_str in dates_str_list]\n    weekday_counts = np.bincount(weekdays, minlength=7)\n    \n    distribution = pd.Series(weekday_counts, index=DAYS_OF_WEEK)\n\n    return distribution",
        "test": "import unittest\nDAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Input 1: Testing with a sample date list\n        input_dates = ['2022-10-22', '2022-10-23', '2022-10-24', '2022-10-25']\n        expected_output = pd.Series([1, 1, 0, 0, 0, 1, 1], index=DAYS_OF_WEEK)\n        result = task_func(input_dates)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_2(self):\n        # Input 2: Testing with a list where all dates fall on a single weekday\n        input_dates = ['2022-10-24', '2022-10-31', '2022-11-07']\n        expected_output = pd.Series([3, 0, 0, 0, 0, 0, 0], index=DAYS_OF_WEEK)\n        result = task_func(input_dates)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_3(self):\n        # Input 3: Testing with an empty list\n        input_dates = []\n        expected_output = pd.Series([0, 0, 0, 0, 0, 0, 0], index=DAYS_OF_WEEK)\n        result = task_func(input_dates)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_4(self):\n        # Input 4: Testing with a mixed list of dates\n        input_dates = ['2022-01-01', '2022-02-14', '2022-03-17', '2022-12-31']\n        expected_output = pd.Series([1, 0, 0, 1, 0, 2, 0], index=DAYS_OF_WEEK)\n        result = task_func(input_dates)\n        pd.testing.assert_series_equal(result, expected_output)\n    def test_case_5(self):\n        # Input 5: Testing with dates spanning multiple weeks\n        input_dates = ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05', '2022-01-06', '2022-01-07']\n        expected_output = pd.Series([1, 1, 1, 1, 1, 1, 1], index=DAYS_OF_WEEK)\n        result = task_func(input_dates)\n        pd.testing.assert_series_equal(result, expected_output)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Serializes an object to a JSON string, adding support for datetime and Decimal data types. Handle complex data types not natively supported by the json module's default encoder. The `My_class` parameter is reserved for future use and does not affect the current implementation. Serialize a simple dictionary: >>> task_func({'name': 'Alice', 'age': 30}) '{\"name\": \"Alice\", \"age\": 30}'\nThe function should output with:\n    str: A JSON-formatted string representing `my_obj`, with datetime and Decimal objects properly serialized.\nYou should write self-contained code starting with:\n```\nimport json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n```",
        "gt": "import json\nfrom datetime import datetime\nfrom decimal import Decimal\ndef task_func(my_obj):\n    class DateTimeEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, datetime):\n                return obj.isoformat()\n            if isinstance(obj, Decimal):\n                return str(obj)\n            return json.JSONEncoder.default(self, obj)\n    return json.dumps(my_obj, cls=DateTimeEncoder)",
        "test": "import unittest\nfrom datetime import datetime\nfrom decimal import Decimal\nimport pytz  # Assuming pytz is used for timezone information in datetime objects\nclass TestCases(unittest.TestCase):\n    def test_datetime_serialization(self):\n        \"\"\"Ensure datetime objects are serialized to an ISO 8601 string.\"\"\"\n        obj = {'time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.utc)}\n        result = task_func(obj)\n        self.assertIn('2023-01-01T12:00:00+00:00', result)\n    def test_decimal_serialization(self):\n        \"\"\"Verify Decimal objects are serialized to their string representation.\"\"\"\n        obj = {'price': Decimal('99.99')}\n        result = task_func(obj)\n        self.assertIn('99.99', result)\n    def test_combined_serialization(self):\n        \"\"\"Test serialization of a complex object containing both datetime and Decimal.\"\"\"\n        obj = {'time': datetime(2023, 1, 1, 12, 0, tzinfo=pytz.utc), 'price': Decimal('99.99')}\n        result = task_func(obj)\n        self.assertIn('2023-01-01T12:00:00+00:00', result)\n        self.assertIn('99.99', result)\n    def test_simple_object_serialization(self):\n        \"\"\"Check serialization of simple key-value pairs.\"\"\"\n        obj = {'name': 'Alice', 'age': 30}\n        result = task_func(obj)\n        self.assertEqual(result, '{\"name\": \"Alice\", \"age\": 30}')\n    def test_null_serialization(self):\n        \"\"\"Ensure that `None` is correctly serialized as `null`.\"\"\"\n        obj = {'value': None}\n        result = task_func(obj)\n        self.assertEqual(result, '{\"value\": null}')\n    def test_list_serialization(self):\n        \"\"\"Test serialization of a list containing mixed data types.\"\"\"\n        obj = {'list': [datetime(2023, 1, 1, 12, 0, tzinfo=pytz.utc), Decimal('99.99'), None]}\n        result = task_func(obj)\n        self.assertIn('\"2023-01-01T12:00:00+00:00\"', result)\n        self.assertIn('99.99', result)\n        self.assertIn('null', result)\n    def test_unsupported_type(self):\n        \"\"\"Test that attempting to serialize an unsupported type raises an error.\"\"\"\n        class CustomObject:\n            pass\n        obj = {'custom': CustomObject()}\n        with self.assertRaises(TypeError):\n            task_func(obj)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Performs an OLS linear regression on a subset of the provided DataFrame. The subset is created by filtering rows where the value in the second column of 'columns' is greater than 'height' and the value in the third column is less than 'weight'. The first column in 'columns' is used as the dependent variable / target (y), and the rest as independent variables (X) in the regression. If df is empty, or if no rows match the conditions None is returned. >>> df = pd.DataFrame(np.random.randint(10,98,size=(100, 3)), columns=['Age', 'Height', 'Weight']) >>> model = task_func(df, 45, 72, columns=['Age', 'Height', 'Weight'])\nThe function should output with:\n    sm.regression.linear_model.RegressionResultsWrapper: The result of the OLS regression, or None if no rows meet the criteria or DataFrame is empty.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n```",
        "gt": "import pandas as pd\nimport statsmodels.api as sm\ndef task_func(df: pd.DataFrame, height: int, weight: int, columns: list) -> sm.regression.linear_model.RegressionResultsWrapper:\n    # Check for empty DataFrame\n    if df.empty:\n        return None\n\n    # Filter the DataFrame based on provided column names\n    selected_df = df[(df[columns[1]] > height) & (df[columns[2]] < weight)]\n    \n    # If no rows match the condition, return None\n    if selected_df.empty:\n        return None\n    \n    X = selected_df[columns[1:]]\n    y = selected_df[columns[0]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return results",
        "test": "import unittest\nimport numpy as np\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)  # Set a seed for reproducibility\n    def test_case_1(self):\n        # Test with a DataFrame of random values\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 3)), columns=['Age', 'Height', 'Weight'])\n        results = task_func(df, 50, 70, columns=['Age', 'Height', 'Weight'])\n        self.assertIsInstance(results, sm.regression.linear_model.RegressionResultsWrapper) \n        self.assertEqual(results.params.index.to_list(), ['const', 'Height', 'Weight']) # There should be 3 parameters: const, Height, Weight\n    def test_case_2(self):\n        # Test with a DataFrame where no rows match the condition\n        df = pd.DataFrame(np.random.randint(30,40,size=(100, 3)), columns=['Age', 'Height', 'Weight'])\n        results = task_func(df, 50, 70, columns=['Age', 'Height', 'Weight'])\n        self.assertIsNone(results) # There should be no regression result since no rows match the condition\n    def test_case_3(self):\n        # Test with a DataFrame where all rows match the condition\n        df = pd.DataFrame(np.random.randint(60,80,size=(100, 3)), columns=['Age', 'Height', 'Weight'])\n        results = task_func(df, 50, 70, columns=['Age', 'Height', 'Weight'])\n        self.assertIsInstance(results, sm.regression.linear_model.RegressionResultsWrapper) \n        self.assertEqual(results.params.index.to_list(), ['const', 'Height', 'Weight']) # There should be 3 parameters: const, Height, Weight\n    def test_case_4(self):\n        # Test with a DataFrame with different column names\n        df = pd.DataFrame(np.random.randint(0,100,size=(100, 3)), columns=['Years', 'Size', 'Mass'])\n        results = task_func(df, 50, 70, columns=['Years', 'Size', 'Mass'])\n        self.assertIsInstance(results, sm.regression.linear_model.RegressionResultsWrapper) \n        self.assertEqual(results.params.index.to_list(), ['const', 'Size', 'Mass']) # There should be 3 parameters: const, Height, Weight\n    def test_case_5(self):\n        # Test with an empty DataFrame\n        df = pd.DataFrame(columns=['Age', 'Height', 'Weight'])\n        results = task_func(df, 50, 70, columns=['Age', 'Height', 'Weight'])\n        self.assertIsNone(results) # There should be no regression result since DataFrame is empty",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw x random 5-card poker hands from a 52-card pack (without suits) and return the hands along with a counter of the drawn cards. The output is random; hence, the returned list will vary with each call.\nThe function should output with:\n    tuple: A tuple containing two elements:\n    list of list str: Each inner list contains 5 strings, representing a 5-card poker hand.\n    Counter: A counter of the drawn cards.\nYou should write self-contained code starting with:\n```\nimport random\nfrom collections import Counter\n# Constants\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n```",
        "gt": "import random\nfrom collections import Counter\n# Constants\nCARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\ndef task_func(x=1):\n    result = []\n    card_counts = Counter()\n\n    for i in range(x):\n        drawn = random.sample(CARDS, 5)\n        result.append(drawn)\n        card_counts.update(drawn)\n\n    return result, card_counts",
        "test": "import unittest\nimport random\nclass TestCases(unittest.TestCase):\n    def test_hand_size(self):\n        \"\"\" Test if the hand contains exactly 5 cards. \"\"\"\n        random.seed(0)\n        hand, _ = task_func()\n        self.assertEqual(len(hand[0]), 5)\n    \n    \n    def test_drawn_size(self):\n        random.seed(0)\n        hand, _ = task_func(2)\n        self.assertEqual(len(hand[0]), 5)\n        self.assertEqual(len(hand), 2)\n    \n    def test_counter(self):\n        random.seed(0)\n        hand, counter = task_func(1)\n        self.assertEqual(len(hand[0]), 5)\n        self.assertLessEqual(counter[hand[0][0]], 5)\n        self.assertGreaterEqual(counter[hand[0][0]], 1)\n    def test_card_uniqueness(self):\n        \"\"\" Test if all cards in the hand are unique. \"\"\"\n        random.seed(0)\n        hand, _ = task_func()\n        self.assertEqual(len(hand[0]), len(set(hand[0])))\n    def test_valid_cards(self):\n        \"\"\" Test if all cards drawn are valid card values. \"\"\"\n        random.seed(0)\n        hand, _ = task_func()\n        for card in hand[0]:\n            self.assertIn(card, ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'])\n    def test_randomness(self):\n        \"\"\" Test if multiple executions return different hands. \"\"\"\n        random.seed(0)\n        hands = [task_func()[0][0] for _ in range(10)]\n        self.assertTrue(len(set(tuple(hand) for hand in hands[0])) > 1)\n    def test_card_distribution(self):\n        \"\"\" Test if all possible cards appear over multiple executions. \"\"\"\n        random.seed(0)\n        all_cards = set()\n        for _ in range(1000):\n            all_cards.update(task_func()[0][0])\n        self.assertEqual(all_cards, set(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Extracts all names from a given text string that are not surrounded by square brackets and counts the frequency of each extracted name. It then creates a bar chart of the name frequencies and returns the name frequencies as a pandas Series and the bar chart plot's axes object along with the skewness and kurtosis of the name frequencies. If the skewness and kurtosis are nan, they are returned as None.\nThe function should output with:\n    tuple: A tuple containing:\n    pd.Series: A pandas Series with the frequency of each name.\n    Axes: A bar chart plot showing the name frequencies. If no names are found, this will be None.\n    float: The skewness of the name frequencies.\n    float: The kurtosis of the name frequencies.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nimport re\nfrom scipy import stats\ndef task_func(text):\n```",
        "gt": "import pandas as pd\nimport re\nfrom scipy import stats\ndef task_func(text):\n    # Extracting names from the text\n    names = re.findall(r'(.*?)(?:\\[.*?\\]|$)', text)\n    names = [name.strip() for name in names if name.strip()]  # Removing any empty or whitespace names\n\n    # Counting name frequencies\n    name_freqs = pd.Series(names).value_counts()\n    \n    # Creating a bar chart of name frequencies if there are names found\n    if not name_freqs.empty:\n        ax = name_freqs.plot(kind='bar', title=\"Name Frequencies\")\n        skewness = stats.skew(name_freqs)\n        kurtosis = stats.kurtosis(name_freqs)\n    else:\n        ax = skewness = kurtosis = None\n\n    if skewness == float('nan'):\n        skewness = None\n    if kurtosis == float('nan'):\n        kurtosis = None\n    \n    return name_freqs, ax, skewness, kurtosis",
        "test": "import unittest\nimport doctest\ntest_data = [\n    # Test Case 1: Basic names separated by addresses in square brackets\n    \"John Doe [123 MAIN ST, TOWN, ST 12345]Jane Smith [456 OTHER ST, CITY, ST 67890]\",\n    \n    # Test Case 2: Multiple occurrences of the same name\n    \"Alice [111 ALPHA ST, PLACE, ST 11111]Bob [222 BETA ST, LOCATION, ST 22222]Alice [333 GAMMA ST, REGION, ST 33333]\",\n    \n    # Test Case 3: Names with special characters and different patterns\n    \"Mr. X [444 X ST, XPLACE, ST 44444]Dr. Y [555 Y ST, YCITY, ST 55555]Z [666 Z ST, ZTOWN, ST 66666]\",\n    \n    # Test Case 4: Empty string\n    \"\",\n    \n    # Test Case 5: Only addresses without names\n    \"[777 FIRST ST, APLACE, ST 77777][888 SECOND ST, BCITY, ST 88888][999 THIRD ST, CTOWN, ST 99999]\",\n    # Long test case with multiple names and addresses\n    \"John Doe [123 MAIN ST, TOWN, ST 12345]Jane Smith [456 OTHER ST, CITY, ST 67890]Alice [111 ALPHA ST, PLACE, ST 11111]Bob [222 BETA ST, LOCATION, ST 22222]Alice [333 GAMMA ST, REGION, ST 33333]Mr. X [444 X ST, XPLACE, ST 44444]Dr. Y [555 Y ST, YCITY, ST 55555]Z [666 Z ST, ZTOWN, ST 66666]\"\n]\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Test Case 1: Basic names separated by addresses in square brackets\n        input_text = test_data[0]\n        name_freqs, plot, _, _ = task_func(input_text)\n        self.assertEqual(name_freqs[\"John Doe\"], 1)\n        self.assertEqual(name_freqs[\"Jane Smith\"], 1)\n        self.assertTrue(\"Name Frequencies\" in plot.get_title())\n    \n    def test_case_2(self):\n        # Test Case 2: Multiple occurrences of the same name\n        input_text = test_data[1]\n        name_freqs, plot, _, _ = task_func(input_text)\n        self.assertEqual(name_freqs[\"Alice\"], 2)\n        self.assertEqual(name_freqs[\"Bob\"], 1)\n    \n    def test_case_3(self):\n        # Test Case 3: Names with special characters and different patterns\n        input_text = test_data[2]\n        name_freqs, plot, _, _ = task_func(input_text)\n        self.assertEqual(name_freqs[\"Mr. X\"], 1)\n        self.assertEqual(name_freqs[\"Dr. Y\"], 1)\n        self.assertEqual(name_freqs[\"Z\"], 1)\n    \n    def test_case_4(self):\n        # Test Case 4: Empty string\n        input_text = test_data[3]\n        name_freqs, plot, _, _ = task_func(input_text)\n        self.assertTrue(name_freqs.empty)\n    \n    def test_case_5(self):\n        # Test Case 5: Only addresses without names\n        input_text = test_data[4]\n        name_freqs, plot, _, _ = task_func(input_text)\n        print(name_freqs)\n        self.assertTrue(name_freqs.empty)\n        # Long test case with multiple names and addresses\n        input_text = test_data[5]\n        name_freqs, plot, skewness, kurtosis = task_func(input_text)\n        self.assertEqual(name_freqs[\"John Doe\"], 1)\n        # Test for skewness and kurtosis\n        self.assertAlmostEqual(skewness, 2.04, places=2)\n        self.assertAlmostEqual(kurtosis, 2.17, places=2)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a DataFrame with detailed artificial sensor readings for specified timestamps and sensor statuses from a predefined list. The function generates sensor readings for Sensor1, Sensor2, and Sensor3 (or their corresponding named columns in the supplied column list) using sine, cosine, and tan functions, respectively, of the timestamp (converted to seconds), with a small random noise added to simulate real sensor data variability. SensorStatus is randomly chosen from the provided statuses for each timestamp.\nThe function should output with:\n    pd.DataFrame: Generated sensor readings for the given timestamps.\nYou should write self-contained code starting with:\n```\nimport math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n```",
        "gt": "import math\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd\ndef task_func(\n    start_time,\n    end_time,\n    step,\n    columns=[\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n    sensor_statuses=[\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"],\n    random_seed=42,\n):\n    np.random.seed(random_seed)\n\n    if start_time > end_time:\n        raise ValueError(\"start_time cannot be after end_time\")\n    if step < 0:\n        raise ValueError(\"step must be positive\")\n\n    timestamps = list(range(start_time, end_time, step))\n\n    data = []\n    for ts in timestamps:\n        dt = datetime.utcfromtimestamp(ts / 1000).strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n        sensor1 = math.sin(ts / 1000) + np.random.normal(0, 0.1)\n        sensor2 = math.cos(ts / 1000) + np.random.normal(0, 0.1)\n        sensor3 = math.tan(ts / 1000) + np.random.normal(0, 0.1)\n        status = np.random.choice(sensor_statuses)\n        row = [dt, sensor1, sensor2, sensor3, status]\n        data.append(row)\n\n    return pd.DataFrame(data, columns=columns)",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Test basic case\n        df = task_func(0, 10000, 100, random_seed=42)\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(\n            list(df.columns),\n            [\"Timestamp\", \"Sensor1\", \"Sensor2\", \"Sensor3\", \"SensorStatus\"],\n        )\n        self.assertTrue(\n            (df[\"SensorStatus\"].isin([\"OK\", \"MAINTENANCE_REQUIRED\", \"ERROR\"])).all()\n        )\n    def test_case_2(self):\n        # Test custom columns\n        columns = [\"Time\", \"Sensor_A\", \"Sensor_B\", \"Sensor_C\", \"Status\"]\n        statuses = [\"WORKING\", \"NEEDS_CHECK\", \"FAILED\"]\n        df = task_func(\n            1500, 3000, 50, columns=columns, sensor_statuses=statuses, random_seed=42\n        )\n        self.assertIsInstance(df, pd.DataFrame)\n        self.assertEqual(list(df.columns), columns)\n        self.assertTrue((df[\"Status\"].isin(statuses)).all())\n    def test_case_3(self):\n        # Test generated data integrity by comparing with expected results\n        np.random.seed(42)\n        ts = 0  # Using the starting timestamp for simplicity\n        expected_sensor1 = math.sin(ts / 1000) + np.random.normal(0, 0.1, 1)[0]\n        expected_sensor2 = math.cos(ts / 1000) + np.random.normal(0, 0.1, 1)[0]\n        expected_sensor3 = math.tan(ts / 1000) + np.random.normal(0, 0.1, 1)[0]\n        df = task_func(0, 100, 100, random_seed=42)\n        self.assertAlmostEqual(df.iloc[0][\"Sensor1\"], expected_sensor1, places=5)\n        self.assertAlmostEqual(df.iloc[0][\"Sensor2\"], expected_sensor2, places=5)\n        self.assertAlmostEqual(df.iloc[0][\"Sensor3\"], expected_sensor3, places=5)\n    def test_case_4(self):\n        # Test handling invalid start times\n        with self.assertRaises(ValueError):\n            task_func(10000, 0, 100)\n    def test_case_5(self):\n        # Test handling incorrect end times\n        with self.assertRaises(ValueError):\n            task_func(1000, 900, 100)\n    def test_case_6(self):\n        # Test column handling\n        columns = [\"Time\", \"Value1\", \"Value2\", \"Value3\", \"MachineStatus\"]\n        df = task_func(0, 500, 100, columns=columns)\n        self.assertEqual(list(df.columns), columns)\n        # Too few/too many columns\n        with self.assertRaises(ValueError):\n            task_func(0, 500, 100, columns[:-1])\n        with self.assertRaises(ValueError):\n            task_func(0, 500, 100, columns + [\"foo\", \"bar\"])\n    def test_case_7(self):\n        # Test sensor status handling\n        with self.assertRaises(ValueError):\n            task_func(0, 500, 100, [])\n        statuses = [\"RUNNING\", \"SHUTDOWN\", \"ERROR\"]\n        df = task_func(0, 500, 100, sensor_statuses=statuses)\n        self.assertTrue((df[\"SensorStatus\"].isin(statuses)).all())\n    def test_case_8(self):\n        # Test random seed\n        df1 = task_func(0, 500, 100, random_seed=42)\n        df2 = task_func(0, 500, 100, random_seed=42)\n        pd.testing.assert_frame_equal(df1, df2)\n    def test_case_9(self):\n        # Test invalid steps handling\n        with self.assertRaises(ValueError):\n            task_func(0, 1000, -100)  # Step is negative\n        with self.assertRaises(ValueError):\n            task_func(0, 1000, 0)  # Step is zero",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Imports data from a specified CSV input into an SQLite database and retrieves it as a pandas DataFrame. The function reads the CSV input (file path or `StringIO`), creates a new database table or replaces an existing one, inserts data into the table, and finally queries the table to return the data as a DataFrame.\nThe function should output with:\n    DataFrame: A pandas DataFrame containing the data from the newly populated SQLite database table. The DataFrame\n    provides a convenient and familiar data structure for further data manipulation and analysis in Python.\nYou should write self-contained code starting with:\n```\nimport sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\n# Constants\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n```",
        "gt": "import sqlite3\nimport pandas as pd\nimport csv\nfrom io import StringIO\n# Constants\nDATABASE_NAME = 'test.db'\nTABLE_NAME = 'test_table'\ndef task_func(csv_input):\n    # Check if the input is a StringIO object or a file path\n    if isinstance(csv_input, StringIO):\n        dr = csv.DictReader(csv_input)  # Read from StringIO\n    else:\n        with open(csv_input, 'r') as f:\n            dr = csv.DictReader(f)  # Read from a file\n\n    conn = sqlite3.connect(DATABASE_NAME)\n    cursor = conn.cursor()\n\n    # Create table and insert data\n    cols = dr.fieldnames\n    cursor.execute(f'DROP TABLE IF EXISTS {TABLE_NAME}')\n    cursor.execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join([f\"{col} TEXT\" for col in cols])})')\n    for row in dr:\n        cursor.execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([\"?\" for _ in cols])})', list(row.values()))\n\n    conn.commit()\n    dataframe = pd.read_sql_query(f'SELECT * from {TABLE_NAME}', conn)\n\n    conn.close()\n\n    return dataframe",
        "test": "import unittest\nfrom unittest.mock import mock_open, patch\nfrom pandas.testing import assert_frame_equal\nimport pandas as pd\nimport sqlite3\nimport os\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Prepare environment for each test case, setting up the database.\"\"\"\n        self.conn = sqlite3.connect(':memory:')  # Use in-memory database for tests\n    def tearDown(self):\n        \"\"\"Clean up after each test case.\"\"\"\n        self.conn.close()  # Ensure the database connection is closed after each test\n        if os.path.exists(DATABASE_NAME):\n            os.remove(DATABASE_NAME)\n    @patch('builtins.open', new_callable=mock_open,\n           read_data='Name,Age,Gender\\nAlice,25,Female\\nBob,30,Male\\nCharlie,28,Male')\n    @patch('sqlite3.connect')\n    def test_case_1(self, mock_connect, mock_open):\n        mock_connect.return_value = self.conn\n        expected_data = {\n            \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n            \"Age\": [25, 30, 28],\n            \"Gender\": [\"Female\", \"Male\", \"Male\"]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func('dummy_path.csv')\n        result_df[\"Age\"] = result_df[\"Age\"].astype('int64')  # Ensure types are matched\n        assert_frame_equal(expected_df, result_df)\n    @patch('builtins.open', new_callable=mock_open,\n           read_data='Product,Price,Stock\\nLaptop,1000,10\\nMouse,20,50\\nKeyboard,50,30')\n    @patch('sqlite3.connect')\n    def test_case_2(self, mock_connect, mock_open):\n        mock_connect.return_value = self.conn\n        expected_data = {\n            \"Product\": [\"Laptop\", \"Mouse\", \"Keyboard\"],\n            \"Price\": [1000, 20, 50],\n            \"Stock\": [10, 50, 30]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func('dummy_path.csv')\n        result_df[\"Price\"] = result_df[\"Price\"].astype('int64')  # Ensure types are matched\n        result_df[\"Stock\"] = result_df[\"Stock\"].astype('int64')  # Ensure types are matched\n        assert_frame_equal(expected_df, result_df)\n    @patch('builtins.open', new_callable=mock_open, read_data='Name,Age\\nAlice,25\\nBob,30')\n    @patch('sqlite3.connect')\n    def test_case_3(self, mock_connect, mock_open):\n        mock_connect.return_value = self.conn\n        result_df = task_func('dummy_path.csv')\n        self.assertEqual(result_df.shape, (2, 2))\n    def test_case_4(self):\n        # Non-existent file handling: Expecting a FileNotFoundError\n        non_existent_csv = 'non_existent.csv'\n        with self.assertRaises(FileNotFoundError):\n            task_func(non_existent_csv)\n    @patch('builtins.open', new_callable=mock_open, read_data='Name,Age\\n\"Alice\"\"; DROP TABLE test_table; --\",30')\n    @patch('sqlite3.connect')\n    def test_case_5(self, mock_connect, mock_open):\n        mock_connect.return_value = self.conn\n        result_df = task_func('dangerous_path.csv')\n        self.assertEqual(result_df.shape, (1, 2))\n    def test_case_6(self):\n        # Test with in-memory CSV data\n        test_csv_data = \"id,name\\n1,Alice\\n2,Bob\"\n        test_csv_file = StringIO(test_csv_data)\n        expected_data = {\n            \"id\": [\"1\", \"2\"],\n            \"name\": [\"Alice\", \"Bob\"]\n        }\n        expected_df = pd.DataFrame(expected_data)\n        result_df = task_func(test_csv_file)\n        assert_frame_equal(expected_df, result_df, check_dtype=False)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a random sample from a normal distribution, analyze its skewness and kurtosis, and create a histogram and a QQ plot to visualize the distribution.\nThe function should output with:\n    float: Skewness of the sample.\n    float: Kurtosis of the sample.\n    list: Paths to the saved plot files, empty if save_plots is False.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\ndef task_func(mean=123456.908, std_dev=1.2, save_plots=False):\n    sample = np.random.normal(mean, std_dev, 1000)\n    plot_paths = []\n\n    # Plotting histogram\n    plt.figure()\n    plt.hist(sample, bins=50)\n    if save_plots:\n        hist_path = \"histogram_plot.png\"\n        plt.savefig(hist_path)\n        plt.close()\n        plot_paths.append(hist_path)\n\n    # Plotting QQ diagram\n    plt.figure()\n    stats.probplot(sample, plot=plt)\n    if save_plots:\n        qq_path = \"qq_plot.png\"\n        plt.savefig(qq_path)\n        plt.close()\n        plot_paths.append(qq_path)\n\n    skewness = stats.skew(sample)\n    kurtosis = stats.kurtosis(sample)\n\n    return skewness, kurtosis, plot_paths",
        "test": "import unittest\nimport os\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    def test_default_parameters(self):\n        \"\"\"\n        Test task_func with default parameters.\n        \"\"\"\n        np.random.seed(0)\n        skewness, kurtosis, plot_paths = task_func()\n        self.assertAlmostEqual(skewness, 0, delta=0.5)\n        self.assertAlmostEqual(kurtosis, 0, delta=0.5)\n        self.assertEqual(len(plot_paths), 0)\n    def test_save_plots_true(self):\n        \"\"\"\n        Test task_func with save_plots set to True.\n        \"\"\"\n        np.random.seed(1)\n        _, _, plot_paths = task_func(save_plots=True)\n        self.assertEqual(len(plot_paths), 2)\n        for path in plot_paths:\n            self.assertTrue(os.path.exists(path))\n            os.remove(path)  # Clean up: remove created files\n    def test_custom_mean_std_dev(self):\n        \"\"\"\n        Test task_func with custom mean and standard deviation.\n        \"\"\"\n        np.random.seed(2)\n        mean = 100\n        std_dev = 10\n        skewness, kurtosis, _ = task_func(mean, std_dev)\n        self.assertAlmostEqual(skewness, 0, delta=1)\n        self.assertAlmostEqual(kurtosis, 0, delta=1)\n    def test_negative_std_dev(self):\n        \"\"\"\n        Test task_func with a negative standard deviation.\n        \"\"\"\n        np.random.seed(3)\n        with self.assertRaises(ValueError):\n            task_func(std_dev=-1)\n    def test_large_sample(self):\n        \"\"\"\n        Test task_func with a larger sample size.\n        \"\"\"\n        np.random.seed(4)\n        _, _, plot_paths = task_func(mean=1000, std_dev=50, save_plots=True)\n        self.assertEqual(len(plot_paths), 2)\n        for path in plot_paths:\n            self.assertTrue(os.path.exists(path))\n            os.remove(path)  # Clean up: remove created files",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates random numeric data and creates a histogram of the data. The color of the histogram bars is randomly selected from a predefined list.\nThe function should output with:\n    tuple:\n    ndarray: The array of randomly generated data.\n    str: The color used for the histogram bars.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n```",
        "gt": "import numpy as np\nimport matplotlib.pyplot as plt\n# Constants\nBAR_COLOR = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\ndef task_func(data_size):\n    np.random.seed(0)\n    data = np.random.randn(data_size)\n    color = np.random.choice(BAR_COLOR)\n    plt.hist(data, bins=np.arange(-3, 4, 0.5), color=color, edgecolor='black')\n    return data, color",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        data, color = task_func(100)\n        self.assertEqual(len(data), 100)\n        self.assertTrue(color in ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n    def test_case_2(self):\n        data, color = task_func(50)\n        self.assertEqual(len(data), 50)\n        self.assertTrue(color in ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n    def test_case_3(self):\n        data, color = task_func(150)\n        self.assertEqual(len(data), 150)\n        self.assertTrue(color in ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n    def test_case_4(self):\n        data, color = task_func(200)\n        self.assertEqual(len(data), 200)\n        self.assertTrue(color in ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n    def test_case_5(self):\n        data, color = task_func(250)\n        self.assertEqual(len(data), 250)\n        self.assertTrue(color in ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Scale the \"x\" and \"y\" arrays using the standard scaler of sklearn and plot them with given labels. Each pair of x and y arrays are scaled independently and plotted as a separate series with a label.\nThe function should output with:\n    matplotlib.figure.Figure: The figure object containing the plot.\nYou should write self-contained code starting with:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n```",
        "gt": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\ndef task_func(x, y, labels):\n    scaler = StandardScaler()\n\n    fig, ax = plt.subplots()\n\n    # Iterate over the datasets, scale each, and plot\n    for i in range(len(x)):\n        # Combine x and y values and scale them\n        xy = np.vstack((x[i], y[i])).T  # Transpose to get correct shape for scaling\n        xy_scaled = scaler.fit_transform(xy)  # Scale data\n\n        # Plot scaled data\n        ax.plot(xy_scaled[:, 0], xy_scaled[:, 1], label=labels[i])\n\n    ax.legend()  # Add a legend to the plot\n\n    return fig  # Return the figure object containing the plot",
        "test": "import unittest\nimport numpy.testing as npt\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        # Sample data for testing\n        self.x = [np.array([1,2,3]), np.array([4,5,6])]\n        self.y = [np.array([4,5,6]), np.array([7,8,9])]\n        self.labels = ['Group 1', 'Group 2']\n    def test_figure_type(self):\n        \"\"\"Test that the function returns a matplotlib figure.\"\"\"\n        fig = task_func(self.x, self.y, self.labels)\n        self.assertTrue(str(type(fig)).endswith(\"matplotlib.figure.Figure'>\"))\n    def test_plot_labels(self):\n        \"\"\"Test that the correct number of labels are in the legend.\"\"\"\n        fig = task_func(self.x, self.y, self.labels)\n        ax = fig.axes[0]\n        self.assertEqual(len(ax.get_legend_handles_labels()[1]), len(self.labels))\n    def test_non_empty_plot(self):\n        \"\"\"Test that the plot is not empty.\"\"\"\n        fig = task_func(self.x, self.y, self.labels)\n        ax = fig.axes[0]\n        self.assertTrue(len(ax.lines) > 0)\n    def test_scaled_values_range(self):\n        \"\"\"Test that the scaled values have a mean close to 0 and a standard deviation close to 1.\"\"\"\n        scaler = StandardScaler()\n        for xy in zip(self.x, self.y):\n            xy_scaled = scaler.fit_transform(np.vstack(xy).T)\n            self.assertTrue(np.allclose(np.mean(xy_scaled, axis=0), 0, atol=1e-7))\n            self.assertTrue(np.allclose(np.std(xy_scaled, axis=0), 1, atol=1e-7))\n    def test_input_unchanged(self):\n        \"\"\"Test that the original input arrays are unchanged after scaling.\"\"\"\n        x_original = [arr.copy() for arr in self.x]\n        y_original = [arr.copy() for arr in self.y]\n        task_func(self.x, self.y, self.labels)\n        for orig, after in zip(x_original, self.x):\n            npt.assert_array_equal(orig, after)\n        for orig, after in zip(y_original, self.y):\n            npt.assert_array_equal(orig, after)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draw a scatter plot of dots and mark the point with the maximum y-value. Return the axes object as well as the maximum y-value point.\nThe function should output with:\n    matplotlib.axes.Axes: Axes object with the scatter plot, with the x-axis labeled 'x', the y-axis labeled 'y', and the title 'Points with Max Y Point Highlighted'.\n    tuple: The point with the maximum y-value.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n```",
        "gt": "import numpy as np\nfrom operator import itemgetter\nimport matplotlib.pyplot as plt\ndef task_func(data):\n    max_y_point = max(data, key=itemgetter(1))\n    points = np.array(data)\n    x = points[:,0]\n    y = points[:,1]\n\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, label='Points')\n    ax.scatter(*max_y_point, color='red', label='Max Y Point')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Points with Max Y Point Highlighted')\n    ax.legend()\n    return ax, max_y_point",
        "test": "import unittest\nimport doctest\nclass TestCases(unittest.TestCase):\n    def test_case_1(self):\n        # Testing with three points where the third point has the highest y-value\n        ax, _ = task_func([(0.1, 0.2), (0.5, 0.6), (0.3, 0.9)])\n        self.assertEqual(ax.get_title(), 'Points with Max Y Point Highlighted')\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n        \n    def test_case_2(self):\n        # Testing with another set of points\n        ax, _ = task_func([(0.2, 0.3), (0.6, 0.7), (0.4, 0.8)])\n        self.assertEqual(ax.get_title(), 'Points with Max Y Point Highlighted')\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n        \n    def test_case_3(self):\n        # Testing with another set of points\n        ax, max_y_point = task_func([(0.3, 0.4), (0.7, 0.8), (0.5, 0.7)])\n        self.assertEqual(ax.get_title(), 'Points with Max Y Point Highlighted')\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n        self.assertEqual(max_y_point, (0.7, 0.8))\n        \n    def test_case_4(self):\n        # Testing with another set of points\n        ax, max_y_point = task_func([(0.4, 0.5), (0.8, 0.9), (0.6, 0.6)])\n        self.assertEqual(ax.get_title(), 'Points with Max Y Point Highlighted')\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n        self.assertEqual(max_y_point, (0.8, 0.9))\n    def test_case_5(self):\n        # Testing with another set of points\n        ax, max_y_point = task_func([(0.5, 0.6), (0.9, 0.1), (0.7, 0.5)])\n        self.assertEqual(ax.get_title(), 'Points with Max Y Point Highlighted')\n        self.assertEqual(ax.get_xlabel(), 'x')\n        self.assertEqual(ax.get_ylabel(), 'y')\n        self.assertEqual(max_y_point, (0.5, 0.6))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates traffic data for different vehicle types over a specified number of hours, saves the data to a CSV file with coloumns 'Time', 'Car', 'Bus', 'Truck', and 'Bike', and plots the data in a line chart with 'Time' on x-axis and 'Vehicle Count' on y-axis.\nThe function should output with:\n    tuple: Path to the CSV file and the matplotlib axes object of the line plot.\nYou should write self-contained code starting with:\n```\nimport csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n```",
        "gt": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\ndef task_func(hours, output_dir=OUTPUT_DIR):\n\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    FILE_PATH = os.path.join(output_dir, 'traffic_data.csv')\n    data = [['Time'] + VEHICLE_TYPES]\n    for i in range(hours):\n        row = [datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')] + [randint(0, 50) for _ in VEHICLE_TYPES]\n        data.append(row)\n\n    with open(FILE_PATH, 'w+', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(data)\n\n    df = pd.read_csv(FILE_PATH)\n\n    if df.empty:\n        return FILE_PATH, None\n\n    ax = df.plot(x='Time', y=VEHICLE_TYPES, kind='line', title='Traffic Data Over Time')\n    plt.xlabel('Time')\n    plt.ylabel('Vehicle Count')\n    plt.tight_layout()\n    plt.show()\n\n    return FILE_PATH, ax",
        "test": "import unittest\nfrom unittest.mock import patch\nimport shutil\nFILE_PATH = os.path.join(OUTPUT_DIR, 'traffic_data.csv')\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up the environment for testing.\"\"\"\n        if not os.path.exists(OUTPUT_DIR):\n            os.makedirs(OUTPUT_DIR)\n    def tearDown(self):\n        \"\"\"Clean up any files created during the tests.\"\"\"\n        # Check and remove the expected file if it exists\n        # if os.path.exists(FILE_PATH):\n        #     os.remove(FILE_PATH)\n        if os.path.exists(OUTPUT_DIR):\n            shutil.rmtree(OUTPUT_DIR)\n    @patch('matplotlib.pyplot.show')  # Mock plt.show to not render plots\n    @patch('csv.writer')  # Mock csv.writer to not actually write files\n    @patch('pandas.read_csv')  # Mock pd.read_csv to not read from disk\n    @patch(__name__ + '.randint', return_value=25)  # Mock randint to return a fixed value\n    def test_dataframe_content(self, mock_randint, mock_read_csv, mock_csv_writer, mock_plt_show):\n        mock_read_csv.return_value = pd.DataFrame({\n            'Time': ['2021-01-01 00:00:00.000000'],\n            'Car': [25], 'Bus': [25], 'Truck': [25], 'Bike': [25]\n        })\n        file_path, ax = task_func(1)\n        self.assertEqual(file_path, FILE_PATH)\n        mock_randint.assert_called()  # Ensures randint was called, but not specifics about calls\n        mock_read_csv.assert_called_with(FILE_PATH)\n        mock_plt_show.assert_called()\n    @patch(__name__ + '.pd.read_csv', return_value=pd.DataFrame(columns=['Time'] + VEHICLE_TYPES))\n    def test_empty_dataframe_on_zero_hours(self, mock_read_csv):\n        \"\"\"Check for empty DataFrame on zero hours input.\"\"\"\n        _, ax = task_func(0)\n        self.assertIsNone(ax)\n    @patch('os.makedirs')\n    @patch('os.path.exists', return_value=False)\n    def test_directory_creation(self, mock_path_exists, mock_makedirs):\n        \"\"\"Ensure directory is created if it does not exist.\"\"\"\n        if os.path.exists(OUTPUT_DIR):\n            shutil.rmtree(OUTPUT_DIR)\n        task_func(1)\n        mock_makedirs.assert_called_with(os.path.dirname(FILE_PATH))\n    @patch(__name__ + '.plt.show')\n    def test_plot_generation(self, mock_plt_show):\n        \"\"\"Verify that the plot is generated.\"\"\"\n        task_func(1)\n        mock_plt_show.assert_called()\n    @patch(__name__ + '.plt.show')  # Mock to skip plot rendering\n    def test_task_func_runs_without_error(self, mock_show):\n        \"\"\"Test task_func function to ensure it runs with given hours without raising an error.\"\"\"\n        try:\n            task_func(1)  # Attempt to run the function with a simple input\n            operation_successful = True\n        except Exception:\n            operation_successful = False\n        self.assertTrue(operation_successful, \"task_func should run without errors for given input\")",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Retrieve data from a specific API endpoint with the provided parameters, convert the data into a pandas dataframe, and draw a heatmap to show the correlation between numerical characteristics. The heatmap is displayed and also returned for further use or testing.\nThe function should raise the exception for: Thif function will raise a general Expection if the url is invalid, empty data, invalid data, and url cannot be accessed.\nThe function should output with:\n    tuple: A tuple containing:\n    DataFrame: The pandas DataFrame containing the data.\n    Axes: The matplotlib Axes object of the heatmap.\nYou should write self-contained code starting with:\n```\nimport requests\nimport json\nimport pandas as pd\nimport seaborn as sns\n# Constants\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n```",
        "gt": "import requests\nimport json\nimport pandas as pd\nimport seaborn as sns\n# Constants\nHEADERS = {\n    'accept': 'application/json'\n}\ndef task_func(url, parameters):\n    try:\n        response = requests.get(url, params=parameters, headers=HEADERS)\n        data = json.loads(response.text)\n\n        df = pd.DataFrame(data)\n        corr = df.corr()\n\n        ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n        return df, ax\n    except Exception as e:\n        raise(e)",
        "test": "# Importing the refined function from the refined_function.py file\nimport unittest\nfrom unittest.mock import patch, Mock\nimport json\nimport requests\nclass TestCases(unittest.TestCase):\n    @patch('requests.get')\n    def test_valid_request(self, mock_get):\n        mock_response = Mock()\n        mock_response.text = '{\"data\": [1, 2, 3], \"data_2\": [4, 5, 6]}'\n        mock_get.return_value = mock_response\n        url = 'https://api.example.com/data'\n        params = {'param1': 'value1'}\n        df, ax = task_func(url, params)\n        self.assertIsNotNone(df)\n        self.assertIsNotNone(ax)\n        # Check the content of the DataFrame\n        self.assertTrue(df.equals(pd.DataFrame({\"data\": [1, 2, 3], \"data_2\": [4, 5, 6]})))\n        # Check the correlation matrix\n        corr_matrix = df.corr()\n        # Check the data plotted on the heatmap\n        for i in range(df.shape[1]):\n            for j in range(df.shape[1]):\n                self.assertEqual(ax.texts[i * df.shape[1] + j].get_text(), str(int(corr_matrix.iloc[i, j])))\n    @patch('requests.get')\n    def test_empty_response(self, mock_get):\n        mock_response = Mock()\n        mock_response.text = '{}'\n        mock_get.return_value = mock_response\n        url = 'https://api.example.com/empty_data'\n        params = {'param1': 'value1'}\n        with self.assertRaises(Exception):\n            task_func(url, params)\n    @patch('requests.get')\n    def test_invalid_url(self, mock_get):\n        mock_get.side_effect = requests.exceptions.RequestException\n        url = 'https://api.invalid.com/data'\n        params = {'param1': 'value1'}\n        with self.assertRaises(Exception):\n            task_func(url, params)\n    @patch('requests.get')\n    def test_invalid_json_response(self, mock_get):\n        mock_response = Mock()\n        mock_response.text = 'Invalid JSON'\n        mock_get.return_value = mock_response\n        url = 'https://api.example.com/invalid_json'\n        params = {'param1': 'value1'}\n        with self.assertRaises(Exception):\n            task_func(url, params)\n    @patch('requests.get')\n    def test_valid_request_with_no_params(self, mock_get):\n        mock_response = Mock()\n        mock_response.text = '{\"data\": [1, 2, 3, 4, 5]}'\n        mock_get.return_value = mock_response\n        url = 'https://api.example.com/data'\n        df, ax = task_func(url, {})\n        self.assertIsNotNone(df)\n        self.assertIsNotNone(ax)\n    @patch('requests.get')\n    def test_plot_attributes(self, mock_get):\n        # Test attributes of the plot\n        mock_response = Mock()\n        mock_response.text = '{\"id\": [1, 2, 3, 4, 5], \"user\": [6, 7, 8, 9, 10]}'\n        mock_get.return_value = mock_response\n        url = 'https://api.example.com/data'\n        params = {'param1': 'value1'}\n        df, ax = task_func(url, params)\n        self.assertTrue(hasattr(ax, 'get_xlabel'))\n        self.assertTrue(hasattr(ax, 'get_ylabel'))\n        self.assertTrue(hasattr(ax, 'get_title'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Sample random numbers based on a given weighted distribution and return a histogram of the samples.\nThe function should output with:\n    histogram (dict): A histogram as a dictionary with the values as keys and counts as values.\nYou should write self-contained code starting with:\n```\nimport random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n```",
        "gt": "import random\nfrom collections import Counter\ndef task_func(values, weights, n_samples):\n    import random\n    samples = random.choices(values, weights=weights, k=n_samples)\n    histogram = dict(Counter(samples))\n\n    return histogram",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        result = task_func([1, 2, 3], [3, 2, 1], 1000)\n        self.assertTrue(set(result.keys()) == {1, 2, 3})\n    def test_2(self):\n        result = task_func([1, 2], [1, 1], 500)\n        self.assertTrue(set(result.keys()) == {1, 2})\n    def test_3(self):\n        result = task_func([1], [1], 300)\n        self.assertTrue(result == {1: 300})\n    def test_4(self):\n        result = task_func(list(range(1, 11)), list(range(10, 0, -1)), 5000)\n        self.assertTrue(set(result.keys()) == set(range(1, 11)))\n    def test_5(self):\n        result = task_func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 2500)\n        self.assertTrue(set(result.keys()) == {1, 2, 3, 4, 5})",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Calculate the mode of a list of elements with multiple repetitions of the original list. Functionality: - Takes a list and a repetition count as input. - Flattens the list with multiple repetitions. - Calculates the mode of the flattened list. >>> task_func([1, 2, 3], 5) ModeResult(mode=array([1]), count=array([5]))\nThe function should output with:\n    scipy.stats.ModeResult: An object containing the mode(s) and count(s) of the most frequently occurring element(s) in the flattened list.\nYou should write self-contained code starting with:\n```\nimport itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n```",
        "gt": "import itertools\nfrom typing import Any\nfrom scipy import stats\ndef task_func(input_list: list, repetitions: int) -> Any:\n    # Flattening the list with multiple repetitions\n    flattened_list = np.array(list(itertools.chain(*[input_list for _ in range(repetitions)])))\n    \n    # Calculating the mode\n    mode = stats.mode(flattened_list)\n    \n    return mode",
        "test": "import unittest\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        # Test with list of integers\n        result = task_func([1, 2, 3], 5)\n        self.assertEqual(result.mode.tolist(), [1])\n        self.assertEqual(result.count.tolist(), [5])\n        \n    def test_case_2(self):\n        # Test with list of strings\n        result = task_func(['A', 'B', 'C'], 10)\n        self.assertEqual(result.mode.tolist(), ['A'])\n        self.assertEqual(result.count.tolist(), [10])\n        \n    def test_case_3(self):\n        # Test with list of floating-point numbers\n        result = task_func([1.5, 2.5, 3.5], 4)\n        self.assertEqual(result.mode.tolist(), [1.5])\n        self.assertEqual(result.count.tolist(), [4])\n        \n    def test_case_4(self):\n        # Test with empty list\n        result = task_func([], 10)\n        self.assertEqual(result.mode.shape, (0,))\n        self.assertEqual(result.count.shape, (0,))\n        \n    def test_case_5(self):\n        # Test with mixed type list\n        result = task_func([1, 'A', 1.5], 3)\n        self.assertEqual(result.mode.tolist(), ['1'])\n        self.assertEqual(result.count.tolist(), [3])",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Given a Pandas DataFrame with random numeric values test if the data in each column is normally distributed using the Shapiro-Wilk test.\nThe function should output with:\n    dict: A dictionary with p-values from the Shapiro-Wilk test for each column.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nfrom scipy import stats\ndef task_func(df):\n```",
        "gt": "import numpy as np\nfrom scipy import stats\ndef task_func(df):\n\n    p_values = {}\n\n    for col in df.columns:\n        column_data = np.array(df[col])\n        \n        test_stat, p_value = stats.shapiro(column_data)\n        \n        p_values[col] = p_value\n\n    return p_values",
        "test": "import unittest\nimport pandas as pd\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n    \n    def test_case_1(self):\n        df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 2)\n        self.assertTrue('a' in p_values)\n        self.assertTrue('b' in p_values)\n        self.assertTrue(p_values['a'] > 0.05)\n        self.assertTrue(p_values['b'] > 0.05)\n    def test_case_2(self):\n        df = pd.DataFrame({'a': [-1, 0, 1], 'b': [4, 5, 6]})\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 2)\n        self.assertTrue('a' in p_values)\n        self.assertTrue('b' in p_values)\n        self.assertTrue(p_values['a'] > 0.05)\n        self.assertTrue(p_values['b'] > 0.05)\n    def test_case_3(self):\n        df = pd.DataFrame(np.random.normal(size=(100, 5)))\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 5)\n        for col in df.columns:\n            self.assertTrue(col in p_values)\n            self.assertTrue(p_values[col] > 0.05)\n    def test_case_4(self):\n        df = pd.DataFrame(np.random.normal(size=(100, 5)))\n        df['a'] = np.random.uniform(size=100)\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 6)\n        for col in df.columns:\n            self.assertTrue(col in p_values)\n            if col == 'a':\n                self.assertTrue(p_values[col] < 0.05)\n            else:\n                self.assertTrue(p_values[col] > 0.05)\n    def test_case_5(self):\n        df = pd.DataFrame(np.random.normal(size=(100, 5)))\n        df['a'] = np.random.uniform(size=100)\n        df['b'] = np.random.uniform(size=100)\n        p_values = task_func(df)\n        self.assertEqual(len(p_values), 7)\n        for col in df.columns:\n            self.assertTrue(col in p_values)\n            if col in ['a', 'b']:\n                self.assertTrue(p_values[col] < 0.05)\n            else:\n                self.assertTrue(p_values[col] > 0.05)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generate a Pandas DataFrame with random values, representing a dataset with multiple features. Calculate the correlation between the features and visualize this information using a heatmap.\nThe function should output with:\n    DataFrame: The generated DataFrame with random values.\n    Axes: The heatmap visualization of the correlation matrix.\nYou should write self-contained code starting with:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\ndef task_func(num_samples=100, num_features=5):\n```",
        "gt": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\ndef task_func(num_samples=100, num_features=5):\n    FEATURES = ['Feature' + str(i) for i in range(1, num_features + 1)]\n    SAMPLES = ['Sample' + str(i) for i in range(1, num_samples + 1)]\n    \n    data = np.random.rand(len(SAMPLES), len(FEATURES))\n    df = pd.DataFrame(data, index=SAMPLES, columns=FEATURES)\n    \n    corr_matrix = df.corr()\n    ax = sns.heatmap(corr_matrix, annot=True)\n    \n    return df, ax",
        "test": "import unittest\nimport matplotlib.pyplot as plt\nclass TestCases(unittest.TestCase):\n    \n    def test_case_1(self):\n        df, ax = task_func()\n        self.assertEqual(df.shape, (100, 5))\n        self.assertIsInstance(ax, plt.Axes)\n        \n    def test_case_2(self):\n        df, ax = task_func(10, 3)\n        self.assertEqual(df.shape, (10, 3))\n        self.assertIsInstance(ax, plt.Axes)\n    def test_case_3(self):\n        df, ax = task_func(50, 2)\n        self.assertEqual(df.shape, (50, 2))\n        self.assertIsInstance(ax, plt.Axes)\n        \n    def test_case_4(self):\n        df, ax = task_func(150, 6)\n        self.assertEqual(df.shape, (150, 6))\n        self.assertIsInstance(ax, plt.Axes)\n        \n    def test_case_5(self):\n        df, ax = task_func(5, 10)\n        self.assertEqual(df.shape, (5, 10))\n        self.assertIsInstance(ax, plt.Axes)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Perform PCA (Principal Component Analysis) on the provided DataFrame. This function takes a pandas DataFrame, scales the data using sklearn StandardScaler, and then applies PCA to reduce the number of dimensions of the data to the number specified by n_components, maintaining as much information as possible. >>> data = pd.DataFrame({ ...         'A': [-43, 212, 1, -12, 5], ...         'B': [-1, 0, 0, 9.76, 12.34], ...         'C': [1, 42, -13.2, 31, 1.23], ... }) >>> res = task_func(data, n_components=1) >>> print(res) 0 0 -0.793152 1  2.511947 2 -0.940253 3  0.069179 4 -0.847722\nThe function should raise the exception for: ValueError: If input data is not a DataFrame or contains non-numeric data. ValueError: If n_components is greater than the number of columns in the data. ValueError: If input data is empty.\nThe function should output with:\n    DataFrame: A new DataFrame with the original data transformed into 'n_components' principal\n    components.\nYou should write self-contained code starting with:\n```\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n```",
        "gt": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\ndef task_func(data, n_components=2):\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data should be a DataFrame.\")\n\n    if not data.apply(lambda s: pd.to_numeric(s, errors='coerce').notnull().all()).all():\n        raise ValueError(\"DataFrame should only contain numeric values.\")\n    \n    if n_components > len(data.columns):\n        raise ValueError(\"n_components should not be greater than the number of columns in data.\")\n    \n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(data)\n    pca = PCA(n_components=n_components)\n    data_reduced = pca.fit_transform(data_scaled)\n    return pd.DataFrame(data_reduced)",
        "test": "import unittest\nimport pandas as pd\nimport numpy as np\nclass TestCases(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(42)\n        self.data_small = pd.DataFrame({\n            'A': [1, 2, 3, 4, 5],\n            'B': [6, 7, 8, 9, 10],\n            'C': [11, 12, 13, 14, 15],\n            'D': [16, 17, 18, 19, 20]\n        })\n        self.data_large = pd.DataFrame(np.random.randint(0, 100, size=(1000, 50)))\n    def test_basic_functionality(self):\n        result = task_func(self.data_small)\n        self.assertEqual(result.shape, (5, 2))\n    def test_varying_components(self):\n        for components in [1, 3, 4]:\n            result = task_func(self.data_small, n_components=components)\n            self.assertEqual(result.shape, (5, components))\n    def test_large_dataset(self):\n        result = task_func(self.data_large, n_components=10)\n        self.assertEqual(result.shape, (1000, 10))\n    def test_invalid_input(self):\n        data_invalid = self.data_small.copy()\n        data_invalid['E'] = ['non-numeric'] * 5\n        with self.assertRaises(ValueError):\n            task_func(data_invalid)\n    def test_empty_dataframe(self):\n        data_empty = pd.DataFrame()\n        with self.assertRaises(ValueError):\n            task_func(data_empty)\n    def test_known_input(self):\n        expected = np.array([\n            [ 2.82842712e+00,  3.64856517e-16],\n            [ 1.41421356e+00, -1.21618839e-16],\n            [-0.00000000e+00,  0.00000000e+00],\n            [-1.41421356e+00,  1.21618839e-16],\n            [-2.82842712e+00,  2.43237678e-16]\n       ])\n        flipped = -expected\n        transformed_data = task_func(self.data_small, n_components=2).values\n        self.assertTrue(\n            np.allclose(transformed_data, expected, atol=0.1) or np.allclose(transformed_data, flipped, atol=0.1),\n            \"The PCA results do not match the expected values considering possible sign flips.\"\n        )",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Determine the time in seconds until the next turn of the year in a certain time zone from a given date string.\nThe function should output with:\n    int: The time in seconds until the next New Year in the specified timezone.\nYou should write self-contained code starting with:\n```\nfrom datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n```",
        "gt": "from datetime import datetime\nimport pytz\nfrom dateutil.parser import parse\ndef task_func(date_str, tz_str):\n    tz = pytz.timezone(tz_str)\n    given_date = parse(date_str).astimezone(tz)  # Correctly handle timezone conversion\n\n    next_year = given_date.year + 1\n    new_year = tz.localize(datetime(next_year, 1, 1, 0, 0, 0))  # Correctly create the New Year moment in the specified timezone\n\n    time_until_new_year = new_year - given_date\n\n    return int(time_until_new_year.total_seconds())",
        "test": "import unittest\nclass TestCases(unittest.TestCase):\n    def test_time_until_new_year(self):\n        # Test with a specific date and timezone\n        self.assertIsInstance(task_func('2023-12-31 23:59:59', 'UTC'), int)\n    def test_start_of_year(self):\n        # Test exactly at the start of a year\n        self.assertIsInstance(task_func('2023-01-01 00:00:00', 'UTC'), int)\n    def test_leap_year(self):\n        # Test a date in a leap year\n        self.assertIsInstance(task_func('2024-02-29 00:00:00', 'UTC'), int)\n    def test_different_timezone(self):\n        # Test with a non-UTC timezone\n        self.assertIsInstance(task_func('2023-12-31 23:59:59', 'America/New_York'), int)\n    def test_midyear(self):\n        # Test a date in the middle of the year\n        self.assertIsInstance(task_func('2023-06-15 12:00:00', 'UTC'), int)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Fetches a web page from a given URL, decodes its content from a specified encoding, and returns the parsed HTML using BeautifulSoup. If specified, 'lxml' is used as the parser for improved performance. In case of any failure (like network issues, invalid URL, or decoding errors), the function returns None.\nNote that: Notes: The function returns None if the URL is empty or None. Network errors, HTTP errors, and decoding issues are caught and result in None being returned. If the HTTP response status code is 200 (indicating success), the content is decoded using the specified encoding If the response status code is not 200, it implies an unsuccessful HTTP request (e.g., 404 Not Found, 403 Forbidden). In such cases, the function returns None, indicating that the webpage could not be successfully retrieved or was not available.\nThe function should output with:\n    BeautifulSoup object if the fetch and parse are successful.\n    None if the URL is invalid, the request fails, or parsing fails.\nYou should write self-contained code starting with:\n```\nfrom bs4 import BeautifulSoup\nimport requests\n# Constants\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n```",
        "gt": "from bs4 import BeautifulSoup\nimport requests\n# Constants\nURL = \"http://example.com\"\ndef task_func(url=URL, from_encoding=\"cp1251\", use_lxml=False):\n    if not url:\n        return None\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        if response.status_code == 200:\n            decoded_content = response.content.decode(from_encoding)\n            parser = \"lxml\" if use_lxml else \"html.parser\"\n            soup = BeautifulSoup(decoded_content, parser)\n            return soup\n        else:\n            return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None",
        "test": "from bs4 import BeautifulSoup\nimport unittest\nfrom unittest.mock import patch, MagicMock\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for task_func.\"\"\"\n    @patch(\"requests.get\")\n    def test_successful_fetch_and_parse_html_parser(self, mock_get):\n        \"\"\"Test if the function correctly fetches and parses a webpage with valid encoding using html.parser.\"\"\"\n        mock_get.return_value = MagicMock(\n            status_code=200, content=b\"Valid HTML content\"\n        )\n        result = task_func(\"http://example.com\", \"utf8\")\n        self.assertIsInstance(result, BeautifulSoup)\n    @patch(\"requests.get\")\n    def test_successful_fetch_and_parse_lxml_parser(self, mock_get):\n        \"\"\"Test if the function correctly fetches and parses a webpage with valid encoding using lxml.\"\"\"\n        mock_get.return_value = MagicMock(\n            status_code=200, content=b\"Valid HTML content\"\n        )\n        result = task_func(\"http://example.com\", \"utf8\", use_lxml=True)\n        self.assertIsInstance(result, BeautifulSoup)\n    @patch(\"requests.get\")\n    def test_connection_error_handling(self, mock_get):\n        \"\"\"Test how the function handles connection errors.\"\"\"\n        mock_get.side_effect = requests.exceptions.ConnectionError()\n        result = task_func(\"http://example.com\", \"utf8\")\n        self.assertIsNone(result)\n    @patch(\"requests.get\")\n    def test_incorrect_encoding_handling(self, mock_get):\n        \"\"\"Test how the function handles incorrect or unsupported encodings.\"\"\"\n        mock_get.return_value = MagicMock(\n            status_code=200, content=b\"Valid HTML content\"\n        )\n        result = task_func(\"http://example.com\", \"invalid_encoding\")\n        self.assertIsNone(result)\n    @patch(\"requests.get\")\n    def test_status_code_handling(self, mock_get):\n        \"\"\"Test if the function handles non-200 status code responses correctly.\"\"\"\n        mock_get.return_value = MagicMock(status_code=404)\n        result = task_func(\"http://example.com\", \"utf8\")\n        self.assertIsNone(result)\n    @patch(\"requests.get\")\n    def test_empty_url_handling(self, mock_get):\n        \"\"\"Test how the function handles an empty URL.\"\"\"\n        result = task_func(\"\", \"utf8\")\n        self.assertIsNone(result)",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Draws a histogram of the \"from_user\" values in the provided result. The color of the histogram bars is selected at random from the provided colors list.\nThe function should output with:\n    None: The function displays the histogram and does not return any value.\nYou should write self-contained code starting with:\n```\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n```",
        "gt": "import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef task_func(result, colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']):\n    from_user_values = [d['from_user'] for d in result if 'from_user' in d]\n    color = random.choice(colors)\n    plt.figure()\n    sns.histplot(from_user_values, color=color)\n    plt.show()",
        "test": "import unittest\nfrom unittest.mock import patch\nclass TestCases(unittest.TestCase):\n    \"\"\"Test cases for the task_func function.\"\"\"\n    def test_case_1(self):\n        random.seed(42)\n        result = [\n            {\"from_user\": 0}, \n            {\"from_user\": 0}, \n            {\"from_user\": 1}\n        ]\n        with patch(\"matplotlib.pyplot.show\") as mocked_show:\n            task_func(result)\n            mocked_show.assert_called_once()\n    def test_case_2(self):\n        random.seed(42)\n        result = []\n        with patch(\"matplotlib.pyplot.show\") as mocked_show:\n            task_func(result)\n            mocked_show.assert_called_once()\n    def test_case_3(self):\n        random.seed(42)\n        result = [\n            {\"hello\": 0}, \n            {\"world\": 1}\n        ]\n        with patch(\"matplotlib.pyplot.show\") as mocked_show:\n            task_func(result)\n            mocked_show.assert_called_once()\n    def test_case_4(self):\n        random.seed(42)\n        result = [\n            {\"from_user\": 0}, \n            {\"from_user\": 1}, \n            {\"from_user\": 2}\n        ]\n        colors = [\"orange\", \"purple\"]\n        with patch(\"matplotlib.pyplot.show\") as mocked_show, patch(\"random.choice\", return_value=\"orange\") as mocked_choice:\n            task_func(result, colors)\n            mocked_choice.assert_called_with(colors)\n            mocked_show.assert_called_once()\n    def test_case_5(self):\n        random.seed(42)\n        result = [\n            {\n                \"hello\": 0,\n                \"from_user\": 1,\n            },\n            {\n                \"world\": 1,\n                \"from_user\": 1\n            },\n            {\n                \"love\": 1,\n                \"from_user\": 1\n            }\n        ]\n        with patch(\"matplotlib.pyplot.show\") as mocked_show:\n            task_func(result)\n            mocked_show.assert_called_once()",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Generates a Folium map with markers for specified locations and calculates the geodesic distances between each pair of locations.\nThe function should raise the exception for: ValueError: If the input dictionary is empty.\nThe function should output with:\n    tuple: A tuple containing a Folium map object and a dictionary with pairs of location\n    names as keys and their distances in kilometers as values.\nYou should write self-contained code starting with:\n```\nfrom geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n```",
        "gt": "from geopy.distance import geodesic\nimport folium\ndef task_func(dic):\n    if not dic:\n        raise ValueError(\"Input dictionary is empty.\")\n    locations = [(k, v['Lat'], v['Lon']) for k, v in dic.items()]\n    distances = {}\n\n    folium_map = folium.Map(location=[locations[0][1], locations[0][2]], zoom_start=4)\n\n    for i in range(len(locations)):\n        folium.Marker([locations[i][1], locations[i][2]], popup=locations[i][0]).add_to(folium_map)\n\n        for j in range(i + 1, len(locations)):\n            distance = geodesic((locations[i][1], locations[i][2]), (locations[j][1], locations[j][2])).kilometers\n            distances[(locations[i][0], locations[j][0])] = distance\n\n    return folium_map, distances",
        "test": "import unittest\nfrom unittest.mock import patch\nimport folium  # Assuming the function task_func and folium are imported or defined appropriately.\nclass TestCases(unittest.TestCase):\n    def test_return_type(self):\n        \"\"\"Test that the function returns a tuple with a map and a dictionary.\"\"\"\n        result = task_func({'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 1, 'Lon': 1}})\n        self.assertIsInstance(result, tuple)\n        self.assertIsInstance(result[0], folium.folium.Map)\n        self.assertIsInstance(result[1], dict)\n    def test_distances_calculation(self):\n        \"\"\"Test the accuracy of the distance calculation. Assumes the distance is reasonable for nearby points.\"\"\"\n        _, distances = task_func({'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 0, 'Lon': 1}})\n        self.assertTrue(0 < distances[('Loc1', 'Loc2')] < 200)  # Rough check for distance in kilometers\n    def test_multiple_locations(self):\n        \"\"\"Test functionality with multiple locations.\"\"\"\n        _, distances = task_func({'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 0, 'Lon': 1}, 'Loc3': {'Lat': 1, 'Lon': 1}})\n        self.assertEqual(len(distances), 3)  # Expecting 3 pairs of locations\n    def test_marker_addition(self):\n        \"\"\"Test that markers are correctly added to the map. Assumes 1 TileLayer present.\"\"\"\n        folium_map, _ = task_func({'Loc1': {'Lat': 0, 'Lon': 0}})\n        self.assertEqual(len(folium_map._children), 2)  # One for TileLayer and one for Marker\n    @patch('geopy.distance.geodesic')\n    def test_distance_dict_structure(self, mock_geodesic):\n        \"\"\"Ensure the distance dictionary has the correct key-value structure.\"\"\"\n        mock_geodesic.return_value.kilometers = 100  # Mock distance as 100 km\n        _, distances = task_func({'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 0, 'Lon': 1}})\n        self.assertTrue(all(isinstance(key, tuple) and isinstance(value, float) for key, value in distances.items()))\n    def test_empty_input(self):\n        \"\"\"Test function behavior with an empty dictionary input raises ValueError.\"\"\"\n        with self.assertRaises(ValueError):\n            task_func({})\n    def test_single_location(self):\n        \"\"\"Test handling of a single location input.\"\"\"\n        folium_map, distances = task_func({'Loc1': {'Lat': 0, 'Lon': 0}})\n        self.assertEqual(len(distances), 0)  # No distances calculated\n        self.assertEqual(len(folium_map._children), 2)  # One for TileLayer and one for Marker\n    def test_negative_lat_lon(self):\n        \"\"\"Test handling of negative latitude and longitude values.\"\"\"\n        _, distances = task_func({'Loc1': {'Lat': -34, 'Lon': -58}, 'Loc2': {'Lat': -33, 'Lon': -70}})\n        self.assertTrue(all(value >= 0 for value in distances.values()))  # Distance should be positive\n    def test_large_distance_calculation(self):\n        \"\"\"Test accuracy for large distances, e.g., antipodal points.\"\"\"\n        _, distances = task_func({'Loc1': {'Lat': 0, 'Lon': 0}, 'Loc2': {'Lat': 0, 'Lon': 180}})\n        self.assertTrue(distances[('Loc1', 'Loc2')] > 10000)  # Expecting a large distance",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    },
    {
        "query": "Standardize a numeric array using sklearn's StandardScaler and encode the standardized data in base64 format as an ASCII string.\nThe function should output with:\n    str: The base64-encoded ASCII string representation of the standardized data.\nYou should write self-contained code starting with:\n```\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n```",
        "gt": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport base64\ndef task_func(data):\n    scaler = StandardScaler()\n    standardized_data = scaler.fit_transform(data)\n    standardized_data_str = np.array2string(standardized_data)\n    encoded_data = base64.b64encode(standardized_data_str.encode('ascii')).decode('ascii')\n    \n    return encoded_data",
        "test": "import unittest\nfrom unittest.mock import patch \nimport numpy as np\nimport base64\nfrom sklearn.preprocessing import StandardScaler\nclass TestCases(unittest.TestCase):\n    def test_output_is_string_and_valid_base64(self):\n        # Check that the function returns a valid base64 string.\n        data = np.array([[0, 0], [0, 0], [1, 1], [1, 1]])\n        encoded_data = task_func(data)\n        self.assertIsInstance(encoded_data, str)\n        try:\n            decoded_data = base64.b64decode(encoded_data).decode('ascii')\n            self.assertTrue(decoded_data.startswith('[[') and decoded_data.endswith(']]'))\n        except Exception as e:\n            self.fail(f\"Decoding base64 failed with error: {e}\")\n    def test_with_mocked_scaler(self):\n        # Mock StandardScaler to control the standardized output and check interaction\n        with patch('sklearn.preprocessing.StandardScaler.fit_transform', return_value=np.array([[0, 0], [0, 0], [1, 1], [1, 1]])) as mocked_method:\n            data = np.array([[10, 5], [15, 7], [12, 6]])\n            encoded_data = task_func(data)\n            mocked_method.assert_called_once()\n            decoded_data = base64.b64decode(encoded_data).decode('ascii')\n            self.assertIn('[[0 0]\\n [0 0]\\n [1 1]\\n [1 1]]', decoded_data) \n    def test_varied_data_sets(self):\n        # This will cycle through various datasets and ensure they're processed without error\n        datasets = [\n            np.array([[10, 5], [15, 7], [12, 6]]),\n            np.array([[25, 30], [35, 40], [45, 50]]),\n            np.array([[-5, -10], [-15, -20], [-25, -30]]),\n            np.array([[0.5, 0.7], [0.9, 1.1], [1.3, 1.5]])\n        ]\n        for data in datasets:\n            encoded_data = task_func(data)\n            self.assertIsInstance(encoded_data, str)\n            decoded_data = base64.b64decode(encoded_data).decode('ascii')\n            self.assertTrue(decoded_data.startswith('[[') and decoded_data.endswith(']]'))",
        "tag": [
            "BigCodeBench",
            "code"
        ],
        "source": "BigCodeBench"
    }
]